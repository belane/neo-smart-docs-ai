{"docstore/metadata": {"9173682d490692e95ea6d760545b39120746acea": {"doc_hash": "2a0514c9db6af49c746179d7b97e85c445cd5d43603b41b347326769e16156cc"}, "da3104b7cf63ccbec58b9b5c55f91272be8a0c9d": {"doc_hash": "9b2fb3812f3aa74a518a354f2d251915ce46f7aa5a3f000caff1df7c65338d96"}, "e62b2c9df7cd82a5fecb04f8cd3559b5dbfd2a4c": {"doc_hash": "19d46003760e7fb5493eb02d72ff42ec4c6a019d124ef344394adeeeda530b83"}, "fabb2fdf1843918d9885bbc8f3ad472795a2dfcd": {"doc_hash": "bfcac9d53df89125b7747f89932a1cbad8a861d6f6ac4d3cbe392d509951e358"}, "42d5307a86ab7b91f7b8d5904fbc84a22749b93b": {"doc_hash": "3f3714e3f43a6af607e54c6511835cf8cb409aef9df43e1cbbde3ab56c0e981a"}, "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb": {"doc_hash": "c20c04f205afe82ecf493930927103f5ab7573f49e001601564e5c285b53a04b"}, "0e0c712c4dc8405bace5175f92c0f9317f542263": {"doc_hash": "e0b98ebec24d86976041111ca69adfa10fc984243af731de22df8f714306572b"}, "ea15d5b4a547a3cb5b744b26c5121271110d9d6e": {"doc_hash": "63e0dbd2a00434b3510e5cfa991f3857e8ad0aa6ed7ca4784d63bbe476cdee36"}, "855820ccd70b36a4ebdf0708322fe1d2f692aa20": {"doc_hash": "e101a3cbf33ac10b42665dbe3cdd1b24824c1a16bb3d56010023a49b63183de6"}, "40e6988df92f95cc6e47ac5ad74396c709d80fbf": {"doc_hash": "47deccd6dc81ed5bedbb424be5995608d012d341f2dc4a6981cfedb4cbb65809"}, "c5934a0545fd0134853929cf387d1285c0fd4eb8": {"doc_hash": "e6c8d0de29123291c973cf597c3bf95fc04c80f0f12e9ffae5436d9993debfd4"}, "1425ffea42ccca97279f2cc096e2b2f7f43515e1": {"doc_hash": "98554b29bf06e5485c4af538f221eb3f0ec381fe8e23fd59deafcfd1c006c3f6"}, "0b79593a3abe13f563d2210c3ecdaad08559f125": {"doc_hash": "48a61ea8bc1684dd9efd0decf0f4a2c93661214a3214cedc088acbdacdefa7c4"}, "002739eab60a14f1877dab15a434607aa53b87fc": {"doc_hash": "8f5ffc4ed44b427f0687b7cbc77b6a9b92f7f3f4f648568c86ba132654cd06a8"}, "482b84522da2fbed3394563f6e985a5a5b6f46c3": {"doc_hash": "fc3a8147c3a6809538af467db9cb487b9d86fc262d8ee87185d6013d372246e2"}, "12fbcca8bee0c06e3445ee65e8529f3108cecb19": {"doc_hash": "c02bc408109f36dc182485a5048411b7eb51f31ce050fd0d1361e037ff6d9ee9"}, "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff": {"doc_hash": "c58eeffb81c782d90343c59d28166bc1aa0c328326826be3f34ba69f27a3c1dd"}, "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef": {"doc_hash": "f2a342065928746ca58872127a24dafda2885ea4cc88ed531fa8480b7fe29b04"}, "6ec16da4fc74b224c7d481dee261e7ac40fed42c": {"doc_hash": "e93d5d8c555c2c5af6bb1d4070e56bc4a22304b7810242f95e05925e3f4d5e22"}, "7559b131bf41790c8f93ec1f26268d3e7db187a5": {"doc_hash": "617bba9f96d8fcf3e3b443f5d334839c257e522a88f1c09fc6b0d64e4a1462d3"}, "411f00abaafdd7d8bf6f3586b259836b30f73389": {"doc_hash": "35081db70644b257f78d7e0352587ccbc92b10a31886ea25125bb5ed06c8b45a"}, "a7a10bc5ccbbea2f1262f525a538fb9401b52bbd": {"doc_hash": "8eb163381e1ec4664641d862e9fa36beee5965e3f719dad620acfd93a89c668d"}, "b58f70d0969b7e9992c63784d84a72874772bbb1": {"doc_hash": "f04b33f30f5a190e5881367957d1a13319a031647193c76d7469a1226e21bf80"}, "258e372521dd8449dda962e33a6ab05c857cff09": {"doc_hash": "bd6b3318c3a915b76162e97827be893488c033e39cd4d664848b2b30c45afb87"}, "ae55280fd826418cfd090ea78fe4a166e3b4db16": {"doc_hash": "faad743d4c3dc4d49e99e4173ad7ad4f96ceec79a44d5a2fe18b923779c837a1"}, "c7429042916671dabd3caf443829149208214a34": {"doc_hash": "115176aba4dc7551dfddee6cdf9d3221f2648425acc109646c3ab0f02f8eb027"}, "8b58d408d24fb8cb32b122293feb9319c0113271": {"doc_hash": "8985241e1ee66fdfc71847e6d4d39b3f5db88fd2448ea83333442ffed2e6ba37"}, "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66": {"doc_hash": "985f3ad5b2687d9de19413b1b02378223bd0b02a96f8ae00b18735beb6d1af90"}, "fcedba8087fd732ba9bbf616f76d12206839e2b5": {"doc_hash": "a929768255d28ac2076474edac4f6ebab25d034aa406c69a766886b7e5a05738"}, "646063726f109495484d7522abb13f00c7c684f4": {"doc_hash": "bc60f435f5a8294aa4c39094a9960b39f2177712cfb5bb488db0982152cfdcc5"}, "4882a2fe714b9001994272f13c7e0437e1f5cb99": {"doc_hash": "cd229699fa2902c43335a04637581ba27807a46fd91b3d21e4ef7a3f2a2fd7c9"}, "f0f5db55d43628fda1b6a6bc1da1f95731ba83dc": {"doc_hash": "2d53bafe3e792901a5946ab2c7c0215c0bdbb9bdfbf75aa7aee450ebf8a61489"}, "735d40528fddd510f26a26dfc86f52978b7d0e8a": {"doc_hash": "655277f91d637bbca3db0fd3fe82b39fd2ed56ce0b88786dca8e770295304a59"}, "f511f52fbc4cc9f87a3ed5a9c3b37fb6862ecba9": {"doc_hash": "6520c4d0777e77f05d4ec62fcbbabe8080063686b5b9aee048010d19e091423a"}, "ed76af1c7743556b464d363037967b0b46ac677d": {"doc_hash": "1d57f111ea9071307f98de2f79621ded03896bdd2400a4a848d666c238e7c8cd"}, "bea39f524f33c090c079450175271269a59c92c9": {"doc_hash": "b221f89b02682d0d988fe40f1a38c96fd6e0c2511f8eb9b66cf7549f261b9657"}, "0548048c629300181a159f3493bddc5618b16567": {"doc_hash": "d979368a4b35e495639726a0181c501ae74c292818e13972965309890a01d76f"}, "5bf1cf88b972cc6feb32ad12a20e5319e68644a1": {"doc_hash": "8c9bd0d1982a6b9e549244acd4646e38f6ade5f5d0a648d922d1f59fbb66ab0a"}, "7b96b3a91d8e9e8b32ae0f8d17d0abab970b0750": {"doc_hash": "f77367d6cd96dcf6cd7861f4e0fa86608b274bd1b3058ea98d9ba1d661155119"}, "3e33209cf119a9713609610a7bd2b2b4fd17ba4e": {"doc_hash": "fb33dfdf91285cb8a50a9bf0a0447088c6169f7ae4ad81b94b7b357bd8cd07a0"}, "d35783ee9c448dda98c3aac7fe2be9bc692f597c": {"doc_hash": "aabaa25b7d90a03b5efdbe2f453114f5da1ffc6c8ce854403febc48c7ad1aa05"}, "b2d8691844beb4f5c62c09b71a2ca6f546d7d4e1": {"doc_hash": "fc396accdc7223e4237a14afc2cf8c9f3483d577ef2aa8fcd9aadf477cd18f6d"}, "c9703fb9da44831bf3fcf0389f5c6204b9fc2ff7": {"doc_hash": "68a2795c51e864bb9b182e3cfacbfb93888c61cd3d7f153e40d4db60c749c3a2"}, "3ed333957855992aea21bf7831656a79429d11a7": {"doc_hash": "7ca01219041e1c3a98c704295155e5451bd1d7f626a60d517fcc0678fbef046a"}, "2f705619e09b0779c5868a0c30a13034caf69c00": {"doc_hash": "14dad5293960dd17c4c2ededdd5cdeafd04a85e1f5cbdc81bb16c97ed539d323"}, "678988222db96675acd73ba5c66bf71548d5db33": {"doc_hash": "8fc3e24ee5b28afafca05030c41b8cbac1996895c2932abad63ae171c6782ba0"}, "76da6c0201680703b0965a3b79215a10c2e802e8": {"doc_hash": "0ee94af0a96208897b3daa353befd29437bff56a619edb3029cfaedfb3af9024"}, "baddb1bbf38fb3141d460051bfe189358a8878c4": {"doc_hash": "32fc9534da17e4295842e2a4f021459140918359ea61d033d825553945a3bab1"}, "c9955194a150523643ef678ba71151822e97c72f": {"doc_hash": "ff83926cc442eb50c53db0ea6109d61c6c4e6bafe18e231f3253f9aee8d28117"}, "3743ab5933f8b5a7ac780947ff268f9548093bf9": {"doc_hash": "6a6fe4d1831d540efd203983445386c4b62d2f35d91451b1e3f6b801ebe16406"}, "04773228c8cda33bfedd9eed3dd9e30b7b868a97": {"doc_hash": "1f07ba76e0049cc742c196e1cf8faf5af48eacad4ddeff8f5629f0c4c122b0dd"}, "42ca53d382f933c7e75ee59ba174c9a5f88216a1": {"doc_hash": "a475ca0795b811635f28096a03abb595828339ee26fd2bc3dfe0d07c5999bf31"}, "23776682c639645af8424cb160000e8dbfeb9063": {"doc_hash": "6454511dd1d8117b6df4035e871fdf7a551cca5539ce7c41f8504a0ac7bc00c0"}, "bfef6cb83803cd3595e3e641edaba1ecd8d893d1": {"doc_hash": "d089203b835b6f77e12bfb373daa8237db9e9d629f30f3e0f3225088acd25ef7"}, "9ffa64d23dbbcfc718c2e076ea4841d265ca072c": {"doc_hash": "eb20ed7eb11599d9f2f1cd356ee79250a8dd13a61f81c6239f029107c75d1f77"}, "16b9c5c0493f8bfe727e4e139343a6a4a7aa8da2": {"doc_hash": "3514e471358bbb588aaa9720abf7259846de5959d7a8b281b02f6b8e53ffbcdf"}, "46a4ba4c245feecd6aa2ad2a02f14b35aa203ce7": {"doc_hash": "12aad8320b92ac3896ce23dd2a3a9d6a930fa3cb498a5e4539798ada7e3fe433"}, "42423117fffa4424452f942f8c1ae359fa66b585": {"doc_hash": "7637611f2ba92fc4d25a1a3b9cd21d6c0ddb5634aade8b9fee8eb1d5a30fc2db"}, "07dabe8745e40a791294aae16fe02e8a326e90ac": {"doc_hash": "fe67d58ea984c2a8aef3a1d0682ea851dbb5107fa2705c1c51da7141b4fab4a1"}, "1038dbd099dc82010c7137a160e6ac18060a48d4": {"doc_hash": "5b80e3f1b66b6f6ff2902357364effee8cac5c6a1a841e59da345b8c15679029"}, "4cd0931c2ded02ae30ac96be7562e43523167826": {"doc_hash": "b80e383fd2b9ae705dc1aec903ace719a1f850e30c88c6bfff8094ffadc4fd85"}, "2b84d29cf798f8028fb890af3f2433ff794b7c65": {"doc_hash": "fe9e0af862f50ada296dc0e41a5e0ec0972ba2f6c2b747416a1b755fb0dfd457"}, "15d14ada85a706762e9d64584d7f7c57b4fea321": {"doc_hash": "e55b6c9d58420cbb52b4c9252194822a33697c86e22d354649bbf7702d3eb568"}, "bf14935ee27ccf10503e29b45d6583d46bd077d8": {"doc_hash": "d2efb2d85b444ee3dea42eb006260cf37ddc74267723560c4f8bcbc11ea13a7e"}, "df222dc1540a5712d14a666de832b4506fe754c6": {"doc_hash": "de976998b6dd13ed0f72a499935eb825b95e6b37793944a5d28e1735040323fb"}, "c5ee54ebffbf1d7c16ce8e8b9ef6b89541e850b3": {"doc_hash": "fb3a2e5340f365c31156f2ee99094def734c443359ef1676b252fbc313b2d7b5"}, "c09362cc87962de69302bf671b07990507d8d0f3": {"doc_hash": "1713dc7546ddb21ebe4c0f7b239dc97358c83f7780ae058c270a381a840af7d1"}, "4660c21f482836bf37c4241d48c68bb2bbfd3a7f": {"doc_hash": "21c3d37666de0421655f94426327b8618a51fe4d394bb32666acebebede0b24b"}, "16055bd9e15434a976cb5eace890ace537f262f7": {"doc_hash": "5520c47ac43a60e8c5cf19c8bfe9ddade17bd3242688cc5e26c20e4006eb7ffd"}, "8ef591d31307e1985e7d377e2811e9e3e3cdeebc": {"doc_hash": "ed3017a9ca8477313025b50cf083e098f851d64950b3a651032f6725777adccb"}, "36dccbbe64e2fb11628cb45681b957d3bbbc6c14": {"doc_hash": "50c4c24a0caa318d108029c4d0bfa5ef6a1f227cdf471c478ec6510f4d5791a9"}, "1745234eab7894f819f14395c0ce93f6ecc7b72d": {"doc_hash": "282ab914413b25580c675d2a5661436bb1c40bdea8a11a7e1072490337bf50c9"}, "35b840f41ecf41337534f4b57b833ed112bd72f0": {"doc_hash": "f60df0cafc735684cfe6a5574459aee7d9f335ac5afacd752edbf8ab6418e7d4"}, "77fea4a8a53be2dcf1e2cf8de41cac3cdfed3d30": {"doc_hash": "606a394f3ab09934c17140bf0f62b98d7b4fad3a5006ec0778756b319d392e0e"}, "938d0901aaca9015140edc6121e54133fe5043ea": {"doc_hash": "b158c236793cdb1494300be15935551591eb96893293d211fc14000a8bc853cd"}, "a39cad07b676292d5ca4bc307fc2e864b64021c1": {"doc_hash": "f8f3942004a726e2049601a5ac7a8277f10465f546a09df51320c53784a50f12"}, "10ca7a4a9b7973152b451f03803bf73bd33826dd": {"doc_hash": "e0784117d5a5d3973768088bb4e4db815062ebd88cecc5343438838113bf9a75"}, "d5dccca8e365f304565ed0afc3a787ceae2b3919": {"doc_hash": "559f2c0fc1a63ad1e8384f6521800eef4e23f8a00a70b3a79a6045d7a0d13794"}, "a654c63c595171096a6b6736d27ddb04df37b6e2": {"doc_hash": "d4857ba7c71c676894d799d48837832b94ebc63c95ad368a7b0ecbc2db7f5574"}, "16b076dd76191d30f83f62b041355418f301160f": {"doc_hash": "fd98b352f0f498fe88ad6a3fad4a89bfab56f9e8f7bfc54ed9ea7b482beba3ae"}, "0ad6cbcb81b8b10208588d14dc652df545ad3720": {"doc_hash": "64c8cd3546e0bb37ab2069fca8cf888ebc60341e50be26e07a8f56afe7b5f651"}, "d9e3ae301641eada53ae86f6cec29341d00e64a8": {"doc_hash": "1dac2990bcf8450160949fdb02af941576820f311f4a508e3c1f9825faed1e5f"}, "3d1cfee582ca2798faf9ab1f8ed3d81e5d838c11": {"doc_hash": "c447cd01566925a18f38e6c48d4c7630180319b624868a3210645989028a7650"}, "21f851e90403cd8766bf60670d89810100439105": {"doc_hash": "af01a74b25b49ea0b7f01b72c7581ae5ee04d0fc784acff592394ac22dd003ec"}, "73be24af12777a8ce653fbcfc4e756ee2f4d8d36": {"doc_hash": "23d40f70ba10d2b73cc300d14c7b45a0a462024c080a3dc97860d69ef4b56682"}, "b108715d91d467c0b202d1d47cf665b15d4a37d1": {"doc_hash": "c29e02f629c2b1479f5218673e8ffc2f360fa7250e33cd304ba454e3cda4b83d"}, "dd8dfae87073e39fe801c9efc37f087599f68034": {"doc_hash": "f39d0fce3ff852d91bf633e1cd3078af5a8a26f2d26aa98cd839af65d0144864"}, "ed071685063a0930dd3a5411e1d04bba1fae7032": {"doc_hash": "a132b4674e6ed6f7db0e888c0cf9c68e1580c71dcd1389677fd0c754a537cdbf"}, "e886e76ae030ff1f694d46fb4ad273fc73b1bd85": {"doc_hash": "c7f71b2ce12dd14d6f6eb20411a63460ec5c8b4884cb0932ff8d3b0f23014db8"}, "1af4005b46cb830c2958beed3c26210a0b599ce9": {"doc_hash": "2f23107a71b892ebdce1475251ac1e0d7038b32cfab90a7fe75b174c022ca00b"}, "7d2041a9ae8c38b71a844e97afb4a28f56928e27": {"doc_hash": "cde8ef48616f0a55a740a2d63272cec3b5f67ead97c34fb4c75481a02d2115ad"}, "84de05c401b7d859973822ad2a5399befa294af3": {"doc_hash": "e6c8193b743a10aae83d801c82bcb95aa1e4ebfa134d00cd63c11f1223f3f83a"}, "e2169ce03382e317fb34aff819120f5c83eebc3c": {"doc_hash": "0520a7bee0a5be1682b6687f47a1298817529d7b33c9322c8bbea0164401aba6"}, "33c817d7a7fefc7498f217f140230a174d10b37d": {"doc_hash": "35bac599758f3ed8d62be7bc461ad3b9b931332017539cc5d99af71e346c242a"}, "f807e1c4539d7788d4cfa7a221c5d27e87b92120": {"doc_hash": "3cb2d65edd6fdfc33c152bf77988d6259c21dcc26ab25480f5334d35f11d2da6"}, "2d66f9788377ccce186d4bcd4b7f375f9d5784f9": {"doc_hash": "cfe772ed5aac35f92cbd31b9498437ae865b39e6d4e9e354e04e0d0d28c2fb37"}, "9b1c7acbc35e4298a358d10e02219986d96768e9": {"doc_hash": "dbd144114830e94214e4964154d1c8751010bee1c76ab318be9abe9015f6d11f"}, "9b22021d04746de34e03fc3d92ad21d74a740a8a": {"doc_hash": "09edc8fe8e2e8a9a701794783ddee4a04b5fb5725840de0aa42fdba8b3be9388"}, "38dad9a9fb22cd68b2340db09b820797a2a9b1b9": {"doc_hash": "24b1cc0df5dfdee55cc54a711d2a92a9e98108fd2b43bd57fb2253b943b18c83"}, "3d9cc6525542d12c0a26a430c5424949478e2fbf": {"doc_hash": "606de4a031443fb62094e7fcdeec8d8deba2ed9ce8000bf4985bbe4d0c246252"}, "1e6d0ae10cb750cd3e177cf7875e04b4d6ff2d62": {"doc_hash": "d79baa828879da7bc23cff0b60d2b9754d1d7a90358a6bd69a784a4c805c0df3"}, "bb7dfccac308be11326ae4524c22bf0146f54a13": {"doc_hash": "8cfd3f792d77904744061bf8e1cb73b91846f865de44db5b4f6b979a0a46e669"}, "d9d198d3648d0792fe85af1dbd696b32d8e3c39f": {"doc_hash": "ecc23c5baf6289cb398badb20c6c2f45ca04f95a210a827aca34b464b019b517"}, "73d629203862f09266388e1396146f4ff62c137c": {"doc_hash": "1853be34a50b6b1e2978c7d7c58329c632360c0885f3cbcce9025ac9fb29afb0"}, "350079dc1d22e48375082d056e10b4bf86998d41": {"doc_hash": "cb5fcd24bf3f1df1048510de708b5fbc9614862a75000d85debdfe136785d9da"}, "31d376a4e81839a5d32a3ae5db67580979d219b9": {"doc_hash": "55be67b38e62da2b6ace5ed2945d520e1e41492d0ff7b2c8e50491104b1aabdf"}, "c10e39e76a18c0c776849f303b5e575691e65c73": {"doc_hash": "66be4c75240197395cbb2def1d65cc1244cbffe36dc0fe243a7b41ae0d3072a8"}, "27e877a7c425e2dc56f385eaa3e57183eeea465f": {"doc_hash": "b408f1ce1eed8f145a6e0807da9d1e51bfcacc6acc56f3da5efae4cfcc54a80b"}, "66428027e27b2f19fc6fafd9c1acdb4f9ce0c54d": {"doc_hash": "4f5afd4b7f73bbc188b5654a7f3f03ee89c6b5dffa9068190a7803cf8d4a3e8b"}, "bc9c337e1c893f89c76ac744dec3bdadd5f3747c": {"doc_hash": "a3961df2396cb15eafaf1d80ab2cd11c28939cb38a30a8f163f880b596d3c660"}, "b2508c096a01bc76cfca72c3c704d8ff905c3d02": {"doc_hash": "10710be52502a3295b523de783f4c3641a9ec62ab2b6ac612182f10a157d97af"}, "b27edde0c14f6b26b31d921e3f7813973fd575f2": {"doc_hash": "64bca7e1fe1e04a723f6c3c325ef3b4af080beb575060bdb915610282355fdbd"}, "91bc2e134483d59a02555f6a018f45b153586bc3": {"doc_hash": "319eb9bfceda9e1cac29d89fe79b785b69acb6a98bc4053f72938bef213ecc3b"}, "6d98dc0294175f5fa8433ee4692a8f399fae4610": {"doc_hash": "665c6d092110d215e9b2351f00537f1746b985f00e03fa33430ae97acb863898"}, "f71c0b8fe740205051c40c4c6a2a4576c49277d3": {"doc_hash": "c0ba642f5506619286f639a3c846ca229f371d03ed8899428e3da421fa609e93"}, "a264d976268783a1bd1685c226188343b107e973": {"doc_hash": "500a420e7f04f7b73cc2ac398ccafc4b339d3f9e38942ab1086d9e178394c261"}, "edc8e0f0af2000fafbf1e5d5a0fbd69c67f906d3": {"doc_hash": "b5c1ecea7a27ba1fdfa08089d64645906c300aada79147a88f1fcb1c847d2435"}, "1f45236df09d40d4391442605c409e55985d7e69": {"doc_hash": "786876dc31368b7b7e8c266fc506fa3d6b6ebb36f86d953233ae05abd475a2f2"}, "a8d7ffa4c2fa4535c5fae6c4d20257636adcef45": {"doc_hash": "3a93315892f43f87bec421c63f67f4c6cb7ab626dac43710c1f6d459818cc4d6"}, "505c33ba0354ea9c9af98d71a21ef1752a73f674": {"doc_hash": "63ff01c8d128edbd01a2164b370e7f0bd1ab04a12e76edf784a42320318f4767"}, "e5193b1efa1aac3a7cd11cbbe798dd9c44bc4f6e": {"doc_hash": "418deca8b57828fabd04f2b424da9cf249fc59a45b8e889f0745b442f41498cb"}, "78ab1ede974f7f6659fc9e471232f7862616dc9a": {"doc_hash": "535c57efb3f2b2eb0f96f24fc5fcd7d518ecd0df320be50d661602d959db12fc"}, "8fc2443ed25576a2a7d0dce7b6b47eec55dee768": {"doc_hash": "3c465afc70dc1f41e1b1c64daf2c38e11c020937392260b76f90fa0833168d82"}, "72c85d89dad9ce56e1bd7b41306a9055944981c9": {"doc_hash": "495d6de3b236866791206ab828cb48d4a84674d9c1f8468be4b72105325042f0"}, "1cdd5e8543008cbe30a2f3f5b15b1de877099a68": {"doc_hash": "095509f2bcfdbe10f03a3e30e445624bb8298d2a6fcd5f330bcf42c239b1fd7f"}, "1e716f94fe8eb558b86bdcb0e4aaa50a9c1010e3": {"doc_hash": "9955b478501367e2c7055f6494f8ec77e2980cf4bf6bc2a056a45c54429b04f5"}, "fca1dfc31725b1627035daf3faf62afef2792037": {"doc_hash": "a05decd76387fd9c2b7a94c9e65b75b64015a25611d70694e89ae723f097802e"}, "0beea9a45e1a87a2ed3c12e3522502f6389bc1fb": {"doc_hash": "60566dc9b3caaf602bc1d15cafa9934473bdf965224d74c82b72f6169eaaeb8c"}, "6ece9af1b34b7a816977d753a8766911e9abd8b6": {"doc_hash": "1c5a3ca41ed32ca52f05039933ea67406f4217037075877d1a77e0f79590a581"}, "aa3974a530b289a3fe3a6e3908c96072f858a207": {"doc_hash": "e7ea81644fd3b7e58e994756a49c1e0291ef444464a98f351287c1f9c1549f5c"}, "e77d169a8f8dc7ef8ace19f107581922f52f1187": {"doc_hash": "6f77d753a6ebf5108736264e4c5b9c4431048ba25c6d16e7a923dfe713107920"}, "bb887ed692c4f4fb43306f15d43f9778f1a99c44": {"doc_hash": "d653033f362da9ad705726654c2883edeab3af1109101890b7824b27ce6985ed"}, "520ccd5253712cc23e98fe7edd4dc220cfcb3148": {"doc_hash": "7a1d1dbc51c8b97c9db6da412c311eb46a8da4f473bedd217cb4685332571d87"}, "71c0ecf8add2eb85487d281e54a58ca42aba4b6d": {"doc_hash": "eeed1c48d0713a8a295e7a6e98c71d5f5a5803113827308e1ddf455499b80f92"}, "20c794285446ac86257df2cec9ec228c881271d1": {"doc_hash": "9f77bf1a8791647f1f4a558aa957f9a6f9ecab852bb58e48b5fdc7f600ff74a8"}, "6c6ca6ff3b8c05a01d6ae8e81bc4bfeab8d3b075": {"doc_hash": "eb2c7add07925dba95e1a5d02a2713268dd81b9634a7d147030575f9e7c18077"}, "6ff7b71da1425ca5258e67c4abcd64a76c768124": {"doc_hash": "a43f5843b9cb0b5c9f0f16a824855848d0a2e3e88a6b6d680234894bbb9f8276"}, "d97bbf00291e5613c81c7ea86eda888df9d06bf7": {"doc_hash": "5de90c382bdcbceef1caefb2365c80fe49ed0543c95612d46853dacde870fb18"}, "687eb09745c8ce58c3837f6727dbf037c54b161b": {"doc_hash": "57c8a672a1afd0b0edc81e808a8480c1a49abd9eb73c9874cb44c5d63565d07f"}, "fa51e0dc2e7fde580781d72ccd8a7124c7cf4ee0": {"doc_hash": "b5e55bd32abdc9e12fdbb5b49ff7843741eb3c75ea762fdc2a0db78c27ffdaba"}, "b91c9b9ca60cca930c66820e325b128745d2ed66": {"doc_hash": "70e8ac5b811e0a01343b4a8513f9f1eea7d8c57ac6f1ae2d83d2a5371da472d6"}, "fac593e317fbd0fdbbc5e0d62feec3054fe5024c": {"doc_hash": "c2fccf3b07d60f4b22d35ec796b19bb5389338368ce384db0705d3a62d66795d"}, "03af670ecaab16815c5a1797f3ec8fe3fbb260c0": {"doc_hash": "3f321fecbf6da90c03c9b6f8c6bea63d374ecfa8ff2bd7416aaca9a47bcf7499"}, "430b4a3ee1d6a6f3e5f93791ba96108446979c01": {"doc_hash": "34e1e50727055dbf3fc986af5c417b11e951863259f48a5f4884b336c8be830b"}, "337148ee2a04d225830818a16eec6189a4f439c7": {"doc_hash": "8e13b88f0c7aea5160e3d8049455db9f0da67c21d3bec71df5392346326f743d"}, "add4da5c3ab8c45ad2d2025f92ecee8c986a371f": {"doc_hash": "682bd8b5c319fbedf6ec1b702ff11701a7a52ff525a3c4cfe036afde7e77af4e"}, "8dcfa5c69c66f1b2b04d97b1eeca7a3e98f46067": {"doc_hash": "ecc5890e21a7e75fde045cca06623528f2eecded82eeea041bc118492b7ddfda"}, "8299cf6a6f25fcdfbf3c49ca3a1cab5046f20f27": {"doc_hash": "2047d2c330fa0b5f4f3b01f7b00c431bae0840e8994f659fba3e172d18d9f36a"}, "3a410e386dfc6c7e78f8c85ae93a5d5ea5dd05cd": {"doc_hash": "335fe9a85dccfe3a28c94b0da109d3f093909315a41290fd698a3e9f1aebcfc6"}, "4e5df3702b6f8844702380d2a1dec7f9af5749f6": {"doc_hash": "0f248840dcd64e1e61de63e3bc65b29c029f9e4eee0aa32fe1f59015b745fab0"}, "e8672ffed7586465dc5fc8030096597cb96e1621": {"doc_hash": "e8a380479e9a09cb75c8d9cc8cd3aaf8387ea615856d89518199c3a08d9e652d"}, "cb8d46fd103ab8650f2ceac6ea9534f67aed47f0": {"doc_hash": "acffdc3586248b0c3be511f66430504c0182454b82fd61101787cdc714f8c50d"}, "a2948ebfc17236c036107526eb206f0f50f925b6": {"doc_hash": "a0012c5a87757b9ba97490b8a84ced260b9d78cf54d784c5341024268d75706b"}, "4f4bef178133355a54c28e3090c85960f49a4105": {"doc_hash": "b2fc9e57c7bfd83bb868c72fcbb6d4a622a83d0104fbf5bc7b243b438cb03cdd"}, "e45f85eb56ba48bc119c054da35db4f44baf4abf": {"doc_hash": "3a115811cfcfe9fc5f39e8cf3bfe4d2a6e1965c7b045ac54a30d4e8639a76091"}, "91b0c08afea06ec25ed38a75015996d3be3c7d0d": {"doc_hash": "ee0ae5e5f4c28194e5a25c23f89ce515c0d415b26a82922ac5400f6da15845c7"}, "fdc9e907e6ced0d62229e2ca99a39d26902ad685": {"doc_hash": "70f68b2121993c71c4fe5259f050e76501b21a078eee797e6db2ddcc329d921e"}, "77317c54cb7795d54d933e141fdd1f3a00f34763": {"doc_hash": "751fed34bab649da5f04c04bbe23c13b1536582f0088c82b6868c11bfd30640d"}, "a492402ef25459084bd7911800c455964cb3ba31": {"doc_hash": "0cac2df2899639e3fec10b673df2e44dbd768b6e38cf4b80bf845a6172a6c710"}, "965e8703354bebadd36c94286c3dfe1b703dbc3e": {"doc_hash": "83789398e9a019c089659e96f723ced271582fdefc81044afecd880838175bfd"}, "0c47a1a54d1c86b466f31147be094047cd290390": {"doc_hash": "46ad604a8c609decc3b05b2bc1afe89b61d0fae521b4a6b3c9108dab0c72419b"}, "8b57d32dd8d0f99dd854285a826d5eaed37803d4": {"doc_hash": "1f1b1e3414a0486cc39a3ee2d9419b4f1e7780f4ff88dfb80b3449a5b660f267"}, "7a0af43aec21e2c881cebfa949779e8017665af1": {"doc_hash": "0b829a4222fbbff43772e0dafe117708ac78f169def80b733178c7f66b111358"}, "e5e9ba3912bb9f234755ca2dceea50ac9cb2a73f": {"doc_hash": "833e95736a0dcc88a636ce32c588c1b2cb03989ca62ef79d333e1c8cda5b26f5"}, "212f8c4b9dee9e1a5b26f812911ad3f8b6a6c910": {"doc_hash": "bd360886b6af27888c593950699b375074f87111a6f7575aff5317f8cb7d9b78"}, "fe2194f4b21f2b9d991d45226bd689759df8bdc8": {"doc_hash": "607dadec2d92970f2920bc7b8b08ebc953693a960965051272c946c60e756a9e"}, "3cd263ff36e9e9cb481456678b35356f92fad72c": {"doc_hash": "d9a62108bfcdb536179777e9601945f1bc8b75afd3455a5e88deab6d5762f8bf"}, "d47a1ab75e4e59034b68ad73b197b5902728e39d": {"doc_hash": "6626dfd4d358fca89c121882082b859cb8d6f9093afa9486a8498bb908d78eb5"}, "e8e335369dbd51f1340bda9980a83c32e50e470d": {"doc_hash": "46aab5dcfee385b63238595f809d04c4d40bf178a9b146949a027620a99fb3bc"}, "a0b46d38eacc6ce551420272d1a37396a10aede7": {"doc_hash": "92bb37a30ace810e87cb39c62aa24d6a8153ceda8aee85bac05383b5ac211995"}, "46fd2ea166c18f77f2b1a991b2da70e14e1b2586": {"doc_hash": "396d60556439f9d9915723dc3b82d287d8374ce766368ae46bb0b01da6ce467d"}, "592a848695b98e81aeab2762103bcd3b7e911915": {"doc_hash": "2634dc50c63cb45654749873d927c777790108819a2a5afde4acd5606733af76"}, "3890ff8c74c5ffd53320b73b59baab7c886e5f12": {"doc_hash": "2b1e42b51080b1cecdb05f22d1d0045e0f1d13e9abea8ad3d40424e6e9d70dbc"}, "eb757f15ecc4d9b3581df43f30b6bcfa9e3810d0": {"doc_hash": "305ad998837a8c40c74f1e9b3b87dcab778c0f35d41530f7671dc8e2e5a1175f"}, "d9b45bfefbf7f9b3fe25b76f23d7858b4e91ec74": {"doc_hash": "4650dce9801b331e8e2f5a1e4a2fd9b0fd227e2c1c46715308ff54a5e9c7dd49"}, "7fa5ddd73fce0f6a107ea4fd16fbead578bd6d4b": {"doc_hash": "a7eb2ea42e9f5753108df94c793a39d96bd2d3cfbebcfa1a3f038187edb392b2"}, "b165411176779f2260e529ba34c84264ddd36715": {"doc_hash": "5d98ff5114189409bf6990efa08a45db09ea006cae7ba92d43bd6e4b87bd7f27"}, "db0b3bad9ac76e922be3592107cb173bf37d2264": {"doc_hash": "8247d63d3d4d02d4debaf35646043983409bf5f9683ef37ffb168dc73a45ce25"}, "f1f4356f9dc182f0e791c26e1915fb283a41c792": {"doc_hash": "da3fea392db2d3c0392626809e3a5938c1fe16362b0322ede0b6b86c64416a07"}, "8ca0356c760a8d53a64cbfc8a921d1bd597688b8": {"doc_hash": "3759332216f1a76d008f2330874319409ef249c4853e01245b765135931ebcff"}, "0359bfd6c84da2a6ab2e46ab614424c106f47e56": {"doc_hash": "6b8c9c01fba5f6963e90372b9401401f4d011eca7c4a0cc3d07284e6b4de292c"}, "01369cd8aac77bf42c3bd6087f608851eb5ec32b": {"doc_hash": "8aa25ed4f273c333bba43f22aa5a6647fbd6e70fc4e2211cecefb3a82c723566"}, "1363c45bd3a5e4d539351d83d77fca206b6153da": {"doc_hash": "0a3d824d008767d36eab324d6ad10053435580176e8aa6ba3dd4b0183110486b"}, "a0ed09cc780b31df29220186e547647a7f865099": {"doc_hash": "5cf3b6554e1dceddb3a760dfe71db5ec3147cf7270b609e14b915d2f30d89879"}, "f53ae8403c6277ff0298515513e1c9bfebab500a": {"doc_hash": "999b5963b99b50292385941a4f698fdc8d13b5624b1605d6449b82cdd27f7462"}, "082998ccf964412bf9f84fdbbdd733a3451a21a7": {"doc_hash": "2541190bc6eb3ede3e05387d9ea1e706166bb898dc2a4a1c57db20c6ec02fc47"}, "b421223cd2eb50e5e10cf04ae1015154fddf6fd9": {"doc_hash": "f49f80559c0cc796276bae3afd33381723b0a7481c934bbcb2d8151ef120bbd3"}, "1af641745e8fd1ab351010f0529e9a6f5fbf358a": {"doc_hash": "bcfc48f56dba2a3a49f0a5ca94e58c94937b1ed8a8611cdfb7439ef725e47264"}, "a349e33ea899d8385324e2edec91999f5525a538": {"doc_hash": "29ce1d62a00335de2781c2756be4937702f2ef795f1fb872aa2011ac28d75bf7"}, "1c28c649dc2179731d0573928af083c324cb2469": {"doc_hash": "914c3c5841d732d9b8eb7425a5a1c539e3720cfd6eab7cd1b65f4262cf21ee75"}, "918d7684d864aa3e51612f15f404052cc42abb0f": {"doc_hash": "f9b31c5313b1a888d342c3386e6e91887f1530a672f273eb195ee036291f3cbe"}, "aa2e213149d7f9d791758c74e07f9c32c1ae831d": {"doc_hash": "612f496889d3b7664999a8b7cc7d9b252fdd5fc8b594a539aa864ff1489654fc"}, "5cb675b9c622930784126c56910a6e0cd1f50c18": {"doc_hash": "016cb6002f77eb1c94d4d2a1c178cab5b3aa72790520a54b341634c6c41d0d51"}, "4b9c909c61e58fd3b1a60d5ccd2c9749d24153c9": {"doc_hash": "8e5c86eea58c73d9574b4af9083e33477f6883cbe6672dc7dd8f0d131a180bae"}, "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3": {"doc_hash": "40d2461c8e00c8a7f29bcfab1b99e5cc8e5b6edc013ce8312022da7850e7ed68"}, "09b1d43f7cab658c0a044a4f5608f5a85ceafbb6": {"doc_hash": "e5c16db997bcdd251eadb1c8cae8d873d0998fb37c35e06fa33a4b95b60bff95"}, "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7": {"doc_hash": "d0f555f9b80960e6f08a87eb8e7a67440bbec07087e0a84e49ae8c85e30d7dfd"}, "3cb9f040f2e1e748c4a4b617345c09b73bbd1b81": {"doc_hash": "8acafc9c22fa99cb1817f2ef528284eecc517bdc296b23b843bbb88d287eb48f"}, "b95730945569607203de0fc8b9a703fa4ead3b04": {"doc_hash": "a0c962bddc1b9eff9a03181ab52e37afe021411902e24f93c3004e71bdc772da"}, "c417e614fdbde925837ff4b7d6b910147c9a917f": {"doc_hash": "78c51def3c51c96544e9978643402d3fef9d55e3dd5c4663921fdd7ea6a4f1d3"}, "036a1879dcb7c2996f8247913ceef0e9d2d6ad6b": {"doc_hash": "c05af2d54be9707f7e865391cb709f01ce80106fc7bff6dc713d22dbbfc844b0"}, "61651c2945f267f8a94cb03344c6573bc0602691": {"doc_hash": "7a59a279f9e13d292921648e8ebfa9d943dc73c7a0b828d047e9b13d254326fc"}, "348729896fd647c82169075ff223a72998d0d4b1": {"doc_hash": "bcd5aa2a1a474a13579e4319dde63f3969734468206e6bb5dccf2915b5d73357"}, "19d8e51d8db8df35a2560ef8775b8f6537ced626": {"doc_hash": "4cb2e19fb083cff38322b159159f6e913331940b2e448c89613c090146a94bb0"}, "44ae1f8f53881ebb20d6240a9eeb8d7f3e5c143e": {"doc_hash": "cbe32536df3b563826522ef862816b3dddbfa9add5cd4831a0470722853f1a69"}, "4ba10927bf21ca28895376082c87fdda82c8876a": {"doc_hash": "b7dc2fdcaddca734d1a872ff1e3a3163041206cfdeeb5aeff0976b169bff3cec"}, "42bf07445998152f727da4fc3912ad3271fdc01c": {"doc_hash": "6e2331604f97291fa3204a7828653fd4083c35822c1dab27f88c33e424466782"}, "7a6029eb6686d6201bf42d46dbbfb0924db2a6c9": {"doc_hash": "e1b472f795fd8b5905b278550f257938c23befe91a63930ae8e97207b7940a20"}, "52b7bb3361034dc6540bad22299b083e10a3447d": {"doc_hash": "cc71d881f8b7f688f81dae76ce3463aa5b04a4f73fd738874fd41d2f70c56e66"}, "c286b043311a7af9f7d1f8b7da621eb7d0fe5302": {"doc_hash": "4be09ce77d44fc27078dcd82ffb116792be5b11bd2faacc5b18ea113d57b8d4c"}, "b8210cf275aeaa0e8e9a178abd45874b107048c1": {"doc_hash": "3c9a5fbfa9e33c35eeaa3fc7a251d9c370ab1809b7833bc2e892c0b692241f38"}, "0d5661294bf4989f5890d3abe7844ffc01ba9074": {"doc_hash": "40144e64df61064111dabcc45a8408ef8f60c306f307951c82f6f2911ce721b2"}, "edde24794c57e87c10b5cfa33353ef5661a5071d": {"doc_hash": "c6ea985e4c8259ca155c9662c717737271cc0b74bdde0c870de3bd582ef95eb8"}, "68146ad8405a821f13929453ca0543967ee99fba": {"doc_hash": "a08d97093629d6b06e04149a062db84a476319ec7de144175f687f20f874c5c7"}, "18051023a4884da734cec67165692de9cbccbbfe": {"doc_hash": "7fde9205e5ad3bf60b7f12d8a717ca16ace71e17cb84d214073dc873a1acf6b5"}, "b8a2b21f2aed109cb7ed00fb45742e6c4c846113": {"doc_hash": "2578ec9aec81ff3edbe0a744a89405db12288957e29d83dbf516a520f8d24dcc"}, "38d538baf3e04475b6dae62e5b06245fcf1d8d2c": {"doc_hash": "f0bb00ee1e7c624ea9aa6f4cfa8086fa77edbcf596c4cd1e238c805e7ce4d8eb"}, "838e6337b4338c1b85ddd4e7e78ce7e82b04810c": {"doc_hash": "a01639daf2968dcfd08abbc49aeba5d409f35ff88a9124b8504cdc274db78cba"}, "7b78ec193886b111cf56d8f5576f033269d4fdfb": {"doc_hash": "8f134915e76f8da37396b4c5fce8c8cd0e5238d0439ac96196b2563479d1c32f"}, "ece9661aaa275ba7b6e067d84151a8901406e9d2": {"doc_hash": "e2a0430f61c043dbaf03acabb02e2b965857c5b0a2d5d26989b0c6985372b2bd"}, "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8": {"doc_hash": "5b101b6985a857eb5b84b6a9e963c554044cfa865bcea2d021a97090dd824919"}, "a8723774c1de839dd80038feb9f2a622c24f524b": {"doc_hash": "b5756856bd5a7c2ddef97d5714f62965ed5ef28813f123c0c07daf2f41256020"}, "c14ec2146b768a8e7bb8feaf09f791f29152dda9": {"doc_hash": "297cd08ed785ba10e0e52b3dfc07e87424dc5bd859d64a5350aab7f8fad9216c"}, "2edf88f2d0024be43b844b3fd3298846b2bf7317": {"doc_hash": "22901f86982122e3efd885f7c489209bc373e5aebc814eed711bd22e1740ad31"}, "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c": {"doc_hash": "bde41c16a8406cc6aaf5330fded5ff8b2532c0ccfdad71386c8a1d54176dd359"}, "cfaf5de88d573d775dda261f5c5441484302d961": {"doc_hash": "d15ad06f191b4e2aae35e4d72f6fc700ee3192cf492430f842714100c64e23c2"}, "9ec2f719665f805d8a851c5b0562239b6adeb373": {"doc_hash": "70dd9b1c575646158b320291bc0e55ec3dd1be6984b246900941427c755228df"}, "40d0380af07aa18321fc672ba753e4e7ff312e02": {"doc_hash": "15f69fab83ca1f7e19998b1e97411ca281737e8e47e86615f37f5b170a559a4e"}, "a6fc55168b362386a1393977a8fe31b513578467": {"doc_hash": "225f609b3cdebbe5db2aa23e9ae1a7ad40c7b62007d5137fc14525112f2b26d6"}, "a38d68a556bb0d42da12c28f7ffeefca895a651b": {"doc_hash": "c842d6851398a99f2c667b70fef2c3e3427ae24c0708bcd70b61e3f10d3287bb"}, "daee96a8c111b0b324e4f1c463768b1d26af8c69": {"doc_hash": "4c5b5d5165133cfb9ca77b5aedce1a4ee170e2852df1c78b02ac619bd9582fcf"}, "0db36e5103c9af18ce58985f51eae85575c8ae2f": {"doc_hash": "939744ede2376d5eaf558cd8713269c82ff27fbf78cb7d23b5de5d6021b99033"}, "4b55a68cfe2712f7b58501b1723005c4d42281b6": {"doc_hash": "510b66124ab026840c406e1fb4b7b089e883a74de2ace81ef4ef902e67a390f1"}, "f13f83f36ca1358286929077aabeb8a745b6d64d": {"doc_hash": "56ded5d26a4044c39681f1d20ba13b821ae9d7ca04db0b6c2054405321030b6e"}, "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9": {"doc_hash": "cb8cfeadd8800ecdf10f866b8c36ede74c368eb309c7d996a2464a99f11edd13"}, "d5261f6c4a29285160718e85e0dbbec44c10d983": {"doc_hash": "324466ce529613e42aff2b816ee6d7bc1f24321ff5ad64ee9e7ca6885e3f78b3"}, "debb614241befe9e6d2944d69549425081eaef96": {"doc_hash": "90090677d9e44254e0d4ff4846e1e001ac491220426799141df973b61312b3d8"}, "3355f0881b7369c3e3465a9e02e23b5eacc2f9c2": {"doc_hash": "a0f9c4b3f90dfe0a9fda533a20cc88e214f5d29f27275480073dc9228aa0a0d0"}, "087cba88d2bd09ac5aac93b7bdbb854dfcff4932": {"doc_hash": "71c969037167263548818a62ff2ddca11ad7a560567f42688853ab8b52de4201"}, "1d1b056f2f84976b57bb1a1f70428b3494d13c45": {"doc_hash": "b34e4beda418034185ff2f4d5c921c15bcbe65fd7c6ea1b7fd64a9f9a1c3ec23"}, "5dcd04b94ed7f9869aaca5969d56dc46ce93826b": {"doc_hash": "83202fe7b5adf871b3c9ca4da6cb7530051bdda01c55d8bbfca19ada0cbbb616"}, "48356fe565bbd932fde769ce559c32191360ce94": {"doc_hash": "3ec6f964d14c828b6df8431798e0bb0fea06f8c1f03df7c0532ae570d555b2d3"}, "954d2e2e6b9aa28c74e58588f4d02652894873eb": {"doc_hash": "66484bbe857d346bdb53112786b642b1fefcaec2c5fcb164aaa3acbdb1accf94"}, "cd0160a2d14c34413af91ee4424de68ca7f47c80": {"doc_hash": "aca6cbc0ef849e254266594e86b5211f6d1b8eaaeda9516d3a258d3e50adc4dd"}, "34fb592983ffd82c7fc01a8e626cd98cb4d1ed2d": {"doc_hash": "f6d6fae3b1048c37bf186ec165a91f0da07bbe721fb830c80f08c5d733ab90e7"}, "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631": {"doc_hash": "b5815e38ee317da9c60a3c788a80876c047c925f1680d8afb25bc5f0af93742e"}, "c2312a3cf01c34580ee92070459af970bf1c3109": {"doc_hash": "1227b8bdc81ee19aef9cd1fbd30380fd563b657767da55aed688e85cee5cb535"}, "01475bc02aae5d24f15884f934fb987ebc59283b": {"doc_hash": "80cdf0f14bc7b105df073c8d02f85a710bcfc63434b4b900d6ac5625e86e2baf"}, "2e793c0c7a679f2ed4b59593787823581a749c91": {"doc_hash": "b4cc4120357722b8633e33474375347024bd58fc605cf6ad256ba0d9f3e3df2f"}, "2b80d8d8f8f2c4854344e74929561c75de3b0565": {"doc_hash": "734dac4b28eec46335db2c6ed65bdacfb482fdacee899065bd09c9fbede058c9"}, "1e88155794ce85f3297cdf937f4e39f520f103b5": {"doc_hash": "e0e016bd62c448c78d5e5de9878f3f3176368af101d553759ecb0a9911cebeab"}, "409fb91ce613f9b2b1898cc01c9845ea00c22313": {"doc_hash": "e03ed97007e13f0fc0861825fa2d33cd438266b6c7dd030ff24460f9c734dc60"}, "e4ef25f1a683734e5f3b50a3eab6c46cdd02e17d": {"doc_hash": "630a48ab7a8d867a9296aa2d18560ffbc5fde17b6f28799e5d7fda1a75678d8d"}, "a62825e262d5fa81144e76327d854a4bc5b6306d": {"doc_hash": "73dcdfbc3d09e4672d3964aec87e123b28712980f2592423532b1a894dd0383d"}, "3cd61107c8874a4e23c0c0eb9989cbd2251eb959": {"doc_hash": "10a4921064b0a00bd1212821ebc0195a5e1499839eb10de99c3e1daba9dc7ca2"}, "788ef6bbf0ac63a5af9401c87bcd6edb034e48cd": {"doc_hash": "09a35e9bf0bc2d038662326b2b30ac600a2cc04794040528f687aa9189528a78"}, "a001268bbd43a5fdb5cbae1e57f3eff5888c105b": {"doc_hash": "81324370426d85dce218955ddbee15c8e600842efab6918270d38323ce6bba09"}, "9fba62de8df2dbecab3ab5ffca830f8b04c58de4": {"doc_hash": "f0f0ae0a014449e4006f5ec60d246cc853e5016aedfbf57fdad4a8b3481f677d"}, "1b6c2d484eea5dc6baabe27fbf40fe78e53180bb": {"doc_hash": "ec800ea09e56841835f3799e599cc3a1a0a07d2035b121f832ec4f7886a558f9"}, "a8c83603847d3d10d8e91d3a7e169c72da97691c": {"doc_hash": "94aef6218a5a8c9e7748ac6a042fa85985643b8bde3825a5bf318dcf8c5284f5"}, "1a06333957e3af39916b4e955b257c8aa0da3412": {"doc_hash": "9a76e0253744fc690de813e4a7a07cceac7be75318e570ff6f26bb49757e5524"}, "33fd8fef9283f6039ecba3060a37c8cd0f0bb78c": {"doc_hash": "718b6af3a944c430cd50fc886bd2a0114b5fd3f6021db78729d2bbddc6a49a0a"}, "efa680fd18a152c20af376666071ba484cb87d75": {"doc_hash": "b0345202ac15dcf6ac47bb30ea080d84b1a51982b7674be01573f2593497b5a4"}, "0d998f1964df8496b6512bf39dbdcb406ee9ebb6": {"doc_hash": "e99b4a58b498b91466a23bc86d46f499a87711025a8db0c494ba2158a9ef8cbd"}, "f8a2bda5a57d11b5128b0df687492a2c1b93d051": {"doc_hash": "396841182770b65f926bdf96d8c3e790be8abab761e5468d12c7055afe9db6a1"}, "43924154f68e189724acdd3a354bf12b0c0449b3": {"doc_hash": "37b1e802aa1d2108eaf89f98fad4803a52f381de31889cbefc10ebf4779c4ae2"}, "2cc37aded389f249743904d810d32c3b6deb7e5e": {"doc_hash": "34140f19f721fbb6932874efcf12e940029d789f06a6cd9e229aa4838c655860"}, "eb044475b66808a60f7c8c6cf2c5c68b69198c11": {"doc_hash": "28924c461d56eb429552653525ae2777767905ad02dcf0a46b73a48591a8d07f"}, "797c7d2d1d65a5a58d593a0c413a6ce2aae491e1": {"doc_hash": "a3a904045658d0dbc411e1df382876aa59674b8ecf3ef5f1350bef1dba3767bd"}, "11eac09eb22a2547e33c8d02b9d3d36351543b59": {"doc_hash": "64d262bc19e1e5749f5057d0de739ccd0bdd7137153327dc851aa145811781d5"}, "d1ef957bc11e290dac3716fe4e964b7bda17bafd": {"doc_hash": "17d893d0505937aef7b2fc499668b15d4ea49e036aab54985c60e6da72360714"}, "889b9619c77162b8492f18fbd3bde9bc7002c9a3": {"doc_hash": "7d58e6e4869f1549039187c037eb387587f8477426ed31b0550669132565b1cd"}, "750b85fd97a0685bc3c20ecc254941239e7bbabe": {"doc_hash": "350ded5f554afbc94a65641753366414eb10fe414a91e02eb4cca4628776c971"}, "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60": {"doc_hash": "a606bdb5bee668bec46467f04fcb643a774d7918811d319096a4a71381926e69"}, "f02f959a7b56582f83e37d09f74ad8ddbe001b1f": {"doc_hash": "1d8f6c4bccb2efb83eaa9e085854622e041443200a7bae3cca8056d96f868f15"}, "03aa45d702a3216e47305791ed69e661667f4654": {"doc_hash": "877bfd74c60ce725e4af9516e32245eb1622610ce6e356f43b420c0ca73ddc93"}, "df13a00bd30c2471a31a32e8f7039d3b4a381f49": {"doc_hash": "0c8f86eac22cc807eec7be0426c1e23d2be03765182afc4acb1b4604ab64b48f"}, "7fdc2d78b7087b57a0b5d18019bede1a4e777967": {"doc_hash": "3d2dd393ed839fbd3081ca0c4ac3585035455885cb7f87d7185ceb48c9ec1a12"}, "bb98ba9ed71e532bb75bb8be7d414a315c6bef8b": {"doc_hash": "2d00408238e417c7182c0cf0195a83ac2510cd6a89ed2f7601074840c5ff3288"}, "67437ae8ce1c96f552d4fb00035c2bfe8968b3d2": {"doc_hash": "782520467e17eb0fc0adbb4f1ba7b338c90c0f6d9a0c20d782701d900d6d5259"}, "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a": {"doc_hash": "2668f89a1830087597a4ca69860565c23b6aab215aa2069b1bedb9e461306d40"}, "97fc7460589f71bf1ddb99579e33e1ca596768e7": {"doc_hash": "02a470e2d79a238303e25e6423a3d03a2765592431a4e199262310e41b9869b2"}, "266fe126e4b859bb1bf752a139d87f7f561478cf": {"doc_hash": "8922bf9dee0f67e774c284052a72531e42d5a819e451e9b3417aefe790df37be"}, "35c92f551f6f4eaf77d14a1387e004951f1c1392": {"doc_hash": "295694315012043ec25cd17cb382b4ec7630daed5120fa84c1549e369a1db9b2"}, "7330f6f7926be311fa994213f7dbe90364f9aa67": {"doc_hash": "c24f864be4aa6d375db57eb698fd7926122e31419f946d79c0a64327b2ea418b"}, "fff224d98b23673eedebb4f1a8e2df61896e97d1": {"doc_hash": "e849b36aa7745124f9bff1958302411d1d04a11c5def840e5bcbdc6d6f9fc5a5"}, "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff": {"doc_hash": "e178d67351d2c9373916e0353095cdae43e9ed52f6e5bf1dfb7c282676ca88f1"}, "906c0d065612e59614ea7593639d979d529d674d": {"doc_hash": "6dfa274de13cbe59af3d451ea689559564ad552a7e1994cb7dbbf2b545345eb8"}, "a17f1453b5146aaa52a3011cd1dcd243056d7293": {"doc_hash": "7d46a6b0a3883b4a1b5b5b685275dbc1115efaf755d125ef874aeb2981edbbf9"}, "e609316cf7edc9da8c32bb3f805b24d0da13870d": {"doc_hash": "8162df456ace64656ee4996b0ddd4be6c041923908616c47cd06c6e744dd3a18"}, "cbf7d105f46520d943a3feffb2e7949c68f35604": {"doc_hash": "813fa306af02f79eeaf604aa28680390d333e16dc5db9a5055217d0afe0e2367"}, "21b24bebedfaa6a9248b003c87d2371566a009d8": {"doc_hash": "e0d5b7d192c0a5ba191baa97b212e7bce58db783b1fae59bebb5ec5a2e750e49"}, "16e1dc49bd445b7b9522f5832bb480cff2083cb0": {"doc_hash": "92d15f5ab4f065e7554129c73b52155da9b63695ad5ff134d19f9bfbcb19e4bf"}, "194caadd1f3c83945174fb51d1e939937ef571ef": {"doc_hash": "9350a0093049dc3026732aa08c8de2f4d1e39206aea2daa998434ecbd1ea8927"}, "5df31676dc6cc02789c0d35d4460c870a53bac60": {"doc_hash": "8ddd2964e97341bc05915b9a2aceaf0170629525558b9a4ff4bfbd1a26d7083d"}, "9456abbb7f0a1a9ef72d5ad6ae2f9114d195428b": {"doc_hash": "b54d1d4bf494ab5a32f7d6662bf22dcce017bb74fc894ee62ad8c3dc903f3fe4"}, "6a15e7acd980d7e2e41f9f55bef9b86ac6ec4bf6": {"doc_hash": "2fc683eb385f3fa8a02ca7c629531109b64f1c715226fd4beb49b9178d846198"}, "f8fa5aac2898710a42c2ba1e4ad97647b86cc2e6": {"doc_hash": "3dc31348fc6afbd46a49a7f6e3ca678b53cd2f19753e1e4d3b73a5cc18c15ef7"}, "d4b9bdcab0205700b3e13c7c5a89bf6d29c1db5f": {"doc_hash": "773582f1d94ca000d612b0f8fb00a038797faf956c3bbd1327252204a4765a3f"}, "78aea7bd04aada295519f293805a5f1a7cfb24cd": {"doc_hash": "f1f71f7ec3a9adb1de1ff1e5a9aab23bdd0ca51cbc9185798e18aaa4ee9a009f"}, "be60035a8ad5502014d596b5fba991bcfed980af": {"doc_hash": "b2003c9bc91fd956f5768c908f0e9764ae2bcd5126751e1785ae0835ffd64544"}, "90d3ee592d05a42ee198c5d7fcbe9e3f653a54cd": {"doc_hash": "5b9f4a7ecf38fd6c9b21008fb91758e189161b170db0f681398c8bfae81b19c7"}, "6944c54df0fd303de2b041838750d94022e4f40c": {"doc_hash": "3b79aeed6170ba9d89fe6200deaa7dab9fe8ca62b1247ec33686a84100f1034b"}, "abbd2301f4a4eff4c06c22d8b994ebfbad14ff97": {"doc_hash": "b9bb99acb593c3f9190225b76668a608b9e01c2dde727e28474002a03fb58e01"}, "06321c5ef917b14bc9765d17208dd30aad48e586": {"doc_hash": "2ab07b4fa0112b1d82648f57f3ed71e813c889765e972d95be8a311a48817891"}, "5a11e067e37e01a6a576b7653454f77fa9c12e5a": {"doc_hash": "049887aea09d67f5ec31622dc8cf81707d6c7c3573fb32dd17d4b6de47de99fa"}, "93bce555b33f8f008402435c992845a7611a8256": {"doc_hash": "ec7a535b6a01db6cc55f9f5710e488b92b361c73f162db94456efa06e41d1730"}, "d9b84c7ada9b04106a32672b652c50988ece4ca5": {"doc_hash": "fc2b54cde43003171f3a367395b231e4e635acc4a9936c6a15554f616cf741a5"}, "831bc07903233010bd619bdb78b75752acc09573": {"doc_hash": "59ca073216f9bdc6e0e5b6319ae6967998616be21c8b58a6bf6f61c682c17bcb"}, "16ecbcebc29554b382940eecefec0070f7beaa61": {"doc_hash": "dfb227158e83b392c32afce8a32f0bcf1c3af8289cb747b09273ac4cd806ce5b"}, "8c883cd9fcc36b07991a48668f124dda16851f79": {"doc_hash": "f44ca7f4970221be5c9cbbcf399d3925cd8253d64fd924b3db04fdff8d1fdb55"}, "3859954c034d6ff7dbd977eb21ef30785a5f19d2": {"doc_hash": "095fb0ad693b421d70abd3084cd4c2e885599e7e9aba656da44d65f0c44caae0"}, "2583909a61e0f473062109d8ec1483f66a1ccb23": {"doc_hash": "81692906add84b18030d1e64c8e17088955a7d8ed6217da6797a62076b99cd5d"}, "f42afc23d2b36ebae86d5c3a14d81f0ef5d31456": {"doc_hash": "2137184dbfb981f9122ef8300bd1ad9394f96ad5d51fb37c56560c0970e602c8"}, "97ee725e0debda757779756152d4a8a0c059dd47": {"doc_hash": "e1bf243638dee16a39ec2bd81a1cede0d90c6aed6e16015e35721c0fac39582a"}, "142a42c84cbadfa2bcc5d18e8e6f12ccc55c4474": {"doc_hash": "e319ea61ca990d8b9e66773bc8850a4974f387a9c77d226b2214c6b75baaf6a2"}, "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec": {"doc_hash": "01570094e74c94c65ea7761097e7f013531c841a1631ba5092553c34dfca0c6c"}, "7955bd5fa17ace73f409ae5d2dd29b84a9922b91": {"doc_hash": "558d1cdb4719d83f67168ab1d42e005ec462b9d3266e0725c194e1fccb27c3e8"}, "f910768b57386ba115b090741c14d9d4d6113edc": {"doc_hash": "079298e82fce884220952250b8f978f538d5a170b5ac2f1363e6338cae734dad"}, "f6a94c6c27ce3db44a57df262dad209133423d93": {"doc_hash": "ec8fb35c663cdf51377f15a37ab65f8e07ee6827ebecb1fe34803a007c1da8bf"}, "e3fde9feec47db53890d8f468140c42ff14b7a0d": {"doc_hash": "9907b0b157896f7a840e1e8fa458ef973e026d5f48c9b8c8ad6461bc9c10f061"}, "81d30f3dc5c02325f5665c80adc8717b3d817d19": {"doc_hash": "e3daa9695efab52fa57412041b15555d80ab6c15989c6dae44bebe5d2038ec8f"}, "10e706d196aba6a27e863d2559c2eb93b4743fa2": {"doc_hash": "9c9e75df66cbe67b63816d88a0c14cbcfd271f21fa44936c524db8c7efda72b6"}, "b11b8e8dab5971fc416380fe2fce1fb07011550f": {"doc_hash": "4b3e6d5a9e96d7e245a8a183de54fdc3c69d0f42eb655ec697e6cb28b1314acb"}, "b50ea8dfedac163bc0b144e72270592774d32792": {"doc_hash": "067f37cdd93b1cbf6c6f2960a50e76e949a370890413acb8cbb737a0c0432766"}, "e6b00f1398420049f0ffbed6b1bc37921fb7430d": {"doc_hash": "d692d4ff42b34d37a53036b90bd934b4d044c88e3c1203f33f6d5ca408ee17f5"}, "32af8818a33725d19f1044d809a1259b00204688": {"doc_hash": "42bb25c6a6d31211f22ecf92cc4c7eb6400d8cb2d584d86e561e1802c1535ea6"}, "548554f4c74cc0abdeebd3a8ed5d68a3105582a0": {"doc_hash": "1550643ff0f5466d7c21a7cba20ccef7995eeb0c10b49d6cd8c86ef2b972ada7"}, "ac15883b9d74307c3c252704f2f52ca879cd9e9f": {"doc_hash": "a1abac35f1a47017967310e5dc32d5cadd59fc920120a74f956cc60b1e80fdf4"}, "088f3e688a51e9b355c5161128258e0296446984": {"doc_hash": "8f814d02bcfbacd089b6a4ee6e5627db456c1b326f7771683ad40129cdcca7b9"}, "dbca915c696c12959df834a43b1fab18a0502078": {"doc_hash": "c41f0d31c76439004e07b5cf84eff1c9d8ef2204d326314b39b9a501c806ad6b"}, "a351d02d11ae539555b4c40dfa309a71d5a97f52": {"doc_hash": "61a8d79746ffd0ed3326d46f7d8abc107c38b591d0321edcbc3ddb5578f46cce"}, "c5e2918f44d47ccd432cb23999c141533db92b33": {"doc_hash": "779b5fefbf82fd9bcb18cf13c43a0b8ad49e0bc9f1bd1ab28b0a5466c87e465a"}, "a2c2801854569a413107edf217bc348344bc289e": {"doc_hash": "49aa516ffdb1713102fc3c21b6defbf8bf92e9eb1b28e7e00927c97c699c6575"}, "b5d5df8b9e2648dde1395ff061ea22d93482c9cf": {"doc_hash": "7e638f76f0a780de2c86362e1dbc95ad18d6df85e896ded6c1facb4ba5abd4a8"}, "8d109e7435bd9c2af69580ec1e320a6f037a4da5": {"doc_hash": "08ed9afc65c44aea05ee97418c99288817db603c59a574c48e719719e1e163e0"}, "dcb23df74bc695168344be2595f63d212cb0b219": {"doc_hash": "aabea6a0223d752d5c98d1580436dbed91889f836e4648c416b6eb8800f95f2f"}, "dfaabcafc3863cf7bd3be870fb8101ff56a019ad": {"doc_hash": "914f06d08abc3a3963d6d2e2d97ac6ae2e60916f3a8e6354d1c5a36607607c58"}, "6719ffcbf4cccbeb6ca14ea0b60a46c1f43341d8": {"doc_hash": "e55387271c692e5bf9f4bdff4d1354ef2fb656ce00b84cd25a1007649f7ccb38"}, "c6e7ec7117c9c8f9dceddaee458ae87c9a1e96a4": {"doc_hash": "6d9197a2e584768cb0e3c8463df95352a26eeaaae8aa75c7dfa5527f68292cc2"}, "5f657085496c41f12ead786603ff03022ae4e539": {"doc_hash": "c8af08fa0619b6c4df4dfaf9de703c22b9fb4e714f996179e7f667948bee56eb"}, "878c150d871605948a70fea7252d5dcc617b995b": {"doc_hash": "b5fb1bf96f3c7d09b483ee3499c277335931c7300e52fce8a4c81ad28d3f5ad4"}, "259b9d96b728a11e2ed46378767a965d7996546e": {"doc_hash": "518b483c0a415a86ada3e58e9b939597a8ab0f90fd3e3db0d3e76153b8643626"}, "7e2a282ca52984f8355c70697360d6cc9ef7d162": {"doc_hash": "a87e63b7de83b1fc15bc57398482838c9520244429b5cd06aa193c5ec5eba176"}, "152172958d6f1e60e419248bb8eef3f60a587fd7": {"doc_hash": "1ec2517b9a185f5e04443a93be3d99b377ddf7b43bf6d00b4c1bc1954edca04c"}, "d7b70369ab03c79bc7fb0afcb4f6f403f82b526f": {"doc_hash": "d1473dd87baa0e96861a0a49f6ff7a9a3fb209eaee01e7115f904db33c2383b4"}, "d30708ffe5c6eddca083f337eb3d05e58fc22039": {"doc_hash": "d1ce2af9d618d2786acef0b7a0aed321e66dd6feeac01e71c5ef922bf18d2393"}, "f65930f8680be759f50756c2e2614a0bd39167ed": {"doc_hash": "5f0e9f52a02239c045030945f6d4b312b0ab55b5c3b61a40351bb9d48fa6dd24"}, "9aaae281546a10622ee883113925672043518d26": {"doc_hash": "3ddde40dd36eb964765afede30aa56ee14c5b972ddb7c22ba898f197f5bcea4b"}, "def909cc3bed92e801a81bc4b047c799d9a9c6c8": {"doc_hash": "95efb3ea9e3140df06938fee956566d7cb0c0a77b2fe276036421cba0d4b24fc"}, "9bcb07591e2d7e6e3ab7dca25c7b7c75e498224b": {"doc_hash": "5ee40b744b207794211f267ddcc87ccb9ec78f5a165a9ea4b9bf28b0b7686d57"}, "a4af6789c452809a211a355c8920394c85ca4eaa": {"doc_hash": "1d29208de1a3540a9821b48ffbad215d01023eb1463d030b1fb4a7619e3f1c8b"}, "825a8a53d1378bbfa22e30c7bb587a9a50f5ea25": {"doc_hash": "6e095839ceb336780c774ec962cf72e97b5ffacf7fcb586bb18ca24258f8c0ad"}, "d97bfc8b556a70d16c0a619b9c2063901759c8b4": {"doc_hash": "13b4015717450dae38db8f7234af2ffc720962d5adaf67fd1c418de2c5bd2e15"}, "3113619d53c0e32161cde99efe9fe68be5086c0d": {"doc_hash": "425ffa87df0502ee58f4e8d04cf9468778979a2fce37c903815cb5416bef862d"}, "ee93bed75d8cba43c85760a35cbe84d1be965ef6": {"doc_hash": "606460aaab917bf20e94022d8871c140ed94758f7eb63046514f1d6f432eccde"}, "76436d5fa0957c3b19c068f6b378fa1640954978": {"doc_hash": "a5f74969509c63dd4cf79bd21bf03dd1b7592597f9aa1008264552aa486a1012"}, "03b195dfaaaa351daa5bd4072becc21940e3f20e": {"doc_hash": "dfc4cacc5c8c25e2829080c81b7acef8bd2bc14ca54e0b1757a710a35a321758"}, "f68c71a87dd2476d59306fdeedbdbe3211463e98": {"doc_hash": "3adf7645c157392ac15031b2cdb1f42a7f7ed25a3bd8dac78dec422f9abc9c69"}, "5c650e09670d711bf065f5d61ac95b1cf479abce": {"doc_hash": "f86c896b99e3895c61c6ccd28a8b984a6b9c155a23c287b6036d37a1df2b137d"}, "1f783a97437abad3e1865c304bce968ce21a3a27": {"doc_hash": "1f2ed62dc6bc9599ed80491eb5e8b23676a9213261220a1cc9ee6994d18e3726"}, "bafdf81396e6800a1302af53887731bc995c2745": {"doc_hash": "5482e4e3ac5f536ab01f9298b7be4901f48638a55b388d280e51f28462b8a0f6"}, "ee512c23d221cd182be5114fb7cba4fe4415dce5": {"doc_hash": "ee46e8b84a138f068bce79cb73d53bf2fd2510795353ac0643d36ead8b8e9bae"}, "21b41b17950c0361bbbee33884aa7e998f18e53e": {"doc_hash": "df05e98b014f9ab6da53f93f208cbdb9f8b4be49e91674e85db5ff981860c77e"}, "2ad5480669ca972620ceaad932ac4607d72e6599": {"doc_hash": "9ef87244215ca9c355277cd05a9257271033f2f6b3f469fe0397137968fc22bd"}, "0d29168a2de4819bbaad03a2b23ded23147989d0": {"doc_hash": "083b2ea200f018ec196f2e400cbbd27d2e54225d87b650bbf7cab0d46effc589"}, "9081096d52381d3f61509ea6709a26d9ea0cea36": {"doc_hash": "780493449a61e97a8dfb42307027b7becab6cc8f2e129b19c08ced96d923a302"}, "4e2e967d91c4dd5c423613d665148bf9c780bc5c": {"doc_hash": "63bf5cb0fdf70df1fea4d3a3cacec4259e039484f9ac99e2489074edeacf982e"}, "168e16f6e6973fddd187cf662187e9a3b0093e49": {"doc_hash": "581aeba8ec4f34ee89fbb25a429c4e53defc02ae307a590c51d335e1fb91b19c"}, "e7ed503836e8d0b29c31252d1fe432a2db9cf1ff": {"doc_hash": "002837f158f872a4d06fb1406f4f64c8abaa8399032aa718942f4ce2fbcc9f72"}, "b02f75b357b8786bd2d862d7f65445f9ad69df45": {"doc_hash": "0f91c1ec270d496efa1e0a2846f1b134a094595e5d10525d8775c46d83ab587c"}, "0ee52b8714418c1bf862eaa9b4052f32310afb7e": {"doc_hash": "e6f056b11bb7d25e672ccd6446b3a87689ac068d2af06aafdd4a8d41e233ad88"}, "d61f89ac91545164dc492949c1840add1afa7b96": {"doc_hash": "1d2bf9aaef96e54570539bee45ab1e2b9d46fbaff6bc30cf9de17cf775341980"}, "37d9940ca76fbb7cede5edfcb8a66ce64950b758": {"doc_hash": "a6dd42b525785d4596ca183eb67f326b84a8881b4a4f21cfebb73d4c2d22fcf6"}, "56c27acc114a06eb3abc76afbe360c1c3470a6ce": {"doc_hash": "3ae12e4d6a3da1cdb7893df1379b41025f4aad42af4139d6a0f44f62334899c7"}, "80ff403cc5dc81e916b809c885286a3f17f6acdb": {"doc_hash": "ab279b20ac8cd14c134a0c668a081e0d59cb8ca79c51c97acea801bb6aca7638"}, "e9be7726e7f92cce6acef7626f05ddd8d9d4cf31": {"doc_hash": "634f0ffb58c2c81383cf695de29a10f04d5cf58ee7741e22528ae71caa5da4fe"}, "5f1f503820e43bea567586e7421463ed55422c77": {"doc_hash": "ce0568678b4e8392ba9cde9f7d424e2893456086a2fe1ec58e04bc670692082a"}, "b3a3fbd2f54453516e136c60d831ae849938fb96": {"doc_hash": "259b697406807d40b7170790c918fb74c37111cb509f1f026ddee7f3f2d6721e"}, "08ee64e9ef002eb28decec239b970e4938ca469b": {"doc_hash": "38a77b4ac260ed24f68a4119fb730b0ed17718c0de91a2bbeacd542255ac150a"}, "d45e516eb10d6ecd284ebbc896edf31cdb4a4268": {"doc_hash": "195608afbe66848dc3fecac4e086e0be3b73a68a3eb29b3c46920fff745ace54"}, "1048ad897dcbf98551e22bcb9a4a761e3d57651f": {"doc_hash": "26948191887d789b551763d610aff5d66e6de719a1bf1e952c94d08ecee523b4"}, "01a89aa6938a68a51598be7ea81b2c7545faf19e": {"doc_hash": "17db61bad2b67783d5433a58886e26c595b86dab70008b994a6c965e9b5bf4c5"}, "d6579b2cdc1d1ad698db1a07e916e48504d69078": {"doc_hash": "b6ebca93d0f8e14a11b84b8a8d4ba4f478351db85a95fa78347620b67fa11cfc"}, "3e1d2c9caa1d4af4a272c48abc40347ae20a8703": {"doc_hash": "2d587722f39865b4ad4031081eb40e966be8a41207484eac01cf14930628c6d0"}, "edad6fc25aff3d18e7619291f42055b175824e7f": {"doc_hash": "11dddd1643c3bab51efd7e24705adc00dc82fb3b33ba459a61e57e8099232725"}, "de0d542cab2219199c27f09fc7e3c7f44368755c": {"doc_hash": "2142d4606a41833f2b70326e4049848de3b0585b30a83058132f9f5e85831781"}, "5b300188118b6802fa6c7f2c1cd3f861474312ff": {"doc_hash": "05e5ae566f1d7418699abdc8f393a8afd2288246b7f0b68754a240993f3e87cf"}, "6238c036127bbb88cf9c09e5b282b97abf974746": {"doc_hash": "7eee047d8aa94624067312852465b799d60a121ecc8698501fb706a042e9f889"}, "5852afd3268d233d6fba1ecff7cd9513eddd5853": {"doc_hash": "09e6c0828e4f07588ddea1f3815a9089839aaae60e2108578189f1ac5a77ea58"}, "286259c63f034ccf6031f311bc7f3014b22c3840": {"doc_hash": "653e6d780cecf227566eaf46b032225b5b2827f47c2412ffc06014640e42ea39"}, "6f46181364d97d859193217461da55f9f5c0b174": {"doc_hash": "2f37d0f4d3a2b7b5a70fc1ec09abce31ed3983d082b42f08f06298608ba9b06b"}, "efa594ae9a124dd5050a497b72808764bde65cc9": {"doc_hash": "13ceed86020b72dcafdfc982f69c2f3c732e4b2b8dd72e3e2acba8c1fb9555b1"}, "4ac114a915f5e132b377970cb603ef2074312820": {"doc_hash": "f471a1b907cadd1a4ed8d6a31aaf12ef11f6565687910097840ea608f6b97979"}, "d4e662dd3dd43a42e807c3b2be08c1ab5f69a316": {"doc_hash": "4df1618dd1f701d745220a0d60ae849f4cbbd4957463965dd402c3a7dbaacd45"}, "38e58d6137d2a6865c727a9a5887f271f47c7c67": {"doc_hash": "10ccbdda055bb50d7beab7853d81c527849dfa8a844405d410e6bf94b4235f26"}, "a030f0608eafd7249c57c45a3da2385110fe0cb6": {"doc_hash": "59c54836fabc093c097fb8e9acd5a25a97fdbe2d79ec1c59fe7cc680964b95a8"}, "8debbfbe0ac533335ae372b7070eddbfe91b2ca4": {"doc_hash": "bb6672a2b78993539b06e5c27e04c7ff9c212f54c406e2a2c89b88a7350dc9b8"}, "5251331a818ff444c11dba2c16f2d532d59175cc": {"doc_hash": "110bfbbcd51fed1a8f54e3508a5f101e9a047e287f14ba0b3957e5d9fe503ca3"}, "8d81e4c37bd0065fa700b516f7a1475991711404": {"doc_hash": "56a0e40d93d298ae8021cd4ec4219b817e8799970ffc7e76a23056daab1bd393"}, "73e1c22b9c4006822d09fb92e07cd21f7587e551": {"doc_hash": "346fa5959d39c949a33845a49bcc9d6ebb889b9f90aed734cd84d8439d8e0c9c"}, "6cc61083cf586833e12a5035116ba2bb9fa1d901": {"doc_hash": "3cfdf5a49368f3236cc683b5b80152895449f5421c34d22ec60b44fa3970e474"}, "e519087b56ec56ee156342768e56317e11499bac": {"doc_hash": "f43abd4432fdf5c95be0871278a6f13520631b2b3ec200f0dccc859009952302"}, "d010f143013b96e788b3a27751a9869dd863b83c": {"doc_hash": "67f544f22afa3e7f7744984defef4cd8299561c2e704d085bfefe846e7486114"}, "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2": {"doc_hash": "5bf3b510e1b1494e9b4246935739f1ec6d5954b2004344577a8bd2bdb87b5d56"}, "10dc86f143df7511f6eb56e39b61c4dcf782c1ba": {"doc_hash": "693dbaff9f3b8018078704ade4449107b440dbf23fc240de07f89e701e8c221a"}, "a99163cb7d7c23ba4a76851624e5b6220caf4065": {"doc_hash": "5dfcbc4a970b2a931bb4dce207f7f32b191aa2eead48ee733c8e3cc10e2d4c24"}, "8f329b7e75e735e924b9459a0a29ec6d3cae5477": {"doc_hash": "ccd04d259d17507fabc95d68d68c62a34aa89b5b22cf5d492d92502ff86c0913"}, "0c749a25bfccf75b7a8c8e27568c178616d5368d": {"doc_hash": "861f895bd8c2fcf158868062d28c58912624cbe3d0b1553a313398f37e17cd15"}, "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2": {"doc_hash": "9928029e233942e199566fa0629a0418e0739b085c8d13bfb957cd77eb27ab58"}, "663d5b6cf13be0f1275a907bc31741a313d14b31": {"doc_hash": "f5b3087041984bc03e1052985bb7f0a362c5547883d0485c9490858cbc04c534"}, "fce99ff8c5884f7ba5a9949812e08489c86b7ebd": {"doc_hash": "97b3284d8aee146511df45723824af22b0425dec31d103c5e6cc42d823ba6ca0"}, "6775f3f9fb92dea7c04deb0dbb4619aa6e32feda": {"doc_hash": "98be4c152c40cc80133faa13a02e3c3e6e8fdc7296e511b44a699e75fbf80bfd"}, "2e294e91a705ff61d7ce858a41915e703db7e590": {"doc_hash": "0c4c80644d36d601f7ff6f2037054bcf085247525b623600c54595a7d65b7991"}, "55bce386ab89a40105f1481584f10c5ebb518f4a": {"doc_hash": "86386f5df96f0de65b05613ef32e18395276f365e09372788ca14b45608c77db"}, "a4a4b904d8b191a23528d4997e7314f27a6250e5": {"doc_hash": "6891bea34d9451c532eac04bff32072999225d1bd31270faa1b6428171a299a3"}, "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283": {"doc_hash": "72315367b56ad3779f7f26665c189876539760a14c96cfe66479d385f74b6407"}, "f5626351415decdb3cce95c2ba0dcf97f19b4f32": {"doc_hash": "87ca7d96c7ce0814bd75ca4578ce8f34f9c6843bddd7ae6567757f65147a63c7"}, "3674070896941616c6fd91904b4e53ccfce9c125": {"doc_hash": "30e1028b6a87095e19760abf4ee95a017ad6defd84d3d7556eec2e664888cd35"}, "10e9e232763fcb5426824ae4860c9167bea61eb5": {"doc_hash": "5423325fa1a5aa3c4c4d5e6ca3d2610f04762e265879f6f191d1b3aaa900be62"}, "25c156963f302a95be89c45032739d900f982c86": {"doc_hash": "9951d05316a4759017276c09400d9ccf32fe6feac498cb1406d140b0d17baf00"}, "851734bf26775211863b85ce8750d79b886a6761": {"doc_hash": "fa63854524a00a5af3c6d15a595115aa0b38cc8f3562526af399bce8239d969a"}, "ec3dbeb909cbb6dc05065822894f0d0cb7e58add": {"doc_hash": "a341ef45739c1948a7224d74bb0874ea84e8d65fed30632cfed0467b45c3cbd9"}, "0de19f48e6a004a29fcc717169500bd54129498f": {"doc_hash": "2f73be3a4170179371698fa9aa4511689be7a796fcdbb85cbd9e1c43a5425e34"}, "00803e0bbf0f3d47ea5568caf06860aa884da00a": {"doc_hash": "20d7d1b9d6fac53aac0cbfa11c47cefadae45860a324accd7c9a0b8bafa6b484"}, "3285dcf116bfdad51771084e20604689a1e7e14b": {"doc_hash": "2f17318c2474041488553f63c5b36fcb56857c1b8bb9251f0ae50b639e79e179"}, "55e0c4ab7cbdba9353a629cc70b3983e3e9a803c": {"doc_hash": "eb39ecea2db90ffb662a09278191d3e96785e62d51bedfd2b3c6f16faf8808ef"}, "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a": {"doc_hash": "2c89d12bfff26d3e72ca12f0c3dbc54e7629f6138ef411e3e4eaf242621ba466"}, "b484ecd890487de4c8d570dfa3845603338f7c0a": {"doc_hash": "c6147a46e439870cabef24b2f5a75a13c9b4d0048cd59d4f1b56386dc6d293d9"}, "f423c118b9d7a97be63fc2f724b8941551359402": {"doc_hash": "2913e63b10e5ca69fa45d1f045eb79d7eacb7d41bba65e47832fd305c4433f19"}, "04f3d2ec9980a7ace5dd0af852d1679836867364": {"doc_hash": "f06fafc80d20f365972a4ab8f63acc41d023c60b36024ccaaa52f36e2da2df66"}, "e2ae7c4ad61d8c725f1cba48b0a697056bd08676": {"doc_hash": "74fea5dab1b284b39b173ad9b0936c648f61e01557fded54c80fa1ae5545e8d2"}, "349d56d82877332aa239d46ed63ae96132a460f2": {"doc_hash": "bad4e2ef2c59d1c7909e0dff30e0b700420a5c3fc4d3ed2a95af781a9aab2bbf"}, "66a53c20d00acf0dceaaddbcf22285b6963dd513": {"doc_hash": "90d7cac0f6c449bc38374b643b1d7150cc914059ca707e0bf285fee35b58e35a"}, "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6": {"doc_hash": "9bffc958c4e65f46b6138a4b0600610a4d851b1b4c6bdf314c420d7ceae697d2"}, "160a3ee76bdf4783ebdf54434ea15874fcbcfca2": {"doc_hash": "9418510e7ce197c4d255281cbcddf8e1b9379bf49930a8829e5d4012cffd797a"}, "b44d415a65f4ba2652c65ce92f311a43dc6459c0": {"doc_hash": "5e3fe84eef044b149b82eeaf6ba3c1164268a05d0417f53fc8f563a950fd97a5"}, "36ad17f3a41b4149ccd6b58800a832bca7f71228": {"doc_hash": "04dfc5b349249f719fcbff57101e8ee6762f26c145dcbed1b88918cbf433af08"}, "6028c92ec26a27eaa2ba7c360864163dd7ff9b90": {"doc_hash": "2f43cde06977af2e84858ec1371cfe29c2320b09b7ff4ddfcbc8447ffa5dfba3"}, "677697a5ea0bf6e42ad17f33bac5435e517a95b4": {"doc_hash": "6157d859b0ecfb82e9a258f88587e707b23592e6cd1aeb6d214ca0bf9452b7b5"}, "136b8c33391a7e1b5f1958f576f1ef1bdecfdc92": {"doc_hash": "9e44ecfd538f0fed620ec808a4b207e8c97bc67c9e9e5c1a2b2f543c420e20b9"}, "2816a1890f140db2081e94e33bfcc4eea7325f80": {"doc_hash": "adcc294f902af73cd8082de401f5c211f7e4fdd1aa417587d7535ceb527f0695"}, "5a10e563752a8c8b9b4a6f90bf77bc9d6b0a971e": {"doc_hash": "bf78e8b120a8868b3fe2f7153250a2d997edf4d1a1239067415e09883a429555"}, "ce1e34a0affd2b1631b4428e19cb0925667d22c7": {"doc_hash": "c67dd1772852ffb171ab3c32a3a46d619a6e2a76f5080819d870548d7d41da43"}, "f61a351f28df52fb9f42768fa9cd91312c80c452": {"doc_hash": "3e537d118e58eefa120468982a1f1e0500ccb911889c84e45b0da044e972f44e"}, "6878c60abde2dad6460e60de634eb256d40c8f18": {"doc_hash": "f2d1fd0aa2b5a2d8372104ea1e989e16bba154964d1f18627897609bab8f7996"}, "ae3c2b16ecc23026d83047143b5b36712942ebd7": {"doc_hash": "2d26a0d4f7f118fe9a0fc5c066b61fa521290d6827dc8e6ebfa35f132f41db74"}, "fa894ee595ea533511746c94c66c36fcb678ecb6": {"doc_hash": "12e307a9d522d0759a9905eb7386ffeb6d87d6ac8346810809b0aaa08c9baaa1"}, "73a1295b60d8aba72eeb39f05e57338928567cca": {"doc_hash": "fe213e8cf1981eaeafb01828013906f5c209350b471dc4664ff0cb97f8bacf5d"}, "ccbe8ad6630f6e231992b45ff35309305f9ae208": {"doc_hash": "0c21e74f19186a8909e87eb115f6b6cd73bbd714f3e146e2ac9e3cf7d51a4089"}, "9674b2ef810b4e3148e81c1fcb72a884b3156506": {"doc_hash": "83dc323d6dbfadb3388235c6bc5a45d135ca009fa6471b377e0afebddc6fe944"}, "214de1548039954ceb3b61eab92b718ef015721a": {"doc_hash": "4cdc4528067eae8da067ab5614f442bb61a1ae430bb134a6e4124bbfc0c6f213"}, "78e4a99b02ef627a8bf0fb68ffd9cf938d7ed6e9": {"doc_hash": "924a4068c557d881b67fe0c196c837aa04d727c8d1ed4cac325093c55f8d44e2"}, "9cfa3947cc291d1e8e3fc531bd7b146d143d3c40": {"doc_hash": "bb6d0d50b656f3a680765dcc02f19acb85f57b28496e01b9c0a2c3886175cf11"}, "be160c9cc5ba7f37436e8a2b3df0fec060051879": {"doc_hash": "85af58f89ea01fb546f4be2e2591d1eeb3deae216a524c67bd2aa06a050c688e"}, "806afee7-97ad-4579-93e3-8c32e6dbac2b": {"doc_hash": "8447794e2791bd82c81dbc66acc17c666118d121c7276c41c42def7496a255ec"}, "01ab364d-31c8-4ad5-8ed5-5e1fd64607df": {"doc_hash": "0c24ab1aa7a69e4c4d0e220c4e58374794c2a0dd4c70e7310f71835ab3f966f7"}, "0f5864b0-74e4-4973-9cc8-d624bc4c2cd6": {"doc_hash": "5f1b37af6edca5b69c333a8dcfed70cba6a69b7a310c47021f91c0d185b0dfe8"}, "62bcbfca-ce89-44bb-8dc6-9843f78f6b92": {"doc_hash": "131f86c349ee4de51b696e7fa63dd02f9b6f6f8efe3d8db76686cf1a7d7bbf0b"}, "09c8e36cb3984714355d918bfe2a6b048a3f98e4": {"doc_hash": "57eadf5c8e50f2a80c46052a509c6f1c621d5952069d2800c1c2e9885946d6ab"}, "18660e7038d4e091a60804024bd571a387761b86": {"doc_hash": "87df299f00908f1b5bff66252d0992e27c7933f7777c2880f0e3cbb19dd0c419"}, "2a3e300bea3eb45247903995c576e4fd656ea90b": {"doc_hash": "10da34886a0dd40c4110f1d2d306fd6a7bb7ab0ea541384c65352bedbf428283"}, "cfd1819bb795d7d9fee9be05d17d86899712f257": {"doc_hash": "007689153fe1b44383cd5f9037fa09ddf44c000d3fcd2544ad36130117f140d0"}, "666e3c1cd09c05170c5dd70d0c110f2527406b7b": {"doc_hash": "b371e0ba3e45cbee41e73f4670de9b8076e2b7d63c38f2b68ef148a89ede327f"}, "b75d40a45b416d38cd18c797e37294662068f687": {"doc_hash": "b3fc317601fdb379195b3009fc2a8aae2f127c92969be4fa3432bbd3832c41fd"}, "741d4a200fee8394e6fb61109a101eb0f93b8069": {"doc_hash": "aa961633b3695a24bf457672de84814f5a5d4ffe1de188e8bb908d9421c5efb2"}, "8b55b0fb73624beacad6509e70c622514eb5fb50": {"doc_hash": "8d23f8f34b527d6f5d2704c9bd57086c11e06131afbb8264fc9d38c28080d51b"}, "068c55c5e55e9108498dfb5aa1e32096d35386fe": {"doc_hash": "9b4b0328832048644465ba42483ed2ca80eb7b5c16dd1c00cbd33cb3848dd152"}, "7930fa385ef54a9514030082df5d2db8f173eeb5": {"doc_hash": "a8ded1088777d76e629ebcf8a4a62291b36b855ffde1de9d2e90b1153cc1ff32"}, "d5d215e5145e8f1f87474427a4ba7feb8be06225": {"doc_hash": "4df2d2740e71c0af969a15e9b354be0442faab9b5b213ea93563c4046e8ee662"}, "6d86abe1-c3e7-4a2f-98fd-5fd754d13b14": {"doc_hash": "f1542fcebad531ad8af9e760324b8a72923f297a328727e6cb2af27909d65554"}, "c984102b-96b8-4d63-96d0-50e3593207de": {"doc_hash": "446e44cb20bf0c654023a0931aab749537a3b47b0617369ea892027af84dadb9"}, "8d5c364e-bbea-4164-be1f-a697d3b1bc85": {"doc_hash": "de6961550b664558b49701e0dc0d248f7e3de6cca4fc3fe85c39074e700de682"}, "5817b1e0-4f1b-4eb0-8042-50cbef220bab": {"doc_hash": "85e1eddce689493eb1c4d766ee78cb5b5c836db6363051f11da7c8109f8c1cca"}, "3cf8ac75-17d2-45f9-983b-96be264f452f": {"doc_hash": "714a63967f77881b163c504ddb55224591f8a950ac69c93c63efde74d98d1a8c"}, "260df489-cf5d-48bd-87fb-5513962ef998": {"doc_hash": "612950645f254b22547225ffe5c3f80657b1aaac11b55a8781e8ad408e4b5b1b"}, "f728041a-aadb-4eaf-9c6c-8f2d6bb3f5ba": {"doc_hash": "d7ca907020ab74ff16f9ca17cb3f7f6773d47589ae59b339f611fc466f1473c9"}, "0244e36b-7bd3-4a6d-982b-99c36271e89f": {"doc_hash": "95aadee7e0013f7867939ec11b517513080c3e0b18a1be21f7c5de7ea2d4600f"}, "7a6891e7-37a1-4f88-8e86-81462c0aa00c": {"doc_hash": "02e6c234c4764389734c7dbd07e707e4f73b1f3624393850f3c95d789f9161b6"}, "e8b8f78947e9728f095b1f6e331b60f46fe89707": {"doc_hash": "8d9b3ce788056ab828901575c4222c8fab25f02a45298e9d5e0c322f2fba916f"}, "91e0aa3b45c62b81946b2373213cd67a65bf97b4": {"doc_hash": "070301c506e99913d5c0da472a238697a85e98d647a647b3925bbe0b7382a8dc"}, "d74edf5761cd6546943abe8777543addfdc504dc": {"doc_hash": "0ba50b404680bdb0e2544734da80d0d80c3a2d555341ddefb934e843429d41f0"}, "77695e28dfe349ea832b066eea56bdeaceb5e426": {"doc_hash": "497f10d784a10de9f4a08ce6936f6cfab085a4e4ffa9a6d227611089afbbd9a2"}, "ee00387916acf892b8ab37b4abccab18d9d69c7b": {"doc_hash": "6f9f29a82139fc9039b5c792da119810092f99499c1647ed7d91bbb99a0e3fc2"}, "365d09cdc6618e13d8dd7544d455ffa978d98188": {"doc_hash": "96140d61d80ee21d78080601913cf1e8e16f44ef6a1fb110205161bc9630dc71"}, "1b729e833273f34cb986910ddbd387599f616e12": {"doc_hash": "abfb3b946fcfba62e5b68f3a667137fae8c553687e9900aefce54c7f0403eb99"}, "dd3a6b30138b563d7747351bacdf8a0708bb8f43": {"doc_hash": "2fac7b9449a44a0d10043019c955815fb0a5508a8026c6b4b733d5651de1957d"}, "b1c17665553a8ba329e1569f5dc80c82ef842731": {"doc_hash": "e8c9407fc18c9ac8b8dbe7e9a79d30e1fe192c1485e661f9d88e111a1e46b23b"}, "7d232c62e8b4426f57a48785fe2d0a797da45ad1": {"doc_hash": "cc78c7b31a7dc54a2c427523e45f00b1bc5b2fcd76fd156a8e1cbec7815e8433"}, "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6": {"doc_hash": "777c91ebbc6ca0f8ccbb7f09f56a94b45fe08694167d8868e7822679557ee059"}, "14cc11868d0db64989487015342363ea6d9c4189": {"doc_hash": "bb63daa3c96868a5cabbe94f09ae060fbed4a03fa07f4018f4d398c599c2c13c"}, "5e72d28e1101e56ce91d2239928a0860e59342f5": {"doc_hash": "153043528f1c12ebe1897712d44fc8258576c431ea4fe9fc18df94eff716f7c1"}, "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490": {"doc_hash": "62fca147381cd694b81d610ec784586f62791a0275d726a9ece8105f5cf2e5b3"}, "03ae15ca1452acd2cf3e7a98ec44e942611db547": {"doc_hash": "0e954e2e5c9ce98ff55ded69cb848ca823a63f3906d6910d2538ee35bdfa9dcf"}, "e2927400fb41579dda8b1cb448270a5fd926dfd4": {"doc_hash": "160ff45ffe4b6b0db13d94b4511065e5a826c3d33d338d16f830d003bb534e20"}, "8a04b95e-7a98-4248-8f22-1c209241ebe5": {"doc_hash": "a8b143ff876b2e329af76e10ae2c6b7ae02829467122b1c31142782d06b7772e", "ref_doc_id": "9173682d490692e95ea6d760545b39120746acea"}, "d609194d-1cde-4fd7-a381-2cd4b47ddde1": {"doc_hash": "51a1e99d9b27ee1bf0c05a2f7b8f35a87f79aae85e8855e2dda4d5384c26a234", "ref_doc_id": "9173682d490692e95ea6d760545b39120746acea"}, "d5b75c2b-5a54-4642-ab0d-f169d889b4f0": {"doc_hash": "56857568934aef696b67cc1aa7330e02d70d14862b614f73108be48ea2efedd3", "ref_doc_id": "9173682d490692e95ea6d760545b39120746acea"}, "960172e0-102a-46d2-8977-794bcfa64993": {"doc_hash": "4f05ea3d16a2a25acd848deb7508facc3a079411be007bc70927268cdb545399", "ref_doc_id": "9173682d490692e95ea6d760545b39120746acea"}, "71ba9f9d-27af-40b5-9cd3-ca853be170d0": {"doc_hash": "54ff73462be70400f05ab420a12822de23d9ea5fd59395657c1a49acdf5e8fae", "ref_doc_id": "9173682d490692e95ea6d760545b39120746acea"}, "798d2fec-2237-41cd-abfb-5dd6547f72c9": {"doc_hash": "cb08b42b5fa0496e808282d7e8593acc61df48b798e336089a6967e60c81c79e", "ref_doc_id": "9173682d490692e95ea6d760545b39120746acea"}, "0a83d9f8-39bb-4374-846a-deb1e21b8c56": {"doc_hash": "e5dd550cc1fb15d8965bd7e7dd95520fa4dcaa9f021dba1303f1a5c4ce1ea83c", "ref_doc_id": "da3104b7cf63ccbec58b9b5c55f91272be8a0c9d"}, "865f48c3-6776-4825-b698-c5b6f1476ae4": {"doc_hash": "f5b0a0b4af086d79a7c19b0475b9f3b291806da6e3617128c7d9eb9d9df4344d", "ref_doc_id": "da3104b7cf63ccbec58b9b5c55f91272be8a0c9d"}, "dea34342-01bd-496e-b7aa-946e16f08468": {"doc_hash": "95b3232267559460db9d061140e014b540cf56c4c56c4f1e164e55b8fb584cec", "ref_doc_id": "e62b2c9df7cd82a5fecb04f8cd3559b5dbfd2a4c"}, "455ba4f5-4993-4973-8920-cd1a8a726b82": {"doc_hash": "0bcbd8d685b8422e83a65d47ad9fa6963156a195d9ccb5a6d0e3ae4984fa8f57", "ref_doc_id": "fabb2fdf1843918d9885bbc8f3ad472795a2dfcd"}, "b9112a50-1c94-4d31-a0c6-0313168f1ac9": {"doc_hash": "38842fc6bd6ef347b53e6f83914cd2eba137065149e427801003ada47e9135e3", "ref_doc_id": "42d5307a86ab7b91f7b8d5904fbc84a22749b93b"}, "372bd3f6-2c78-4be2-ad26-8ed2b6d25193": {"doc_hash": "7968892de6a3da7f2e4b728720a3c8552a73f64184f1072f91d70006f68caf23", "ref_doc_id": "42d5307a86ab7b91f7b8d5904fbc84a22749b93b"}, "5faf1d3d-1217-4338-88dc-b737546d878e": {"doc_hash": "8ba2e73fbd868604d670450c41bb63248b2cc9da3a8f4e35da4ee3f6d384e0fb", "ref_doc_id": "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb"}, "56e56403-e29b-4c59-8d94-509a82cd62b3": {"doc_hash": "12a630f8aedcc72174c7662f34518912d70d7d7e8ae0a4cbcd9c8f6972f14bf6", "ref_doc_id": "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb"}, "776d638f-795f-48f9-8ad4-e361a491cb73": {"doc_hash": "23cf4bbd361c74169b590729e058f5aade41dbe7a715e5d83ba6963abae67b2d", "ref_doc_id": "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb"}, "7201546f-4a44-4932-b312-83277501415b": {"doc_hash": "d2c124a5f719b542cd662dc015153c69295da5ac8620d30abed37a2b3967c8b4", "ref_doc_id": "0e0c712c4dc8405bace5175f92c0f9317f542263"}, "1f34e493-1eb9-418c-b9fb-8cf5ad0403be": {"doc_hash": "8273a56e2e0f8a57cbc435506712bede63388772e6ed28ba99d62a6e97f83f59", "ref_doc_id": "0e0c712c4dc8405bace5175f92c0f9317f542263"}, "f333bac4-a733-49c3-a601-7d95f461bee6": {"doc_hash": "8ea67d5e802b29c5ae88b2324ecda01e8689e39818e441100507105fffe0e9d3", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "39969cbd-85c2-4a47-98fb-55f83ec3ecdf": {"doc_hash": "a05e919e517f948299f51f45db2912beed94da1e5ede8156ec8072daa73ae45d", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "280d5de1-28a5-4401-8ae3-e0a1721ba762": {"doc_hash": "5249fa7fdd7e21d3250358205e2f1c22950895e00f45372d0bb8ef27fb9b23e1", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "7275953c-b4ee-421e-ad4a-35c52565d044": {"doc_hash": "0e31c18ed0f1a45652774c3c9ccf15f69c14884e1940378d5d99503c5737521b", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "86cde280-8bd1-4fa7-a740-4ca4ba6c8650": {"doc_hash": "1bf7f8e9ebed55417525380747432a82be36530f994d07631091b79f4989116f", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "f3fa3c08-6a3c-4621-aede-7adcb22f50bd": {"doc_hash": "1ef31770f2da42d429125fc2579f6e7f8852dc6075c77c329b73b2cafc552331", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "1a831e82-2fe7-437b-a75c-60885da5cb9a": {"doc_hash": "f08cce77addc5f79918aae170ec151a5984e95e665b7149a928896bcb0b8e5d8", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "6623250b-38b6-416a-a741-241402e68b4a": {"doc_hash": "6a2ff80c86301550a03360c2544a716bf5eb44d2403c9d903badd6e12af96ddb", "ref_doc_id": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e"}, "7eb48995-4cbc-4242-929c-bf011a2f6a35": {"doc_hash": "8d3b1b439fd8ff32dd2d3ef67f39cd7a911a7a5c52c87b3bda6e0b9fb2868685", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "334500b5-7037-401c-9ea9-d8a3c45b8308": {"doc_hash": "87e375b0b300cc58bcf493534dbe332874e4613f2657c7fb8fe679300a898e8f", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "14c505ac-1129-480d-9c96-f2ecbe17802f": {"doc_hash": "9cb3ea285a770723786867deba43c2fed6c65e3dc17e29e64cb37b0f8b755b83", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "db319837-84a1-43fa-ac1a-322460982415": {"doc_hash": "14b51e2a49a76245a7eb3e1921805fcfbe52bd51f859ffa9342f4bc8514b459c", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "3ffee6d2-290a-4cfe-8caa-ecf507740f8c": {"doc_hash": "b8cc658905fd6079674c2edadaec36dea5fc4f9fe49b521e1fb9d3cda32fd906", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "58127a79-1731-4901-9949-a6fd693e3023": {"doc_hash": "2778bc75c1fcab7aa81e66c2de624eb7c09287da88f4ba5576d82895bdec14e1", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "7d0c394b-371c-440b-8457-09f3ef3ddc76": {"doc_hash": "382c60bd8f6c58043fc2b04880014e234f34cf719d66c15499ecdb030aba24ab", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "705b4b66-7974-4ef7-ab54-332a70297c7d": {"doc_hash": "78f51cc878fa53f829fe930bb91c535aef2d098fb3d5d8da31661254dceac582", "ref_doc_id": "855820ccd70b36a4ebdf0708322fe1d2f692aa20"}, "7c547599-adc4-4a59-8420-46f41a9c718a": {"doc_hash": "300e3d9041c1041c5b5826088255a5d9456b29526a0ce9715f7984f9da6c3664", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "7e29772e-89dd-480e-a7be-0c04204fdb91": {"doc_hash": "b8c3672375fc017b781359d13fa7e17a6c8fe418843fb05eed74d28cde38f2cf", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "4bcb758f-7d39-4360-b069-26c5ed638f0e": {"doc_hash": "f187b15d5f5fc7e46069f21e52d846f4ccff06de49d296d6f62a12cbb56e5cef", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "55c8bf15-e3e9-4ccd-b992-d582b1c11cfc": {"doc_hash": "91ba1cb5d2fdf3cb13d90ed3d8029047cfaea646a07beb0fe0c70e7183b1f88b", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "2c2be1e5-045d-45eb-a449-6461927038d8": {"doc_hash": "d5c810c5368fdb5b2ca1fae61eefb599359666a4d4633af59e0a1b6d802c8b49", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "6de54e04-e43b-4702-9706-f9a6ec31817d": {"doc_hash": "1166cb37203d263a8120032836a00d2eb930cf8033366786ac657dda1f1846ea", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "c39ea642-9044-43e9-a8a3-836cb8126251": {"doc_hash": "a946bc15b387e03e68649a4302f271e37f88bdb09b94e3353351ddcaf87258ed", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "6b845ce9-f7f0-4b07-b4f5-9dd835be4579": {"doc_hash": "4f115f624161daa947a115df17047bbca29de3c0a44b27808679b83ba328477d", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "28c431fc-433d-44df-bde2-d97fb71b2557": {"doc_hash": "c0be816c69a55d2a2e433f0d77c5ad5298a87e73cd7f04874c59df34a3209001", "ref_doc_id": "1425ffea42ccca97279f2cc096e2b2f7f43515e1"}, "c3d86d74-9761-4cf4-a2d5-f3d2f756a902": {"doc_hash": "f52234f19ff91ba77e1407196a6ee801e7a067db65e35411fe8eb5414c5d5ae3", "ref_doc_id": "1425ffea42ccca97279f2cc096e2b2f7f43515e1"}, "425f431c-a124-4cb6-8d8e-8332c9d3370c": {"doc_hash": "ba07a01950a96f48d681e527a605ca2fc8171f40d58689d5f1ddd95a5b5f7ec3", "ref_doc_id": "0b79593a3abe13f563d2210c3ecdaad08559f125"}, "4c555916-c166-4704-aab5-ba14db809e43": {"doc_hash": "2b87101c94239ef8c9abe4cd84e03164d5076b6c4d9f38f42b76232f37da69b8", "ref_doc_id": "002739eab60a14f1877dab15a434607aa53b87fc"}, "2f1ac7db-4fb1-42a1-be80-d367cdb52cf5": {"doc_hash": "b1ac6d8d4080bc06e74640d13ae4673fa98715dc7bfb5866abc8bc80d5645ef7", "ref_doc_id": "002739eab60a14f1877dab15a434607aa53b87fc"}, "ec69a2ab-a048-4a2b-9eee-084fc338f40f": {"doc_hash": "a89783751cbc00b5f59fd11e7d327b532784191139d3d368a3b44479dc2bd7fe", "ref_doc_id": "482b84522da2fbed3394563f6e985a5a5b6f46c3"}, "a50e04bc-98ad-468a-9d4a-63f57144090d": {"doc_hash": "cebaca157d04dfae7b2f2e45d3fd5534e956989e38945cd8e77748b2201b99ec", "ref_doc_id": "482b84522da2fbed3394563f6e985a5a5b6f46c3"}, "7ac343c7-0814-4c75-8c1b-0d450c4d460e": {"doc_hash": "f2c5e759c2fac3d0b7de75e44c0befbd4429398a3429a8b465ed4e283c918e23", "ref_doc_id": "12fbcca8bee0c06e3445ee65e8529f3108cecb19"}, "c7284df2-6500-4c31-8a59-455ea8bccef5": {"doc_hash": "10804085530891de745d36e8aa90d3ab9c783c4cbb41f137fe928b231513551b", "ref_doc_id": "12fbcca8bee0c06e3445ee65e8529f3108cecb19"}, "5c68ab28-8d85-42e7-b5a4-5fbbc1a813c8": {"doc_hash": "bb0ad4a13c0526ad3a1faa4f9cad9eac5cd8559417df85ddf79c46b7ebb0c1b9", "ref_doc_id": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff"}, "b52f7009-4d38-4fab-9e6a-a9979dd4a817": {"doc_hash": "c70d75bf1f616473d01ddf1376e6bd7fb58487d2a35bdab176202473fec9a09a", "ref_doc_id": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff"}, "6993cf83-0725-4653-98ca-e8f8b225a63e": {"doc_hash": "f071ce9f57e12c720799b0d8192cf790a49eb52d26d8b8e95285f9c308568d18", "ref_doc_id": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff"}, "83a56f85-0360-474f-ba65-4e31a6e7d5af": {"doc_hash": "03eb7f919184be1fa32986881bd2af41ef1096b05897bf026418fb8ea2b1b566", "ref_doc_id": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff"}, "ddc59cd0-93c7-4771-af72-ff962db0fb32": {"doc_hash": "3887288d1117ebddbf7a86a72f349c58800522be6d2b7b611416aa496e6cdac1", "ref_doc_id": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef"}, "2ba848d5-4f20-496e-bbc4-6a5033825d1d": {"doc_hash": "83563d4cc3d571ec7a7037167af6b583ead624a9d9a199afeba11b467a2ae7be", "ref_doc_id": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef"}, "11653cc0-0c84-4e25-99e1-47f2dcc0be2a": {"doc_hash": "821529e522f03b3a657066d4a00a81d08f684e418f59d6750c9a2eb3ace1ab20", "ref_doc_id": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef"}, "740968ad-1db3-41ce-a657-b589acff75e9": {"doc_hash": "ea4ddf7ec498b6a2524c74cf7860c26912af7e29970c4e86316dde8049cda157", "ref_doc_id": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef"}, "a1b41f10-e8d6-4879-b23d-509ec02feb82": {"doc_hash": "0e1bed76c364f025625ea34d9779be74a7c41ff5c9f0dece257883d43ebe43df", "ref_doc_id": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef"}, "d71af20e-3e1b-4f50-ad90-f3851f541b9f": {"doc_hash": "3187fca67af2089d5e2ecb05742b4a8c6be33b973fba25dd3ff399f7966445f4", "ref_doc_id": "6ec16da4fc74b224c7d481dee261e7ac40fed42c"}, "24943a7f-46c2-4a4d-9743-a03867c5342c": {"doc_hash": "c12428b325c561c2c31805f2c1f879c1e551ed0190d69d8d3e6a5101d52d5491", "ref_doc_id": "6ec16da4fc74b224c7d481dee261e7ac40fed42c"}, "9f236452-9bb1-4853-ae21-e821700eaed9": {"doc_hash": "58092b84ea6e08b41a25243e54f73d61d84e27903068a55cf18b1ae0b8af4ed8", "ref_doc_id": "6ec16da4fc74b224c7d481dee261e7ac40fed42c"}, "20f52511-eae8-4c9b-b1d2-94b6152e4875": {"doc_hash": "3802f1b809b1f26acb39b9c9cfeab75e35d61048f077a807667b2584c37e2207", "ref_doc_id": "7559b131bf41790c8f93ec1f26268d3e7db187a5"}, "c2e15d44-8b7a-4aca-9090-0f36e9a34f4f": {"doc_hash": "0c84e7dd980c90bae88c6235281a3ba2421760b87c951cfddec1ba9189a92bfc", "ref_doc_id": "411f00abaafdd7d8bf6f3586b259836b30f73389"}, "902edcc9-da1c-43c6-88b4-1866e23084e6": {"doc_hash": "747d7452b82ae87d4c6ccf3f29c0e3ce14636301b0331a9829ad8406aed177b9", "ref_doc_id": "411f00abaafdd7d8bf6f3586b259836b30f73389"}, "1656ae01-8e8c-42b9-bde3-7a7e4110177b": {"doc_hash": "19bde746748e084cfd4dd23d8e36944558cf27f2b77bc952c850402ad926881a", "ref_doc_id": "411f00abaafdd7d8bf6f3586b259836b30f73389"}, "9a607499-1ef0-4dff-a6e9-ca142884910a": {"doc_hash": "c608faac4b94df6889e488707556b615f82f2f7ff17bced56345b5fe1594d8ea", "ref_doc_id": "a7a10bc5ccbbea2f1262f525a538fb9401b52bbd"}, "1f0ae1df-101a-48d7-a48f-f2ff4da313a7": {"doc_hash": "6e76d75cea7599ed5ac1883fe562a05b890e89b36abf837073e04f3ec18a45b3", "ref_doc_id": "b58f70d0969b7e9992c63784d84a72874772bbb1"}, "2f2db8df-f419-4c16-88ab-d5210464ce18": {"doc_hash": "491c95b20b3cb505d674b2640e4372e5e8ca4e974936ca1f367876e1f98a4d6b", "ref_doc_id": "b58f70d0969b7e9992c63784d84a72874772bbb1"}, "bf988493-283c-4656-915e-2174b32bd0c6": {"doc_hash": "e0ecbb4c0426c2fec553a0c1638e379b8a6c974a19fb2adcb2089973252fde2a", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "39686406-514b-41aa-bf01-9023b7fe7962": {"doc_hash": "e6fcb8cc78aae1ec1b3a5932e3202714dfc78c434e92d45150f913dc2e5b0e29", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "e83ebcf6-bd8c-4f13-b89d-779e302a29c9": {"doc_hash": "ad97d75070598af680e5bd2f8c79beb886e8baddbbdf4941d27e00b06cdb4f3b", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "28051a15-2d39-4b87-b996-f9b1e2daaa99": {"doc_hash": "d34cf0afb2cb250bc8c9a101593f248706dd82bc9d4c2f346eb9e050be67bf4c", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "1bd4e225-dfd3-40ee-b58c-f90cef9ffd67": {"doc_hash": "b3fbcf0663447fe04d4328026357c2c98fb7c04eded7a7196455dd655afd4dd1", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "3bb29a0f-eb0e-48e3-bba3-cb6ac2d361dd": {"doc_hash": "d8ecaa343c0aa52de2f804b6cba8ca25c7cb010c2d3a297d94b4e3dff5862058", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "fcb886b5-2d6f-4ea4-a5a9-a01c414dcf9d": {"doc_hash": "672def660a8c1bc07785328d65c48c3aa817a4a2d71a79486cd248be33b25549", "ref_doc_id": "258e372521dd8449dda962e33a6ab05c857cff09"}, "07af51b7-8507-452a-ba4c-d74f031b59ac": {"doc_hash": "dc0ab10f3e1cf585487b4a6fe5608e1ec94381b8eddf1b8df65425a501ca14ed", "ref_doc_id": "ae55280fd826418cfd090ea78fe4a166e3b4db16"}, "81ed6f91-b2df-4a8e-9333-21599c87b79a": {"doc_hash": "ad6d7622e3f82bb465ff8b5ea942c9b6fb0bd69aa13095668b974937a5075978", "ref_doc_id": "ae55280fd826418cfd090ea78fe4a166e3b4db16"}, "d3ba614b-cd35-4661-a75b-2870c2fd7725": {"doc_hash": "b59ec79bc80b0caf627a58899ded1f71ab061257eaa8d2cccaa8b998a0ae0c56", "ref_doc_id": "ae55280fd826418cfd090ea78fe4a166e3b4db16"}, "d1f7eaf2-fe1e-4a5e-8313-81493c19f5d2": {"doc_hash": "9cfa2833a229bcd0c4d0c5cd529bfc4880e4a060dd882689c364e92296f04c04", "ref_doc_id": "ae55280fd826418cfd090ea78fe4a166e3b4db16"}, "d4f8b73a-f8e3-4fa9-bdab-1a8b77fb40fd": {"doc_hash": "c4f3434192b5e7be2d09641de95a719033b72d7b7791e2387f33e7db1e2dbfd1", "ref_doc_id": "ae55280fd826418cfd090ea78fe4a166e3b4db16"}, "64e88c6e-6f83-4cb0-b7bb-f0af03a462d5": {"doc_hash": "74f89f073df3331cb20d18b0f60fa894132aa52792a788ffd49170b5629765ab", "ref_doc_id": "ae55280fd826418cfd090ea78fe4a166e3b4db16"}, "009f60fb-8a0c-43a8-8627-d5c5d8f5718a": {"doc_hash": "f1b104d21eb26529b7df2d49cbc79629211687759d53d89038586cd23e5363c0", "ref_doc_id": "c7429042916671dabd3caf443829149208214a34"}, "63b0e9e7-70a4-4b03-b856-18592314e3cc": {"doc_hash": "917743b8e9cb4b823eb0f2c0a2dfb39a2d7ad95ef51c28e39d090bf7b3010be6", "ref_doc_id": "c7429042916671dabd3caf443829149208214a34"}, "5bcca153-b5ad-4bff-a6fa-a5da7be4ff89": {"doc_hash": "485fe9025b069ae2e0ca471c64acd2fd410461d67de0ed6f8be21661b89fb371", "ref_doc_id": "c7429042916671dabd3caf443829149208214a34"}, "374bea48-a9ae-43f5-828b-06c0a16d6329": {"doc_hash": "b37c1a2b8b215589d1ccc248acbfbd0d9ad525f7b66a72523f73524f0b19419f", "ref_doc_id": "c7429042916671dabd3caf443829149208214a34"}, "d758e4c3-c5c8-45fa-adf0-ffe5d2031741": {"doc_hash": "4f99a4ed0621714dd7ea3915c6efdb03372d662f559a09b2398f6230ba241685", "ref_doc_id": "8b58d408d24fb8cb32b122293feb9319c0113271"}, "e3f44d2b-410b-4dca-a559-efae8ecea626": {"doc_hash": "e9265ff5dffc46a4953cdcbc0105c8a555d21ddaca549fcd5755181666abe483", "ref_doc_id": "8b58d408d24fb8cb32b122293feb9319c0113271"}, "1f556f68-e80a-4fe1-a88f-afc54a193e97": {"doc_hash": "cfb531c274fdc47c860587b3c908d4ee025c3bba2176b3be6736f570f6db1979", "ref_doc_id": "8b58d408d24fb8cb32b122293feb9319c0113271"}, "5d19f230-064a-43ea-9812-8d328a665f89": {"doc_hash": "bebe8120cf81c2139275e40e4e706a3cb720c134822c14f9fb3064e1f4b95e25", "ref_doc_id": "8b58d408d24fb8cb32b122293feb9319c0113271"}, "8fa96f78-ad91-498f-8560-91444784a4de": {"doc_hash": "d2d4e4f02d06c76a0916c8aa10d07d7d63b24017dba09158d830c34ff9ebf1c0", "ref_doc_id": "8b58d408d24fb8cb32b122293feb9319c0113271"}, "2a6357ae-58d9-41b5-90e1-0df0c33eb8e8": {"doc_hash": "6e2452e2003a1be6ea99aaebe76b260d0612c63c5eaed0b65c956e3954c5a879", "ref_doc_id": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66"}, "d195b25b-e4a8-4f8b-805b-91d563ac4f01": {"doc_hash": "c2aba76b5e0a80a85f93c2ecf2bdcdca03cc12c3e78fa623397e4b87e794ad31", "ref_doc_id": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66"}, "cee0e86e-e674-451b-ac39-5bf0358fbb90": {"doc_hash": "3f1e23d145307a32698758880893140b112c874f49bde3b27c5ef65172a13e44", "ref_doc_id": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66"}, "8c4d1617-95e4-4fe2-91cf-8e3391184a1b": {"doc_hash": "cf0f14269c327f91a0e0a704ff7ea1a1d4e7759ffea3a72380528dc34f1b3888", "ref_doc_id": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66"}, "dee6bc35-0fb1-4caf-b4e7-8426cf554e2d": {"doc_hash": "bbfca0a2d2045435ab89aae0f6f83a68deffde74be68664a81f3b6ec2cd97382", "ref_doc_id": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66"}, "3400f8bc-289e-4e5f-aafc-20df76068bd3": {"doc_hash": "b41e4e95d5a0c72e6af44134e30ee0079a1fe9600d1f1dbadbaf648ff539a915", "ref_doc_id": "fcedba8087fd732ba9bbf616f76d12206839e2b5"}, "ad7c9cc2-8406-4cbf-8bdc-fdfa91f20f89": {"doc_hash": "1afb7469ee2e05314b580d814dc4f2a0caf418d4d37821faf5260c83bb06700b", "ref_doc_id": "fcedba8087fd732ba9bbf616f76d12206839e2b5"}, "40c6275a-d6ac-4096-b4da-c446b55588c2": {"doc_hash": "1d569909e048d47d4ca6237c08333e5cfa13ad097cd9a01764f865e13b3945fc", "ref_doc_id": "646063726f109495484d7522abb13f00c7c684f4"}, "9630e194-c78f-47b9-b021-42624306ba1e": {"doc_hash": "987184d9af4859d1552742d5c97bb8a299095f6ec18b38cf05c0c5940ed6083c", "ref_doc_id": "646063726f109495484d7522abb13f00c7c684f4"}, "d94f4642-81f0-41c7-a622-cfd7dd641d6d": {"doc_hash": "99a2d194796e50d50aa6d44028e60651405a3f4ac3250d142fea63e43b242ae7", "ref_doc_id": "646063726f109495484d7522abb13f00c7c684f4"}, "e840ab4b-a963-4489-b7af-78720a939681": {"doc_hash": "f6235ad5e372b125e828c73548c05a1020007adb4aafb904a9d0c98aa2a47b0e", "ref_doc_id": "646063726f109495484d7522abb13f00c7c684f4"}, "0121f8a6-8bd9-4316-9fc3-352d3855190a": {"doc_hash": "eef4a80b116c344bd1aed0877cb323f14939694f8e60539437d95373537009db", "ref_doc_id": "4882a2fe714b9001994272f13c7e0437e1f5cb99"}, "9767a31a-ef75-48b5-90b3-9b08d99579de": {"doc_hash": "6855060b135057abdf017e09fd0c64bc368d9239b04cc5c15b5ab004b2a3a2cc", "ref_doc_id": "4882a2fe714b9001994272f13c7e0437e1f5cb99"}, "5ca6eacc-0e24-4b69-a7d1-97cb709c82ba": {"doc_hash": "2b94b53bccbfba7e2a78da93dba6351c18f2811e64e3d980ff0152b8a2df26b2", "ref_doc_id": "4882a2fe714b9001994272f13c7e0437e1f5cb99"}, "2a628a7f-7009-4aa5-bd43-b40d5eb3bf88": {"doc_hash": "78082a511bb78482f52101aa90e5d15ff33409a5ae3734b54e9385f5cfc45729", "ref_doc_id": "f0f5db55d43628fda1b6a6bc1da1f95731ba83dc"}, "6560115e-86a3-4bf8-ad5c-a2aa6e163af9": {"doc_hash": "f36bf8db095fa4f0201dd58583e785d8a79b9b4adb6ef538e3c0e3a10614b68d", "ref_doc_id": "735d40528fddd510f26a26dfc86f52978b7d0e8a"}, "77455c72-ee6e-47c7-85df-3665f70f7b31": {"doc_hash": "b39484b656a188636f81033b1206955a6cb7c69bfbd88e6bc081b26abea87a85", "ref_doc_id": "735d40528fddd510f26a26dfc86f52978b7d0e8a"}, "55922938-7ffb-4df7-b8d1-a582bebcce4f": {"doc_hash": "a83b7a4c56850701c3ed04e2d74cfb1b66b6b8cefff7ee608d6334c91fc3ab14", "ref_doc_id": "f511f52fbc4cc9f87a3ed5a9c3b37fb6862ecba9"}, "d85bc2ac-cf03-4170-bcbe-027ec44234ef": {"doc_hash": "4abf987e2b132569bbb89d80f205defefacc426256764f0211d18787a265c6da", "ref_doc_id": "ed76af1c7743556b464d363037967b0b46ac677d"}, "4ed039a3-7945-4b1d-b365-7462b6d4de61": {"doc_hash": "64b958b5998a30934388c90c8eba8aacf4536c3067e000a4c838ceb429245ecd", "ref_doc_id": "ed76af1c7743556b464d363037967b0b46ac677d"}, "2e9e1614-a3b4-4dd5-9b22-a80789049c55": {"doc_hash": "4b6d0715c398ade4b20e2233a654b8024033da5f1ef4986501a8fb1e7503549b", "ref_doc_id": "bea39f524f33c090c079450175271269a59c92c9"}, "b2ea520c-b2dc-4885-9b38-08ad14c9fcbc": {"doc_hash": "98db6d39148bb85ee2c8887474bd12fd4b007e9ec0c14ac7b4c31f3ac5a1dc7f", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "b59d68b7-6b08-4569-b0f7-d3b046612a2d": {"doc_hash": "bf3aaf4db92064ac8d2e95b7d436b5bdaf46e840689e02509dc99d310466a0e1", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "92860a34-7f82-444b-bad5-ee24a84516fc": {"doc_hash": "c5186a375167a1ab011820973404760daa34ddadb9cab1ac3e3ab5f2cd47c1be", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "2598eae3-3d4b-4974-8aab-22f7d880465e": {"doc_hash": "8fe5ba76863ca571c2ade61bd5bd29320b06e4a60aedb8f2b03ae807dc4e5fc8", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "98e4f1c6-87ff-4879-b5a3-4438e532e472": {"doc_hash": "b14286ed271a6619a47dbc2edf8144b322f010f23f05c554b59a7e035d4ac50a", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "a418d0e7-5c48-4ae6-8e53-4908656218cd": {"doc_hash": "4f973392a9ebcecce178fce8bb0ffe5a68b941b839fe94cf056dbe7b714d17c9", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "a2193892-991b-4dc7-9248-fda1b778c6b1": {"doc_hash": "91674542eb239f4a44c5a2784c7b288feb99cef0a7e52cf8ce3c0c1c121b8380", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "7f41c9f6-8589-42fe-9188-cf58151ffba0": {"doc_hash": "9103309dc104e2799e3bfc2efc0a62ddb9e04e22cea7f7071cb46365da0ace37", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "57711c24-7dd1-433c-9839-020d9178f859": {"doc_hash": "b18d885a4941c150881fd54ce28e9b59fabe6e61672e7e09a5d97cdec05c7c0c", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "6f559d62-abda-4e4e-8478-84c7a40f9205": {"doc_hash": "8faed5ce6cea80364b9b555b1b942039fe1f4584676e0cff967b77d3975f0764", "ref_doc_id": "0548048c629300181a159f3493bddc5618b16567"}, "d11e1765-90a8-4706-ab19-6c621f101a66": {"doc_hash": "a7ccda810bee1d9981ce99a968835849d32b5878bcb2aa85f71d21ff362b2d5b", "ref_doc_id": "5bf1cf88b972cc6feb32ad12a20e5319e68644a1"}, "be6e5071-23a0-4002-adff-570a626b070e": {"doc_hash": "5c962e4006460dd8f079d7ff80f3556c209c77f37e52e9a4fd3eb498f0a4b018", "ref_doc_id": "7b96b3a91d8e9e8b32ae0f8d17d0abab970b0750"}, "13ea593f-4510-4b72-91a6-cdae5b743fb7": {"doc_hash": "d00d66b8e20779dd42fde5485e13fdf3022280f519b27158375eec7e6b87fe12", "ref_doc_id": "7b96b3a91d8e9e8b32ae0f8d17d0abab970b0750"}, "4cffac4e-e52f-44cf-84c6-9efc09aabf2a": {"doc_hash": "f2346a3d145924082ea6d31ae1754545f6064820f097128c447be990ea8c6924", "ref_doc_id": "3e33209cf119a9713609610a7bd2b2b4fd17ba4e"}, "7ee159a4-6f11-4deb-b56a-719bd8f94f02": {"doc_hash": "5bb0f89ca6c032b7631c54dd58404646c23c3d3dd9bd6eec0d7a8b7e00352fd6", "ref_doc_id": "d35783ee9c448dda98c3aac7fe2be9bc692f597c"}, "639f56d4-2ed2-41a1-bcd0-1fb949c50856": {"doc_hash": "2f7d6f401f6a1007b1eb93bd93ce4e55fa5b2d0ff90f87fe38118b1c518f8979", "ref_doc_id": "b2d8691844beb4f5c62c09b71a2ca6f546d7d4e1"}, "eb457743-ad1d-4fd2-b11e-6cb452ba0488": {"doc_hash": "da71d682ab9e142c9d24eecf7214d9194efae2ca08aad7e68dd40dd0541aa2db", "ref_doc_id": "b2d8691844beb4f5c62c09b71a2ca6f546d7d4e1"}, "bafde456-0f1a-4504-adb2-8cf6f2fe596d": {"doc_hash": "4c9fb195d63b063a9a47e03c906d922ad36283fca14c3c5bab8e645eb746413e", "ref_doc_id": "c9703fb9da44831bf3fcf0389f5c6204b9fc2ff7"}, "4e8185c2-9d65-41bb-9a10-f9b5746f255e": {"doc_hash": "99f8511588f6c652d1ab00fbdbbe94f7e4e0b87382595b3b09cde0f7fb3a9794", "ref_doc_id": "c9703fb9da44831bf3fcf0389f5c6204b9fc2ff7"}, "4d0fb250-d4b3-4e20-925e-9b714ea40669": {"doc_hash": "32cb213a1df5fa052d2a4907bf3e3fc7d952b42e683f6084013f932fcf14f93d", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "fd461848-22ce-4d6e-8a66-018154b1d2b1": {"doc_hash": "ab4511ee731ac63e5ba97a96751c28b7437f4afff2d4fb4f1b912c49a3bcc209", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "74b34037-331b-44ca-8814-38d73161b268": {"doc_hash": "fc2afcd57f03522e4b82098fbae350dab655722f12bc34ba626611910e7c5987", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "5d6330e7-9b86-47e4-a5f2-d6820e5b1929": {"doc_hash": "27c30ff1f7a7a73dc50f4026e5e7149e30f302a1768167f4c6a988ac4a084131", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "17367998-fad8-4f7f-a008-29506a111cd3": {"doc_hash": "04acbfa1d4a2b9b76c42739d3d9f86e171e286b7eb9e1c1498375c0069fdcf20", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "9e96ee20-9e32-47cc-bb93-e4aa9d2ecf01": {"doc_hash": "dae2f9723350f69d19e958fc6370727073819c220959d5188565861e194d712d", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "4ba16fe0-b133-45bb-99aa-25abd328ee56": {"doc_hash": "8845aceec0ec40007725bc80baeb425d00ab9bd23aac300f296f45f8d442b9ce", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "42935348-7dc6-4fc7-9f17-c3acaac86dcf": {"doc_hash": "6d3e13a2aa57356e5c97d844ea7a971af096a45f64ff2d082b82035396e99f3a", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "f035b9a5-d75d-44ec-a328-b67f23dde95e": {"doc_hash": "7e8a9e932ae03be90bf6c0b8defdf349e7eb36b6eea27e4239686083b35453f0", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "271f6e9b-0b63-43ce-8fb1-7cd4be4bffff": {"doc_hash": "ba1a58d6ea1aac43a4d83afe4c8b66841a137d7356975bbb5d5bf16b11090d81", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "125846c0-6ad4-4d9b-bcf3-253966f14e05": {"doc_hash": "2aaa8e765894a976ce4a81def41a83338292335e2d1386a6c1a0a20838d3bd7d", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "dc83c85c-5eac-4541-9e3e-bb2fb5b253a5": {"doc_hash": "e8a01d37e47e3ed9650cf950173274dbc877d474bc32b9b4ae2733ea37fb2800", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "a5e43e68-2463-4749-b7b5-3224114f1680": {"doc_hash": "108aa7a381457bdd2bc2fa381dc0160d35f48e869de8f26bd31744b4af6187df", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "bcc331ba-5f56-4a31-8a36-497806193c9b": {"doc_hash": "0d7ba15401b4b3b51b120a3937c8253fce7b814c4a7273459cb2e381e1de612b", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "d2ff72ba-74f3-4064-911f-96ee6bb857dd": {"doc_hash": "334ca7f5c61165ecef38fca455b799b308c5294018035b362b0679f2efbc70d1", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "d6bfc54c-4241-44b6-b2c9-741b4a2421dc": {"doc_hash": "6b54fd72f40928e1ad3e16fc8d0cca519dbf406ca7ccc37ced70c26c2c734f9e", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "0d087aa5-6287-4182-9057-e0a57e9a4673": {"doc_hash": "a7b286fcb7ce3fe5d47a73213134f8f9411de04e545f9e3358dad185282c3cfe", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "43b1e8a2-a3fa-419e-a3e7-a12e6eb516d1": {"doc_hash": "3cd0c223d1912e93d900831b0c49d0d47e688aae4be0c425a2cc54ecc043a359", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "a1e36122-5261-44f2-ac8c-b87bd41b07d6": {"doc_hash": "42aa1e737531bbc411907b73239f8eb67d959e2503b77a37d151a251a8447396", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "f6abd2ef-4ada-4a16-8413-11e5e64845b6": {"doc_hash": "5721afee85d065f420e849317a8a03ab679696d58d479efe3bc1565c97ad64ae", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "ace23ef0-2d5e-4a64-947a-ce30b78dccff": {"doc_hash": "9ee87f7508bf4d06e88d78c6f8f9943c4b89fe85a68c8582fbc658424e5725e9", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "93d59ac2-b665-49e8-bdbe-ec1990138649": {"doc_hash": "db6e75e475be5d98bcc674691824ad460db0383fa1e9bd894519e961f0592f0b", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "e29f4f8f-87ac-4f44-976a-2497a0350f9e": {"doc_hash": "d129722a45cc4654374ffe8a3dd925034074dd1476386f31dd0785513d727e0a", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "20e9d1cc-d87c-4b29-a748-200420144ad5": {"doc_hash": "74dd3e4c6c2cca7c3896a1b36e9b641f2adbb3bdd99480c0b7a7b88bf15805b5", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "d1da0c5d-2624-440c-bfcd-e5761b8b60b5": {"doc_hash": "9aff9605891a1c9ceebe7c6685b3d2028831447d6b45d4b83a39facb0de88fb8", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "c350152e-381e-4743-9213-375d1098e396": {"doc_hash": "0909de08639d1236ffc1be96b6b09a6c2f8d2b0b6f43424158b5ff76d33bd9d3", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "5ed13d50-b799-4583-b966-ccef64415850": {"doc_hash": "150b60d28cf12953326cbebb6f2a5929a5affd051d9f13ac27be90509fca3230", "ref_doc_id": "3ed333957855992aea21bf7831656a79429d11a7"}, "602510b7-5a3f-4a2e-aa5e-9b2e43b61cda": {"doc_hash": "34020bf379e37800fc6a230b06e5d2286ccf71294581e4388ce296424f0f6c9e", "ref_doc_id": "2f705619e09b0779c5868a0c30a13034caf69c00"}, "1924cda5-ac27-4268-acb1-73f34c42fd0e": {"doc_hash": "1630bc7044b071b4fdb255f12364daa9db2fe9dcf5fe16441a102bcc8cf22aba", "ref_doc_id": "2f705619e09b0779c5868a0c30a13034caf69c00"}, "86f4cfba-37fd-4a4e-abb5-eb305789f36c": {"doc_hash": "3a377f381a918b0552d41dd28607da9fbd3e1593913774bb15b8c514760a875d", "ref_doc_id": "2f705619e09b0779c5868a0c30a13034caf69c00"}, "905f9d27-3a16-466b-ba3a-8d7a3980754c": {"doc_hash": "981837f322178dce1b25068465a8911ffa08823d2c7710cf74b6575531a763a7", "ref_doc_id": "2f705619e09b0779c5868a0c30a13034caf69c00"}, "80e00182-c238-4303-a1dd-80c98df9a180": {"doc_hash": "9e99b48455a5754f14c731190aeae3b8a087bfb3518175ed91581ae2bd365b83", "ref_doc_id": "2f705619e09b0779c5868a0c30a13034caf69c00"}, "337e89c4-d755-484b-b01e-87bab502584d": {"doc_hash": "d8545a8bc8beba59155361c099f6c835386ae3b3794c4737fc17bb80e8d84050", "ref_doc_id": "678988222db96675acd73ba5c66bf71548d5db33"}, "0c806fac-543a-44c0-b590-292ca01b6128": {"doc_hash": "e6eba7fd35d58238be33576e790a9ef0d4d96286f744befb5f0d4a2779d2f4ba", "ref_doc_id": "678988222db96675acd73ba5c66bf71548d5db33"}, "73a229ce-74f5-4115-9353-0dde44c11262": {"doc_hash": "2f433f0bfc716d6d6fd04e3bc1bff72d44d99a1298dacea86f41c25a7e41f318", "ref_doc_id": "76da6c0201680703b0965a3b79215a10c2e802e8"}, "c391e37b-c6a0-41fe-9862-10c701d57fb7": {"doc_hash": "c78887a62e624ce61b952666ecad0cbea2451f34d780303b4962ace24855a1f5", "ref_doc_id": "baddb1bbf38fb3141d460051bfe189358a8878c4"}, "2e4e3451-57f6-4a53-ad87-5ef9f4863397": {"doc_hash": "19f4965b83be374c854b92deb2baaac15965b4d7eb4ee038f28d5d766013160b", "ref_doc_id": "c9955194a150523643ef678ba71151822e97c72f"}, "d16d6091-746f-4ab1-a592-eb91ef1b4b96": {"doc_hash": "f287715578767df692d90fbbba94a0e884e43d68091ca7946b75472a8bf0cee6", "ref_doc_id": "3743ab5933f8b5a7ac780947ff268f9548093bf9"}, "7aedbf37-aa17-4ee2-92ac-083114bb7c84": {"doc_hash": "2e733dd6ea2a2bfe0d9456e468000e4d58d4c01198d7c69498e802a800001c49", "ref_doc_id": "04773228c8cda33bfedd9eed3dd9e30b7b868a97"}, "b3141872-f196-4899-a881-c6bc6b5bf944": {"doc_hash": "22d5025ace1d77d6e6f03ec54907e9b36b0665fa267867e78071e2cbcef80021", "ref_doc_id": "04773228c8cda33bfedd9eed3dd9e30b7b868a97"}, "094eacbe-a6b9-4aea-891b-51f200dcff44": {"doc_hash": "d467220aa346d55bbd3b91ab20643fad81aa9227edcfe32d32059ab1f94ecc2c", "ref_doc_id": "42ca53d382f933c7e75ee59ba174c9a5f88216a1"}, "0ef231ec-8084-40ae-a95e-93d52d8d24c8": {"doc_hash": "e1a0173140f79558bdd6e501a597669d953c3064a4a5396bdeca97bc1bb8e7ad", "ref_doc_id": "42ca53d382f933c7e75ee59ba174c9a5f88216a1"}, "c4563905-e349-49ae-afbf-159024704eaa": {"doc_hash": "c8acc7db36f955dc12cb869a07e6c27d992dc5409832bd92a8b083860ba5e849", "ref_doc_id": "23776682c639645af8424cb160000e8dbfeb9063"}, "8bbabe8f-9320-484a-8bd6-4290a78f5eba": {"doc_hash": "6a492be8727d212bd41f1f399c012bf32fe12732f72fe278952136029467e0b5", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "63ad2ef4-34e2-4233-a46c-cadbf3ad0042": {"doc_hash": "88e5ea6e99311f4770e850483fae5c07b80d5ca355d38889592343e3f8d25f0e", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "75baf60c-3022-49c5-b507-844b686f3c0a": {"doc_hash": "fca5b8347ada709d1d59f9f5325204cda8a63514e9ceeb2900751e382c6991bf", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "f64dcaa3-364e-4252-879b-9f5dd4e81b09": {"doc_hash": "bb21352e4758d21d342c53a19a01f2d9b85cbdb8e182e3ab842e55233515af60", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "5cf2c0df-4056-44a7-a20b-de5d97b2baf1": {"doc_hash": "0a9c12514077e3a973b10999cd9b5f520c43b1ba98427da5a8f60cbc63445f10", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "f6a115e9-ad89-48c7-9033-660179d279ed": {"doc_hash": "efe5732da16c58095acc67e21161f3dc270d9fc571fa00fc59ba1d7c5dff10f6", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "7a683e7a-be5b-4840-997d-29c1584f9344": {"doc_hash": "15dba3e9db4058420bf85463e8b98edeca4056695ee60578a455b855b4a291c9", "ref_doc_id": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1"}, "b8b99386-089c-44f4-b5e6-14daf46b61eb": {"doc_hash": "636e53fc79508b1eab341df3af1cbc68f183e8feeb859cba29f14ddd2d23fd71", "ref_doc_id": "9ffa64d23dbbcfc718c2e076ea4841d265ca072c"}, "de8dea67-b6a6-44cd-a4f2-a90c010569d9": {"doc_hash": "43b40167b21bc08ce8c7c7a2a6151c14bec364d693367d84190c7d8a712c88df", "ref_doc_id": "16b9c5c0493f8bfe727e4e139343a6a4a7aa8da2"}, "0c89f1d5-3d4c-47fe-a5e4-5d65afb3ea2a": {"doc_hash": "854dffc21856e08a3b5253abdc574bc49cdc8312a55a9763adf3e7b92b539983", "ref_doc_id": "46a4ba4c245feecd6aa2ad2a02f14b35aa203ce7"}, "3bb244fc-df4e-48b5-b39d-9a22f0c32a1b": {"doc_hash": "7f758c2d6955b1fad16136cb9003a5ac6adcf2b2b08bd04e0cea0d89533b8451", "ref_doc_id": "42423117fffa4424452f942f8c1ae359fa66b585"}, "904f8c48-1902-4cbf-8099-e201e37ff10c": {"doc_hash": "6f5a57d27ef11c2f547fe6f0f5342ce7b12fdb3949f64627d16e3151e4558d20", "ref_doc_id": "07dabe8745e40a791294aae16fe02e8a326e90ac"}, "f0b7d9c3-38dd-4dac-a3b0-00fad2bc2699": {"doc_hash": "71cf88ea7445bea6ca319a0f6f6bf007b56a45ffe11e36bac03ddaa688f34ac3", "ref_doc_id": "1038dbd099dc82010c7137a160e6ac18060a48d4"}, "86a1e835-2318-4209-b90e-e292727f6761": {"doc_hash": "5d2538f7e400d0af029c66cb2f122534b830c16ef11ebc68efbdff0b260dc424", "ref_doc_id": "4cd0931c2ded02ae30ac96be7562e43523167826"}, "a9814641-9da4-4414-9dff-d46775ca38bd": {"doc_hash": "245cf9b2938bc1a182c4bbc8c64e5b3fa8f20be1b14d6f4176d6f15530ada03c", "ref_doc_id": "2b84d29cf798f8028fb890af3f2433ff794b7c65"}, "538cd619-c5d9-4ea9-983b-f70fd4c75061": {"doc_hash": "c5d32bf2f3459d31323973a29c81d25f80fe695b3efe12f8f14335e935194540", "ref_doc_id": "2b84d29cf798f8028fb890af3f2433ff794b7c65"}, "878653f2-c221-48c5-91df-57bbe53a14a0": {"doc_hash": "7e2dc9b7630ac3e2e7d124f3ed1c289ceda044f406f24f63e246929590119572", "ref_doc_id": "2b84d29cf798f8028fb890af3f2433ff794b7c65"}, "7c8dcbfe-8f7a-4969-8c83-5f3fc04302cd": {"doc_hash": "d24af179b3b63cbbfa83872d219b55637923f1d2011a84cdd5f3826cf273168f", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "011a24a7-172d-4198-853d-d3040505c6ae": {"doc_hash": "c097f8fc4626ff8e4ae1f90b7a5902ce3bbf4fc366a6ba32777c46b532e12640", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "8ced54e1-3659-4815-b39b-087ca4a296f0": {"doc_hash": "e46a18731378266ec81cbed2a22938747787ea479709a2c2643843f5d63fbb79", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "401b909a-22ae-4422-9655-8e44bec433af": {"doc_hash": "e8726860c130a70d0ad5ff8af92245c8058801b8ae3f796ae99f310dfe5b963e", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "638ada6f-8cc7-4e4e-9394-e17358c8d252": {"doc_hash": "5a9f96d2529d602de8035e2bd5d0cebbfc5f923996f95803e2b3b6c435bf6855", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "f3c2ac86-12b1-4403-ab43-fe8e147aaaf9": {"doc_hash": "e253f0437b17964770acc4f97353a5bacab0239d1dade71a91118f9783607c28", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "4694313f-5702-427c-83d5-a3d8a2005ce9": {"doc_hash": "02eee45f0fae77c01900514385905d2b607f26e7517fbcf2320985d9085243a3", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "b36fb85c-5969-433e-97c0-f6a8ba125104": {"doc_hash": "056209bbc2857586a81ddba521c2d655c7a6a38d2d54a6b2dfc4af51a0876b15", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "ebeba8c1-7df8-444b-9a38-011e7c96849d": {"doc_hash": "b8e521bf8f73344252b1e4dc90a0f3ca6d74492d5db984e56372114eeb836659", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "667b2736-d769-4e27-a961-57ff9f9d6f68": {"doc_hash": "e798f55f63ed9e26286b265e403e2f502a1a786ede87273dd2a6d4fe8f74d5d6", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "4e74557e-45f4-4dc8-b765-7d45e63c85e0": {"doc_hash": "1c8b42091a9d25d3254b8e7783ffbbe48a0e54a90fd50ed1ff5cf6831730a9ac", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "31b8eae2-eced-4831-89ce-24fb50dc7e8f": {"doc_hash": "32bd943b25d44f3633a489de4958b4a9371c1b4175821b6a94118b4def9d90da", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "34ad620d-6576-444c-be95-4f127f798044": {"doc_hash": "3025c906397d213c56f6c340e7aa8bcf50045fdb61f11ca967aa4a21d3fc6072", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "a159d6c8-6299-4fd1-84d3-39093f641848": {"doc_hash": "7bcd5b1f85117c05110aac0948abc26fa6c283a5f662c0d25622580ef5d9356a", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "4408cd15-53b4-4d28-91c8-49b644ce42ea": {"doc_hash": "5a6e3707236ed648b55fff2d7983005f02884676db5c911c792aae4d39105958", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "6766ce00-1b31-44d1-acee-fff474577ced": {"doc_hash": "f0064acbb00e4aa3e198150dc12a3f790c453124f149e23e7e6b8885c53d9537", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "e46bd04e-ff28-459e-b1c7-e8c6b8b60d53": {"doc_hash": "101439a25c89f3875ec48444c5a81a4c9dd8754cde38e5b56a09780656fd2446", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "aae8a8f7-8ba1-46ce-8885-2ae9b0f8c109": {"doc_hash": "e5efaee67b30da4aa3f6993ccd54980990b6f6e576e6f13e5a6c2a80db8eaeab", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "14f05ea2-46be-4d05-99a0-d3eebe4e79f4": {"doc_hash": "650bb913c11eb9aa53497404fea78d7ecf2ea8d5949264bec16a7957aec20b04", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "e12bda77-847f-471d-832c-b2667e4f114e": {"doc_hash": "b04bf1a6a0a0ba2f6e0e5b2e3a1f1fb221778ce1b93c1085599fc1ad69be7c51", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "84368e21-284f-4737-82e1-b05c2718e61d": {"doc_hash": "f0fefe1b123d905774d8a55b37214f70ab3d44ca48d02e29349b24a2bda09d4a", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "2b6fc718-e80b-40a6-bd55-b0142b6e05d0": {"doc_hash": "16ac5d6e503cd8b3d8e036696645247f1c293baa2a85f3a90c87b8596dde626b", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "c0516597-627f-49cb-94fe-5a1f730fc621": {"doc_hash": "bf225a916379887d5206f91628071c1d4cb78a0465a8285b06fd28c268b4efad", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "628a9bfa-f8ca-403a-921e-68c5ce33467a": {"doc_hash": "9a9528e2fb1dd27abb057496b1f199cc44c15ce6f56c855e1a8c89d8d0d24fc9", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "e204528d-2a9a-4cc1-9adc-81d1b81fa058": {"doc_hash": "856ef2e4c200107496fd7d077f10191ff7c800244c0bf1353d949b4de9f43a4c", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "4ffa669a-bdb7-4db0-a30f-19d5092a0255": {"doc_hash": "47b2c13d81f0998fdf7b059228e6b6817fcb175a644f2d0eca191a75312b2981", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "0595d50b-e6a4-4a2b-8521-5e00607fbeea": {"doc_hash": "aa88fb0935bb7c6ae06d171ca7812e24a948f59ce22cc4a181a3f9c555b9e0a2", "ref_doc_id": "15d14ada85a706762e9d64584d7f7c57b4fea321"}, "643ef0d3-77ef-44f2-a2e4-7c86a554b23e": {"doc_hash": "923ea58d4a9dec936e17beb5b4eb269a6f073e32f5ac16f2aa0bf8a3822f02e6", "ref_doc_id": "bf14935ee27ccf10503e29b45d6583d46bd077d8"}, "00c28627-aa14-480a-acbd-5af6e85e4c8e": {"doc_hash": "dc000d990713376b3a9b4276afe4037e2ab6e5287dd68bd9b9e7fcd1810abf8e", "ref_doc_id": "bf14935ee27ccf10503e29b45d6583d46bd077d8"}, "527e75f8-f9cc-4e02-8298-2a86da12a699": {"doc_hash": "b2db2a25f06e239553dea3f89a0e1e1f829e0f3e896d16c20aec6bfb1e3fbe94", "ref_doc_id": "df222dc1540a5712d14a666de832b4506fe754c6"}, "4abd3583-d024-4845-b9ef-261cdbd86866": {"doc_hash": "cd041fa4388a6a653d87797abc21d214cc64815cc6531b992658609266e0b05d", "ref_doc_id": "df222dc1540a5712d14a666de832b4506fe754c6"}, "ed95445e-d515-434e-940e-26a5032fe054": {"doc_hash": "38df5b56ad5e912d1ef2bbd0df7638625b1129aee64ebba1ea351d23c0fa7f09", "ref_doc_id": "df222dc1540a5712d14a666de832b4506fe754c6"}, "227ccfee-23ab-4a16-8897-948b54db7fa4": {"doc_hash": "a830d97430d9024cb3e0d8a98eab1999d71adfefcf3eaf5980619af76d2a1aed", "ref_doc_id": "df222dc1540a5712d14a666de832b4506fe754c6"}, "07c11651-ece2-4ee5-b399-506114fa831d": {"doc_hash": "aec2ee980ff30459406c88e0d146758abd00b1c300df032901cb451a02329274", "ref_doc_id": "df222dc1540a5712d14a666de832b4506fe754c6"}, "e64adea3-263f-4925-9ce6-3e8a0a8b75f0": {"doc_hash": "fe7b47a43e1e42c53752330aa0a72c74e3e09fad91a4f8080f0e69c85245bfac", "ref_doc_id": "c5ee54ebffbf1d7c16ce8e8b9ef6b89541e850b3"}, "751a830d-074c-4710-a8ab-3374457b1349": {"doc_hash": "29c79618dd3a9092cd1a24bbc62f9783754107f9155fff0f500c34a6d1563803", "ref_doc_id": "c09362cc87962de69302bf671b07990507d8d0f3"}, "dada4a4b-3df0-43d1-ba51-8476c98a5a11": {"doc_hash": "36c2588e81c9108ed329452d102d29dccf27264dc53c26e642308469fbcdfc4c", "ref_doc_id": "4660c21f482836bf37c4241d48c68bb2bbfd3a7f"}, "1962f297-77d4-43a4-93e8-4e03516685fa": {"doc_hash": "034c3e28f8acde1e5aca521f4667611940e9fdd80d50b83211d7f0aa10f68b2f", "ref_doc_id": "16055bd9e15434a976cb5eace890ace537f262f7"}, "2a9ed5f7-c47b-4d2a-a4c6-d2404e329c6e": {"doc_hash": "323b2877e63c6a9ed0ab5964a568c4b2dba1751fdc5eacba081c2336bd4251f3", "ref_doc_id": "16055bd9e15434a976cb5eace890ace537f262f7"}, "3b23e9a6-25de-4714-b9df-da4bd16c3aa6": {"doc_hash": "014629a1b6db8bab7e54066f885b9629e1c0d3e53fb70d6f31ceb53a4e5fdc5f", "ref_doc_id": "16055bd9e15434a976cb5eace890ace537f262f7"}, "05ce2ebe-8dab-4be1-80f0-5153ca9ea3f9": {"doc_hash": "d9c09f788dd02ab01b4102cc2fda70e91f185fbb13283a9111b18af1f7b85db5", "ref_doc_id": "16055bd9e15434a976cb5eace890ace537f262f7"}, "2e35348c-ef85-4d11-97a8-97c5ee684da6": {"doc_hash": "c28cb9501aef8e381dc9d2697441b57bcda4ce107521b1aa139f9ef4e4e7ec77", "ref_doc_id": "8ef591d31307e1985e7d377e2811e9e3e3cdeebc"}, "0abb2219-323d-46cd-9c28-e67c8dcef9e9": {"doc_hash": "6d26c0bf723e6d4d358105d19efa86f47a521c817c834ba6cc1aa3c46af1db9b", "ref_doc_id": "8ef591d31307e1985e7d377e2811e9e3e3cdeebc"}, "49eda21f-a927-4913-8cb3-2457a4cfbd39": {"doc_hash": "1a56e55b31ce58a3fb476ae30325ca66df71f6e959f050b7511d0057fb51d3c8", "ref_doc_id": "36dccbbe64e2fb11628cb45681b957d3bbbc6c14"}, "d8f5e582-890d-41e0-9306-a2d2e746560c": {"doc_hash": "703e9386574b5979b1faa768fa8edd617df41dc44c66eb69b51b39acbd46f772", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "2c2aa642-8f06-46f5-963c-2f98056f2598": {"doc_hash": "eb28a43c1d5ada1f3a7190c671062d51fd62b61a53b8c7bce83b3466165be431", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "3544b464-4c78-4873-b335-9a64158abec9": {"doc_hash": "8382e00cbb46b71ac55ae28281926d45ec207165900bfc797a6df0b22a8f44c8", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "67668553-25dd-4606-a0ee-87704517b4fe": {"doc_hash": "f8018e2088e06e5c296cc9d8747ba16926fcd236b271ab3d7fa2b5647a0895e5", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "db27d730-37a3-47a8-8056-d341841cca80": {"doc_hash": "64209ff9849360235979a989f2aacec819c9c17d10c1c0da4b181cc9a955c299", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "3540700f-f64b-495a-a5ef-6782da68e0ae": {"doc_hash": "6ea782cc3f7d114c1f61bff4e910644bbdddb496a713226b46763aa75df44dab", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "7de1e08f-d6d0-4de3-b252-5813e4809729": {"doc_hash": "da8d43afd05e4cc02635971576a3b6714870aa03ade3c29da7881d7ceea0d7ba", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "bb784ec4-4be4-4997-89b9-70902d9cc9bf": {"doc_hash": "34b83e48982ed2cda04c42a858457f9b6facf8c04631c8c7028faf99cb8762ea", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "59cbf345-5a29-4656-9a54-ef449b038f81": {"doc_hash": "0e6e342c774fd32222c6fd2dec4ad4d5ba8c3f5ffa987025acdab42b2d534712", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "ff34398b-ed35-4fa2-9b1f-c0b4412d4118": {"doc_hash": "89cd40a38ff0dd2caa15622a21671ac9b439517d47a34862ed002111a2d1398f", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "4a185ba6-71ad-4e39-aa15-3f94d96d73dd": {"doc_hash": "f4cb2d43cb70d42226dece0c411d145ae45786748f6ee95a832205207853e028", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "6f781e10-51ba-405e-87fc-5f2f923e7b93": {"doc_hash": "4c5da246092f6789314b3b28d3922bffac055903a9ff2bfdde540f49a17772c9", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "bf3029cf-b476-44a3-bd72-2d2d4a660496": {"doc_hash": "d1bfea99bcaa7d9750cf23e2e24c1d0976b694aa54e8c0a98ad8c97a941aab1e", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "7035ccc5-0d89-469a-b589-c744f5b95603": {"doc_hash": "d245aeebfb13d4f1c7abaf811c9a84e6e08da78ec70b0387b599739e4a573156", "ref_doc_id": "1745234eab7894f819f14395c0ce93f6ecc7b72d"}, "1190cbef-a68d-4e17-b878-63dfa7d8c9d2": {"doc_hash": "6b617065cec1845ffba460fd620ed9e46823b13217ffb0aa3a3379e78641c68c", "ref_doc_id": "35b840f41ecf41337534f4b57b833ed112bd72f0"}, "4fbb5c0d-9ed1-4b1b-bb68-346bac21fba6": {"doc_hash": "62fa038508c84d6a2f8c54ca7227e038270bb32e1893d50a4a419e5a98918941", "ref_doc_id": "77fea4a8a53be2dcf1e2cf8de41cac3cdfed3d30"}, "589d672d-e4d0-4337-be0e-c45d0c9b5d27": {"doc_hash": "97036b89da1b361d5aa3b95e1aa43b26517bf4445d96a85ea22bce39022b3c27", "ref_doc_id": "938d0901aaca9015140edc6121e54133fe5043ea"}, "0e9b6c03-82b3-4be9-82a3-088e6ebaca81": {"doc_hash": "7f946c1a3396ebbed948a3381cd7c5e5f416b74217c3ee77dbc31fff284d78ea", "ref_doc_id": "938d0901aaca9015140edc6121e54133fe5043ea"}, "5c7388e7-2ebc-4840-a9b1-3577e036c3e0": {"doc_hash": "a2e36fb57d280d3473b40f1a0ac14220e7a381f0b7e7f408a3a7059858860e70", "ref_doc_id": "a39cad07b676292d5ca4bc307fc2e864b64021c1"}, "a4927468-cd33-47a3-bc4c-9c737259fcfe": {"doc_hash": "0a2cdd655cdd173a2d1c3e8a724e2ee3c90323d98335723bfea070ffdd21e67a", "ref_doc_id": "a39cad07b676292d5ca4bc307fc2e864b64021c1"}, "7759f154-6a1c-415f-8ed4-b7ba4370283a": {"doc_hash": "3d6328532d5947c892a6962edb37509457fb7a2f077313ffe52bedd81f8af87b", "ref_doc_id": "10ca7a4a9b7973152b451f03803bf73bd33826dd"}, "b2015061-c73b-4e58-bc06-3d5a76bb1654": {"doc_hash": "6400bc64bcc5d14c7bb82e89fe99353bfe6af284dfb94b82ca44f9e0cb0dad17", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "598b6e5e-6f5b-4ad5-b80f-ad94c6bd71de": {"doc_hash": "face93f2d5d618e3e9d40eeeb6f06cc6d6a83a8357c897295cf1ca50437e332c", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "a275e22f-0394-4910-ac7f-d8c1d70e09c3": {"doc_hash": "d71cadf93cdbd155038922d330f586bd56e5318268bcf8febf5ef663198e8196", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "4ad0d845-85d0-4a69-9873-e34ee4abdbe7": {"doc_hash": "ea5402f05bf2cef61dea5855a45f757e0551689889a9342ad0e590f6cb4a6076", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "4d769aea-3f7b-406a-bffd-b74de8207c48": {"doc_hash": "eca6fb49d7fb354ebc468b8b2ab04ab2b18b39fed0585cd2fa6236d87b4fce42", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "ca6adbb2-736d-4b21-864d-155694ee6424": {"doc_hash": "65b3d02361cdf5708e7863ce56b79942162f592cfa1292221318e6e9aad6bdf7", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "180aa681-9fca-4271-bd85-09cd83c427fa": {"doc_hash": "1d27d4a8aa98302fc2e065fe00d6654d6ac42067bf0c9269cd063cfa1e2bfbf8", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "1d6f38d8-44a7-4809-a231-8a299232adaa": {"doc_hash": "2781dec67705aa3a62c85187ea8e353b7300e099b7471ef7b5c82b7dd0783de2", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "0558471e-8a7d-468f-8589-159fd9d9e8dc": {"doc_hash": "7e7b366497899e823fa54fe0acf38aab13b81632d8f860f1c63ba067ba69e212", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "35ca8dd9-d362-4f3b-867a-e27650438e99": {"doc_hash": "3945606f122cf204a1574d183544b9098d5f1c141a4ebf4b8ae961164d01ce75", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "ec421604-e4a1-4816-8d5c-52b734e814a1": {"doc_hash": "1f9130ac084e053426108a66f14511894352d49c5d5b60932b799b8c9ce1985b", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "76205753-6c27-4c5b-b694-59cb2d26eda1": {"doc_hash": "137a752647464f3bda6e3338f19df9b77461096ad634be1e4bc742b074ad424b", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "9092e5de-5f95-43d4-bf3f-ab8628c8837a": {"doc_hash": "47a043e22dbd481fc91ab2c67cb44e32bbf9fb3edc0eb9ff76204452583656a8", "ref_doc_id": "d5dccca8e365f304565ed0afc3a787ceae2b3919"}, "f70a6ab0-2e5a-4df3-a305-8d7ba2a1fa9b": {"doc_hash": "0a162e0a8a6fa9c688a6a6b3205b3c1774ebb107c3e49161b02e3031d6c309f4", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "4550e4a9-c49f-4706-b932-bc4d69640be0": {"doc_hash": "fa818fd8a7e41cad9b8daecc3cc0c89e24b17885d0fac903e57fc66e77431364", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "70f1e1a1-6bb6-49f2-ac28-4767ac974eb1": {"doc_hash": "23ed99b8921d2ef53eb64d88abea1e8de6134753831b6c59ba858bb2fff3355d", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "f1b1b882-5e17-4bac-8507-0d29249b1f24": {"doc_hash": "ac2c0e0bf6428280cea6e97d48117421e7883a97d8cbfd8203c9cf508093f45f", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "9b366707-2042-412e-86ab-591276bf5432": {"doc_hash": "1b69555e8880ffdc596a3c045f35917719ba56abc391dba8fc3df67af3b70b84", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "32389e23-b13c-4875-bd55-d163b9c4f645": {"doc_hash": "707bac3f20440bbdc732bcfedae5df610327f3d03fb7eacf7b12478efd84df56", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "b9db7b41-bc0d-40bf-979d-ff367c11bf5f": {"doc_hash": "f25cd5a15f2c4bb7abaecd2c8e52808e14d3c7360eb033414d8c9fceee08da98", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "200190b8-2161-49c8-bcae-3d95b1b53f77": {"doc_hash": "2d23b1a4d1794af1301f8dd827746195c4686ac48cd55f09b3985c788651645b", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "117f4e1a-9e74-49b4-a884-bd19cdd2ad30": {"doc_hash": "7b566d0029854d07d6c4e53d1d966a513f320b67759a75b27598f74a91a79cf8", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "9bac900e-b816-4ac2-8905-36b11219e819": {"doc_hash": "12622e05b8d89e2f34aa96161bcfad2ee028a95c3a9b7b414cd0f969f023b64b", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "4ddd676f-caad-4a1a-911c-eda40689a2b6": {"doc_hash": "032fb36c9f403b569a448ce7ffb0bcfebe6f86a78ab3ce8cac490bbfff7e2bab", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "4c8b5b1b-be9f-44dc-a9f3-7e57d6722311": {"doc_hash": "f6d5e1723307f4382e0df12deea7cf77969b3fe9627b6601517c19050bc8a152", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "c47b8d67-0d01-4103-b9c1-3ddf06adbb27": {"doc_hash": "58ac3f39e4e10533e83fa759354a1f0eebccaedeb14249bfa5c7ea9bb5aab551", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "cfb2b35d-a049-4dc7-ae94-eb80da0d8347": {"doc_hash": "53e8456ce49c87fae4577cc3afb81879eec3bcf97cb67b5d7b0a26ea8591b7b9", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "ac99fb10-9865-4cf4-bedf-3c328bbd5826": {"doc_hash": "5b528045180aebe4515dcadc835f613afd6e77f4ce77526911272b0cefee1120", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "f45ed43c-639c-43d2-92bb-2861fb93540a": {"doc_hash": "0d17d394eb904b1e8cc74f1969613639618d276727f90f9688b1556881f04630", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "6afc5f2c-d05e-4327-83d4-24365b8c840f": {"doc_hash": "0653073129690bf23c1e0b0ec8c7c86296dfbc8675c1208a6565169f704281d2", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "aadcac5b-ab84-46b0-a7e2-501738a67229": {"doc_hash": "61428d285b44dc11986762785723041e2cf0e420f77d3dfd00e939d87d2575a2", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "7a1365db-255b-4f89-8825-2c7083c74855": {"doc_hash": "b12cea8afcdec132ff0d3a6544bc0dda724cf7c9c60c2a9d5ad04d5c38f04df9", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "16967394-98f3-4a8b-8dad-1bacf1a6c702": {"doc_hash": "c1925740d1ea72319180350042f464182bacd252e22a3f8ea1ac028eddb7fe7d", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "6138e236-21f6-4060-b497-da9743df7bb7": {"doc_hash": "6d8f48e448d22978e4676184328c0493401d36f78bccf9e4c0073a7192b59df1", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "f41d92b0-a15c-4564-8f0c-56dc0a199056": {"doc_hash": "d6a1ea17dabcb74fdf57ffad765174e42aee62c1b989527f181b4419308a8bc1", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "81babd30-2d69-414a-95ef-ceef73fe3d69": {"doc_hash": "f35a4863fbf6cc920b63b515e6486f5ddf14900bf1c7a443ff46fd40afc4217b", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "3e78087e-cd99-479f-838f-adb839761cae": {"doc_hash": "74c25f24700815bf8ddb38fc68da3c1234a63d45f31852b8350955f2ff6c8178", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "01582b39-464f-4d6c-b21c-4c298875fd3a": {"doc_hash": "211b7308e42618ccae2e7e464bf69ae1a207533036ee81b8af8a9388e3660147", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "efe29999-5f48-4b6b-8cdd-5be8d2736c69": {"doc_hash": "5dadd7fda48a9e00e9b5dc62d3107821ef4a61e1be60e9425691fe92ee207e61", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "d8f9bfc4-b4a4-419f-9adf-b764a0bb4e3c": {"doc_hash": "4d46b1d82bad019b2f8ce67bbf1a0958a14c857131edecab4fbab33951f6e219", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "ef511a7b-074c-445e-9efb-7b9bbbcb5849": {"doc_hash": "e89dbc9b1740b0f203bb0e485faa9606eaa0db9b8edeb9c6d6a065cf0f31e709", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "0ffd160e-5972-491e-9a56-a5943bb88684": {"doc_hash": "e940123818506734680896762e5d4a895a36cbc7d888ab4e1569e599f0b1d314", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "8de592c0-ae47-4abd-870c-b9738bf50906": {"doc_hash": "7c782021a4995938e654c0f05e2dc5cc8873acab75443c212c6db9d462f50b2b", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "925f8df6-ee64-4c86-8230-a4f779bfd462": {"doc_hash": "d5ea3132173b4ac004c3a4a52586e591ca623f28a05ce34a56b38cdb22e13d36", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "7878c2ea-71f1-43d7-ae2e-dbf8503034b4": {"doc_hash": "7cf2a41ca3351854ceb9069225f77b3c74696680d94fe52cb8512f7d2c28dbd4", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "5170f1d9-6325-4311-a9a3-194e841443be": {"doc_hash": "d39e076e8e1100556a8b73c6b3cd65145606469f903f70edd19769d621ff12d7", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "d2426a6e-0a5e-4b78-b2a2-f7ec2614ca48": {"doc_hash": "9c9da1caa68674dee03f16763bfa6498d461058e5ac90e3372c97060658696cc", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "9f371e19-c9a5-4955-a451-d0ce1d61eaff": {"doc_hash": "02a9d453cc9293e7223d6342a4e74f86f57b92631ff8ab47287ae92a4f7e9861", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "44127b92-25a3-4903-b77b-7379eed580ef": {"doc_hash": "a804f7e78dc08c6350f67e7749a24d4148768e77f51964cffc211037f389530d", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "2e94209e-590f-4038-aaf7-cb4ed306f58e": {"doc_hash": "455b50edd8248dc888186f7905f67b68dee59acd2c879141d81a0d0c49327215", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "e420041b-b314-44fe-beff-fdc6900d2e60": {"doc_hash": "205415594f013cdcef496ebb866bc8ea2915d5fc1c595f87887e5a33eca95b96", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "52581092-5c34-4234-b9ff-7751d80123b0": {"doc_hash": "dbf4202d81e2db32b57e7a5f5e49cd2434ccee2300f6cb1a1d00697d7c52ebe0", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "ad7a3653-3159-4520-8430-46d2bdd0cdf7": {"doc_hash": "61e778a0e6f147ba463e26978922551198e0de358eb11525245de0d3b3ddaeee", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "b75a8bb7-a6a8-4c8f-83e3-5bd702f03e05": {"doc_hash": "add3281d1eb99ca5239123e08bc60561358663fe20b3ca4c453a5ffb536315d9", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "f43bbe81-3054-4aa1-9c6a-bb9685619a61": {"doc_hash": "8cf6c5fe026bbaec2bee09f0e30b70379f21bc2f97c9380d3099a39ba26963f5", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "d64960f1-2ec7-4c81-8cbc-54f59fe78e9f": {"doc_hash": "a025e7d2a625396eea44f76c238f23ec82da8782fc6f2f8b47cf5af46d1522f4", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "386e8535-1601-4a18-9d5c-f5d4cae2545a": {"doc_hash": "fa01cc2e3a9e7fbd04bab97ee3e12eef4ce7289ea0195a30599fe531df4a7b29", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "5d3ea744-ab65-4d6c-992f-7005090f42dc": {"doc_hash": "7f01a835e6d60065de61ed914f85785979e98e4f9f7a0f8ef0cd5da542a2d8e1", "ref_doc_id": "a654c63c595171096a6b6736d27ddb04df37b6e2"}, "90c73496-a497-4ae2-924d-751b9fe98af4": {"doc_hash": "1da0f3f992681b8a1a5d36294a4a2349db4c0d4b513ed015b0f9e29e78d5dadf", "ref_doc_id": "16b076dd76191d30f83f62b041355418f301160f"}, "9f0757e4-09ae-4e68-8fb5-4269210d1eb2": {"doc_hash": "2309b11ecb89dc59856c54c2a4c3905dbe118a376b6e06f91c3eb547a026f24d", "ref_doc_id": "16b076dd76191d30f83f62b041355418f301160f"}, "b2eb8bdb-06a2-4f66-baf6-0af36e6e0d4a": {"doc_hash": "f67b473e97ddf9863f652197d95d47814d98639638c7fbab3d04d9db5da4f2a4", "ref_doc_id": "0ad6cbcb81b8b10208588d14dc652df545ad3720"}, "83ee751f-4f36-4119-8005-4ee1077b91aa": {"doc_hash": "c07a5b984884e5c2afed49005b3bc1ecf2847ee8225c53eadbe5e8b0248d7b1e", "ref_doc_id": "d9e3ae301641eada53ae86f6cec29341d00e64a8"}, "021ffb3b-90bc-45d1-a2c4-f9a380ef938f": {"doc_hash": "e49de6f335f84e8756dbe1ae4395ad89253c543541fef2d00e35f9169721612b", "ref_doc_id": "d9e3ae301641eada53ae86f6cec29341d00e64a8"}, "61c60970-0e96-454f-97c7-9f98f1625a8b": {"doc_hash": "dad8c489512fe8988e37586daade38e731c35224a5146d5a0224ee4ba8e8bd2a", "ref_doc_id": "d9e3ae301641eada53ae86f6cec29341d00e64a8"}, "0cefb193-cc32-4457-b77a-aa21ba888ed7": {"doc_hash": "a72d4280fe6e4a59e4536599e4c76a3661950df0467b3f045a3a1e3a9e6e45ca", "ref_doc_id": "d9e3ae301641eada53ae86f6cec29341d00e64a8"}, "0952cc31-144f-4c17-87e5-9e012da4aa5b": {"doc_hash": "5dbeac7717961a6a81a0c69e6e2c71c3cd9a890b310f4ba094ff26e5fc770316", "ref_doc_id": "3d1cfee582ca2798faf9ab1f8ed3d81e5d838c11"}, "97c5fb85-5da1-4b3d-a009-d212522fae6f": {"doc_hash": "6cabdbdb6b3e153f2f72803955ae488e72de8f7fd418f0f8ec60795fc55da254", "ref_doc_id": "21f851e90403cd8766bf60670d89810100439105"}, "93854574-6b68-4101-9120-45737c72c06d": {"doc_hash": "7660239b2c209615bba0a08ae08bde2aca34387fcb4459c50f8e3cb6db677552", "ref_doc_id": "21f851e90403cd8766bf60670d89810100439105"}, "853be4b6-36d0-4c38-8252-303bda9c4045": {"doc_hash": "5e6118b7b8b1b2b61aa37b5e1fcb61fa553757e07c56feb10b6d4761ff822a29", "ref_doc_id": "73be24af12777a8ce653fbcfc4e756ee2f4d8d36"}, "b5725fa7-a722-44f0-a852-0dca0019c441": {"doc_hash": "7c4314b4933ee3acba17c1987f162e95f241769b62f7fa6729cf3f0a3ef81abb", "ref_doc_id": "b108715d91d467c0b202d1d47cf665b15d4a37d1"}, "8a886e87-5447-442e-a29d-b3651c9a0644": {"doc_hash": "355c017a9e2df40f175914428bbc0be17b0f2130a6f86a3f228bfe8fded30534", "ref_doc_id": "dd8dfae87073e39fe801c9efc37f087599f68034"}, "7519699c-c11c-4bf0-8c15-e646c775b396": {"doc_hash": "2c9fe2807e9dcf5f16e2d8977de30d1d254c9e2e6056050fbb7731be374127a4", "ref_doc_id": "ed071685063a0930dd3a5411e1d04bba1fae7032"}, "fffcf870-147d-4e53-9ce5-835677ddf37b": {"doc_hash": "ff8648d3976fe35d6cf9326424c7ce0dfcf6709eb76f3a216d92751cf8eb39bf", "ref_doc_id": "ed071685063a0930dd3a5411e1d04bba1fae7032"}, "01b41f93-d279-49b5-ae8d-173ea785f847": {"doc_hash": "cdd18fca1aad9b9885ec565500a35073fefde060b990fda02a88b510f44e0f63", "ref_doc_id": "e886e76ae030ff1f694d46fb4ad273fc73b1bd85"}, "79134c3d-0ed2-46d4-8d7e-469289ae5db1": {"doc_hash": "620fdb288e24747537c06853a84739b354ca5cb9030aad591af471b889b77202", "ref_doc_id": "1af4005b46cb830c2958beed3c26210a0b599ce9"}, "585b8bbe-22c9-42a0-897c-3cdaf8ed6189": {"doc_hash": "7f42b32d7ba2c4d836bae587169e81b162173d1c86fe0f85a9f4335121c40355", "ref_doc_id": "1af4005b46cb830c2958beed3c26210a0b599ce9"}, "88acd8a0-9179-43bf-a3f5-2415279d3c72": {"doc_hash": "07137a490d732b4549e4c9f62060d0b1dad3c20082ecfa534273c2b2f110af5a", "ref_doc_id": "7d2041a9ae8c38b71a844e97afb4a28f56928e27"}, "8af5fb59-82fc-48c1-88e3-ab8da09e1ccb": {"doc_hash": "77d5fdb2a99a637b745bb22d016d7da85e50d56171d10a17f56d50182570b29b", "ref_doc_id": "84de05c401b7d859973822ad2a5399befa294af3"}, "5e0b43df-586b-4be9-baf9-5c1e2ffdd9af": {"doc_hash": "c107658c9ff6aa22b291b8795eb77187f7040929cf2de24ae8db8b91841fad48", "ref_doc_id": "e2169ce03382e317fb34aff819120f5c83eebc3c"}, "86564024-4379-4c58-92e6-609287d61e9c": {"doc_hash": "bcd6fa34e5a184b6cc3be305c4c905e680e60702a2474cb3282537a0906df1c2", "ref_doc_id": "33c817d7a7fefc7498f217f140230a174d10b37d"}, "2a366114-ca9b-43d4-a115-6218f4de9859": {"doc_hash": "61d1e2ffac7fbc56a891347a33b95088a10bef83c6eb3af66fc3978dacdeaec3", "ref_doc_id": "f807e1c4539d7788d4cfa7a221c5d27e87b92120"}, "241c4788-fd72-44df-879c-27ed90624559": {"doc_hash": "b8af7fdf09233e8ff5896886b79a07a24306f915f70438599a42c2c1c3addb8b", "ref_doc_id": "2d66f9788377ccce186d4bcd4b7f375f9d5784f9"}, "1cc2df44-a2b4-4620-ad42-94cf44c6d962": {"doc_hash": "c5f0e3f1a8d6ae096f8e014fef12f991fd4ec77da11768d7c581b246b20951ab", "ref_doc_id": "9b1c7acbc35e4298a358d10e02219986d96768e9"}, "f422deb4-ddc7-47c6-ac74-405899e7b92a": {"doc_hash": "be16f69cf2bf663685a2732b70a639127f55b105586e9d27a274f253f0876300", "ref_doc_id": "9b22021d04746de34e03fc3d92ad21d74a740a8a"}, "0c632084-2b8a-4e96-85cf-e5ecebf3c761": {"doc_hash": "ba3bf2fef4503c22b7340393e966287804dadb1834a06a59fef8a863c43772a5", "ref_doc_id": "38dad9a9fb22cd68b2340db09b820797a2a9b1b9"}, "bb4e336b-5bd7-461c-9903-dcc16f5f41e6": {"doc_hash": "cab8308d56499f0c7f53249370a6ea35e337b76025d1fd29eadf1d4333833d8d", "ref_doc_id": "3d9cc6525542d12c0a26a430c5424949478e2fbf"}, "91370e5f-d65c-425a-8743-f8c1bd85da59": {"doc_hash": "d647562d3c0739a5be7e6056054a6e3c967f7a3abf0f649bf99f360b0284524e", "ref_doc_id": "1e6d0ae10cb750cd3e177cf7875e04b4d6ff2d62"}, "6e03191b-cc83-4afd-a495-14d6b2f4380f": {"doc_hash": "64f6f117c9e4fb15e117d36009b1cfe7b719e6e147852360176837987bb771ba", "ref_doc_id": "1e6d0ae10cb750cd3e177cf7875e04b4d6ff2d62"}, "cad3ffd2-07e8-42ff-86a7-9359631e9974": {"doc_hash": "7e29fecf392350727a12aaf38bbe0bcadf6e1b0c5f2a0b4a2417e725ded2feba", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "618bf232-092d-4f60-98de-6075442a107f": {"doc_hash": "2d73e7a7a8b4476ac6fcfb902bc91fc93727a40ea99eee38d77391b6cf05def7", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "b2cdd6f4-8606-4d54-a277-0f5000e98edb": {"doc_hash": "1c019fef6b525384e6fd5f411517ca11c52273cafee78b0fbd2f45d42b7053af", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "5fc5a2cb-ae46-4497-ae04-b94ec55a9388": {"doc_hash": "505a98b1fd4d7b119d0f678ed4b9ff88b43d43aca871e294096b46f32259aa22", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "19b0d285-adfc-4f7e-8242-7bb31983ba8b": {"doc_hash": "dfb48cbda339444b0dfd964bacfbddbd1dadc77795e13468194e7da68f99363b", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "d311e4bd-55d1-4a2e-b37f-c0d0f4cf4ac0": {"doc_hash": "efb3131d6993e4b746d129fbfd311aa12f79df00e0e8127edb3b8bc15ddc512b", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "48d4326a-b312-4678-bcc5-950fa4793f9f": {"doc_hash": "a8e183fe84b6fd40088729ddef0a828d0161bf3b2bcbb5809312610014767ae2", "ref_doc_id": "bb7dfccac308be11326ae4524c22bf0146f54a13"}, "732bab44-395d-414e-ad11-dfb15821e336": {"doc_hash": "17e4b74e026d46faf170e4e21015dc1199a83e36bc9e193f70a294be923bf161", "ref_doc_id": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f"}, "18450f21-e800-4c15-99f1-8d117d72c409": {"doc_hash": "69a9d255a379cc2fd076d08d2bada0b301dd204d0741eca318160b70e43db4ba", "ref_doc_id": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f"}, "3e839ae9-5f2a-4257-8576-46b97574a097": {"doc_hash": "b2355bed32d3e6c2f160030f6578d6fc3136d29de4575cd9850a88788b0022d0", "ref_doc_id": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f"}, "cd641c07-32c8-4503-b23f-53451565ef8a": {"doc_hash": "cedc447ac780af3e11a7133acdf3b02dcde31d14383677f9271f90d3dabc80f8", "ref_doc_id": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f"}, "1a0c3bca-f12e-431c-af5e-d10f86005506": {"doc_hash": "a5ec838748c10c6d317846c8818b8087517cc257059daa1d8a3348d742e261d6", "ref_doc_id": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f"}, "cf927263-bfb6-4b9b-85dc-76a3f880e804": {"doc_hash": "ec4eedd5586a3dba723a4a35940478d91282d8db8392792ca08fad2851f5fd39", "ref_doc_id": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f"}, "3434b996-a288-402a-936e-fe429a309e76": {"doc_hash": "0941d11170323cb554a967f4836cbdb96c5e549cf1a45fe0efabdf34a52432a8", "ref_doc_id": "73d629203862f09266388e1396146f4ff62c137c"}, "49aa2fcd-206e-49bf-9bf0-449239e3b43a": {"doc_hash": "c867412116384a95309d928f5d0cb3ade7be7055f9e428f05edf077be0732027", "ref_doc_id": "350079dc1d22e48375082d056e10b4bf86998d41"}, "8539ca1a-01fc-492d-98fa-98fc46afd1b5": {"doc_hash": "c2448ed0c9c779b4f662a5284c466ceac8fa0c51878b7284a869e067b3dce463", "ref_doc_id": "31d376a4e81839a5d32a3ae5db67580979d219b9"}, "63a71a11-0a68-4304-a0e1-c74edf1aa243": {"doc_hash": "bf51cdb687edae7974408dbfa7d323ca79c833ee0e3e4908910c650f44cbea0b", "ref_doc_id": "c10e39e76a18c0c776849f303b5e575691e65c73"}, "2de5e500-5540-4e29-afad-6c8cc207bf81": {"doc_hash": "e381c5e5fa3291505715541eaa0f2c97a8d8e1c04df89e16b9bce2918647d2f7", "ref_doc_id": "c10e39e76a18c0c776849f303b5e575691e65c73"}, "e784f3d9-fed2-4d23-9d5c-bec85c8d9bd4": {"doc_hash": "3e39a1107f888eb63dc66bfd52d17de5f08a76a100c3e5f240a26b397179d70a", "ref_doc_id": "27e877a7c425e2dc56f385eaa3e57183eeea465f"}, "abc33b47-f917-4253-a05d-3ae152cf1b27": {"doc_hash": "c9012ee3d14cfdceebec2b45fcc4dcbaaff3da968e7c0a98aadcaf7611960eea", "ref_doc_id": "27e877a7c425e2dc56f385eaa3e57183eeea465f"}, "3a316d76-3ce0-4af2-91b7-d8cc2450aa8e": {"doc_hash": "a39cbee7d01b8f613306f3d4fc24dea7fdf420997d3eb3af102ec936dcfc5708", "ref_doc_id": "27e877a7c425e2dc56f385eaa3e57183eeea465f"}, "5216bafc-3b7a-43ab-83a1-9ce7be99987f": {"doc_hash": "47bebc22242b256f13f5498d70653bca8e7aba737b1114dd09e0ef47e9d98461", "ref_doc_id": "66428027e27b2f19fc6fafd9c1acdb4f9ce0c54d"}, "182984e7-d5f5-4abc-ba75-81793a449dca": {"doc_hash": "8816f646e8d451ec3056d452f6be6a3e8b9b73c2ade17bcf3bb478657e69330b", "ref_doc_id": "66428027e27b2f19fc6fafd9c1acdb4f9ce0c54d"}, "ae274180-1ba1-45b7-bb7b-881da32d0559": {"doc_hash": "98942c9783ae5f222ca19f32138a4eb0cda8ab543ad62138f0655154a4a8276a", "ref_doc_id": "bc9c337e1c893f89c76ac744dec3bdadd5f3747c"}, "57d7d373-b2ae-454c-affe-9ba66702f00b": {"doc_hash": "e69a9ef54e018b72ea81b39d9a524d84bc1279fb65777e521645488c2452b6f5", "ref_doc_id": "bc9c337e1c893f89c76ac744dec3bdadd5f3747c"}, "7ed1bb5e-e6af-4795-ada5-adccad93c3e4": {"doc_hash": "27b524d36f123a5b53cc087d761ac5b4e31f42ffc4adb995162f925728829025", "ref_doc_id": "b2508c096a01bc76cfca72c3c704d8ff905c3d02"}, "becd4fac-d39d-4e55-ba8e-c47d72e86440": {"doc_hash": "6bf36a455eef3e0f4bed7b01c35486ab7137633be68ffd0389e07bd8a371baf1", "ref_doc_id": "b2508c096a01bc76cfca72c3c704d8ff905c3d02"}, "f32da9c7-74c5-4772-a3b5-d6ea98b11053": {"doc_hash": "f885578032272d2d481d61254db9b00ee9decffa2a8a4cc5695e122d360db176", "ref_doc_id": "b27edde0c14f6b26b31d921e3f7813973fd575f2"}, "ea67495b-4feb-4f89-aeb3-e4178472e23f": {"doc_hash": "b9d963217e5fbde1df72b08e5c75322387dd77b99784c45f030d8dde033c9a91", "ref_doc_id": "b27edde0c14f6b26b31d921e3f7813973fd575f2"}, "5a2337e3-a159-4dcb-bf5c-21f446758317": {"doc_hash": "a013acf05c9fb05ea689f43f307544bd126cd4db729a7ad8e3b9adb0fbcad950", "ref_doc_id": "91bc2e134483d59a02555f6a018f45b153586bc3"}, "3cb4df3e-2bdf-4535-a87d-136483601e53": {"doc_hash": "91f8c98bf01e8d27491f849e69deaf1c40918d93b9cb74b64257b64df98c8c1d", "ref_doc_id": "6d98dc0294175f5fa8433ee4692a8f399fae4610"}, "58aad590-42af-407b-81ee-85fa016b34b3": {"doc_hash": "faa44364b00c0c23952270b6fa2e58f6b12da5fdb662d209e0eb2e9840b83251", "ref_doc_id": "f71c0b8fe740205051c40c4c6a2a4576c49277d3"}, "992d585a-7806-4135-9ec4-19fad3a80ea5": {"doc_hash": "1918d258a80fccb706c0838b6e9b74968699c06662fe62dc829b91c7a8c38ec3", "ref_doc_id": "f71c0b8fe740205051c40c4c6a2a4576c49277d3"}, "6b1759b4-398f-4252-b97a-863a01fb8c3f": {"doc_hash": "0f211f99dafbdf890854129dca6bdd27637489c3ca522220dce93817745efec2", "ref_doc_id": "a264d976268783a1bd1685c226188343b107e973"}, "2f75614b-cefe-4d67-b36e-c092cbece277": {"doc_hash": "8ec4e52aa4c8fc0d1d995c3c7562852b146c466a35324b643a0a2e30eb624c59", "ref_doc_id": "edc8e0f0af2000fafbf1e5d5a0fbd69c67f906d3"}, "1a416c4f-3b82-4fc0-af7e-445deea42fb4": {"doc_hash": "7eda2eb56cc00fa818b7797e25f245e973a6af19567b0d3d98770c5f7ed59937", "ref_doc_id": "1f45236df09d40d4391442605c409e55985d7e69"}, "3d8cbc33-5f37-40e4-bb04-30cfaf404644": {"doc_hash": "147e5f4301b44f444cb0f8f22c9d608acef3732b5db62358c075884978dad924", "ref_doc_id": "a8d7ffa4c2fa4535c5fae6c4d20257636adcef45"}, "e3b15f49-cf81-4f73-83a2-fd596c3c6f0c": {"doc_hash": "567c1d538a35381984bf6c9dfc26c32627fe6a1eb26f2c7365911ac50484a4f6", "ref_doc_id": "505c33ba0354ea9c9af98d71a21ef1752a73f674"}, "b29a7782-697e-4586-865e-a164d548d746": {"doc_hash": "76ce903022890d7c72ade338693d9d6c73f5831e848ba7b08606eedb75fbfce0", "ref_doc_id": "e5193b1efa1aac3a7cd11cbbe798dd9c44bc4f6e"}, "a986de9f-0c6e-45f0-ace3-15887a8b0680": {"doc_hash": "d633c6eb1c2634fcb0b153bd168dc33e87e9295ec10a0ee09393628c1b246c8c", "ref_doc_id": "78ab1ede974f7f6659fc9e471232f7862616dc9a"}, "8495a10f-2495-4414-bbac-1377dc14e2cc": {"doc_hash": "eda2ce25673e984807073ed51bb18f6c71f0ce8f2a39fd30a5dbf4d3947ceee4", "ref_doc_id": "8fc2443ed25576a2a7d0dce7b6b47eec55dee768"}, "568047ff-4097-4ef0-b608-493afa9715d1": {"doc_hash": "02b8c0d039214f60698a7eb58838e632f432c25421be9436fc85b1a2a5d32b05", "ref_doc_id": "72c85d89dad9ce56e1bd7b41306a9055944981c9"}, "c08f9f1b-c6eb-4c07-83f0-1ba306c84d09": {"doc_hash": "241de9f944e8a78d0db6d43d6404045cd4ad884e8da9ff6837aa16ff85834610", "ref_doc_id": "1cdd5e8543008cbe30a2f3f5b15b1de877099a68"}, "9b8d34f0-2ef4-4d1a-964d-afd71ef4fb9f": {"doc_hash": "43592f1a684f2e75449d2afbe29ad449e04735cc0e84bf7f3293d34c9d1aa87a", "ref_doc_id": "1e716f94fe8eb558b86bdcb0e4aaa50a9c1010e3"}, "21ea8e67-4e0b-4c86-8638-f4c616667d77": {"doc_hash": "525d5680a5382a89f01a9a83c5f412b489180f0bbb79a8bc81030a58ea5a5235", "ref_doc_id": "fca1dfc31725b1627035daf3faf62afef2792037"}, "f00b35ce-423c-4df7-9c93-141b488237a9": {"doc_hash": "861d8d95f186b7c92a06555245a044edc285fe63248464b4481844accdf713b4", "ref_doc_id": "0beea9a45e1a87a2ed3c12e3522502f6389bc1fb"}, "c949bcf4-dd5a-4859-b311-074336c778d6": {"doc_hash": "a33f25c67851f7591d241fd4c9c749ebdb7bf0c656bb0198a7b36336f9f9c4c9", "ref_doc_id": "6ece9af1b34b7a816977d753a8766911e9abd8b6"}, "f7fad926-d201-40aa-a60f-522af9ebe7e7": {"doc_hash": "dc09daae0aa7a77dad89adae56e44466969cf8efbed02453eb7a31ba1545f496", "ref_doc_id": "aa3974a530b289a3fe3a6e3908c96072f858a207"}, "445076fa-7b95-4998-86d9-7ed7f4d92e27": {"doc_hash": "27b086cc31696fbcb1ba44964ac82fd02e71dc1224753b03a59a3c0e2161ed69", "ref_doc_id": "e77d169a8f8dc7ef8ace19f107581922f52f1187"}, "813b99c7-b4ae-4a2a-b08b-ae8aaf916b69": {"doc_hash": "ff0809931f4022f52801da63d7c24bcd95ee4099128a89839874b0d6e3b39f72", "ref_doc_id": "bb887ed692c4f4fb43306f15d43f9778f1a99c44"}, "538e4438-0a47-46dd-b6e8-5fa86a01d823": {"doc_hash": "64fa2ced1b2aa603d2dfd234d501fd287cd4cb7aca99f607ed7832f887b07390", "ref_doc_id": "520ccd5253712cc23e98fe7edd4dc220cfcb3148"}, "713578f9-54cc-43a3-b8b9-dbb05cb47d7b": {"doc_hash": "affd1011ca89bb33d3dacc0f37c7f8bb7ab634cd6287a8fabf8947a79e94100b", "ref_doc_id": "520ccd5253712cc23e98fe7edd4dc220cfcb3148"}, "3196c1be-11cf-4ca6-89f8-39a4a8523dfb": {"doc_hash": "67d83199d778cf5d3265450bfc709a06a2958022b20feeff72484a1e20a39f8b", "ref_doc_id": "71c0ecf8add2eb85487d281e54a58ca42aba4b6d"}, "b64bd9a7-7e1f-42ae-bf5b-42ac56235811": {"doc_hash": "8784381c55792dab4ce1faf06fc4a49a6bbf493babed6a30886d687bbd334d22", "ref_doc_id": "20c794285446ac86257df2cec9ec228c881271d1"}, "57de8aec-2658-459e-a9a5-cdcc418c356e": {"doc_hash": "6bda65077da78ff8ff8e5325569b62cc2f8d158223382fc1617bd05450c2c0da", "ref_doc_id": "6c6ca6ff3b8c05a01d6ae8e81bc4bfeab8d3b075"}, "a23ec419-5332-45b4-946c-23033fe244cc": {"doc_hash": "14282de8a0074ba9f383a137a8a2423b8b420b5085d17f1c1040749710867058", "ref_doc_id": "6ff7b71da1425ca5258e67c4abcd64a76c768124"}, "564d0986-3731-4fe6-b314-3a3b62258233": {"doc_hash": "b26ad25e7f7e4eac80d2fc7b482c009c75a265fc8f6bbc1e9bfbdd442df0c721", "ref_doc_id": "d97bbf00291e5613c81c7ea86eda888df9d06bf7"}, "0002db59-895e-4e03-9fa9-7b4cbfb90ac8": {"doc_hash": "3df12948ed4c7fe0e4a98096c50f709b1764909bf032348a70608407fdba6d34", "ref_doc_id": "687eb09745c8ce58c3837f6727dbf037c54b161b"}, "0178ec7c-9448-4775-8a71-7ebdd2b9a3ab": {"doc_hash": "f05c812b740138167a0c1535cd85ed0de78ad4a26cce307969346a9a252f6fe8", "ref_doc_id": "fa51e0dc2e7fde580781d72ccd8a7124c7cf4ee0"}, "810d6691-7062-49ae-8734-a2e80db2756e": {"doc_hash": "96b729b46c8f3f1856abe625f32e3be013553839fc2a44a108b296f4521b66e4", "ref_doc_id": "b91c9b9ca60cca930c66820e325b128745d2ed66"}, "4da65b5d-2def-4c77-a7b1-0ab4c2b36b14": {"doc_hash": "5f169aa3876f357757380592476be2c539170c42d3c1559c914cd72847f7f214", "ref_doc_id": "fac593e317fbd0fdbbc5e0d62feec3054fe5024c"}, "3f627794-1845-4c2c-add3-da4ba8dd3139": {"doc_hash": "f8acf87a44c467d763044335fda7f3a4bee2333cc7c4e9906a2b601d8f00e4a8", "ref_doc_id": "03af670ecaab16815c5a1797f3ec8fe3fbb260c0"}, "a7493407-1afc-472a-945f-b5f14a2b9367": {"doc_hash": "84ac19459b82037d4361dab5006f1ad04d33b0edba6ff89324cbe6d083e65660", "ref_doc_id": "430b4a3ee1d6a6f3e5f93791ba96108446979c01"}, "720c7960-be33-4518-a105-da897ebc0694": {"doc_hash": "c9cd314b26767ee510c448951c6574b5125c2a36176a0656b8c07beeb9c371da", "ref_doc_id": "337148ee2a04d225830818a16eec6189a4f439c7"}, "260e6c75-73a6-44ee-aab9-6667db05d7d9": {"doc_hash": "8e9e99311ce95a66440eeae92c62ad0dbb044713f2ec1910c53df7addcaaaaef", "ref_doc_id": "add4da5c3ab8c45ad2d2025f92ecee8c986a371f"}, "332251bc-12d1-45cd-a207-7bb7d9e088e9": {"doc_hash": "a1e87a24010932806eb5ec2bbb8c734ee418ad9f60b225f7faa850e84c78b096", "ref_doc_id": "8dcfa5c69c66f1b2b04d97b1eeca7a3e98f46067"}, "9b1b377f-820f-4d8c-9470-4c7f40a77851": {"doc_hash": "50c74c6b5340580a40e0889f11d5ad20d69c78843bdf1585a2ec9bdb0556376e", "ref_doc_id": "8299cf6a6f25fcdfbf3c49ca3a1cab5046f20f27"}, "a1eb3477-9bf1-4d58-83ed-6d5edcd63d68": {"doc_hash": "385953b1d7b99a08db04c4975ce614333ae02eb5c2626cebf56f061ffde44ac3", "ref_doc_id": "3a410e386dfc6c7e78f8c85ae93a5d5ea5dd05cd"}, "38f4f69f-9690-47b3-bcbb-dfefc154621d": {"doc_hash": "41246276e7e214f5c1efebb622a334447255a3f8fabde2fce8f3bd0b85eaac83", "ref_doc_id": "4e5df3702b6f8844702380d2a1dec7f9af5749f6"}, "92df290f-19fb-4901-ad55-4108bb6a9e40": {"doc_hash": "c7cba03719a84dc83faa8fa351828a93cd7fe61a65656b96c3f2e12eb57f2b29", "ref_doc_id": "e8672ffed7586465dc5fc8030096597cb96e1621"}, "ebff1df4-a1ea-4570-a605-0f35d89a8b46": {"doc_hash": "4efbca1f939421251f67b9248cbfaf58f923f9692b3ca11d2fd0261048c30763", "ref_doc_id": "cb8d46fd103ab8650f2ceac6ea9534f67aed47f0"}, "14275e7d-6a0f-4aec-befe-c7d41992ad58": {"doc_hash": "3d51ee55cf4ff9cd7a0d56018b945df2354982b40efb5c4f67f6b7d169bd96b6", "ref_doc_id": "a2948ebfc17236c036107526eb206f0f50f925b6"}, "026006e6-2b15-45e6-a319-c39a7ee53e25": {"doc_hash": "db1b7d6d12ffd98e4fe32ba78cf88d07f770c25c8b17bc69f4e96ff3b7176531", "ref_doc_id": "4f4bef178133355a54c28e3090c85960f49a4105"}, "22b9140a-bd53-4402-a541-85f37de8dead": {"doc_hash": "953c5bb0ca51aab762f161d84a7aa7bf966b7d22dee079630a5c6976db8f3f05", "ref_doc_id": "e45f85eb56ba48bc119c054da35db4f44baf4abf"}, "7e8a8b57-7856-45db-ae79-b3830ec1c2a0": {"doc_hash": "f61e8b553e74cf5d1d67c478bf81853700660ef20a63fd0c232181a1307b04ba", "ref_doc_id": "91b0c08afea06ec25ed38a75015996d3be3c7d0d"}, "c5fd0edd-8770-48e9-b5ca-ad29e0bd8dcd": {"doc_hash": "f52bcc426685892bc474d27873241ecdfdb9285cf80ec0002fa496a071d924e1", "ref_doc_id": "fdc9e907e6ced0d62229e2ca99a39d26902ad685"}, "dccd3c1b-54d5-44af-b37e-714265f81711": {"doc_hash": "60ba076563b0beba15c58d5ea1320365cdaf4ac834ef4e89c503e0ed098ac833", "ref_doc_id": "77317c54cb7795d54d933e141fdd1f3a00f34763"}, "b987ff8c-481c-4b6a-918f-89887e1666b3": {"doc_hash": "b5a4af835bf240a976cff55872994fbf49096876ed61b86e1704a8e4269567bb", "ref_doc_id": "a492402ef25459084bd7911800c455964cb3ba31"}, "801df3f1-6c3c-4c9a-a3d4-71bff5617860": {"doc_hash": "ce889ab1021cdf7fc0af8deda6d43cee239a9b5fff64d3bb32a83f3e7e68b42e", "ref_doc_id": "965e8703354bebadd36c94286c3dfe1b703dbc3e"}, "4fb17398-95b5-4193-96e5-2216881f977f": {"doc_hash": "1e641899a2e9395b24f2195110d11bd60fe4f47dbad4368af90fbb5221dc7a97", "ref_doc_id": "0c47a1a54d1c86b466f31147be094047cd290390"}, "52fe1ca3-db34-4798-8be6-1715a69fc62f": {"doc_hash": "119f8261860443ff032c294dedf5221919fec22da17b8837dc4a406f64dfdfe6", "ref_doc_id": "8b57d32dd8d0f99dd854285a826d5eaed37803d4"}, "fae6e1ff-4995-4e66-9513-498df0595142": {"doc_hash": "6706da2d6d682d1b94a61b6ca515154e5c85639aba1d5ffa15eba658ac974144", "ref_doc_id": "7a0af43aec21e2c881cebfa949779e8017665af1"}, "bddce048-7ca3-4d43-bf02-e413749bdb25": {"doc_hash": "f370187375e84309d54446d1a960a75caa68efd222602871d8d9689e5e660dda", "ref_doc_id": "e5e9ba3912bb9f234755ca2dceea50ac9cb2a73f"}, "55e08c99-852c-49ab-bec8-d09bae418518": {"doc_hash": "5d1598f8c747d15f0d0b68f3e0fcf208526f1bca499511ebd37bd920cceff424", "ref_doc_id": "212f8c4b9dee9e1a5b26f812911ad3f8b6a6c910"}, "7c1592ad-56be-4ed4-9437-3d6886d44f58": {"doc_hash": "cfe05081c23f99d3791109f83fbf0e2852c76f4ff81672723a07fb983ada47f6", "ref_doc_id": "fe2194f4b21f2b9d991d45226bd689759df8bdc8"}, "eae0e18f-a68b-4dcd-90f7-f53f5877a91b": {"doc_hash": "9ef63e9b4532a67bdabf2d1e3bb01c883b76089f3b3fa6516240c8af7cd7b9a9", "ref_doc_id": "3cd263ff36e9e9cb481456678b35356f92fad72c"}, "f9c280c2-7454-4fc2-82e7-ab8375d90a63": {"doc_hash": "e88b9982f4c474abc1f2ef586c533e40e2b8e7690666cd1b4b55e9e7a463bec6", "ref_doc_id": "d47a1ab75e4e59034b68ad73b197b5902728e39d"}, "7306eac6-0aa4-439e-bbad-912bce7bb8b6": {"doc_hash": "350732ab35d081bc0c1913853f6bf596e6ca594d23083ddaa533d162b6a7e05c", "ref_doc_id": "e8e335369dbd51f1340bda9980a83c32e50e470d"}, "448380dd-0351-46a1-a3cb-fa63bb2fd47d": {"doc_hash": "c22e9ca511dd66a693bb695dc5f9557150da33abfb3519507e8e119ef0d7e5ca", "ref_doc_id": "a0b46d38eacc6ce551420272d1a37396a10aede7"}, "5b13afcf-ec33-4f1a-8936-427d0e27cb0e": {"doc_hash": "55fdba75723986ac80a3a6e53fe860b1e0b31a229cadcd6be77d4fcf501a381a", "ref_doc_id": "46fd2ea166c18f77f2b1a991b2da70e14e1b2586"}, "38aeae0c-dc79-40cb-b11b-aaeabd6f01a7": {"doc_hash": "4ed66d5520bc1558a8b193220fa33aaa522cc101158ea4b32cbdbf3f20f9e89b", "ref_doc_id": "592a848695b98e81aeab2762103bcd3b7e911915"}, "eeaad532-882e-4efb-9d73-33ae0515c22d": {"doc_hash": "815e529f880c20e1b350df86880a36d2fefd1478f190afa6f6c5aeb948568485", "ref_doc_id": "3890ff8c74c5ffd53320b73b59baab7c886e5f12"}, "ea585120-9a12-43d3-ae22-4b9a2389fbf9": {"doc_hash": "7d0cfa5a66977146950d3ae38c93378ee652b4cd9d26dfda9bae3a25af7a153e", "ref_doc_id": "eb757f15ecc4d9b3581df43f30b6bcfa9e3810d0"}, "5dfa8bf8-cdf6-48a4-bb4b-b123e83737d1": {"doc_hash": "b4dc96f9cf408657aa75c9dcdb6cbc24d1e657e6b5999401af4331ab7e728d85", "ref_doc_id": "d9b45bfefbf7f9b3fe25b76f23d7858b4e91ec74"}, "c3f4cd49-8353-40ec-ac17-19839d7e5700": {"doc_hash": "c3b5a019db58159a73058ebd08e292a67bee8cf2f7256ff79189f292db6f6b27", "ref_doc_id": "7fa5ddd73fce0f6a107ea4fd16fbead578bd6d4b"}, "d148fe1e-9226-4246-888b-424ac59ce192": {"doc_hash": "bef21053f14b78ab34e528ffeb4a524615e8a25c86f68c6edf8633cd44a61ccb", "ref_doc_id": "b165411176779f2260e529ba34c84264ddd36715"}, "064dce44-9cef-4368-971d-85cd50bafc9d": {"doc_hash": "fe097e4781cda2089715e2f9ca5af6ef13a236906205d06e4b312cd26213467d", "ref_doc_id": "db0b3bad9ac76e922be3592107cb173bf37d2264"}, "bfe18604-9ebd-4f34-92c6-b93584d03a49": {"doc_hash": "f7fdbc5a29acfbbaddfb3de8b69c88ecaabb5e63cbdf1f770e26f89939f9fce4", "ref_doc_id": "f1f4356f9dc182f0e791c26e1915fb283a41c792"}, "c7e0f11c-2088-492f-b963-f815e4c7eb68": {"doc_hash": "b8850c1daeef9d1f8b6eae0b18544acab3b3524d7cbe54d5c4e3d6e3a69bf62f", "ref_doc_id": "8ca0356c760a8d53a64cbfc8a921d1bd597688b8"}, "e95a6f11-f1bf-4327-b1a8-9530e0a19c50": {"doc_hash": "b445bc92de53baf301d26655402d434c1109c56b52e19c2d38ce300078705014", "ref_doc_id": "0359bfd6c84da2a6ab2e46ab614424c106f47e56"}, "6f6052f6-0156-4bfc-9e9f-18dc2b4f55f2": {"doc_hash": "5124b8a4ae2e2c5ac92e9c2974f7b62989600ae05cfdf8269d7b1674e090989f", "ref_doc_id": "01369cd8aac77bf42c3bd6087f608851eb5ec32b"}, "931b3039-cfc1-4855-bfb7-14c60e941a8a": {"doc_hash": "3c2541d16e0511f55cc35019e2aa7bbaa6df711c91a5cda6cac3fa711ae0eccc", "ref_doc_id": "1363c45bd3a5e4d539351d83d77fca206b6153da"}, "4e3642f3-b356-48ac-ae9f-f62975e4bd12": {"doc_hash": "0e82d8ecb2bc1ca30daac36606654cd43d0b7efe572f727c673766667eb88a79", "ref_doc_id": "a0ed09cc780b31df29220186e547647a7f865099"}, "02fd8abe-d876-4a9f-aa08-70a5177e00d7": {"doc_hash": "921cd16a98390af54a8e534c6d38f27629f7f9a1046847ab91cd3611777f42d9", "ref_doc_id": "f53ae8403c6277ff0298515513e1c9bfebab500a"}, "217edf74-59db-4b97-a302-8909b0fd01b4": {"doc_hash": "ababc010aa1455bba6246fa70679535204ecdc46d888de9cdef012895660d659", "ref_doc_id": "082998ccf964412bf9f84fdbbdd733a3451a21a7"}, "e2652d28-cfa3-4d29-880c-42c80a95172b": {"doc_hash": "2a1cd4d9ff557d15d5593222c00868947c9b06cf6b2799eabca6312d61df398f", "ref_doc_id": "b421223cd2eb50e5e10cf04ae1015154fddf6fd9"}, "bbea082f-1f9c-4679-a7a0-05db05b6eff0": {"doc_hash": "228e23549ed42b4dfdec31aed8fe7477493797a23f951b604c012f16054470b2", "ref_doc_id": "1af641745e8fd1ab351010f0529e9a6f5fbf358a"}, "facd5753-a391-44bf-995b-72318ba0ec73": {"doc_hash": "063d98cc72fd715653bf272df94d310c90c3a8aa5f34cb010dbf43704cd4ff0e", "ref_doc_id": "a349e33ea899d8385324e2edec91999f5525a538"}, "00963616-c598-4451-a761-642e58e27e64": {"doc_hash": "e4ac94d271a8e5142b6ce72911773c0c1b5bf638c5a8460912db625b33f1dc97", "ref_doc_id": "1c28c649dc2179731d0573928af083c324cb2469"}, "13dcf944-48bd-4771-b2b7-dd130ca58a3b": {"doc_hash": "75799616196fe718629e0543519ea4233424b1eb887b685c73236b4666b50559", "ref_doc_id": "918d7684d864aa3e51612f15f404052cc42abb0f"}, "c39992a1-b13c-4929-93d1-5700e554d241": {"doc_hash": "a124c3b2b8a9e51737f58beb21d756e86ead63871cf3c3429c7765f1591c244a", "ref_doc_id": "918d7684d864aa3e51612f15f404052cc42abb0f"}, "f695b24c-2fca-4ad6-a080-f4f27e835ebc": {"doc_hash": "1a184111ccb477d7dffae9a7b3db426d0f5b89b7728a0fc531c7c43727a1f220", "ref_doc_id": "aa2e213149d7f9d791758c74e07f9c32c1ae831d"}, "8abd1a2f-76cb-4f78-87fd-c6398ba4ab2a": {"doc_hash": "1661c0b939abbe039412a6d2bdaa40529b2a71288bce5a301aff007acc02ee7c", "ref_doc_id": "aa2e213149d7f9d791758c74e07f9c32c1ae831d"}, "90764e97-8e74-4012-a9ee-38556d3943b6": {"doc_hash": "f4887524580ed88ee36a1660bddcdab27059df0226299e666adc4ea6a1b3f060", "ref_doc_id": "5cb675b9c622930784126c56910a6e0cd1f50c18"}, "033d0a3f-f9a7-4b2c-9db1-921d5eec7223": {"doc_hash": "58a90c98f924429947bab373a5353617c3c1966fd0942bdf48f0578fdeceda12", "ref_doc_id": "4b9c909c61e58fd3b1a60d5ccd2c9749d24153c9"}, "254c36ec-f3d2-4421-bc1f-07dfb97f8377": {"doc_hash": "5b5f66fdea18583502c23eb34cd33ecee40f44cb6b24acf85247547ea0556e16", "ref_doc_id": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3"}, "d16867b4-a773-423e-a20d-114525dd8e28": {"doc_hash": "c8598410c7be8457056ad92f8a2fcb084f84c950f7d4e583ffec0c7980d405e0", "ref_doc_id": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3"}, "0320d91f-b083-426f-b24f-c6d09af615e4": {"doc_hash": "3c9c5701590cbb8ee898447461839b54cdd777e78453c3ae1300f4f2a888c80e", "ref_doc_id": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3"}, "54300cbc-9eae-41c6-876c-9aaf91d78174": {"doc_hash": "b651cf1c4a6d14fcb1246395dcdee5ca05de96d992f02ddab7cb444577024c47", "ref_doc_id": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3"}, "d61e1c40-eb0e-4046-bbf0-cdcbead8019b": {"doc_hash": "1dea53e7030ee242c917e3d3fbb26d960d5391b9717c8a8371966954b4a6784a", "ref_doc_id": "09b1d43f7cab658c0a044a4f5608f5a85ceafbb6"}, "16920f72-1fbf-4bad-9910-8af977788b15": {"doc_hash": "a22d01b4b7fc2a377db9f8657d54fc7f4df6fea9b02f37576c50f82f7c9728d9", "ref_doc_id": "09b1d43f7cab658c0a044a4f5608f5a85ceafbb6"}, "51c86fcd-b680-4aed-beee-4eba7cd16576": {"doc_hash": "059cb99dd0fd5eb543b5570a32a4a18d05d43969b0d71201e316d3af75679561", "ref_doc_id": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7"}, "561a8b3d-931c-4ba6-9bda-e64f247496c9": {"doc_hash": "5b15dd15be64e4f0acccaf0234e90f98e199129f1331ebcc9afc3324b0d20cc6", "ref_doc_id": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7"}, "1f36dd37-905f-4e2c-adcb-6b42438e815e": {"doc_hash": "5ab1c07ee4808e833971eace6b4dbe84e64213cfa7a30fc8921a655a35ff042a", "ref_doc_id": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7"}, "d5f66be2-dde2-471e-91ed-909c20161fd7": {"doc_hash": "d2b65ec6347a6504ec8d4ffd91590df78f0fad6353afe0953f452ffd38b240e6", "ref_doc_id": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7"}, "2c512662-60a7-4897-8d4d-565105a8b9df": {"doc_hash": "5c70339d21ca9d372bcb188c733ccdc3d40445a3ee89ad9c23698f088e65af86", "ref_doc_id": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7"}, "a3dd1699-78f9-4ba4-a15b-4ee3872031e8": {"doc_hash": "f4843b7e3341897b056c83d3bd32baf0107d49e98d30545fe44b73587a0ed550", "ref_doc_id": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7"}, "d207951c-d99c-4d68-bec7-24d32d67f3df": {"doc_hash": "9699ec032511b8197a23c68bcf3ccf0d4721a80f579d7789c7fbc9f09267b581", "ref_doc_id": "3cb9f040f2e1e748c4a4b617345c09b73bbd1b81"}, "ed49bec7-7bf7-4b77-9936-7bdfcfd656b7": {"doc_hash": "bfe240dcb8cd0a288277611af95a6881a3365c8ffa1654e836627811844f9d5d", "ref_doc_id": "b95730945569607203de0fc8b9a703fa4ead3b04"}, "1d4db89d-2486-4abb-923b-526df39479bf": {"doc_hash": "a96e8c4a751cbc4bf00c8983d31426f7558befedb0288efe041d2ba1275c7299", "ref_doc_id": "b95730945569607203de0fc8b9a703fa4ead3b04"}, "2329cf91-f9fa-46eb-ba34-d04e7e774465": {"doc_hash": "8a9208bfffa99cd4e9c56fb3a301377c81517fe88619bed683e7839575be023a", "ref_doc_id": "b95730945569607203de0fc8b9a703fa4ead3b04"}, "828a6858-7428-4988-93d7-b4ad5478f909": {"doc_hash": "10ed570fb97be004ae2357e559f69422b826a1ad59a400d22189df9beac9df2a", "ref_doc_id": "c417e614fdbde925837ff4b7d6b910147c9a917f"}, "5f2bb50d-9dc6-4a99-8af3-4ede9d0ea8e5": {"doc_hash": "7668bc8c506b1b1808dfa89adefb6aa2ad1023cb753df5341b9b03791f57ca11", "ref_doc_id": "036a1879dcb7c2996f8247913ceef0e9d2d6ad6b"}, "55ecf169-c0fa-40ad-80fd-e735932bfd21": {"doc_hash": "64af1d0c09ecd2737a87ac9e3b9f4d14de11e299c2ea48c29f4c27d659df6316", "ref_doc_id": "036a1879dcb7c2996f8247913ceef0e9d2d6ad6b"}, "02942f42-6cf3-4b7a-bd2d-58e22badbb72": {"doc_hash": "512387c623d12a0ac8ffaa0ef7815cbb5077efaf8639e5407a15db3ae8696881", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "7c1a0ab5-5098-4b00-b121-e2199ccd23b5": {"doc_hash": "d0199c224ff095cf36dea08b16bcb2aa3d38cd1cf0200539b49d74a74d13e4e4", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "dfcb81de-b126-4b40-b419-4f69d9fcb623": {"doc_hash": "8dab37db44295c39743a7822341380467a39082a60691347def9ffeca417fcdf", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "c9d41d00-6881-445d-bc8a-bec726fb4bfb": {"doc_hash": "2dca3e6e5898046f91a53cbd374fff347a6f1be494268b5696ab44961282e2ce", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "245afa70-60f1-45ed-a23d-53a89e143f5b": {"doc_hash": "2decbb70e46e52e4b374fc1aaf85e9d019c4363d420c8e2a3f6bbe23cf47df38", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "1540a81f-0fdc-4569-a96b-dd89b032882d": {"doc_hash": "60cdc3dce2c2465c7212449b65eb1de97450f003fc05a205630416048466d38b", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "64150751-abf0-4a5f-8d09-be10aa21c512": {"doc_hash": "294974d9c09619e9209c8b2467fbe928c38a1f18c85ab7e379eeab889d9e555d", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "04c26d69-4e05-4ecb-a2e1-831572f544b3": {"doc_hash": "1beb3091e88d278a087fd6de0b9177930962b4c36c84be0f49a68869e40db4aa", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "c2f3730a-7e96-45d7-84c3-3f14cc629fb0": {"doc_hash": "4c1dc8d7a0cb3b4e97fdf215786a40a573059586585c3ab443766ab96164bfcd", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "b4670df9-a98e-455d-95a9-422c40220432": {"doc_hash": "c574994d5b4c590a201dbd9799e770b3aa08ff2da3f63723184511863bca7090", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "b5cc396c-02fb-420e-b87d-92446cd5cae7": {"doc_hash": "6448137601acc8ddb19cb5be03e4df37b1a16b6f06e47faf4328d1faea5a308b", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "476d22bf-6250-449c-9c25-9504f84b06a5": {"doc_hash": "8ca7f3aed022ec85d82102263881221a16513b54055b5470ab2657e3c6e28c7f", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "227f3b72-5399-4570-874b-bf9fcbf92d4d": {"doc_hash": "dfca7549d2b07c51752a14a07101826e8792a73ff29cda0c4e5ac83d8355c051", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "c21812ef-557b-4057-9fb0-c29a839928e5": {"doc_hash": "34fa7a9fd3b8b7cfd3b366753c02ff913fd8da51791106b850011e259da84a16", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "086c90f4-d833-466f-aa3c-ffb8895792a5": {"doc_hash": "698a34eeff42d3ea5381befe102d10e9ad857117e1ab682199e70df8826792ab", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "34863f34-778f-47ca-94bd-56a685709bea": {"doc_hash": "66c7a0d1fe7fbfb355ba2a20da07265eec08da71496449d82afe0c5d49a02915", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "92a9fcd9-5f9d-4b88-abbd-620c5f6d772a": {"doc_hash": "f018d7efe6f1e51bffde2e889db725093ec567045484042128f7186e570a09df", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "9a00af15-9e6e-4b10-b3d3-3971d1ddd0ff": {"doc_hash": "bd00a533e3af13359c50e71d6049e988eee6f4078729647ebbd4a38e61932a5e", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "6999f292-4e22-4a84-b7d9-16c1671367b8": {"doc_hash": "b58060b6ad4519cbf540d2ba44d13fed313212042c1e2eaef0838d810842f74e", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "99fa25e8-77d3-4365-955a-434459d2df5d": {"doc_hash": "c488e0ffe07fd3079433f65064f4a76efc7f8862445c7e1c670694760f7377b2", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "62904ba0-84d9-4e4f-9f6d-bf5f83e75944": {"doc_hash": "6f7f26ce76347f46662b31ea510ef3d18e0105bcfe16292c46b24bd2562cb3ba", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "be728d38-4b42-4bbc-b801-1a3bf59dfdb6": {"doc_hash": "05c8709c15cee6a99e90ef44594ff1356c4e6d6faa7eaa734283f62adc250dcf", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "3aab6b2e-e3b3-43c6-8cb4-fef5689837f3": {"doc_hash": "b13aa8fe1710fd2bb7c691b5bf913b4a558062d4df409ff664627b01835f9872", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "bbad9be1-79ac-427c-81a1-fda9624cc03c": {"doc_hash": "f85ea3eeaf98b420f7aafb4bcb508db3ac52f66f55af194677ea79d3c2489129", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "687ec66a-d036-459c-897c-97643680782b": {"doc_hash": "42924b1fc57afe292e4f2a1fb458d09e3ac67e71311174b4e5413c4a1c74f600", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "fbcf3797-816d-481f-b169-50940707d572": {"doc_hash": "32a7f639b94a411b7e0f6d227e8050b94c27a90d30045613aef8f53ed5a52c36", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "9f50e0d4-a5df-4f78-b4d3-12687ca20236": {"doc_hash": "a90e62065276fe1c6860ff29c15ba00c2819c28c313b37238361693ffbeebeba", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "475440e3-3664-48a5-b0c1-61989c3b00ec": {"doc_hash": "70661a9ced5ab7c03ef6e3c5cfcf1410e4494d9f4db23a8f14e780cd6cf48760", "ref_doc_id": "61651c2945f267f8a94cb03344c6573bc0602691"}, "88cf9b0e-d221-4f4c-9111-0fd69ece23a1": {"doc_hash": "2d6b39613e2acf879a8be19fadba2de34178d74963236486bcf67b1bd6e67fb2", "ref_doc_id": "348729896fd647c82169075ff223a72998d0d4b1"}, "f0fb7c3f-26bc-4813-bd5f-b69ed119e464": {"doc_hash": "4d813e76c3b3c6ada896cf7dd1f4d66df6a58eead29bee18ef44f6f9bd4cd9d9", "ref_doc_id": "348729896fd647c82169075ff223a72998d0d4b1"}, "d7115d3b-28bc-4d94-befd-2baae615745a": {"doc_hash": "780d280b5f0bd81a31121d4b9862cabc7a1b80b8ada6ed5d1eb945f6899f56db", "ref_doc_id": "348729896fd647c82169075ff223a72998d0d4b1"}, "27de7f94-5541-4183-ab74-c6922f36b707": {"doc_hash": "ad195488f2cc48f97e8f3d8be78a2d77f1c75f4c9cf7142534503e17dcda8829", "ref_doc_id": "348729896fd647c82169075ff223a72998d0d4b1"}, "98730fca-cf4a-4c32-8706-5a191fcb3b51": {"doc_hash": "108e51398615e6db67f89be480cce151c26cb20c26279ec8d34c59704531dcb7", "ref_doc_id": "348729896fd647c82169075ff223a72998d0d4b1"}, "009ff9ae-4781-4bbe-a5d6-483baa59df06": {"doc_hash": "1951fd7b361db4df66384b833986d0cdd366b086f83a919e32921c4fb9c3773c", "ref_doc_id": "348729896fd647c82169075ff223a72998d0d4b1"}, "42d710aa-c391-488b-86dc-b2c509eef237": {"doc_hash": "a63c8087fbe3c81e7fe313798634e144fbf0b46b1ff374094e931be5b99f66ef", "ref_doc_id": "19d8e51d8db8df35a2560ef8775b8f6537ced626"}, "6a11d844-7a15-4a4e-8feb-17c5c29ee84e": {"doc_hash": "552f085b251b48388528b2e5a349fd8fbe4e421c9317495a28cb2391785c41eb", "ref_doc_id": "44ae1f8f53881ebb20d6240a9eeb8d7f3e5c143e"}, "d34fdcb2-ff7e-4917-9de4-f68360c04dbd": {"doc_hash": "e847f382129c288ec7f0ed2fce7864f24671da5f1539094af8c18c71799916c9", "ref_doc_id": "4ba10927bf21ca28895376082c87fdda82c8876a"}, "feb7dfb9-5e39-4ea5-b2c3-fff756907661": {"doc_hash": "8f87a00e24f610ef5921414dad8104307a2785fb7207bbe3de67a3bb21079250", "ref_doc_id": "42bf07445998152f727da4fc3912ad3271fdc01c"}, "65513ec7-f49b-4c7b-b472-8ca17e08427b": {"doc_hash": "c9f550ca3b41cca242674b396a587c0cf95ae980611b4029514d3ac90a56aa67", "ref_doc_id": "42bf07445998152f727da4fc3912ad3271fdc01c"}, "a491d3fb-19a4-4424-ad40-2cb842bbde72": {"doc_hash": "0c86be18251aa39c5cc88dabc9675472201089963cc6090a1e60fe728f1221e2", "ref_doc_id": "7a6029eb6686d6201bf42d46dbbfb0924db2a6c9"}, "e21f8ae1-24b6-4339-aef7-673f94945195": {"doc_hash": "834aff8c22367f2655b21ee8994a54de7ee19e83ec729765f33d51fb2e0b39bb", "ref_doc_id": "7a6029eb6686d6201bf42d46dbbfb0924db2a6c9"}, "318426d4-bd65-4cd1-a5c9-bf79d53c8fdd": {"doc_hash": "5e4568a468fe4231ce5f35cb71e286f18a9170171689fac7b1961d1265cae5b3", "ref_doc_id": "52b7bb3361034dc6540bad22299b083e10a3447d"}, "df61f529-f2ad-4128-9e91-f248d016c65c": {"doc_hash": "d7bbd5c95a68cf9f1bdc608b9d5f4fb4d6cb225f9c04cd5d335743fdfe68bca1", "ref_doc_id": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302"}, "b5fd5945-30a1-4101-964f-7602e1ca3701": {"doc_hash": "79c97c781c3f537a210f4f70975c91fdb77171435f3ccca2ace80d8a5c908d34", "ref_doc_id": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302"}, "0b6e628d-e3fe-4cd8-a066-1ffa7e7f8670": {"doc_hash": "f3f322183693937c78d7bfde369fd0e56234f50f2115770d0ac356eb9bd868b9", "ref_doc_id": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302"}, "a80621e9-2ddb-47fa-8e4f-a985d44c8826": {"doc_hash": "3c3549d8423cb764f7ba8cc2d60e1599456a84f02355cdcede4ae72b1cbe34fe", "ref_doc_id": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302"}, "b40447da-a4c3-46e6-9cf8-d5774c5a7013": {"doc_hash": "2222f3a82c35494bf5e3d3165e210db345cc706f9f24be9964c3e8d27f09135c", "ref_doc_id": "b8210cf275aeaa0e8e9a178abd45874b107048c1"}, "93d82944-0f44-4268-9668-60e21444d435": {"doc_hash": "4a93540b93fe697ee553e87fa10b3394dad9b30e77fa567d06dee6a8de9cd8ab", "ref_doc_id": "b8210cf275aeaa0e8e9a178abd45874b107048c1"}, "29d09ea5-418b-449f-a345-38f08aec4ac1": {"doc_hash": "75f6dedca4634d32c1d698adcc12344e22c59821db5cb5df8e19dcd0f81afe34", "ref_doc_id": "0d5661294bf4989f5890d3abe7844ffc01ba9074"}, "e3195419-9c93-41e5-a55b-c987f6ff0198": {"doc_hash": "c3acaed3bf229596a4c7b8f5041815a453a7c3238f2e76dfe9215cad5d1dc735", "ref_doc_id": "edde24794c57e87c10b5cfa33353ef5661a5071d"}, "04680199-412d-4c08-8293-5912b7d76f63": {"doc_hash": "5d347a4ef5a4ede5b3a4fad7c7a32667d83150260823b332fc8682670ed7b3e2", "ref_doc_id": "edde24794c57e87c10b5cfa33353ef5661a5071d"}, "6c6a7a63-93de-429b-ad55-bfd0ea71fe11": {"doc_hash": "25fb527ab6f2be4fd93bb884ac39696b96a1c195d117181a13e0e9875d974137", "ref_doc_id": "68146ad8405a821f13929453ca0543967ee99fba"}, "10913d0f-e8aa-43d6-9dbb-2eee5feae5eb": {"doc_hash": "34c0c8b8a733fab189dfa8b7fe3b80dac0e5131e6d50b127874297abe449e8f7", "ref_doc_id": "68146ad8405a821f13929453ca0543967ee99fba"}, "99aea70c-e548-43ef-a3bf-c270e5d68f9c": {"doc_hash": "9f2b970581714bd2f7ded5b99c2746d1b3e3d198983e9e9ef2899e1840cc181b", "ref_doc_id": "68146ad8405a821f13929453ca0543967ee99fba"}, "f88a4049-ff72-4722-a9f4-867eda5a2fe3": {"doc_hash": "c8cf09b8fc7eb975d170d013be6d28757b8f2d954df419cf39c2ba26eb115348", "ref_doc_id": "18051023a4884da734cec67165692de9cbccbbfe"}, "95d97e0a-f65b-4d61-bb12-cbd04515c1cb": {"doc_hash": "264cf288dfb8aa9eb462c07cb90d0fff3814ac982fd07f4f37d4ccd90141da38", "ref_doc_id": "18051023a4884da734cec67165692de9cbccbbfe"}, "0bc93e9a-c376-4590-bb5f-09bd1b095de3": {"doc_hash": "0bdc839c4b818ac71ddc7a4003640b88ef59823107f6b881086368a8a523c7fb", "ref_doc_id": "18051023a4884da734cec67165692de9cbccbbfe"}, "356f7146-17af-44ea-827d-8b2722f28036": {"doc_hash": "028338a648c81f7e28d0bd0b8267f08ad5a1bc6a44d38e8002e928ebdb0ac29a", "ref_doc_id": "b8a2b21f2aed109cb7ed00fb45742e6c4c846113"}, "f82a2f74-be56-42aa-a0ad-cbc03cee8f61": {"doc_hash": "c83d2473a97e5df928e562aef35e6aee83e92bf79c3c570144f85180eedc2f4b", "ref_doc_id": "b8a2b21f2aed109cb7ed00fb45742e6c4c846113"}, "dc239a7e-0804-40a1-a03c-0d4fa0ebc983": {"doc_hash": "3917e1757dae76a2bfc167bad90ffd00704be21743b591b7578948f77a6a4d2b", "ref_doc_id": "38d538baf3e04475b6dae62e5b06245fcf1d8d2c"}, "aec492a1-839a-414f-b0ba-8d11dbf305c5": {"doc_hash": "966cdf990d9a65423518b4e2192265ca7337421a46117b83807ed162b9e435aa", "ref_doc_id": "838e6337b4338c1b85ddd4e7e78ce7e82b04810c"}, "b3928af4-fc04-487b-8162-d341cb2bec1c": {"doc_hash": "c60c6c6d9d0d614aabc264dd8792ec18c2349efa3c5c826cb9cbdec6b0a83fc9", "ref_doc_id": "838e6337b4338c1b85ddd4e7e78ce7e82b04810c"}, "43f68820-b10c-4c15-97eb-b87976b692ec": {"doc_hash": "7507cc34e60e93cc764203fa0ed35721ba5d62db575b61bf2c2e55323e4e87c3", "ref_doc_id": "838e6337b4338c1b85ddd4e7e78ce7e82b04810c"}, "4323e630-025c-4043-ab95-3766df0bf1c9": {"doc_hash": "454bca8171205cae60ffaf34b61c8a92506457272ccdcf70edad83cf53f20176", "ref_doc_id": "7b78ec193886b111cf56d8f5576f033269d4fdfb"}, "d9d29936-7352-46a4-8b40-3e0320144e22": {"doc_hash": "9331b0cd38c30075730496cbfd0b161e75ac98c84e477468471221efd803fc89", "ref_doc_id": "7b78ec193886b111cf56d8f5576f033269d4fdfb"}, "edc90ea0-d8b3-4182-8336-7f84c2160e41": {"doc_hash": "5f7a55380c5eae10fd6dbd1025377dba195d0bfcbd14c68d428d9a76ec5ae6c5", "ref_doc_id": "ece9661aaa275ba7b6e067d84151a8901406e9d2"}, "1f856dac-1c81-4821-bb58-dfa8190340dd": {"doc_hash": "cdb5a6401eda0cdd9d1e715aaa4309f3f7600d1333c19ea120543a8c310cec91", "ref_doc_id": "ece9661aaa275ba7b6e067d84151a8901406e9d2"}, "74821dd8-e18b-45a3-83f2-259b2bbeeb76": {"doc_hash": "b9cd62b142ea3bf408a672be5956d6b882bc5febaead221199e3f6a46d316287", "ref_doc_id": "ece9661aaa275ba7b6e067d84151a8901406e9d2"}, "f6b140f8-1b35-4519-b0bc-609e447d0a11": {"doc_hash": "066611be7406e77ad756d9aaf3d929904d88999da76a2cda0698ca1e88fdbef5", "ref_doc_id": "ece9661aaa275ba7b6e067d84151a8901406e9d2"}, "89c414f5-35a2-4053-bb81-1223cf0c9204": {"doc_hash": "06c005921a3f65e34e9dab02be23fd9b1444a7f4ada923b8c4593896d16bad0f", "ref_doc_id": "ece9661aaa275ba7b6e067d84151a8901406e9d2"}, "41ca87d1-9cb9-4793-8c33-d881a4e322b1": {"doc_hash": "996d6ebaa2bf2b680a52f0da1c697c881d7033caca8ec79382c433c5c855fec5", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "3f1d264f-15bf-458b-aa61-3eb8a5b4a1dd": {"doc_hash": "c35e8ac87347bcb0d1de6d99b07354875b665dbbc045f07b9cfa62c49a7f8386", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "1cad20bc-36ea-4d88-8630-3c1d161dd359": {"doc_hash": "bcd99ef2342f431d3ad4ef5eaae700633adf4d46641b3829d4a57199fc8988bd", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "bfcb77c4-0af9-4db7-8c62-55bc5de428ac": {"doc_hash": "8fb93da0ce7b17a9ac7ec1906f4f7e022e32dde64c5ea8300af12602f5c10eb2", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "bf939024-95e5-4465-8c25-90070b43448b": {"doc_hash": "62d86292fd04f9aeecb8a6271c85e567af7d62ccfc4e53d95714b8cf7acbf10a", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "47626194-b9e3-418c-b31e-81832be7eb20": {"doc_hash": "7cba9b95cbab8043462c1a760c373f0b13e8e08bce50c26aaa62da0b5c90ef1c", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "e5eddce0-d9e2-439c-8879-30f40d688358": {"doc_hash": "68471552339ddd87cab5911bb3cf443d44daf2c59f61aeef90da9607c6606ac2", "ref_doc_id": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8"}, "c1ee3b53-688e-4aa8-bbf0-84d49bc497a1": {"doc_hash": "1b829718be1511cdc5d11026e7cb1af21017771c6a70fb203341176cacb9a930", "ref_doc_id": "a8723774c1de839dd80038feb9f2a622c24f524b"}, "dd849719-e41d-4390-8294-59066d76e820": {"doc_hash": "18d9832a82ad5db84dce8b4baedc59dac72859fa703bb7ddd316c9a84d8421b7", "ref_doc_id": "a8723774c1de839dd80038feb9f2a622c24f524b"}, "c0a73f07-da8c-4b0f-bbca-55f750aa48db": {"doc_hash": "1f086b70caa2311d2b59c0935b2b95231bde1f4516115773edc88b5af2224225", "ref_doc_id": "c14ec2146b768a8e7bb8feaf09f791f29152dda9"}, "7542d531-39d6-4ea8-929e-63ff4be85249": {"doc_hash": "87b76b3a59ff7e0c2a37507461e282e98144b429930061b7f7409eb39d4bb945", "ref_doc_id": "2edf88f2d0024be43b844b3fd3298846b2bf7317"}, "da77cb73-3557-468e-8c0b-2b1d331a0df3": {"doc_hash": "5c23a41956ca31a529b3b6aff751f5f2b6bb3d675802a486a7533fd867d8219f", "ref_doc_id": "12fbcca8bee0c06e3445ee65e8529f3108cecb19"}, "878aa855-6663-4607-9d93-98f76a1b1735": {"doc_hash": "b88ba5e83c7aabebbd57cc283e2a9ead1823ab1e8f1f6d898c1c1d5cbe1313f1", "ref_doc_id": "12fbcca8bee0c06e3445ee65e8529f3108cecb19"}, "dd97c9a9-85ee-4fd6-b953-e4cddc206d28": {"doc_hash": "5ee81df64cef5875d1eb91a6fd1a87da08535ebb7d6d24a994760608c2b0b670", "ref_doc_id": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c"}, "52fe3848-693a-4586-a004-b829ffd0bf8f": {"doc_hash": "362e3171a8e37f2e75ff1c70990a8fc41c1e4b75ada86408451108da838891b7", "ref_doc_id": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c"}, "f5d1ae8b-42bf-44b2-8817-83e27260846e": {"doc_hash": "29a25da679b4c0895d5136fb75e9fbf81ba2e33d24154b5aa42433daeda2583b", "ref_doc_id": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c"}, "19ababb6-d6dd-4bb1-adc7-ca1a897378d5": {"doc_hash": "8194612d58f52a18199528d26ff6dfa69c9a9867f0a6eba69a8b4beae7948015", "ref_doc_id": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c"}, "414fd629-f6ef-428b-b5f1-304ca9194a96": {"doc_hash": "e8740ad1cd8be920eac1856c34db65e2147d7bb09d538d313f2433196fe2d0b5", "ref_doc_id": "cfaf5de88d573d775dda261f5c5441484302d961"}, "34ca6ffd-38a2-42cd-9235-c968803f93ab": {"doc_hash": "413a6ba65e0ef3f41c811973f754f63349aa0c7c4c6c0b0309d1eda74994079f", "ref_doc_id": "9ec2f719665f805d8a851c5b0562239b6adeb373"}, "6ef21938-62fa-4086-944b-ffc277641e9d": {"doc_hash": "f41a14f1a837cb3bded9ab0fe13b610cdca9acf1f1da435616c292f8e5248d0f", "ref_doc_id": "9ec2f719665f805d8a851c5b0562239b6adeb373"}, "0e8a58d6-6b71-45b6-95b9-997890f2b6ab": {"doc_hash": "9a91711e04af6bcc1e223df2f487d84b3302549b96a58de2d524010354578f6a", "ref_doc_id": "9ec2f719665f805d8a851c5b0562239b6adeb373"}, "7d73f044-9daf-463c-85e8-0965bff6c909": {"doc_hash": "7a10846085a18e2e18ef56dc90382f61cd8d79540d08da12a8fd983814052baa", "ref_doc_id": "9ec2f719665f805d8a851c5b0562239b6adeb373"}, "1c0c6c42-864a-4570-82f7-a03288840d9d": {"doc_hash": "196744466ea506f05a8c9ce6bf9fd6bd070a0ef78b3a3c89d9caf207238be94d", "ref_doc_id": "9ec2f719665f805d8a851c5b0562239b6adeb373"}, "87045a79-9271-499e-b91d-5a1e6ba59bef": {"doc_hash": "47b48c7178d985da6ec845b35300a01c1541d0012a5085e5f70f2ac2204cc253", "ref_doc_id": "40d0380af07aa18321fc672ba753e4e7ff312e02"}, "4cdd373e-b356-48bf-967b-e9c0e1ce59f1": {"doc_hash": "4c96e23eb2779a2e24721d64cf6b19e87831d529debd6a2ec8b6dd330a25d160", "ref_doc_id": "40d0380af07aa18321fc672ba753e4e7ff312e02"}, "21e28e57-b442-453f-9eae-a355af486736": {"doc_hash": "59ce970a21b0181032a0a6022d7bf9b98d9f0af8daf0bcf1327d6f1a662a64c9", "ref_doc_id": "40d0380af07aa18321fc672ba753e4e7ff312e02"}, "d65a684a-9113-4413-9842-f04f934cd1b9": {"doc_hash": "f5e2dfea3ae7e33b5905ccb8f73207c66ba3c4ba74b67ea236cd0a5e427bad86", "ref_doc_id": "7559b131bf41790c8f93ec1f26268d3e7db187a5"}, "4e592c6e-c866-4d1f-9dc9-f7d65efbb6c4": {"doc_hash": "f0cb06f2c986c134a8a4446d8ddc1a50b7fcfe5791a62a1df72218b71509b714", "ref_doc_id": "a6fc55168b362386a1393977a8fe31b513578467"}, "3ade914e-a729-40f0-aa73-0ddad1fefd6b": {"doc_hash": "c89aecbfbfcbb8e686c1b234f3f43b1179f17f95ded066f9ca65ce19855dc216", "ref_doc_id": "a6fc55168b362386a1393977a8fe31b513578467"}, "a011212e-2cd3-4a28-8297-6f5ed2958ad1": {"doc_hash": "38391cc8c94ae4f956faa0df2cd09521d94c1bf5b575cf8b06eb0ea61d8bab5b", "ref_doc_id": "a6fc55168b362386a1393977a8fe31b513578467"}, "28f0ad28-f1a5-4630-a769-d384d3389224": {"doc_hash": "66a17f02793ec8289a1558fa2c62a69bcf2de172022cb4e7c056321a8bce723e", "ref_doc_id": "a38d68a556bb0d42da12c28f7ffeefca895a651b"}, "6240cdf2-c257-4872-b29d-30ef35a8f895": {"doc_hash": "ae3b7859fc81c054b19ebf0e8b10b0a4b0052b2a027569db638fbfc3fc223db6", "ref_doc_id": "daee96a8c111b0b324e4f1c463768b1d26af8c69"}, "c9ec58ce-01e2-4fac-aeea-70aa1831bee1": {"doc_hash": "6ebe2ffd330fbcdaf2638d4ba30534f316498dd432759c3b33a7d1a11cab45f9", "ref_doc_id": "daee96a8c111b0b324e4f1c463768b1d26af8c69"}, "316bf954-bc11-4f0d-a47f-b06cce02978f": {"doc_hash": "7abfa1c77d4443d1050a71073f3ed6a89125fc24a195f2035edcbb523ba00b2c", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "21083ed0-4e2a-4422-9f44-b4dc0ed89cca": {"doc_hash": "8a365114a103322afc830bc1312bfc0920b452f3e46e4cadacdd88317d59b275", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "3ce40184-0f42-4c4f-b964-fcf52d8d73b7": {"doc_hash": "ac80653605ea0947130af79c31e1ebbaf07facfb2e0b7e19003d0d1b185acda6", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "aa2d44ce-48b3-4eaf-986e-3f667cff31b8": {"doc_hash": "bb0475b79526236b017e6d89cad1b600980fc079d4fa99f1d25ec853575487b7", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "dcde3de1-045f-4865-9430-2ba4487be4ad": {"doc_hash": "a5ec0159354327a88c59d327f276458253865a2e531bca2f88239c1b134ee418", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "f9b0ca2d-b072-48bc-a286-1c78106d5223": {"doc_hash": "9b6313d26569b6d0888338d62f62cab668f392e84ee89314c6ddfc4c5e5a43d5", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "291399e4-2fb5-45a5-a75c-1c465be3fec7": {"doc_hash": "149825593f1fee5a965c6688c9fecae2c1d650c50e22b5d2426029b4900ed327", "ref_doc_id": "0db36e5103c9af18ce58985f51eae85575c8ae2f"}, "de12847c-cdd4-463a-8e42-30ebc7941de9": {"doc_hash": "226ad91d5b2f5faaea939eaf747c45e13605e21b4b50cdacb6be683335b313ba", "ref_doc_id": "4b55a68cfe2712f7b58501b1723005c4d42281b6"}, "21c5e0f5-c88e-429f-bd89-cdddfbe3f637": {"doc_hash": "3569ace936c515d1552a6ae963d5352cde815a0b42765eb78dac0dfaa1558999", "ref_doc_id": "4b55a68cfe2712f7b58501b1723005c4d42281b6"}, "eb0ff044-e257-4a84-b42a-9f11098888c2": {"doc_hash": "e77dd7f8e9fc31501e3007fe1b0a3013c3e2eab9756bf640ba979b49e481a3f4", "ref_doc_id": "4b55a68cfe2712f7b58501b1723005c4d42281b6"}, "f8be1e4e-cf21-4183-98a3-dadcc6e05913": {"doc_hash": "797a8ccb7bf6f36b9e8927a254308710ffe1945c18c0153f1505c5e2028328ec", "ref_doc_id": "4b55a68cfe2712f7b58501b1723005c4d42281b6"}, "125fb7f7-d22d-4a18-9d3f-88662292e97d": {"doc_hash": "de88b8990b0346209a5b599a6a84b22a0d4ebb26b9d2c3775017ba537512a885", "ref_doc_id": "4b55a68cfe2712f7b58501b1723005c4d42281b6"}, "3aabd586-cb82-4baa-95fc-59278cd1eb64": {"doc_hash": "d3711d5d14dc76d562907592318f9dccd2636300864d2deae70455aa59448ebf", "ref_doc_id": "4b55a68cfe2712f7b58501b1723005c4d42281b6"}, "5e48e36d-4c85-4a7b-bbfd-9ab04af91302": {"doc_hash": "038061ddb45bd8ab5be567b79d06bd96660ac4ba9e35349fd797a4efee70425f", "ref_doc_id": "f13f83f36ca1358286929077aabeb8a745b6d64d"}, "d582b564-fcef-4094-a416-d9ac54848cec": {"doc_hash": "4693a0fae1da2bc1fcfbcda12a704fb83ccec9f5eb6ec06e732bf35d96471ee5", "ref_doc_id": "f13f83f36ca1358286929077aabeb8a745b6d64d"}, "9e36b1d0-231b-4282-80a3-0106c097396a": {"doc_hash": "7dfa81ba22b543fbe4e495e1da2e2409c5a42e84a7a089dba78057421145a5e5", "ref_doc_id": "f13f83f36ca1358286929077aabeb8a745b6d64d"}, "631f0528-a1f2-4ef1-80dc-2abe23b289e5": {"doc_hash": "0ebdd803634356fc76568c7448cef6159108d17fd1e73c444615c6159e9694d3", "ref_doc_id": "f13f83f36ca1358286929077aabeb8a745b6d64d"}, "3c80b030-9166-4250-83b4-4ae19767f50e": {"doc_hash": "f608300726eecef24de7940d5f7ea158fc59469c0d17432149dbd2d77d54f7dd", "ref_doc_id": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9"}, "7de89a99-6b2b-4d4e-a183-4e58a5346b10": {"doc_hash": "ea4bd56b79e3c6b1fa6b9f0c15eb003c073ae32da81d9bcb9cd18ebca7da5988", "ref_doc_id": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9"}, "256e76f3-413c-463f-9446-301215621b65": {"doc_hash": "17cef33579f2cb09b6474aa1875b40c0c40bde12b1013f08e39f54ee5dc7f0cf", "ref_doc_id": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9"}, "b3c1d2a8-6381-4768-a3dc-5d9832cbac80": {"doc_hash": "2381b61ba878e66636319057ed4a98c9e43490ac9f7103852a32940b5cb82a31", "ref_doc_id": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9"}, "196cf7e0-ac78-4fe2-ae98-3e784614ab87": {"doc_hash": "b32383bca2e59455dead26a0d9abc65cb1f76b58939f9ccc5b02238f5c5e25b7", "ref_doc_id": "d5261f6c4a29285160718e85e0dbbec44c10d983"}, "bc2ff351-0713-47c1-9585-a2f58a327fb5": {"doc_hash": "a3bb074acc6dcf04189c80c093d907a9e9c5fb5f80ce5d3014d64afa33ae04f6", "ref_doc_id": "d5261f6c4a29285160718e85e0dbbec44c10d983"}, "5d8c0e2e-06c2-4e39-808c-f459db4d4722": {"doc_hash": "ad027a0a1825fe7f70353f04bb82a448dc675765bff289519179537e8e49f596", "ref_doc_id": "d5261f6c4a29285160718e85e0dbbec44c10d983"}, "0759c14a-764b-4987-8b74-652d9379d72b": {"doc_hash": "dd03d2c6618ab40557f683b003f23eb0dcb36932e1fe770da6f26ec4f1174850", "ref_doc_id": "d5261f6c4a29285160718e85e0dbbec44c10d983"}, "5a3dd5a0-28f0-4045-b294-f027f106f2f3": {"doc_hash": "2d67ad38b19eb5515d897b43fafb2795b1a5a79d785288c22ee52416b2e8439c", "ref_doc_id": "d5261f6c4a29285160718e85e0dbbec44c10d983"}, "8a247c6e-e6e2-4070-b422-d9f81189348d": {"doc_hash": "6f5c8bf5dcf9c8625ee1d013e666653178e73146ffb255f45cde54d42a7d8175", "ref_doc_id": "debb614241befe9e6d2944d69549425081eaef96"}, "c69dfaf3-382c-4f10-a069-a2131a662d88": {"doc_hash": "485b1f5635a16f6a9ee0c37ece2151d01d7236f08e4c73940b3af12448d5f83e", "ref_doc_id": "3355f0881b7369c3e3465a9e02e23b5eacc2f9c2"}, "60bcea0b-6fb9-435e-85e7-3bdc3aa511f9": {"doc_hash": "28c8292fb0406313ee73ee692e17d2c16d662ff41c43645b3fe74c2ca55b44ce", "ref_doc_id": "3355f0881b7369c3e3465a9e02e23b5eacc2f9c2"}, "b6a927ad-00d2-4154-838f-018d09c98cf1": {"doc_hash": "573c1aa96186190ba135970ea6ee4e18837557a576b8d3d3ced3e52a6bf7916a", "ref_doc_id": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932"}, "2b8aef81-d2f9-4c72-af35-2f885d093fd3": {"doc_hash": "610cf9e7152e58bf53d0bbd84836885f99d1d2eae65ecd78fde424a7b2badc95", "ref_doc_id": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932"}, "f95d4717-73a8-48c8-9386-91be0aa00483": {"doc_hash": "6a7233faa2ea7de1803e61687ee602f54f97f87a4f8c70731ad68b85e6b9a1cb", "ref_doc_id": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932"}, "8a2ad227-cd2d-40fc-a3e9-9612770984b0": {"doc_hash": "aa450bb7e7ade40cb65b4375d274d5eb4019d3d8c98f8945c97334a7b1ee512f", "ref_doc_id": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932"}, "43a2f4ed-2185-48e5-9e37-0a15911d022f": {"doc_hash": "6fcf464cc975b722ba310a54b1ee9a9d67c5999de16b709beebd04f8b7f3bbe3", "ref_doc_id": "1d1b056f2f84976b57bb1a1f70428b3494d13c45"}, "fefab0fe-4e71-47f5-af3f-76aeaf4b09d3": {"doc_hash": "378cc3d599be146f2b2f2a76d5ff90068a2eec1bc69c39708c64b7ef37ce0633", "ref_doc_id": "1d1b056f2f84976b57bb1a1f70428b3494d13c45"}, "d012161b-6378-44ae-b7e8-094eedd82479": {"doc_hash": "12294023bfb7853bcf441482f8d0f39695651ad2d992e4607861481ce6e25f22", "ref_doc_id": "1d1b056f2f84976b57bb1a1f70428b3494d13c45"}, "964aaee7-176e-42cf-af16-3df016fbc9d8": {"doc_hash": "240d7f6d7ea833e27e4a2f1956f05cd577161042c36c6bd333d85d4418e3f33a", "ref_doc_id": "5dcd04b94ed7f9869aaca5969d56dc46ce93826b"}, "3dc7dd2a-0043-454a-b5e5-6749935979cb": {"doc_hash": "6182dec5a370b9038bc0ab8f67892b908f2f099a1e7f18c5ba5b98e467e10243", "ref_doc_id": "48356fe565bbd932fde769ce559c32191360ce94"}, "f5d1543a-c420-4838-9f56-d96226c5db24": {"doc_hash": "207894e57cf363e202863d30756c316bc05bdb0afd4bdc3de79d127139a34666", "ref_doc_id": "48356fe565bbd932fde769ce559c32191360ce94"}, "3f11ef0b-7f38-484e-9c52-5c7c2cbb07c8": {"doc_hash": "ac1bb412db302eead43eedffd0a193a2e551feb131e796efe5340bbfece78932", "ref_doc_id": "954d2e2e6b9aa28c74e58588f4d02652894873eb"}, "4f44b75c-a0a5-4a9f-b82f-014c45fd2709": {"doc_hash": "31ca03445803dd595e74ab4c8734d44ddc4887d423c9ce34ea4a5ba9cc311e60", "ref_doc_id": "cd0160a2d14c34413af91ee4424de68ca7f47c80"}, "35bf0e91-edeb-48f9-9240-ee865cb17f3c": {"doc_hash": "05916847b7178ded7960b7281177bcb848f5186b59efb86cf37f94a456f9b66c", "ref_doc_id": "cd0160a2d14c34413af91ee4424de68ca7f47c80"}, "f95841f2-c72d-4fc9-87b5-0c1534fc6d02": {"doc_hash": "dce347c84f7bedaa91d9812ae0fe09456e90aa292cda66b22668f05ce222806f", "ref_doc_id": "34fb592983ffd82c7fc01a8e626cd98cb4d1ed2d"}, "086656b4-ed8d-4443-840f-00054cf44388": {"doc_hash": "95783f8ddb7d6f407cf6fe14fc278cfe96bf43291fec89283e229fcf4c1109f5", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "010f58d3-07bb-4439-ab8c-027ef41e2ac1": {"doc_hash": "d3473db5ccc2e8d62b7c4365f5df3d57eb058482bca59131085f0c8a56c99ed3", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "9666ed64-6350-44dc-bcf5-c9004e769eb1": {"doc_hash": "133c0559434e51e876de6a7e883fb150301ff5688c985bd9e9e4ffa3d4fc92dc", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "5f438397-3ebd-4e7a-b92f-10e758e5d515": {"doc_hash": "f820f01d1c8bab385a62791f4e0d2589d7654fc1fcaf468f7fb9477764cc20b6", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "14474659-aaf5-4e5d-8b82-982327072a73": {"doc_hash": "f5ffbf61ce5e9ccd0958606c8f257c6858720efb0615486dbd0516107eb6b066", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "4b8cb1e1-e5d3-42ff-8517-e44c6b353412": {"doc_hash": "44e9428d184a88923ad75e9ba5b5509a8961bb11aaf51173bad05dcfc5c68aa3", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "28f3966b-4344-4e4d-89b7-592398f83560": {"doc_hash": "a67fb73f0ee066cb8a6e74806d83f0f924fc87f56a56e2172d031e4849c8c5f3", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "01520c43-86e8-4eb3-b5f2-d9ca4da2ba4e": {"doc_hash": "0f27771e5c9d7ae2d3adf6a4f5dea0db5157379b50fc9ca7e87149af71f8de1b", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "61169db3-1c07-48bc-89d2-9fd777d20f96": {"doc_hash": "eaf041a0f41e77fb817d030f8fd33c98f24346f875f8a49ebff42f6852e75352", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "495b7d15-c728-465b-8d22-b06559d50056": {"doc_hash": "a7bb3dbdc7dbe490d9c355a841109b184f41f0067f9f8816456d0e46f6103c52", "ref_doc_id": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631"}, "3984b0cc-271b-4b99-9714-ad68d3800388": {"doc_hash": "0836792065fd5d06f5e6e7583400eca2135ad68bea1c1a03041d3ad45541d518", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "3827e5cd-1f1a-4dee-8afe-79c069f9c45e": {"doc_hash": "0126637ad0e195fc004bf4bfc32773465338ea308c345ef0df068e8733643917", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "dcf7b495-ba31-4759-b620-93897dfda7d6": {"doc_hash": "7f14eb08f58aa5240f03ddced8bd8969921d3a898579146f41a3e4fd916b6846", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "d7cafc5b-344e-428f-bcc8-070856a69c31": {"doc_hash": "9e49dd5be0c3db8a55a3c06f9fb01664777a384ec5838958746fc067c173a0b4", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "54dd3c43-df98-4776-a98e-b4b538197101": {"doc_hash": "2a5ac02454838952faac5a73aa6a26005e3cb13f222a7a157787f39e3974e00e", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "e24526b5-d36b-458d-941b-b8ec0e3a78e8": {"doc_hash": "d42ea3c791e5a4b2b4636f8c69c3b03c08097522664c45b397440d167408efcd", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "ae30916f-f634-452b-a615-1b3f839e8b60": {"doc_hash": "aff0cd5c589dea034a3f1b1afabb5c789dff2a292441f9777ccc14adc4217f02", "ref_doc_id": "c2312a3cf01c34580ee92070459af970bf1c3109"}, "42bd696f-ca7f-4210-8023-88ce4373e6bc": {"doc_hash": "5c0afce8277131921d74fff6bee91c4fc7b51fac3041db1ddf653965b61d71a9", "ref_doc_id": "01475bc02aae5d24f15884f934fb987ebc59283b"}, "d868a581-12c5-40dd-b625-8bb5b288fcc9": {"doc_hash": "7c251bbac8e05e0a93d2d15fa2db3c47e23df01251eaf3e4c05702e0411fd64e", "ref_doc_id": "01475bc02aae5d24f15884f934fb987ebc59283b"}, "d6919f3e-da0e-42d6-ac8b-86d77c1a4ba8": {"doc_hash": "4f420c2918985b5474411810cf265772a7b2f37f8b5e20edfaf995b3cd012655", "ref_doc_id": "2e793c0c7a679f2ed4b59593787823581a749c91"}, "6b2dd714-c7a0-431b-95bb-62d0d13eaa50": {"doc_hash": "2843476898259e6d63ccb7695cd194abc999af391861befbb7a722424468b258", "ref_doc_id": "2b80d8d8f8f2c4854344e74929561c75de3b0565"}, "f6fd3b73-d138-463c-9ea5-4d4fb9a95ced": {"doc_hash": "48fb81fb2dd6094110e717a1f85b5fb77b78a6452891f82a47729fa5369a96b8", "ref_doc_id": "2b80d8d8f8f2c4854344e74929561c75de3b0565"}, "97fdcebe-bc4c-4be9-8643-67c21fffb86a": {"doc_hash": "6b36f29cbd2d00b55db73c7d280c8f36b7ce18be9afcd8651eef387d86ca3807", "ref_doc_id": "1e88155794ce85f3297cdf937f4e39f520f103b5"}, "39293e26-6c37-4d9f-bab8-b46778615a4f": {"doc_hash": "ac9d1523f189272e24952ca33a5e42c4f64c1c8f984a7da6cff9831ccfadc921", "ref_doc_id": "1e88155794ce85f3297cdf937f4e39f520f103b5"}, "bc15ef1f-d994-4426-834a-ae741c75e165": {"doc_hash": "4d2e1bc83e4235363a82e88bc46b84a415360ab9695b23fcefe1bc9c8768a108", "ref_doc_id": "1e88155794ce85f3297cdf937f4e39f520f103b5"}, "69589414-4617-4522-9fad-f6cc2cb189f4": {"doc_hash": "21a0b6a11e0618e34ac14069f8763f637409be3557ade638cde87e45828db2c9", "ref_doc_id": "409fb91ce613f9b2b1898cc01c9845ea00c22313"}, "571b45e7-90af-4213-92a3-b7ef5dc2909a": {"doc_hash": "95b98094b365bbf67c835f2f76b0fce818038554ef0864f80d9cb6e3fe9c5fef", "ref_doc_id": "409fb91ce613f9b2b1898cc01c9845ea00c22313"}, "7a006921-e375-486b-ae70-109cb59dab8c": {"doc_hash": "898d8fdbf2e04987854f2c27eb0ff36cd30a8cb0ae5047ad8d70846589fb4fb4", "ref_doc_id": "e4ef25f1a683734e5f3b50a3eab6c46cdd02e17d"}, "f2799773-922b-4587-a7c3-e88f85812e17": {"doc_hash": "52bf0f991c02dde4ea4f9b49a92234d546928f290c3d59dd6805c60bd72bd0b9", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "d8f52df6-92dc-4045-8068-6e6456db267b": {"doc_hash": "188700c08c36633c9b0cb667444e3b8b4868af0e583a05f5e19ad20a27b3ee78", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "7241bee8-b439-41a2-b676-15d8dd30c0c4": {"doc_hash": "86125782dc0b6c0f0d59b2eb676958de7995dc486ca5da2854d30d408451d357", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "d432052f-112c-48d2-bf8b-8deeb3c1a6a1": {"doc_hash": "4a5a9d775ecc64b0a12cabeada2b72eeb44a5c5db09daa54a041e23fd1808a74", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "2bba35c7-3c57-4672-a73e-471dcf86de11": {"doc_hash": "3d54554d3b092e9e6526ec58fd602ecc18e0162aa5c52d92fd4832fc5b52db1e", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "9bac438e-5dee-4936-8e53-51051990eb66": {"doc_hash": "506b4fd90182554b7be518c18f0b2b4ee45c521ac192bbe86dcfa8deb0eeaa44", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "070ee0d4-db64-476f-8b81-34fc7cadb2a9": {"doc_hash": "16a7dfc0cef954be19880b7f0540925867a7db95a9f34e720a9043346f0479fc", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "f9ec9932-36a1-4850-a8d4-c37ebe4d3fd4": {"doc_hash": "baafd3a27cea54c9d3be6a537e2faa078ad9f9ec5d33edc905f6bf4c3b959880", "ref_doc_id": "a62825e262d5fa81144e76327d854a4bc5b6306d"}, "92fb7a46-c4ae-42f9-a7d2-15c66eb0ab1b": {"doc_hash": "6723ecaddff7854cb3d2e514969831b785a479d10fd191cdddcd5a0717133945", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "551ef7a2-6c74-414f-a8d1-25da76b159fe": {"doc_hash": "5b902fa4bfda2516ea6833c0bfcfc19f4569350e4e50e68fae559f35e1e27e9c", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "94a79420-1ac0-40df-879c-63b5307ccfd6": {"doc_hash": "6a041158090665a75be995af699e64de9829da2466a2c477c0b6ce4baae9b17a", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "edc00528-bcf3-4616-a609-f16528bd56ed": {"doc_hash": "9ce7232305c6a528600b06ae2b94fa6d97c955f6f868eb8567219f8de6db23e6", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "0639b5c9-0f10-4180-91e2-7784bae7850a": {"doc_hash": "eb5c1c494298298cb40da0b8a40649dc4f2d3c75c02e88a93e4fb4718abc37b9", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "2c275eb9-4024-437f-a381-6e7057785234": {"doc_hash": "5aa9df238aff7a488f1618c920e2671cf82fb987ba69f64e325423538c9aa33f", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "5037b691-cb85-46ae-bcb4-aeb41a211d4a": {"doc_hash": "c9a0b101b26e39ef3542d01f6b69628f4cc57200df245aeb607087b49827d0e0", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "c83ceb0d-ff6a-49d1-bfa5-249d8047d78c": {"doc_hash": "b071f50c924274e79183dd19e281842bd5d6717f05eca0957c4ada959d503d12", "ref_doc_id": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959"}, "1df4d47d-8263-4a57-b375-252033c805f4": {"doc_hash": "787000c0aa8c7511d5baed4ed9663c606d2ed9dd990414d1eb0adc757da91e79", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "12d9fa3a-00e1-4850-af8e-12473b6e2e9f": {"doc_hash": "ff6414a73518883e5ddad3bcb64bd1ab59001211467ff8ccc16b1319918002a6", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "761a539f-d00f-4329-b4bb-7ba87c20558a": {"doc_hash": "a095a1409231e45fdce783aa564da57b207957e1a7b6d458c652dbf7ac6d850b", "ref_doc_id": "40e6988df92f95cc6e47ac5ad74396c709d80fbf"}, "9f896f18-b3d7-49bd-9736-e54caa8f3134": {"doc_hash": "3c362bae93ce28c70ad285d8387bc5b0173bd810b233e447091591bae9b2836f", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "92a565b7-50ed-433d-b1b7-19d5cf42e48b": {"doc_hash": "ebc92c83902f2ecd95c4f1083890b48cde663eaf37ca1a2ca8bfee3e47852547", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "20b6cc4f-47b7-4394-9024-796758eef2b5": {"doc_hash": "3e35bff61ae195d66a927582ac2be1a05b30e1bfe024b0efa08340db12db6019", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "82f5e5fa-f196-4dbf-976f-690320eb14e1": {"doc_hash": "0c7118439facb50bffc24e2a4ef7b9b2855728e253bcfba51baa7f11c7abd931", "ref_doc_id": "c5934a0545fd0134853929cf387d1285c0fd4eb8"}, "58a03b85-eab1-489c-affa-9127b75b855a": {"doc_hash": "0a5fdcd9839030a27099b3615aae545bc1d182e4784279781d5f8e2895531ecd", "ref_doc_id": "788ef6bbf0ac63a5af9401c87bcd6edb034e48cd"}, "8256203d-0439-4c8e-ba04-b2874d9ab9c7": {"doc_hash": "f218db4714ee8830442f6197a5107e67bc465a6b5353d17d8f098265cb6685a1", "ref_doc_id": "788ef6bbf0ac63a5af9401c87bcd6edb034e48cd"}, "12783d61-7092-4178-9b69-85f6d8d6e456": {"doc_hash": "95d0f3942ee146a87188454853d2dc1668f8fe99fecf4cd0ae36af3f9627efb6", "ref_doc_id": "a001268bbd43a5fdb5cbae1e57f3eff5888c105b"}, "00222303-974c-4160-b480-7d270af15804": {"doc_hash": "991daad8c56d0dfe0ddd34824a10cb590491dc229b0d11fdfe4ed955527a3545", "ref_doc_id": "9fba62de8df2dbecab3ab5ffca830f8b04c58de4"}, "71e7e907-3c01-4e6e-911e-3f8d9a190ddc": {"doc_hash": "c0f534c769c6e1d76b452f990c71c4b9060951e709e9c8b207548eb02fc6cf88", "ref_doc_id": "9fba62de8df2dbecab3ab5ffca830f8b04c58de4"}, "8f472fde-3ce5-4c0c-b7a9-3ff6e0956822": {"doc_hash": "6f8429430fff0bc15557022408f85727cfa4bcd2709544f1fbcecd5a7279ee74", "ref_doc_id": "1b6c2d484eea5dc6baabe27fbf40fe78e53180bb"}, "a7dfdf73-a5a7-4c28-8707-4eea758ac160": {"doc_hash": "db550063e75ffa29f76cfd24f1e5c96822a07e58c3f80cfe3fcef4bea6f5b1b3", "ref_doc_id": "a8c83603847d3d10d8e91d3a7e169c72da97691c"}, "030997dc-ecb9-473e-9145-f19a479bfcff": {"doc_hash": "488e2ca4f4e74b57026da9eb7ff4958cf85ff2fd4211ef06cd5793854eb826e1", "ref_doc_id": "a8c83603847d3d10d8e91d3a7e169c72da97691c"}, "6e35f0a6-8c50-448a-80b7-ceddf14029fc": {"doc_hash": "0b35f7089a37bd603342bb9337ba194eac05e111ac6fe8ddf496a4c900607b8a", "ref_doc_id": "1a06333957e3af39916b4e955b257c8aa0da3412"}, "43b67a0c-0d76-45ac-8aa7-8196ffca7ae8": {"doc_hash": "d15d72b94f98921167781743fa29e5f6579028ea5f79caf24015e38fa4a54c1d", "ref_doc_id": "1a06333957e3af39916b4e955b257c8aa0da3412"}, "eecb216e-695f-413f-bdec-5d013f3b942b": {"doc_hash": "ed448484aaa62052fee29ff31e18501807df827a29fdaacab2b057a1e370c3e9", "ref_doc_id": "33fd8fef9283f6039ecba3060a37c8cd0f0bb78c"}, "2738dac1-7676-4a11-a0a2-32f029be74eb": {"doc_hash": "0af701a5c1e0147a4a9fb17ebb1fb8a369ba8cf872d793f87baef105a520eda6", "ref_doc_id": "33fd8fef9283f6039ecba3060a37c8cd0f0bb78c"}, "6efae4e0-798e-4ec1-8cf2-85587554fbef": {"doc_hash": "398ed967e7cbdf34672f65735bf73f9bef0b17811e4ae5b6536177e07785bd32", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "4f5b0ee4-d525-449f-894b-b76ae682e2f6": {"doc_hash": "1d2e49ec18b79208c28a406694feaae61b7b926f9cd4047031d7c397761ba5a2", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "6e1b845c-ff49-4c32-8635-e8daba522ef3": {"doc_hash": "989f30d671f6001c4430f61e2ee278b4bbcda7cb469474c246fd6c53cfc4e686", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "7b1e32aa-f53f-4030-8292-05b14601eb0d": {"doc_hash": "185c594fdf0fb8992c2f6503937965fdd2da7247953445bcc9740cff148a8f1a", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "6079904c-ac40-447f-8525-91b8912ae76d": {"doc_hash": "cefa3c6f7cb4ba7cfe351f834789cf4a8b007db6ed0a9483e74fd90f37c322d9", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "261f200c-29af-46af-9404-da804ad2f3aa": {"doc_hash": "06cb26f2b355ebbd14c2b5144ea5670416d95a4d4ee8afa16247221555819a3c", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "941bfcc0-665a-41bf-8991-55099c802258": {"doc_hash": "fdc8163766a2d0ec347d11fbd90fdebdf139df2f43ebae34723980ac240c43e8", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "b1c3cd92-ce9a-43a8-8045-c85f401fe590": {"doc_hash": "5f28fbb86f99ec84459e1653459c4e8ca0a1e6acfa5cd691e4392341f1b70cf9", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "4d05fa5f-7948-44ac-8587-dc047f15fed5": {"doc_hash": "8dafc0b467a8243168b99b2dd49ca787e4350d3e038eedff8a71ca29226af908", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "54e6042b-fe42-44e9-a4e3-3243ce2a2b01": {"doc_hash": "9a3db9d4dcf42c8b814715428ff57f444f4b4b0dd9f312ee0014815d827f0099", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "3caec479-c8e5-42b4-985f-07269566b001": {"doc_hash": "3432ce4f2eaec5afb06341d6842e0dda0c0dc7631f885e10b484c04f86fd30f4", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "e0bd85aa-9cc7-401d-b7cf-844e393f281c": {"doc_hash": "a68c993a206e862193a88b6e4e95536484e4f7862f04cf906ef10c11e34cb5b8", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "addcf7ee-366b-4c00-bb1f-ec9a99e06158": {"doc_hash": "edbcf03a893aa97f86d42382f95959d1cf3af4a48b3158b24971dcc5ab54315c", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "bbf7a51b-982e-46ca-91e2-ba1e339b9bb1": {"doc_hash": "43b070bc7188d0b7013fbdec7c1a867d030f72fcb109f5a6a87d7cdec91f8f25", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "943269c2-e5f1-4c5b-bfd7-29f33c8d46ce": {"doc_hash": "c0ca572ddb837a83202b5c590772018cb524a1e568c58b0ea844acdc706c4924", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "244bd799-59c8-4720-b85c-5fab07a171ae": {"doc_hash": "b395ef8ed27ec5d0c3a795494ce7158a5d77a531ce91984b5ceffe6eec538a66", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "edad010d-873a-4f20-a175-1f0c2e9d2766": {"doc_hash": "2ac657acebe906e5ce1ac0c180c493cbdd06ab37f7ce6c4db1932aceadd852f8", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "77e2d87b-5406-461d-b625-62c4d9505a2a": {"doc_hash": "bc3cb702c16d36be7d720f327d371688bb9c5d9ce0f0254317249feafb8ff298", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "ea0f654c-4c4a-4a35-9307-3185f1fe64b3": {"doc_hash": "4b7a2ee10bacf62b3c78d0b7e8b6826bc4500b600ede11cf2bf46b504f88aa68", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "fbd396fd-7841-43dd-aee6-7493abc80418": {"doc_hash": "06b2024befbca765b59524f5942d8c60d61e301bb4f0cd02485d14c8fb2897ae", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "062e830b-866c-459c-a866-2c9a212e2a71": {"doc_hash": "60bc3d89eeae7395247941459360f16aec11c6f62afe37e88413c6f66c25fa8f", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "adea64fc-c224-4d02-ad35-c07551b1b4a2": {"doc_hash": "7fc8ea61da873bf317b779e34b1161806c03e811bd4e375ffaeff8547abbcdd3", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "df0ef819-5d3c-4228-bf3d-d7eb46c0f465": {"doc_hash": "416c39fed4efe68b233b3c170dee07321722adb04158f0f5efffd8b9eabee381", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "1a5c1a6b-d601-4e71-b8f0-994c9a4bfd3e": {"doc_hash": "238a1880ca9ee7f4e47986bc451ccebd35cb21fffed2db87493e555972607657", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "036fe86b-258a-49c1-b1ac-5b5c3ba2ba16": {"doc_hash": "647bc2e6d3fc495c2a9089f297dd1651d90282938cc9fe5c002e7ce6d8c9ddf2", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "64fb1759-c317-47a0-8028-0ef01c553e77": {"doc_hash": "03bf5e3e1668c4b8f8fa7ff5e348cd3f39921ce4862705c6705d481698844f66", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "5987a3d4-ec18-49cc-9f95-59d495c5de64": {"doc_hash": "0a2dab0279dcff1f4677cb6348642a688f90ae099d47823384db0f8ac11fc216", "ref_doc_id": "efa680fd18a152c20af376666071ba484cb87d75"}, "be3a27cf-d400-43d8-b3c8-2677ff716f3a": {"doc_hash": "4ff3771a5cac27280db349ed711e8c4d4a73e74bad1c853b10ab5d6d6f47fb37", "ref_doc_id": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6"}, "25ce4341-f9fb-44ce-8995-018a66f1c502": {"doc_hash": "5474f36fceb0e7194344e32962412e190e391342dbdcce3af50b1fa7d937b62f", "ref_doc_id": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6"}, "79085973-df4d-427d-9911-c551b7bb9657": {"doc_hash": "a8a7656da6fc08defa2e46e53cb6430ea8035031e87ae5b11cacccd29869045e", "ref_doc_id": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6"}, "221af4ed-2a70-42df-a51a-2c45b1ab4b1f": {"doc_hash": "0b8c0a70436f440a3039c76699c3e8303ed4f19afb00d3bd5f707df7b427f7b8", "ref_doc_id": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6"}, "427ef00e-1f35-4bff-8b6d-bb2ee4d66792": {"doc_hash": "10bf0662b641f26dd9f2c53c9d6be89dc5cf056ee0b7cd2aa29533c90ed5681e", "ref_doc_id": "f8a2bda5a57d11b5128b0df687492a2c1b93d051"}, "5ffd12c2-701c-4596-bd30-8a9430187a6f": {"doc_hash": "f803edb1e5157a3a23b665a1e912e44e2902bf28d3382b450ad8b8bed5a54a71", "ref_doc_id": "f8a2bda5a57d11b5128b0df687492a2c1b93d051"}, "c216103f-87f1-41a5-94fa-4695a01f468b": {"doc_hash": "d8a84298d6ad7cd115e589b0a4c69bc286955e51c2da808a645ba5b0082db635", "ref_doc_id": "43924154f68e189724acdd3a354bf12b0c0449b3"}, "10fa8027-7237-4a63-8796-d04ade4d9e56": {"doc_hash": "5eef7ad37ef3df5ca6c88025cd000148446ceb6e5c53ac1d8182d2cbc553f5ba", "ref_doc_id": "2cc37aded389f249743904d810d32c3b6deb7e5e"}, "a2257ee4-aa08-4ac4-8113-dba0987a5b95": {"doc_hash": "66e507a363f5264a0a486eab8b3a8403f5abd313dbf2a2850f7eadc88feb57c2", "ref_doc_id": "eb044475b66808a60f7c8c6cf2c5c68b69198c11"}, "91c3c885-e725-4097-9673-6417ed76bcd5": {"doc_hash": "0b0d57ea9b05b7749434dd7cff8809d4424a8a596878d025096b454a74fda247", "ref_doc_id": "797c7d2d1d65a5a58d593a0c413a6ce2aae491e1"}, "91fb1f8d-da26-4b06-b32a-5866898ea56b": {"doc_hash": "20cf726774f0c1099a4381e8afa2edf74a13b62e7b783c478da45d5dcaa18e97", "ref_doc_id": "11eac09eb22a2547e33c8d02b9d3d36351543b59"}, "efaab331-d7e0-4ec9-9aeb-b0ca2347cb86": {"doc_hash": "c69158e1c531951aa97b631d765403397eba02c28fbf7c28a84398a0e53eb223", "ref_doc_id": "11eac09eb22a2547e33c8d02b9d3d36351543b59"}, "666ff33d-fe65-4159-8bd6-d8b5aa156f88": {"doc_hash": "f078b8ef54c0017f266c1198fe17b41f7836269c9ec991eecddaa592f18e007b", "ref_doc_id": "d1ef957bc11e290dac3716fe4e964b7bda17bafd"}, "4060dc18-520b-4e00-a1d8-3506d24ddc3e": {"doc_hash": "70d5a71d431dce6936f54f15a8a3814c17553194149dff249374bbd72d32ecc3", "ref_doc_id": "889b9619c77162b8492f18fbd3bde9bc7002c9a3"}, "02206d20-db4a-4f16-802c-0314cf04e817": {"doc_hash": "ffd9404b404a3dbee6525cb391f81743a18d493116263ec3bc21e74ecf41258f", "ref_doc_id": "9ffa64d23dbbcfc718c2e076ea4841d265ca072c"}, "de4ce390-ad8f-404e-8343-5b6f6be9f5a2": {"doc_hash": "a05230aee2e9ee5f83179f529db8d1daa27b5d2dd9ca5f54f70366557dfba796", "ref_doc_id": "16b9c5c0493f8bfe727e4e139343a6a4a7aa8da2"}, "f306dd82-585f-46cb-aed8-72f5fbaa9fb8": {"doc_hash": "9d952c04722d417329d3759d9ac3aa594a9bdf67c25009b5ca64d075e7599997", "ref_doc_id": "46a4ba4c245feecd6aa2ad2a02f14b35aa203ce7"}, "77d77d2d-6637-4beb-a4c6-b0db26fedc66": {"doc_hash": "3237cb58d194af89390f7f51e86aeabb16f208229abd019549018b206a4fb3bb", "ref_doc_id": "750b85fd97a0685bc3c20ecc254941239e7bbabe"}, "0793f403-f6c3-43d3-8a2b-015377a8fb47": {"doc_hash": "20f6c21889e8dcc6f9b18c0015baecd11fea3bd99735600b77ee2bebbacfcb12", "ref_doc_id": "750b85fd97a0685bc3c20ecc254941239e7bbabe"}, "767602ac-a341-4692-9e46-becd5d9d8855": {"doc_hash": "73189de50e9a4238eedb5590c876655f6ee44e438319cdce731a4eb098a31a33", "ref_doc_id": "750b85fd97a0685bc3c20ecc254941239e7bbabe"}, "2d18d82b-d42e-46c2-b5ac-4feb800a7244": {"doc_hash": "42e1fd0f61cf89c336c3b20ae51e6767b093b1acf3e9c65ed31fc99e7c24c472", "ref_doc_id": "42423117fffa4424452f942f8c1ae359fa66b585"}, "a1c7a293-dff1-45e3-a7e4-28a99c282800": {"doc_hash": "471067d260b58592a4d08cfb2fdc3cc7c093a51e2561783e5cd4ebf8f157547c", "ref_doc_id": "07dabe8745e40a791294aae16fe02e8a326e90ac"}, "a928ffe0-3e66-4008-9d15-02e1ba13f2e5": {"doc_hash": "33eecfa5a0f05f06ea1e7f973a954b8edde698d322e783d19848f26b4b63aa3c", "ref_doc_id": "1038dbd099dc82010c7137a160e6ac18060a48d4"}, "6cf79918-2e6a-4381-8cbe-2b7adb0bce36": {"doc_hash": "ebfa77faa84e620db37741fe5d64944123fd528fe73552ec16ba3ba2e9ca3092", "ref_doc_id": "4cd0931c2ded02ae30ac96be7562e43523167826"}, "85f34045-2191-492d-b849-85c5b96e8adb": {"doc_hash": "5e473a11e5b5362572282bc873731facbe292f49e3facb56096f66a3af5514e4", "ref_doc_id": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60"}, "5f1206f1-c8c2-4b99-88f7-1790d5de3b50": {"doc_hash": "7e80bcf07b8e94d1d40fc0219596040ac3da65f2a68463b3c6ce0b5f056d77df", "ref_doc_id": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60"}, "ed6e52a8-80db-4f56-9dda-7283ba8b143a": {"doc_hash": "a77a0bbb8965880e81525bf3ddea9d35c105a21e7f16a8a82150214828318827", "ref_doc_id": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60"}, "f1c15372-95ec-4343-b1ca-72b01d045b53": {"doc_hash": "4c80cf6a990d2ea7a0fb77ce0e7e351bbf7a76c8f8af29c939580d86878c49f8", "ref_doc_id": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60"}, "b201d89e-c80b-42dc-8799-4623bbaae95e": {"doc_hash": "bb6bd310ead3a39f5f9810278640b4f19e038f8b77aa65129d0122346ea5409f", "ref_doc_id": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60"}, "ba0cb4c3-f875-42c5-84ef-732a232ce0be": {"doc_hash": "07858c317292d6db431c96a35809cb9c270625ded35eab7b6ef06bbf8d3cb6bd", "ref_doc_id": "f02f959a7b56582f83e37d09f74ad8ddbe001b1f"}, "d9f03a72-d0fc-489e-9f40-b7f41d13473e": {"doc_hash": "a9671b9f4e6a7a823f4c772c806c02a16dde298d4f54a7c43b54219c077ed402", "ref_doc_id": "03aa45d702a3216e47305791ed69e661667f4654"}, "17236dee-c74c-4d22-bcc6-5ce8ef5b480b": {"doc_hash": "14b32807ab6201de79b655dedbd194082ab678248d7bc5318fb789e8c8c926b3", "ref_doc_id": "df13a00bd30c2471a31a32e8f7039d3b4a381f49"}, "152768d7-52e0-4040-8232-8b2d7c637fe8": {"doc_hash": "645b2627279a0b1854694bebb67d39db4fc949b07cae6531ea8459e1c992fb4c", "ref_doc_id": "7fdc2d78b7087b57a0b5d18019bede1a4e777967"}, "38856902-9c3b-40ce-8f47-7d1bf85f7a74": {"doc_hash": "67f8532dfd5e24bd0a8c3384705d1562514618e46bf4924b85f309c9ca59c9db", "ref_doc_id": "7fdc2d78b7087b57a0b5d18019bede1a4e777967"}, "2b11150e-c93b-446e-a865-f3500f6c9aaf": {"doc_hash": "4eb144a6ad650715d1ab53eadfd0dd368b26490c58ac87fb410af1d9c2d595c6", "ref_doc_id": "7fdc2d78b7087b57a0b5d18019bede1a4e777967"}, "8590754f-b587-4152-ad91-b38baaa2d046": {"doc_hash": "ba297ee71dfe527fae5c0680fbb29b8a6e12b462d1ea79b8ffb76665ca6b0a35", "ref_doc_id": "7fdc2d78b7087b57a0b5d18019bede1a4e777967"}, "8149251d-1643-4124-86fe-d42e175d3bdb": {"doc_hash": "dac9071dae8fcd182e92336c38de8f3eb834913bc6f3f47b95576469a8304390", "ref_doc_id": "bb98ba9ed71e532bb75bb8be7d414a315c6bef8b"}, "55f2d4cc-1054-4b98-a550-00d2a4655138": {"doc_hash": "ea2691ae562a83760677c6cbdf220ca0a75a65f10a6365cac2b8d443ee6613af", "ref_doc_id": "bb98ba9ed71e532bb75bb8be7d414a315c6bef8b"}, "80f2b708-f38b-4570-8299-5b8f2732787b": {"doc_hash": "701b4a56a030394be9625e1c1642df50b87a1f79fab7576acf51ff3c7ea7c7b8", "ref_doc_id": "67437ae8ce1c96f552d4fb00035c2bfe8968b3d2"}, "4393e996-a537-48bc-8ae7-bb0d4a17bf85": {"doc_hash": "5fe60292162ab072bf3acfe23518f4efaaa3543354a3a34bb84690f2402fdbb9", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "a79fc686-f90f-4bb7-9658-700dde389191": {"doc_hash": "6b8a4309c55c48308e16a91b381a2365079ea9908a19f9bfb85e3ff69c666490", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "acca3584-1d58-4b29-86fe-7ff64b7e46a0": {"doc_hash": "dec607543bcc507a48630ebc64fe48a2778483d0efd0343a45f9da88b5053204", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "bb58f53e-be0e-4f07-a845-d6009310358e": {"doc_hash": "02649ce639b3979718bb514689b92b815f356e742feb03b7a0cb98607e61681c", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "4c3e8af3-d1f3-4e11-a23b-5d302443df92": {"doc_hash": "26ca87322edb32b14dbd3b2e7a17083222a953e591bcc02ffa8b07d2c4ae0918", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "72a573b5-d6e1-4948-a82f-9ea3b232f46f": {"doc_hash": "c444a3172113360770a820e1d46e247f75727087bfef1398254d16ca271d61b8", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "3d65908e-e738-4cdb-996d-4b02fff73330": {"doc_hash": "63977903125b28ad48994f99ec506b542b216afb93a537fe4bfe3707130a1b84", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "4d50e189-f9e8-4eef-92cb-6ead069f911c": {"doc_hash": "61afc40e0dbd5de04978e5f4a3b92f29a7542649bc9f0eb59a61f1f1df2a0924", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "5a243d12-1f6d-4685-89b7-cb4ded884189": {"doc_hash": "80b3371b1a20c7ff75c3b7403d410ca9be33b6739151aab1629a8c95103566f9", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "b960ce20-a39a-4497-ac28-ec7d2c01eae6": {"doc_hash": "87ecddd6094f60f943cb7c023e421b9a32b6de19752834c5da369d8a01eaa193", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "3ff43444-a1de-4c51-872c-06a33670201f": {"doc_hash": "4cc8dec04d0f833f135e8cd8b4aabca1718aeec7875c09f3ebdbda0f9d7a9947", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "2be731a1-14f6-40cf-925a-0687fe2e5f1e": {"doc_hash": "41782b59a781d9d9ac6c6c4adcefddf713ea93b3272291a47cdeccaccd11e0f5", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "0699cfe7-8d39-49d1-b7f1-661896d251db": {"doc_hash": "6b3154ff56660b83e21969425edc32e755dc335656f9a21c084083d342c09e98", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "83d0f0f9-6db1-4dc5-b32e-20686268ae49": {"doc_hash": "b3078ad0e2b5355100576369ecfe0e1c02925c0b17da9749a490553b9496c5e4", "ref_doc_id": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a"}, "4146a496-cc9f-47f1-8f34-3ee12d75600c": {"doc_hash": "ec43d8bd3a305032dd58f70e0776e1532f7833c6414554b82b673bf3a095014f", "ref_doc_id": "97fc7460589f71bf1ddb99579e33e1ca596768e7"}, "cd29fe07-8767-498e-9ca5-6a0fb14142d6": {"doc_hash": "8067697c1e5380a32f9e7cf1f30f801f5a6d26121a2ae17fdcb708f76c1bc15e", "ref_doc_id": "266fe126e4b859bb1bf752a139d87f7f561478cf"}, "159fe277-1fea-4b7d-b4a0-a2b6dd4ba16f": {"doc_hash": "0224f9388d4bf9feaed9db653bb01c9b34aac278a84b26ee3f7ff1a0c2865565", "ref_doc_id": "35c92f551f6f4eaf77d14a1387e004951f1c1392"}, "01e7a291-ff4b-4c37-952e-e678408ee25f": {"doc_hash": "5d13017a0efd379c191800a3052d082644227b572bb1da322566d5aa87e8cc68", "ref_doc_id": "35c92f551f6f4eaf77d14a1387e004951f1c1392"}, "a5409723-226f-45e6-a2fa-aeca4a69efec": {"doc_hash": "a91760afc89aba05d9a32fd7aea674debaa50c55b1f78ae19ca9887bf7ca183e", "ref_doc_id": "7330f6f7926be311fa994213f7dbe90364f9aa67"}, "22f109b7-3d3d-48c9-9c6b-a8a5cd914e96": {"doc_hash": "a27c987cbfe1536ef60f53aabe5713fc67bd26b9e445417e22ac6a0fa71603b2", "ref_doc_id": "7330f6f7926be311fa994213f7dbe90364f9aa67"}, "b3e46934-f0ea-40c1-abfa-093a26f697e9": {"doc_hash": "9b2963269eb0d86018a238b22c513b16691c583af41bad0dc4620c81c188f992", "ref_doc_id": "fff224d98b23673eedebb4f1a8e2df61896e97d1"}, "d17e9882-b75a-46e5-9db4-83e173d675f8": {"doc_hash": "b7f9d91ff6c57019e898f8f33b6f58549004dc5a31e3fe0a082e528f95c80928", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "a606f230-2ffe-4143-b649-4f12f4b3d859": {"doc_hash": "2fef1644e4ecab43ea3c5898bbacd4ab8e23ce1212ef04c655598003e1f4c3b2", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "87cafe46-f1d8-4ddf-86d1-4323e5ec9be4": {"doc_hash": "43d3293570b290e826d2eec52783b1c6d7b3f5387bdd7da5c7aebf6fec6ae1fe", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "045a194f-f6bd-4ddc-b668-b21b3968b4a7": {"doc_hash": "7c0f08539e7701cb767b1154228f84f858c0a406cd7b232254b36f7243e5cb8c", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "95891c03-6d16-4d3d-8ef4-e83397fffd5f": {"doc_hash": "75c65855202541017b6a26eee4a879d32eeff89b54bd4a9845b5cef69fc8a94f", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "16ee6768-2643-4d06-a9b3-88761721d629": {"doc_hash": "225e66c7a4511af3b07452b197ec14098a9fb57e1c7b4a31879a6af356f6ff80", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "d420b00f-58ba-4faa-ab07-164c2e8f8577": {"doc_hash": "9aacbd8dc8aaf65b13fd924448a988940830bc11fa1a462b1f0728c9d8f8404b", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "2ef87355-599c-406e-9481-6de1747ffead": {"doc_hash": "3ba80bb4628ea1f86e034115ed998ab52f119d78b07db5e2ba3fbfc4cee87982", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "8c44cbd9-fee9-4cab-beda-cb9520635bba": {"doc_hash": "d7b398b3541a70fb78e268a783f95adeae794504adbe0987285bfc7a82c11e0d", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "c2a3ea98-7cbf-4ad1-959a-06864eb76073": {"doc_hash": "6831391fa4e1ed9f354a44a0602bb5604f6894f1b31326394a3cb536fa34e9a3", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "bb3eeef8-7446-4c3c-9591-39e4b51f3e1f": {"doc_hash": "fccb0f436bc4c4c87ba1870dac3e0bdd44defd28429c6d158644c1b844810097", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "a7a8b652-7762-4129-ad82-c77150b5cc55": {"doc_hash": "af04e87ceeaa7d651021e577614a424aa5fa2822eff713b2fdfcf1fb5dbd40a0", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "10ed4bd5-4d61-47c2-ab93-56c400d5f8de": {"doc_hash": "5aaca0872946e595d0d018c7889c693e8c4643347cbec51ebd3f97a476888983", "ref_doc_id": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff"}, "29d15c67-2e2b-4f79-9056-1a1ab8fd1d91": {"doc_hash": "6bfb52f2e7d313e123dfff8a765d61a0963a6039195a772978093273706dc629", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "a4bd608a-9594-4a13-b34b-0c1f68911341": {"doc_hash": "a905ec4f4ff1d90014bf116b172d8237ff9abb4292b5dda56fd508adc50f05b2", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "45110e81-f434-47f0-8332-93bce319f229": {"doc_hash": "3c2a2323fc1cbdcc05a9fe450a393b52f4577fd1da1b7d03551bc7fb4bd95c5c", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "b6a8d84a-340f-4a3a-be5b-b8dcd2ff784a": {"doc_hash": "f9ca1b7d96e2a24822ad736537dab9a6e41daaceb55f345464a519515b7c6911", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "2b638439-6ef4-43bd-baf9-4b9fa377c290": {"doc_hash": "f32e4d256611dc00bf2572ec95ae415936b25374686369aede21b7d6e664b315", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "3c12d068-c269-4f55-8111-74fe50a4d334": {"doc_hash": "e87e718d5099ffb62498e33ce96bffe30edb1b878467d13de0b7b9095e0d48e4", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "c442b12f-a8ce-4edc-a9a5-ef7f65492baa": {"doc_hash": "1e4c37738b3ab17ebf41eeae83fabd202808f89bb7fcc3f8931241c6e31c9121", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "0687a625-8cb9-4c13-8b20-6a1be2dc396e": {"doc_hash": "2d6ecbc68228506bf1a87a84a9fdb82f645c9ff42dc4b8f618e3ec39b5f87ce6", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "6f5cba5e-9e9e-400c-9ec2-e5ba076cf4ac": {"doc_hash": "ef53ea5e9bd6d2beddf6fcabfcbfdd85d638e5acf32d6a04f622b5c3a2b49668", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "bd6b3dc8-928a-44de-b663-be4f7a2a3f77": {"doc_hash": "fe767aea02f064eefb3cddc777044289c00a61dcedbd4c8bda062bbe426cb0b3", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "32fc5cf8-dee1-4dd4-a0ed-365498b84361": {"doc_hash": "a597a439e37726e756d848a42efad69af1b026692c63277c75290e2a45639cc2", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "199a6612-03df-4d21-ba85-2ee1f9d927b9": {"doc_hash": "9bd203e77f561e2a472cf5f07d2acbf5d8cde74c04bc76288bd2adc7818c25e0", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "2994cc03-b96d-41f6-9f2a-fb579b5bbc32": {"doc_hash": "879962b820e3037b84a88ecf1e3d28f5428056cd58372e7943c4f756f0dc0824", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "7e155318-daa8-468d-b8a3-e104c2d8c350": {"doc_hash": "fc2376a192dc7b835e254111e64ec07721deeebfed60ed3e2f99f55c9b23f7a5", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "cee9c266-6899-4345-b818-d84e4f32a716": {"doc_hash": "01d630ff76ae24126f4feac6b9659987c870c8c98482afa351f2a67445a9b119", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "a5e21047-a40f-4547-b8c5-448f9f5e7cb7": {"doc_hash": "aa820b3e832181e6bd551278cfa28600a484fbad24acca5a8b54084259fac3ab", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "5afb6fb0-87ab-4209-b6a2-8d02f6bcb1c5": {"doc_hash": "b37e8e071683d187ce67f0390f9125214d4d94a2a7e34179e539064d7a0bcee1", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "4475ccfb-e9a4-4987-9c47-7961c896379c": {"doc_hash": "27f25ae2396273d019a8f720ca2c413f76f35968d2f007c9ae58121e7c1102cb", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "f0151e78-cba1-4bed-9522-a751b8e22919": {"doc_hash": "fed7944736e941262b7f203f633824e106fde5d8b0b756e5afba3870e9708bfe", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "c7563bfd-c41d-4cf4-a4d4-13657cbffba3": {"doc_hash": "275a367a44ad631d9793da50441f8bdc0aafaadb86b06abab86b5cd63d5f2a77", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "169d38f8-7574-4918-881c-9e9a70b117ee": {"doc_hash": "94d972a2f737b8bc1e477d95883a6357246fd147c924482183957f3368b18078", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "03164d30-f69c-42bc-a142-0be141e86f67": {"doc_hash": "40380a7e236e1b389ae5405fd10d35ff933f39ddbbe41539bdbda723e1bec394", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "df2119d7-4c81-4368-b804-307b264a0d3f": {"doc_hash": "34f4989eba0428cda48fbe9cb66228b13ae8b5641fda760f0e6bdfc60a996c92", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "09aa24ff-b96a-4b0e-ba6f-2fd3328b6b90": {"doc_hash": "63ce601d8f19c7596de1cc943ed1846b90152af07350dbaadb0fb1c0eb2c0ca1", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "c989885d-1ab9-4405-be4f-15dd546f7f97": {"doc_hash": "ab451dea8087fc72ab3749563dadf9fc1e3915893ce710ec1a7873411678e511", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "a8e39ba5-de39-4822-8bd0-12a75208b685": {"doc_hash": "bb2e8aa5b54b58e69d0914a0c521f39d0ecb42df9c8bb1382b12dad30b000325", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "4e09adab-8394-433a-bc5c-cddea62f441f": {"doc_hash": "4189b2fb5c53b94082ca10e8930a9db0c3e58eb8d238845b0ad7f88c1cc0989b", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "39e0a9c0-9bc5-45cb-96e7-83b613c36e03": {"doc_hash": "b4c59365d7ecd9e2fe1836d4e988fb06b921975e654db460b2f8918ce6c397ee", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "afba4ac7-c1d6-49f5-a8cc-830d15bf2eaa": {"doc_hash": "8e6c0cf6f9dfc3864f98d288ee2943d6c8c1fdf21352e5d6ff67670783a2d02a", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "58d171d1-37b3-4994-b48b-c267b1b1615a": {"doc_hash": "deb9af099e83eb769667770ecdea858ba3f8f3e44bea4b562ecc8333cadb4cac", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "f4020f5f-61f1-44ed-8d0a-1427f9d8cc06": {"doc_hash": "3ef1ec66eb975dc993781d77af2cba2556a9c2b5ce44f1a8c2d2867ada63828f", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "dadf4026-ce43-4ec2-bd58-987afd5df530": {"doc_hash": "4988a3fb442c38b3ff60e7e9c8c5b7903bf518f153804b69163258a509fb7284", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "4f6ae139-1429-4750-ad00-4f6df2d847f9": {"doc_hash": "0c503e44bdc9508cc93fe6bcdf55f3125428f4831f98a1eb11b496599f6800f3", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "a1d4753c-295a-45c9-8cf3-e46267c4024f": {"doc_hash": "c116e19570dd171c1b287069989ce2b04d8580f41e5abd63826962587bc8c51b", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "949c3d60-1a3c-4460-a19c-9a9ed46ee0e7": {"doc_hash": "018559c8face35a0ae537f90d5af3183f93baeeb56eeba3677bc73fd7bd639b6", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "c4c91077-2ba2-4b61-8e4c-a64c3488fc38": {"doc_hash": "a62e59c4567fb16b8b86d7aedbd5cd03d758deae318aab90725e9cf7f3f9a567", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "66ccc964-1328-4c6d-aadb-fd1fb703b4a7": {"doc_hash": "55bc0f35dc5e813f6f2c0b9fba3a267adac333e22020da1d1a298b58959a11fe", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "28054d84-28eb-43bb-bdd0-033762310173": {"doc_hash": "b6da168515c7d4e7d4aaaa79f3947dcd57c6106fe78bd307ad6a45ce17fb4f1f", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "1e152da7-61a9-4f62-9ef0-38a51bfe6187": {"doc_hash": "f488d82949800469bbeb7ec0f5a2ae0d5839ac4abf59cd3db837acb66cc0664d", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "9a3e4033-b9ab-46f1-b33c-420a35b82b0d": {"doc_hash": "faa05523d2f1f2c4f82f609ed02904c3ec3fa9356204b76bb2c0e8e6b352e119", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "3adbcd0f-585f-4468-a00b-28c1aac3ea8e": {"doc_hash": "6134eb80ddcc4bcef76a80e569f7c26d248f93a2635eb74a61f51738bac9ace4", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "09433335-abfc-482a-9967-a8a3b80ec947": {"doc_hash": "3ef17f39c1bc2e3d6d29a033362d8afcd024f60aa59ea980511cce4aa3a21ad4", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "1bc4c015-d6bc-40bf-858c-c7de018ab727": {"doc_hash": "7f242ea8555d90499ec6195638001efd922317835b8c248860515c5f559c231d", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "bd41f431-ec1c-46bd-b0be-6f973e0f7450": {"doc_hash": "3acaa254bc60e115b7bc13932fec43a757d63eec8d6858b19e0a7d13086fc878", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "fd08d9b2-74db-4b33-9a6e-2728796dba2a": {"doc_hash": "96b7026406307add4a70d395c3473f0345afb33a9d5cf070c367aa9d7e700f43", "ref_doc_id": "906c0d065612e59614ea7593639d979d529d674d"}, "661006df-f4e8-4419-96a7-75d617dbd256": {"doc_hash": "b5b5234e87cd39a783b1b5358e939191f084c879f4acb41a650fd921be806230", "ref_doc_id": "a17f1453b5146aaa52a3011cd1dcd243056d7293"}, "7bba6f49-4501-43be-94fd-374c2845f0bb": {"doc_hash": "95836f12dd21db1a32555b71d7ce9de54a0d63f38ca5a4feeb2c1cd411de2302", "ref_doc_id": "a17f1453b5146aaa52a3011cd1dcd243056d7293"}, "a7bbcf78-1d09-442e-8dbc-dd9f9b9d09b9": {"doc_hash": "c7b7100157d6a186b320d9ea84c70a85b3f99545b1d680d8f7b8d86221343004", "ref_doc_id": "e609316cf7edc9da8c32bb3f805b24d0da13870d"}, "09982871-ca94-4324-b88a-2170e75e1a6e": {"doc_hash": "c551a4c12e587a458b0a59404439b95463bcda6c261e4b1dfa083b30e3dba14e", "ref_doc_id": "cbf7d105f46520d943a3feffb2e7949c68f35604"}, "bd652133-adb7-4d2a-b0d2-f22a5166af8b": {"doc_hash": "1e271759b64614e7e69b3cd1587fd5f30f14d2af33aca82e7363f4f1011f630f", "ref_doc_id": "cbf7d105f46520d943a3feffb2e7949c68f35604"}, "37ef1c1d-32e2-4e9d-936a-7edd046f6b7a": {"doc_hash": "347e2d0b0f4d805a63fd03abb0f15d7d985d89022102b0cd2eba2ec27660cdf5", "ref_doc_id": "cbf7d105f46520d943a3feffb2e7949c68f35604"}, "da55803c-854f-4300-88fa-08a4d160c408": {"doc_hash": "a20c42d03835ed68f99db9ea2165db5affb8c9df4f3479a12582b747e9203ad3", "ref_doc_id": "cbf7d105f46520d943a3feffb2e7949c68f35604"}, "9ced92ca-7170-4e0f-beb9-76a5f40aeb79": {"doc_hash": "de2eff63a4d5a77a4a561b56d1a41182c155d211930b9be78d2bdba104133303", "ref_doc_id": "21b24bebedfaa6a9248b003c87d2371566a009d8"}, "801e9f66-027b-4b83-af29-4e14e0af3c0b": {"doc_hash": "04440769467d6d07aebcca4c1fa912d42fa1b8671be31b43cd2bede8f939728f", "ref_doc_id": "16e1dc49bd445b7b9522f5832bb480cff2083cb0"}, "472f813c-5a9f-42fe-a17e-bd218fa3a621": {"doc_hash": "878c7a5b6e5dd9f2f1c4dfa280a4a4efdb60ed93b9a926b351c523e91d98ed9e", "ref_doc_id": "16e1dc49bd445b7b9522f5832bb480cff2083cb0"}, "a20dc868-434e-491d-887f-198147fe9228": {"doc_hash": "fa809555664c2e2b06bd9af84cb3b29d1b3a84720f30644ff79a4da4df37fe65", "ref_doc_id": "194caadd1f3c83945174fb51d1e939937ef571ef"}, "36f18ee7-0150-439b-8a09-d0cd396e17e6": {"doc_hash": "c3683705f0ede42f46eca1b6d11dfb0d037e5d1137920602da8b49ee641f4e36", "ref_doc_id": "5df31676dc6cc02789c0d35d4460c870a53bac60"}, "9c3f2f13-352f-4e8f-8b53-af280f8534d7": {"doc_hash": "1e93e2ee0ece98685787bbc607de83eb81a5392949a8f5e451e2bd3720532ab4", "ref_doc_id": "9456abbb7f0a1a9ef72d5ad6ae2f9114d195428b"}, "ae0e8dba-6f73-4780-80af-8bfb9ddbbb7a": {"doc_hash": "6e1a49359ef05508f47e6f4320c889a8a2468f270274d80ccd0efc5f845a17e9", "ref_doc_id": "6a15e7acd980d7e2e41f9f55bef9b86ac6ec4bf6"}, "65c6415b-200c-495d-b718-6b96290af076": {"doc_hash": "7d5b07be8811cd33ffcfa962a02ffa83fa29a1693bc859a76130958722ac5a3d", "ref_doc_id": "6a15e7acd980d7e2e41f9f55bef9b86ac6ec4bf6"}, "3dae3807-46c1-4012-b8b7-9b7267147970": {"doc_hash": "cadfaa8739608ba929f5b2e1128525f9e4664907dfbede030e950f67d98120a1", "ref_doc_id": "f8fa5aac2898710a42c2ba1e4ad97647b86cc2e6"}, "f41d5b98-9ca1-42cc-8b44-cbdfc9659499": {"doc_hash": "d9b9d9f32c65928a75e76b1c7b9d973746cee6fba5cce1c2237322eb63fe09f5", "ref_doc_id": "d4b9bdcab0205700b3e13c7c5a89bf6d29c1db5f"}, "b0ae89c0-815c-47dd-ad57-2ab38604c927": {"doc_hash": "cebd2cbd2036bc5fc9a879bccffdad1d9b7eed809c7fd01447a9f70d4be673f6", "ref_doc_id": "d4b9bdcab0205700b3e13c7c5a89bf6d29c1db5f"}, "ae3b19f6-7a58-434b-a3fc-78dc6a44bcd5": {"doc_hash": "3f9203726794ea59a37d98391cc78fa87d929232d891d4c1ee91a476d9db2f21", "ref_doc_id": "78aea7bd04aada295519f293805a5f1a7cfb24cd"}, "a093793f-0d48-4489-9572-0847301a3b08": {"doc_hash": "6019ac545fb3dd2e7921c0105e72af7998aa15db630f67af07bbc2e1401373ff", "ref_doc_id": "be60035a8ad5502014d596b5fba991bcfed980af"}, "1541829b-231c-46bd-9703-6d58d6e23506": {"doc_hash": "ce9c744f81252e5f63f7c760392cfa547b9688130d4350e9a8696de1e7f4a622", "ref_doc_id": "90d3ee592d05a42ee198c5d7fcbe9e3f653a54cd"}, "27dc4594-2105-42c2-8259-45107168ff2e": {"doc_hash": "896ccc379380314eef5951af1b6197ef73a4f4853819f05e9d8fd1cb06481203", "ref_doc_id": "6944c54df0fd303de2b041838750d94022e4f40c"}, "6d84f374-9aab-4257-8897-6a2daabf14ed": {"doc_hash": "453567e4e6feb6c5fbcb6ede7a9469e8a7a6444dd3e246f618882d8e3bcbe4b2", "ref_doc_id": "abbd2301f4a4eff4c06c22d8b994ebfbad14ff97"}, "84b149b2-d65f-4d58-a5c3-be47bf2f93da": {"doc_hash": "541628636cc893cc7fbca5002118220be35758cc3878457e3e13a9af056f966d", "ref_doc_id": "06321c5ef917b14bc9765d17208dd30aad48e586"}, "44d828f8-6298-45a2-9cf6-8a0d44ae611e": {"doc_hash": "3ac6fbb67ceb9d7d471a7da77402cbbdf409297b713c58f601066646b5a80da7", "ref_doc_id": "5a11e067e37e01a6a576b7653454f77fa9c12e5a"}, "41930e30-6ee2-46a9-9113-4e32dec7cb57": {"doc_hash": "424b68821deddd7a9cf82890a77dbbf938e8faa68e29d3acf78e3200c23eed85", "ref_doc_id": "93bce555b33f8f008402435c992845a7611a8256"}, "711de97a-2f7b-43c0-857c-57b8399472d5": {"doc_hash": "1e9dea9868bc47ed83e7809fcc0400814bc97bc53b610673494c0709f5ab8703", "ref_doc_id": "d9b84c7ada9b04106a32672b652c50988ece4ca5"}, "9f308b47-e562-40f8-9ca9-2c7dbd160fe0": {"doc_hash": "3ac5ae4aafc4e33a89110d05f0861332f113bc790b4dceaa9c2d6384cfa5bee7", "ref_doc_id": "831bc07903233010bd619bdb78b75752acc09573"}, "9bde4e1a-e0af-4019-939e-e2a0aef1d0ea": {"doc_hash": "8ad4157b052831c8f16dd9f8eb894ffa3c4860b97c9e1af3e2f86a6d91394d1c", "ref_doc_id": "16ecbcebc29554b382940eecefec0070f7beaa61"}, "6a46278c-0cff-4075-85f9-b148c92f26ed": {"doc_hash": "333de2f9a354f160f9eee6f05db8524bb4b12866ed342e962d6cee9e46cca41c", "ref_doc_id": "16ecbcebc29554b382940eecefec0070f7beaa61"}, "8af78899-bebf-48fe-8306-83624571d540": {"doc_hash": "48c234acdb2d33ae37166333d08f3f4ced59ede3664e9f14f4920097d3160368", "ref_doc_id": "8c883cd9fcc36b07991a48668f124dda16851f79"}, "fd0539a3-92d6-4260-8d2d-33887c5010ee": {"doc_hash": "d2ea0f4989795e29cf0c477377d36388ea0b8e22fe5d3f3925027d42079909e6", "ref_doc_id": "8c883cd9fcc36b07991a48668f124dda16851f79"}, "7f5510b3-b75f-426c-bb02-30d74c4af62b": {"doc_hash": "492f627cfcd15e6440d15e406f40a75902d2277e01281516d21061884f5e3354", "ref_doc_id": "8c883cd9fcc36b07991a48668f124dda16851f79"}, "6fdfbfee-8020-4785-a551-4d3beb99c4dc": {"doc_hash": "4c89faae7f5b6a32a055b79df514b7343a8fac571a38af08b7aec68b26ff3d3f", "ref_doc_id": "8c883cd9fcc36b07991a48668f124dda16851f79"}, "3ae10c63-b14c-4e68-8015-c3c13fa55d10": {"doc_hash": "6b396b40dc06b2f6acfaa1b6ff2934093945f850d50533ee3e3c60ca1e0e3d9f", "ref_doc_id": "8c883cd9fcc36b07991a48668f124dda16851f79"}, "e0917b9c-095c-47ed-bd8d-1f3fb16c66ba": {"doc_hash": "2ee9121bc42ce324a346e018d04dec2f65057d20abaa821eca37d332b75c34c2", "ref_doc_id": "3859954c034d6ff7dbd977eb21ef30785a5f19d2"}, "9c88120a-6db3-4f2c-a287-118e00c827c2": {"doc_hash": "8e878aa2813b7740f7b26fb58dd6345b3a4cd1004baa37245b396891eb07d2a5", "ref_doc_id": "2583909a61e0f473062109d8ec1483f66a1ccb23"}, "541e283f-1af2-43aa-b8fa-9e273e6067ee": {"doc_hash": "67b71d93f532639d7cb2a57b6e4f106d762ec1215d566faabbe1c3b44d824674", "ref_doc_id": "f42afc23d2b36ebae86d5c3a14d81f0ef5d31456"}, "63468b7c-2ea8-4505-bc39-5d8e5c5c3124": {"doc_hash": "16b94950da577a228c96ffa74da6b89d7019c9fb63fd341a8671aa95fedb2418", "ref_doc_id": "97ee725e0debda757779756152d4a8a0c059dd47"}, "c3d18f3b-d422-47fe-8afb-df4a849549bb": {"doc_hash": "d395beeb4b6d216eae5fa94a4f79c0d5c2564c1e296c50f62ab2d1a7a1922747", "ref_doc_id": "142a42c84cbadfa2bcc5d18e8e6f12ccc55c4474"}, "2af075bf-eba3-40f2-82a0-0d0f10860b55": {"doc_hash": "69f911410beae670b4640b0cbef0f34f641dc6b31b2e75ba092e61c6b2bebd17", "ref_doc_id": "142a42c84cbadfa2bcc5d18e8e6f12ccc55c4474"}, "866e3e18-c25f-4243-a6cb-e098f7fd75f2": {"doc_hash": "6439482a83ba14716753fb6ae1d0ecb11243cf81b48e98b6351a6f324b0e7768", "ref_doc_id": "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec"}, "2db175be-5d4b-423f-8d6d-3069bfcfe712": {"doc_hash": "254c1130eace038b5f0ca37d4e3886235811be2883147b8c3b3aec6b879e3da8", "ref_doc_id": "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec"}, "a2f2cb5d-c547-4d74-b203-b02e8d58343e": {"doc_hash": "08b49ee312aad9ed3e9c666b2bdaf03dcef74192207e49efd16a42f22c20752d", "ref_doc_id": "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec"}, "f7fa2a45-5e64-45f8-8b4b-f21d215afe5d": {"doc_hash": "aab97f101507144e1be9ed58b0c5b6b97442103a05e2e21446c087bd007ad0be", "ref_doc_id": "7955bd5fa17ace73f409ae5d2dd29b84a9922b91"}, "19de1cce-767c-40ee-98f0-cdb9272784a0": {"doc_hash": "9557c6c320a6f0179dbcf081b2f9b024d204bb2cd8c9176e68d9caf070a1cb34", "ref_doc_id": "7955bd5fa17ace73f409ae5d2dd29b84a9922b91"}, "92e925ff-88a1-424c-ad92-49ae9a9bc841": {"doc_hash": "02702279cd4a5d803b4022753d792af495d729beba9c3d16646eadcb6f554903", "ref_doc_id": "f910768b57386ba115b090741c14d9d4d6113edc"}, "2cebea3c-d515-432a-b8e5-fc9173ab5bba": {"doc_hash": "ecc5dec3c250736b10e48f8371f1ce59b9d15795a49fd904a19e1645ac197e30", "ref_doc_id": "f910768b57386ba115b090741c14d9d4d6113edc"}, "35aac647-092f-4aad-a8e7-d83c498b0b82": {"doc_hash": "dce06b3b23072117f9d2fee4ca30c5a023b41882a453a0902386d4f4616c7c9d", "ref_doc_id": "f6a94c6c27ce3db44a57df262dad209133423d93"}, "6b1f0a47-4675-4840-a52a-f2b70e1dd5f4": {"doc_hash": "264eb2c9060eabcaa0151c7c6f3a8a74d01b7ae3c57a3df600caa4bed708a417", "ref_doc_id": "f6a94c6c27ce3db44a57df262dad209133423d93"}, "1f828d58-6b4d-4ba9-9fdc-12cea3fcd962": {"doc_hash": "b3c4554c28f7dcb315155e693944870d1a7f7c899e0c3ccf59c6ea09d07ffca1", "ref_doc_id": "e3fde9feec47db53890d8f468140c42ff14b7a0d"}, "02061a93-b6e3-4104-aea8-497c2f01bcba": {"doc_hash": "2ad809b6ccf129c730a0f51fb1123fcb4a57a1ee1162352a371b44ce2308174f", "ref_doc_id": "81d30f3dc5c02325f5665c80adc8717b3d817d19"}, "12a43cf9-9ad0-48b1-853f-404885d4addb": {"doc_hash": "758461017ac746147950d716cfc2e96a7e417ca9b7528c394f6a5e753b3d61aa", "ref_doc_id": "f71c0b8fe740205051c40c4c6a2a4576c49277d3"}, "14116718-c1f5-45ce-b544-c26c907baa3d": {"doc_hash": "699f5aa44e044a24a30e94444a84af6bdf1644167f35d80c6c4136e6b6b1e6fa", "ref_doc_id": "f71c0b8fe740205051c40c4c6a2a4576c49277d3"}, "0e240014-08d7-4f50-a5db-88f912b873b0": {"doc_hash": "52e6deae669c07b3c5bb2db6a5aca66ece5b09b028f7bcedd1c5680294800c94", "ref_doc_id": "a264d976268783a1bd1685c226188343b107e973"}, "378f4fce-8e0b-4b6c-ad81-87267cbe7962": {"doc_hash": "92fa9cf10fedac51ccfe1dacdb20bdfa1f74120837cdda09b3b6fff03722d85b", "ref_doc_id": "10e706d196aba6a27e863d2559c2eb93b4743fa2"}, "c68139a9-ce9b-43d7-a46b-65c5e1665e72": {"doc_hash": "d88d0f6b7a98b9e0d683e14c713de84853405f0893270368adee1e7888e6c94f", "ref_doc_id": "b11b8e8dab5971fc416380fe2fce1fb07011550f"}, "e93a0e63-143f-4716-aa12-b7d97e6e0eed": {"doc_hash": "d9f9246533e635c381cd3645caaf33b24f43c81c10202cd9f902b28e2ec63d72", "ref_doc_id": "b50ea8dfedac163bc0b144e72270592774d32792"}, "cc577d4b-9fde-48c0-9b20-bf1601ad001a": {"doc_hash": "bb7ae8ee58641160e633275b518467b4440f400c23c9ac293b3c4c4522a959fa", "ref_doc_id": "e6b00f1398420049f0ffbed6b1bc37921fb7430d"}, "e5d4b3e0-d1bb-4aa5-94a4-19f82175ea0b": {"doc_hash": "193de1969aa256e70a35588ea1d67541a56ff14b00a7e9e8098aa6d93ac6161c", "ref_doc_id": "32af8818a33725d19f1044d809a1259b00204688"}, "e15b2b54-5f6a-40f3-9979-ef86165612a4": {"doc_hash": "60c2b81d8278d35edf8eabcfa737ffcb90acf14ebe38302cd4d5d30a0585e79f", "ref_doc_id": "548554f4c74cc0abdeebd3a8ed5d68a3105582a0"}, "b6cf473a-7e0f-42ba-b0f9-09c6f7e48877": {"doc_hash": "fdffc50b168282491f52e39f32230656ba2cb4228d8bc9c899e3668d38d4d271", "ref_doc_id": "ac15883b9d74307c3c252704f2f52ca879cd9e9f"}, "546b3abe-f947-43f0-953c-780027cb4ed3": {"doc_hash": "1374ae6880c796b15e9449d552346fae45a395ce8442bfb286dcd3693d708da8", "ref_doc_id": "088f3e688a51e9b355c5161128258e0296446984"}, "35b75cc3-6e3f-4d38-a0b9-23a590601c10": {"doc_hash": "33c9dea9d6a565949231956ff240cbd58dae92690e577056f349a7c31b875850", "ref_doc_id": "dbca915c696c12959df834a43b1fab18a0502078"}, "0cfa69c4-10c6-466b-911d-1d931a523f92": {"doc_hash": "a9ab5426e51977c320ea7131b3e51180da306c0a6a7d7642dd693a083906d5f1", "ref_doc_id": "a351d02d11ae539555b4c40dfa309a71d5a97f52"}, "9f7c6e3e-46ab-476d-bc0c-4482172212d8": {"doc_hash": "4325f304743cbcd1ab10af37a4b400b1bdd01b26dce81d3d2c937d29ab9ed6b1", "ref_doc_id": "c5e2918f44d47ccd432cb23999c141533db92b33"}, "6948c30a-6721-49be-a667-86357c0c5d3c": {"doc_hash": "3a1eaecddb6434cc66a5c3766e74fc1a052b31092003d642d71b3f4328e7299f", "ref_doc_id": "a2c2801854569a413107edf217bc348344bc289e"}, "2b26a606-71c3-4ceb-ac88-ad49b6e808ee": {"doc_hash": "ad654b0fb3905e6581989848a4dbbf5749bb00e39dec2c30dde87076cbe02103", "ref_doc_id": "b5d5df8b9e2648dde1395ff061ea22d93482c9cf"}, "7450f239-ef7e-477e-b6aa-4d8907a898e0": {"doc_hash": "b2bbc24fdabdc31157277569636e38ff9b311143b34a4510590f47404b2ee14d", "ref_doc_id": "8d109e7435bd9c2af69580ec1e320a6f037a4da5"}, "734bb052-426c-4c08-a153-daa447455aa2": {"doc_hash": "85c62fac10848dd732b473abb7bfbbadeacad7f633d4e7514416b1a8eb9f46f8", "ref_doc_id": "dcb23df74bc695168344be2595f63d212cb0b219"}, "6ebf67da-5047-482a-bd9a-3f6317bb291a": {"doc_hash": "b037ed5833d1bf98bfc2290760195b92a6aed5236a0be11d7702a40e8d38d700", "ref_doc_id": "dfaabcafc3863cf7bd3be870fb8101ff56a019ad"}, "02c30c38-247e-4926-a887-1cca5a7d5b71": {"doc_hash": "e8f2510b4ea18fa3bed4f19fbacff5b12dc41311d48b395222cbbe0c4a067800", "ref_doc_id": "6719ffcbf4cccbeb6ca14ea0b60a46c1f43341d8"}, "41ea6e5f-0cc9-4c19-b255-c985b47001f4": {"doc_hash": "1c830f934c6fa9b7abe0b5407b1209c4f8729007d39e5feeff68130e48788077", "ref_doc_id": "6719ffcbf4cccbeb6ca14ea0b60a46c1f43341d8"}, "d23aa091-4d97-4299-acdc-97c59400efb9": {"doc_hash": "f7d4b521c49f2105777e98de77c7bdd0ee4787a13ce8a14478fa3364159797bc", "ref_doc_id": "c6e7ec7117c9c8f9dceddaee458ae87c9a1e96a4"}, "99331cf1-c5be-4e17-883b-344741dcf3ae": {"doc_hash": "09c558d955729dfff04a538639b8ce3c78cc5d48ae6267726ef9ac264d81b880", "ref_doc_id": "20c794285446ac86257df2cec9ec228c881271d1"}, "165adc68-a840-407a-99f3-0c7cac74093e": {"doc_hash": "b2d6be6e06912846ef8fa1924cf446e6e798ea0154ac21d8b2b225ffdfa3c4e1", "ref_doc_id": "5f657085496c41f12ead786603ff03022ae4e539"}, "41e3ec8e-6492-45f2-9fbc-818f11c034da": {"doc_hash": "84258cf0f88d9c10d07ff6866307b930272f84a90c1f8ce3b990cb927f119167", "ref_doc_id": "878c150d871605948a70fea7252d5dcc617b995b"}, "51921015-755f-4629-bfdc-75076c64b667": {"doc_hash": "9c7ede9d80ee468fa4490034d7186c877b448caf10bc3934ff6618f2f9137845", "ref_doc_id": "259b9d96b728a11e2ed46378767a965d7996546e"}, "d2b2a4a6-8961-4c39-91db-f707778284e8": {"doc_hash": "8f166a92e0ce73241c4f266492c140b041a62e813b1a7ebb2b955897706ec413", "ref_doc_id": "7e2a282ca52984f8355c70697360d6cc9ef7d162"}, "a36eaf4d-1d8e-46c7-8874-8f9f53a17725": {"doc_hash": "6a2183ec2139faf939a694282dac068e97a3e5fe7febd99bc17f8c37afe1196d", "ref_doc_id": "152172958d6f1e60e419248bb8eef3f60a587fd7"}, "bbee7429-4697-4b33-ad25-59942399cf89": {"doc_hash": "47eaf7de7d9681de9b53081bc96377579e4d90eb0c2bb279aa50cb1062243ea4", "ref_doc_id": "d7b70369ab03c79bc7fb0afcb4f6f403f82b526f"}, "8d5a9f76-ac47-4325-aa1b-c1a626e659d5": {"doc_hash": "24d19291c27bc25162b1025bada7fd199a15a0fde91494e48bfa3ba8541f6150", "ref_doc_id": "d30708ffe5c6eddca083f337eb3d05e58fc22039"}, "92ab7af3-2477-4762-a270-86097a165063": {"doc_hash": "65a24a860ccd4f09eef1f34ae7a7a630a511f0eea1fc09ddd8e631746e8b7687", "ref_doc_id": "f65930f8680be759f50756c2e2614a0bd39167ed"}, "28ed9f60-d461-40f9-ac1c-5717a8733456": {"doc_hash": "34bd3a9c65e009b5017e04e0da3e5645b6e8e397f39ca5fb8a3d45ba5ec5589c", "ref_doc_id": "9aaae281546a10622ee883113925672043518d26"}, "78934a34-7eb8-4a34-804b-599bb3a5c2b1": {"doc_hash": "770e794b508ea3f5fe9d58bffacbebb285da5cf0747a0894b28610c42abd8c87", "ref_doc_id": "def909cc3bed92e801a81bc4b047c799d9a9c6c8"}, "ab5507b2-93f6-4900-8b46-6a1aafe92e15": {"doc_hash": "e632686c1cf7f3dda796ecbd548698d652d539348b49ee5fe4c319d2efc58ca8", "ref_doc_id": "9bcb07591e2d7e6e3ab7dca25c7b7c75e498224b"}, "e7ce80e8-8430-423a-b114-8fedc24dce50": {"doc_hash": "6ec51993639bd953933aeac262f95c7ea45420acc46502f1cd7210cb12c38ecf", "ref_doc_id": "a4af6789c452809a211a355c8920394c85ca4eaa"}, "ec212a25-303a-4e27-93cc-7f76d6fb20e0": {"doc_hash": "dd4a202524c1b3378d36594d9df28ec57ea41893558ded3b60407176d7491996", "ref_doc_id": "825a8a53d1378bbfa22e30c7bb587a9a50f5ea25"}, "4ea83fb5-2b10-4590-a7b7-499f7891a1c7": {"doc_hash": "9f0c72c63141a00db64718e1a12dc53675365cf85179382391d0b9838880d73a", "ref_doc_id": "d97bfc8b556a70d16c0a619b9c2063901759c8b4"}, "ad0c30e5-1bc5-4586-879c-cb8a38a1eda1": {"doc_hash": "fa6e140af4dcc04fb3026200c27b4d35fe01e3dfd37596216fcde222d556e38e", "ref_doc_id": "3113619d53c0e32161cde99efe9fe68be5086c0d"}, "78be0ff3-7756-4b92-9ec8-3dd6b0b44c14": {"doc_hash": "ab6320644d54f1b4992d4430bd6dec1f4a6d800330db075a959579f47db657c7", "ref_doc_id": "ee93bed75d8cba43c85760a35cbe84d1be965ef6"}, "21153cf6-d18f-4e25-a71b-fda7696eeb5c": {"doc_hash": "e5bc05f38a160e3bc3e743682b2792ba56178d80557a9441ecbaef41fbadfe98", "ref_doc_id": "76436d5fa0957c3b19c068f6b378fa1640954978"}, "29556d97-6685-4638-81da-5096ce992850": {"doc_hash": "6e520b90f81d77699dea965be1449321554a98c6393d6855f08e2acc309b3484", "ref_doc_id": "03b195dfaaaa351daa5bd4072becc21940e3f20e"}, "2403af73-8164-4abb-8ae0-038a156e9f8d": {"doc_hash": "857b41e71455c06ac47bd220d8a99287e06b3a2e83b17e5e29b27172c2983afd", "ref_doc_id": "f68c71a87dd2476d59306fdeedbdbe3211463e98"}, "08dd3d90-2ace-404d-afbd-3b981ad30424": {"doc_hash": "6d1897ec218b6843798bb5150590a219398e344a8967c4e9adc87a982e6bf581", "ref_doc_id": "5c650e09670d711bf065f5d61ac95b1cf479abce"}, "7b2b257e-0d54-4ff7-94f3-9025e78e04e2": {"doc_hash": "ab20e92970f651eb4ac800542daa6a0d9f81bf4f41ebc1c2662aa61666b90377", "ref_doc_id": "1f783a97437abad3e1865c304bce968ce21a3a27"}, "3ce6ba6a-a4c3-4899-9fe7-ac5408f13d32": {"doc_hash": "95be915459ad6e55b351b4ac07be1f114d074cae53101a7873749b13f3574e10", "ref_doc_id": "bafdf81396e6800a1302af53887731bc995c2745"}, "e3cc6479-0b6e-4e64-aae1-e7b062f863ab": {"doc_hash": "2c927bb5076672465e88705e86374c7a89adbdf7ee21cf9d0815b964d8671ce8", "ref_doc_id": "77317c54cb7795d54d933e141fdd1f3a00f34763"}, "551389da-7e80-46ad-ae30-a1fd13586348": {"doc_hash": "9e96fa006e264bc2763d3301d98362f6703352ee69c1a8a86a9e976bb4fc2666", "ref_doc_id": "ee512c23d221cd182be5114fb7cba4fe4415dce5"}, "f77e2868-b5be-4943-940e-5be6f535960f": {"doc_hash": "70bf6ce1c37bc95d4eeada02a54f9b679f9df83518bc158fd27fa20ca8d9945a", "ref_doc_id": "21b41b17950c0361bbbee33884aa7e998f18e53e"}, "f14ef572-886d-4138-9d5f-0dc420d21d3d": {"doc_hash": "c826c2179dfe571f54ec5a99b120e986ebf0550c5fa4ee79086ceb1fe2cfccb4", "ref_doc_id": "2ad5480669ca972620ceaad932ac4607d72e6599"}, "47c78d89-ec7a-4148-adc5-3e12c4b044a8": {"doc_hash": "27ca76731dc57f7b2a84404eb8a0d59a6ebb8fd27f64f90a980b3ae33a88f965", "ref_doc_id": "0d29168a2de4819bbaad03a2b23ded23147989d0"}, "6621c65e-87ed-4fed-b972-bb572df3a047": {"doc_hash": "2eac1f4883becf706aecea524eddcfee5e8d563de8d08d953b43994add2b7468", "ref_doc_id": "9081096d52381d3f61509ea6709a26d9ea0cea36"}, "290d6f7e-d500-43d4-a1db-ccea40d4a2ef": {"doc_hash": "e41d78c7a882eb738665854379963eb0012e6866afe58459e962784045c3d108", "ref_doc_id": "4e2e967d91c4dd5c423613d665148bf9c780bc5c"}, "38361275-8a08-4524-b61a-a3ec9164dbd6": {"doc_hash": "d960463971eb22ce6b68ed6f1b3b48bcbdc302db744e78c0997b344848f968a6", "ref_doc_id": "168e16f6e6973fddd187cf662187e9a3b0093e49"}, "c700f292-d7de-47d4-9d4d-0ff9a51bfa5e": {"doc_hash": "6b7cf27b61e225fc6dc093f01cfec21eb3d81f569dfbeb9fa4315db1d454d5d2", "ref_doc_id": "e7ed503836e8d0b29c31252d1fe432a2db9cf1ff"}, "b43956fd-cdd7-4b9f-a792-95b7b14d74bd": {"doc_hash": "dc8636e82ff80e403d6b6799ea38cfe4dccef75cedd2b72ca274cc957fb7efe4", "ref_doc_id": "b02f75b357b8786bd2d862d7f65445f9ad69df45"}, "3187b6cb-0fab-4f33-a1e9-d636512bf500": {"doc_hash": "7afeaf62b28def347b8df5b60ea6e13c769a568b0a61af5008e40cd30ff30f33", "ref_doc_id": "0ee52b8714418c1bf862eaa9b4052f32310afb7e"}, "213f7b74-82f6-4f92-937c-3d045093c294": {"doc_hash": "5a6f3e0554bfea31c684b4ca7ff1743f047b8aa89e71ab4a30c9834310bcdf9e", "ref_doc_id": "d61f89ac91545164dc492949c1840add1afa7b96"}, "c422fdd2-34d5-457c-ad06-d55c1f340649": {"doc_hash": "0dfbc364e8246c66a4da5490e2b7a965d7297cf956889b8e5afe8fef1c00d9d7", "ref_doc_id": "37d9940ca76fbb7cede5edfcb8a66ce64950b758"}, "72033f7d-70a3-48cd-bfc1-ad47e6a7bf01": {"doc_hash": "4f539c3c023ff1cfc812e3b469add6af54ec5202c94a91c95434b2852305dd88", "ref_doc_id": "56c27acc114a06eb3abc76afbe360c1c3470a6ce"}, "31b8b8e1-5d3b-4de3-824d-e09efd0d4fa2": {"doc_hash": "cfb59e29759f72ccfd8d3ca8e1d7d15f16bf3dd6b07cb06854dd7a6bc785e032", "ref_doc_id": "80ff403cc5dc81e916b809c885286a3f17f6acdb"}, "deb3d0c7-dc02-49fe-b309-d5b4e05ff2f5": {"doc_hash": "19fe528031bacbde38e761c0ea7a7065431efc6a3fadfc00eeb22891c49f85d5", "ref_doc_id": "e9be7726e7f92cce6acef7626f05ddd8d9d4cf31"}, "fac34947-965a-4be9-ba27-6f0d65a7cb08": {"doc_hash": "99fbcca079b3151638f7a5de58d4118a1c5586cbe7a63f2e686cb21e06f90527", "ref_doc_id": "5f1f503820e43bea567586e7421463ed55422c77"}, "7147a4ce-aded-4bb7-b8fc-3be8edcd9bb9": {"doc_hash": "6c19afd15124f5f5be3f26b7dcb2fb99f5b487859f6ed31528605952bd30293d", "ref_doc_id": "b3a3fbd2f54453516e136c60d831ae849938fb96"}, "1d6d9325-8c63-440a-827b-5026d997a927": {"doc_hash": "0e6624c15e6c9b44d78927c73f2b3b9e2706ce17ec591a83e7f520a6836c4eb9", "ref_doc_id": "08ee64e9ef002eb28decec239b970e4938ca469b"}, "1c56b542-24bd-40d8-981a-fb6d5bda8663": {"doc_hash": "c30256d2d8a396c5eddd294dc0a4fb279a2103d1b453196c0685fe26eeeae7f8", "ref_doc_id": "d45e516eb10d6ecd284ebbc896edf31cdb4a4268"}, "a4c38f60-e810-425a-b281-1b1ab0e35470": {"doc_hash": "282aeae9792f62abb2cd3dd627f8bf845ad7dfa59d1e85f48a001e157d234f8b", "ref_doc_id": "1048ad897dcbf98551e22bcb9a4a761e3d57651f"}, "1452ff31-f326-40bd-a54d-154378803b52": {"doc_hash": "e2649f9cb5035e4101cdbfab059a4eeb53a624b05ae6b6e9a2a4a0d8f1325325", "ref_doc_id": "01a89aa6938a68a51598be7ea81b2c7545faf19e"}, "e33b6fba-95e8-4d97-9d6b-5d1bc6e2514a": {"doc_hash": "91d0a9dbf26a37a4c89b615dddf1a2fc7e67a95fff552e7fcc47a378619b18a1", "ref_doc_id": "d6579b2cdc1d1ad698db1a07e916e48504d69078"}, "8f5fba89-95c4-4f5d-9b11-cd4aff364d75": {"doc_hash": "3f6f79c41c24e4bc852bf067986a5152a244252e0e6a51a233e4880b0f715d17", "ref_doc_id": "3e1d2c9caa1d4af4a272c48abc40347ae20a8703"}, "0b44b838-3280-4d90-821a-ca327cee7232": {"doc_hash": "a5627f7882ca8444d319ff5f177673f00edc4ab48f8f0b104d95917aa67795e3", "ref_doc_id": "edad6fc25aff3d18e7619291f42055b175824e7f"}, "a19dd93b-4e05-4f89-bcd1-3bbf3d1500f9": {"doc_hash": "e453ef9b72944235388894b7d1648747accfc9165f0bdb755a799c878a20a22a", "ref_doc_id": "de0d542cab2219199c27f09fc7e3c7f44368755c"}, "d921a477-8860-4787-b3ac-cc62d4503c92": {"doc_hash": "2e75620708aed612bd5b940136c557c2cef27006609a617445ac9d0ffe549b14", "ref_doc_id": "5b300188118b6802fa6c7f2c1cd3f861474312ff"}, "0cb38c10-4db8-44c3-b239-e60eaac914a7": {"doc_hash": "aabe96290be1e65c9882f4d1f80d30432284080a3bf4dd1d31515970512cfbc2", "ref_doc_id": "6238c036127bbb88cf9c09e5b282b97abf974746"}, "91ebc400-581e-4319-ae0c-99fe8c512740": {"doc_hash": "6e9992b6413404384c7f491b7e23c2cb848f3d76fa341dc40b2c2164141819d6", "ref_doc_id": "5852afd3268d233d6fba1ecff7cd9513eddd5853"}, "dc2068a4-2c89-493e-aeb2-0bb8ba5b1c4e": {"doc_hash": "adc6d0eefb5c100366ca6c3ec2889460b2e81f7a28b318d69633da53d0dbc5fc", "ref_doc_id": "286259c63f034ccf6031f311bc7f3014b22c3840"}, "18e20fa3-d624-46aa-bac6-1bedd8de271e": {"doc_hash": "8be92b982e485df16bf4b550adffb312c7ce25ce39e797e16b055f67570209e6", "ref_doc_id": "6f46181364d97d859193217461da55f9f5c0b174"}, "0b2d33d2-f2d5-41c6-935b-f4548bc4861d": {"doc_hash": "8c0fbe9b16cf19f6e635525f38a9fc27a8f81addf1174d145d3f9b9259b54ab5", "ref_doc_id": "efa594ae9a124dd5050a497b72808764bde65cc9"}, "df6b74ea-d577-4660-b9bd-132ba3883102": {"doc_hash": "caf86dc53c1d93dcc7cd32e3e0966676563fb05269a97af922e98594d55d04b8", "ref_doc_id": "4ac114a915f5e132b377970cb603ef2074312820"}, "97713d87-dbdf-47ba-bbce-33cb51f0719b": {"doc_hash": "ef95ef1076d0bfe918bd448f29f5f7b9efbb70d70e5ecb74b5c709f9becb2d7f", "ref_doc_id": "d4e662dd3dd43a42e807c3b2be08c1ab5f69a316"}, "77e5cbef-5d72-4a9c-9013-2177687315fe": {"doc_hash": "e8aae5acfacbf15f6b9f9da2933fe588e2d53d0b96a9adeb5d5ecc4cdfefcc88", "ref_doc_id": "d4e662dd3dd43a42e807c3b2be08c1ab5f69a316"}, "c8c169b2-0df2-45ad-9789-c677ee48c9a5": {"doc_hash": "e4adfb86a23dff2a5702f268604eefcf3e0cba710d18d0d00492028468cc8202", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "0e9b60a6-ba6a-4dc5-8af6-9c8a3de85193": {"doc_hash": "477a31c281f9b105576bb7aaf4f93b583dd586fd601adc782f9e7d8c49df0581", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "0f5561d6-7b5c-4261-b81d-9397bf273dfd": {"doc_hash": "bb01845f5a4de59bcf99a4e19f2c121d034b19feb3a5ce9c7e7999fe707ca8e1", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "8310ad69-d0af-410d-b52d-bce368432bd5": {"doc_hash": "70ac01942bc2c42a8997f95dfccbe417bf6c8ca60047c517ff2f241f92c85f76", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "fe214a7c-6bc2-48d7-88cc-9344f001cc68": {"doc_hash": "ae6acbfbd789d22a1f952dcde5153f9ae51a304a94d769382d2e71d678a22f61", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "27f5942d-30dd-4b98-bfb1-b0749aac60f7": {"doc_hash": "07c8ae5f8a3b494170c1c4179aa911e390b74e23e39965856d350b3c63ca89dc", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "b388076b-827e-4af4-ac91-0471cb750afd": {"doc_hash": "e845a75c2e3ba226fa9345a69de2b1d8244399dc0a53fc5f6ea85262f04f5ec2", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "740e5319-2be6-4a91-8d86-9754fa331850": {"doc_hash": "5c7bb0aef6103d194b16d90156fb8641c60d9a626daf90c3697a570c468b5fdc", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "8d89fa71-0710-4973-9626-fbe7978b359d": {"doc_hash": "6b9ea9c1cef2aa312d79e30f0ae5c91ae22d07c8b4b13899c248b2674d23b841", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "00dced56-7b5c-45ac-8333-ef28fe44503c": {"doc_hash": "e155ed03ffd8daad745ddfe36f0e3c768999aeaae0e035c080d46a1368edce8f", "ref_doc_id": "38e58d6137d2a6865c727a9a5887f271f47c7c67"}, "deb19d6d-b41d-4255-b028-ed87b42d7fb1": {"doc_hash": "ef5da0f0513d6b275da4b2ab3d9ffe793374c9ebd174757e0903d4afc8f32493", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "37a54ca3-2bc8-4975-83f8-b2ea130debdf": {"doc_hash": "4af5f1f4075ae0148f50a2d545b4691a83565425ba9365eab73eec21aa9eff15", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "d3ff9c9a-4dad-47b5-a8ae-b512a549b7eb": {"doc_hash": "a09f72b2bcee290e8fd9adb94de6e266d0243245c62fdee482e40f63ebeb7a48", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "6ccd1dc6-846a-46df-b0a3-6b52c957c543": {"doc_hash": "4fff2cc287d3353ead043c19844702a18f3f8ea07720a056f1cbe0aeb486cecd", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "2784ea10-5d21-4083-bea2-0a9ab4df910b": {"doc_hash": "4873c7e55cc3d28615df456cfc4dfadbc1fd86f017dd8c65268c52f6d3c6573b", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "ce38b5be-72e8-4544-affa-4e67588e0403": {"doc_hash": "f6ea55708f2566c7dd5c2b82f02bff1dd1c05433beb1278453fb7ed7220e5bb1", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "85c34abd-06ec-4f42-b708-fdb38fa6408e": {"doc_hash": "6c82b1e371737bd8093a173df64a0cbde76ccb81960e208850eae3f782eb3531", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "541631ac-7870-418a-b78d-1c9bac407622": {"doc_hash": "af35a8ed0fef9152768df5b1541924a762190b0f713e2d2b49cd7ab60ddc9b46", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "45dc247d-58e2-433f-a268-2cf6ff529c0c": {"doc_hash": "1e1ccf40e7421f737f9396aa9541ae4a01e04007fb214d52172d417abd997467", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "039e73e4-3341-48f3-bc80-2476ed73a560": {"doc_hash": "879b9bc09ea694f390ecda9c80891c466b90d58b251e8ab4d059e0ecb3490ee5", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "e25df95d-dfa0-41e1-b333-d064812d707d": {"doc_hash": "a4d3942860d8b07764f759cd08ccab2c1b7ad27638d88f3c31094d29f72bc8f5", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "786c2e3f-682d-4874-83f2-084776e1f73e": {"doc_hash": "703c031e81df45dff3585f9fc03bd44d9f05af5a5ef5e5c68e9c57928d43cb11", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "47f32aad-6275-43c1-9286-163f5a5e464d": {"doc_hash": "0143a283f1b4c0bd7bd91cfa2c7066408b20a7324928793b3728d50bcdc07ed1", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "6fec2947-5116-4b49-8889-4c5f504d7bdd": {"doc_hash": "375f4fa661c7bde5ed36fd618c777f4e87ca6ac5e1a453708a43ff6bc3666602", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "d20a4846-3572-4bde-82ec-4a6f374dcdb9": {"doc_hash": "425df3ec760e9fc15d08ed7a4bf3dcbf0ca31e691ce1c94033ef718eee1e7f91", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "8a2ef4f0-03d0-4f62-94a7-06a310555226": {"doc_hash": "719ffb5224ab26bf13b02b206380cd0daa7410fcc95356486e53937be72079c2", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "e9f2113f-d983-479c-88fd-4d86c5ffb4c4": {"doc_hash": "588095edc7fc0d951284ca4b8103f42da7beab2f93de417ce9b2017f0eee28cf", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "5b088c3b-3e41-4906-a120-6d4b80d09bef": {"doc_hash": "3abaac72004c56022f63e13d2896dfc94f46aa57492abaa22d455b4c459dea88", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "7030325d-0007-47f6-982e-2714ae0d7bea": {"doc_hash": "bf0f2f5d449ea746d1ef9967db665f8e641f1b55c814d6df2d73ad01f86a952e", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "ae0377f0-a4a7-4cd6-96ac-9c975f9d8ea9": {"doc_hash": "01d6943ff6f5ed0a14df5529fa3d3ff616f7a69b8a324f033b295371aaeba0ed", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "fd1ec7a2-a022-4333-ae4c-b2cad20fad1f": {"doc_hash": "f88e93df4ab0740b20a0a7509537412e8c96ba88f26d80f9b8fa4ebbcdc76f1f", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "3c195813-9629-4e88-9f70-a2f03faaf074": {"doc_hash": "9b8b924a19670a5489a2eb08c38d22ce885a3ba857b1fd5e98230d70647c521a", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "44b0946c-f990-4418-b441-61975add9ec5": {"doc_hash": "0eff3ce80e688e8571b0a44dea3a1e7d69f0710bf2f579ae4f01342b4ecd43e3", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "cf72d3f6-55f2-4b27-8700-a1678521917d": {"doc_hash": "f6623ab00ba9f9bd8ee63a8302d1ac1221afd1434ee86d4847db0c3c44226c47", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "54a6fcf0-0c2c-4b8d-95cf-a64373d9ce11": {"doc_hash": "0dd45512b1c7b562fd92eebc25ec8ea2518c2aa6cd819d765e196623a3fb1d79", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "9a360feb-e205-4434-8884-0f0479882ecd": {"doc_hash": "3d4783f854b702ba2074c9d01f7439acef657ef687bcaff385532944704eb4c9", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "baccc5d8-6b7b-49e0-88b1-3d377bc6d7a5": {"doc_hash": "94b39166ff5217971da2167d36d07bbe17d4944bb1734294ded86e3f46c86c40", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "3af3c67c-df19-4b99-9926-9692a535cf01": {"doc_hash": "41b2e74a16302f8308e4f6bba0cd1679bbafb333a95dc31e4033f0ad022fd7e3", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "78d1ae9e-63a8-480c-9aa1-161b74b3d453": {"doc_hash": "ecfbcb5a90812490577228d53c18989c9ca75cae957460bb0748561767069219", "ref_doc_id": "a030f0608eafd7249c57c45a3da2385110fe0cb6"}, "687d410f-a55f-4e99-bb34-cacef86baaf7": {"doc_hash": "1f454688935be4a19807e97639766b4c527cbf8c9a2e319874b25a6b15198aba", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "2991ab55-e6c4-40ba-b637-1e90c9dd5b40": {"doc_hash": "a34876d243d4bbe40dd54af7a9a44d582d1516940616ec80a32ec0390c9e925b", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "edd86f8c-ece7-4efc-9ff7-6843d66af2b0": {"doc_hash": "b043a61bfb5c91a3cba010772bfc0d8387b02387cadb724e43819f7231873de2", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "b591c0b4-49de-4916-8116-633116af551e": {"doc_hash": "cf9accb035daebdbc375813913edcd2c56e96ece295367a597df9cd9100b75e3", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "318bd023-fb8d-43cf-ba67-e27eff2d0804": {"doc_hash": "b5608ecabbca3260910fd0862adce84cd670c15e3c0ecedae68490aba65fae74", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "23582841-916e-449c-b7f0-f0234ee11a83": {"doc_hash": "3ead848a0012cab3f06a16563281ab8964eb24cac1ad94786efa1eaf2c5c31b0", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "d787c8ec-587f-4e81-826d-5658eb90c86d": {"doc_hash": "d358980e4768f5f9ad7c98efb3d10380a2203244064effd8b0560b03f94bda1e", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "345a05da-793c-4553-b8d7-52d172f3d5c4": {"doc_hash": "7a1c0790c05dbd050e5f6206c7ced70aaee756330908b85211a7c3a07bfdf722", "ref_doc_id": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4"}, "91e34b6e-534b-4d48-a0ee-e9426f0b6ecb": {"doc_hash": "cf1dac59280524ea7304343af9c60db3f3f6350130dcff2e6ac8e76281c8d497", "ref_doc_id": "5251331a818ff444c11dba2c16f2d532d59175cc"}, "7950bfca-d5d1-4e83-8594-f4cc5b54ca85": {"doc_hash": "9b0d9c8be478b295104fe44c2f14586654678345af72e716d41bf72090667bf2", "ref_doc_id": "5251331a818ff444c11dba2c16f2d532d59175cc"}, "4af14a26-6dd8-49a4-9221-babf5a1dd107": {"doc_hash": "195c0529f5337f0a0ee0275b0efe443c9ee6f28e3e57aeb742382294828e02b6", "ref_doc_id": "5251331a818ff444c11dba2c16f2d532d59175cc"}, "647a290c-ad5d-4356-8629-df0e86c19371": {"doc_hash": "43f9314c10503627eb05954bae2e4d1755803b272208ed2b6ee476051f4d4131", "ref_doc_id": "5251331a818ff444c11dba2c16f2d532d59175cc"}, "47315152-9213-420e-944f-0717a701680c": {"doc_hash": "107c174d2c0c5058f9c6a18ec20a2e38fe038e72b34ccb8bcf2a573729731f1c", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "b016d2a4-304f-4f09-9dc7-b93e2f4f1ca0": {"doc_hash": "6e47eddc4430d5e553f728f011d311cb4d79f42b995d97c3f12fa098125cd648", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "39b342f3-5a80-4ec2-927b-da33779b783f": {"doc_hash": "f809d55f8bf204d1664102ae5ba464203a6c5aafd588fd4c31dc522e2bd26559", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "ff8f22d4-fb9c-4542-8ccd-04ed55ba1a24": {"doc_hash": "bbb01c75883141a269e377eca2e939e944a9c80faf47020c61477d6d8cfa66e2", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "3fd8b9f5-d471-4fbc-9b0b-2a1f21951b51": {"doc_hash": "43550f9381ac24665ab79c66c77fc0a03121482c0ca3f8a02663e516e53a5b8f", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "cd4a3a57-c0cb-444e-b5db-cd1195251149": {"doc_hash": "9020fc309b4b1d216b5b30b1c901432bdb941457c4d4fd36c480a8f8e5fa35ef", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "4703a3d3-c7a4-424d-9b03-df1b3a13b91b": {"doc_hash": "a5fcb0619b7b35d7b69c4aa15f478e44f2e5446f47b3bf13649eab0ae781e0ac", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "cb8c0078-5409-4eb3-a17e-b0c6e22b77af": {"doc_hash": "af8a3f2be0711bdd4419d9fce94bf7b2207c7815b81bdf48f90ca2e444ffad75", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "e4814e06-4d5c-4989-bc9d-727eaa19619e": {"doc_hash": "89bc0eb3ab20d1c7961fa2e81eef72e8babf11e6348a701128a9f4808dd77681", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "19d69417-b741-47a8-8aff-54289f240dbe": {"doc_hash": "9a0edcf118a8a8a436450ce0c0e247f81d40a585bced8d317a403acf0f1ccc61", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "3b733aa5-3280-40d9-89db-7f35299d9cf8": {"doc_hash": "2699729f987616b3830d89048c7aa738e238c4830469b69ff285f726cfaa4d76", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "547a81b4-1b42-427b-bc9e-d624a1a447a5": {"doc_hash": "b6741fc10f60699b62c184759ed828ea55db1eeed81038fa7f4d6cb9d3c52029", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "12081b5d-0024-44b9-b086-96a2f0076974": {"doc_hash": "251a8e1820c2bdf0ed21ef44af33767e3c86be3464601c52170762df8012cb24", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "b84aa510-59eb-4b0d-acba-6981e5e3c90c": {"doc_hash": "d0a208611fac7dd2d99dde93996e8db3b98bd88942c5405e221cadedbb457328", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "ef1fa717-d73a-4835-a2d4-1a8d16d3befb": {"doc_hash": "0d147e818cdeac7c4af15028facf0fbe5e60fbd6b1d4c168cbd95fb68478ed79", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "9b7affd3-44f2-43c6-9df0-9d4a95e09f3b": {"doc_hash": "1eceb40e6da14124dbde124e3f3749fda72829175ef38dbad2e2a7fa60cf78aa", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "b06afb54-aef4-4b24-ac9a-e5446eff1b84": {"doc_hash": "8184a6da7a134defb00e6a7802a6265ab0468d30e144b6db258120806c4f2204", "ref_doc_id": "8d81e4c37bd0065fa700b516f7a1475991711404"}, "41cc0ab9-0e9b-40de-ad88-b6e3e3d6132b": {"doc_hash": "c78333e039afc5f0d435390aca4062c671f9bd4c1800a056905bde93526a8473", "ref_doc_id": "73e1c22b9c4006822d09fb92e07cd21f7587e551"}, "dc8d2404-56d2-48ad-8697-b238ce9f2846": {"doc_hash": "fa3f97a40e03c0d12ca321251a798379526be32d7f966d4cdbf95570cf6e7709", "ref_doc_id": "6cc61083cf586833e12a5035116ba2bb9fa1d901"}, "3c4e6346-04f7-4185-a079-d58f62172899": {"doc_hash": "58dc78dac1c2aed4d25985ab3953f5dad67e0cae2d31f5ca26075f4070543cfb", "ref_doc_id": "e519087b56ec56ee156342768e56317e11499bac"}, "2af5e81d-4cf0-4edd-9b90-635408d6e9f5": {"doc_hash": "3515deff1a22afad7224abcfdeecc9465c9748d4a89e33ff4b231cdc98b40de5", "ref_doc_id": "d010f143013b96e788b3a27751a9869dd863b83c"}, "278c79c9-e59c-4e08-b6a2-694c3efe1c8a": {"doc_hash": "4d1dccb2d01d468045d73dcd9ae3cb507468a1c34fad250dcd1b67155555d2f9", "ref_doc_id": "d010f143013b96e788b3a27751a9869dd863b83c"}, "e6b78bd2-77f0-49cf-8dd7-26a3e9f2642b": {"doc_hash": "fdbbfcdef13f3c2cd1c26daeda2509721563e82d63e3317bde7c0abd5f3b7696", "ref_doc_id": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2"}, "7b768f0f-f7c6-4d77-9c2f-defa531b7643": {"doc_hash": "77facdbb521c423fc75eca4e2e43d90a3cd91f1043f8e1c151096c43102f26fa", "ref_doc_id": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2"}, "5359db3b-e972-4ac1-a676-fdb066956a7f": {"doc_hash": "9834c45e8df6bb5529a497c5cf9807cdba55da784dd386675bd9267ed3d4b170", "ref_doc_id": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2"}, "cec4096e-c53b-49f9-a307-519a60122f02": {"doc_hash": "b9227c937531753562a7076cd89d54b5f9fb0dea86dbbe1f288fd01eb1cd7148", "ref_doc_id": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2"}, "0d72f687-0afd-4425-8643-6d6e4d3957fc": {"doc_hash": "1c61a55b49ac53bf0fb7b29495d2f2a76e2b05fb72e989845cc72bbef1111fc8", "ref_doc_id": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2"}, "ee9e8276-b4d6-495e-8600-fde59ec94b3f": {"doc_hash": "2b72fbd9b1dc2b7783ac61f27c09503b0c63cf32e1980c95057bed3e95ef9e61", "ref_doc_id": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2"}, "3114a604-e25e-4560-ac10-2e906c78a132": {"doc_hash": "ba73fbacf0aa8a90f8c424b84d0969586da7dc1ba45fa57fb2d46b4c1f2fb2c4", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "b79841a8-2f61-48b8-b656-36cb693ea582": {"doc_hash": "8133129d6ffbb5a0c2f844294d761aabafe59e0d5814fd09ec73c33d6ab87204", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "d79e85ef-f5b1-4fca-8184-fcae7f637134": {"doc_hash": "b15585804f11bcfa32b094c03b61caa81a7b33140478fca40882cf6202c4e854", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "f4c0a9ab-cfbf-4820-9b65-862a6acbf8ff": {"doc_hash": "ccdefb2ae4b21133ba6824478db5f66568c352ec66fe6e3595718535ff339ac5", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "df8cd480-4fb3-4886-814f-5b27cfc8eb27": {"doc_hash": "320835b3eb70a2bb8a26bc4ddf92074dbab9ab3ec38b71d08a3580697c1eac51", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "e2a3ec8d-62b4-4bed-b9bf-de1e2cc3fc54": {"doc_hash": "cd61d67a2ba9ef9ba948fc4fd633a7100fce648bbdd9e5c879c2f9ef8b14089d", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "249028d3-e1bd-449c-956d-2c30e2eb677c": {"doc_hash": "0262fe7429b45deaa3decf226b3057a9b70cd0d952977d4398d8a46213d7dceb", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "d936f2dc-223a-4b4f-9914-4ae54f1ae9f5": {"doc_hash": "1a371cc410bd5a0572a89249d0f503a2f7381ddd3ad3faf58dda10cbbe0b577c", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "7225bae9-9fcb-4a86-bed3-46303b77f562": {"doc_hash": "7c15c1aba61f84124b72b16a535126eba9acc047e19f1521c3361ca69ca106fa", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "d1ddb34a-3767-481c-89b8-b33bff55fa1d": {"doc_hash": "e413bebb73e8401765706bbf7f86310b64484fa5f9f5c0f4d2304f786900223a", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "103856cc-001e-4ecc-a6c9-594573e4756f": {"doc_hash": "d092c2c50ea36f99086a7d00cce913177cb49838f287bae6691df8a77c965552", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "de096021-b0f6-46fc-86cc-ca96cf5b6937": {"doc_hash": "317e3fc4e79edd995297d7f9a3de74c1e8f632c984e3df3ad5ab9de4fa68e3c0", "ref_doc_id": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba"}, "33963789-de9e-4d71-b637-dd527d3ae036": {"doc_hash": "62eb2574c1d0f98c07bf84898eb99e5b1490825cf328a6779f6db33deff07512", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "9801b967-37d3-46d6-b9b2-881b6c5c5cc9": {"doc_hash": "b55eccc2bb16a9ed8a67f92a509cf91a231ead0e92f4213ea84fc693ecf41bfe", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "b6d6d1b9-a16d-4c3d-af17-9d1f6c028127": {"doc_hash": "78be009bd3d7c56539feca1469bed464c8390228271d5f72c96905879c3b37a9", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "7017b803-999e-4d05-b031-adc95a80a3bb": {"doc_hash": "1eb060d9fec9d9f2105a7a24c7b80b1e18468840369e354d324802d5879cb947", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "97257d0b-e6ec-4def-aa88-cb9d8525c49b": {"doc_hash": "499733dec99e3502a4f320afd765ee96cc6f21d5bee445232732305e3d4c1315", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "4532d07b-659e-46a7-ac16-550a5082bbce": {"doc_hash": "bd93466773e7eedab11f54256ef9e4f145fdec02ec561f22ee5253f60b74128a", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "e9f7c021-cb86-46c5-8664-a241a759434b": {"doc_hash": "4eecfaf145808ff921249cf9207f9aaa825080ae4c1b0e061c25aae32dc1d438", "ref_doc_id": "a99163cb7d7c23ba4a76851624e5b6220caf4065"}, "cb38ad7b-cafe-48a7-8ba7-a3832b01b155": {"doc_hash": "597ecc2508ac2d41e1808cece553d4325f6bb9223387988353854b5d87134061", "ref_doc_id": "8f329b7e75e735e924b9459a0a29ec6d3cae5477"}, "68dd145b-273e-4e77-8720-de6b40c7c18a": {"doc_hash": "41fd46fd0ce8dbd5766a4150f2401e061181e9b2d85f35370343ace34bad2f68", "ref_doc_id": "8f329b7e75e735e924b9459a0a29ec6d3cae5477"}, "f3d33ee8-6592-4b2c-9d6f-473f63f0fb67": {"doc_hash": "9dec2ae4fbbd4ecff404d753c7768d77b86c762151ffc5af27d2d5bd6ea06c63", "ref_doc_id": "8f329b7e75e735e924b9459a0a29ec6d3cae5477"}, "c2e7dc7d-d57f-462a-85db-5cc572aff979": {"doc_hash": "b7e96aaa8e4161e612aaf5e94fbd48c86c1a3cbd5ec8a23cc181c4a0e020f563", "ref_doc_id": "8f329b7e75e735e924b9459a0a29ec6d3cae5477"}, "7e95c262-765e-4a3f-a9e5-cfb1d7744ce8": {"doc_hash": "7a8ac83914e8e8f588322fa7bb7e4fca075460d66163ef01c85031faa14a0d0a", "ref_doc_id": "8f329b7e75e735e924b9459a0a29ec6d3cae5477"}, "14c64886-5ddc-42b8-8731-7a87df0b564a": {"doc_hash": "898a17c411e3bdd7d2b8652ffee903760ace7ab7001920e04414070978722fa6", "ref_doc_id": "0c749a25bfccf75b7a8c8e27568c178616d5368d"}, "4492926b-14af-4fcf-bec0-935a0425e49f": {"doc_hash": "aed8203e5b785d61b6c9886fa8ca7b761588fff38c4d7efaac48240a14b2b42d", "ref_doc_id": "0c749a25bfccf75b7a8c8e27568c178616d5368d"}, "8780cde8-536a-4441-ac8d-94581d374e0f": {"doc_hash": "4645965a52206bcb2ddf8dc3146f3658a1fa297f6b88b3dc97a91a62e15362ae", "ref_doc_id": "0c749a25bfccf75b7a8c8e27568c178616d5368d"}, "faee21f2-c965-407f-8f3f-7310fbe55625": {"doc_hash": "f985daef13859df931064b1a289ce92c350b2b850433136a4471aff248e56ffa", "ref_doc_id": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2"}, "941c8556-bd98-49a1-8555-b11804be5926": {"doc_hash": "f483187db0dd87c3027b9281f1b0f73480b5ebe7b2c6022a1d1ad47f48de72b0", "ref_doc_id": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2"}, "88e62ef5-60d5-4023-b020-684e8e570570": {"doc_hash": "8179f4d55362306a00dc010a48adf1ad61d11a1d3b14f42f97e8d4d5486f6c3a", "ref_doc_id": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2"}, "deae2be9-caa3-4407-b483-3417e6cc9f3a": {"doc_hash": "c0dda9c1a407fb88da74ef0018bdadb721f2be5fb1b755768723381e36f7fae0", "ref_doc_id": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2"}, "a52760c6-6781-4dfa-8629-6591be4684b0": {"doc_hash": "17e095bf12d571f4e6aeb6fae5d8ceade948c7aebd79977b701798e26c5268a6", "ref_doc_id": "663d5b6cf13be0f1275a907bc31741a313d14b31"}, "05ed184a-0e88-4b47-8900-0f87c3c40aed": {"doc_hash": "5729ca74053e97866a2418a93ce3095a82a9700d06b2db1f7f25fd1b1eb4f2ae", "ref_doc_id": "663d5b6cf13be0f1275a907bc31741a313d14b31"}, "931f7218-1f13-4c02-afaf-4cd43cf187cc": {"doc_hash": "05992b98bf8a4f2bd1170048db78480ab15691991d39cdf765eebb3067c27508", "ref_doc_id": "663d5b6cf13be0f1275a907bc31741a313d14b31"}, "92e1c1ef-ce6f-4679-b62d-0a3849c63255": {"doc_hash": "b264a0c8851a4024ce67eeead8849a6ab29d946c55aa4b2cf0805acc3aef5358", "ref_doc_id": "663d5b6cf13be0f1275a907bc31741a313d14b31"}, "d47ad24f-95f9-4d54-8c78-08e91c81f75e": {"doc_hash": "574f212b1cd0235626de3d075bade7dfdef2aa4e2b3fe29fd924ac4c8442199b", "ref_doc_id": "663d5b6cf13be0f1275a907bc31741a313d14b31"}, "660f4415-0c25-46e6-8ce5-2edd5a0f966a": {"doc_hash": "b7d2abb0f33c633242ef972fb0f905381b65e24b7301fb1662ebddd0db853c9e", "ref_doc_id": "fce99ff8c5884f7ba5a9949812e08489c86b7ebd"}, "7029f4d7-f830-47ab-b852-9f070e98b498": {"doc_hash": "aca2e4e8c77ee981b3c32c07be9866d850fa8d403de3a333655892c4613ce5d7", "ref_doc_id": "fce99ff8c5884f7ba5a9949812e08489c86b7ebd"}, "d4b67375-7206-44bf-8d0f-e43586765dc3": {"doc_hash": "cac321317aacce89e3385a17c8061364dd028e6384cc5b0fa107f68463f0000c", "ref_doc_id": "6775f3f9fb92dea7c04deb0dbb4619aa6e32feda"}, "52f55661-79b8-4e4b-bcac-28a19c1e9a4a": {"doc_hash": "e5a917f3720e400cdc1b5dd5842bd541a8480d7e967551c0880ed327707f187a", "ref_doc_id": "6775f3f9fb92dea7c04deb0dbb4619aa6e32feda"}, "2486bb1f-1bd4-4127-9ab2-943eb186bfec": {"doc_hash": "6ac2c8456761215cb7ed7dea84347cf43af4c05f041be4eb0fadc04ca779d1b1", "ref_doc_id": "2e294e91a705ff61d7ce858a41915e703db7e590"}, "98fa73fe-b660-494d-b24b-728eec0b4188": {"doc_hash": "6f53a3053993944be5241b10ab07c9ea4c9e11b351c03e0283ec1482edd19b1b", "ref_doc_id": "2e294e91a705ff61d7ce858a41915e703db7e590"}, "bf7f6fa8-8368-4fb8-8eb7-4c8bd19b616a": {"doc_hash": "8b1ec00cc7f6fc330ab07179375ef96e6896f427adbc60bf83f4c845a62019ff", "ref_doc_id": "55bce386ab89a40105f1481584f10c5ebb518f4a"}, "d9859f30-0cf0-47d7-8c41-651aecc9c756": {"doc_hash": "5df00906616d77ad1a4d6f55e2f52f56705b1c090522ab8c5d08d5904d01ef54", "ref_doc_id": "55bce386ab89a40105f1481584f10c5ebb518f4a"}, "3ac5eeb8-c2bf-48bd-867e-a515d9fe6ed0": {"doc_hash": "11202eb77373ed42decee27882d8ec81c8ca871685ecfd83bae07476534baeaa", "ref_doc_id": "55bce386ab89a40105f1481584f10c5ebb518f4a"}, "7a97c8e1-7040-4496-b45b-d768d3cddc22": {"doc_hash": "34d59333d844cabbdb0e96637988f1b5d4b89eb01421f22c900adf649d2788b6", "ref_doc_id": "a4a4b904d8b191a23528d4997e7314f27a6250e5"}, "4ef0c57c-b50e-4926-b4b2-f8f9d24aaf4a": {"doc_hash": "3ec5c6ac427ae75298b7598e3b95cd491d94d3bf2b36150a7013d02c7397b3a0", "ref_doc_id": "a4a4b904d8b191a23528d4997e7314f27a6250e5"}, "6a721008-1dfa-43ef-b56f-1b4dc3f2c67d": {"doc_hash": "62f687d8bd7a900fcbc126b5a5896ea11f20612875907048b5abd9c0f047a5d4", "ref_doc_id": "a4a4b904d8b191a23528d4997e7314f27a6250e5"}, "9a057338-2b2d-444e-8f50-22d5060db43b": {"doc_hash": "1a296378843dac7a65e4f3098e0620647728c29105daea5bd14f50d90790686d", "ref_doc_id": "a4a4b904d8b191a23528d4997e7314f27a6250e5"}, "b926fa77-0a2c-43b5-afaa-80627ca259f4": {"doc_hash": "b37d104a4c451dd12923e31c594f4e28eadd5953eabf2520c884a02f52e4c401", "ref_doc_id": "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283"}, "673f5dd1-cc6a-4237-8171-0d578741161c": {"doc_hash": "619e40d011be9fa7d2bebb0e760db484be2b73fc4c990da04a2287adf117bd6e", "ref_doc_id": "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283"}, "c0f32e47-7c01-4f2a-a88c-2d358c5006b7": {"doc_hash": "3a9cb178f3d6e7f8d9f0db2f87b7878c3732e7f4bdbf171bb1bfffeb41684dec", "ref_doc_id": "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283"}, "1aca1672-0346-4f28-8c51-f417cc45b60d": {"doc_hash": "116ee5dbe1af66b81dfc7765b3a85f7ffe0b2a29d58b233ce95eee2d553687c5", "ref_doc_id": "f5626351415decdb3cce95c2ba0dcf97f19b4f32"}, "56383fa6-93f1-4fd2-b93f-0161184846a6": {"doc_hash": "1d8ed053836837fe1ff69fc0981fa24e457bc17c6d1888c5ac536d0ff63b0db6", "ref_doc_id": "f5626351415decdb3cce95c2ba0dcf97f19b4f32"}, "771684a5-f29b-485f-8f07-7c223e70d4d0": {"doc_hash": "9e38449dc67e4f80e9057e37ffce118a4ef7f9a3d42d5bff3f24a535e17f7e3c", "ref_doc_id": "3674070896941616c6fd91904b4e53ccfce9c125"}, "505a3b73-7a0a-4ca8-a585-b03a92f874f7": {"doc_hash": "3d82d916753dd9e308b41cbac2aff60f627dc242b3943f51e38b449f5da89160", "ref_doc_id": "3674070896941616c6fd91904b4e53ccfce9c125"}, "4d182342-0d81-4274-bc54-f989dc0d617d": {"doc_hash": "a7501d12e294625d014333fc28f9092f5e402d03cb6edb927a9166aba117d401", "ref_doc_id": "3674070896941616c6fd91904b4e53ccfce9c125"}, "830735fe-dd73-4944-aa17-5e0cf8057db2": {"doc_hash": "e5070d8819d29b3cea9adede00f427ed83b39370cc6642f3af5c2788d1a61080", "ref_doc_id": "10e9e232763fcb5426824ae4860c9167bea61eb5"}, "6086d92e-9780-4e43-b2af-ba55a3551b44": {"doc_hash": "55aadfca5e16e96cec1b6a7950a306219fbb0fe3f1595cf396d1939815912359", "ref_doc_id": "25c156963f302a95be89c45032739d900f982c86"}, "0ee094b6-a7a4-49eb-ab3f-0c26c6fef8e0": {"doc_hash": "810baad17db4d4708b45648828f5d562d969ab48869ab40d6d69ccb14ff56a08", "ref_doc_id": "851734bf26775211863b85ce8750d79b886a6761"}, "f1b7fd4e-7d43-48de-b3c4-49c9290b6caa": {"doc_hash": "5343961f92990c14c2a79005307da3ac857330330f428b43518a680e1194b08c", "ref_doc_id": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add"}, "05fea5c4-03fd-4adf-ad47-2018ea8abf2d": {"doc_hash": "a77d515c68e76d026723f62e4ac5bc2d93faa9b2b94f1f64dab17acf08e67be7", "ref_doc_id": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add"}, "d46d3426-c30b-4399-83b3-b125dc039b08": {"doc_hash": "50e7a30e8b83f60147abdee1b6f5bda59d6860df6e4563537a03dd4f275a2286", "ref_doc_id": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add"}, "5b9d2018-677e-4db9-9757-33e5a9e681e3": {"doc_hash": "e3c2cd01af92e19fc715febf7bb09846f7b66c68e3011673ee1b4dd0ef4d0e3c", "ref_doc_id": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add"}, "ffb0dbf5-33d3-4c60-becf-1a9196bee644": {"doc_hash": "3a9ca6cecd1f94ae6943ac22949512241f06eb9aead306bb1441b3f6985da5c6", "ref_doc_id": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add"}, "27f5c409-c840-48b6-a3e7-d92b837a65fa": {"doc_hash": "7ef3b9b21dcb5d341dd6812e51ec9d990d4632fe3f50bd278871aba75c1fc25a", "ref_doc_id": "0de19f48e6a004a29fcc717169500bd54129498f"}, "f1a01968-83ad-4bff-8f1c-e094e119d39c": {"doc_hash": "46e6cd4cc1bff605af12807eb20249cb9619aee025063d43e97a40f6a782c629", "ref_doc_id": "00803e0bbf0f3d47ea5568caf06860aa884da00a"}, "99d256c2-d78b-4a2b-868a-d48e1748045a": {"doc_hash": "fee09b26fdb3554d1b4f01bcbcfeccbc6b815ec402d46149f9db8261cdd4d867", "ref_doc_id": "00803e0bbf0f3d47ea5568caf06860aa884da00a"}, "09aaee23-38e5-4f19-9c73-d9c5e07f039f": {"doc_hash": "33d003f79f830b21bb3891c47e17df1ba751c6998fdf9c4add994fe7e4af6b42", "ref_doc_id": "00803e0bbf0f3d47ea5568caf06860aa884da00a"}, "f1990a63-c147-45e5-9ca0-79033c55b441": {"doc_hash": "70773abf6f757e768ec379fbaa86b64ad91c54059bcf9e32e81d26d719494a47", "ref_doc_id": "3285dcf116bfdad51771084e20604689a1e7e14b"}, "f8caaa84-d5b7-44a6-a6fe-bf92b2e51c08": {"doc_hash": "cfaa92a22368660eb3f579b43bd517ff7bbc21ea9279f15b4afa7b23fd9786c5", "ref_doc_id": "55e0c4ab7cbdba9353a629cc70b3983e3e9a803c"}, "209d1d6a-ca15-41bb-bdbe-4e0d0878a5e5": {"doc_hash": "7c0248961d285c0553c9d23598b607ca521bc35fad4202ec468fa27e6470cc61", "ref_doc_id": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a"}, "765386d9-517c-49d5-9625-8461ed16eba8": {"doc_hash": "81c34204273baa6f466a678234ff06d4e01eb3098243665b93ee3da06809a472", "ref_doc_id": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a"}, "8b363639-1efe-4b91-9ac4-ca8ca3fa05cc": {"doc_hash": "d5524699f1d8c4185f9634a16381123a2cd93b8ef9fb8980c539a2bc30bef73f", "ref_doc_id": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a"}, "50d46fc1-9f62-48e0-aba2-e9e78fa1f9f8": {"doc_hash": "e8422e289548f13c0eda1ef602247d90755db903efc340af1ae09593a2d60294", "ref_doc_id": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a"}, "736ad2e2-a9bc-4e9c-8d65-4e332485aedd": {"doc_hash": "820d8c5f0f13dd125a0167d2d4db3d9e58f39b1f9356eb439bd3a72bae71b4a6", "ref_doc_id": "b484ecd890487de4c8d570dfa3845603338f7c0a"}, "d4e1a924-c013-4234-ad94-8c6f24780052": {"doc_hash": "a77f7b50024944c5356d4f3cbc716e1468902385f300103f783dd248dc322a97", "ref_doc_id": "b484ecd890487de4c8d570dfa3845603338f7c0a"}, "e4c786af-9e53-4882-a0f1-9e65b3e3df5a": {"doc_hash": "55ee9126014f25f6f7b742b41df2e74c1ad13f082f210da1760742f541b59b31", "ref_doc_id": "b484ecd890487de4c8d570dfa3845603338f7c0a"}, "026575d1-d180-47b2-85c8-aaff69bef90b": {"doc_hash": "ccca0dcda9c24e873050689545a9a6943597c45767187e0fbce1bf259461d8c3", "ref_doc_id": "f423c118b9d7a97be63fc2f724b8941551359402"}, "ff1c1813-4fe1-4c50-b0f1-f30fe2f6a111": {"doc_hash": "9dd211fb01ede9d9434813af0473134f9d52da5e2f7c32f7f9133dc8758b9774", "ref_doc_id": "f423c118b9d7a97be63fc2f724b8941551359402"}, "c8d252f5-7694-41d8-913e-dbb64eab09aa": {"doc_hash": "45a85276559df9a25fbb43b72af4c73ba5f178b4c12181cccc69401d60149a46", "ref_doc_id": "f423c118b9d7a97be63fc2f724b8941551359402"}, "bd12d885-efe5-4ed9-b1f4-1a1104d1624a": {"doc_hash": "449574ec11602803f8b9f7d3d0bb199b49793255d6525a001d18ff3aaff1842c", "ref_doc_id": "f423c118b9d7a97be63fc2f724b8941551359402"}, "d4b7dc91-8dd8-4bdc-bf58-7c759415e381": {"doc_hash": "15353dc58e75a5e0d20488a3868b8f8a4865a4512f72a53365c0a45b1a354aa6", "ref_doc_id": "04f3d2ec9980a7ace5dd0af852d1679836867364"}, "abc75c84-d9ea-4da5-9522-9b45b555e4fb": {"doc_hash": "9acdd0a05521539112cce9f907ccf3b900734b3b537926068d56e64ca0312e69", "ref_doc_id": "04f3d2ec9980a7ace5dd0af852d1679836867364"}, "03a18030-2344-4c68-a4cb-2a6a558b11c0": {"doc_hash": "f09ade3259c47b2e4170d472f510a9a8513da53193bb1e35817798eed83693b8", "ref_doc_id": "e2ae7c4ad61d8c725f1cba48b0a697056bd08676"}, "ec23dc1b-6039-42af-820d-eb503bd768ec": {"doc_hash": "ed302890de489b35f655bfbbb9fc1065669f7f3c1fecb93d00ce8f1e230cb1bb", "ref_doc_id": "349d56d82877332aa239d46ed63ae96132a460f2"}, "4de8561e-4e67-47ec-a453-fd8013ae3477": {"doc_hash": "3c91e5984fa41f5ee1bac01ad896983eae055b2ed7a6b437695d91c4f7bcc37f", "ref_doc_id": "66a53c20d00acf0dceaaddbcf22285b6963dd513"}, "a26457d2-c153-42af-a57c-28c418eda62a": {"doc_hash": "58a6ba482ed43d67354b6e0303074694ed2f1359431ca04421226f748a2c7200", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "966cbc1d-e11c-4f9f-8201-aa0be08f49ae": {"doc_hash": "d3864151c0d215c7b4e637bc4b53b215b27165512680d526d777ff12af7b200a", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "035c7bec-3343-42b7-9b8c-13afcbd2b225": {"doc_hash": "c13473cbc9d00c764573a651d1d1af3deb42aee83b46e5294ddb1d56df8dac94", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "3f8576d1-bbc9-4c8d-aba8-945af6d08907": {"doc_hash": "88bd61bfb2e6e298612b4a2608201055ce1259444ae9da02560eab4b975e1d24", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "82abd7ff-888b-47c0-9d5f-686477bdd751": {"doc_hash": "8de4e303c91d8da1ab3fa6011273fa3cb4ff8ee1123ce7d1c7a1c62cb84cb6cb", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "19f5d0e9-8607-48e7-899c-7aff4f1d76c5": {"doc_hash": "c8f87ddb1a8c254f1c49f8b35069adb4c827d42e23de448d852e6fcf44cfb3ce", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "9b635f6d-9215-483f-a506-571996729e12": {"doc_hash": "c6e8d2421e39fa96e884c872317d2dc6b51fe3756be4261d596ac1f580614a0d", "ref_doc_id": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6"}, "50e81b5b-7b14-4d8f-8448-2bd011c1c7c3": {"doc_hash": "ac0f6745c05777b4fd0ee1c45cb3a477dcd75fc6baf95b28cd168ca9a0449fcc", "ref_doc_id": "160a3ee76bdf4783ebdf54434ea15874fcbcfca2"}, "54c9ba18-d2ac-4cb5-a134-2e9f72a0366f": {"doc_hash": "e25e4fcc5587cd1e9813e14bc8db63fdc0b1ef1f81ee9d9fe518fe7544479e5f", "ref_doc_id": "160a3ee76bdf4783ebdf54434ea15874fcbcfca2"}, "7e1cafe7-543b-4305-ab37-e05b72cc1dd4": {"doc_hash": "e91696149c229f37bebb6fde7b99ddee8e3decbd850cb4bae661316ecb47402d", "ref_doc_id": "b44d415a65f4ba2652c65ce92f311a43dc6459c0"}, "2f6a07ed-69aa-4573-9ae7-4019289536cc": {"doc_hash": "b5c2947f6808f5d1988f2b34d5081357ceb5d1a05277d11f1a1597de26d62444", "ref_doc_id": "b44d415a65f4ba2652c65ce92f311a43dc6459c0"}, "039bc1c5-46eb-40b3-a314-d71d04759c0b": {"doc_hash": "944226307498ab09d76cf9145b5a27546647de7d1aa039851d89000506a1c4a4", "ref_doc_id": "b44d415a65f4ba2652c65ce92f311a43dc6459c0"}, "e0bc4299-6336-4452-a548-358551e473e2": {"doc_hash": "e134818b2b5cf1a0913b5d930912ad4dfd3b9d7ae5918ded6efcc4fc4dbbfd69", "ref_doc_id": "b44d415a65f4ba2652c65ce92f311a43dc6459c0"}, "cb837cc8-115e-4473-859c-21866668422a": {"doc_hash": "fd7c7f79cdd29028cdb23f740ead429c1baccd7441655c302554858cdc7130cc", "ref_doc_id": "b44d415a65f4ba2652c65ce92f311a43dc6459c0"}, "af36e4ac-dac6-4da7-8f10-aabac4c2555b": {"doc_hash": "5191dd3e093e217cde48480d4159f7f326dfade92d4d0d672242815c3b2dfe88", "ref_doc_id": "b44d415a65f4ba2652c65ce92f311a43dc6459c0"}, "6cbbc852-9ef5-4c7c-b1a3-154780aefa59": {"doc_hash": "29a1251b101ddde2021e4191b0e5ae175e1aab4ee4c9229bb59b3d13b4f6d67c", "ref_doc_id": "36ad17f3a41b4149ccd6b58800a832bca7f71228"}, "9df4d9c5-77bc-4dfd-9c4b-5301a23687b3": {"doc_hash": "0f782aaae0567b14dff43bacf6c3679aaa31b24149731b7179a8dacdd9be3420", "ref_doc_id": "36ad17f3a41b4149ccd6b58800a832bca7f71228"}, "f22f525e-ae1f-48a0-a5df-457ff160afec": {"doc_hash": "c18d58229e5d745bea6327236f4c410d037617689bc59deac86271fc8f551bd0", "ref_doc_id": "36ad17f3a41b4149ccd6b58800a832bca7f71228"}, "82dbb0a2-ee22-46a3-b0a4-1687ca2e4e27": {"doc_hash": "72d42549de51bcaecc5a61e3bf125f5c360d885149541af5e2ea758d3bb3555a", "ref_doc_id": "6028c92ec26a27eaa2ba7c360864163dd7ff9b90"}, "edf9eca5-7111-41fd-bab5-edc46ee073bb": {"doc_hash": "b63a7d833428a32fb93b112721599482c52ee635b23f437e463ee63bb5cb5420", "ref_doc_id": "6028c92ec26a27eaa2ba7c360864163dd7ff9b90"}, "82cc673c-7e46-4ee4-b15e-776b54483e51": {"doc_hash": "297e3a8d6f2abcd740c34cce13ae225b6985bc549f07ce6cf13adf7369088238", "ref_doc_id": "6028c92ec26a27eaa2ba7c360864163dd7ff9b90"}, "e9355459-9eb3-4dbb-b756-8b6694997927": {"doc_hash": "96b36b51861028dae7a4c708f9d1dfda1f8f4241ff4caa4da555e46d765b1844", "ref_doc_id": "677697a5ea0bf6e42ad17f33bac5435e517a95b4"}, "d400d31f-71dc-4b8d-9838-6cf264f1e3f6": {"doc_hash": "769d5a3285d21abbeda34843363b4d945619c2407b72e0f6232753c84a3f06f6", "ref_doc_id": "677697a5ea0bf6e42ad17f33bac5435e517a95b4"}, "15624c73-1263-4fde-85f2-746806264ed1": {"doc_hash": "e2fb0b923f191d37a3741dbaefae381a6b079ab3891953246ce9c93a385893e4", "ref_doc_id": "677697a5ea0bf6e42ad17f33bac5435e517a95b4"}, "f476aeb5-f12c-49c1-9a9f-7009e7497b7d": {"doc_hash": "6db33334cb89791b3263a9b6d7e7ccc971c42b898d25cf823dec2712662e0f4e", "ref_doc_id": "677697a5ea0bf6e42ad17f33bac5435e517a95b4"}, "6af8de91-446e-4d89-8591-5d9359437486": {"doc_hash": "81579769b3ca54943b56614662150589afe851e604561b4ce7bf0fe6b727ce7c", "ref_doc_id": "136b8c33391a7e1b5f1958f576f1ef1bdecfdc92"}, "ad9a3213-ef8d-45ab-b6fe-88857077b103": {"doc_hash": "3982a24a3516249eeff9e23e9b2e21dc3b0ec80e3328868ff8cbe826fa517f6a", "ref_doc_id": "2816a1890f140db2081e94e33bfcc4eea7325f80"}, "a8eef57f-a4b5-494a-87de-e4bbfe565fa2": {"doc_hash": "4a9721c2afc1af1d6a8f5857e2ceb51e7e6efb844b55cf3436e4a6ea93af674d", "ref_doc_id": "5a10e563752a8c8b9b4a6f90bf77bc9d6b0a971e"}, "73b87a8d-7daa-4098-a55d-567c5eaa3494": {"doc_hash": "67968d1dc16e82d130abc400fc893949caf0650d8d00da82a855807a03cf797a", "ref_doc_id": "ce1e34a0affd2b1631b4428e19cb0925667d22c7"}, "771b564e-ecda-4358-a6e1-fee10b9c633b": {"doc_hash": "8f05d8c42136f0570f0811c178499815f6e52588bd8ce3f86088de3277200e93", "ref_doc_id": "ce1e34a0affd2b1631b4428e19cb0925667d22c7"}, "2760afcf-4217-41fc-b945-71c19db9610c": {"doc_hash": "268e007455f4d2fb2ce09e7a3786e8ecb8594f341dd60cf29b17688865876d2d", "ref_doc_id": "f61a351f28df52fb9f42768fa9cd91312c80c452"}, "85610ac8-0d1d-4473-90c5-ef76e07f175c": {"doc_hash": "858a27972005af9e750b170703a8269493686d41bb201794d33b9cc711c70c6d", "ref_doc_id": "f61a351f28df52fb9f42768fa9cd91312c80c452"}, "b8f13b1f-20b1-40b0-8a9f-51d26d89047f": {"doc_hash": "f733562551584ff486b3224cbae171f7a99fe803182e0dd5c9a1689e78fb0076", "ref_doc_id": "6878c60abde2dad6460e60de634eb256d40c8f18"}, "c8a214b7-62ae-428a-ba66-d4a3cdd71523": {"doc_hash": "c7f25f8efcbd7ca4340ed407daa858942ce37480a4c9f20c851dadee9196183e", "ref_doc_id": "ae3c2b16ecc23026d83047143b5b36712942ebd7"}, "533875a2-0369-4957-a476-c32a3d60d759": {"doc_hash": "79b7c598c43beaff2e239703537fa4015e81736c91e13cb49c1ca9d5a1d0064c", "ref_doc_id": "fa894ee595ea533511746c94c66c36fcb678ecb6"}, "88cc45ca-fc2e-4308-b84c-3b9ff0ea0c5d": {"doc_hash": "491a7d22cd5a3616b06758ae51ce19c6a4351a254fa9e013e0c510ca23ac2362", "ref_doc_id": "fa894ee595ea533511746c94c66c36fcb678ecb6"}, "dfde03af-44b1-4c4a-9f15-d36e8ced7edc": {"doc_hash": "9de34bff58d628938635dee828bfbb53118014af425653b10bc6db3876e6568f", "ref_doc_id": "fa894ee595ea533511746c94c66c36fcb678ecb6"}, "f19991c5-f563-4e02-8911-6142d940867b": {"doc_hash": "b8096bdad85ea18422462f0d90bfb3dbc62c2ddbaa29e5976efedb531ac28a1b", "ref_doc_id": "73a1295b60d8aba72eeb39f05e57338928567cca"}, "b92b62da-d5d5-41a9-960d-238627a0752f": {"doc_hash": "d199696a11215ade8813d5f776805be00b56d08e25423927ff74a6c09f5c6d99", "ref_doc_id": "ccbe8ad6630f6e231992b45ff35309305f9ae208"}, "7a5d0124-e92c-4646-8756-87d80320b0a3": {"doc_hash": "8b4f2d1ee8b3846c4e07899e66f85d467e44fe7fd2e43e016b07e0077bb0635d", "ref_doc_id": "9674b2ef810b4e3148e81c1fcb72a884b3156506"}, "6bb5b131-6807-4b5a-9b04-873495a29932": {"doc_hash": "9efff6bc8a6f2852850efc64f435c5c4e8adeb7a5286424500a481466d7ee314", "ref_doc_id": "9674b2ef810b4e3148e81c1fcb72a884b3156506"}, "1f10a18c-c2ec-4395-8a36-8f16def843fc": {"doc_hash": "5432fcb7fffc2f1dbf24a522c94f9c18958dec4b5e00495257bbbb3873480fae", "ref_doc_id": "214de1548039954ceb3b61eab92b718ef015721a"}, "fe0d58d4-ec44-48b9-bfe1-755bd3c1033e": {"doc_hash": "d81071873ef7b5bd9986035f7c06d7d651d5b42b3a04effe3bdd9cd2902ed77d", "ref_doc_id": "214de1548039954ceb3b61eab92b718ef015721a"}, "aef9a616-847e-4982-8c3b-d8c9f27bdf19": {"doc_hash": "22c6701594c64bdda615ee1fcbd816082e05b47adb8b415b5e632ae388f700d9", "ref_doc_id": "214de1548039954ceb3b61eab92b718ef015721a"}, "5f959b35-f3c2-438f-b652-218935d8e6e7": {"doc_hash": "9a33b9f86238b52ae5c119a1fa373b2f9ac76b10ad2e6ccca05705218a3531ed", "ref_doc_id": "214de1548039954ceb3b61eab92b718ef015721a"}, "db85481e-58ef-44e3-b7c4-f84a327d6ad8": {"doc_hash": "2ae0b3066b2d21454c3d5fe4a2b58f754e6aba9fd5b5c8415f97cc1fc27a56b6", "ref_doc_id": "78e4a99b02ef627a8bf0fb68ffd9cf938d7ed6e9"}, "2ceb0276-f6e4-4bae-bb39-4495a5900669": {"doc_hash": "73e4649c4bf748b9e1ddf4c16932db468eb31b6381fe33c1ffe7d0efc23cd727", "ref_doc_id": "9cfa3947cc291d1e8e3fc531bd7b146d143d3c40"}, "71c5c3f8-3d47-445a-9a9b-1a4d9603e17b": {"doc_hash": "3bc93eb189c7e9aaffa687c6dd1b072514f5d82930607fa65bdb3471463aa0fa", "ref_doc_id": "be160c9cc5ba7f37436e8a2b3df0fec060051879"}, "dd6613d2-d102-4a8f-9006-7c31fc6f8965": {"doc_hash": "1b9e41866d2d7b9150e9389782708163559b8e5e18d8251920168260af8fa680", "ref_doc_id": "806afee7-97ad-4579-93e3-8c32e6dbac2b"}, "a7844479-bfc3-4078-9161-8051777affde": {"doc_hash": "adcd3e3b3b3223d8771308878ef2310c5a5c261d59191b48a732eac084f73e58", "ref_doc_id": "806afee7-97ad-4579-93e3-8c32e6dbac2b"}, "7d31ab70-55f1-4523-8ec2-19e616c04470": {"doc_hash": "d4017b193772b7d257b9e56996c029e742100fe58caf2d41bb12dca996db0762", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "6be4d1c5-0e6d-4792-885e-f2fa760af469": {"doc_hash": "35f1dd5732834423a61658bea79d6f64d23984ea59fe167130438b2f2d6855ec", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "7dac8eed-fcfa-4d81-ba1f-7c744ecb17af": {"doc_hash": "fe6a1225bf9c7d3082e7cafab78fe5469341a57497a8fb1f46ba2fbe26d0ae04", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "bb7814e6-6b61-4a03-aa47-7e171e8d40eb": {"doc_hash": "785118246eff2bfb21d77e3214aa5e11357060e02e9d82620cd037c0988c61cb", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "b8469c15-fba8-4920-acc0-15daf71b261a": {"doc_hash": "bb6f76ff16c8e5fa8509a71a25437385293cbf23e58522622df07c739f358d74", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "decf4224-ced9-4bfb-a210-363124f9d120": {"doc_hash": "4ac9a4e33890a836a4662ef36a9846a84b24814d87c540d26fb2f9747c5e3ad5", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "0e4d8b11-2afc-4d35-886f-ddf393c8d891": {"doc_hash": "c2f8d470f072b06a0cbf320744d064f59a6bd0cfd54a26d33f247ba9e9a71083", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "b2be3e16-de93-4923-9c13-374d2f66547a": {"doc_hash": "2a6b6a5f7ad5bccbab403a43f7fd5292faabd505e814e5b83fd54fe7cb524840", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "aaa9b34a-61d7-4bf3-a2b4-a42808693091": {"doc_hash": "38e77f86f9aa71039384efd09ce62cc5859399aa2c6f05b14ab16b92a31d0cac", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "2b3010f0-51b3-4c3b-bdf9-fc533c98c6b7": {"doc_hash": "2d3f1c0358ff1e208228bd6338f233dae0ac115ad1b7409ee53f421802735de9", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "7c0f9935-c11c-4d90-a19e-c5566823c75a": {"doc_hash": "0d6358aa6ae7580f7227cc6070bfe1444428f3d29916a8455694ea592a102529", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "df6ce6ff-1f28-4260-8c1f-61da2f96575c": {"doc_hash": "4d5f086336ab8a3f2710a30da78ee6832efcf899f664817791832c0c538ea32b", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "4beb65d5-0111-4380-9c7b-601c7c7ccb66": {"doc_hash": "f8661f3e1e5e2676019238eb9b98307dc39abb647790b1909fb618516f379755", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "f4c44992-20e3-49db-a0c7-33f894b432c2": {"doc_hash": "a99175b987c2bb891773a83eaf13d42b75eea692117482b41dac66bc0dc65894", "ref_doc_id": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df"}, "f459ddab-a159-40aa-82a8-c6e3095211ff": {"doc_hash": "4f55fc5270786286ff18688a7051e748eb8d2c8bfbcb7f1847b549b121fc518d", "ref_doc_id": "0f5864b0-74e4-4973-9cc8-d624bc4c2cd6"}, "c28f2d61-c3f0-42c0-9d8b-9b7279ef39af": {"doc_hash": "99c292e4037f1f2f4b3d8b7711c11d681a25c95cabfb2a6b6eb56fa719ce5544", "ref_doc_id": "62bcbfca-ce89-44bb-8dc6-9843f78f6b92"}, "e00754e1-856a-4035-bf7a-82661ea3bdcf": {"doc_hash": "14ca135ecab768ca194f893181a94e93d3c78a5a3d6a5e3cae93c454dbbfed44", "ref_doc_id": "62bcbfca-ce89-44bb-8dc6-9843f78f6b92"}, "c8dbffbd-21f9-4fdf-9013-94c35d69b0bf": {"doc_hash": "e65adb27f3797bcb658f0a4df2940ee555a03200452dff6cdf39a0dddfd2dd8f", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "b75c6264-2f48-48b3-ab19-58eb5ce96bb1": {"doc_hash": "78889333977661dbe314d490f9f5c5429adc1dc9e8d37428b74b7f4e08fc58fa", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "fc64e56f-3ed2-4c65-a3ff-a69fc5fc0755": {"doc_hash": "28e3d5ae4aacc772512a40426aa51f9ddfd4698222343217b2d29d885ec7e1dc", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "2a822377-72a3-46be-9f90-e34cc01a434b": {"doc_hash": "778c143bb1922e9fa1981d57708f708566e4a7e5a7a8475389e80ea01e572a2b", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "7798a42d-7584-4140-b0ef-771c3a3a3a4a": {"doc_hash": "2f5d3c6abc66c17849d3c60348f59af4601ca6505e64cb574ad390f170bc793e", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "3e379f41-4057-4271-a08c-40310bc6b91e": {"doc_hash": "d2db20aca025876bde496ded6fcdc89bb477723c20bedba6f4d69d4e1f685838", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "4cb9b30c-403a-4934-b03f-adf73b575d49": {"doc_hash": "506108714d8c6e85e987d45e5124040a958942c9469b9b2a9c15042b6df4995a", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "804f8648-45ea-40be-9e0c-254bff0d916d": {"doc_hash": "3cf294f430da8a1209bc7b10e6bd4cdf685fff3be80d09ceb57470e061201fbd", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "5f71c598-6da2-4a1b-b509-fa351fe10047": {"doc_hash": "e510d0efafbd8d42ddc0c99ff7026abf9a35b131e848fa7ff0b75bb9af535cc0", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "525750f2-e9f4-4a39-aca6-53eb8b29d0df": {"doc_hash": "3bba397e282c984288bfe4625f2b6a014428d4574fe2805225656d617156b9b0", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "fdd64f4c-e770-402e-98c3-65950c7ab9f7": {"doc_hash": "0adbd5d70ba5cc4197acf865336566d694f0b698a493ede1f31c97227d132809", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "d68b0d55-ac69-4e09-86f1-6c69307f833f": {"doc_hash": "e1c6feba0bff82cc4549c0f65fb221276ead758d9177697f3c3af2b9a76bab86", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "8b24c3a0-1204-4bb5-b34f-80198b6178b3": {"doc_hash": "ba9e0b63e3023ed3707b3e9ed6872740ea2d29db628605f9b01e619ad9865c18", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "e29eb6c3-bbb4-474e-9989-3843bece97b8": {"doc_hash": "8be80dfc65f34f9aedc2fa67fadb4627c4b20657076a34210d8803333468e184", "ref_doc_id": "09c8e36cb3984714355d918bfe2a6b048a3f98e4"}, "ee19737a-936a-4ec1-85ff-9dd22ac71ee4": {"doc_hash": "57bfc240a5025d8bf2d3ca84bc890c2ff88b805e9560ca188b542068b843ca0d", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "89798c15-9d63-4035-ac79-13f08b651574": {"doc_hash": "6acde6b37787149296b64112ab80e9cc03d3df296ec2e72c73ef11650e55b5ce", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "e7139d51-d3b4-4e21-bb5b-3899e9121717": {"doc_hash": "f283cb3c78b1d06d438915bafa62331d9470143e9d98a00050fe986ec1ad2812", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "7f476333-6a5f-4364-8b6d-45b51cc3ef4f": {"doc_hash": "4587cb9b059aff43dd81e5c55e2f3d34c2822dcc3ed8e300ace01fb626d44b53", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "951dc690-d4c8-45b9-8eb9-daba7b6f2dd5": {"doc_hash": "201746337df612beaa5ce0b1ef62308fa7d00da77f9931af480b3a6ca15f2d3e", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "efd1531b-905a-4962-beb1-aea132729c5f": {"doc_hash": "e9eda29c81743b110ce5d57b621effa58a560269997c9cc6ceece9b44cb06ced", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "6464c845-ee93-44ff-a6ce-61ebbbd5342d": {"doc_hash": "9a9fd16090a5ca427eaa41ab87d76f7bcbcdb75821d5170a4a19cf19fb527e74", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "fc818107-ce22-4ff1-b922-d44336d7c575": {"doc_hash": "1566eceddff5078618186f9bc0eef498c3bca67ae8bb3f81ec234afd2f8c73ce", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "a62dd3ef-7862-45fc-a7a3-becc44032a19": {"doc_hash": "829b38bb17e5943a85cfe31beadbe50449ce9efeff581bdfaae3aa0e01f329d6", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "4725961d-843a-4e78-bade-bef241b86845": {"doc_hash": "5749a1a6c151806747ba48a306dcf79a9ee96ff4e289751493549d9101a15208", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "f8993b57-ca80-4ed7-b5a1-72a22b057b5e": {"doc_hash": "f051ea134280bdb380a7d32fd47001177944d33a8c257f2ec9add5f0a48d82aa", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "22235839-a368-41a0-94a2-9d795c10f119": {"doc_hash": "1a5f278864215e066654c32587d37029830ec38c6a2d03b5bcc3baca92631a18", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "29078ae5-ff89-48d5-9caa-ec6766c8132b": {"doc_hash": "2c55437f4e7dbb2dcf80fd35d8e1d0e633be634ebf484c5c5d57801e75b3260f", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "dfc1f939-2723-4aae-a12a-947b3a5a45e4": {"doc_hash": "ceaae6fca426589ba3af74cade970dc1a8b0bc5925b7ba9e8623350e5133f37b", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "3a9454fd-1c0b-4b2f-9a34-18af715a19bf": {"doc_hash": "57245e8482826e0322c9f8b4d57d9869cea74d68539751b615060a03d1988d04", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "45ab2bda-3283-45d8-b9fc-c30deea75bd8": {"doc_hash": "4bee4cf4153267c7a2caca58b6dded95fdb813002fb53a8e71b2629648876856", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "03ce0c59-5887-4f0e-bd9d-3c4eb0a4734b": {"doc_hash": "b7b7d4871214851626fce05a4e6da39cd3ee357e3944e62fec2e6adf08b08213", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "94c7a3ff-59ed-4459-a732-0fe152c8296c": {"doc_hash": "309919143ebbb03f82ed06270fe0ca14c88526b8c1b7e9cae07f7db6ab589d27", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "e2ee2aba-9da8-49cf-adca-da05ca9ccd46": {"doc_hash": "e4067d9183a3aa8f5b2f43b8ba095b4cdf3a354a54e93106a94fbd00b73f0a75", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "0cee1c36-1282-456c-a5c5-99bc40438c9b": {"doc_hash": "49b0638ba23bd184854e8f0aff5da3b30cd8ac907e36bed85cd3d9a6147bb054", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "cc2bdb5a-b872-420b-9cb4-c80576cb419a": {"doc_hash": "5db64a52cc77514b7e3f758b1ac12d99314b2dbd7046a4ce0e8a405ea992349c", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "b7ab304f-580f-4036-84e9-de8298ab7270": {"doc_hash": "0affda9374ed65239fe59e755d149c3eb6e659c5981d87ba71c8d6c83a423dec", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "4acd812a-aeee-4369-b0d2-7392efa847b3": {"doc_hash": "f2eb3e79e6ee166cacb6b28db153d640f1e477e45151e31ea570f9afea8a95ce", "ref_doc_id": "18660e7038d4e091a60804024bd571a387761b86"}, "3fb1c51f-8a11-4f78-8ad5-12f0dbc73d75": {"doc_hash": "43fd5d10f47c4093f293bd05338139adf3069e8699a1b647bd6e4ad864cee14a", "ref_doc_id": "2a3e300bea3eb45247903995c576e4fd656ea90b"}, "333c2f1b-fdca-40af-a374-050214c26ec8": {"doc_hash": "5b98c9e1e298b8da46c207ae0a899da2ee7294a23dddff3b4a606c3318efc4c8", "ref_doc_id": "2a3e300bea3eb45247903995c576e4fd656ea90b"}, "e38855d2-6105-4633-bced-a10ae256e6d0": {"doc_hash": "683d06cd0217e963b3a1a1e565a5fcfe9fba2d73316e2441e24ba72f9d187785", "ref_doc_id": "2a3e300bea3eb45247903995c576e4fd656ea90b"}, "e2884c53-d9ff-460a-9a62-50b8cadbc350": {"doc_hash": "3fefee2bf8c9db56e7190725a501ec98b4d5a6b156f2e96cfa5b73cbcba0cc59", "ref_doc_id": "cfd1819bb795d7d9fee9be05d17d86899712f257"}, "8980caf0-33c7-4535-90bf-95f38ee00230": {"doc_hash": "ea1daa8f87815585e75b8d72cc410d1d01af58c8d94ee86ab0191cd2473ac4e9", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "88fa6a6e-5fd9-47fd-b9e6-3046886ca17b": {"doc_hash": "d6ae614556d3868aebe65d264a695cd79fb457040bd62c2c146d4dd15da601a1", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "fddd4962-1820-471e-9730-7ec572d9f0bd": {"doc_hash": "83b127b54b44ae8d1e00df1a3f5a31c1f58864f1e2e289e87b60fab59f24408e", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "20524160-cdff-4389-b0de-4e265b2391ce": {"doc_hash": "6adb0dadd0553cb21468ffb42333d82b8531a438127dfbe1842e78b57b3d6811", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "7520b6a4-73fa-42d7-bacc-9ed5fb82d3e1": {"doc_hash": "4a40eff1342e1125cf9f5dc0d3ebdec2977740c2a4f9efb825399129809233f0", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "f3ac19c6-4b69-4d06-a1d3-ddda3708019d": {"doc_hash": "c44bc98c86560ab48b4e186efed5b7f3fb497d7ad2332c5c8ace0bbf58be59a2", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "039d18f9-8af3-4c70-8b73-913a62c42ca1": {"doc_hash": "20af5ebf9ca8a6a9e82c5faf2901c702a195642fd06412ee1cf0660ae6015427", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "cf019f66-1655-4dc2-82c4-9a057bece169": {"doc_hash": "b6739afbdf73d5c594e0b59f85d1c2b9e84f4d300be8a453c7fbe75abc493de0", "ref_doc_id": "666e3c1cd09c05170c5dd70d0c110f2527406b7b"}, "532970c8-3a8b-49e5-9abd-a90d003c79da": {"doc_hash": "7df41f52d64f551d87a636816de39629951ff8e6340afa97f70657b17c4942cc", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "3ac1cdaf-9662-4f97-9d6b-b007575938d8": {"doc_hash": "8d925d3142d8831ec8002dff6a1c94d83a068b68e56f6b06b038b1a221119280", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "f173d899-f6ac-4d15-9464-6d31a0bb6c6d": {"doc_hash": "de6c5758aaecabc35de49e89b5c5630bf95658826473feb5ad80236130fb80d0", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "9f8cb95a-6ccc-4e3c-8b13-015a2a2f6de5": {"doc_hash": "6970a1d7ecf0b31f3792f7008f380119795925aef5fc21098d43a0bb42dc1bcd", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "454bb4f2-54dd-43f6-b8b1-7a56131df743": {"doc_hash": "18fa987af0bf86628998500e948e6b41b705316d7b674aa5634ad094c344e1a1", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "2d4f6010-85ef-470c-857e-5783430647da": {"doc_hash": "184cf6feb941768835c9a3513eb4b1e012518d7a2b7c60fd3b9235c42fe0320f", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "08cec817-f4d9-405b-904f-8122c6fd664d": {"doc_hash": "d7fc6cbcf1a27afb70258e648254ed2557217d5a7fdcccc1542f72aa73b7ac12", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "ce79b4b5-b253-4646-9b88-940c48b0d0be": {"doc_hash": "c08230c20d08c3eb6aaa786b6eb420cce21924143e2f778a669b3ae3ab1ee590", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "389c5fbf-ceb9-48d2-9b33-b3903709a3ea": {"doc_hash": "bf84d22af760ee8cf5e1d78d80dae9d4e7c022af75df08337cea003008a6bd4c", "ref_doc_id": "b75d40a45b416d38cd18c797e37294662068f687"}, "09be57be-8427-4eee-a563-6bbf472d3f0c": {"doc_hash": "0debdf08c7f9d84495679ca573ac953ca4d21e0606c023fc1a56f6fc095cc3b3", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "b03b9754-6908-49f3-9735-d753f866c90f": {"doc_hash": "a48fdfc9f2b0de0ce39ded18c1e3d88ac586a934176e1e08f68742b06adafde5", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "d3963322-8529-417c-8998-6fa447d0909d": {"doc_hash": "e6aad5921816f15654b27b81e7b3d0f5e4900c4a68d7ef39fa7257dd913cf9bc", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "c4244af0-71b2-4341-a7d2-deb94524a1f9": {"doc_hash": "da09e5ee9c74742b0b121039313bf76a59c702de0dabbbb6a9489e5f4180fedf", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "3a549f42-e38a-4447-8d6c-c00c8cfd1add": {"doc_hash": "384175a77b1d26f953ba361d684de069938034300bd64a18a59836e9b5c844c2", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "8f778651-c582-4228-8d1f-688b1cd88160": {"doc_hash": "a4ffbf69813d6992891bc5623967060c836a88a0f3501eabf83604c479ff699e", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "6a2b6dd9-0a90-4e8d-a62a-221bd160f8e8": {"doc_hash": "c3dbeb5e499135c36e01641e7db1cb52079293c28e68490d2feb232158c46fe5", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "aa36d69f-d114-465c-8893-ce3877b2258f": {"doc_hash": "0c891a307a7e55ffccb9a653974a66dbd3175094da24158a0e95b98c7d0f8b7b", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "8ce95d11-94d1-4d5f-bd5d-7dde3769bd76": {"doc_hash": "780662ca353c199c4583905a5ffc1dd285394a6b5ec885ae1fac630a11b9c5d9", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "9b902ae6-08a0-46ba-8757-f0009434a967": {"doc_hash": "3fdbc5fdb3e4f0095d375e21c96c9b78ebb31db15f9e034d91f5ef34708ecacd", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "7153fb8a-8a3b-4ae3-9bed-a2b5b0673060": {"doc_hash": "775280da990d83b89c4197dbb58777789d854a1176495dacb6dbeb7b5892d423", "ref_doc_id": "741d4a200fee8394e6fb61109a101eb0f93b8069"}, "f490e9e5-77f0-40eb-b938-3f9e57d662f4": {"doc_hash": "590b65cfe20a194ecadc3dad1d1beb8a70b96177b00b12a642d551fa872cb271", "ref_doc_id": "8b55b0fb73624beacad6509e70c622514eb5fb50"}, "e23408b1-fd9f-4483-b61a-ff60e8cba19b": {"doc_hash": "44fd98544f5e04ec05ee95db3c380eaf30515098d1e178fa42253421036528d8", "ref_doc_id": "068c55c5e55e9108498dfb5aa1e32096d35386fe"}, "813cc01e-a522-46d6-a807-b3191ee5aa0a": {"doc_hash": "dea7af6fb83e6e7abd23b814ada268760df5a1f826237baf49c17058b3a87018", "ref_doc_id": "068c55c5e55e9108498dfb5aa1e32096d35386fe"}, "be0123b0-1ccd-4d48-9598-c05be12101c7": {"doc_hash": "5f290ace64253d48f6c272811be64819e8048a08458b61ebd9f05cf97bc24ce7", "ref_doc_id": "068c55c5e55e9108498dfb5aa1e32096d35386fe"}, "66d93703-7bf6-4f70-9bc8-51e9869bfda4": {"doc_hash": "7839f950d38b5eaaabbed98281836415375a512a9a26145b244cb0d602b0b733", "ref_doc_id": "068c55c5e55e9108498dfb5aa1e32096d35386fe"}, "b6ada1ee-b857-40a7-bc2f-c759494f8f01": {"doc_hash": "4a4936a37fae63d42591c730f8f013dcfee8362c5474104ad555a3aad56144a8", "ref_doc_id": "068c55c5e55e9108498dfb5aa1e32096d35386fe"}, "7dfb607d-10fa-4f11-9663-ec03be69baae": {"doc_hash": "9ac442bc6665678973a2594f966b438f46ebd7c16f5868d40339cf09b5a065b1", "ref_doc_id": "7930fa385ef54a9514030082df5d2db8f173eeb5"}, "f175054a-c70d-4d8a-98d1-2a2c0d630ec0": {"doc_hash": "547f4ace8d42256fd6ecdd7c1c59a32fcca671bb3d297a53bf29b008611b3cea", "ref_doc_id": "d5d215e5145e8f1f87474427a4ba7feb8be06225"}, "51417d5b-7996-484b-8b77-777b739e6267": {"doc_hash": "92860457a65cc60e6e2b1eb39fe3613c9682b42a79e9c9321edfe3afc62df92f", "ref_doc_id": "d5d215e5145e8f1f87474427a4ba7feb8be06225"}, "c93957ee-48dc-47b7-a84c-2fcba3cd3fb5": {"doc_hash": "329b4506ff10e03ce49f72b35bd98a3a68b996158d119e45a1629012e6945e1a", "ref_doc_id": "d5d215e5145e8f1f87474427a4ba7feb8be06225"}, "09de94f5-3ccd-4ddb-bf66-0c03afe935ac": {"doc_hash": "74017f52931ade8cd5e9420116a4fa980dc87da748b9f4a1e0b95303d9d26d90", "ref_doc_id": "6d86abe1-c3e7-4a2f-98fd-5fd754d13b14"}, "da1b6b8b-c1ae-438a-8011-2bb99cc7377c": {"doc_hash": "c2d9b52f86ab159d57d9c7068a099efa529e9463ebc86f045cc60121e97af38a", "ref_doc_id": "6d86abe1-c3e7-4a2f-98fd-5fd754d13b14"}, "70fae9e4-62e9-4629-a9d2-40cf1e08c6ce": {"doc_hash": "5222e3a25f1919a0d682c799fd0931d67e1cb2cec7ad815daff7ff2fd6fe9e6c", "ref_doc_id": "c984102b-96b8-4d63-96d0-50e3593207de"}, "45f3f08b-6bd9-4539-8ec9-e64743eed1ea": {"doc_hash": "cdb96bfbc33c11c0020e92ab0b5fa547fb8c4dc8c7d3e76e0f82149238bdc535", "ref_doc_id": "c984102b-96b8-4d63-96d0-50e3593207de"}, "bd51c102-fded-40e1-ada1-a4e3b2531b35": {"doc_hash": "ec87be9a8c7b95fe3c0bb210fa6d5c7a08d119c793f2fb0315d7c0ed5e253ba3", "ref_doc_id": "8d5c364e-bbea-4164-be1f-a697d3b1bc85"}, "fed1452f-1123-4670-a23b-e1cf37aadedd": {"doc_hash": "0a41e4e4cee5a0d0b0e1a113ff8a98d43a5242b9d92920c1b9c6bda7675d72b7", "ref_doc_id": "8d5c364e-bbea-4164-be1f-a697d3b1bc85"}, "05e83d09-26b8-4c39-9ce3-341200f7df98": {"doc_hash": "d304b4b86ca22ebdb6f04f029ed6df29b1d5c30870c1e434eece710880b189d4", "ref_doc_id": "5817b1e0-4f1b-4eb0-8042-50cbef220bab"}, "b4c39f2f-0273-41af-ad16-be00c84ea5d4": {"doc_hash": "44089809623670f8ab4d981a8b528d31b526b6917d829e5c5a78deb61fa05f37", "ref_doc_id": "3cf8ac75-17d2-45f9-983b-96be264f452f"}, "92aa499d-8a2d-4775-8569-457727277746": {"doc_hash": "a7efdff36fc365e169e5f0718958befe495654a21946602877031b2a0ebecb1b", "ref_doc_id": "260df489-cf5d-48bd-87fb-5513962ef998"}, "42eeafd1-c862-43cf-b56f-ad0ce6d162e4": {"doc_hash": "4e6a0717cc9c48e419d3508e24bdc51135b3f52bca69b9c2f69fcf8c59a44da6", "ref_doc_id": "f728041a-aadb-4eaf-9c6c-8f2d6bb3f5ba"}, "ac11b358-3a0c-413f-83a6-25f7e3db9bba": {"doc_hash": "e7e7d0077017268b1c4ff2509f38a6396190a0cb5870fc5db4c10fa560ba1a8d", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "7ae119f7-cd34-4c78-97c8-3e359bafffa4": {"doc_hash": "b3da62a8b8f324cc8b49e8eab84cabbd36137ceae6ba90a878c06a02b8a55ef0", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "2df83cac-83ac-44b4-88dc-9aee4fb2b10f": {"doc_hash": "dff7e32c1e58aa5c08b81d29f3301d17612baa42590525af4dae2a961bca9806", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "87e9252e-9f99-4687-b2f3-a53f027ff1fb": {"doc_hash": "6ef1d5e02cab207d9deb70d4dada01514b0e464f7722419f5166872cd0a40b49", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "c864c9a3-f194-4941-a84b-32993fc929e9": {"doc_hash": "9859840cbed5888d233925ef5adbe0609aabfc2db93ee4c2aa2fdc826446db07", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "65b2e529-8e8d-4ccd-ab47-626470553617": {"doc_hash": "cba8d5d813033869ae299854641bf1af8f802d929e82777523f56984983b5065", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "cb62a6ea-2503-407e-b751-1439099ffce1": {"doc_hash": "bf99f83bf2b551c65a73dd77f43e2c8b0bbf5af93356d17511a7adc058a25efb", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "90e1a3f2-8299-4885-8ffe-1a321a811c5c": {"doc_hash": "f3a452155b80c331528eda5bb3a0f019cb8546bc3127157c26785743cf67e625", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "a8959c5d-e0c9-4698-8a5a-34a5e499874e": {"doc_hash": "8c84f3807094c29bfc3cb360f6704b5a40662760fdaa91c5f9835d87978db2ca", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "b99322d6-96ac-4eec-babe-058db0c4e1aa": {"doc_hash": "a527418df8e05078e2aa316b1af0cfb30767115f212bfc0f4eaef7765a4940c2", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "cea5c4b4-97f7-4a93-be7d-a2a0b97994b9": {"doc_hash": "57aa8e6a80c740988dd16d513fcf91fdae0e36e0611a11713f68472dc97fb3e8", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "9ae4b014-0b83-4905-970a-904987780cc0": {"doc_hash": "2aa6bc37ade477bc99a78c5860852f6d5f70d2f97b9dfc719e48a03c023fae4e", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "e8b85e73-4f18-4fda-b98f-8771e793464c": {"doc_hash": "e7ccf1afb11bca20786ba35fa9d7212c0513ecb95767806701cebf904eb46cc2", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "b29aaa44-cdd4-4b8e-9738-61dd0c221368": {"doc_hash": "3cfd2206cad25708ba17ca537d56032b663e391cbf998fdfbccfc830b7ec63bc", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "61bfe5e7-d80e-4724-85ec-69f149d9bd35": {"doc_hash": "7feed85c53dc6f417a3daf8a6c38c16f49ec1a75fe8b9597d09acb6394f85039", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "655e70a1-30a4-457d-b4eb-09988d3d6910": {"doc_hash": "2d69fb4135d78a44f3cc67a00d3886980249139d08a79792566cd63ce806522e", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "b21f39c4-6a3f-4d67-81f6-d6d27983440e": {"doc_hash": "dfede93fae3b84a54557c04344ee4e8ff53075c11229729e834e499914ae1214", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "6012082a-0274-430b-ae87-392cd8a10016": {"doc_hash": "9b8e1ea50a64da5499881a81c0f8f236a07408af67442875bb4722069008787f", "ref_doc_id": "0244e36b-7bd3-4a6d-982b-99c36271e89f"}, "ff1337c7-433a-448a-bbd3-6f74b2fba314": {"doc_hash": "b13514bc79d0dacc3c25eca4647f1435758e8797e5289926e1e840feceef1932", "ref_doc_id": "7a6891e7-37a1-4f88-8e86-81462c0aa00c"}, "04d7374f-ddee-487c-86bf-ee78f126bb8b": {"doc_hash": "aa9a8f49bb782f3c65c23578f57ca56dccab2ec59229fbe4db537a8dca332132", "ref_doc_id": "7a6891e7-37a1-4f88-8e86-81462c0aa00c"}, "6989c740-8184-49ee-ab04-c509ff79caaf": {"doc_hash": "6ef29fffa34bf37e292449d55a5e783220a17428235ed63e93f1edb7ac7d7ce3", "ref_doc_id": "e8b8f78947e9728f095b1f6e331b60f46fe89707"}, "7a27155e-d844-4eb2-a1e8-ace72a88b86b": {"doc_hash": "927e6c09abc053ce1faeefc03efffa28be4f5a24d8c06bb23c6b41cd36d0ceae", "ref_doc_id": "91e0aa3b45c62b81946b2373213cd67a65bf97b4"}, "22880495-38e3-49ea-9f7c-b975894ad719": {"doc_hash": "efd8dd02489d691d5128cc610b3e3d5f95282904d029790c44aa62fb3faa4cdf", "ref_doc_id": "91e0aa3b45c62b81946b2373213cd67a65bf97b4"}, "671d906d-f7c5-4b9f-bc47-83cf7a805534": {"doc_hash": "cdc258267c3f49a7eebae3a60303c066d9c0404e1ac290f76a82c9366422159e", "ref_doc_id": "d74edf5761cd6546943abe8777543addfdc504dc"}, "5f06d214-890f-49c2-95f1-f0040b8df79e": {"doc_hash": "59b2a4271a17af4dafbbb6fca02e4adf47269441af8fd12b2f555fb2436054db", "ref_doc_id": "d74edf5761cd6546943abe8777543addfdc504dc"}, "5add8527-8444-4c01-a4a3-5ddd9e6deee4": {"doc_hash": "2faeee008e584f89fb8e36bd4ec6902ff0c19d50b0f614354335f2bb1a1fc49e", "ref_doc_id": "d74edf5761cd6546943abe8777543addfdc504dc"}, "d9b035ec-225f-4ab6-b4cc-b457e35feb46": {"doc_hash": "63ef58afc01ff379d984ccb527cd13f96465d17c5646d0f46c41854b7340f753", "ref_doc_id": "d74edf5761cd6546943abe8777543addfdc504dc"}, "cd5bdcc4-1d77-4923-b31d-5d4ce16c535e": {"doc_hash": "178abbab9708a5df21e1ac522909f9a8557061a4d4243e2732733d26723a4312", "ref_doc_id": "77695e28dfe349ea832b066eea56bdeaceb5e426"}, "bbb279bb-f780-49c1-b8ac-f5690f68411a": {"doc_hash": "c7e08cd8662329ded9e52caf933be8337d84f920e8986a1e0694d1d1c747cdf9", "ref_doc_id": "77695e28dfe349ea832b066eea56bdeaceb5e426"}, "a9791dd1-9eae-4312-914a-001d13a25528": {"doc_hash": "c68ea565ebda294b020703b21278156eedd2859645d5f6952f89efd0bf639a44", "ref_doc_id": "77695e28dfe349ea832b066eea56bdeaceb5e426"}, "98730eb9-92d3-41c3-b296-5ce71f766c21": {"doc_hash": "3d0eca838d2ebbbd8a3089292a73594d4e70b876a4404722a73bff6c2248ad61", "ref_doc_id": "77695e28dfe349ea832b066eea56bdeaceb5e426"}, "88ad2183-652c-4208-83c3-3b6aa5d103b7": {"doc_hash": "0797c18824d2ac32b4f115ba96b85feeca421c23b4263dc2d5f550f359056a84", "ref_doc_id": "77695e28dfe349ea832b066eea56bdeaceb5e426"}, "e7e7e3aa-e4cf-468b-8e51-16d56cc43feb": {"doc_hash": "174f38e1f91143db720c47257925d7f1f2f29566b2fabaccddacab0c7d26a8b2", "ref_doc_id": "77695e28dfe349ea832b066eea56bdeaceb5e426"}, "6a226bf8-b35c-4b8c-806a-9bbcd6114d50": {"doc_hash": "4805b9facf8e0abadeb8014becaa0f5bb258ed3fde97354f445b237ef4899089", "ref_doc_id": "ee00387916acf892b8ab37b4abccab18d9d69c7b"}, "e6b1106e-7bc2-4704-bc06-9051d36e3f26": {"doc_hash": "25dc1830e07b40a0c301f40d18a33586319885a8f30bbe5cdef50b053f1b0f57", "ref_doc_id": "ee00387916acf892b8ab37b4abccab18d9d69c7b"}, "e5c50833-3bf7-4105-b936-e9e290ea9e1d": {"doc_hash": "7f32146cb21aed8abfddde91fdbe678bd7e0cc92bd81c5f6e80dc61c1ef40681", "ref_doc_id": "ee00387916acf892b8ab37b4abccab18d9d69c7b"}, "8435fde7-d320-4435-91bd-3e95721ff2e5": {"doc_hash": "1efea14097b87627dbf27a2ad8ca04e3606572ef59aea948dd201d29b4c1d126", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "d6cb8f90-f7bf-4490-8459-ea118396e050": {"doc_hash": "26bb36f7aeb6a8f395329ba54a9517a602a0e93cbdbbcc5b5b691a8875f54595", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "7f29bc6b-c6c3-4634-b92f-5e5b0dbe3048": {"doc_hash": "a2e24fa7ede1436fab2cf4d83daf142a9d40f5ad58fdca6313f85a48f0e95597", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "d7809d0a-1fb2-4a7f-84f7-a5614d277b97": {"doc_hash": "691acba162fe71440abe40fc4267b4870067785cf56fd8e10b8ad4a19241c022", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "14bf9fcd-b121-46bb-abc9-5c470380b7ef": {"doc_hash": "1cbac9bd73eb7c004baa1d1a6c7c5f54b9c4c97889260d315a5443862b346518", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "4be896a9-459b-46f7-909f-53cd7801f418": {"doc_hash": "af54fe667ace1563e4f5f7102eb7095c115d8d35fac15794f460f9e15fd5d28c", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "a3e39276-eebb-4702-bc87-c667d4d8a074": {"doc_hash": "848a7c340643d8863592e57f2bc34d53a7291ee4a4910cba05e964ac06fc8644", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "1298f5fc-e7a2-4498-b230-3c3811960f04": {"doc_hash": "b983636d62a8b9d03741de1cf48a068e59fafbcab6986a12cbc3fbd6e673d44f", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "fe3329a1-30e9-4f48-97bf-c44d6a6ed212": {"doc_hash": "98026dd8d581984f6e73d9246cbe34d9e2732cce9d4e688e8362ee195a73c713", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "fef7fbbe-48f9-40e8-9161-33c0391f4244": {"doc_hash": "7b46130a55985b9dabbb949532a4a282db4a7ae7e1d30c69e6bf7bf808f5b63f", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "144ac92a-7ec4-4fd4-a27d-99687085d286": {"doc_hash": "0db31de86377bd6eccccad2435cca7ed1855ca28ece5287b6a064f00e43a2eb9", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "b3251f29-647d-4edd-aefe-e2657242cfd8": {"doc_hash": "4098c54d8092ac95b231c6e65dcf41dd798f88bf0c9cb50dae9cfbf3f2740858", "ref_doc_id": "365d09cdc6618e13d8dd7544d455ffa978d98188"}, "a10967bc-7a3a-4851-a7c7-a1e2f3419bb2": {"doc_hash": "462e6df06c711c4fa325a0363673b5956d97b1d0fd8956689fe6e22ff942138b", "ref_doc_id": "1b729e833273f34cb986910ddbd387599f616e12"}, "d9cec1ac-d0b7-4988-81cd-69743304049f": {"doc_hash": "c6e12cc6bd2b32ee8aaf970adec2437fe0a17d724fd7347b2f446ea62ca24d74", "ref_doc_id": "dd3a6b30138b563d7747351bacdf8a0708bb8f43"}, "8ee4f5d2-2fa8-4614-8dec-cad63572a942": {"doc_hash": "546d657b27b1b66ffd61479fb4bd6257895a79b938f1850819561d5ed7436348", "ref_doc_id": "dd3a6b30138b563d7747351bacdf8a0708bb8f43"}, "0058a4c8-3e67-41d5-96b3-b991b3a98f0d": {"doc_hash": "157d805d75c5c5a76db8eb919bc282493133cbba679279f72de64635b194b307", "ref_doc_id": "dd3a6b30138b563d7747351bacdf8a0708bb8f43"}, "b3b7dca4-3f25-4134-8e3d-1e8a4a4e8427": {"doc_hash": "dacbc255fb78172e79f34477d9efecfc074135ff58fd2dd2e757614f02142c7b", "ref_doc_id": "dd3a6b30138b563d7747351bacdf8a0708bb8f43"}, "de3762d4-32e5-4159-8ade-464caf09adb3": {"doc_hash": "01e3ad476961e933b81b8283fb09f606a03737a54953c8e0c3acc39f43dbff3a", "ref_doc_id": "dd3a6b30138b563d7747351bacdf8a0708bb8f43"}, "683dda1a-27e1-4493-b6bf-b21b58cf32d1": {"doc_hash": "80d0b14a15cfec7669d39c56bd7435fc6d208b800c09930b59f40803a6162e2d", "ref_doc_id": "dd3a6b30138b563d7747351bacdf8a0708bb8f43"}, "331ccbed-9980-4dc1-b6d8-b4d657198012": {"doc_hash": "30cce027d062d65a0cf95dd79f5400e104807510de2f01ae1aaf3c098637580a", "ref_doc_id": "b1c17665553a8ba329e1569f5dc80c82ef842731"}, "a7a63a8c-de38-4dbf-a267-596542048479": {"doc_hash": "208039e3b8c68c65a53207afa6f46bc59e62ca77014c7547935cbe72dfaeaab7", "ref_doc_id": "b1c17665553a8ba329e1569f5dc80c82ef842731"}, "e46c2182-002c-4380-a4e6-27d9a587153b": {"doc_hash": "d8290016e6c22a50760d21ae1ac04f204b8252fdb65bce8e7ccd48a081c1e21b", "ref_doc_id": "7d232c62e8b4426f57a48785fe2d0a797da45ad1"}, "888fae8d-77c8-4480-9a26-cd3e70109d61": {"doc_hash": "687c0c43e387da92aaea0fd1941972379c986d2246440f8c5aeea5b090583b4d", "ref_doc_id": "7d232c62e8b4426f57a48785fe2d0a797da45ad1"}, "80a00ca2-d308-44cb-8a04-1e836fcc68a5": {"doc_hash": "2aa66ddcef4b8cbd6f420b3b2cf6e1ac8a11541cb79101ba5bfafaf167c8a294", "ref_doc_id": "7d232c62e8b4426f57a48785fe2d0a797da45ad1"}, "b61ed279-35f8-445d-87f0-081852933ddd": {"doc_hash": "6fccb57fdef31f09b7dd819f71b969048858457eb498890a565e1e82c85e76f4", "ref_doc_id": "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6"}, "fb335034-59ec-41c4-a975-87d1081dbbff": {"doc_hash": "0c133c2ac05d655ecfa532145b27072029dd578dd27510690c95df20c08772c1", "ref_doc_id": "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6"}, "ec3453b5-ff7b-498a-b23a-dbb7e9dd2f15": {"doc_hash": "db4b691cb8ccb8287c38ccd09918f47e24679c0dba461ae95145f85c2cd7c47d", "ref_doc_id": "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6"}, "978f1088-984f-4875-a3d0-9a91c0f82eb5": {"doc_hash": "154c459d93b0e9bfdbdf24268da185e1c60155e9538e5cf776f10a7a38d07923", "ref_doc_id": "14cc11868d0db64989487015342363ea6d9c4189"}, "566bdcc1-8f38-4976-adde-d05bdc514371": {"doc_hash": "39471cefa3a7432691eba8528eb6b215841940a050139755b5505f956a92c38a", "ref_doc_id": "14cc11868d0db64989487015342363ea6d9c4189"}, "f53a1f40-d84f-4114-8a2e-4ac43a9d0431": {"doc_hash": "2d888e76145f475d05b8e0cba339d4cc3236c229a318a9caf3506a44bc0f8a58", "ref_doc_id": "14cc11868d0db64989487015342363ea6d9c4189"}, "a1a05ec0-79d1-4e78-b2d5-e98d83f55644": {"doc_hash": "a735ab0ddb9bf46883f434e54fed425126e03457b3ba4817482fd6cabbb8194c", "ref_doc_id": "14cc11868d0db64989487015342363ea6d9c4189"}, "4c98955c-0e18-47e7-aab8-7b52dd522785": {"doc_hash": "34cdf8d40c5b2362db3944df1b5c18b3641090d076766c6163526546ca596b30", "ref_doc_id": "14cc11868d0db64989487015342363ea6d9c4189"}, "f2f6f1a9-f72b-4927-b09e-b530aef37330": {"doc_hash": "aadd9368156a8d41a15be2ba225144147c77dd7f3652bd751b4a28ae58bdb913", "ref_doc_id": "5e72d28e1101e56ce91d2239928a0860e59342f5"}, "3cde811b-45a0-412b-9349-017795e2bb16": {"doc_hash": "13b923332c2d4e262a4181f85beb4ba1e57e9f98208a8275c3768fa55d41beaa", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "69cc7b5b-7700-4e4d-ac97-38fd02a191c5": {"doc_hash": "b3d74392d8c0d7100e833e6846e3a2b167ac34790093b0900fd62ed21ee625a0", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "81a4c086-9e38-459f-99de-62117ecfce8e": {"doc_hash": "6f79e32afced3ce0312ba74a83858dc03f793a558da43af375950c87a3cfa92b", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "5793071f-2cb5-43a7-890e-8116b48a94ba": {"doc_hash": "d6ac54af5db5206ae808ecdf1e65cd2e9ae2ce8778d5dc1ad83be4a358533243", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "09d8f330-9d6f-484c-b0ba-9052fa9ae257": {"doc_hash": "97650d9b4ae09181e95d57769d852461db0ab3d0190eb8dd61b227f4128658a3", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "981b0010-9d62-4687-b931-5bb10a3967f6": {"doc_hash": "6ed7749217f276208b761bd97528d6a951a7e2ca531afd0454afbf65a3852a0f", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "32643326-049b-414a-87ad-adc120270525": {"doc_hash": "d187d723a5fdcb24cbc82a058e8bd6595f537810a6ca6dafd850367308f4bf13", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "f7dcee18-b5cf-48d7-a6ec-2fed6c5ca2a4": {"doc_hash": "f44e62cbd2c6b515ec333034e603066d3af9651cdcf6ed88cc0d7d5e99a7ab5a", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "bd2a7464-0cf9-4cda-ab07-90771abd6808": {"doc_hash": "7165aa27ebc06dfad7c42c236f7be074fb9740b18a4ac0907230370f3677d952", "ref_doc_id": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490"}, "4d7c0f85-136d-497c-b3c8-025554714e98": {"doc_hash": "151917e4021f8f2e6a2b54b354e2006bc3a6b196c5723b76b13feafd28e93e36", "ref_doc_id": "03ae15ca1452acd2cf3e7a98ec44e942611db547"}, "b46f5b8c-acbc-46d1-9dfb-97cccb1fd81b": {"doc_hash": "2906ee609fa0161f7db0621e5b65e854e4344438937d100b8e81d4f6e761ba73", "ref_doc_id": "e2927400fb41579dda8b1cb448270a5fd926dfd4"}, "58adf050-7c8f-4748-9cee-6d0a3001e09e": {"doc_hash": "5847c075ffe1ac7a7473988680849cfd856739ab76ec4e9885c269637f0f370a", "ref_doc_id": "e2927400fb41579dda8b1cb448270a5fd926dfd4"}, "abea4ef7-1e8b-4d30-851d-c395c52ee0ce": {"doc_hash": "6e8303d542f9e13a384c5ab8eef64ee873067135feb326c06e64e6819ae71c4e", "ref_doc_id": "e2927400fb41579dda8b1cb448270a5fd926dfd4"}}, "docstore/data": {"8a04b95e-7a98-4248-8f22-1c209241ebe5": {"__data__": {"text": "# Neo Oracle Service\n\nOracle solves the problem that blockchain cannot obtain information from the external network. As a gateway for smart contracts to communicate with the outside world, Oracle opens a window to the outside world for blockchain. Oracle nodes jointly verify the data fetched from the network, then smart contracts query the result in the response transactions on the chain.\n\nNeo Oracle Service is an out-of-chain data access service built into Neo N3. It allows users to request the external data sources in smart contracts, and Oracle nodes designated by the committee will access the specified data source then pass the result in the callback function to continue executing the smart contract logic.\n\n![img](assets/oracle.png)\n\n## Key mechanisms\n\n### Commit-Reveal mechanism\n\nThe commit-reveal mechanism is a sequential protocol that prevents data plagiarism for multiple Oracle nodes.\n\n**Process**\n\n1. Oracle node submits ciphertext information (hash, signature, etc.) about data to other Oracle nodes and collects ciphertext information submitted by other Oracle nodes.\n\n   Neo Oracle Service adopts the multiple signatures on the Response transaction as the ciphertext information.\n\n2. After collecting enough ciphertext information, Oracle nodes reveal the data to other Oracle nodes to verify the data.\n\n   Accordingly, the revealed data in Neo Oracle Service is the Response transaction.\n\nIn this way, we can avoid data plagiarism since oracle nodes cannot predict the data to submit ciphertext information.\n\n![](assets/oracle_commit.png)\n\n### Request-Response pattern\n\nNeo Oracle Service adopts the request-response processing mechanism, which is an asynchronous pattern.\n\n![](assets/oralce_response.png)\n\n**Process**\n\n1. The user writes the smart contract to call the `Request` method of the Oracle contract.\n\n   Each successfully created Request is put in the Request cache list with an unique RequestId.\n\n2. Oracle node listens for the requests in the Request cache list in real time, and accesses data sources specified in the Request to obtain data.\n\n3. Oracle node processes the obtained data with the specified filter, and encapsulates the result into a `Response` transaction (including RequestId, data, fixedScript, multisig address, etc.).\n\n   The result data is stored in the `TransactionAttribute` field of the Response transaction. The `fixedScript` in the transaction is used to call the `finish` method of the Oracle contract, which will execute the callback function `CallbackMethod`.\n\n4. Oracle nodes independently sign the Response transaction through the commit-reveal mechanism.\n\n5. The Response transaction with enough signatures will be stored on the chain, and the callback function will be executed.\n\n## Protocol supports\n\nOracle service currently supports two URL schemes, `https` and `neofs`. `https` scheme follows [RFC 2818](https://tools.ietf.org/html/rfc2818) and [RFC 2616](https://tools.ietf.org/html/rfc2616) standards and allows to specify resource to request via HTTP GET method. `neofs` scheme is Neo-specific. Both types of requests are treated equal otherwise.\n\n## Fees and rewards\n\n- **Fees**\n\n  Neo Oracle Service charges the user by the number of requests, 0.5 GAS by default for each. Besides, the user has to pay additional fees for the callback function. All the fees will be paid when the Request is created.\n\n- **Rewards**\n\n  The fee paid by the user for the Request is distributed to the Oracle node in turn when executing the `PostPersist` logic.\n\n  Distribution order = RequestId % count of Oracle nodes\n\n## Example\n\nHere is a demo about using the Oracle service\uff1a\n\n```c#\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing", "doc_id": "8a04b95e-7a98-4248-8f22-1c209241ebe5", "embedding": null, "doc_hash": "a8b143ff876b2e329af76e10ae2c6b7ae02829467122b1c31142782d06b7772e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}, "node_info": {"start": 0, "end": 3798, "_node_type": "1"}, "relationships": {"1": "9173682d490692e95ea6d760545b39120746acea", "3": "d609194d-1cde-4fd7-a381-2cd4b47ddde1"}}, "__type__": "1"}, "d609194d-1cde-4fd7-a381-2cd4b47ddde1": {"__data__": {"text": "Neo.SmartContract.Framework.Services;\nusing System.ComponentModel;\n\nnamespace demo\n{\n    [DisplayName(\"Oracle Demo\")]\n    [ManifestExtra(\"Author\", \"Neo\")]\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a Oracle using template\")]\n    public class OracleDemo : SmartContract\n    {\n        static readonly string PreData = \"RequstData\";\n\n        public static string GetRequstData()\n        {\n            return Storage.Get(Storage.CurrentContext, PreData);\n        }\n\n        public static void CreateRequest(string url, string filter, string callback, byte[] userData, long gasForResponse)\n        {\n            Oracle.Request(url, filter, callback, userData, gasForResponse);\n        }\n\n        public static void Callback(string url, byte[] userData, int code, byte[] result)\n        {\n            if (Runtime.CallingScriptHash != Oracle.Hash) throw new Exception(\"Unauthorized!\");\n            Storage.Put(Storage.CurrentContext, PreData, result.ToByteString());\n        }\n    }\n}\n```\n\nAs shown above, there are two key functions in the contract:\n\n- `CreateRequest` function can create Oracle Request to request data\n\n- `Callback` function is used to execute contract logic after the Oracle node fetches data\n\n### Oracle request\n\nThe following fields are required for Oracle Request\uff1a\n\n| Fields           | Type    | Description                                                  |\n| -------------- | --------- | ------------------------------------------------------------ |\n| Url            | string    | The resource path, with a maximum length of 256 bytes                             |\n| Filter         | string    | Used to filter out useful information from the result returned from the data source. It is a JSONPath expression with a maximum length of 128 bytes. For the filters supported by Oracle, see the explanation below. |\n| CallbackMethod | string    | method name of the callback function (cannot begin with \"_\"), with a maximum length of 32 bytes|\n| UserData       | var bytes | The custom data                                              |\n| GasForResponse | long      | The fee paid in advance for the callback function to pay for executing the script in the Response transaction. The fee should not be less than 0.1 GAS and will be charged when creating the Oracle request transaction |\n\n#### Url\n\nIt is expected that URL requested will provide data in JSON format, for HTTP requests it means that server must answer with `Content-Type: application/json` header for request to be successful.\n\n##### NeoFS URLs\n\nNeoFS URLs use the following scheme:\n\n```\nneofs://<Container-ID>/<Object-ID/<Command>/<Params>\n```\n\nWhere `Container-ID` and `Object-ID` are mandatory components, `Command` and `Params` are optional.\n\nAbsent any command oracle subsystem will get an object and return its payload, example:", "doc_id": "d609194d-1cde-4fd7-a381-2cd4b47ddde1", "embedding": null, "doc_hash": "51a1e99d9b27ee1bf0c05a2f7b8f35a87f79aae85e8855e2dda4d5384c26a234", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}, "node_info": {"start": 3756, "end": 6614, "_node_type": "1"}, "relationships": {"1": "9173682d490692e95ea6d760545b39120746acea", "2": "8a04b95e-7a98-4248-8f22-1c209241ebe5", "3": "d5b75c2b-5a54-4642-ab0d-f169d889b4f0"}}, "__type__": "1"}, "d5b75c2b-5a54-4642-ab0d-f169d889b4f0": {"__data__": {"text": "any command oracle subsystem will get an object and return its payload, example: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk.\n\nCommand `range` can be used to get a part of object's payload, it has a mandatory range parameter specified as `offset|length`, where `offset` is a number of bytes to skip from the beginning on payload and `length` is a number of bytes to return to the caller, they're separated by vertical bar. Example request: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk/range/42|128.\n\nCommand `header` can be used to get header of an object, it doesn't have any parameters. Example: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk/header.\n\nCommand `hash` can be used to get SHA256 hash of an object or part of it, it has an optional range parameter with the same syntax as for `range` command. Example: Example: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk/hash.\n\n#### Filter\n\nGiven the following Json example, the Oracle supported filters are illustrated in the table below.\n\n```json\n{\n    \"store\": {\n        \"book\": [\n            {\n                \"category\": \"reference\",\n                \"author\": \"Nigel Rees\",\n                \"title\": \"Sayings of the Century\",\n                \"price\": 8.95\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Evelyn Waugh\",\n                \"title\": \"Sword of Honour\",\n                \"price\": 12.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Herman Melville\",\n                \"title\": \"Moby Dick\",\n                \"isbn\": \"0-553-21311-3\",\n                \"price\": 8.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"J.", "doc_id": "d5b75c2b-5a54-4642-ab0d-f169d889b4f0", "embedding": null, "doc_hash": "56857568934aef696b67cc1aa7330e02d70d14862b614f73108be48ea2efedd3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}, "node_info": {"start": 6590, "end": 8515, "_node_type": "1"}, "relationships": {"1": "9173682d490692e95ea6d760545b39120746acea", "2": "d609194d-1cde-4fd7-a381-2cd4b47ddde1", "3": "960172e0-102a-46d2-8977-794bcfa64993"}}, "__type__": "1"}, "960172e0-102a-46d2-8977-794bcfa64993": {"__data__": {"text": "              \"author\": \"J. R. R. Tolkien\",\n                \"title\": \"The Lord of the Rings\",\n                \"isbn\": \"0-395-19395-8\",\n                \"price\": 22.99\n            }\n        ],\n        \"bicycle\": {\n            \"color\": \"red\",\n            \"price\": 19.95\n        }\n    },\n    \"expensive\": 10,\n    \"data\": null\n}\n```\n\n| Filter                                | Result                                                       |\n| ------------------------------------- | ------------------------------------------------------------ |\n| $.store.book[*].author                | The authors of all books                                     |\n| $..author                             | All authors                                                  |\n| $.store.*                             | All things, both books and bicycles                          |\n| $.store..price                        | The price of everything                                      |\n| $..book[2]                            | The third book                                               |\n| $..book[-2]                           | The second to last book                                      |\n| $..book[0,1]                          | The first two books                                          |\n| $..book[:2]                           | All books from index 0 (inclusive) until index 2 (exclusive) |\n| $..book[1:2]                          | All books from index 1 (inclusive) until index 2 (exclusive) |\n| $..book[-2:]                          | Last two", "doc_id": "960172e0-102a-46d2-8977-794bcfa64993", "embedding": null, "doc_hash": "4f05ea3d16a2a25acd848deb7508facc3a079411be007bc70927268cdb545399", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}, "node_info": {"start": 8572, "end": 10106, "_node_type": "1"}, "relationships": {"1": "9173682d490692e95ea6d760545b39120746acea", "2": "d5b75c2b-5a54-4642-ab0d-f169d889b4f0", "3": "71ba9f9d-27af-40b5-9cd3-ca853be170d0"}}, "__type__": "1"}, "71ba9f9d-27af-40b5-9cd3-ca853be170d0": {"__data__": {"text": "                 | Last two books                                               |\n| $..book[2:]                           | Book number two from tail                                    |\n| $..book[?(@.isbn)]                    | Invalid Filter                                               |\n| $.store.book[?(@.price < 10)]         | Invalid Filter                                               |\n| $..book[?(@.price <= $['expensive'])] | Invalid Filter                                               |\n| $..book[?(@.author =~ /.*REES/i)]     | Invalid Filter                                               |\n| $..book[(@.length-1)]                 | Invalid Filter                                               |\n| $..*                                  | Invalid Filter                                               |\n| $..                                   | Invalid Filter                                               |\n| $.*                                   | All store value and expensive,data value                     |\n| empty string                          | Give me the original result                                  |\n\nThe returned result can be found at https://github.com/json-path/JsonPath.\n\n### Callback function\n\nThe type and order of the parameters of the callback function should exactly be the same as below:\n\n| Field     | Type    | Desc                                      |\n| -------- | --------- | ----------------------------------------- |\n| Url      | string    | the resource path                               ", "doc_id": "71ba9f9d-27af-40b5-9cd3-ca853be170d0", "embedding": null, "doc_hash": "54ff73462be70400f05ab420a12822de23d9ea5fd59395657c1a49acdf5e8fae", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}, "node_info": {"start": 10111, "end": 11653, "_node_type": "1"}, "relationships": {"1": "9173682d490692e95ea6d760545b39120746acea", "2": "960172e0-102a-46d2-8977-794bcfa64993", "3": "798d2fec-2237-41cd-abfb-5dd6547f72c9"}}, "__type__": "1"}, "798d2fec-2237-41cd-abfb-5dd6547f72c9": {"__data__": {"text": "                    |\n| UserData | var bytes | the custom data                            |\n| Code     | byte      | status Code of the Oracle response, see the Code table for details. |\n| Result   | var bytes | the result                                  |\n\n### Code\n\nThe Code field defines the status Code for Oracle responses, including the following types:\n\n| Value     | Status                   | Desc             | Type   |\n| ------ | ---------------------- | ---------------- | ------ |\n| `0x00` | `Success`              | execute successfully         | `byte` |\n| `0x10` | `ProtocolNotSupported` | Unsupported protocol     | `byte` |\n| `0x12` | `ConsensusUnreachable` | Oracle nodes did not reach a consensus | `byte` |\n| `0x14` | `NotFound`             | requested information does not exist | `byte` |\n| `0x16` | `Timeout`              | timeout         | `byte` |\n| `0x18` | `Forbidden`            | no permission to query the data source       | `byte` |\n| `0x1a` | `ResponseTooLarge`     | result size is out of limit | `byte` |\n| `0x1c` | `InsufficientFunds`    | the fee is insufficient   | `byte` |\n| `0xff` | `Error`                | error occurs in the execution         | `byte` |\n", "doc_id": "798d2fec-2237-41cd-abfb-5dd6547f72c9", "embedding": null, "doc_hash": "cb08b42b5fa0496e808282d7e8593acc61df48b798e336089a6967e60c81c79e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}, "node_info": {"start": 11642, "end": 12843, "_node_type": "1"}, "relationships": {"1": "9173682d490692e95ea6d760545b39120746acea", "2": "71ba9f9d-27af-40b5-9cd3-ca853be170d0"}}, "__type__": "1"}, "0a83d9f8-39bb-4374-846a-deb1e21b8c56": {"__data__": {"text": "# Block\n\nThe Blockchain is a data structure. The block is composed of block header and block body. As each block has a crpytographic hash of the previous block (refer to `PrevHash` in the block header), and a chain structure is formed. \n\n## Block Header\n\nThe data structure of block as following:\n\n| Size | Field         | Name                                | Type    | Description                                                  |\n| ---- | ------------- | ----------------------------------- | ------- | ------------------------------------------------------------ |\n| 4    | Version       | Block Version                       | uint    | Block version, current is `0`                                |\n| 32   | PrevHash      | Previous Hash                       | UInt256 | The previous block's hash                                    |\n| 32   | MerkleRoot    | Merkle Tree    Root                 | Uint256 | The merkle tree root of the block's transactions             |\n| 8    | Timestamp     | Block Timestamp                     | ulong   | The time when this block is generated                        |\n| 8    | Nonce         | Random number                       | ulong   | The random number of the block                               |\n| 4    | Index         | Block Index                         | uint    | Block height, and the Genesis Block's index is 0             |\n| 1    | PrimaryIndex  | Speaker index                       | byte    | Index of the proposal validator in the current round         |\n| 20   | NextConsensus | Address of the next round validator | UInt160 | The script hash of more than two-thirds of validator's signatures for the next round |\n| ?    | Witness       | Witness                             | Witness | The executable verification scripts                          |\n\nThe block header contains the basic information of a block and provides verification of a block. \n\nBlock `hash` and `index` can be used to identify a block. The hash value is obtained by concatenating the first seven attributes of the block header and performing SHA256 operation twice. Normally, Neo has only one chain, and each block is confirmed by more than two-thirds of the consensus nodes, before added to the blockchain. Therefore, the height of each block is unique. Block height must be equal to the previous block height plus 1, and the Genesis Block height is 0. \n\n`Timestamp` is", "doc_id": "0a83d9f8-39bb-4374-846a-deb1e21b8c56", "embedding": null, "doc_hash": "e5dd550cc1fb15d8965bd7e7dd95520fa4dcaa9f021dba1303f1a5c4ce1ea83c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/blockchain/block.html"}, "node_info": {"start": 0, "end": 2410, "_node_type": "1"}, "relationships": {"1": "da3104b7cf63ccbec58b9b5c55f91272be8a0c9d", "3": "865f48c3-6776-4825-b698-c5b6f1476ae4"}}, "__type__": "1"}, "865f48c3-6776-4825-b698-c5b6f1476ae4": {"__data__": {"text": "height plus 1, and the Genesis Block height is 0. \n\n`Timestamp` is the block's time stamp, must be bigger than the previous one. The internal between two blocks is about 15 seconds, and is set by the variable `MillisecondsPerBlock` in the configuration file `config.json`.\n\n`NextConsensus` is the hash of multi-signature contract, which needs the signatures of more than two-thirds of the consensus nodes as parameters. The example script is shown as below. Each block, with the `NextConsensus` field, locks the nodes participating in the next round of consensus activity. In the previous round of consensus activity, the Speaker calculated the consensus nodes of the next round based on the voting at that time, generated the multi-signature contract, and assigned the hash value of the contract to the block's `NextConsensus` field. \n\n`Witness` is the verification script of the block, it contains `InvocationScript` and `VerificationScript`. The `InvocationScript` provides the parameters for the `VerificationScript` to execute. \n\n![](../../images/blockchain/nextconsensus_script.jpg)\n\n## Block\n\nThe block data structure is as follows:\n\n\n| Size | Field        | Name             | Type          | Description              |\n| ---- | ------------ | ---------------- | ------------- | ------------------------ |\n| \uff1f   | Header       | block header     | Header        | block header             |\n| ?\\*? | Transactions | Transaction List | Transaction[] | The payload of the block |\n\nThe block body is a transaction list, which essentially starts with the transaction list length, followed by a list of transactions. In one round of consensus activity, the Speaker selects a series of verified transactions from its memory pool, put the transaction hash into a consensus message (`PrePareRequest`) and then broadcast it to the blockchain network. For more details about consensus, refer to [Consensus Mechanism](../../consensus/dbft.md).\n\nAt present, there can be up to 512 transactions per block.\n\n> [!NOTE]\n>\n> When a block persistent, it stores a hash list of the block's transaction, and the transaction data is stored separately for facilitate query.\n", "doc_id": "865f48c3-6776-4825-b698-c5b6f1476ae4", "embedding": null, "doc_hash": "f5b0a0b4af086d79a7c19b0475b9f3b291806da6e3617128c7d9eb9d9df4344d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/blockchain/block.html"}, "node_info": {"start": 2344, "end": 4502, "_node_type": "1"}, "relationships": {"1": "da3104b7cf63ccbec58b9b5c55f91272be8a0c9d", "2": "0a83d9f8-39bb-4374-846a-deb1e21b8c56"}}, "__type__": "1"}, "dea34342-01bd-496e-b7aa-946e16f08468": {"__data__": {"text": "# NEO Token Models\n\n### Native Token\n\nThere are 2 kinds of native token defined in Neo system: NEO and NeoGas (GAS).\n\nNEO is the Governing Token. Neo holders can participate in Neo network management, including voting for consensus nodes, network parameter modification, etc. The total amount of NEO is 100 million. Its minimum unit is 1 and can not be divided. It's registered in Genesis block, and stored in standby validators' muti-signature addresses.\n\nGAS is the fuel token for the realization of Neo network resource control, with a smallest unit of 0.00000001. Users can obtain GAS either through a claim or purchase. When using the Neo network, they need to pay a certain amount of GAS as network fees, such as transfer, registering assets, publishing assets, running DApps, etc.\n\nThe Neo N3 Genesis block will mint the exact amount of GAS token needed to account for all GAS token circulating on the NEO Legacy chain at the time of Genesis block.\n\nTo read more about GAS generation rate and distribution refer to the [Governance and Incentives](../../governance.md).\n\n\n### NEP17 Assets (Tokens)\n\nNEP17 tokens need to be issued and managed through smart contract. Their information is stored in a smart contract's storage. Account model is used. For detailed information, refer to [NEP-17](../../../develop/write/nep17.md).\n\n", "doc_id": "dea34342-01bd-496e-b7aa-946e16f08468", "embedding": null, "doc_hash": "95b3232267559460db9d061140e014b540cf56c4c56c4f1e164e55b8fb584cec", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/blockchain/token_model.html"}, "node_info": {"start": 0, "end": 1333, "_node_type": "1"}, "relationships": {"1": "e62b2c9df7cd82a5fecb04f8cd3559b5dbfd2a4c"}}, "__type__": "1"}, "455ba4f5-4993-4973-8920-cd1a8a726b82": {"__data__": {"text": "# Merkle Tree\n\nMerkle tree is such a kind of binary tree: it's able to quickly check and induce massive data, and verify the completeness of block transaction records. NEO uses Merkle tree to construct block model. NEO's block head stores the Merkle root of all transactions within the block. Block data area stores transaction array.\n\n![](../../images/blockchain/MerkleTree01.png)\n\nAttribute of Merkle tree\uff1a\n\n1. Merkle tree is basicly a binary tree, with all features of tree structure.\n2. Merkle tree's leaf nodes' value is unit data of data set, or unit data HASH.\n3. The value of a non-leaf node is based on all the leaf node values below it, and then calculated with hash method.\n\nTransaction verification principle:\n\nTranscation001's validity can be verified by comparing original Top Hash value with the value computed from Transcation001, Transcation002 and Hash1(The direct child of Top Hash on the right side).\n\n## Usage Scenarios\n\n- Builds a Merkle tree root when constructing a block header\n- Verifies the block data using SPV wallets.\n- As a data structure, generates a stateRoot for NEO blocks. This is used in cross-chain and light node scenarios for quickly verifying the validity of blocks.", "doc_id": "455ba4f5-4993-4973-8920-cd1a8a726b82", "embedding": null, "doc_hash": "0bcbd8d685b8422e83a65d47ad9fa6963156a195d9ccb5a6d0e3ae4984fa8f57", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/MerkleTree.html"}, "node_info": {"start": 0, "end": 1207, "_node_type": "1"}, "relationships": {"1": "fabb2fdf1843918d9885bbc8f3ad472795a2dfcd"}}, "__type__": "1"}, "b9112a50-1c94-4d31-a0c6-0313168f1ac9": {"__data__": {"text": "# Encoding Algorithm\n\n##  Base58\n\nBase58 is a group of encoding/decoding schemes used to switch data between binary format (hexdecimal) and alphanumeric text format (ASCII). Base58 enables data compressing, is easy to identify, and is suitable for constructing encoding mechanism of transmission system that is anti-auto-monitoring. However, lack of verification makes it not able to detect error during transmission. Thus Base58Check, an improved scheme is required.\n\nThe Base58's alphabet includes numbers (From 1 to 9), and English letters except O (uppercase o) / I (uppercase i) / l (lowercase L). These letters are omitted to avoid confusion.\n\nNeo's Base58 alphabet: **123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz**\n\nInterface definition\uff1a\n\n1. Encoding method: Encoding byte[] format data into Base58 string format\n\n   ```c#\n   string Encode(byte[] input)\n   ```\n   \n2. Decoding Method: Decoding Base58 string format data into byte[] format\n\n   ```c#\n   byte[] Decode(string input)\n   ```\n\n**Encoding Steps**\uff1a\n\n1.  Add 0x00 before byte[] data to generate a new byte array, and then reverse its order (little endian)\n\n2.  Convert array data to a BigInteger object\n\n3.  Convert the BigInteger format number to 58-based number according to Base58 alphabet\n\n4.  Count the number of 0x00 in original byte array format data. At the head of the Base58 format data generated in step 3, for each 0x00, add a letter '1', which is the first character in Base58 alphabet\n\n**Decoding Steps**\uff1a\n\n1.  Convert the input string into BigInteger format according to Base58 alphabet.\n\n2.  Convert from BigInteger format to byte[] format and then reverse the order to big endian.\n\n3.  If byte[] format data's length is more than 1 & byte[0] = 0 & byte[1] >= 0x80, start from byte[1], otherwise start from byte[0] to get the decoded result.\n\n4.  Count the number of the first letter of Base58 alphabet in original input data as count and remove leading zeros from the decoded data.\n\nExample:\n\n| String Content | byte[] |\n| --- | --- |\n| NTRAJ9EEjHFHhHZvMKEKfkceg5V9ppx5ZP | [0x35, 0x52, 0x4e, 0x37, 0xb7, 0x01, 0x39, 0xc8, 0x96, 0xeb, 0xd5, 0x4a, 0x86, 0x48, 0xd3, 0xfa, 0x78, 0x6b, 0x26, 0x48, 0x76, 0xea, 0xc5, 0x26, 0xce] |\n\nScenarios\uff1a\n\nServes for Base58Check encoding / decoding method.\n\n## Base58Check\n\nBase58Check is an improved encoding / decoding method base on Base58. Base58Check solved the lack of checking mechanism in Base58, by adding hash value to original data as salt.\n\n\nInterface definition:\n\n1. Encoding method: encode byte array data into checkable Base58 string format\n\n   ```c#\n   string Base58CheckEncode(byte[] input)\n   ```\n\n2. Decoding method\uff1adecode checkable Base58 string data into byte array format\n\n   ```c#\n   byte[] Base58CheckDecode(string input)\n   ```\n\n**Encoding Steps**:\n\n1.  Encode input byte array twice with Sha256 to get a hashed byte array. Take the first 4 bytes of the hash as checksum and append it to the end of original byte array.\n\n2.  Use Base58 to encode the byte array including", "doc_id": "b9112a50-1c94-4d31-a0c6-0313168f1ac9", "embedding": null, "doc_hash": "38842fc6bd6ef347b53e6f83914cd2eba137065149e427801003ada47e9135e3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encode_algorithm.html"}, "node_info": {"start": 0, "end": 3025, "_node_type": "1"}, "relationships": {"1": "42d5307a86ab7b91f7b8d5904fbc84a22749b93b", "3": "372bd3f6-2c78-4be2-ad26-8ed2b6d25193"}}, "__type__": "1"}, "372bd3f6-2c78-4be2-ad26-8ed2b6d25193": {"__data__": {"text": "of original byte array.\n\n2.  Use Base58 to encode the byte array including checksum to get corresponding encoded result.\n\n**Decoding Steps**:\n\n1. Use Base58 to decode input string to get byte array format decoded result.\n\n2. Take the content of byte array except the last 4 bytes as data.\n\n3. Encode data twice with SHA256 to get a hashed byte array. Check whether the first 4 bytes of the hashed value are identical with the last 4 bytes in byte array of step 1. If so, the decoded data is correct. Otherwise the data is corrupted.\n\n   \n\n   ![](../../images/blockchain_paradigm/Base58CheckEncodeAndDecode.png)\n\nExample:\n\n| String content | byte[] |\n| --- | --- |\n| NTRAJ9EEjHFHhHZvMKEKfkceg5V9ppx5ZP | [0x35, 0x52, 0x4e, 0x37, 0xb7, 0x01, 0x39, 0xc8, 0x96, 0xeb, 0xd5, 0x4a, 0x86, 0x48, 0xd3, 0xfa, 0x78, 0x6b, 0x26, 0x48, 0x76] |\n\nScenarios\uff1a\n\n- Import / export WIF format secret key\n\n- Switch between contract script hash and address\n\n- Import / export NEP2 format secret key", "doc_id": "372bd3f6-2c78-4be2-ad26-8ed2b6d25193", "embedding": null, "doc_hash": "7968892de6a3da7f2e4b728720a3c8552a73f64184f1072f91d70006f68caf23", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encode_algorithm.html"}, "node_info": {"start": 2951, "end": 3928, "_node_type": "1"}, "relationships": {"1": "42d5307a86ab7b91f7b8d5904fbc84a22749b93b", "2": "b9112a50-1c94-4d31-a0c6-0313168f1ac9"}}, "__type__": "1"}, "5faf1d3d-1217-4338-88dc-b737546d878e": {"__data__": {"text": "# Encryption Algorithm\n\n## ECC Algorithm\n\nElliptic Curve Cryptography (ECC) algorithm is a kind of asymmetric encryption algorithm. With the irreversible feature of K=k\\*G process (K: public key, G: base point (constant)), it can prevent solving private key from public key by brutal force. With the same length of secret key, ECC has higher security level and saves computing resource compared to other encryption algorithms such as RSA. ECC combined with other algorithms, is widely used in signing fields, i.e. ECDSA digital signature.\n\nSame as Bitcoin, Neo adopts ECC as public key generating algorithm. Neo defines a special secp256r1-standard elliptic curve with parameters:\n\nPrime Q: 00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\n\nParameter A: 00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\n\nParameter B: 005AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\n\nOrder N: 00FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\n\nBase Point G: (0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,\u3000\u30000x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5)\n\nIn addition, to support the cross-chain transaction verification, Neo introduces the SECP256K1 curve with parameters\uff1a\n\nPrime Q: 00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n\nParameter A: 0\n\nParameter B: 7\n\nOrder N: 00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n\nBase Point G: (\"04\" + \"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\" + \"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8\")\n\nExample:\n\n| Name | Value |\n| --- | --- |\n| private key |  c7134d6fd8e73d819e82755c64c93788d8db0961929e025a53363c4cc02a6962 |\n| public key (compressed) |  035a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a |\n| public key (uncompressed) | 045a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a 35dfabcb79ac492a2a88588d2f2e73f045cd8af58059282e09d693dc340e113f |\n\n> [!NOTE]\n>\n> Uncompressed public key above is in single line.\n\nScenarios:\n\n- Generating public key with private key\n\n- Signing and signature verification\n\nFor more information, refer to [A relatively easy to understand primer on elliptic curve cryptography](https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/).\n\n\n## ECDSA signing\n\nElliptic Curve Digital Signature Algorithm (ECDSA) is a simulation of Digital Signature Algorithm (DSA) by ECC algorithm. Its advantage includes fast speed, reliable strength and short signature.\n\nBrief steps are as", "doc_id": "5faf1d3d-1217-4338-88dc-b737546d878e", "embedding": null, "doc_hash": "8ba2e73fbd868604d670450c41bb63248b2cc9da3a8f4e35da4ee3f6d384e0fb", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encryption_algorithm.html"}, "node_info": {"start": 0, "end": 2626, "_node_type": "1"}, "relationships": {"1": "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb", "3": "56e56403-e29b-4c59-8d94-509a82cd62b3"}}, "__type__": "1"}, "56e56403-e29b-4c59-8d94-509a82cd62b3": {"__data__": {"text": "includes fast speed, reliable strength and short signature.\n\nBrief steps are as follows:\n\nAssume private key, public key and base point as k, K and G, respectively. We know that K = k\\*G according to ECC algorithm.\n\nSigning procedure:\n\n   1. Select random number r and compute point r\u00b7G(x, y).\n\n   2. Compute s = (h + k\u00b7x)/r according to random number r, message M's hash value h, private key k.\n    \n   3. Send message M and signature {r\u00b7G, s} to receiver.\n\nVerification procedure:\n\n   1. Receiver receives message M and signature {r\u00b7G=(x,y), s}.\n\n   2. Compute hash h according to received message.\n   \n   3. Compute h\u00b7G/s + x\u00b7K/s with sender public key K and compare with r\u00b7G. Verification succeeds if both are the same.\n\nDeduction is as follows:\n\n[![formula_ecdsa](../../images/blockchain_paradigm/formula_ecdsa.jpg)](../../images/blockchain_paradigm/formula_ecdsa.jpg)\n\nExample:\n\n| Name | Value                                                         |\n| ---- | ------------------------------------------------------------ |\n| Message | Hello World                                                  |\n| Private Key | f9be359876aac462df9ec642e5d063140daedb83aefc0f8657b08132d3da62d2 |\n| Public Key | 04ed08d3bc46390a54350d841c8110ca02f9e357f8ba08702078de2d7041727<br>5956e94045d041a2bf89be25d5a56ddcf15c4f629d5a1db32657d0da13ebde64b29 |\n| Signature | 54a6faec9159e98d45f5868e5799762de290c3e7e67e013c1bd6a2a6f8a2e500<br>a4d29567359bd171ddebc547dcddd670fb6b367e3e19298d7672f0422b5a2c52 |\n\n> [!NOTE]\n>\n> public key and signature above are both in a single line.\n\nScenarios\uff1a\n\n- Transaction signature.\n\n- Consensus.\n\n## AES Encryption\n\nAdvanced Encryption Standard (AES) is a kind of block cipher algorithm in symmetric encryption algorithms. Its block size can be 128, 192, 256. AES has the following advantages: (1) fast processing speed, (2) whole process can be described in math, (3) currently no effective cracking method.\n\nNeo uses 256-bit AES encryption algorithm, where encryption mode is ECB and filling method is NoPadding.\n\nExample\uff1a\n\n  1. msg,key----->passphrase-protected msg\n\n\u3000\u3000(Message: 256-bit hash of \"Hello World\") + (password: 256-bit hash of \"l love", "doc_id": "56e56403-e29b-4c59-8d94-509a82cd62b3", "embedding": null, "doc_hash": "12a630f8aedcc72174c7662f34518912d70d7d7e8ae0a4cbcd9c8f6972f14bf6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encryption_algorithm.html"}, "node_info": {"start": 2558, "end": 4725, "_node_type": "1"}, "relationships": {"1": "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb", "2": "5faf1d3d-1217-4338-88dc-b737546d878e", "3": "776d638f-795f-48f9-8ad4-e361a491cb73"}}, "__type__": "1"}, "776d638f-795f-48f9-8ad4-e361a491cb73": {"__data__": {"text": "hash of \"Hello World\") + (password: 256-bit hash of \"l love coding\")\n\n\u3000\u3000=\"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"\n\n\u3000\u3000\u3000+\"da04fe4405fc021e4ca5ca956b263828e99d4ce2a342b2cbdc919baddbe178ae\"\n\n\u3000\u3000---->\"a8158a64c1e9d776e12582d8c63553ee0c7687bd8e374f79c766e7459577f547\"\n\n  2. passphrase-protected msg,key----->msg\n\n\u3000\u3000Ciphertext + (password: 256-bit hash of \"l love coding\")\n\n\u3000\u3000=\"a8158a64c1e9d776e12582d8c63553ee0c7687bd8e374f79c766e7459577f547\"\n\n\u3000\u3000\u3000+\"da04fe4405fc021e4ca5ca956b263828e99d4ce2a342b2cbdc919baddbe178ae\"\n\n\u3000\u3000---->\"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"\n\nScenarios\uff1a\n\nStorage and verification of DB3 wallet account password\n", "doc_id": "776d638f-795f-48f9-8ad4-e361a491cb73", "embedding": null, "doc_hash": "23cf4bbd361c74169b590729e058f5aade41dbe7a715e5d83ba6963abae67b2d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encryption_algorithm.html"}, "node_info": {"start": 4735, "end": 5413, "_node_type": "1"}, "relationships": {"1": "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb", "2": "56e56403-e29b-4c59-8d94-509a82cd62b3"}}, "__type__": "1"}, "7201546f-4a44-4932-b312-83277501415b": {"__data__": {"text": "# Hash Algorithm\n\nHash function, or hash algorithm, is a method creating digital finger print from any kind of data. Hash function compresses message or data into a digested version to shrink the data into a fixed data size. This function disorganizes and remixes data, rebuilding a data fingerprint as a hash value. Hash value is always represented by a short string consisting of random letters and digits.\n\nTwo different hash functions are used widely in the Neo system: SHA256 and RIPEMD160. The former is used to generate a longer hash value (32 bytes) and the latter is used to generate a shorter hash value (20 bytes). Usually when a hash value of an object is generated, hash functions are used twice. For example, when a hash of a block or transaction is generated, SHA256 is calculated twice; when a contract address is generated, the SHA256 hash of the script is calculated, then the NSPEMD160 hash of the previous hash is calculated. \n\nIn addition, the block will also use a hash structure called a Merkle Tree. It computes the hash of each transaction and combines one with the next and then hashes again, repeating this process until there is only one root hash (Merkle Root). \n\n### RIPEMD160 \n\nRIPEMD is a cryptographic hash function published by Hans Dobbertin, Antoon Bosselaers Bart Prenee from COSIC research team, University of Leuven in 1996.\n\nRIPEMD160 is a 160-bit improvement based on RIPEMD. This algorithm produces a 160-bit hash, which can be presented in hexadecimal format. One feature of this algorithm is avalanche effect, i.e. any slight changes can result in a totally different hash value.\n\nNeo generates 160-bit hash of contract script with RIPEMD160.\n\nExample:\n\n| String value | Hash value                              |\n| ----------- | ---------------------------------------- |\n| hello world | 98c615784ccb5fe5936fbc0cbe9dfdb408d92f0f |\n\nScenarios\uff1a\n\nTo generate contract hash.\n\n### SHA256 \n\nSHA256 is a kind of SHA-2 algorithm. SHA-2 is a cryptographic hash function algorithm standard produced by NSA. It belongs to SHA family. It is a successor of SHA-1. SHA-2 has 6 different algorithm standards, including SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256.\n\nFor any length of message, SHA256 will generate a 256-bit hash value (can be represented by a hexdecimal string)\n\nExample:\n\n| String value | Hash value                                                       |\n| ----------- | ------------------------------------------------------------ |\n| Hello World | a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e |\n\nScenarios:\n\n- Compute contract hash.\n\n- Signing & Signature validation.\n\n- Base58Check encoding / decoding.\n\n- db3\u3001NEP6 wallet secret key storage, export & validation.\n\n### Murmur32 \n\nMurmur is kind of non-cryptographic hash algorithm and suits for general hash indexing. It is proposed by Austin Appleby in 2008. Later several derived versions are released. Compared with other popular hash functions, Murmur's random distribution performance is better for keys with high regularity.\n\nFeatures\uff1a\n\n   1. Low collision probability.\n   \n   2. Fast computing rate.\n\n   3. Good peformance for large files.\n\nExample:\n\n| String | Hash value |\n| ---|---|\n| Hello World |ce837619 |\n\nScenarios\uff1a\n\n- Bloom filter\n\n- leveldb storage\n\n###", "doc_id": "7201546f-4a44-4932-b312-83277501415b", "embedding": null, "doc_hash": "d2c124a5f719b542cd662dc015153c69295da5ac8620d30abed37a2b3967c8b4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/hash_algorithm.html"}, "node_info": {"start": 0, "end": 3309, "_node_type": "1"}, "relationships": {"1": "0e0c712c4dc8405bace5175f92c0f9317f542263", "3": "1f34e493-1eb9-418c-b9fb-8cf5ad0403be"}}, "__type__": "1"}, "1f34e493-1eb9-418c-b9fb-8cf5ad0403be": {"__data__": {"text": "Bloom filter\n\n- leveldb storage\n\n### Scrypt\n\nScrypt is a kind of secure-cryptographic algorithm based on PBKDF2-HMAC-SHA-256 algorithm. It's developed by Colin Percival, a famous FreeBSD hacker, for his backup service Tarsnap. The original design was to reduce CPU load, minimize CPU reliance, and use CPU idle time for calculations. Therefore, scrypt not only takes a long time to calculate, but also consumes a lot of memory, making it difficult to calculate multiple digests in parallel. So it is more difficult to use the rainbow table for brute-force-attacks.\n\nNeo mainly uses Scrypt algorithm to generate encrypted secret keys complying with NEP-2 standard. Parameters are defined as follows:\n\n- N: CPU/RAM cost. Generally it is a power of 2. Default value is 16384.\n\n- p: Parallelization parameter, a positive integer that ranges from 1 to 255. Bigger value represents a heavier reliance upon concurrent computation. Default value is 8.\n\n- r: Block size\uff0ctheoretically ranges from 1 to 255. Bigger value represents a heavier reliance upon RAM & bandwidth. Default value is 8.\n\nExample:\n\n| Data | Parameters  | Hash value  |\n|---|---|---|\n| Hello World | key:\"I love code\"<br>N:16384<br>p:8<br>r:8 | 17b94895fab004e035b3630a718b498f6<br>647458351f04b84b4a2c0bf1db963630fa<br>7bfd1c29663c7bf3556fd7ba6131e5ddfd6<br>40b9f6a2a9ad75d3d59b65f932 |\n\n> [!NOTE]\n>\n> The hash value above is in single line.\n\nScenarios\uff1a\n\n- NEP2 format secret key export.\n\n- Password verification for NEP6 wallet.\n\nFor more information, refer to <https://en.wikipedia.org/wiki/Scrypt>.\n", "doc_id": "1f34e493-1eb9-418c-b9fb-8cf5ad0403be", "embedding": null, "doc_hash": "8273a56e2e0f8a57cbc435506712bede63388772e6ed28ba99d62a6e97f83f59", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/hash_algorithm.html"}, "node_info": {"start": 3273, "end": 4836, "_node_type": "1"}, "relationships": {"1": "0e0c712c4dc8405bace5175f92c0f9317f542263", "2": "7201546f-4a44-4932-b312-83277501415b"}}, "__type__": "1"}, "f333bac4-a733-49c3-a601-7d95f461bee6": {"__data__": {"text": "# Transaction\n\nTransaction is the basic operation model of the whole Neo network. Wallets, smart contracts and accounts interact with Neo network through transactions. In Neo's P2P network, information is packed as `InvPayload` for transferring (Inv is abbreviation of Inventory). Different payloads have their special data. `InventoryType.Tx` indicates transaction data is packed into `InvPayload`. \n\n## Structure\n\nOn Neo blockchain the transaction data structure is as follows:\n\n| Size | Field | Description |\n|--------------|---------|------------------------------------------|\n| `version`    | byte   | Transaction version, currently 0            |\n| `nonce`    | uint   | Random number      |\n| `sysfee`    | long   | System fee paid for network resource |\n| `netfee`    | long   | Network fee paid for the validator packaging transactions |\n| `validUntilBlock`    | uint   |  Transaction validity period  |\n| `signers`         | Signer[] | Sender and the effective scope of signature |\n| `attributes` | TransactionAttribute[]   | Transaction attributes                                    |\n| `script`     | byte[]   | Script executed on the NeoVM |\n| `witnesses`  | Witness[]   | List of scripts used to validate the transaction    |\n\n### version\n\nThe version allows the transaction structure to be updated to make it backward compatible. The current version is 0.\n\n### signers\n\nThe first field is the script hash of the transaction sender account. Since UTXO model has been deprecated in Neo N3 and the native assets NEO and GAS turned into NEP-17 assets, the input and outputs fields are no longer recorded in the transaction structure, instead, the `sender` is used to track the sender of the transaction. \n\nThe rest fields are used to define the effective scope of signature. When checkwitness is used for transaction verification, cosigners except the transaction sender need to define the scope of their signature. See [Signature Scope](#signature-scope) for details.\n\n| Field              | Description                                                  | Type             |\n| ------------------ | ------------------------------------------------------------ | ---------------- |\n| `Account`          | Script hash of the account                                   | `UInt160`        |\n| `Scopes`           | Effective range of the signature.                            | `WitnessScope`   |\n| `AllowedContracts` | Signs array of the allowed contract scripts                  | `UInt160[]`      |\n| `AllowedGroups`    | Signs public keys of the allowed contract groups             | `ECPoint[]`      |\n| `Rules`            | Enters the signature rule array when `scopes` is set to `WitnessRules`. | `WitnessRules[]` |\n\n### sysfee\n\nThe system fee depends on the transaction's script, i.e., its size, number and type of NeoVM instructions. The 10 GAS free system fee is canceled in Neo N3. The calculation formula is as", "doc_id": "f333bac4-a733-49c3-a601-7d95f461bee6", "embedding": null, "doc_hash": "8ea67d5e802b29c5ae88b2324ecda01e8689e39818e441100507105fffe0e9d3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 0, "end": 2927, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "3": "39969cbd-85c2-4a47-98fb-55f83ec3ecdf"}}, "__type__": "1"}, "39969cbd-85c2-4a47-98fb-55f83ec3ecdf": {"__data__": {"text": "free system fee is canceled in Neo N3. The calculation formula is as follows:\n\n![](../../../zh-cn/basic/images/transaction/system_fee.png)\n\nwhere *OpcodeSet* is opcode set, *OpcodePrice<sub>i</sub>* is the cost of opcode i, *n<sub>i</sub>* is the execution times of instruction i in the contract script. For each opcode fee refer to [Fees for Instructions](../../reference/fees.md#fees-for-instructions).\n\n### netfee\n\nThe network fee is charged when the user submits a transactions to Neo blockchain as a reward for consensus nodes generating blocks. There is a  base fee for each transaction. The transaction is only executed if the fee paid by the user is greater than or equal to the base fee; otherwise, the transaction will be treated as invalid. The calculation formula is as follows:\n\n![network fee](../../../zh-cn/basic/images/transaction/network_fee.png)\n\nwhere *VerificationCost* is the fee for instructions executed by NeoVM to verify transaction signatures, *tx.Length* is the transaction data byte length, and *FeePerByte* is transaction fee per byte, currently 0.00001 GAS.\n\n### attributes\n\nAdditional attributes are allowed to be added to transactions of specific types. You need to define the usage type, internal and external data size for each attribute.\n\nUp to 16 attributes can be added to one transaction.\n\n\n### script\n\nThe script that is executed on the NeoVM and determines the effects of the transaction.\n\n### witnesses\n\nwitnesses verifies the validity and integrity of a transaction. It includes two attributes.\n\n| Field                | Description                                                  |\n| -------------------- | ------------------------------------------------------------ |\n| `InvocationScript`   | Executes the script and passes parameters to the verification script |\n| `VerificationScript` | Verification script                                          |\n\nYou can add multiple witnesses to each transaction, or use witnesses with multiple signatures.\n\n#### Invocation Script\n\nConstruct an invocation script to add signature:\n\n`0x0C` (PUSHDATA1) + `0x40` ( 64-byte ) + signature\n\nBy repeating this step, the invocation script can push multiple signatures for the multi-signature contract.\n\n#### Verification Script\n\nVerification script, commonly known as address script, includes normal address script and multi-signature address script. The address script can be directly obtained from the wallet account. For information about the construction refer to [Wallets](wallets.md#address).\n\nIt can also be used as a custom authentication contract script.\n\n## Transaction serialization\n\nIn Neo all variable-length integer types except IP addresses and port numbers are stored in little-endian order. When the transaction is serialized, it is executed in the following field order:\n\n| Field             | Description                                                  |\n| ----------------- | ------------------------------------------------------------ |\n| `version`         | -                                                            |\n| `nonce`           | -  ", "doc_id": "39969cbd-85c2-4a47-98fb-55f83ec3ecdf", "embedding": null, "doc_hash": "a05e919e517f948299f51f45db2912beed94da1e5ede8156ec8072daa73ae45d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 2872, "end": 5971, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "f333bac4-a733-49c3-a601-7d95f461bee6", "3": "280d5de1-28a5-4401-8ae3-e0a1721ba762"}}, "__type__": "1"}, "280d5de1-28a5-4401-8ae3-e0a1721ba762": {"__data__": {"text": "`nonce`           | -                                                            |\n| `systemFee`       | -                                                            |\n| `networkFee`      | -                                                            |\n| `validUntilBlock` | -                                                            |\n| `signers`         | Need to serializes `WriteVarInt(length) `first and then other elements of the array |\n| `attributes`      | Need to serializes `WriteVarInt(length)` first and then other elements of the array |\n| `script`          | Need to serializes `WriteVarInt(length) `first and then the byte array |\n| `witnesses`       | Need to serializes `WriteVarInt(length) `first and then other elements of the array |\n\n\n> [!Note]\n>\n> WriteVarInt (value)  stores a non-fixed-length type based on the value of value, and determines the storage size according to the range of values.\n\n| Value Range         | Storage Type         |\n| ------------------- | -------------------- |\n| value < 0xFD        | byte(value)          |\n| value <= 0xFFFF     | 0xFD + ushort(value) |\n| value <= 0xFFFFFFFF | 0xFE + uint(value)   |\n| value > 0xFFFFFFFF  | 0xFF + value         |\n\n## Transaction Signature\n\nThe transaction signature is to sign the data of the transaction itself by ECDSA method (not including the signature data, i.e. the witnesses part) and then fill in the witnesses in the transaction body.\n\nHere is an example of a JSON-format transaction, where the script and witnesses fields use Base64 instead of the original Hexstring encoding:\n\n```Json\n{\n  \"hash\": \"0xd2b24b57ea05821766877241a51e17eae06ed66a6c72adb5727f8ba701d995be\",\n  \"size\": 265,\n  \"version\": 0,\n  \"nonce\": 739807055,\n  \"sender\": \"NMDf1XCbioM7ZrPZAdQKQt8nnx3fWr1wdr\",\n  \"sys_fee\": \"9007810\",\n  \"net_fee\": \"1264390\",\n  \"valid_until_block\": 2102402,\n  \"signers\": [{\n    \"account\": \"0xdf93ea5a0283c01e8cdfae891ff700faad70500e\",\n    \"scopes\": \"FeeOnly\"\n  },\n  {\n    \"account\": \"0xdf93ea5a0283c01e8cdfae891ff700faad70500e\",\n    \"scopes\": \"CalledByEntry\"\n  }],\n  \"attributes\": [],\n  \"script\":", "doc_id": "280d5de1-28a5-4401-8ae3-e0a1721ba762", "embedding": null, "doc_hash": "5249fa7fdd7e21d3250358205e2f1c22950895e00f45372d0bb8ef27fb9b23e1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 6019, "end": 8108, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "39969cbd-85c2-4a47-98fb-55f83ec3ecdf", "3": "7275953c-b4ee-421e-ad4a-35c52565d044"}}, "__type__": "1"}, "7275953c-b4ee-421e-ad4a-35c52565d044": {"__data__": {"text": " }],\n  \"attributes\": [],\n  \"script\": \"EQwUDlBwrfoA9x+Jrt+MHsCDAlrqk98MFA5QcK36APcfia7fjB7AgwJa6pPfE8AMCHRyYW5zZmVyDBSJdyDYzXb08Aq/o3wO3YicII/em0FifVtSOA==\",\n  \"witnesses\": [{\n    \"invocation\": \"DEDy/g4Lt+FTMBHHF84TSVXG9aSNODOjj0aPaJq8uOc6eMzqr8rARqpB4gWGXNfzLyh9qKvE++6f6XoZeaEoUPeH\",\n    \"verification\": \"DCECCJr46zTvjDE0jA5v5jrry4Wi8Wm7Agjf6zGH/7/1EVELQQqQatQ=\"\n  }]\n}\n```\n\n## Signature Scope\n\nIn Neo Legacy transaction signature is globally effective. In order to allow users to control the signature scope at a finer level of granularity, WitnessScope is added to  Neo N3 and the signers field in the transaction structure is changed, so that the signature can be used only for verifying the specified contract, preventing unauthorized contracts from using the user signature.\n\n### Scopes\n\nWhen constructing a transaction, you need to specify the field `scopes` in `signers`, which defines the effective range of the signature, including these types:\n\n| **Field** | **Name**          | **Description**                                              |\n| --------- | ----------------- | ------------------------------------------------------------ |\n| 0x00      | `None`            | The signature is used for transactions only, and is disabled in contracts |\n| 0x01      | `CalledByEntry`   | The signature is only effective to the contract script called by Entry. |\n| 0x10      | `CustomContracts` | The signature is only effective to the specified contract script. It can be used in conjunction with CalledByEntry. |\n| 0x20      | `CustomGroups`    | The signature is effective to contracts in the group. It can be used in conjunction with CalledByEntry. |\n| 0x80      | `Global`          | The signature is globally effective. The risk is extremely high because the contract may transfer all assets in the address. Only choose it when the contract is extremely trusted. |\n| 0x40      | `WitnessRules`    | You need to specify the rule and scope. See [WitnessRule](#witnessrule) |\n\nFor better understanding, suppose there is a contract invocation chain: **[entry]->[Contract A]->[Contract B]->[Contract C]...->[Target]**\n\nAnd the Target contract invokes CheckWitness to verify the signature. The verification result varies when `scopes` is set to different value. \n\n- `None` - The verification is not be passed no matter where the **Target** contract is.\n- `Global` - The verification is passed no matter where the **Target** contract is.\n- `CallByEntry` - The verification is passed only when the **Target** contract is **entry** or **Contract A**.\n- `CustomContracts` - The verification is passed only when the **Target** contract belongs to **CustomContracts**, a contract list you need to customize.\n- `CustomGroups` - The verification is passed only when the **Target** contract is authenticated by any public key in **CustomGroups**, a public key group you need to customize.\n\n###", "doc_id": "7275953c-b4ee-421e-ad4a-35c52565d044", "embedding": null, "doc_hash": "0e31c18ed0f1a45652774c3c9ccf15f69c14884e1940378d5d99503c5737521b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 8088, "end": 10977, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "280d5de1-28a5-4401-8ae3-e0a1721ba762", "3": "86cde280-8bd1-4fa7-a740-4ca4ba6c8650"}}, "__type__": "1"}, "86cde280-8bd1-4fa7-a740-4ca4ba6c8650": {"__data__": {"text": "in **CustomGroups**, a public key group you need to customize.\n\n### WitnessRule\n\nAction(Allow|Deny) and Condition\n\nThe execution logic is to execute the condition and, if is met, return Action, where Allow represents a successful check and Deny represents a failed check.\n\n#### WitnessCondition\n\n- Boolean: true|false\n\n  \u201cexpression\u201d = <bool>\n\n  ```\n  //Equals to WitnessScope.Global\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Boolean\",\n                  \"expression\": true\n              }\n          }\n      ]\n  }\n  ```\n\n- Not: Logical NOT. It reverses other conditions.\n\n  \u201cexpression\u201d=<Condition>\n\n  ```\n  // The signature is allowed only when the contract is not 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Not\",\n                  \"expression\": {\n                      \"type\": \"ScriptHash\",\n                      \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                  }\n              }\n          }\n      ]\n  }\n  \n  ```\n\n- And: Logical conjunction\n\n  \u201cexpressions\u201d=<Condition[]>\n\n  ```\n  // The signature is allowed only when the contract is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 and is invoked at entry\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"And\",\n                  \"expressions\": [{\n                          \"type\": \"ScriptHash\",\n                          \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n       ", "doc_id": "86cde280-8bd1-4fa7-a740-4ca4ba6c8650", "embedding": null, "doc_hash": "1bf7f8e9ebed55417525380747432a82be36530f994d07631091b79f4989116f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 10950, "end": 12803, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "7275953c-b4ee-421e-ad4a-35c52565d044", "3": "f3fa3c08-6a3c-4621-aede-7adcb22f50bd"}}, "__type__": "1"}, "f3fa3c08-6a3c-4621-aede-7adcb22f50bd": {"__data__": {"text": "                     }, {\n                          \"type\": \"CalledByEntry\"\n                      }\n                  ]\n              }\n          }\n      ]\n  }\n  ```\n\n- Or: Logical OR\n\n  \u201cexpressions\u201d=<Condition[]>\n\n  ```\n  // The signature is allowed only when the contract is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 or is invoked at entry\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Or\",\n                  \"expressions\": [{\n                          \"type\": \"ScriptHash\",\n                          \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                      }, {\n                          \"type\": \"CalledByEntry\"\n                      }\n                  ]\n              }\n          }\n      ]\n  }\n  ```\n\n- ScriptHash: verifies that the current contract matches. It equals to CustomContracts\n\n  \u201chash\u201d= <UInt160>\n\n  ```\n  // Only the contract 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 is allowd to use the signature\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"ScriptHash\",\n                  \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n              }\n          }\n      ]\n  }\n  ```\n\n- Group: verifies that the current contract public key matches. It equals to CustomGroups\n\n  \u201cgroup\u201d=<ECPoint>\n\n  ```\n  // Only the contract authorized by 021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231 is allowed to use the signature\n ", "doc_id": "f3fa3c08-6a3c-4621-aede-7adcb22f50bd", "embedding": null, "doc_hash": "1ef31770f2da42d429125fc2579f6e7f8852dc6075c77c329b73b2cafc552331", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 12862, "end": 14536, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "86cde280-8bd1-4fa7-a740-4ca4ba6c8650", "3": "1a831e82-2fe7-437b-a75c-60885da5cb9a"}}, "__type__": "1"}, "1a831e82-2fe7-437b-a75c-60885da5cb9a": {"__data__": {"text": "is allowed to use the signature\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Group\",\n                  \"group\": \"021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231\"\n              }\n          }\n      ]\n  }\n  ```\n\n- CalledByEntry: Verifies if the current contract is an entry invocation. It equals to CallByEntry\n\n  ```\n  // Equals to WitnessScope.CallByEntry\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"CalledByEntry\"\n              }\n          }\n      ]\n  }\n  ```\n\n- CalledByContract: verifies that the previous level contract hash matches.\n\n  \u201chash\u201d=<UInt160>\n\n  ```\n  // The signature is allowed only when the previous level contract is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"CalledByContract\",\n                  \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n              }\n          }\n      ]\n  }\n  ```\n\n- CalledByGroup: verifies that the previous level contract public key matches.\n\n  \u201cgroup\u201d=<UInt160>\n\n  ```\n  // The signature is allowed only when the previous level contract is authorized by the public key 021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"CalledByGroup\",\n         ", "doc_id": "1a831e82-2fe7-437b-a75c-60885da5cb9a", "embedding": null, "doc_hash": "f08cce77addc5f79918aae170ec151a5984e95e665b7149a928896bcb0b8e5d8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 14510, "end": 16346, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "f3fa3c08-6a3c-4621-aede-7adcb22f50bd", "3": "6623250b-38b6-416a-a741-241402e68b4a"}}, "__type__": "1"}, "6623250b-38b6-416a-a741-241402e68b4a": {"__data__": {"text": " \"type\": \"CalledByGroup\",\n                  \"group\": \"021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231\"\n              }\n          }\n      ]\n  } \n  ```\n\n### Example\n\nCurrently you can only define this field when constructing the transaction with SDK. For better understanding you can refer to the following code example in the JSON format. \n\n```json\n{\n    \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n    \"scopes\": \"WitnessRules\",\n    \"rules\": [{\n            \"action\": \"Allow\",\n            \"condition\": {\n                \"type\": \"Not\",\n                \"expression\": {\n                    \"type\": \"And\",\n                    \"expressions\": [{\n                            \"type\": \"ScriptHash\",\n                            \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                        }, {\n                            \"type\": \"CalledByEntry\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n```\n\n", "doc_id": "6623250b-38b6-416a-a741-241402e68b4a", "embedding": null, "doc_hash": "6a2ff80c86301550a03360c2544a716bf5eb44d2403c9d903badd6e12af96ddb", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}, "node_info": {"start": 16338, "end": 17315, "_node_type": "1"}, "relationships": {"1": "ea15d5b4a547a3cb5b744b26c5121271110d9d6e", "2": "1a831e82-2fe7-437b-a75c-60885da5cb9a"}}, "__type__": "1"}, "7eb48995-4cbc-4242-929c-bf011a2f6a35": {"__data__": {"text": "# Wallets\n\nWallets are basic components of Neo and the bridges for users to access Neo network. They are responsible for transaction operations such as transfer, contract deployment, asset registration, etc.\n\nYou can redesign and modify Neo wallets following your own thoughts, but the below rules and patterns must be followed.\n\n## Accounts\n\nIn Neo, the account is the smart contract and the address represents a contract script. The below flow diagram shows how to derive the public key from the private key and then to the address:\n\n![](../images/wallets/privatekey-2-publickey-address.png)\n\n### Private Key\n\nA private key is a random value generated between 1 and n (n is a constant, less than 2^256 slightly), and is represented by a 256 bit (32 bytes) number generally.\n\nThere are two main encoding formats for private keys in Neo:\n\n- Hexstring Format\n\n   The hexstring format is a string that uses hexadecimal characters to represent byte array.\n\n- WIF Format\n\n   The wif format is to add prefix `0x80` and suffix `0x01` in the original 32-byte data, and get the string after Base58Check encoding.\n\n![](../images/wallets\\wif_format.png)\n\n Example: \n\n| Format | Value |\n|---|---|\n| byte[] | [0xc7,0x13,0x4d,0x6f,0xd8,0xe7,0x3d,0x81,0x9e,0x82,0x75,<br>0x5c,0x64,0xc9,0x37,0x88,0xd8,0xdb,0x09,0x61,0x92,0x9e,<br>0x02,0x5a,0x53,0x36,0x3c,0x4c,0xc0,0x2a,0x69,0x62] |\n| hexstring | c7134d6fd8e73d819e82755c64c93788d8db0961929e025a53363c4cc02a6962 |\n| wif | L3tgppXLgdaeqSGSFw1Go3skBiy8vQAM7YMXvTHsKQtE16PBncSU |\n\n### Public Key\n\nThe public key is a point (X, Y) calculated through the ECC algorithm with the private key. The X, Y coordinates can be represented by 32-byte data. Different from Bitcoin, Neo chooses secp256r1 as the curve of the ECC algorithm. There are two public key formats in Neo:\n\n- Uncompressed Public Key\n\n    0x04 + X (32 bytes) +  Y (32 bytes) \n\n- Compressed Public Key\n\n    0x02/0x03 + X (32 bytes)\n\nExample:\n\n| Format | Value |\n|----------|:-------------:|\n| Private Key | c7134d6fd8e73d819e82755c64c93788d8db0961929e025a53363c4cc02a6962|\n| Public Key (Compressed) | 035a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a |\n| Public Key (Uncompressed)  | 045a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a35dfabcb79ac492a2a88588d2f2e73f045cd8af58059282e09d693dc340e113f  |\n\n### Address\n\nAddress is a string of numbers and letters after a series of transformations of the public key. This section will describes the steps of conversion from a public key to an address in Neo.\n\n> [!Note]\n>\n> The address script in Neo N3 has changed not using the Opcode.CheckSig and", "doc_id": "7eb48995-4cbc-4242-929c-bf011a2f6a35", "embedding": null, "doc_hash": "8d3b1b439fd8ff32dd2d3ef67f39cd7a911a7a5c52c87b3bda6e0b9fb2868685", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 0, "end": 2619, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "3": "334500b5-7037-401c-9ea9-d8a3c45b8308"}}, "__type__": "1"}, "334500b5-7037-401c-9ea9-d8a3c45b8308": {"__data__": {"text": "The address script in Neo N3 has changed not using the Opcode.CheckSig and OpCode.CheckMultiSig but the interoperable service call `SysCall \"Neo.Crypto.CheckSig\".hash2uint`, `SysCall \"Neo.Crypto.CheckMultisig\".hash2unit` instead.\n\n#### Ordinary Address\n\n1. Build a `CheckSig` script with the public key, and the format is as follows:\n\n    ```\n    0x0C + 0x21 + Public Key (Compressed 33 bytes) + 0x41 + 0x56e7b327\n    ```\n\n    ![](..\\images\\wallets\\account_address_script_checksign.png)\n\n2. Calculate script hash of the contract (20 bytes, make once SHA256 and RIPEMD160 of the script). \n\n3. Add the version prefix in the hash (Currently, the Neo protocol version is 53 and the corresponding byte is  `0x35`).\n\n4. Make Base58Check encoding for the above byte data.\n\nExample\uff1a\n\n| Format | Value |\n|----------|:-------------:|\n| Private Key | 087780053c374394a48d685aacf021804fa9fab19537d16194ee215e825942a0 |\n| Public Key (Compressed) | 03cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c |\n| Script | 0c2103cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c4156e7b327 |\n| Address | NNLi44dJNXtDNSBkofB48aTVYtb1zZrNEs |\n\n#### Multi-Signature Address\n\n1. Construct an N-of-M `CheckMultiSig` script with multiple addresses. The script format is as follows: \n\n   ```\n   emitPush(N) + 0x0C + 0x21 + Public Key 1 (Compressed 33 bytes)  + .... + 0x0C + 0x21 + Public Key m (Compressed 33 bytes)  + emitPush(M) + 0x41 + 0x9ed0dc3a\n   ```\n\n   ![](..\\images\\wallets\\account_address_script_multi_checksign.png)\n\n2. Calculate script hash of the contract (20 bytes, make once SHA256 and RIPEMD160 of the script).\n\n3. Add the version prefix in the hash. (Currently, the Neo protocol version is 53 and the corresponding byte is  `0x35`)\n\n4. Make Base58Check encoding for the above byte data.\n\nExample:\n\n| Format                  | Value                                                        |\n| ----------------------- | ------------------------------------------------------------ |\n| Private Key             | 087780053c374394a48d685aacf021804fa9fab19537d16194ee215e825942a0<br/>9a973a470b5fd7a2c12753a1ef55db5a8c8dde42421406a28c2a994e1a1dcc8a |\n| Public Key (Compressed) | 03cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c<br/>036c8431cc78b33177a60b4bcc02baf60d05fee5038e7339d3a688e394c2cbd843 |\n| Script                  |", "doc_id": "334500b5-7037-401c-9ea9-d8a3c45b8308", "embedding": null, "doc_hash": "87e375b0b300cc58bcf493534dbe332874e4613f2657c7fb8fe679300a898e8f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 2558, "end": 4915, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "7eb48995-4cbc-4242-929c-bf011a2f6a35", "3": "14c505ac-1129-480d-9c96-f2ecbe17802f"}}, "__type__": "1"}, "14c505ac-1129-480d-9c96-f2ecbe17802f": {"__data__": {"text": "Script                  | 110c21036c8431cc78b33177a60b4bcc02baf60d05fee5038e7339d3a688e394c2cbd8430c2103cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c12419ed0dc3a |\n| Address                 | NZ3pqnc1hMN8EHW55ZnCnu8B2wooXJHCyr                           |\n\n> [!Note]\n>\n> Please pay attention to the interval of the number for the usage of `emitPush(number)`. Here is an example in the case of the number being BigInteger, where data = number.ToByteArray():\n\n| Number           | Emit OpCode                        | Value            |\n| ---------------- | ---------------------------------- | ---------------- |\n| -1 <= number <= 16  | OpCode.PUSH0 + (byte)(int)number | 0x10 + number   |\n| data.Length == 1  | OpCode.PUSHINT8 + data | 0x00 + data   |\n| data.Length == 2  | OpCode.PUSHINT16 + data | 0x01 + data   |\n| data.Length <= 4  | OpCode.PUSHINT32 + data | 0x02 + PadRight(data, 4)   |\n| data.Length <= 8  | OpCode.PUSHINT64 + data | 0x03 + PadRight(data, 8)   |\n| data.Length <= 16  | OpCode.PUSHINT128 + data | 0x04 + PadRight(data, 16) |\n| data.Length <= 32  | OpCode.PUSHINT256 + data | 0x05 + PadRight(data, 32) |\n\n### The wallet address scripthash\n\nWhen creating a wallet in Neo blockchain, the private key, public key, wallet address, and related scripthash are generated. \n\nLet's look at a standard wallet address and corresponding scripthash strings in big and little endian formats beneath. \n\n| Format                   |                   String                   |\n| ------------------------ | :----------------------------------------: |\n| Adress                   |     NUnLWXALK2G6gYa7RadPLRiQYunZHnncxg     |\n| Big-endian Scripthash    | 0xed7cc6f5f2dd842d384f254bc0c2d58fb69a4761 |\n| Little-endian Scripthash |  61479ab68fd5c2c04b254f382d84ddf2f5c67ced  |\n| Base64 Scripthash        |        YUeato/VwsBLJU84LYTd8vXGfO0=        |\n\nTo convert between the wallet address and scripthash, or between big endian and little endian byte order, use the tool [Data Convertor](https://neo.org/converter).\n\n## Wallet Files\n\n### db3 files\n\nThe db3 wallet is commonly used in wallets of the exchange to facilitate a large amount of account information storage and the retrieval queries.\n\nA db3 wallet file uses SQLite to store data, and the file name extension is `.db3`. There are four tables created in db3 file\uff1a\n\n- Account\n\n  | Field", "doc_id": "14c505ac-1129-480d-9c96-f2ecbe17802f", "embedding": null, "doc_hash": "9cb3ea285a770723786867deba43c2fed6c65e3dc17e29e64cb37b0f8b755b83", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 4971, "end": 7336, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "334500b5-7037-401c-9ea9-d8a3c45b8308", "3": "db319837-84a1-43fa-ac1a-322460982415"}}, "__type__": "1"}, "db319837-84a1-43fa-ac1a-322460982415": {"__data__": {"text": "are four tables created in db3 file\uff1a\n\n- Account\n\n  | Field               | Type          | isRequired | Note             |\n  | ------------------- | ------------- | ---------- | ---------------- |\n  | PrivateKeyEncrypted | VarBinary(96) | Yes        | AES256 encrypted |\n  | PublicKeyHash       | Binary(20)    | Yes        | Primary Key      |\n\n- Address\n\n  | Field      | Type       | isRequired | Note        |\n  | ---------- | ---------- | ---------- | ----------- |\n  | ScriptHash | Binary(20) | Yes        | Primary Key |\n\n- Contract\n\n  | Field         | Type       | isRequired | Note                                               |\n  | ------------- | ---------- | ---------- | -------------------------------------------------- |\n  | RawData       | VarBinary  | Yes        |                                                    |\n  | ScriptHash    | Binary(20) | Yes        | Primary Key\uff0cForeign Key\uff0cassociated Address table |\n  | PublicKeyHash | Binary(20) | Yes        | Index\uff0cForeign Key\uff0cassociated Account table       |\n\n- Key\n\n  | Field | Type        | isRequired | Note        |\n  | ----- | ----------- | ---------- | ----------- |\n  | Name  | VarChar(20) | Yes        | Primary Key |\n  | Value | VarBinary   | Yes        |             |\n\nIn `Key` table\uff0cit mainly stores the AES256 attributes:\n\n- `PasswordHash`: the hash of the passowrd, by using SHA256 hash operation.\n\n- `IV`: an initial vector of AES, randomly generated.\n\n- `MasterKey`: an encrypted ciphertext, obtained by encrypting the private key using AES256 algorithm with `PasswordKey`, `IV` parameters.\n\n- `Version`: the version of the wallet\n\nThe db3 wallet uses the AES (symmetrical encryption) as its encryption and decryption method.\n\n### NEP6 files\n\nAn NEP6 wallet file complies with the NEP6 standard, and the file name extension is `.json`. The JSON format is as follows:\n\n```json\n{\n\t\"name\": null,\n\t\"version\": \"3.0\",\n\t\"scrypt\": {\n\t\t\"n\": 16384,\n\t\t\"r\": 8,\n\t\t\"p\": 8\n\t},\n\t\"accounts\": [\n\t\t{\n\t\t\t\"address\": \"Nf8iN8CABre87oDaDrHSnMAyVoU9jYa2FR\",\n\t\t\t\"label\": null,\n\t\t\t\"isdefault\": false,\n\t\t\t\"lock\": false,\n\t\t\t\"key\": \"6PYM9DxRY8RMhKHp512xExRVLeB9DSkW2cCKCe65oXgL4tD2kaJX2yb9vD\",\n\t\t\t\"contract\": {\n\t\t\t\t\"script\": \"DCEDYgBftumtbwC64LbngHbZPDVrSMrEuHXNP0tJzPlOdL5BdHR2qg==\",\n\t\t\t\t\"parameters\":", "doc_id": "db319837-84a1-43fa-ac1a-322460982415", "embedding": null, "doc_hash": "14b51e2a49a76245a7eb3e1921805fcfbe52bd51f859ffa9342f4bc8514b459c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 7296, "end": 9557, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "14c505ac-1129-480d-9c96-f2ecbe17802f", "3": "3ffee6d2-290a-4cfe-8caa-ecf507740f8c"}}, "__type__": "1"}, "3ffee6d2-290a-4cfe-8caa-ecf507740f8c": {"__data__": {"text": "[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"signature\",\n\t\t\t\t\t\t\"type\": \"Signature\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"deployed\": false\n\t\t\t},\n\t\t\t\"extra\": null\n\t\t}\n\t],\n\t\"extra\": null\n}\n```\n> In this example the password is 1\n\n| Field                           | Description                                                  |\n| ------------------------------- | ------------------------------------------------------------ |\n| name                            | a label that the user attaches to the wallet file            |\n| version                         | currently it is 3.0                                          |\n| scrypt\uff08n/r/p\uff09                 | (n/r/p) are parameters for scrypt algorithm used for encrypting and decrypting the private keys in the wallet |\n| accounts                        | an array of Account objects which describe the details of each account in the wallet |\n| account.address                 | account address                                              |\n| account.label                   | account label, null by default                               |\n| account.isDefault               | whether is the default account of wallet                     |\n| account.lock                    | whether the account is locked                                |\n| account.key                     | export nep2key of the privatekey                             |\n| account.contract                | the contract of the script                                   |\n| account.contract.script         | address script                                               |\n| account.contract.parameters     | parameter list for the address script contract               |\n| account.contract.parameter.name | parameter name for the address script contract               |\n| account.contract.parameter.type | parameter name for the address script contract               |\n| account.contract.deployed       | whether is deployed          ", "doc_id": "3ffee6d2-290a-4cfe-8caa-ecf507740f8c", "embedding": null, "doc_hash": "b8cc658905fd6079674c2edadaec36dea5fc4f9fe49b521e1fb9d3cda32fd906", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 9606, "end": 11513, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "db319837-84a1-43fa-ac1a-322460982415", "3": "58127a79-1731-4901-9949-a6fd693e3023"}}, "__type__": "1"}, "58127a79-1731-4901-9949-a6fd693e3023": {"__data__": {"text": "    | whether is deployed                                          |\n| account.extra                   | additional attributes of the account, null by default        |\n| extra                           | additional attributes of the wallet, null by default         |\n\nAn NEP6 wallet uses scrypt algorithm as the core method of wallet encryption and decryption.\n\n#### Encryption steps\n\n![](..\\images\\wallets\\nep2key.png)\n\n1. The address is derived from the public key, and the address hash is the first four bytes of `SHA256(SHA256(Address))`\n\n2. Calculate a `derivedkey` by the scrypt algorithm, and divide the 64-byte data into two halves as `derivedhalf1` and `derivedhalf2` Scrypt uses the following parameters:\n\n    - ciphertext: The entered password (UTF-8 format)\n\t- salt: address hash\n\t- n: 16384\n\t- r: 8\n\t- p: 8\n\t- length: 64\n\n3. Do xor operation on the private key and `derivedhalf1`, and then get `encryptedkey` by using AES256 to encrypt it with `derivedhalf2`\n\n4. Concatenate data according to the following format and obtain `NEP2Key` by using Base58Check encoding of it\n\n\t`0x01` + `0x42` + `0xe0` + address hash + `encryptedkey`\n\n**Decryption steps**\uff1a\n\n1. Decode NEP2Key by using Base58Check decoding\n\n2. Check whether the length of decoded data is 39 bytes, and the first three bytes (data[0-2]) are `0x01`, `0x42` and `0xe0`\n\n3. Take data[3-6] as `addresshash`\n\n4. Put the password and addresshash into the Scrypt algorithm. Specify the result length to 64. Then get the `derivedkey`\n\n5. Take Derivedkey[0-31] as `Derivedhalf1`, and Derivedkey[32-63] as `Derivedhalf2`\n\n6. Take data[7-38] as `Encryptedkey` (32 bytes), and decrypt it using AES256 with `derivedhalf2` as the initial vector\n\n7. Do xor operation on the decrypted data and `derivedhalf1` to obtain the private key\n\n8. Get the public key from the private key with ECC algorithm, and then get the address. Check whether the first four bytes of the result of `SHA256(SHA256(Address))` is equal to the `addresshash`. If it's the same, then you get the correct private key\n\nMore details about NEP2 and NEP6 proposals are in the Neo document.\n\nNEP2 proposal: <https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki>\n\nNEP6 proposal\uff1a<https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki>\n\n## Signature\n\nNeo employs the `ECDSA` algorithm to sign the transaction through the wallet component and take the `nistP256` or `Secp256r1` as the ECC curve and SHA256 as the hash algorithm.\n\nC# code\uff1a\n\n```c#\n        public static byte[] Sign(byte[] message, byte[] prikey, byte[] pubkey)\n        {\n            using (var ecdsa = ECDsa.Create(new ECParameters\n            {\n                Curve =", "doc_id": "58127a79-1731-4901-9949-a6fd693e3023", "embedding": null, "doc_hash": "2778bc75c1fcab7aa81e66c2de624eb7c09287da88f4ba5576d82895bdec14e1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 11496, "end": 14182, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "3ffee6d2-290a-4cfe-8caa-ecf507740f8c", "3": "7d0c394b-371c-440b-8457-09f3ef3ddc76"}}, "__type__": "1"}, "7d0c394b-371c-440b-8457-09f3ef3ddc76": {"__data__": {"text": "{\n                Curve = ECCurve.NamedCurves.nistP256,\n                D = prikey,\n                Q = new ECPoint\n                {\n                    X = pubkey[..32],\n                    Y = pubkey[32..]\n                }\n            }))\n            {\n                return ecdsa.SignData(message, HashAlgorithmName.SHA256);\n            }\n        }\n```\n\nExample:\n\n| Format     | Value                                                        |\n| ---------- | ------------------------------------------------------------ |\n| data       | hello world                                                  |\n| PrivateKey | f72b8fab85fdcc1bdd20b107e5da1ab4713487bc88fc53b5b134f5eddeaa1a19 |\n| PublicKey  | 031f64da8a38e6c1e5423a72ddd6d4fc4a777abe537e5cb5aa0425685cda8e063b |\n| signature  | b1855cec16b6ebb372895d44c7be3832b81334394d80bec7c4f00a9c1d9c3237541834638d11ad9c62792ed548c9602c1d8cd0ca92fdd5e68ceea40e7bcfbeb2 |\n\n## Wallet Function\n\n| Function Name   |  Description                                                  |\n| ---------------- | ------------------------------------------------------------ |\n| Import wallet file     |  Import the account information from the specified wallet file   |\n| Export wallet file     |  Store the account information (including private key, password, address, etc.) in the specified wallet file such as db3 wallet file, nep6 json file.  \t\t\t  |\n| Unlock wallet         | Verify user password to prevent leaks                   |\n| Create private key         | Recommend safe random generator\t\t\t     \t  |\n| Import private key         | Add new private key to the wallet with wif format or digital certificate   |\n| Export private key         | Export accounts' private key         \t\t\t  |\n| Generate public key         | Obtain public key by ECC algorithm with private key |\n| Generate address         |  Generate address based on private key               |\n| Import address         | Add new address to the wallet  \t\t\t\t\t\t  |\n| Export address         | Export accounts' address                              ", "doc_id": "7d0c394b-371c-440b-8457-09f3ef3ddc76", "embedding": null, "doc_hash": "382c60bd8f6c58043fc2b04880014e234f34cf719d66c15499ecdb030aba24ab", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 14193, "end": 16238, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "58127a79-1731-4901-9949-a6fd693e3023", "3": "705b4b66-7974-4ef7-ab54-332a70297c7d"}}, "__type__": "1"}, "705b4b66-7974-4ef7-ab54-332a70297c7d": {"__data__": {"text": "                    |\n| Import offline data |  Load block data in `chain.acc` file to reduce synchronization time    |\n| Export offline data | Export block data in `chain.acc` file \t\t\t\t  |\n| Synchronize block data     |                                        \t\t      |\n| Transfer             | Transfer to other addresses                              |\n| Sign             | Sign data, such as transactions                              |\n| Claim Gas          | Claim the newly allocated gas from the neo held by the account |\n| Get balance         | Show the balance of current wallet  |\n| Get transaction         | Show transaction history of current wallet |\n| Construct multi-signature contract | Construct multi-signature contract  |\n| Extend         |                                                                |\n| Deploy smart contract     |  Deploy smart contract |\n| Test smart contract     | Test smart contract |\n\n## Wallet software\n\n### Full-node wallet\n\nThe full-node wallet is a complete backup of blockchain data, which saves all the onchain data and participates in p2p network, therefore it needs a large storage space.\n\nNeo-CLI and Neo-GUI are all full-node wallet. For more information refer to [Neo node](../../node/introduction.md).\n\n### SPV wallet\n\nThe SPV (Simplified Payment Verification) wallet is different from full-node wallet. It doesn't store all block data, only block header data, and verifies the data by using bloom filter and merkle tree algorithm. It's mostly used in mobile app or light client, as it can save storage space effectively.\n\nFor developing SPV wallet, refer to the NEO network protocol interface.\n\nUsage:\n\n   1. The SPV wallet sends a bloom filter to the full node, and the full node loads the bloom filter.\n\n   2. The SPV wallet sends the bloom filter's parameters to the full node, and the full node load the parameters. (Optional)\n\n   3. The SPV wallet queries transactions from the full node, and the full node returns the transaction data after filtering with the bloom filter and the constructed merkle tree path.\n\n   4. The SPV wallet uses the merkle tree path to verify the transaction data.\n\n   5. The SPV wallet sends `clear the bloom filter` instruction to the full node, and the full node clear it.\n", "doc_id": "705b4b66-7974-4ef7-ab54-332a70297c7d", "embedding": null, "doc_hash": "78f51cc878fa53f829fe930bb91c535aef2d098fb3d5d8da31661254dceac582", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}, "node_info": {"start": 16227, "end": 18490, "_node_type": "1"}, "relationships": {"1": "855820ccd70b36a4ebdf0708322fe1d2f692aa20", "2": "7d0c394b-371c-440b-8457-09f3ef3ddc76"}}, "__type__": "1"}, "7c547599-adc4-4a59-8420-46f41a9c718a": {"__data__": {"text": "# dBFT 2.0 Algorithm\n\n## Terms\n\n| **Term**  | **Definition**                                               |\n| --------- | ------------------------------------------------------------ |\n| Consensus Node | Nodes that can propose a new block and vote for the proposed block      |\n| Normal Node | Nodes that can transfer and create transactions, are also ledges, but can neither propose new blocks nor vote  |\n| Speaker   | Validator in charge of creating and broadcasting a proposal block to the network |\n| Delegate  | Validator responsible for voting on the block proposal       |\n| Candidate | Account nominated for validator election                     |\n| Validator | Account elected from candidates to take part in consensus    |\n| View      | Referred to the dataset used during a round of consensus. View number *v* starts from 0 in each round and increases progressively upon consensus failure until the approval of the block proposal, and then is reset to 0. |\n\n## Consensus Message\n\nSix types of consensus messages are defined in dBFT2.0:\n\n| **Message**           | **Definition**                                               |\n| --------------------- | ------------------------------------------------------------ |\n| Prepare Request     | Message for starting a new round of consensus                    |\n| Prepare Response    | Message informing other validators that all necessary transactions have been collected for block creation |\n| Commit              | Message informing other validators that enough Prepare Response messages have been collected |\n| Change View Request | Message of view changing attempt                           |\n| Recovery Request    | Request for consensus data synchronization                 |\n| Recovery Message    | Response to Recovery Request message                         |\n\n## Consensus Flow\n\n### 3-Stage Consensus Flow\n\n![](../images/consensus/1.png)\n\nA round of consensus consists of 4 steps, as shown in the Figure above:\n\n1. Speaker starts consensus by broadcasting a Prepare Request message\n\n2. Delegates broadcast Prepare Response after receiving the Prepare Request message\n\n3. Validators broadcast Commit after receiving enough Prepare Response messages\n\n4. Validators produce & broadcast a new block after receiving enough Commit messages\n\nHere we introduce two variables as follows:\n\n![](../images/consensus/2.png)       \n\nwhere *N* is the number of validators.\n\nA normal algorithm flow is shown below.\n\n![](../images/consensus/3.png)\n\n##### 1)  Initialize local consensus information\n\n1. Initialize consensus context\n\n2. Set the validator whose index equals  *(h - v) mod N*  as the speaker. Here h is current block height, v is the current view, and N is the number of validators\n\n3. Set timeout period. For speaker, if it's handling RecoveryMessage from other nodes, timeout is set to 2<sup>v+1</sup> *T<sub>block</sub>, where *T<sub>block</sub>* is Block time and currently 15s. Otherwise, if the speaker has not participated in block generation in last consensus, timeout is set to", "doc_id": "7c547599-adc4-4a59-8420-46f41a9c718a", "embedding": null, "doc_hash": "300e3d9041c1041c5b5826088255a5d9456b29526a0ce9715f7984f9da6c3664", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_algorithm.html"}, "node_info": {"start": 0, "end": 3051, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "3": "7e29772e-89dd-480e-a7be-0c04204fdb91"}}, "__type__": "1"}, "7e29772e-89dd-480e-a7be-0c04204fdb91": {"__data__": {"text": "if the speaker has not participated in block generation in last consensus, timeout is set to *T<sub>block</sub>*. If the speaker has participated, calculate D = current time - time of last block's generation. Set timeout to T<sub>block</sub> - D if D < T<sub>block</sub>, or to 0. \n\n4. Broadcast the Recovery Request message to acquire the current consensus context if consensus is newly started.\n\n##### 2)  Validators listen to the network and collect transactions until timeout\n\n##### 3)  Start consensus\n\n- For speaker:\n\n  1. Select transactions from memory pool according to consensus policy after timeout, create and broadcast Prepare Request message with these transactions' hashes to start a new round of consensus\n\n  2. Package and broadcast each 500 selected transactions\n\n  3. Set timeout to (2<sup>v+1</sup> - k(v))*T<sub>block</sub>, where ![](../images/consensus/4.png)   \n\n- For delegates:\n\n   - In case of receiving Prepare Request from the speaker before timeout:\n   \n     1. Verify the validity of the message and whether it conforms to the local consensus context\n\n     2. Prolong local timeout by ![](../images/consensus/5.png)\n\n     3. Update local consensus context\n\n     4. For each hash contained in the message, attempt to acquire corresponding transactions from memory pool or unverified transaction pool, and add these transactions to consensus context\n\n     5. Ask for transactions not found in step 4 from other nodes\n\n    - Otherwise, attempt to change view\n\n##### 4)  Broadcast Prepare Response\n\n- If a delegate collects all transactions required in Prepare Request before timeout:\n\n  1. For each transaction received, in case of transaction verification failure or against consensus policy, attempt to change view, otherwise add the transaction to consensus context\n\n  2. Broadcast Prepare Response message\n\n  3. Prolong local timeout by ![](../images/consensus/5.png)\n\n- Otherwise, attempt to change view\n\n##### 5)  Collect Prepare Response and broadcast Commit\n\n- For the speaker and delegates who have received Prepare Request, if Prepare Response messages from M different delegates are received before timeout:\n\n   - For each Prepare Response message received:\n\n     1. Verify the validity of the message and whether it conforms to the local consensus context\n\n     2. Prolong local timeout by ![](../images/consensus/5.png)\n\n   - Broadcast Commit message\n\n- Otherwise, attempt to change view\n\n##### 6) Collect Commit message and create new block\n\n- For each validator already having all transactions required in Prepare Request message, in case of Commit messages from M different validators received:\n\n   - For each Commit message received:\n\n     1. Verify the validity of the message and whether it conforms to the local consensus context\n\n     2. Prolong local timeout by ![](../images/consensus/6.png)\n\n   - Create and broadcast the new block\n\n- Otherwise, broadcast the Recovery Message, and set the timeout to 2*T<sub>block</sub>\n\n##### 7)  Go back to step 1 to start a new round of consensus.\n\n### Change View Request\n\n#### Triggering conditions\n\n- If the transaction verification fails, the delegate will broadcast Change View Request attempting to replace speaker\n\n- In case of timeout while waiting for Prepare Request or Prepare Response, the delegate will broadcast Change View Request, attempting to replace the speaker\n\n#### Flow\n\n![](../images/consensus/8.png)\n\n1. Set the timeout to 2<sup>v+2</sup> * T<sub>block</sub> \n\n2. If the sum of nodes with Commit sent and fault nodes (referring to the validators from which no other validator receives", "doc_id": "7e29772e-89dd-480e-a7be-0c04204fdb91", "embedding": null, "doc_hash": "b8c3672375fc017b781359d13fa7e17a6c8fe418843fb05eed74d28cde38f2cf", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_algorithm.html"}, "node_info": {"start": 2975, "end": 6572, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "2": "7c547599-adc4-4a59-8420-46f41a9c718a", "3": "4bcb758f-7d39-4360-b069-26c5ed638f0e"}}, "__type__": "1"}, "4bcb758f-7d39-4360-b069-26c5ed638f0e": {"__data__": {"text": "nodes (referring to the validators from which no other validator receives messages during a block time) is greater than F, broadcast Recovery Request message\n\n3. Otherwise, broadcast Change View Request message, and check the amount of Change View Request received. If not less than M validators reach consensus upon view changing, change local view, initialize local consensus context, and determine the next round's speaker according to new view.\n\n#### Process logic\n\nWhen a validator receives Change View Request message:\n\n1. If the message's view is not greater than the local view, this message will be handled as Recovery Request\n\n2. Verify the validity of the message\n\n3. Check the amount of Change View Request received. If not less than M validators reach consensus upon view changing, change the local view, initialize local consensus context, and determine next round's speaker according to new view\n\n![](../images/consensus/9.png)\n\n### Recovery Request Message\n\n#### Triggering conditions\n\n- Broadcast Recovery Request message upon enabling the consensus policy to update local consensus context\n\n- Upon creating Change View Request, if there are not enough active validators (sum of nodes with Commit sent and fault nodes is greater than F), broadcast Recovery Request message to update the local consensus context\n\n#### Process logic\n\nUpon receiving Recovery Request, a validator will generate and broadcast Recovery Message only if the following conditions are met:\n\n- This node has already broadcast Commit message\n\n- This node's index belongs to the given interval: ![](../images/consensus/7.png) , where j is the index of Recovery Request sender\n\n![](../images/consensus/10.png)\n\n### Recovery Message\n\n#### Content\n\n- Change View Request messages from no more than M delegates\n\n- Prepare Request/Response messages\n\n- Commit messages\n\n#### Triggering conditions\n\n- Upon receiving Recovery Request message, if this node has already broadcast Commit message or its index belongs to the given interval:![](../images/consensus/7.png) , where j is the index of Recovery Request sender\n\n- Upon receiving Change View Request message, if the message's view is not greater than the local view, this message is handled as Recovery Request\n\n- In case of a timeout while waiting for Commit message, broadcast Recovery Message to resend Commit message (common in network issues)\n\n#### Process flow\n\n1. Verify the validity of the message and the local consensus context. If the message's view is greater than the local view, and this node has already sent Commit message, ignore this message \n\n2. Otherwise, if the message's view is greater than the local view, handle Change View Request messages inside\n\n3. If the message's view equals local view:\n\n   - Handle Prepare Request message inside\n\n     1. If this node has neither sent nor received Prepare Request message, handle Prepare Request message inside\n\n     2. Otherwise if this node is the speaker, broadcast Prepare Request message\n\n   - Handle Prepare Response messages inside\n\n4. If the message view is not greater than the local view, handle Commit messages inside\n\n![](../images/consensus/11.png)\n\nThe mechanism with Change View Request, Recovery Request and Recovery Message can keep consensus safe from timeout caused by the network, abnormal nodes (malicious nodes, fault nodes, etc.) and other issues.\n\n## Consensus Policy\n\nConsensus policy is used in the following scenarios:\n\n- Upon receiving transactions from other nodes, nodes will perform verification to filter out transactions against consensus policy\n\n- Upon receiving transactions, the consensus module needs to verify whether these transactions satisfy the consensus policy, if not, it will attempt to change the view\n\n- The Validator needs to filter transactions in its context upon enabling the consensus policy, only confirmed transactions can be added into the memory pool\n\n- The speaker needs to select transactions from memory pool according to the consensus policy", "doc_id": "4bcb758f-7d39-4360-b069-26c5ed638f0e", "embedding": null, "doc_hash": "f187b15d5f5fc7e46069f21e52d846f4ccff06de49d296d6f62a12cbb56e5cef", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_algorithm.html"}, "node_info": {"start": 6587, "end": 10589, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "2": "7e29772e-89dd-480e-a7be-0c04204fdb91", "3": "55c8bf15-e3e9-4ccd-b992-d582b1c11cfc"}}, "__type__": "1"}, "55c8bf15-e3e9-4ccd-b992-d582b1c11cfc": {"__data__": {"text": "The speaker needs to select transactions from memory pool according to the consensus policy for new Prepare Request\n", "doc_id": "55c8bf15-e3e9-4ccd-b992-d582b1c11cfc", "embedding": null, "doc_hash": "91ba1cb5d2fdf3cb13d90ed3d8029047cfaea646a07beb0fe0c70e7183b1f88b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_algorithm.html"}, "node_info": {"start": 10561, "end": 10677, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "2": "4bcb758f-7d39-4360-b069-26c5ed638f0e"}}, "__type__": "1"}, "2c2be1e5-045d-45eb-a449-6461927038d8": {"__data__": {"text": "# Consensus Protocol\n\n## Consensus Message Format\n\n### ExtensiblePayload\n\n| Size | Field | Type  | Description |\n|----|------|-------|------|\n| ? | Category | String | Message category, currently is `dBFT` |\n| 4 | ValidBlockStart | uint | Starting height where message is valid |\n| 4 | ValidBlockEnd | uint | Ending height where message is valid |\n| 20 | Sender | UInt160 | The address hash of the current consensus node |\n| ?  |  Data | byte[] | The data includes `ChangeView`, `PrepareRequest`, `PrepareResponse`, `Commit`, `RecoveryMessage`, `RecoveryRequest` |\n| ? | Witness | Witness | Witness contains invocation script and verification script |\n\n### ConsensusMessage\n\nConsensusMessage is the basic abstract type of all consensus message types. Other consensus message types are all inherited from this type.\n\n| Size | Field | Type  | Description |\n|----|------|-----|-------|\n| 1 | Type | ConsensusMessageType | Includes `ChangeView`, `PrepareRequest`, `PrepareResponse`, `Commit`, `RecoveryMessage`, `RecoveryRequest` |\n| 4 | BlockIndex | uint | Height where message is created |\n| 1 | ValidatorIndex | byte | The index of the sender in validators array |\n| 1 | ViewNumber | byte | View number where message is created |\n\n### ChangeView\n\n| Size | Field | Type  | Description |\n|----|------|-----|-------|\n| 8 | Timestamp | ulong | Timestamp when the ChangeView message is created |\n| 1 | Reason | ChangeViewReason |  Reason for the view change |\n\n### Commit\n\n| Size| Field | Type | Description |\n|----|------|-----|-------|\n| ? | Signature | byte[] | Message signature |\n\n### PrepareRequest\n\n| Size | Field | Type  | Description |\n|----|------|-----|-------|\n| 4 | Version | uint | Default value is 0 |\n| 32 | PrevHash | UInt256 | Previous block's hash |\n| 8 | Timestamp | ulong | Timestamp when the PrepareRequest message is created |\n| ? | TransactionHashes | UInt256[] |  The transaction hashes in the block |\n\n### PrepareResponse\n\n| Size | Field | Type | Description |\n|----|------|-----|-------|\n| 32 | PreparationHash | UInt256 | Hash of corresponding prepare request |\n\n### RecoveryMessage\n\n| Size | Field | Type | Description |\n|----|------|-----|-------|\n|  ?  | ChangeViewMessages | Dictionary<int, ChangeViewPayloadCompact> | ChangeView messages |\n|  ?  | PrepareRequestMessage | PrepareRequest | The current PrepareRequest message |\n|  32  | PreparationHash | UInt256 | Hash of prepare request |\n|  ?  | PreparationMessages | Dictionary<int, PreparationPayloadCompact> | Preparation messages that have been collected |\n|  ?  | CommitMessages | Dictionary<int, CommitPayloadCompact> | Commit messages that have been collected |\n\n### RecoveryRequest\n\n| Size | Field | Type | Description |\n|----|------|-----|-------|\n|  8  | Timestamp | ulong | Timestamp when the message is created |\n\n## Transport Protocol\n\nWhen a consensus message enters the P2P network, it's broadcasted and transmitted like other messages. That is because consensus nodes do not have IP address of other consensus nodes. Consensus nodes are not directly connected. That is to say, ordinary nodes can also receive consensus message. The broadcast flow of consensus messages is as follows.\n\n[![consensus_msg_seq](../images/consensus/consensus_msg_seq.jpg)](../../images/consensus/consensus_msg_seq.jpg)\n\n  1. Consensus node A will directly broadcast 'consensus' message to connected nodes(e.g. node B).\n\n  2. After receiving the `consensus` message, node B firstly process the received", "doc_id": "2c2be1e5-045d-45eb-a449-6461927038d8", "embedding": null, "doc_hash": "d5c810c5368fdb5b2ca1fae61eefb599359666a4d4633af59e0a1b6d802c8b49", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_protocol.html"}, "node_info": {"start": 0, "end": 3473, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "3": "6de54e04-e43b-4702-9706-f9a6ec31817d"}}, "__type__": "1"}, "6de54e04-e43b-4702-9706-f9a6ec31817d": {"__data__": {"text": "2. After receiving the `consensus` message, node B firstly process the received consensus message and then forwards it. Before forwarding the consensus message, it sends an `inv` message which carries the hash data of the `payload` of the `consensus` message (to node C).\n\n  3. If the node C has already known the data corresponding to the hash, it does not process the inv message. Otherwise, it proceeds to step 4.\n\n  4. Node C sends a `getdata` message to node B, with the hash data in the `inv` message.\n\n  5. After receiving the `getdata` message, node B sends a `consensus` message to node C.\n\n  6. After receiving the `consensus` message, the node C triggers the consensus module to process the message, and forwards the consensus message, and then returns to step 2.\n\nBoth inv and getdata messages use InvPayload as the message carrier, which is defined as follows:\n\n### InvPayload\n\n| Size | Field | Type  | Description |\n|------|------|-------|------|\n| 1 | Type | InventoryType | Message type |\n| ? | Hashes | UInt256[] | Hashes broadcasted / requested |\n\nThere are 3 kinds of  `InventoryType`:\n\n- `0x2b`: Transaction. `Hashes` is assigned to the transaction.\n- `0x2c`: Block. `Hashes` is assigned to the block.\n- `0x2e`: Consensus. `Hashes` is assigned to the `ConsensusPayload` message.\n\n## Consensus Message Process\n\n###  Verification\n\n1. Ignore the message if `ValidBlockStart` is lower than `ValidBlockEnd`.\n\n2. Ignore the message if current block height is out of `[ValidBlockStart, ValidBlockEnd)`.\n\n3. Ignore the message if sender is not listed in the consensus white list.\n\n4. Ignore the message if the verification script failed or `Category` is not \"dBFT\".\n\n5. Ignore the message if the node has sent out the new block.\n\n6. Ignore the message if the consensus message data is in a wrong format.\n\n7. Ignore the message if the `message.BlockIndex` is lower than the current block height.\n\n8. Ignore the message if the `ConsensusPayload.ValidatorIndex` is out of index of the current consensus nodes array, or `payload.Sender` is different from the correct hash.\n\n### Process\n\n1. On receiving a `PrepareRequest` sent by speaker, attached with proposal block data.\n\n    1. Ignore if the `PrepareRequest` has already been received or the node is trying to change the view.\n\n    2. Ignore if the `message.ValidatorIndex` is not the index of the current round speaker or the `PrepareRequest.ViewNumber` is not equal to the current view number.\n\n    3. Ignore if `message.Version` or `message.PrevHash` is different from the local context.\n\n    4. Ignore if transactions' amount is over `MaxTransactionsPerBlock`.\n\n    5. Ignore if the `message.Timestamp` is not more than the timestamp of the previous block, or is more than 8 blocks above current time.\n\n    6. Ignore if any proposed transaction has already been included in the blockchain\n\n    7. Renew consensus context and clear invalid signatures that have been received (Prepare-Reponse may arrive first)\n\n    8. Save the signature of the speaker into current context.\n\n    9. If there's no transaction in this request, directly check the local collection of `PrepareResponse`, and broadcast the `Commit` message in case of enough `PrepareResponse` collected.\n\n    10. Collect and verify transactions in the proposal block from memory pool.\n\n        1. Ignore if the transaction failed to pass verification or the transaction did not meet strategic requirements.\n        \n  ", "doc_id": "6de54e04-e43b-4702-9706-f9a6ec31817d", "embedding": null, "doc_hash": "1166cb37203d263a8120032836a00d2eb930cf8033366786ac657dda1f1846ea", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_protocol.html"}, "node_info": {"start": 3406, "end": 6850, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "2": "2c2be1e5-045d-45eb-a449-6461927038d8", "3": "c39ea642-9044-43e9-a8a3-836cb8126251"}}, "__type__": "1"}, "c39ea642-9044-43e9-a8a3-836cb8126251": {"__data__": {"text": "did not meet strategic requirements.\n        \n        2. Otherwise the transaction will be saved into current consensus context.\n    \n    11. Verify the transactions required by blocks in the unconfirmed transaction pool and add them into current context.\n\n    12. Broadcast a `getdata` message with a list of transaction hashes if they were missed in the block.\n\n2. On receiving a `PrepareResponse` sent by consensus nodes with their signature.\n\n    1. Ignore it if the message view is not the same as the current view\n\n    2. Ignore it if current node has already saved the sender's signature or the current node is trying to change the view.\n\n    3. Save it temporarily if current node has not received PrepareResponse yet (Clear it after receiving PrepareResponse), or go to next step.\n\n    4. Verify the signature. Save the signature if it pass the verification. Ignore it if not.\n\n    5. Ignore it if the node has already sent `Commit`.\n\n    6. Verify the signature number if the node has already sent or received `PrepareRequest`. If there are at least `N-f` signatures, broadcast `Commit` and generate the block if there are `N-f` `Commit` messages have been received.\n\n3. On receiving a `Changeview` sent by consensus nodes.\n\n    1. Send `RecoveryMessage` if the new view number in the message is less than or equal to the view number in current context.\n\n    2. Ignore it if the node has sent `Commit`.\n\n    3. If current node received at least `N-f` `ChangeView` messages with the same new view number, then ViewChange will happen. The current node reset the consensus process with the new view number.\n\n4. On receiving a `Commit` send by consensus nodes after receiving `N-f` `PrepareResponse`.\n\n    1. Ignore it if it has been received from the same node before.\n\n    2. Save the message into the consensus context if the signature passed verification,  generate a block and broadcast if `N-f` Commit messages has been received.\n\n5. On receiving a `RecoveryRequest` sent by consensus nodes when initiating a consensus or the sum of committed and failed nodes is greater than `f`.\n\n    1. Ignore it if it has been received before.\n\n    2. Response it if the node has sent the `Commit` message before or the node index is no more than f numbers later than the sender index\n\n    3. Send `RecoveryMessage` if the node is obligated to response.\n\n6. On receiving a `RecoveryMessage` broadcast by consensus nodes when receiving an accessible `RecoveryRequest` or time out after a Commit message has been sent.\n\n    1. Receive and handle `ChangeView` inside if the message view number is greater than the node view number. \n\n    2. Then receive and handle `PrepareRequest` and `PrepareResponse` inside if the message  view number is equal to the node view number, and the node is not in the process of changing view or has not sent `Commit` before.\n\n    3. Then receive and handle `Commit` inside if the message view number is not greater than the node view number. \n\n7. On receiving an `OnTimer`\n\n    1. Ignore if timer's height or view number is different from local context.\n\n    2. If the speaker timeout, the consensus node will broadcast `PrepareRequest` for the first timeout. For subsequent timeouts, it will broadcast `RecoveryMessage` if `Commit` message has been sent, otherwise `ChangeView`.\n\n    3. If the delegate timeout, the consensus node will broadcast `RecoveryMessage` if `Commit` message has been sent, otherwise `ChangeView`.\n\n8. On receiving a", "doc_id": "c39ea642-9044-43e9-a8a3-836cb8126251", "embedding": null, "doc_hash": "a946bc15b387e03e68649a4302f271e37f88bdb09b94e3353351ddcaf87258ed", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_protocol.html"}, "node_info": {"start": 6885, "end": 10356, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "2": "6de54e04-e43b-4702-9706-f9a6ec31817d", "3": "6b845ce9-f7f0-4b07-b4f5-9dd835be4579"}}, "__type__": "1"}, "6b845ce9-f7f0-4b07-b4f5-9dd835be4579": {"__data__": {"text": "message has been sent, otherwise `ChangeView`.\n\n8. On receiving a `PersistCompleted`\n\n    Resetting consensus process\n\n9. On receiving a `New Transaction` for consensus\n\n    1. Ignore if the current node has sent `PrepareRequest` or `PrepareResponse` message, or in process of change view, or has sent new block in this round\n\n    2. Ignore if the transaction has been received before.\n\n    3. Ignore if the received transaction isn't in the proposal block.\n\n    4. Broadcast `ChangeView` if the transaction verification fails.\n\n    5. Save the transaction into the proposal block.\n\n    6. Handle the corresponding logic if this is an Oracle transaction.\n\n    7. If the receiver is a delegate, broadcast the `ChangeView` message if the new block doesn't accord with `MaxBlockSize` or `MaxBlockSystemFee`. It also checks local collection of `PrepareResponse`, and broadcasts the `Commit` message in case of enough `PrepareResponse` collected.\n", "doc_id": "6b845ce9-f7f0-4b07-b4f5-9dd835be4579", "embedding": null, "doc_hash": "4f115f624161daa947a115df17047bbca29de3c0a44b27808679b83ba328477d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_protocol.html"}, "node_info": {"start": 10325, "end": 11267, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "2": "c39ea642-9044-43e9-a8a3-836cb8126251"}}, "__type__": "1"}, "28c431fc-433d-44df-bde2-d97fb71b2557": {"__data__": {"text": "# Consensus Mechanism\n\n## Overview \n\nA blockchain is a decentralized distributed ledger system. It could be used for registration and issuance of digitalized assets, property right certificates, credit points and so on. It enables transfer, payment, and transactions in a peer-to-peer way. The blockchain technology was originally proposed by Satoshi Nakamoto in a cryptography mailing list, i.e. the Bitcoin. Since then, numerous applications based on the blockchain emerged, such as e-cash systems, stock equity exchanges and Smart Contract systems.\n\nA blockchain system is advantageous over a traditional centralized ledger system for its full-openness,immutability and anti-multiple-spend characters, and it does not rely on any kind of trusted third-party.\n\nHowever, like all distributed systems, blockchain systems are challenged with network latency, transmission errors, software bugs, security loopholes and black-hat hacker threats. Moreover, its decentralized nature suggests that no participant of the system cannot be trusted. Malicious nodes may emerge, so does data difference due to conflicting interests.\n\nTo counter these potential errors, a blockchain system is in need of an efficient consensus mechanism to ensure that every node has a copy of a recognized version of the total ledger. Traditional fault tolerance mechanisms concerning certain problems may not be completely capable of tackling the issue that distributed and blockchain systems are faced with. A universal cure-to-all fault tolerance solution is in need.\n\nProof-of-Work mechanism, employed by the Bitcoin, addresses this issue rather brilliantly. But it comes with an obvious price, i.e. significant electricity cost and energy consumption. Further, with Bitcoin\u2019s existence, new blockchains must find different hashing algorithms, so as to prevent computational attacks from it. For example, Litecoin adopts SCRYPT, rather than Bitcoin\u2019s SHA256.\n\nByzantine Fault Tolerance mechanism is a universal solution for distributed systems. NEO proposes dBFT (delegated Byzantine Fault Tolerance) consensus algorithm based on PBFT   (Practical Byzantine Fault Tolerance) algorithm. Algorithm dBFT determines validator set according to real-time blockchain voting, which effectively enhances the effectiveness of the algorithm, bringing block time and transaction confirmation time savings. dBFT2.0 as an upgraded version was released in Mar. 2019, which improves robustness and safety by introducing 3-stage consensus as well as a recovery mechanism.\n\n## System Model \n\nA blockchain is a distributed ledger system in which participants connect with each other via a peer-to-peer network. All messages within it will be sent by broadcasting. Two types of roles exist: Ordinary nodes and Bookkeeping nodes. Ordinary nodes use the system to transfer and exchange, accepting ledger data; while bookkeeping nodes provide accounting service for the entire network and maintain the ledger. \n\nHypothetically, in this system, messages may subject to loss, damage, latency and repetition. Also, the sending order may not necessarily be consistent with the receiving order of messages. The activities of nodes could be arbitrary, they may join and quit the network at any time; they may also dump and falsify information or simply stop working. Artificial or non-artificial glitches may occur as well.\n\nIntegrity and Authenticity of information transmission are ensured with cryptography while senders must attach signatures to the hash value of the message sent. \n\n## The Algorithm \n\nOur algorithm ensures security as well as usability. With erroneous nodes in the consensus making no more than \u230a (N\u22121) / 3 \u230b , the functionality and stability of the system is guaranteed. In it, N = |\ud835\udc45| suggests the total number of nodes joined in the consensus making while R stands for the set of consensus nodes. Given F = \u230a (N\u22121) / 3 \u230b , f stands for the", "doc_id": "28c431fc-433d-44df-bde2-d97fb71b2557", "embedding": null, "doc_hash": "c0be816c69a55d2a2e433f0d77c5ad5298a87e73cd7f04874c59df34a3209001", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/dbft.html"}, "node_info": {"start": 0, "end": 3912, "_node_type": "1"}, "relationships": {"1": "1425ffea42ccca97279f2cc096e2b2f7f43515e1", "3": "c3d86d74-9761-4cf4-a2d5-f3d2f756a902"}}, "__type__": "1"}, "c3d86d74-9761-4cf4-a2d5-f3d2f756a902": {"__data__": {"text": "= \u230a (N\u22121) / 3 \u230b , f stands for the maximum number of erroneous nodes allowed in the system. In fact, the total ledger is maintained by bookkeeping nodes while ordinary nodes do not participate in the consensus making. This is to show the entire consensus making procedures.\n\nAll consensus nodes are required to maintain a state table to record current consensus status. The data set used for a consensus from its beginning to its end is called a View. If consensus cannot be reached within the current View, a View Change will be required. We identify each View with a number v, starting from 0 and it may increase till achieving the consensus.\n\nWe identify each consensus node with a number, starting from 0, the last node is numbered N \u2212 1. For each round of consensus making, a node will play speaker of the house while other nodes play congressmen. The speaker\u2019s number p will be determined by the following algorithm: Hypothetically the current block height is h, then \ud835\udc5d = (\u210e \u2212 \ud835\udc63) \ud835\udc5a\ud835\udc5c\ud835\udc51 N, p\u2019s value range will be  0 \u2264 \ud835\udc5d < N .\n\nA new block will be generated with each round of consensus, with at least N \u2212 F signatures from bookkeeping nodes. Upon the generation of a block, a new round of consensus making shall begin, resetting v=0.\n\n###  General Procedures \n\n![](../../basic/images/consensus/1.png)\n\nA round of consensus consists of 4 steps, as shown in the Figure above.\n\n1. Speaker starts consensus by broadcasting a Prepare Request message,\n2. Delegates broadcast Prepare Response after receiving the Prepare Request message,\n3. Validators broadcast Commit after receiving enough Prepare Response messages,\n4. Validators produce & broadcast a new block after receiving enough Commit messages.\n\n\n### View Change \n\nIn case of the following scenarios, the Change View Request will be broadcasted attempting to replace speaker:\n\n- The transaction verification fails\n- Time is out while waiting for Prepare Request or Prepare Response\n\n### Recovery Mechanism\n\nWhen creating Change View Request, if there are not enough active consensus nodes (sum of nodes with Commit sent and fault nodes is greater than F), consensus nodes will broadcast Recovery Request message to update the local consensus context. Upon receiving Recovery Request, if certain conditions are met, a consensus node will generate and broadcast Recovery Message.\n\n## Fault Tolerance of dBFT2.0\n\nA dBFT2.0 consensus system with *N* validators can tolerate at most *F* abnormal nodes. Each consensus phase (Commit, Change View, block generation, etc.) requires at least *M* nodes to reach consensus. As long as the amount of normal validators is not less than *M*, the consensus process will go on smoothly. For example, just 4 \u2212 \u230a (4\u22121) / 3 \u230b =3  normal validators required can keep alive a consensus system where *N* = 4.\n\n## Single Block Finality of dBFT2.0\n\nNeo's dBFT 1.0 algorithm was susceptible to a single block fork in rare cases of network latency. dBFT2.0 fixes this problem, hence there is no possibility of forking since then. The mechanism is described as follows:\n\n- To generate a new block, it is required to collect Commit messages from at least M different validators for corresponding block proposal.\n- A validator will never change its view after broadcasting Commit message.\n\nHence the success of block generation means:\n\n- There are already at least M validators having signed the block proposal and broadcast Commit messages. Moreover, these validators won't change the view in current consensus round.\n- The rest of the validators are insufficient to produce another different block.\n\nTherefore, the finality of the new block can be guaranteed at a given height.\n", "doc_id": "c3d86d74-9761-4cf4-a2d5-f3d2f756a902", "embedding": null, "doc_hash": "f52234f19ff91ba77e1407196a6ee801e7a067db65e35411fe8eb5414c5d5ae3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/dbft.html"}, "node_info": {"start": 3878, "end": 7536, "_node_type": "1"}, "relationships": {"1": "1425ffea42ccca97279f2cc096e2b2f7f43515e1", "2": "28c431fc-433d-44df-bde2-d97fb71b2557"}}, "__type__": "1"}, "425f431c-a124-4cb6-8d8e-8332c9d3370c": {"__data__": {"text": "# Consensus Nodes Election\n\nNeo is an open and transparent blockchain network where anyone can either initiate a transaction to apply for being a validator candidate or vote to decide which validator candidate can become a consensus node. The committee members and validators are elected based on the voting result.\n\n> [!Note]\n>\n> Committee members have the privilege to modify the configuration of Neo network by voting, currently including fee per byte for network transmission, execution fee factor, storage price, blocking / unblocking account, etc.\n\nThere is no duty assigned to candidates. However, committee members and validators are elected from certain number of candidates with most votes. Their relationship can be described in the following picture. There is no explicit relationship between committee members and validators but, as default committee member amount (21) is more than that of validators, generally speaking validators are a subset of committee members. \n\n![](../images/consensus/vote_candidate.png)\n\nEvery address has the right to vote to only one address (whether or not it's a candidate). Candidate's received votes are defined as the sum of NEO held by its voter. \n\nVoting is a dynamic and continuous process. If the NEO asset of a voter is changed, the number of votes at the previous voting address will also change, and the list of consensus nodes and committee members will change accordingly every 21 blocks.\n\n> [!Note]\n>\n> Genesis Block is the first block\uff0cits `NextConsensus` is set to the script hash of standby consensus nodes' multi-signature contract.\n\n## From Delegate to Speaker\n\nA speaker is a consensus node who creates the next proposal block. The list of consensus nodes is obtained by the method above, and the speaker is determined by the formula `p = (h - v) mod N` in the dBFT algorithm. `h` is the height of the proposal block. `v` is view number, start from 0. `N` is the number of consensus nodes.\n\nDuring the consensus phase, a speaker will send `PrepareRequest` message with `NextConsensus`, which determines the next block consensus nodes. The Speaker gets the next round of consensus nodes by combining the transactions in the proposal block with the previous votes in blockchain, and assign the script hash of 2/3 multi-signature contract to `NextConsensus`. \n", "doc_id": "425f431c-a124-4cb6-8d8e-8332c9d3370c", "embedding": null, "doc_hash": "ba07a01950a96f48d681e527a605ca2fc8171f40d58689d5f1ddd95a5b5f7ec3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/vote_validator.html"}, "node_info": {"start": 0, "end": 2319, "_node_type": "1"}, "relationships": {"1": "0b79593a3abe13f563d2210c3ecdaad08559f125"}}, "__type__": "1"}, "4c555916-c166-4704-aab5-ba14db809e43": {"__data__": {"text": "# Governance and Incentives\n\nAs a community-driven open platform, Neo N3's on-chain governance model introduces new, essential roles along with an incentive model to ensure that all participants are rewarded accordingly. \n\n## Governance Strategy\n\nThe new governance model consists of candidates, committee members, and consensus nodes. Among them, the committee is responsible for parameter adjustment of the main net and maintenance of the on-chain environment; Consensus nodes are responsible for packaging transactions and generating blocks. Committee members and consensus nodes are elected from certain number of candidates with most votes. Their relationship can be described in the following picture. There is no explicit relationship between committee members and consensus nodes but, as default committee member amount (21) is more than that of consensus nodes (7), generally speaking consensus nodes are a subset of committee members.\n\n![](images/candidateRelationship.png)\n\n\n\n### Candidates\n\nAny and all individuals or organizations can register to become a candidate and seek votes from voters to become a committee member. After the registration transaction has been recorded on-chain, NEO holders can vote for the candidates they believe are best equipped to make the right decisions for Neo. The votes received by a candidate is calculated every 21 blocks as the sum of NEO tokens on all wallet addresses that have voted for that candidate over the past epoch. \n\nTo ensure that committee members are truly supported by the community, elections are only effective when more than 20% of NEO tokens are used to vote. Afterwards, a certain number of candidates with most votes automatically become committee members and consensus nodes.\n\n### Committee\n\nThe committee members are elected from candidates with the top 21 most votes. The votes received by a candidate is calculated every 21 blocks, so voters can adjust their voting strategies flexibly according to the performance of the committee.\n\nFor any proposal to be approved, over 50% of committee members must reach an agreement before signing a transaction to update blockchain params on-chain.  \n\nMoreover, the committee can appoint a number of node roles, including:\n\n- Oracle nodes\n- StateRoot consensus nodes\n- NeoFS Inner Ring nodes\n\n### Consensus Nodes \n\nAmongst the 21 committee members, the top voted seven committee members also serve as consensus nodes to promote transaction activity and optimize the Neo blockchain\u2019s security. They have the authority to initiate new block proposals and generate blocks. \n\nSimilar to committee members, consensus nodes are refreshed every 21 blocks.\n\n## Incentives\n\nInheriting from Neo Legacy, Neo N3 employs the dual-token mechanism, where NEO is used for governance and GAS is used for payment.\n\n### NEO\n\nNEO has a max supply of 100 million tokens and the smallest unit of 1, or in other words, is not divisible. NEO holders are the owners and managers of the Neo network. By constructing voting transactions on the Neo network, they can exercise management power, such as electing consensus nodes, adjusting consensus strategy, adjusting pricing model, etc., and can also claim the corresponding GAS based on the amount of NEO they hold.\n\n### GAS\n\nGAS is the fuel token for the realization of Neo network resource control, with a smallest unit of 0.00000001. Users can obtain GAS either through a claim or purchase. When using the Neo network, they need to pay a certain amount of GAS as network fees, such as transfer, registering assets, publishing assets, running DApps, etc.\n\nUnlike the Neo Legacy, there is no supply limit for Neo N3 GAS, and the system fee for transactions will be burned off.\n\n### GAS Distribution Rule  \n\nIn the initial configuration, 5 GAS tokens will be generated per block\u2014this in turn will be distributed to the Neo Committee (consisting of consensus nodes and candidate nodes), NEO voters, and all NEO holders. The generated GAS will be distributed according to certain rules shown as", "doc_id": "4c555916-c166-4704-aab5-ba14db809e43", "embedding": null, "doc_hash": "2b87101c94239ef8c9abe4cd84e03164d5076b6c4d9f38f42b76232f37da69b8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/governance.html"}, "node_info": {"start": 0, "end": 4030, "_node_type": "1"}, "relationships": {"1": "002739eab60a14f1877dab15a434607aa53b87fc", "3": "2f1ac7db-4fb1-42a1-be80-d367cdb52cf5"}}, "__type__": "1"}, "2f1ac7db-4fb1-42a1-be80-d367cdb52cf5": {"__data__": {"text": "and all NEO holders. The generated GAS will be distributed according to certain rules shown as down below:\n\n**NEO holders \u2013 10%**\n\nAs with Neo Legacy, this portion of GAS is not distributed voluntarily to NEO holders. It is calculated and distributed to NEO holder\u2019s wallet according to the NEO holding period only after NEO holder has completed a transfer or voting of NEO. \n\n**committee & consensus nodes \u2013 10%** \n\nThe remaining 10% is used to reward 21 committee members for their contributions towards managing and governing the Neo blockchain. Every 21 blocks (known as an Epoch) votes for committee members are recalculated and the incentive shares are redistributed in turn to new members. In addition, the speaker receives network fees for the transactions contained in the current block.\n\n**Voters \u2013 80%**\n\nThe vast majority of GAS generated will be used to incentivize NEO holders to vote for committee members. Only those who successfully votes for the elected committee members can receive this part of reward, which is calculated and distributed during each epoch (21 blocks). In other words, this portion is divided by 28 (21 for committee members, and 7 for consensus nodes). NEO holders who vote for any elected consensus nodes is rewarded with 2/28 of this portion; NEO holders who voted for any elected committee member which is not a consensus node receive 1/28 of this portion.\n\n## See Also\n\n[Governance API](../reference/governance_api.md)\n\n[Neo Governance Page](https://neo.org/gov)\n\n", "doc_id": "2f1ac7db-4fb1-42a1-be80-d367cdb52cf5", "embedding": null, "doc_hash": "b1ac6d8d4080bc06e74640d13ae4673fa98715dc7bfb5866abc8bc80d5645ef7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/governance.html"}, "node_info": {"start": 3936, "end": 5442, "_node_type": "1"}, "relationships": {"1": "002739eab60a14f1877dab15a434607aa53b87fc", "2": "4c555916-c166-4704-aab5-ba14db809e43"}}, "__type__": "1"}, "ec69a2ab-a048-4a2b-9eee-084fc338f40f": {"__data__": {"text": "# NeoVM\n\n## Introduction \n\nNeoVM is a lightweight virtual machine for executing NEO smart contracts. As the core component of NEO, NeoVM has Turing completeness and high consistency, which can implement arbitrary execution logic and ensure consistent execution results of any node in distributed network, providing strong support for decentralized applications. \n\nWith the help of NeoCompiler, source code written in Java, C# or other high-level languages can be compiled into a unified NeoVM instruction set, thus achieving cross-platform. Also, it lowers the development threshold for enabling smart contract developers to participate in the application development in Neo ecosystem without learning a new development language. \n\nIn addition, NeoVM is highly decoupled from the upper-level code and customizable by using techniques such as interop services. NeoVM can be used by simply creating an instance, incredibly easy to use, and can be applied to various blockchain and non-blockchain scenarios.  \n\n##  Infrastructure and Execution Process  \n\n### Infrastructure \n\nThe NeoVM architecture is mainly composed of the execution engine, stack, and interoperation service layer. \n\n![](../assets/neovm.png)\n\n#### ExecutionEngine\n\nExecutionEngine is the core of NeoVM, mainly responsible for loading scripts and executing corresponding instructions, such as flow control, stack operation, bit operation, arithmetic operation, logical operation, cryptography, etc. It can also interact with external data by interoperable service layer through system call. \n\n#### Stack  \n\nNeoVM is a stack-based virtual machine. NeoVM has three types of stack: InvocationStack, EvaluationStack,  and ResultStack.  \n\n-  InvocationStack is used to store all execution contexts of current NeoVM, which are isolated from each other in the stack. Context switching is performed based on the current context and entry context. The current context points to the top element of invocation stack, which is ExecutionContext0 in the architecture figure. And the entry context points to the tail element of invocation stack, which is ExecutionContextN in the architecture figure.\n- EvaluationStack is for storing the data used by the instruction in execution process. Each execution context has its own evaluation stack.\n- ResultStack is used to store execution result after all scripts are executed. \n\n#### Interoperation Service Layer \n\nInteroperation service layer is a bridge between VM and external data. By invoking interoperation interfaces, NeoVM can access the block information\u3001 transaction information\u3001contract information\u3001asset information and other data required for the execution of smart contracts. \n\nEach Neo smart contract can choose whether to enable a private storage area, which stores data in key-value format. With the help of interoperation service layer, NeoVM can dynamically modify the corresponding data in storage area when executing the smart contract. \n\nBesides, interoperation service layer provides encryption algorithms, zero-knowledge proof, network resource access, etc., to meet the needs of developers to build advanced applications. \n\nIn addition, the interoperation service layer also supports custom extensions and modifications to meet the customization needs of developers.  \n\n### Execution Process \n\nNEO supports multi-language smart contract development. NeoCompiler compiles multi-language smart contracts into unified nvm bytecode files, which are then decoded and executed by NeoVM. Cross-platform compatibility are achieved with multi-language compliers and virtual machines. \n\nA complete execution process is as follows: \n\n1. Compiling the source code of smart contracts into unified bytecode files by corresponding compilers.\n2. Execution engine of NeoVM loads the bytecode file, and then constructs the bytecodes together with the related parameters in the file as an execution context and finally pushes it into invocation stack.\n3. Each time execution engine takes an instruction from current context, and then executes corresponding operations according to the instruction. The data generated in execution process will be stored in the evaluation stack and alt stack of current context. \n4. For accessing external data,", "doc_id": "ec69a2ab-a048-4a2b-9eee-084fc338f40f", "embedding": null, "doc_hash": "a89783751cbc00b5f59fd11e7d327b532784191139d3d368a3b44479dc2bd7fe", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/neovm.html"}, "node_info": {"start": 0, "end": 4244, "_node_type": "1"}, "relationships": {"1": "482b84522da2fbed3394563f6e985a5a5b6f46c3", "3": "a50e04bc-98ad-468a-9d4a-63f57144090d"}}, "__type__": "1"}, "a50e04bc-98ad-468a-9d4a-63f57144090d": {"__data__": {"text": "the evaluation stack and alt stack of current context. \n4. For accessing external data, encrypting data, zero-knowledge proof and other operations, the interoperation interfaces will be invoked.\n5. After all scripts are executed, the result will be stored in the result stack.", "doc_id": "a50e04bc-98ad-468a-9d4a-63f57144090d", "embedding": null, "doc_hash": "cebaca157d04dfae7b2f2e45d3fd5534e956989e38945cd8e77748b2201b99ec", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/neovm.html"}, "node_info": {"start": 4157, "end": 4433, "_node_type": "1"}, "relationships": {"1": "482b84522da2fbed3394563f6e985a5a5b6f46c3", "2": "ec69a2ab-a048-4a2b-9eee-084fc338f40f"}}, "__type__": "1"}, "7ac343c7-0814-4c75-8c1b-0d450c4d460e": {"__data__": {"text": "# Deploying Smart Contracts\n\nWhen a smart contract is deployed on the blockchain, it can be used by other users or invoked by other contracts. This section describes how to deploy and invoke the smart contract in the Neo blockchain using Neo-CLI or Neo-GUI. The instructions in this section are generic and applicable to all contract types including NEP-17 assets. \n\n## What contracts need to be deployed?\n\nWhen a smart contract needs to store data or to be invoked by another smart contract  through syscall `System.Contract.Call` on the blockchain, it needs to be deployed. Contracts triggered only by the verification trigger, such as the lock contract and multi-signature contract, do not need to be deployed as they will not be invoked by other contracts. Contracts such as  `return 1+1`  do not need to be deployed as they do not require any input parameters.\n\nFrom the programming language perspective, only when a smart contract will be used as a class library, it needs to be deployed. For example: \n\n- When a smart contract has variable incoming parameters, it must serve as a storage. The caller or other smart contracts provide the parameters.\n- When a smart contract uses storage it must serve as a class library.\n- When a smart contract implements NEP-17 standard assets, the contract needs to be deployed on the blockchain.\n\n### How to deploy?\n\nSmart contracts are deployed by invoking APIs. Usually we use Neo-CLI or Neo-GUI to deploy smart contracts. \n\nDeploying and invoking smart contracts cost fees. For more information, refer to [Fees](../../reference/fees.md).\n\n## Before you start\nMake sure you have done the following:\n\n- Confirmed that your contract should be deployed. \n- Compiled a contract file (\\*.nef) and a descriptive file of contract (\\*.manifest.json).\n- Installed Neo-CLI or Neo-GUI and completed block synchronization. For more information, refer to  [Neo-CLI](../../node/cli/setup.md) and [Neo-GUI](../../node/gui/install.md)\n\n## Deploying contract with Neo-CLI\n\nIn Neo-CLI run the following command to deploy your contract:\n\n `deploy <nefFilePath> [manifestFile]`\n\n-  `<nefFilePath>` : mandatory. The contract file\n- `[manifestFile]` : optional. The descriptive file of contract\n\n### Example\n\n```\ndeploy NEP17.nef\n```\n\nor\n\n```\ndeploy NEP17.nef NEP17.manifest.json\n```\n\nAfter the command is executed, the program deploys the smart contract and pays the fee automatically.\n\n```\nneo> deploy NEP17.nef\nContract hash: 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26\nGas consumed: 10.0107577\nNetwork fee: 0.0345352\nTotal fee: 10.0452929 GAS\nRelay tx? (no|yes): yes\n\nSigned and relayed transaction with hash=0xe03aade81fb96c44e115a1cc9cfe984a9df4a283bd10aa0aefa7ebf3e296f757\n```\n\n### The contract scripthash\n\nWhen a contract has been deployed a scripthash is generated as a unified identifier of the contract. The contract scripthash can be converted into the standard 20-byte address for receiving assets from transfer transactions. In that case the contract scripthash is used in big endian format. For example:\n\n- Contract ScriptHash (big endian): 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26 \n\n- Corresponding address: NPRCE9me1CdXBA6StQ7kff52p61rHQqnS7\n\n###", "doc_id": "7ac343c7-0814-4c75-8c1b-0d450c4d460e", "embedding": null, "doc_hash": "f2c5e759c2fac3d0b7de75e44c0befbd4429398a3429a8b465ed4e283c918e23", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/deploy.html"}, "node_info": {"start": 0, "end": 3187, "_node_type": "1"}, "relationships": {"1": "12fbcca8bee0c06e3445ee65e8529f3108cecb19", "3": "c7284df2-6500-4c31-8a59-455ea8bccef5"}}, "__type__": "1"}, "c7284df2-6500-4c31-8a59-455ea8bccef5": {"__data__": {"text": "Common errors\n\n`Engine faulted`\n\n- Contract already exists\n- .nef  is not matched with .manifest\n- either .nef or .manifest is wrong\n- Insufficient fee\n\n## Deploying contracts with Neo-GUI\n\n1. In Neo-GUI click `Contract` -> `Deploy Contract`\u3002\n2. Select the desired *.nef and *.manifest.json files.\n3. Click `Deploy`.\n\n", "doc_id": "c7284df2-6500-4c31-8a59-455ea8bccef5", "embedding": null, "doc_hash": "10804085530891de745d36e8aa90d3ab9c783c4cbb41f137fe928b231513551b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/deploy.html"}, "node_info": {"start": 3188, "end": 3506, "_node_type": "1"}, "relationships": {"1": "12fbcca8bee0c06e3445ee65e8529f3108cecb19", "2": "7ac343c7-0814-4c75-8c1b-0d450c4d460e"}}, "__type__": "1"}, "5c68ab28-8d85-42e7-b5a4-5fbbc1a813c8": {"__data__": {"text": "# Invoking Smart Contracts\n\nAfter you deployed a smart contract on the blockchain, you can then invoke it by its script hash, which is the unique identity of a smart contract. Any script changes in the contract will result in a different script hash.\n\n## Querying the contract details\n\nYou can query a contract details using Neo-CLI or Neo-GUI, such as the contract general information, methods, notifications, etc. \n\n### Querying using Neo-CLI\n\nUse the RPC API [getcontractstate method](../../reference/rpc/latest-version/api/getcontractstate.md) to query the contract information.\n\n### Querying using Neo-GUI\n\n1. In Neo-GUI click `Contract` ->`Search Contract`\n2. Enter the contract script hash, click  `Search`.\n\nThe detailed contract information is displayed in Neo-GUI. You can also view the manifest and nef files.\n\n## Invoking a contract\n\n### Invoking a contract using Neo-CLI\n\nYou can choose one of the following ways to invoke the contract using Neo-CLI:\n\n- Use the command invoke, which syntax is:\n\n   ```\n   invoke <scriptHash> <operation> [contractParameters=null] [sender=null] [signerAccounts=null] [maxGas=20]\n   ```\n\n   For more information refer to [invoke](../../node/cli/cli.md#invoke).\n\n- Use the RPC API [invokefunction](../../reference/rpc/latest-version/api/invokefunction.md) or [invokescript](../../reference/rpc/latest-version/api/invokescript.md). The former is recommended. \n\n### Invoking a contract using Neo-GUI\n\n1. In Neo-GUI click `Contract `->`Invoke Contract`\u3002\n\n2. Enter the contract script hash and click `Search`.\n\n   The methods and parameter list in the current contract are displayed.\n\n3. Select the desired method, fill in the parameters and click `trial test`.\n\n   The trial run at this step does not affect the blockchain as it is just create a NeoVM on your local computer to simulate the invocation.\n\n4.  If the trial run goes smoothly and you want to invoke it on the blockchain, click `Invoke`.\n\n## Cosignature\n\nSome contracts require multiple signatures when invoked, one of which is the signature of the transaction initiator to support the fee, and the rest are cosignatures.\n\nWhen writing a contract, we usually use `Runtime.CheckWitness (owner)` to authenticate the caller  address, where `owner` is the address allowed to be invoked, and the parameter type is `ByteArray`. Invoking the contract with an unspecified address will fail. For example, when updating a contract, the owner here is the contract administrator. When transferring assets, the owner here is the sender (payer).\n\nWhen `Runtime.CheckWitness (owner)` is written in the contract, the owner's signature must be passed in as a cosignature when you invoke the contract. \n\nIn Neo-CLI, you can attach a signature using the invoke command.\n\n```\ninvoke <scriptHash> <operation> [contractParameters=null] [sender=null]  [signerAccounts=null] [maxGas=20]\n```\n\nWhen invoking a contract in Neo-GUI, you can click `Cosignature` at the bottom of the page, choose `Public key`, and then click `Sign` to add the signature.  \n\n> [!Note]\n>\n> When you invoke the transfer method of the NEP-17 contract using the transfer command, the wallet will automatically appends the signature to the from field. You don't need to add it manually.\n\n## Invoking between contracts\n\nIn Neo N3, all contracts can be invoked dynamically, and writing a contract is much easier.\n\n```c#\npublic class Contract1 : SmartContract\n    {\n        delegate object Dyncall(string method, object[] args);\n\n        //Use ByteArray", "doc_id": "5c68ab28-8d85-42e7-b5a4-5fbbc1a813c8", "embedding": null, "doc_hash": "bb0ad4a13c0526ad3a1faa4f9cad9eac5cd8559417df85ddf79c46b7ebb0c1b9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/invoke.html"}, "node_info": {"start": 0, "end": 3501, "_node_type": "1"}, "relationships": {"1": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff", "3": "b52f7009-4d38-4fab-9e6a-a9979dd4a817"}}, "__type__": "1"}, "b52f7009-4d38-4fab-9e6a-a9979dd4a817": {"__data__": {"text": "method, object[] args);\n\n        //Use ByteArray for little endian\n        //[InitialValue(\"694425c17f1ebb7c65de3026c831eb4c49d6d7be\", ContractParameterType.ByteArray)]\n        //private static readonly UInt160 ScriptHash;\n\n        //Use Hash160 for big endian\n        [InitialValue(\"0xbed7d6494ceb31c82630de657cbb1e7fc1254469\", ContractParameterType.Hash160)]\n        public static UInt160 ScriptHash;\n\n        public static object Main(string operation, object[] args)\n        {\n            if (operation == \"name\")\n            {\n                return Contract.Call(ScriptHash, \"name\", CallFlags.ReadOnly, new object[0]);\n            }\n            if (operation == \"totalSupply\")\n            {\n                return Contract.Call(ScriptHash, \"totalSupply\", CallFlags.ReadOnly, new object[0]);\n            }\n            return true;\n        }\n    }\n```\n\nThe key statement is `Contract.Call(scriptHash, method, flags, params)`, where:\n\n- `scriptHash` is the script hash of the contract invoked. It is ByteArray type and little endian.\n- `method` is the method of the contract invoked, such as  `name`, `balanceOf`, or `transfer`. String type.\n- `flags` defines special behaviors allowed when invoking smart contracts. See [CallFlags Enumerator](https://docs.neo.org/docs/zh-cn/reference/scapi/framework/services/CallFlags.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E) for details.\n- `params` is the parameter list of the method of the invoked contract. Array type.\n\n### Invocation permission\n\nThree fields related to the contract invocation permission are defined in the contract manifest file, as shown in the following table. The wallet decides whether to give a security warning to the user based on the setting in the Groups and Trusts fields. Permissions and signature scopes determine whether contracts can be called by each other. For more information about signature scopes, refer to parameters description in [invokefunction method](../../reference/rpc/latest-version/api/invokefunction.md).\n\n| Fields        | Type                          | Description                                                  |\n| ------------- | ----------------------------- | ------------------------------------------------------------ |\n| `Groups`      | `ContractGroup[]`             | Defines a group of trusted contracts, consisting of a public key and a signature of contract hash. |\n| `Permissions` | `ContractPermission[]`        | This field is an array containing a permission object, which defines other contracts and methods that the contract wants to call. The contract can be ScriptHash, Group, or wildcard *. The method is the method name or wildcard *. Contracts or methods not declared in the manifest cannot be called by the contract. |\n| `Trusts`      | `WildcardContainer\\<UInt160>` | Defines other contracts trusted by the", "doc_id": "b52f7009-4d38-4fab-9e6a-a9979dd4a817", "embedding": null, "doc_hash": "c70d75bf1f616473d01ddf1376e6bd7fb58487d2a35bdab176202473fec9a09a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/invoke.html"}, "node_info": {"start": 3465, "end": 6296, "_node_type": "1"}, "relationships": {"1": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff", "2": "5c68ab28-8d85-42e7-b5a4-5fbbc1a813c8", "3": "6993cf83-0725-4653-98ca-e8f8b225a63e"}}, "__type__": "1"}, "6993cf83-0725-4653-98ca-e8f8b225a63e": {"__data__": {"text": "`WildcardContainer\\<UInt160>` | Defines other contracts trusted by the contract. The contract can be ScriptHash, Group, or wildcard *. If a contract is trusted, the user will not receive any warning message when the contract is called. |\n\nAssuming that the contract A calls the contract B, the following table details the invoking behavior and wallet behavior of the contract in various setting scenarios.\n\n| Scenario                                                     | Wallet Prompt                                                | Wallet sets signature scope to...                            | Can contract B  be invoked? |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | --------------------------- |\n| Permissions of contract A do not include contract B          | None                                                         | Default                                                      | No                          |\n| Permissions of contract A include contract B<br/>Contract A and contract B are in the same groups and the groups signature is verified. | None                                                         | Default and adds CustomGroups                                | Yes                         |\n| Permissions of contract A  include contract B<br/>Trusts of contract B include contract A | None                                                         | Default and adds CustomContract                              | Yes                         |\n| Permissions of contract A  include contract B<br/>Trusts of contract B do not include contract A | Prompts that contract A will call contract B, and asks whether to authorize the signature to contract B. | Default and adds CustomContract        according to the user's decision | Determined by the user      |\n| Permissions of contract A include a Groups B                 | Prompts that contract A will call any contract in group B and asks whether to authorize the signature to group B. | Default and adds CustomGroups according to the user's decision | Determined by the user      |\n| The contract defined in the Permissions of contract A is wildcard * and the method is m<br/>{\"contract\":\"\\*\", \"method\": \"m\"} | Prompts that contract A will call the method m of any contract and asks whether to authorize the signature to contract B. | Default or Global according to the user's decision           | Determined by the user      |\n| The contract defined in the Permissions of contract A is", "doc_id": "6993cf83-0725-4653-98ca-e8f8b225a63e", "embedding": null, "doc_hash": "f071ce9f57e12c720799b0d8192cf790a49eb52d26d8b8e95285f9c308568d18", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/invoke.html"}, "node_info": {"start": 6271, "end": 8879, "_node_type": "1"}, "relationships": {"1": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff", "2": "b52f7009-4d38-4fab-9e6a-a9979dd4a817", "3": "83a56f85-0360-474f-ba65-4e31a6e7d5af"}}, "__type__": "1"}, "83a56f85-0360-474f-ba65-4e31a6e7d5af": {"__data__": {"text": "user      |\n| The contract defined in the Permissions of contract A is wildcard * and the method is wildcard \\*<br/>{\"contract\":\"\\*\", \"method\": \"\\*\"} | Prompts that contract A will call any method of any contract and asks whether to set the signature to Global. | Default or Global according to the user's decision           | Determined by the user      |\n\n", "doc_id": "83a56f85-0360-474f-ba65-4e31a6e7d5af", "embedding": null, "doc_hash": "03eb7f919184be1fa32986881bd2af41ef1096b05897bf026418fb8ea2b1b566", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/invoke.html"}, "node_info": {"start": 8872, "end": 9230, "_node_type": "1"}, "relationships": {"1": "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff", "2": "6993cf83-0725-4653-98ca-e8f8b225a63e"}}, "__type__": "1"}, "ddc59cd0-93c7-4771-af72-ff962db0fb32": {"__data__": {"text": "# Build a private chain on local host\n\nIn this document we will introduce a simple way to build a private chain on a windows system computer.\n\n## Installing Neo node\n\nInstall Neo-CLI and make four copies of the node folder with the name of c1, c2, c3, and c4, successively.\n\nFor more information refer to [Installation of Neo-CLI](../../../node/cli/setup.md). \n\n## Creating wallet files\n\nFrom Neo-CLI or Neo-GUI create four wallets, 1.json, 2.json, 3.json, and 4.json, and place each in the folder of four nodes. \n\n## Modifying config.json\n\nMake the following configurations in config.json of each node:\n\n- Specify the ports so that each port is not duplicated and is not occupied by other applications.\n- In \"UnlockWallet\" specify the wallet path and wallet password.\n- Set `StartConsensus` and `IsActive` as `true`.\n- The private chain ID, which can be any integer in the range of [0 - 4294967295].\n- `StandbyCommittee` is the public keys of committee members. The top 4 nodes with the most votes will become consensus nodes. Here enter the public keys of four wallets.\n- In the `SeedList` field, set the IP address to localhost and the port to four wallet ports.\n\n\nYou can refer to the following example\uff1a\n\n**c1/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 21333,\n      \"WsPort\": 21334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"1.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 4,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n      \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n**c2/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n  ", "doc_id": "ddc59cd0-93c7-4771-af72-ff962db0fb32", "embedding": null, "doc_hash": "3887288d1117ebddbf7a86a72f349c58800522be6d2b7b611416aa496e6cdac1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html"}, "node_info": {"start": 0, "end": 2465, "_node_type": "1"}, "relationships": {"1": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef", "3": "2ba848d5-4f20-496e-bbc4-6a5033825d1d"}}, "__type__": "1"}, "2ba848d5-4f20-496e-bbc4-6a5033825d1d": {"__data__": {"text": "\"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 22333,\n      \"WsPort\": 22334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"2.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 4,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n      \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n**node3/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 23333,\n      \"WsPort\": 23334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"3.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 4,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n     ", "doc_id": "2ba848d5-4f20-496e-bbc4-6a5033825d1d", "embedding": null, "doc_hash": "83563d4cc3d571ec7a7037167af6b583ead624a9d9a199afeba11b467a2ae7be", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html"}, "node_info": {"start": 2436, "end": 4310, "_node_type": "1"}, "relationships": {"1": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef", "2": "ddc59cd0-93c7-4771-af72-ff962db0fb32", "3": "11653cc0-0c84-4e25-99e1-47f2dcc0be2a"}}, "__type__": "1"}, "11653cc0-0c84-4e25-99e1-47f2dcc0be2a": {"__data__": {"text": "     \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n**node4/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 24333,\n      \"WsPort\": 24334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"4.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 4,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n      \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n> [!Note]\n>\n> If the plugin RpcServer is installed, you also need to modify the port numbers in the plugin config.json file to make them different from each other and from the ports in config.json of the node.\n\n## Installing consensus plugin\n\nDownload [DBFTPlugin](\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/DBFTPlugin.zip\") and place four copies to the `Plugins` folder under each node CLI root path. Modify the file `config.json` as follows\uff1a\n\n- Set `Network` the same value as `Network` in `config.json`.\n- Set `AutoStart` to `true` so as to automatically start consensus as running CLI.\n\nRefer to the following example:\n\n**Plugins/DBFTPlugin/config.json**\n\n```json\n{\n  \"PluginConfiguration\": {\n    \"RecoveryLogs\":", "doc_id": "11653cc0-0c84-4e25-99e1-47f2dcc0be2a", "embedding": null, "doc_hash": "821529e522f03b3a657066d4a00a81d08f684e418f59d6750c9a2eb3ace1ab20", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html"}, "node_info": {"start": 4341, "end": 6502, "_node_type": "1"}, "relationships": {"1": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef", "2": "2ba848d5-4f20-496e-bbc4-6a5033825d1d", "3": "740968ad-1db3-41ce-a657-b589acff75e9"}}, "__type__": "1"}, "740968ad-1db3-41ce-a657-b589acff75e9": {"__data__": {"text": " \"PluginConfiguration\": {\n    \"RecoveryLogs\": \"ConsensusState\",\n    \"IgnoreRecoveryLogs\": false,\n    \"AutoStart\": true,\n    \"Network\": 5943216,\n    \"MaxBlockSize\": 262144,\n    \"MaxBlockSystemFee\": 900000000000\n  }\n}\n```\n\n## Creating a shortcut to start\n\nCreate a notepad file for ease of starting the private chain. In the file, enter the following:\n\n```\nstart cmd /k \"cd c1 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\nstart cmd /k \"cd c2 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\nstart cmd /k \"cd c3 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\nstart cmd /k \"cd c4 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\n```\n\nRename it as Run.cmd, and then place four copies under the same level directories outside each node directory.\n\nAt this point the private chain has been set up. All the files  we modified are as follows:\n\n```\n\u251c\u2500Run.cmd\n|\n\u251c\u2500c1\n\u2502      1.json\n\u2502      config.json\n\u2502\n\u251c\u2500c2\n\u2502      2.json\n\u2502      config.json\n\u2502\n\u251c\u2500c3\n\u2502      3.json\n\u2502      config.json\n\u2502\n\u2514\u2500c4\n|      4.json\n|      config.json\n```\n\n## Starting the private chain\n\nEnter each node directory and double-click `Run.cmd`. When the screen shows consensus information and block height is increasing as shown below, the private chain is set up successfully.\n\n![](../../../../zh-cn/assets/privatechain_demo.png)\n\nThe private chain is terminated if you close all the windows. \n\n## Withdrawing NEO and GAS\n\nIn the genesis block of the NEO network, 100 million NEO and 30 million GAS are generated. When the private chain is set up, you can withdraw those NEO and GAS from a multi-party address with Neo-CLI for internal development and testing.\n\n### Using Neo-CLI to withdraw\n\n#### Creating multi-party signature addresses\n\n1. Start your private chain.\n\n2. For ease of operation, copy one of consensus nodes directory as an external node. Then put four consensus wallet copies into the external node root directory and disable or remove DBFTPlugin.\n\n3. Create an admin wallet and then create a multi-signature address using the command `import multisigaddress m pubkeys`:\n\n   - `m`: the minimal number of signatures needed to complete the transaction. \n   - `pubkeys`: the public keys in StandbyCommittee in all consensus node wallets.\n\n   For example:\n\n   ```\n   import multisigaddress 3 03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625 02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7 02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec 03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\n   ```\n\n4. Open the wallet `1.json`, `2.json`, `3.json` respectively and repeat the last step to create the multi-signature address.\n\n5. Enter the command `list asset` and you can see 100 million NEO and 30 million GAS displayed.\n\n  ", "doc_id": "740968ad-1db3-41ce-a657-b589acff75e9", "embedding": null, "doc_hash": "ea4ddf7ec498b6a2524c74cf7860c26912af7e29970c4e86316dde8049cda157", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html"}, "node_info": {"start": 6464, "end": 9235, "_node_type": "1"}, "relationships": {"1": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef", "2": "11653cc0-0c84-4e25-99e1-47f2dcc0be2a", "3": "a1b41f10-e8d6-4879-b23d-509ec02feb82"}}, "__type__": "1"}, "a1b41f10-e8d6-4879-b23d-509ec02feb82": {"__data__": {"text": "and you can see 100 million NEO and 30 million GAS displayed.\n\n   ![](../assets/initial-balance.png)\n\n> [!Note]\n>\n> You must create multi-party signature address in at least three wallets so as to sign the transfer transaction successfully.\n\n#### Transferring NEO to a normal address\n\nHere we want to send NEO from the contract address to the normal address.\n\n1. Open the wallet 1.json and transfer NEO to the admin wallet using the command `send <id|alias> <address> <value>` \n\n2. Copy the SignatureContext and close the wallet.\n\n   ![image](../assets/private_multi_tx1.png)\n\n3. Open another wallet (2.json) listed on the multi-signature\n\n4. Use the command `sign <jsonObjectToSign>` with the object copied in step 2\n\n5. Copy the object in Signed Output.\n\n   ![image](../assets/private_multi_tx2.png)\n\n6. Repeat the previous steps in the third wallet 3.json. Then you can use `relay <jsonObjectToSign>` and your wallet is ready.\n\n   ![image](../assets/private_multi_tx3.png)\n\n7. Use `list asset` to check the wallet balance:\n\n   ![image](../assets/balance.png)\n\nSimilarly, you can refer to the preceding steps to withdraw GAS from the multi-party signature address.", "doc_id": "a1b41f10-e8d6-4879-b23d-509ec02feb82", "embedding": null, "doc_hash": "0e1bed76c364f025625ea34d9779be74a7c41ff5c9f0dece257883d43ebe43df", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html"}, "node_info": {"start": 9209, "end": 10375, "_node_type": "1"}, "relationships": {"1": "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef", "2": "740968ad-1db3-41ce-a657-b589acff75e9"}}, "__type__": "1"}, "d71af20e-3e1b-4f50-ad90-f3851f541b9f": {"__data__": {"text": "# Build a private chain with one node\n\nNeo-CLI supports generating blocks without consensus nodes, which means you can set up a private chain with one node. To simplify the process, you can directly download the project [neo-express](https://github.com/neo-project/neo-express) to run the private chain quickly.  \n\nAlternatively, you can build a private chain with one node from scratch, which will be elaborated in the following sections.\n\n## Prerequisites\n\n1. Refer to [Installation of NEO-CLI](../../../node/cli/setup.md) to install Neo-CLI. (Make sure you install the [DBFTPlugin](https://github.com/neo-project/neo-modules/releases/download/v3.1.0/DBFTPlugin.zip)\n2. Run Neo-CLI and enter the command `create wallet <path>` to create a wallet, e.g. `create wallet consensus.json`\n\n3. Specify the wallet password and confirm.\n4. Record the wallet pubkey. This will be used in later steps.\n\n## Modifying the node configuration files\n\n### Modifying config.json\n\nIn config.json under the Neo-cli directory, make the following configurations:\n\n- In `UnlockWallet` specify the wallet path and wallet password.\n- Set `IsActive` as true.\n- Set `ConsoleOutput` and `Active` as true.\n- Set `ValidatorsCount` as 1.\n- In `StandbyCommittee`, enter the public key of the `consensus.json` wallet (Only one public key in `StandbyCommittee` represents the solo mode).\n\nHere is an example\uff1a\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 21333,\n      \"WsPort\": 21334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"consensus.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5309138,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 1,\n    \"StandbyCommittee\": [\n      \"02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\"\n    ],\n    \"SeedList\": []\n  }\n}\n```\n\nIn the config.json under the `Plugins\\DBFTPlugin` directory make the following change:\n\n- Set `AutoStart` as true, and set `Network` same as the `Network` in config.json under the Neo-cli directory.\n\nHere is an example:\n\n```json\n{\n  \"PluginConfiguration\": {\n    \"RecoveryLogs\": \"ConsensusState\",\n    \"IgnoreRecoveryLogs\": false,\n    \"AutoStart\": true,\n    \"Network\": 5309138,\n    \"MaxBlockSize\": 262144,\n    \"MaxBlockSystemFee\": 900000000000\n  }\n}\n```\n\n## Starting the private chain\n\n> [!Note]\n>\n> If the node has downloaded Neo test net block files, you need to delete the Data folder before running", "doc_id": "d71af20e-3e1b-4f50-ad90-f3851f541b9f", "embedding": null, "doc_hash": "3187fca67af2089d5e2ecb05742b4a8c6be33b973fba25dd3ff399f7966445f4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/solo.html"}, "node_info": {"start": 0, "end": 2759, "_node_type": "1"}, "relationships": {"1": "6ec16da4fc74b224c7d481dee261e7ac40fed42c", "3": "24943a7f-46c2-4a4d-9743-a03867c5342c"}}, "__type__": "1"}, "24943a7f-46c2-4a4d-9743-a03867c5342c": {"__data__": {"text": "node has downloaded Neo test net block files, you need to delete the Data folder before running Neo-CLI, otherwise the private chain will not be able to properly generate blocks.\n\nTo start the private chain, enter the neo-cli directory and run neo-cli.exe, or run the command line and enter  `dotnet neo-cli.dll`. The private chain is set up successfully when it goes as shown below:\n\n![](../assets/solo.png)\n\nThe private chain is terminated if you close the window.\n\n## Withdrawing NEO and GAS\n\n### Using Neo-CLI to withdraw\n\nIn the genesis block of the Neo network, 100 million NEO and 30 million GAS are generated. When the private chain is set up, you can withdraw those NEO and GAS from a multi-party address with Neo-CLI, to facilitate your blockchain development and testing.\n\n1. Copy another Neo-CLI directory as an external node.\n\n2. Add the consensus node tcp address (localhost:21333) to the `seedlist` field in the external node config.json.\n\n3. Modify the port in the external node config.json to avoid conflicting with other consensus node ports:\n\n   ```json\n   {\n     \"ApplicationConfiguration\": {\n       \"Logger\": {\n         \"Path\": \"Logs\",\n         \"ConsoleOutput\": false,\n         \"Active\": false\n       },\n       \"Storage\": {\n         \"Engine\": \"LevelDBStore\",\n         \"Path\": \"Data_LevelDB_{0}\"\n       },\n       \"P2P\": {\n         \"Port\": 23333,\n         \"WsPort\": 23334\n       },\n       \"UnlockWallet\": {\n         \"Path\": \"\",\n         \"Password\": \"\",\n         \"IsActive\": false\n       },\n       \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n     },\n     \"ProtocolConfiguration\": {\n       \"Network\": 5309138,\n       \"MillisecondsPerBlock\": 15000,\n       \"MaxTraceableBlocks\": 2102400,\n       \"ValidatorsCount\": 1,\n       \"StandbyCommittee\": [\n         \"02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\"\n       ],\n       \"SeedList\": [\n       \"localhost:21333\"\n       ]\n     }\n   }\n   ```\n   \n4. Start the private chain and the external node\n\n5. From the external node command line, open the wallet consensus.json and enter `import multisigaddress m pubkeys` to create a multi-part signed address, where:\n\n   `m` is 1 as the minimal signature number and `pubkeys` is the public key of `consensus.json`\n   \n\n   ```\n   import multisigaddress 1 02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\n   ```\n   \n6. Enter `list asset`\uff0cthen you should see 100 million NEO and 30 million GAS displayed.\n\n7. Create a new wallet using the command `create wallet ` and copy the wallet address.\n\n8.", "doc_id": "24943a7f-46c2-4a4d-9743-a03867c5342c", "embedding": null, "doc_hash": "c12428b325c561c2c31805f2c1f879c1e551ed0190d69d8d3e6a5101d52d5491", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/solo.html"}, "node_info": {"start": 2681, "end": 5259, "_node_type": "1"}, "relationships": {"1": "6ec16da4fc74b224c7d481dee261e7ac40fed42c", "2": "d71af20e-3e1b-4f50-ad90-f3851f541b9f", "3": "9f236452-9bb1-4853-ae21-e821700eaed9"}}, "__type__": "1"}, "9f236452-9bb1-4853-ae21-e821700eaed9": {"__data__": {"text": "a new wallet using the command `create wallet ` and copy the wallet address.\n\n8. Open the wallet `consensus.json` again and transfer NEO and GAS to the new created wallet with the `send` command. For example, `send neo NWu2gb7PzhZb4ci9LvW4gBYAQFMGb1s1o7 100000000`, `send gas NWu2gb7PzhZb4ci9LvW4gBYAQFMGb1s1o7 10000000`.\n\n   > [!Note]\n   >\n   > The wallet that sends tokens should have enough GAS as a few fee (usually no more than 0.02 GAS) will be charged at the time of transfer.\n\n   For more Neo-CLI commands refer to [CLI command reference](../../../node/cli/cli.md).\n\n", "doc_id": "9f236452-9bb1-4853-ae21-e821700eaed9", "embedding": null, "doc_hash": "58092b84ea6e08b41a25243e54f73d61d84e27903068a55cf18b1ae0b8af4ed8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/solo.html"}, "node_info": {"start": 5258, "end": 5833, "_node_type": "1"}, "relationships": {"1": "6ec16da4fc74b224c7d481dee261e7ac40fed42c", "2": "24943a7f-46c2-4a4d-9743-a03867c5342c"}}, "__type__": "1"}, "20f52511-eae8-4c9b-b1d2-94b6152e4875": {"__data__": {"text": "# Main Net and Test Net\n\nThe Neo node runs on the main net by default. The Main net is a block chain network that has been officially launched and operates independently.  \n\nNeo also provides the Test net where developers can develop, debug, and test their programs. Testing programs on the testnet incurs the network fee of test GAS (not real GAS). Test net NEO and GAS can be applied free of charge on the official website (see detailed instructions below).\n\nAll the block data of the test net are independent of the main net. If you want to develop some simple smart contracts or try to register assets, test net is sufficient. After the testing is complete, the development can be moved into the Neo mainnet.\n\n## Test net features\n\n- Asset registration, asset distribution, contract execution, etc. (Does not consume real money)\n- Globalized network that is deployed on Internet.\n- Blocks, transactions, and other information in the test net can be easily viewed in the blockchain browser.\n- Smart contracts deployed in the test net can be invoked by anyone in the world.\n- Test net can not be used as a real environment for commercial applications.\n\n## Connecting to test net\n\nFor Neo-GUI, go to any page and click **Settings** in the lower left corner. Then check **Testnet** in the popped-up page.\n\nFor Neo-CLI, replace the `config.json` file with the content of `config.testnet.json` under CLI directory.\n\n![image](../../assets/testnet_2_v2.png)\n\n## Applying for Test GAS and Test NEO\n\nIf you are a developer, you can ask for Neo and GAS on the TestNet. You will need a certain amount of test GAS to deploy or invoke a contract in the TestNet.  \n\n### Obtaining test coin automatically\n\nYou can request up to 500 GAS per day via [NGD faucet](https://neowish.ngd.network/neo3/). \n\n### Applying for test coin from Neo website\n\nIf you need more than that, you'll have to request it from Neo website manually.\n\n#### Step 1 - Look up your public key\nIn Neo the address and PUBLIC key are different. \n\nThe PUBLIC KEY is shown when you view the PRIVATE KEY. (Never share your PRIVATE key.)  \n\n#### Step 2 - Fill in the request\nComplete the form here: https://neo.org/testcoin/apply. Note that you need to change `Neo Version` to Neo N3.\n\nAfter a day or so you will be sent an email containing a \"Multi-party signed address\" and the PUBLIC key of the sender. See [Signature](../../node/gui/advanced.md).\n\n#### Step 3 - Create a multi-party signed address\nTo access the assets, in your Neo-gui you will create a \"Multi-party signed address\" in your wallet using \n\n- The \"Multi-party signed address\" (from the email) \n- The PUBLIC KEY of the sender (from the email)\n- Your PUBLIC KEY (from STEP 1 above) \n\n1. From Neo-CLI command line, enter the command  `import multisigaddress m pubkeys` to create a multi-party signed address, where:\n\n   `m` is 1 as the minimal signature number and `pubkeys` are the public key used for signing (PUB Key of sender and your PUB key) \n\n2. Enter `list asset`\uff0cthen you should see the quantity of Neo and/or GAS shown\n\n3. Enter `send gas <address> <amount>` to send a certain amount of GAS to the desired account address.\n\n## Alternatives to the TestNet\n\nTesting your Smart Contract on the TestNet is a good idea before publishing it on the live network but earlier in your development cycle you should consider using other methods to test your Smart Contacts such as running you own private chain, for more information, refer to [Setting up private chain](private-chain/solo.md).", "doc_id": "20f52511-eae8-4c9b-b1d2-94b6152e4875", "embedding": null, "doc_hash": "3802f1b809b1f26acb39b9c9cfeab75e35d61048f077a807667b2584c37e2207", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/testnet.html"}, "node_info": {"start": 0, "end": 3509, "_node_type": "1"}, "relationships": {"1": "7559b131bf41790c8f93ec1f26268d3e7db187a5"}}, "__type__": "1"}, "c2e15d44-8b7a-4aca-9090-0f36e9a34f4f": {"__data__": {"text": "# Deploying and Invoking Contracts\n\nIn Neo N3 most of the functions are provided by contracts. ScriptHash is the unique identifier of the contract, and it is usually a necessary parameter for invoking contracts.\n\nThis document introduces the following SDK features:\n\n- The construction method of contract deployment transaction\n- Invoking methods in the contract under read-only mode\n- `Nep17API` class that encapsulates the methods for invoking NEP17 contracts\n\n## Contract deployment\n\n`ContractClient` provides the method, `CreateDeployContractTxAsync`, to construct deployment transactions of the contract. The parameters are contract scripts, manifests, and account key pairs for payment of system and network fees, where contract scripts and manifests are available from the compilation. There must be sufficient GAS in the sender account.\n\nRead the nef and manifest.json files of the contract:\n\n```C#\n// read nefFile & manifestFile\nNefFile nefFile;\nusing (var stream = new BinaryReader(File.OpenRead(nefFilePath), Encoding.UTF8, false))\n{\n    nefFile = stream.ReadSerializable<NefFile>();\n}\n\nContractManifest manifest = ContractManifest.Parse(File.ReadAllBytes(manifestFilePath));\n```\n\nConstruct a contract deployment transaction:\n\n```c#\n// create the deploy contract transaction\nTransaction transaction = await contractClient.CreateDeployContractTxAsync(nefFile.ToArray(), manifest, senderKeyPair);\n```\n\nAfter the transaction is constructed, you need to broadcast it on the blockchain:\n\n```c#\n// Broadcast the transaction over the Neo network\nawait client.SendRawTransactionAsync(transaction);\nConsole.WriteLine($\"Transaction {transaction.Hash.ToString()} is broadcasted!\");\n```\n\nAfter the transaction is added to the blockchain you can get the transaction execution status to check if the contract is deployed successfully:\n\n```c#\n// print a message after the transaction is on chain\nWalletAPI neoAPI = new WalletAPI(client);\nawait neoAPI.WaitTransactionAsync(transaction)\n    .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n```\n\nHere is the complete code:\n\n```c#\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Manifest;\nusing Neo.Wallets;\nusing System;\nusing Neo.IO;\nusing System.IO;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Test().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task Test()\n        {\n            // choose a neo node with rpc opened, here we use the localhost\n            RpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n            ContractClient contractClient = new ContractClient(client);\n\n            string nefFilePath = \"sc/Contract1.nef\";\n            string manifestFilePath = \"sc/Contract1.manifest.json\";\n\n            // read nefFile & manifestFile\n            NefFile nefFile;\n            using (var stream = new", "doc_id": "c2e15d44-8b7a-4aca-9090-0f36e9a34f4f", "embedding": null, "doc_hash": "0c84e7dd980c90bae88c6235281a3ba2421760b87c951cfddec1ba9189a92bfc", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/contract.html"}, "node_info": {"start": 0, "end": 3041, "_node_type": "1"}, "relationships": {"1": "411f00abaafdd7d8bf6f3586b259836b30f73389", "3": "902edcc9-da1c-43c6-88b4-1866e23084e6"}}, "__type__": "1"}, "902edcc9-da1c-43c6-88b4-1866e23084e6": {"__data__": {"text": "           using (var stream = new BinaryReader(File.OpenRead(nefFilePath), Encoding.UTF8, false))\n            {\n                nefFile = stream.ReadSerializable<NefFile>();\n            }\n\n            ContractManifest manifest = ContractManifest.Parse(File.ReadAllBytes(manifestFilePath));\n\n            // deploying contract needs sender to pay the system fee\n            KeyPair senderKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n\n            // create the deploy transaction\n            Transaction transaction = await contractClient.CreateDeployContractTxAsync(nefFile.ToArray(), manifest, senderKey).ConfigureAwait(false);\n\n            // Broadcast the transaction over the NEO network\n            await client.SendRawTransactionAsync(transaction).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {transaction.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(transaction)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n## Contract invocation simulation\n\n`ContractClient` provides the method `TestInvokeAsync` to simulate the contract invocation, which does not affect the data on the chain after execution. You can directly invoke the contract method that reads the data. For example, the following example invokes the name method in the NEO native contract.\n\n```c#\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\nContractClient contractClient = new ContractClient(client);\n\n// get the contract hash\nUInt160 scriptHash = NativeContract.NEO.Hash;\n\n// test invoking the method provided by the contract \nRpcInvokeResult invokeResult = await contractClient.TestInvokeAsync(scriptHash, \"name\").ConfigureAwait(false);\nConsole.WriteLine($\"The name is {invokeResult.Stack.Single().GetString()}\");\n```\n\nOr you can use `MakeScript` to construct the script you want to execute and then invoke the method `InvokeScriptAsync` in `RpcClient`to get the execution result.\n\n```c#\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n\n// get the contract hash\nUInt160 scriptHash = NativeContract.NEO.Hash;\n\nbyte[] script = scriptHash.MakeScript(\"name\");\n// call invoke script\nRpcInvokeResult invokeResult = await client.InvokeScriptAsync(script).ConfigureAwait(false);\nConsole.WriteLine($\"The name is {invokeResult.Stack.Single().GetString()}\");\n```\n\n## Contract invocation (on-chain transactions)\n\nGenerally invoking a deployed contract on the blockchain contains the following steps:\n\n1. Construct the script to invoke\n\n    Take the `transfer` method of native contract Neo as an example:\n\n    ```c#\n    // construct", "doc_id": "902edcc9-da1c-43c6-88b4-1866e23084e6", "embedding": null, "doc_hash": "747d7452b82ae87d4c6ccf3f29c0e3ce14636301b0331a9829ad8406aed177b9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/contract.html"}, "node_info": {"start": 3023, "end": 5916, "_node_type": "1"}, "relationships": {"1": "411f00abaafdd7d8bf6f3586b259836b30f73389", "2": "c2e15d44-8b7a-4aca-9090-0f36e9a34f4f", "3": "1656ae01-8e8c-42b9-bde3-7a7e4110177b"}}, "__type__": "1"}, "1656ae01-8e8c-42b9-bde3-7a7e4110177b": {"__data__": {"text": "Neo as an example:\n\n    ```c#\n    // construct the script, in this example, we will transfer 1024 NEO to receiver\n    UInt160 scriptHash = NativeContract.NEO.Hash;\n    byte[] script = scriptHash.MakeScript(\"transfer\", sender, receiver, 1024);\n    ```\n\n2. Construct the transaction\uff1a\n\n    ```c#\n    // initialize the TransactionManagerFactory with rpc client and magic\n    // fill the script and cosigners\n    TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n        .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n    // add signature and sign transaction with the added signature\n    Transaction tx = await txManager.AddSignature(sendKey).SignAsync().ConfigureAwait(false);\n    ```\n    \n3. Broadcast the transaction on the blockchain:\n\n    ```c#\n    // broadcasts the transaction over the Neo network\n    await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n    ```\n\n4. Wait until the transaction is added to the blockchain and then get the transaction execution status to make sure the contract is invoked successfully:\n\n    ```c#\n    // print a message after the transaction is on chain\n    WalletAPI neoAPI = new WalletAPI(client);\n    await neoAPI.WaitTransactionAsync(tx)\n        .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n    ```\n\nFor complete code refer to [Transaction Construction](transaction.md).\n\n## NEP-17 Contracts\n\n`Nep17API` encapsulates the method that generates transfer transactions. The above transaction process can be simplified to:\n\n```c#\nNep17API nep17API = new Nep17API(client);\nTransaction tx = await nep17API.CreateTransferTxAsync(scriptHash, sendKey, receiver, 1).ConfigureAwait(false);\n```\n\nAdditionally, `Nep17API` also provides a set of simple methods to get data:\n\n```c#\n// get nep17 name\nstring name = await nep17API.NameAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get nep17 symbol\nstring symbol = await nep17API.SymbolAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get nep17 token decimals\nbyte decimals = await nep17API.DecimalsAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get nep17 token total supply\nBigInteger totalSupply = await nep17API.TotalSupplyAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get the balance of nep17 token\nUInt160 account = Utility.GetScriptHash(\"NXjtqYERuvSWGawjVux8UerNejvwdYg7eE\");\nBigInteger balance = await nep17API.BalanceOfAsync(NativeContract.NEO.Hash, account).ConfigureAwait(false);\n\n// get token information\nRpcNep17TokenInfo tokenInfo = await nep17API.GetTokenInfoAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n```\n\n", "doc_id": "1656ae01-8e8c-42b9-bde3-7a7e4110177b", "embedding": null, "doc_hash": "19bde746748e084cfd4dd23d8e36944558cf27f2b77bc952c850402ad926881a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/contract.html"}, "node_info": {"start": 5889, "end": 8548, "_node_type": "1"}, "relationships": {"1": "411f00abaafdd7d8bf6f3586b259836b30f73389", "2": "902edcc9-da1c-43c6-88b4-1866e23084e6"}}, "__type__": "1"}, "9a607499-1ef0-4dff-a6e9-ca142884910a": {"__data__": {"text": "# About RpcClient\n\n`RpcClient` is a C# dependency library that can be used to develop various applications on Neo, such as wallet clients, games, etc. This project can help you easily invoke Neo RPC interfaces, construct transactions, and invoke contracts.\n\nThis document is applicable to Neo N3. It is recommended you use NEO SDK in conjunction with Visual Studio 2019.  \n\n## Main features\n\n- Built-in RPC invocation methods.\n\n- Transaction construction, serialization and deserialization\n\n- Script construction for smart contracts\n\n- Easy-to-use wallet functions: transfer, balance inquiry, and GAS Claim method\n\n## Adding reference\n\n1. In Visual Studio 2019, create a new .NET project\n\n   > [!Note]\n   >\n   > The .NET version of the project cannot be earlier than the .NET version used by the Neo SDK.\n\n2. Right-click the project and select `Manage NuGet Packages`.\n\n3. Search for `Neo.Network.RPC.RpcClient` in the search box and install the plugin that appears.\n\n4. Add the following code to the desired project file header:\n\n   ```c#\n   using Neo.Network.RPC;\n   ```\n\n> [!Note]\n>\n> If you use SDK to construct a transaction that requires a signature, you need to ensure that the RpcClient obeject and the network it is connected to are configured the same way, or the transaction constructed by the SDK will not be validated in the blockchain. To do so, load Neo-CLI config.json when constructing the RpcClient object, for example:\n>\n> RpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"))\n\n## Exception handing\n\n`RpcClient` mainly interacts with Neo nodes through RPC requests. When the message returned by the RPC request contains an Error the system throws an exception. The most common exception type is  `RpcException`, which includes:\n\n- -100, \"Unknown transaction/blockhash\"\n- -300, \"Insufficient funds\"\n- -301, \"The necessary fee is more than the Max_fee, this transaction is failed. Please increase your Max_fee value.\"\n- -400, \"Access denied\"\n- -500, Relay does not succeed, the detailed reasons contain \"AlreadyExists, OutOfMemory, UnableToVerify, Invalid, Expired, InsufficientFunds, PolicyFail, Unknown\"\n- -32600, \"Invalid Request\"\n- -32601, \"Method not found\"\n- -32602, \"Invalid params\"\n- -32700, \"Parse error\"\n\nAdditionally, you may encounter other exceptions built in the .NET platform, such as  `ArgumentNullException` and `FormatException` when the parameters passed in are null or incorrectly formatted. Therefore, reasonable exception capture and prompts are required when using the SDK.\n\n## Project repository\n\nThe `RpcClient` is a functional subset of the neo-modules project. For complete open source projects refer to:\n\nNeo-modules\uff1ahttps://github.com/neo-project/neo-modules\n\nWelcome to raise any problems you encountered in practice in the project issue list:\n\nhttps://github.com/neo-project/neo-modules/issues\n", "doc_id": "9a607499-1ef0-4dff-a6e9-ca142884910a", "embedding": null, "doc_hash": "c608faac4b94df6889e488707556b615f82f2f7ff17bced56345b5fe1594d8ea", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/introduction.html"}, "node_info": {"start": 0, "end": 2906, "_node_type": "1"}, "relationships": {"1": "a7a10bc5ccbbea2f1262f525a538fb9401b52bbd"}}, "__type__": "1"}, "1f0ae1df-101a-48d7-a48f-f2ff4da313a7": {"__data__": {"text": "# Getting Blockchain Information\n\nThe `RPC` module provides methods to get basic information of blockchain data and status, such as block height, block content, transaction details, and contracts. \n\nFor some specific information of contracts, such as the block maximum transaction number, system fee per byte, NEP-17 contract details, you need to invoke specific contract methods, which will be introduced in this document.\n\n\n## Getting blockchain data from RPC interfaces\n\nGets the latest block height or hash:\n\n```c#\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n\n// get the hash of the tallest block in the main chain\nstring hash = await client.GetBestBlockHashAsync().ConfigureAwait(false);\n\n// get the number of blocks in the main chain\nuint count = await client.GetBlockCountAsync().ConfigureAwait(false);\n```\n\nGets the specific data inside a block, including transaction list, etc.\n\n```c#\n// get the Base64 string of the block with block height\nstring blockHex = await client.GetBlockHexAsync(\"166396\").ConfigureAwait(false);\n\n// get the Base64 string of the block with block hash\nstring blockHex = await client.GetBlockHexAsync(\"0x4e61cd9d76e30e9147ee0f5b9c92f4447decbe52c6c8b412d0382a14d3a0b408\").ConfigureAwait(false);\n\n// get block data with block height\nRpcBlock block = await client.GetBlockAsync(\"166396\").ConfigureAwait(false);\n\n// get block data with block hash\nRpcBlock block = await client.GetBlockAsync(\"0x4e61cd9d76e30e9147ee0f5b9c92f4447decbe52c6c8b412d0382a14d3a0b408\").ConfigureAwait(false);\n```\n\nGets the contract script, hash, and manifest through `RpcClient`:\n\n```c#\n// get NEO contract state\nContractState contractState = await client.GetContractStateAsync(NativeContract.NEO.Hash.ToString()).ConfigureAwait(false);\n```\n\nFor more information refer to [RPC invocation methods](rpc.md).\n\n## Getting policy information\n\nInvokes the method  `policyAPI` in the native contract `PolicyContract` to get the Policy related information:\n\n```c#\n// choose a neo node with rpc opened\nPolicyAPI policyAPI = new PolicyAPI(new RpcClient(new Uri(\"http://localhost:20332\"), null,null, ProtocolSettings.Load(\"config.json\")));\n\n// get the system fee per byte\nlong feePerByte = await policyAPI.GetFeePerByteAsync().ConfigureAwait(false); // 1000, 0.00001000 GAS per byte\n\n// get the max size of one block\nuint maxBlockSize = await policyAPI.GetMaxBlockSizeAsync().ConfigureAwait(false); // 262144, (1024 * 256) bytes one block\n\n// get the max transaction count per block\nuint maxTransactionsPerBlock = await policyAPI.GetMaxTransactionsPerBlockAsync().ConfigureAwait(false); // 512, max 512 transactions one block\n\n// check if the account is blocked\nUInt160 account = Utility.GetScriptHash(\"NirHUAteaMr6CqWuAAMaEUScPcS3FDKebM\");\nbool isBlocked = await policyAPI.IsBlockedAsync(account).ConfigureAwait(false);\n```\n\n## Getting NEP-17 contract information\n\nNEP17 is an asset standard for Neo N3, such as NEO and GAS, both of which are assets based on NEP17 native contract. You can invoke  `Nep17API`  to get the name, mark, decimal place, and amount of the NEP17 contract.\n\n```c#\n// get nep17 token", "doc_id": "1f0ae1df-101a-48d7-a48f-f2ff4da313a7", "embedding": null, "doc_hash": "6e76d75cea7599ed5ac1883fe562a05b890e89b36abf837073e04f3ec18a45b3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/monitor.html"}, "node_info": {"start": 0, "end": 3213, "_node_type": "1"}, "relationships": {"1": "b58f70d0969b7e9992c63784d84a72874772bbb1", "3": "2f2db8df-f419-4c16-88ab-d5210464ce18"}}, "__type__": "1"}, "2f2db8df-f419-4c16-88ab-d5210464ce18": {"__data__": {"text": "of the NEP17 contract.\n\n```c#\n// get nep17 token info\nNep17API nep17API = new Nep17API(new RpcClient(new Uri(\"http://localhost:20332\"), null,null, ProtocolSettings.Load(\"config.json\")));\nRpcNep17TokenInfo tokenInfo = await nep17API.GetTokenInfoAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n```\n\n", "doc_id": "2f2db8df-f419-4c16-88ab-d5210464ce18", "embedding": null, "doc_hash": "491c95b20b3cb505d674b2640e4372e5e8ca4e974936ca1f367876e1f98a4d6b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/monitor.html"}, "node_info": {"start": 3165, "end": 3468, "_node_type": "1"}, "relationships": {"1": "b58f70d0969b7e9992c63784d84a72874772bbb1", "2": "1f0ae1df-101a-48d7-a48f-f2ff4da313a7"}}, "__type__": "1"}, "bf988493-283c-4656-915e-2174b32bd0c6": {"__data__": {"text": "# RPC Invocation Methods\n\nThe `RpcClient` encapsulates all the interfaces provided by RpcServer. You can send RPC requests in your code through the standard methods provided in this module. You only need to pass in the corresponding parameters, the SDK will construct the corresponding JSON-RPC requests and then get the data returned by the node.\n\n\n## Initializing RpcClient\nBefore you can send RPC requests you need to initialize  `RpcClient` first. Choose the RPC server port of a Neo node according to your own needs. Here is an example:\n\nTest net node\uff1a\n\n```c#\n// TestNet Node\nRpcClient client = new RpcClient(new Uri(\"http://seed1.neo.org:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n```\n\nLocal node (the local Neo-CLI that can be connected to main net, test net, or private net according to configuration):\n\n```c#\n// Local Node\nRpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n```\n\n> [!Note]\n>\n> Typically, only one RpcClient instance needs to be initialized in an application, not needing in each method.\n\n## Blockchain data\n\n### GetBestBlockHashAsync\nGets the hash of the highest block in the blockchain:\n\n```c#\nstring hexString = await client.GetBestBlockHashAsync().ConfigureAwait(false);\nbyte[] hashBytes = hexString.HexToBytes();\nUInt256 hash256 = UInt256.Parse(hexString);\n```\n\n### GetBlockAsync\nGets the detailed block information by the block hash or block index.\n\n```c#\nRpcBlock rpcBlock = await client.GetBlockAsync(\"773dd2dae4a9c9275290f89b56e67d7363ea4826dfd4fc13cc01cf73a44b0d0e\").ConfigureAwait(false);\nBlock block = rpcBlock.Block;\n```\n\nor \n\n```c#\nRpcBlock rpcBlock = await client.GetBlockAsync(\"1024\").ConfigureAwait(false);\nBlock block = rpcBlock.Block;\n```\n\nYou can also get the serialized block information through the block hash value or block index:\n\n```c#\nstring serializedBlock = await client.GetBlockHexAsync(\"773dd2dae4a9c9275290f89b56e67d7363ea4826dfd4fc13cc01cf73a44b0d0e\").ConfigureAwait(false);\n```\n\n### GetBlockCountAsync\n\nGets the current block quantity.\n\nBlock index\uff08Index\uff09 = Block height\uff08Height\uff09 = Block count\uff08Count\uff09 - 1\n\n```c#\nuint blockCount = await client.GetBlockCountAsync().ConfigureAwait(false);\n```\n\n### GetBlockHashAsync\n\nGets the block hash by the block index.\n\n```c#\nstring hexString = await client.GetBlockHashAsync(10000).ConfigureAwait(false);\nbyte[] hashBytes = hexString.HexToBytes();\nUInt256 hash256 = UInt256.Parse(hexString);\n```\n\n### Get the block header information\nGet the specific block header information by the block hash or block index:\n\n```c#\nRpcBlockHeader blockHeader = await client.GetBlockHeaderAsync(\"a5508c9b6ed0fc09a531a62bc0b3efcb6b8a9250abaf72ab8e9591294c1f6957\").ConfigureAwait(false);\nHeader header = blockHeader.Header;\n```\n\nor\n\n```c#\nRpcBlockHeader blockHeader = await client.GetBlockHeaderAsync(\"10000\").ConfigureAwait(false);\nHeader header = blockHeader.Header;\n```\n\nGet the serialized block header information from the block hash or block", "doc_id": "bf988493-283c-4656-915e-2174b32bd0c6", "embedding": null, "doc_hash": "e0ecbb4c0426c2fec553a0c1638e379b8a6c974a19fb2adcb2089973252fde2a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 0, "end": 3006, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "3": "39686406-514b-41aa-bf01-9023b7fe7962"}}, "__type__": "1"}, "39686406-514b-41aa-bf01-9023b7fe7962": {"__data__": {"text": "the serialized block header information from the block hash or block index:\n\n```c#\nstring serializedBlockHeader = await client.GetBlockHeaderHexAsync(\"a5508c9b6ed0fc09a531a62bc0b3efcb6b8a9250abaf72ab8e9591294c1f6957\").ConfigureAwait(false);\n```\n\nor\n\n```\nstring serializedBlockHeader = await client.GetBlockHeaderHexAsync(\"10000\").ConfigureAwait(false);\n```\n\n### GetContractStateAsync\nGets the contract information from the contract hash or contract ID\n\n```c#\nContractState contractState = await client.GetContractStateAsync(\"dc675afc61a7c0f7b3d2682bf6e1d8ed865a0e5f\").ConfigureAwait(false);\n```\n\n```c#\nContractState contractState = client.GetContractState(-1);\n```\n\n### GetRawMempoolAsync\nGets hash list of the confirmed transactions in the memory.\n\n```c#\nstring[] verifiedTransactions = await client.GetRawMempoolAsync().ConfigureAwait(false);\n```\n\n### GetRawMempoolBothAsync\n\nGets both confirmed and unconfirmed transaction hashes in memory:\n\n```c#\nRpcRawMemPool memPool = await client.GetRawMempoolBothAsync().ConfigureAwait(false);\nstring[] verifiedTransactions = memPool.Verified;\nstring[] unverifiedTransactions = memPool.UnVerified;\n```\n\n### GetRawTransactionAsync\n\nGets the transaction information by transaction ID.\n\n```c#\nRpcTransaction rpcTransaction = await client.GetRawTransactionAsync(\"f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657\").ConfigureAwait(false);\nTransaction transaction = rpcTransaction.Transaction;\n```\n\n### GetRawTransactionHexAsync\n\nGets the serialized transaction by transaction ID.\n\n```c#\nstring serializedTransaction = await client.GetRawTransactionHexAsync(\"f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657\").ConfigureAwait(false);\n```\n\n### CalculateNetworkFeeAsync\n\nCalculates network fee of the specified transaction.\n\n```\nlong networkFee = await rpcClient.CalculateNetworkFeeAsync(transaction).ConfigureAwait(false);\n```\n\n### GetStorageAsync\n\nGets the stored value through the contract script hash and stored key (which needs to be converted into a hex string):\n\n```c#\nstring value = await client.GetStorageAsync(\"03febccf81ac85e3d795bc5cbd4e84e907812aa3\", \"5065746572\").ConfigureAwait(false);\n```\n\n### GetTransactionHeightAsync\nGets the block height of the specified transaction by transaction ID:\n\n```c#\nuint height = await client.GetTransactionHeightAsync(\"f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657\").ConfigureAwait(false);\n```\n\n### GetNextBlockValidatorsAsync\nGets the consensus nodes information and voting status in the current network.\n\n```c#\nRpcValidator[] rpcValidators = await client.GetNextBlockValidatorsAsync().ConfigureAwait(false);\nforeach (var validator in rpcValidators)\n{\n    string publicKey = validator.PublicKey;\n    BigInteger voteCount = validator.Votes;\n    bool isActive = validator.Active;\n}\n```\n\n### GetCommitteeAsync\n\nGets the public key list of the current committee members.\n\n```c#\nstring[] committees = await", "doc_id": "39686406-514b-41aa-bf01-9023b7fe7962", "embedding": null, "doc_hash": "e6fcb8cc78aae1ec1b3a5932e3202714dfc78c434e92d45150f913dc2e5b0e29", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 2949, "end": 5882, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "2": "bf988493-283c-4656-915e-2174b32bd0c6", "3": "e83ebcf6-bd8c-4f13-b89d-779e302a29c9"}}, "__type__": "1"}, "e83ebcf6-bd8c-4f13-b89d-779e302a29c9": {"__data__": {"text": "of the current committee members.\n\n```c#\nstring[] committees = await client.GetCommitteeAsync().ConfigureAwait(false);\n```\n\n## Node\n\n### GetConnectionCount\nGets the number of nodes connected to this node.\n\n```c#\nint connectionCount = await client.GetConnectionCountAsync().ConfigureAwait(false);\n```\n\n### GetPeersAsync\nGets a list of currently connected / unconnected nodes for this node, including IP address and port.\n\n```c#\nRpcPeers rpcPeers = await client.GetPeersAsync().ConfigureAwait(false);;\nRpcPeer[] connected = rpcPeers.Connected;\nRpcPeer[] unconnected = rpcPeers.Unconnected;\nif (connected.Length > 0)\n{\n    RpcPeer peer = connected[1];\n    string address = peer.Address;\n    int port = peer.Port;\n}\n```\n\n### GetVersionAsync\nGets the version of the node receiving the RPC request:\n\n```c#\nRpcVersion rpcVersion = await client.GetVersionAsync().ConfigureAwait(false);\nstring version = rpcVersion.UserAgent;\n```\n\n### SendRawTransactionAsync\nSends and broadcasts the serialized transaction.\n\n```c#\nUInt256 txHash = await client.SendRawTransactionAsync(\"80000001195876cb34364dc38b730077156c6bc3a7fc570044a66fbfeeea56f71327e8ab0000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c65eaf440000000f9a23e06f74cf86b8827a9108ec2e0f89ad956c9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50092e14b5e00000030aab52ad93f6ce17ca07fa88fc191828c58cb71014140915467ecd359684b2dc358024ca750609591aa731a0b309c7fb3cab5cd0836ad3992aa0a24da431f43b68883ea5651d548feb6bd3c8e16376e6e426f91f84c58232103322f35c7819267e721335948d385fae5be66e7ba8c748ac15467dcca0693692dac\").HexToBytes()).ConfigureAwait(false);\n```\n\nOr broadcasts the transaction (tx) over the blockchain:\n\n```c#\nUInt256 txHash = await client.SendRawTransactionAsync(transaction).ConfigureAwait(false);\n```\n\n### SubmitBlockAsync\nSends and broadcasts the serialized block\uff1a\n\n```c#\nUInt256 blockHash = await", "doc_id": "e83ebcf6-bd8c-4f13-b89d-779e302a29c9", "embedding": null, "doc_hash": "ad97d75070598af680e5bd2f8c79beb886e8baddbbdf4941d27e00b06cdb4f3b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 5880, "end": 7764, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "2": "39686406-514b-41aa-bf01-9023b7fe7962", "3": "28051a15-2d39-4b87-b996-f9b1e2daaa99"}}, "__type__": "1"}, "28051a15-2d39-4b87-b996-f9b1e2daaa99": {"__data__": {"text": "block\uff1a\n\n```c#\nUInt256 blockHash = await client.SubmitBlockAsync(\"000000000000000000000000000000000000000000000000000000000000000000000000845c34e7c1aed302b1718e914da0c42bf47c476ac4d89671f278d8ab6d27aa3d65fc8857000000001dac2b7c00000000be48d3a3f5d10013ab9ffee489706078714f1ea2010001510400001dac2b7c00000000400000455b7b226c616e67223a227a682d434e222c226e616d65223a22e5b08fe89a81e882a1227d2c7b226c616e67223a22656e222c226e616d65223a22416e745368617265227d5d0000c16ff28623000000da1745e9b549bd0bfa1a569971c77eba30cd5a4b00000000400001445b7b226c616e67223a227a682d434e222c226e616d65223a22e5b08fe89a81e5b881227d2c7b226c616e67223a22656e222c226e616d65223a22416e74436f696e227d5d0000c16ff286230008009f7fd096d37ed2c0e3f7f0cfc924beef4ffceb680000000001000000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50000c16ff2862300be48d3a3f5d10013ab9ffee489706078714f1ea201000151\").HexToBytes()).ConfigureAwait(false);\n```\n\n## Smart contract\n\n### InvokeFunctionAsync\nInvokes the specific method of the smart contract through the specified smart contract script hash, method name, and parameters, and returns the result after running in the virtual machine.\n\n```c#\nstring contractHash = \"0xd2a4cff31913016155e38e474a2c06d08be276cf\";\nstring method = \"transfer\";\nRpcStack from = new RpcStack()\n{\n    Type = \"Hash160\",\n    Value = \"0x262678399f390ee9f0cfd9ac8c65df8c149b4e9c\"\n};\nRpcStack to = new RpcStack()\n{\n    Type = \"Hash160\",\n    Value = \"0x753b9b069ef88dea7323a0f1ba6cb24486584f05\"\n};\nRpcStack amount = new RpcStack()\n{\n    Type = \"Integer\",\n    Value = \"120000000\"\n};\nRpcStack data = new RpcStack()\n{\n    Type = \"String\",\n    Value = \"my data\"\n};\n\nSigner signer0 = new Signer()\n{\n    Account = UInt160.Parse(\"0x262678399f390ee9f0cfd9ac8c65df8c149b4e9c\")\n};\n\nRpcInvokeResult rpcInvokeResult = await _rpcClient.InvokeFunctionAsync(contractHash, method, new RpcStack[] { from, to, amount, data }, signer0).ConfigureAwait(false);\n\nstring script = rpcInvokeResult.Script;\nvar engineState = rpcInvokeResult.State;\nlong gasConsumed = rpcInvokeResult.GasConsumed;\n```\n\n### InvokeScriptAsync\nReturns the result after running the specified script in the virtual machine.\n\n```c#\nbyte[] script = \"00046e616d656724058e5e1b6008847cd662728549088a9ee82191\".HexToBytes();\nRpcInvokeResult rpcInvokeResult = await client.InvokeScriptAsync(script).ConfigureAwait(false);\n```\n\n### GetUnclaimedGasAsync\n\nGets", "doc_id": "28051a15-2d39-4b87-b996-f9b1e2daaa99", "embedding": null, "doc_hash": "d34cf0afb2cb250bc8c9a101593f248706dd82bc9d4c2f346eb9e050be67bf4c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 7790, "end": 10168, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "2": "e83ebcf6-bd8c-4f13-b89d-779e302a29c9", "3": "1bd4e225-dfd3-40ee-b58c-f90cef9ffd67"}}, "__type__": "1"}, "1bd4e225-dfd3-40ee-b58c-f90cef9ffd67": {"__data__": {"text": "GetUnclaimedGasAsync\n\nGets amount of unclaimed GAS at the specified address.\n\n```c#\nRpcUnclaimedGas unclaimedGas = await client.GetUnclaimedGasAsync(\"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\").ConfigureAwait(false);\nBigInteger unclaimed = unclaimedGas.Unclaimed;\nstring address = unclaimedGas.Address;\n```\n\n## Tools\n\n### ListPluginsAsync\nLists all the plugins loaded in the node.\n\n```c#\nRpcPlugin[] rpcPlugins = await client.ListPluginsAsync().ConfigureAwait(false);\nforeach (var item in rpcPlugins)\n{\n    string name = item.Name;\n    string version = item.Version;\n}\n```\n\n### ValidateAddressAsync\nValidates if the specified address is a valid Neo address.\n\n```c#\nRpcValidateAddressResult result = await client.ValidateAddressAsync(\"AQVh2pG732YvtNaxEGkQUei3YA4cvo7d2i\").ConfigureAwait(false);\nstring address = result.Address;\nbool isValid = result.IsValid;\n```\n\n## Wallets\nThe node local wallet interface contains the function of accessing the local wallet file. Before using the methods described in this section, you need to open the wallet using the openwallet method.\n\nThis method is disabled by default in the node configuration file for preventing high security risks.\n\n### OpenWalletAsync\n\nOpens the wallet file in the machine running the node.\n\n```c#\nstring path = \"D:/temp/123.json\";\nstring password = \"Password***\";\nbool result = await client.OpenWalletAsync(path, password).ConfigureAwait(false);\n```\n\n### CloseWalletAsync\nCloses the wallet and clears the wallet information in memory.\n\n```c#\nbool result = await client.CloseWalletAsync().ConfigureAwait(false);\n```\n\n### DumpPrivKeyAsync\nExports the private key of the specified address.\n\n```c#\nstring wif = await client.DumpPrivKeyAsync(\"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\").ConfigureAwait(false);\n```\n\n### GetBalanceAsync\nReturns balance of the specified asset in the wallet by the asset id. This method is applicable to the native contract assets and NEP-17 compliant assets.\n\n```c#\nBigDecimal balance = await client.GetWalletBalanceAsync(NativeContract.NEO.Hash.ToString()).ConfigureAwait(false);\n```\n\n### GetNewAddressAsync\nCreates a new account in the wallet and returns the corresponding address.\n\n```c#\nstring address = await client.GetNewAddressAsync().ConfigureAwait(false);\n```\n\n### GetUnclaimedGasAsync\nDisplays amount of the unclaimed GAS in the wallet.\n\n```c#\nBigInteger amount = await client.GetWalletUnclaimedGasAsync().ConfigureAwait(false);\n```\n\n### ImportPrivKeyAsync\nImports the private key into the wallet.\n\n```c#\nstring wif = \"KyoYyZpoccbR6KZ25eLzhMTUxREwCpJzDsnuodGTKXSG8fDW9t7x\";\nRpcAccount account = await client.ImportPrivKeyAsync(wif).ConfigureAwait(false);\n```\n\n### ListAddressAsync\nLists all the addresses in the wallet.\n\n```c#\nList<RpcAccount> acoounts = await client.ListAddressAsync().ConfigureAwait(false);\n```\n\n### SendFromAsync\nTransfers asset from a specified address to another address.\n\n```c#\nstring assetId = NativeContract.NEO.Hash.ToString();\nstring fromAddress =", "doc_id": "1bd4e225-dfd3-40ee-b58c-f90cef9ffd67", "embedding": null, "doc_hash": "b3fbcf0663447fe04d4328026357c2c98fb7c04eded7a7196455dd655afd4dd1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 10179, "end": 13138, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "2": "28051a15-2d39-4b87-b996-f9b1e2daaa99", "3": "3bb29a0f-eb0e-48e3-bba3-cb6ac2d361dd"}}, "__type__": "1"}, "3bb29a0f-eb0e-48e3-bba3-cb6ac2d361dd": {"__data__": {"text": "assetId = NativeContract.NEO.Hash.ToString();\nstring fromAddress = \"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\";\nstring toAddress= \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\nstring amount = \"100\";\nJObject result = await client.SendFromAsync(assetId, fromAddress, toAddress, amount).ConfigureAwait(false);\n```\nIf the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent.\n\nIf the signature is incomplete transaction to be signed is returned.\n\nIf the balance is insufficient an error is returned.\n\n### SendManyAsync\nTransfers assets to multiple addresses. You can specify the sending address.\n\n```c#\nList<RpcTransferOut> outs = new List<RpcTransferOut>();\nouts.Add(new RpcTransferOut\n{\n    Asset = NativeContract.NEO.Hash,\n    ScriptHash = Utility.GetScriptHash(\"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\"),\n    Value = \"100\"\n});\nouts.Add(new RpcTransferOut\n{\n    Asset = NativeContract.GAS.Hash,\n    ScriptHash = Utility.GetScriptHash(\"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\"),\n    Value = \"100.12345678\"\n});\nJObject result = await client.SendManyAsync(\"\", outs).ConfigureAwait(false);\n```\nIf the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent.\n\nIf the signature is incomplete transaction to be signed is returned.\n\nIf the balance is insufficient an error is returned.\n\n### SendToAddressAsync\nTransfers asset to the specified address.\n\n```c#\nstring assetId = NativeContract.NEO.Hash.ToString();\nstring toAddress = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\nstring amount = \"100\";\nJObject result = await client.SendToAddressAsync(assetId, toAddress, amount).ConfigureAwait(false);\n```\nIf the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent.\n\nIf the signature is incomplete transaction to be signed is returned.\n\nIf the balance is insufficient an error is returned.\n\n## Plugins\n\n### GetApplicationLogAsync\nGets the contract log by the specific transaction ID. The plugin ApplicationLogs is required for invoking this method. \n\n```c#\nstring txHash = \"0x23bf33766d00b4bb3314185f1ff0c2c85182d4d5e4e96f7c2df7506e7f99098b\";\nRpcApplicationLog log = await client.GetApplicationLogAsync(txHash).ConfigureAwait(false);\n```\n\nOr gets the contract log based on the specified transaction ID and trigger type\n\n```c#\nstring txHash = \"0x23bf33766d00b4bb3314185f1ff0c2c85182d4d5e4e96f7c2df7506e7f99098b\";\nRpcApplicationLog log = await client.GetApplicationLogAsync(txHash, TriggerType.Application).ConfigureAwait(false);\n```\n\n### GetNep17BalancesAsync\n\nReturns all NEP-17 assets balance at the specified address. The plugin TokensTracker is required for invoking this method.\n\n```c#\nstring address = \"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\";\nRpcNep17Balances balances = await", "doc_id": "3bb29a0f-eb0e-48e3-bba3-cb6ac2d361dd", "embedding": null, "doc_hash": "d8ecaa343c0aa52de2f804b6cba8ca25c7cb010c2d3a297d94b4e3dff5862058", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 13103, "end": 15927, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "2": "1bd4e225-dfd3-40ee-b58c-f90cef9ffd67", "3": "fcb886b5-2d6f-4ea4-a5a9-a01c414dcf9d"}}, "__type__": "1"}, "fcb886b5-2d6f-4ea4-a5a9-a01c414dcf9d": {"__data__": {"text": "balances = await client.GetNep17BalancesAsync(address).ConfigureAwait(false);\n```\n\n### GetNep17TransfersAsync\nReturns all NEP-17 transaction records at the specific address. The plugin TokensTracker is required for invoking this method.\n\nIf start and end timestamps are specified, transactions occurred in the time range is returned.\n\nIf no parameter is specified transactions in the past seven days are returned.\n\n```c#\nstring address = \"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\";\nRpcNep17Transfers transfers = await client.GetNep17TransfersAsync(address, 0).ConfigureAwait(false);\n```\n", "doc_id": "fcb886b5-2d6f-4ea4-a5a9-a01c414dcf9d", "embedding": null, "doc_hash": "672def660a8c1bc07785328d65c48c3aa817a4a2d71a79486cd248be33b25549", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}, "node_info": {"start": 15973, "end": 16554, "_node_type": "1"}, "relationships": {"1": "258e372521dd8449dda962e33a6ab05c857cff09", "2": "3bb29a0f-eb0e-48e3-bba3-cb6ac2d361dd"}}, "__type__": "1"}, "07af51b7-8507-452a-ba4c-d74f031b59ac": {"__data__": {"text": "# Transaction Construction\n\n`RpcClient` encapsulates the transaction construction module, which allows you to construct transactions in Neo N3 with specific parameters and methods to personalize your functions. This document introduces the relevant methods.\n\n> [!Note]\n>\n> If you use SDK to construct a transaction that requires a signature, you need to ensure that the RpcClient obeject and the network it is connected to are configured the same way, or the transaction constructed by the SDK will not be validated in the blockchain. To do so, load Neo-CLI config.json when constructing the RpcClient object, for example:\n>\n> RpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"))\n\n## Transaction construction process\n\n1. Construct a transaction script to determine what functions the transaction will perform, such as a transfer transaction:\n\n    ```c#\n    // construct the script, in this example, we will transfer 1 NEO to the receiver\n    UInt160 scriptHash = NativeContract.NEO.Hash;\n    byte[] script = scriptHash.MakeScript(\"transfer\", sender, receiver, 1\uff0c\"data\");\n    ```\n\n2. Construct `TransactionManagerFactory` with the parameter `RpcClient `; Construct `TransactionManager` with the parameters `Script` and`Signers`:\n\n    ```c#\n    TransactionManager txManager = await new TransactionManagerFactory(client)\n            .MakeTransactionAsync(script, signers).ConfigureAwait(false);\n    ```\n\n3. Add signature (single or multiple signatures) and use `KeyPair` of the account as the parameter.\n\n    - single signature\n\n    ```c#\n    // add signature for the transaction with sendKey\n    txManager.AddSignature(sendKey);\n    ```\n    - multiple signatures\n    \n    ```c#\n    // add multi-signatures for the transaction with sendKey\n    txManager.AddMultiSig(key1, 2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey);\n    txManager.AddMultiSig(key2, 2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey);\n    ```\n    - multi-signature contract\n    \n      The nature of multi-signature comes from multi-signature contracts. You need to construct a multi-signature contract before you can obtain the multi-signature address and transfer assets. The following example uses 3 accounts to create a multi-signature contract which requires at least 2 account signatures for signing.\n\n    ```c#\n    // create a multi-signature contract, which needs at least 2 of 3 KeyPairs to sign\n    Contract multiContract = Contract.CreateMultiSigContract(2, sendKey.PublicKey, key2.PublicKey, key3.PublicKey);\n    // get the scripthash of the multi-signature contract\n    UInt160 multiAccount = multiContract.Script.ToScriptHash();\n    ```\n    \n5. Verify signatures and add `Witness` to the transaction body.\n\n    If there are not enough signatures or fees an exception will be thrown.\n\n    ```c#\n    // sign the transaction with the added signatures\n    Transaction tx = await txManager.SignAsync().ConfigureAwait(false);\n    ```\n\n## Transaction Construction Examples\n\n### Constructing an NEP17 transfer transaction\n\nThe following example implements a function that transfers 1024 NEO from the sender account to the receiver account. You need to pay attention to the difference between the script and the signature in a transaction for constructing different transactions.\n\n```c#\nusing Neo;\nusing", "doc_id": "07af51b7-8507-452a-ba4c-d74f031b59ac", "embedding": null, "doc_hash": "dc0ab10f3e1cf585487b4a6fe5608e1ec94381b8eddf1b8df65425a501ca14ed", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}, "node_info": {"start": 0, "end": 3356, "_node_type": "1"}, "relationships": {"1": "ae55280fd826418cfd090ea78fe4a166e3b4db16", "3": "81ed6f91-b2df-4a8e-9333-21599c87b79a"}}, "__type__": "1"}, "81ed6f91-b2df-4a8e-9333-21599c87b79a": {"__data__": {"text": "for constructing different transactions.\n\n```c#\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestNep17Transfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestNep17Transfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n            // get the KeyPair of your account, which will pay the system and network fee\n            KeyPair sendKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n            UInt160 sender = Contract.CreateSignatureContract(sendKey.PublicKey).ScriptHash;\n\n            // add Signers, which is a collection of scripthashs that need to be signed\n            Signer[] cosigners = new[] { new Signer { Scopes = WitnessScope.CalledByEntry, Account = sender } };\n\n            // get the scripthash of the account you want to transfer to\n            UInt160 receiver = Utility.GetScriptHash(\"NirHUAteaMr6CqWuAAMaEUScPcS3FDKebM\");\n\n            // construct the script, in this example, we will transfer 1024 NEO to receiver\n            UInt160 scriptHash = NativeContract.NEO.Hash;\n            byte[] script = scriptHash.MakeScript(\"transfer\", sender, receiver, 1024);\n\n            // initialize the TransactionManagerFactory with rpc client and magic\n            // fill in the TransactionManager with the script and cosigners\n            TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n                .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n            // add signature and sign transaction with the added signature\n            Transaction tx = await txManager.AddSignature(sendKey).SignAsync().ConfigureAwait(false);\n\n            // broadcasts the transaction over the Neo network.\n            await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {tx.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) =>", "doc_id": "81ed6f91-b2df-4a8e-9333-21599c87b79a", "embedding": null, "doc_hash": "ad6d7622e3f82bb465ff8b5ea942c9b6fb0bd69aa13095668b974937a5075978", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}, "node_info": {"start": 3297, "end": 5739, "_node_type": "1"}, "relationships": {"1": "ae55280fd826418cfd090ea78fe4a166e3b4db16", "2": "07af51b7-8507-452a-ba4c-d74f031b59ac", "3": "d3ba614b-cd35-4661-a75b-2870c2fd7725"}}, "__type__": "1"}, "d3ba614b-cd35-4661-a75b-2870c2fd7725": {"__data__": {"text": "          .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n`WalletAPI` encapsulates the above process, so you can simplify the NEP17 transfer as follows:\n\n```c#\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestNep17Transfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestNep17Transfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n            // get the KeyPair of your account, which will pay the system and network fee\n            KeyPair sendKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n\n            // get the scripthash of the account you want to transfer to\n            UInt160 receiver = Utility.GetScriptHash(\"NirHUAteaMr6CqWuAAMaEUScPcS3FDKebM\");\n\n            // use WalletAPI to create and send the transfer transaction\n            WalletAPI walletAPI = new WalletAPI(client);\n            Transaction tx = await walletAPI.TransferAsync(NativeContract.NEO.Hash, sendKey, receiver, 1024).ConfigureAwait(false);\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n### Constructing a transaction to transfer to multi-signature account\n\nThe following example implements a function that transfers 10 GAS to a multi-signature account. The scripthash of a multi-signature account is obtained from the scripthash of the multi-signature contract. As the sender is a normal account, the process of adding a signature is the same as last example.\n\n```c#\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\nusing Utility = Neo.Network.RPC.Utility;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n           ", "doc_id": "d3ba614b-cd35-4661-a75b-2870c2fd7725", "embedding": null, "doc_hash": "b59ec79bc80b0caf627a58899ded1f71ab061257eaa8d2cccaa8b998a0ae0c56", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}, "node_info": {"start": 5776, "end": 8187, "_node_type": "1"}, "relationships": {"1": "ae55280fd826418cfd090ea78fe4a166e3b4db16", "2": "81ed6f91-b2df-4a8e-9333-21599c87b79a", "3": "d1f7eaf2-fe1e-4a5e-8313-81493c19f5d2"}}, "__type__": "1"}, "d1f7eaf2-fe1e-4a5e-8313-81493c19f5d2": {"__data__": {"text": "       {\n            TestToMultiTransfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestToMultiTransfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n            // get the KeyPair of your account, which will pay the system and network fee\n            KeyPair sendKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n            UInt160 sender = Contract.CreateSignatureContract(sendKey.PublicKey).ScriptHash;\n\n            // get the KeyPair of your accounts\n            KeyPair key2 = Utility.GetKeyPair(\"L1bQBbZWnKbPkpHM3jXWD3E5NwK7nui2eWHYXVZPy3t8jSFF1Qj3\");\n            KeyPair key3 = Utility.GetKeyPair(\"KwrJfYyc7KWfZG5h97SYfcCQyW4jRw1njmHo48kZhZmuQWeTtUHM\");\n\n            // create multi-signatures contract, this contract needs at least 2 of 3 KeyPairs to sign\n            Contract multiContract = Contract.CreateMultiSigContract(2, sendKey.PublicKey, key2.PublicKey, key3.PublicKey);\n            // get the scripthash of the multi-signature Contract\n            UInt160 multiAccount = multiContract.Script.ToScriptHash();\n\n            // construct the script, in this example, we will transfer 1024 GAS to multi-sign account\n            // in contract parameter, the amount type is BigInteger, so we need to muliply the contract factor\n            UInt160 scriptHash = NativeContract.GAS.Hash;\n            byte[] script = scriptHash.MakeScript(\"transfer\", sender, multiAccount, 1024 * NativeContract.GAS.Factor);\n\n            // add Signers, which is a collection of scripthashs that need to be signed\n            Signer[] cosigners = new[] { new Signer { Scopes = WitnessScope.CalledByEntry, Account = sender } };\n\n            // initialize the TransactionManager with rpc client and magic\n            // fill the script and cosigners\n            TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n                .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n            // add signature and sign transaction with the added signature\n            Transaction tx = await txManager.AddSignature(sendKey).SignAsync().ConfigureAwait(false);\n\n            // broadcasts the transaction over the Neo network.\n            await", "doc_id": "d1f7eaf2-fe1e-4a5e-8313-81493c19f5d2", "embedding": null, "doc_hash": "9cfa2833a229bcd0c4d0c5cd529bfc4880e4a060dd882689c364e92296f04c04", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}, "node_info": {"start": 8210, "end": 10563, "_node_type": "1"}, "relationships": {"1": "ae55280fd826418cfd090ea78fe4a166e3b4db16", "2": "d3ba614b-cd35-4661-a75b-2870c2fd7725", "3": "d4f8b73a-f8e3-4fa9-bdab-1a8b77fb40fd"}}, "__type__": "1"}, "d4f8b73a-f8e3-4fa9-bdab-1a8b77fb40fd": {"__data__": {"text": "over the Neo network.\n            await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {tx.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n### Constructing a transaction to transfer from multi-signature account\n\nThe following example implements a function that transfers 1024 GAS from a multi-signature account. The scripthash of the multi-signature account is obtained from the scripthash of the multi-signature contract. To transfer assets from a multi-signature account, you need to add signatures required by the multi-signature contract.\n\n```c#\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\nusing Utility = Neo.Network.RPC.Utility;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestFromMultiTransfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestFromMultiTransfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n\n            // get the KeyPair of your account\n            KeyPair receiverKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n            KeyPair key2 = Utility.GetKeyPair(\"L1bQBbZWnKbPkpHM3jXWD3E5NwK7nui2eWHYXVZPy3t8jSFF1Qj3\");\n            KeyPair key3 = Utility.GetKeyPair(\"KwrJfYyc7KWfZG5h97SYfcCQyW4jRw1njmHo48kZhZmuQWeTtUHM\");\n\n            // create multi-signature contract, this contract needs at least 2 of 3 KeyPairs to sign\n            Contract multiContract = Contract.CreateMultiSigContract(2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey);\n            // get the scripthash of the multi-signature Contract\n            UInt160 multiAccount = multiContract.Script.ToScriptHash();\n\n            UInt160 receiver = Contract.CreateSignatureContract(receiverKey.PublicKey).ScriptHash;\n\n            // construct the script, in this example, we will transfer 1024 GAS", "doc_id": "d4f8b73a-f8e3-4fa9-bdab-1a8b77fb40fd", "embedding": null, "doc_hash": "c4f3434192b5e7be2d09641de95a719033b72d7b7791e2387f33e7db1e2dbfd1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}, "node_info": {"start": 10542, "end": 12950, "_node_type": "1"}, "relationships": {"1": "ae55280fd826418cfd090ea78fe4a166e3b4db16", "2": "d1f7eaf2-fe1e-4a5e-8313-81493c19f5d2", "3": "64e88c6e-6f83-4cb0-b7bb-f0af03a462d5"}}, "__type__": "1"}, "64e88c6e-6f83-4cb0-b7bb-f0af03a462d5": {"__data__": {"text": "     // construct the script, in this example, we will transfer 1024 GAS to multi-sign account\n            // in contract parameter, the amount type is BigInteger, so we need to muliply the contract factor\n            UInt160 scriptHash = NativeContract.GAS.Hash;\n            byte[] script = scriptHash.MakeScript(\"transfer\", multiAccount, receiver, 1024 * NativeContract.GAS.Factor);\n\n            // add Signers, which is a collection of scripthashs that need to be signed\n            Signer[] cosigners = new[] { new Signer { Scopes = WitnessScope.CalledByEntry, Account = multiAccount } };\n\n            // initialize the TransactionManager with rpc client and magic\n            // fill the script and cosigners\n            TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n                .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n            // add signature and sign transaction with the added signature\n            Transaction tx = await txManager.AddMultiSig(new KeyPair[]{receiverKey, key2}, 2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey)\n                .SignAsync().ConfigureAwait(false);\n\n            // broadcasts the transaction over the Neo network.\n            await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {tx.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n", "doc_id": "64e88c6e-6f83-4cb0-b7bb-f0af03a462d5", "embedding": null, "doc_hash": "74f89f073df3331cb20d18b0f60fa894132aa52792a788ffd49170b5629765ab", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}, "node_info": {"start": 12902, "end": 14596, "_node_type": "1"}, "relationships": {"1": "ae55280fd826418cfd090ea78fe4a166e3b4db16", "2": "d4f8b73a-f8e3-4fa9-bdab-1a8b77fb40fd"}}, "__type__": "1"}, "009f60fb-8a0c-43a8-8627-d5c5d8f5718a": {"__data__": {"text": "# Wallet Interfaces\n\nMost operations in Neo blockchain are related to accounts. A wallet is the collection of accounts that includes one or multiple accounts. This document contains the following topics\uff1a\n\n- The basic concepts and operations of accounts and wallets\n- The method `WalletAPI`\uff0cwhich encapsulates wallet-related interfaces to provide the functions of balance inquiry, GAS claim, and transfer.\n\n## Account and Wallet\n\n### Account\n\nAn account is the user identity in Neo, which is essentially a private and public key pair ( `KeyPair` ) .\n\n```c# \n// create a new KeyPair\nbyte[] privateKey = new byte[32];\nusing (RandomNumberGenerator rng = RandomNumberGenerator.Create())\n{\n    rng.GetBytes(privateKey);\n}\nKeyPair keyPair = new KeyPair(privateKey);\n```\n\n### Private Key\n\nPrivate key is an authorization tool used to sign transactions. Having a private key means you own an account that you can handle all the assets in it. The private key is essentially a 32-bit byte array that can be represented as a hexadecimal string, for example:\n\n`\"0x450d6c2a04b5b470339a745427bae6828400cf048400837d73c415063835e005\"`\n\n```c# \n  // export private key to hex string\n  string privateHex = keyPair.PrivateKey.ToHexString();\n\n  // get KeyPair from private hex string\n  keyPair = Utility.GetKeyPair(privateHex);\n```\n\n### WIF\n\nWIF is another string representation of the private key, which is equivalent to the private key. For example, the above private key is represented as the following WIF:\n\n`\"KyXwTh1hB76RRMquSvnxZrJzQx7h9nQP2PCRL38v6VDb5ip3nf1p\"`\n\n```c# \n  // export KeyPair as WIF\n  string wif = keyPair.Export();\n\n  // get KeyPair from WIF\n  KeyPair keyPair1 = Utility.GetKeyPair(wif);\n```\n\n### Public Key\n\nThe public key verifies the signature of the private key. It corresponds to the ECPoint type in Neo. The public key can be calculated with the private key. Typically it is a 66-digit hexadecimal string:\n\n`\"02f9ec1fd0a98796cf75b586772a4ddd41a0af07a1dbdf86a7238f74fb72503575\"`\n\n```c# \n  // export public key hex string\n  string publicHex = keyPair.PublicKey.ToString();\n\n  // get public key from hex string\n  Neo.Cryptography.ECC.ECPoint publicKey = Neo.Cryptography.ECC.ECPoint.Parse(publicHex, Neo.Cryptography.ECC.ECCurve.Secp256r1);\n```\n\n### Account ScriptHash\n\nScriptHash, corresponding to `UInt160` in Neo, is essentially a 20-bit byte array generated from the public key by script construction and hash algorithm. Since the hash algorithm is not reversible, the public key cannot be calculated backwards from the script hash. ScriptHash is usually expressed as a reversed hexadecimal string in big-endian order\uff1a\n`\"0xb0a31817c80ad5f87b6ed390ecb3f9d312f7ceb8\"`\n\n```c# \n  // get ScriptHash of KeyPair account\n  UInt160 scriptHash = Contract.CreateSignatureContract(keyPair.PublicKey).ScriptHash;\n  string strScriptHash = scriptHash.ToString();\n```\n\n### Address\n\nAddress is another string form of ScriptHash and can be transformed to or from ScriptHash. As the unique identifier of the account, address is the most commonly used account form. It is similar to the account number for a", "doc_id": "009f60fb-8a0c-43a8-8627-d5c5d8f5718a", "embedding": null, "doc_hash": "f1b104d21eb26529b7df2d49cbc79629211687759d53d89038586cd23e5363c0", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/wallet.html"}, "node_info": {"start": 0, "end": 3094, "_node_type": "1"}, "relationships": {"1": "c7429042916671dabd3caf443829149208214a34", "3": "63b0e9e7-70a4-4b03-b856-18592314e3cc"}}, "__type__": "1"}, "63b0e9e7-70a4-4b03-b856-18592314e3cc": {"__data__": {"text": "address is the most commonly used account form. It is similar to the account number for a traditional account, when you transfer money you transfer it to a specified address. A common address format is: `\"Ncm9TEzrp8SSer6Wa3UCSLTRnqzwVhCfuE\"`\n\n```c# \nusing Neo.Wallets;\n\n// ScriptHash to address\nstring adddress = scriptHash.ToAddress();\n// address to ScriptHash\nscriptHash = adddress.ToScriptHash();\n```\n\n### Wallet\n\nWallet is a collection of accounts. NEP6 is the most commonly used wallet standard in Neo. A NEP6 wallet can be serialized into a JSON file, in which the encrypted account private key is saved. The corresponding password is required to decrypt the private key.\n\nHere is an example:\n\nCreate a new NEP6 wallet with an account and save as JSON file:\n\n```c# \n// create wallet\nstring path = \"wallet_new.json\";\nstring password = \"MyPass\";\nNEP6Wallet wallet_new = new NEP6Wallet(path);\nusing (wallet_new.Unlock(password))\n{\n    wallet_new.CreateAccount(keyPair.PrivateKey);\n}\nwallet_new.Save();\n```\n\nRead the NEP6 wallet from the JSON file and decrypt the account:\n\n```c# \n// load wallet from nep6 wallet\nNEP6Wallet wallet = new NEP6Wallet(path);\nKeyPair keyPair2;\nusing (wallet.Unlock(password))\n{\n    keyPair2 = wallet.GetAccounts().First().GetKey();\n}\n```\n\n## Using WalletAPI\n\n### Initialization\nInitializing `WalletAPI`\uff1a\n\n```c#\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\nWalletAPI walletAPI = new WalletAPI(client);\n```\n\n### Inquiring balance\n\n> [!Note]\n>\n> The type of account balance is usually BigInteger, which is a representation after rounding the decimal part. It needs to be divided by Factor to get the actual Token amount.\n\nInquiry NEP-17 asset balance using the string parameter:\n\n```c#\n// get the neo balance of account\nstring tokenHash = NativeContract.NEO.Hash.ToString();\nstring address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\nBigInteger balance = await walletAPI.GetTokenBalanceAsync(tokenHash, address).ConfigureAwait(false);\n```\n\nor using the parameter of ScriptHash type:\n\n```c#\n// Get the NEO balance of account\nUInt160 tokenScriptHash = Utility.GetScriptHash(tokenHash, ProtocolSettings.Default);\nUInt160 accountHash = Utility.GetScriptHash(address, ProtocolSettings.Default);\nNep17API nep17API = new Nep17API(client);\nBigInteger balance = await nep17API.BalanceOfAsync(tokenScriptHash, accountHash).ConfigureAwait(false);\n```\n\nIn Neo N3 NEO and GAS are both NEP17 assets with the fixed scripthash. Here we provide a simpler interface:\n\n```c#\n// Get the NEO balance\nuint neoBalance = await walletAPI.GetNeoBalanceAsync(address).ConfigureAwait(false);\n\n// Get the GAS balance\ndecimal gasBalance = await walletAPI.GetGasBalanceAsync(address).ConfigureAwait(false);\n```\n\n## Claiming GAS\n\nIn Neo N3 GAS is automatically claimed when NEO is transferred. You can construct a transaction transferring to yourself to claim GAS.\n\n1. First check the claimable GAS amount at current address:\n\n    ```c#\n    // Get the claimable GAS of one address\n    string address =", "doc_id": "63b0e9e7-70a4-4b03-b856-18592314e3cc", "embedding": null, "doc_hash": "917743b8e9cb4b823eb0f2c0a2dfb39a2d7ad95ef51c28e39d090bf7b3010be6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/wallet.html"}, "node_info": {"start": 3022, "end": 6126, "_node_type": "1"}, "relationships": {"1": "c7429042916671dabd3caf443829149208214a34", "2": "009f60fb-8a0c-43a8-8627-d5c5d8f5718a", "3": "5bcca153-b5ad-4bff-a6fa-a5da7be4ff89"}}, "__type__": "1"}, "5bcca153-b5ad-4bff-a6fa-a5da7be4ff89": {"__data__": {"text": "   // Get the claimable GAS of one address\n    string address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n    decimal gasAmount = await walletAPI.GetUnclaimedGasAsync(address).ConfigureAwait(false);\n    ```\n    or use ScriptHash of the account to check:\n\n    ```c#\n    string address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n    UInt160 accountHash = Utility.GetScriptHash(address);\n    decimal gasAmount = await walletAPI.GetUnclaimedGasAsync(accountHash).ConfigureAwait(false);\n    ```\n\n2. Construct a transaction sending NEO to yourself:\n\n    ```c#\n    // Claiming GAS needs the KeyPair of account. You can also use wif or private key hex string\n    string wif = \"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\";\n    Transaction transaction = await walletAPI.ClaimGasAsync(wif).ConfigureAwait(false);\n    ```\n    or use `KeyPair`:\n    \n    ```c#\n    KeyPair keyPair = Utility.GetKeyPair(wif);\n    Transaction transaction = await walletAPI.ClaimGasAsync(keyPair).ConfigureAwait(false);\n    ```\n\n## Asset Transfer\n\n`WalletAPI` encapsulates transfer methods of NEP-17 assets.\n\nUse string parameters: \n\n```c#\nstring tokenHash = NativeContract.NEO.Hash.ToString();\nstring wif = \"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\";\nstring address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n\n// Transfer 10 NEO from wif to address\nawait walletAPI.TransferAsync(tokenHash, wif, address, 10).ConfigureAwait(false);\n\n// Print a message after the transaction is on chain\nWalletAPI neoAPI = new WalletAPI(client);\nawait neoAPI.WaitTransactionAsync(transaction)\n  .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n```\nor use `KeyPair` and  `UInt160` (ScriptHash):\n\n```c#\nstring wif = \"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\";\nstring address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n\nKeyPair sender = Utility.GetKeyPair(wif);\nUInt160 receiver = Utility.GetScriptHash(address, ProtocolSettings.Default);\n\n// Transfer 10 NEO from wif to address\nawait walletAPI.TransferAsync(NativeContract.NEO.Hash, sender, receiver, 10).ConfigureAwait(false);\n```\n\nNEP17 transfer from multi-signature account:\n\n```\nKeyPair receiverKey = Utility.GetKeyPair(\"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\");\nKeyPair keyPair1 = Utility.GetKeyPair(\"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\");\nKeyPair keyPair2 =", "doc_id": "5bcca153-b5ad-4bff-a6fa-a5da7be4ff89", "embedding": null, "doc_hash": "485fe9025b069ae2e0ca471c64acd2fd410461d67de0ed6f8be21661b89fb371", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/wallet.html"}, "node_info": {"start": 6153, "end": 8511, "_node_type": "1"}, "relationships": {"1": "c7429042916671dabd3caf443829149208214a34", "2": "63b0e9e7-70a4-4b03-b856-18592314e3cc", "3": "374bea48-a9ae-43f5-828b-06c0a16d6329"}}, "__type__": "1"}, "374bea48-a9ae-43f5-828b-06c0a16d6329": {"__data__": {"text": "keyPair2 = Utility.GetKeyPair(\"L2ynA5aq6KPJjpisXb8pGXnRvgDqYVkgC2Rw85GM51B9W33YcdiZ\");\nKeyPair keyPair3 = Utility.GetKeyPair(\"L3TbPZ3Gtqh3TTk2CWn44m9iiuUhBGZWoDJQuvVw5Zbx5NAjPbdb\");\nKeyPair keyPair4 = Utility.GetKeyPair(\"L3Ke1RSBycXmRukv27L6o7sQWzDwDbFcbfR9oBBwXbCKHdBvb4ZM\");\n\n//make transaction \nTransaction tx = await walletAPI.TransferAsync(NativeContract.GAS.Hash, 3, new ECPoint[] { keyPair1.PublicKey, keyPair2.PublicKey, keyPair3.PublicKey, keyPair4.PublicKey }, new KeyPair[] { keyPair1, keyPair2, keyPair3 }, Contract.CreateSignatureContract(receiverKey.PublicKey).ScriptHash, 10 * NativeContract.GAS.Factor).ConfigureAwait(false);\n```\n\n\n\n", "doc_id": "374bea48-a9ae-43f5-828b-06c0a16d6329", "embedding": null, "doc_hash": "b37c1a2b8b215589d1ccc248acbfbd0d9ad525f7b66a72523f73524f0b19419f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/wallet.html"}, "node_info": {"start": 8548, "end": 9197, "_node_type": "1"}, "relationships": {"1": "c7429042916671dabd3caf443829149208214a34", "2": "5bcca153-b5ad-4bff-a6fa-a5da7be4ff89"}}, "__type__": "1"}, "d758e4c3-c5c8-45fa-adf0-ffe5d2031741": {"__data__": {"text": "# Smart Contract Writing Basics\n\nIn this tutorial, you will learn the basics of developing a smart contract. \n\nLet's have a look at our basic hello world contract.\n\n```c#\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n\nnamespace Helloworld\n{\n    [ManifestExtra(\"Author\", \"Neo\")]\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a contract example\")]\n    public class Contract1 : SmartContract\n    {\n        //TODO: Replace it with your own address.\n        [InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\n        static readonly UInt160 Owner = default;\n\n        private static bool IsOwner() => Runtime.CheckWitness(Owner);\n\n        // When this contract address is included in the transaction signature,\n        // this method will be triggered as a VerificationTrigger to verify that the signature is correct.\n        // For example, this method needs to be called when withdrawing token from the contract.\n        public static bool Verify() => IsOwner();\n\n        // TODO: Replace it with your methods.\n        public static string MyMethod()\n        {\n            return Storage.Get(Storage.CurrentContext, \"Hello\");\n        }\n\n        public static void _deploy(object data, bool update)\n        {\n            if (update) return;\n\n            // It will be executed during deploy\n            Storage.Put(Storage.CurrentContext, \"Hello\", \"World\");\n        }\n\n        public static void Update(ByteString nefFile, string manifest)\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            ContractManagement.Update(nefFile, manifest, null);\n        }\n\n        public static void Destroy()\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            ContractManagement.Destroy();\n        }\n    }\n}\n```\n\n## Contract property\n\nInside the contract class, the property defined with `static readonly` or `const` is the contract property which can be used as constants and can not be changed. For instance, when we want to define a Owner of that contract or the factor number which will be used in the later asset transfer, we can define these constants in this way:\n\n```c#\n// Represents onwner of this contract, which is a fixed address. Usually should be the contract creator\n[InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\nstatic readonly UInt160 Owner = default;\n\n// A constant number\nprivate const ulong factor = 100000000;\n```\n\nThese properties defined in contract property are usually constants that can be used inside the methods of smart contract and every time the smart contract is running on any instance, these properties keep the same value.\n\nIn addition, developer can define static method  in contract and return a constant, which is exposing the", "doc_id": "d758e4c3-c5c8-45fa-adf0-ffe5d2031741", "embedding": null, "doc_hash": "4f99a4ed0621714dd7ea3915c6efdb03372d662f559a09b2398f6230ba241685", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/basics.html"}, "node_info": {"start": 0, "end": 2960, "_node_type": "1"}, "relationships": {"1": "8b58d408d24fb8cb32b122293feb9319c0113271", "3": "e3f44d2b-410b-4dca-a559-efae8ecea626"}}, "__type__": "1"}, "e3f44d2b-410b-4dca-a559-efae8ecea626": {"__data__": {"text": "developer can define static method  in contract and return a constant, which is exposing the method  out of the contract and let end-user can call the method to get the fixed value when they try to query the smart contract. For instance, when you create you own token, you have to define a name which you may want everyone use you contract can check he name with this method.\n\n```c#\npublic static string Name() => \"name of the token\";\n```\n\n## Storage property\n\nWhen you develop the smart contract, you have to store your application data on the blockchain. When a Smart Contract is created or when a transaction awakens it, the Contract\u2019s code can read and write to its storage space. All data stored in the storage of the smart contract are automatically persisted between invocations of the smart contract. Full nodes in the blockchain store the state of every smart contract on the chain.\n\nNeo has provided data access interface based on key-value pairs. Data records may be read or deleted from or written to the smart contracts using keys. Besides, smart contracts may retrieve and send their storage contexts to other contracts, thereby entrusting other contracts to manage their storage areas. In C# development, smart contract can use the `Storage` Class to read/write the persistent storage  The `Storage` class is a static class and does not require a constructor. The methods of `Storage` class can be viewed in this [API References](../../reference/scapi/framework/services/Storage.md)\n\nFor instance, if you want to store the total supply of your token into storage:\n\n```c#\n// Key is totalSupply and value is 100000000\nStorage.Put(Storage.CurrentContext, \"totalSupply\", 100000000);\n```\n\nHere `CurrentContext` Returns the current store context. After obtaining the store context, the object can be passed as an argument to other contracts (as a way of authorization), allowing other contracts to perform read/write operations on the persistent store of the current contract.\n\n`Storage` work well for storing primitive values and while you can use an `StorageMap`  which can be used for storing structured data, this will store the entire container in a single key in smart contract storage.\n\n```c#\n//Get the totalSupply in the storageMap. The Map is used an entire container with key name \"contract\"\nStorageMap contract = new(Storage.CurrentContext, nameof(contract))\nvar value = contract.Get(\"totalSupply\");\nreturn value is null ? 0 : (BigInteger)value;;\n```\n\n## Data type\n\nWhen using C# to develop smart contracts, you cannot use the full set of C# features due to the difference between NeoVM and Dotnet IL.\n\nBecause NeoVM is more compact, we can only compile limited C# / dotnet features into an NEF file.\n\nNeoVM provides the following basic types\uff1a\n\n- `Pointer`\n- `Boolean`\n- `Integer`\n- `ByteString`\n- `Buffer`\n- `Array`\n- `Struct`\n- `Map`\n- `InteropInterface`\n\nThe basic types of C# are:\n\n- `Int8 int16 int32 int64 uint8 uint16 uint32 uint64`\n- `float double`\n- `Boolean`\n- `Char String`\n\n## Your first Neo contract\n\nAfter analyzing the basic hello world contract, let us move to your first real-world smart contract. Here we provide a very simple DNS system which was written in C#. The main function of the DNS is store the domain for users. It contains all the points above except the events. We can investigate this smart contract to learn how to make a basic smart contract. The source code is here:\n\n```c#\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System.ComponentModel;\n\nnamespace Domain\n{\n    public class Contract1 : SmartContract\n    {\n\n        [DisplayName(\"query\")]\n        public static byte[] Query(string", "doc_id": "e3f44d2b-410b-4dca-a559-efae8ecea626", "embedding": null, "doc_hash": "e9265ff5dffc46a4953cdcbc0105c8a555d21ddaca549fcd5755181666abe483", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/basics.html"}, "node_info": {"start": 2884, "end": 6630, "_node_type": "1"}, "relationships": {"1": "8b58d408d24fb8cb32b122293feb9319c0113271", "2": "d758e4c3-c5c8-45fa-adf0-ffe5d2031741", "3": "1f556f68-e80a-4fe1-a88f-afc54a193e97"}}, "__type__": "1"}, "1f556f68-e80a-4fe1-a88f-afc54a193e97": {"__data__": {"text": "       public static byte[] Query(string domain)\n        {\n            return Storage.Get(Storage.CurrentContext, domain);\n        }\n\n        [DisplayName(\"register\")]\n        publilc static bool Register(string domain, byte[] owner)\n        {\n            // Check if the contract owner is the same as the one who invokes the contract\n            if (!Runtime.CheckWitness(owner)) return false;\n            byte[] value = Storage.Get(Storage.CurrentContext, domain);\n            if (value != null) return false;\n            Storage.Put(Storage.CurrentContext, domain, owner);\n            return true;\n        }\n\n        [DisplayName(\"delete\")]\n        public static bool Delete(string domain)\n        {\n            // To do\n        }\n    }\n}\n```\n\nLet's slice it and learn it step by step.\n\n### Contract Features\n\nYou can declare more features:\n\n```c#\n[ManifestExtra(\"Author\", \"Neo\")]\n[ManifestExtra(\"Email\", \"dev@neo.org\")]\n[ManifestExtra(\"Description\", \"This is a contract example\")]\n[SupportedStandards(\"NEP-17\")]\n[ContractPermission(\"*\", \"onNEP17Payment\")]\n[ContractTrust(\"0x0a0b00ff00ff00ff00ff00ff00ff00ff00ff00a4\")]\npublic class Contract1 : SmartContract\n{\n    public static bool Main(string operation, object[] args)\n    {\n        // other code\n    }\n}\n```\n\n`ManifestExtra` represents the extra fields in the Manifest file, where you can add `Author`, `Email`,  `Description` and etc.\n\n`SupportedStandards` represents the NEP standards the contract conform to, such as NEP-17, a token standard on Neo. \n\n`ContractPermission` indicates the permission requested by the contract, and `ContractTrust` indicates which contracts trust the contract to call itself.  See [invocation-permission](... /deploy/invoke.html#invocation-permission).\n\nYou can also add other fields, such as:\n\n```c#\n[ManifestExtra(\"Name\", \"sample contract\")]\n[ManifestExtra(\"Version\", \"1.0.0\")]\n```\n\n### Entry function\n\nTheoretically, smart contracts can have any entry points. Methods of the public static type in the contract can be used as an entry function to be invoked externally, for example:\n\n```c#\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\n\nnamespace Neo.Compiler.MSIL.UnitTests.TestClasses\n{\n    class Contract_a : SmartContract.Framework.SmartContract\n    {\n        public static object First(string method, object[] args)\n        {\n            return 'a';\n        }\n        public static object Second(string method, object[] args)\n        {\n            return 'b';\n        }\n    }\n}\n```\n\nThe compiler marks the offset of `First` and `Second` in ABI. When invoking the contract, it assigns the value to initialPosition, finds and executes the matching method according to the offset recorded in the ABI.\n\n###", "doc_id": "1f556f68-e80a-4fe1-a88f-afc54a193e97", "embedding": null, "doc_hash": "cfb531c274fdc47c860587b3c908d4ee025c3bba2176b3be6736f570f6db1979", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/basics.html"}, "node_info": {"start": 6678, "end": 9390, "_node_type": "1"}, "relationships": {"1": "8b58d408d24fb8cb32b122293feb9319c0113271", "2": "e3f44d2b-410b-4dca-a559-efae8ecea626", "3": "5d19f230-064a-43ea-9812-8d328a665f89"}}, "__type__": "1"}, "5d19f230-064a-43ea-9812-8d328a665f89": {"__data__": {"text": "and executes the matching method according to the offset recorded in the ABI.\n\n### Trigger\n\nA smart contract trigger is a mechanism that triggers the execution of smart contracts. There are three triggers introduced in the Neo smart contract\uff0c`Verification`,   `Application`, and `System`. However, for most smart contract development, you only need to implement the Verify method to provide the signature verification logic, without having to decide the trigger. \n\n#### Verification trigger\n\nA Verification trigger is used to call the contract as a verification function, which can accept multiple parameters and should return a valid Boolean value, indicating the validity of the transaction or block.\n\n```c#\npublic static bool Verify()\n{\n    return Runtime.CheckWitness(Owner);\n}\n```\n\n### CheckWitness\n\nIn many, if not all cases, you will probably be wanting to validate whether the address invoking your contract code is really who they say they are.\n\nThe `Runtime.CheckWitness` method accepts a single parameter which represents the address that you would like to validate against the address used to invoke the contract code. In more deeper detail, it verifies that the transactions / block of the calling contract has validated the required script hashes.\n\nUsually this method is used to check whether an specified address is the the contract caller,  and then the address can be used to do store change or something else.\n\nInside our `DNS smart contract`, the `Register` function is firstly check if the owner is the same as the one who invoke the contract. Here we use the `Runtime.CheckWitness` function. Then we try to fetch the domain owner first to see if the domain is already exists in the storage. If not, we can store our domain->owner pair using the `Storage.Put`method.\n\n```c#\nprivate static bool Register(string domain, byte[] owner)\n{\n    if (!Runtime.CheckWitness(owner)) return false;\n    byte[] value = Storage.Get(Storage.CurrentContext, domain);\n    if (value != null) return false;\n    Storage.Put(Storage.CurrentContext, domain, owner);\n    return true;\n}\n```\n\nSimilar to the Register method, the Delete function check the owner first and if it exists and it is the same as the one who invoke the contract, delete the pair using the `Storage.Delete`method. \n\n### Events\n\nIn Smart contract, events are a way  to communicate that something happened on the blockchain to your app front-end (or back-end), which can be 'listening' for certain events and take action when they happen. You might use this to update an external database, do analytics, or update a UI. In some specified contract standard,  it defined some events should be posted. It is not cover in this page, but is very useful for the other smart contracts. For instance, in the NEP-17 Token, the events `transfer` should be fired when user invoke the transfer function.\n\n```c#\n//Should be called when caller transfer NEP-17 asset.\n[DisplayName(\"Transfer\")]\npublic static event Action<byte[], byte[], BigInteger> OnTransfer;\n```\n\nTransfer is the event name.\n\n### Json serialization\n\nIn Neo N3 smart contract, the Json serialization/deserialization feature is added:\n\n```c#\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\n\nnamespace Neo.Compiler.MSIL.TestClasses\n{\n    public class Contract_Json : SmartContract.Framework.SmartContract\n    {\n        public static string Serialize(object obj)\n        {\n            return Json.Serialize(obj);\n        }\n\n        public static object Deserialize(string json)\n        {\n            return Json.Deserialize(json);\n        }\n   ", "doc_id": "5d19f230-064a-43ea-9812-8d328a665f89", "embedding": null, "doc_hash": "bebe8120cf81c2139275e40e4e706a3cb720c134822c14f9fb3064e1f4b95e25", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/basics.html"}, "node_info": {"start": 9351, "end": 12951, "_node_type": "1"}, "relationships": {"1": "8b58d408d24fb8cb32b122293feb9319c0113271", "2": "1f556f68-e80a-4fe1-a88f-afc54a193e97", "3": "8fa96f78-ad91-498f-8560-91444784a4de"}}, "__type__": "1"}, "8fa96f78-ad91-498f-8560-91444784a4de": {"__data__": {"text": "       }\n    }\n}\n```\n\n", "doc_id": "8fa96f78-ad91-498f-8560-91444784a4de", "embedding": null, "doc_hash": "d2d4e4f02d06c76a0916c8aa10d07d7d63b24017dba09158d830c34ff9ebf1c0", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/basics.html"}, "node_info": {"start": 13009, "end": 13031, "_node_type": "1"}, "relationships": {"1": "8b58d408d24fb8cb32b122293feb9319c0113271", "2": "5d19f230-064a-43ea-9812-8d328a665f89"}}, "__type__": "1"}, "2a6357ae-58d9-41b5-90e1-0df0c33eb8e8": {"__data__": {"text": "# Differences between Neo N3 and Neo Legacy\n\nThis document describes the main differences in writing smart contracts between Neo N3 and Neo Legacy. Developers who want to migrate Neo Legacy contracts to Neo N3 need to be aware of these changes. Since Neo N3 is still being updated, here we only list significant changes and the document will be updated continuously.\n\n## Development Environment\n\n### .NET Core\n\nIn Neo N3, .NET Core version has been upgraded from 3.0 to 6.0. You need to update SDK.\n\n### Visual Studio Extension\n\nIn Neo N3, the Visual Studio extensions are updated. You need to uninstall the old NeoContractPlugin plugin, compile, and install the latest NeoContractPlugin.\n\nThe new contract templates have major updates. For more information refer to <a href=\"#\u5408\u7ea6\u6a21\u677f\">Contract\u00a0Template</a>.\n\n### Compiler\n\nIn Neo N3, the old neon (Neo.Compiler.MSIL) has been deprecated. You need to use the latest [nccs](https://www.nuget.org/packages/Neo.Compiler.CSharp/) (Neo.Compiler.CSharp) compiler, which has major changes as follows:\n\n* Not support for the language Visual Basic.\n* Ability to directly compile the  C# code to smart contracts without the intermediate language IL. \n* Ability to directly compile solutions, projects, and C# files.\n* Support for more C# features.\n* Deterministic compilation. If the code and compiler are deterministic, the compiled contract is deterministic.\n* abi files upgraded to manifest files.\n* nvm files upgraded to nef files.\n* Compile directory changed from `bin/debug` to `bin/sc`.\n\n## Contract Template\n\n### Namespace\n\nNeo Legacy\uff1a\n\n```c#\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Services.Neo;\nusing System;\n```\nNeo N3\uff1a\n\n```c#\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n```\n\n### Contract Feature\n\n|                         | Neo Legacy                                                   | Neo N3                                                       |\n| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Contract info           | You need to fill in contract information such as the name, author, email, etc. when deploying the contract. | Add the contract features to the contract file, written as [C# Features](https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/attributes/), for example\uff1a<br/>[ManifestExtra(\"Author\", \"Neo\")]<br/>[ManifestExtra(\"Email\", \"dev@neo.org\")]<br/>[ContractTrust(\"\\*\")]<br/>[ContractPermission(\"\\*\", \"\\*\")]<br/>[SupportedStandards(\"NEP-17\")]<br/>[ManifestExtra(\"Description\", \"This is a contract example\")]<br/>public class Contract1 : SmartContract |\n| Contract function       | When deploying a contract, you need to declare contract features such as whether to use storage, whether it can be called dynamically, and whether to accept NEP-5 assets. | All contracts can use the storage and dynamic calls by default. You can implement the", "doc_id": "2a6357ae-58d9-41b5-90e1-0df0c33eb8e8", "embedding": null, "doc_hash": "6e2452e2003a1be6ea99aaebe76b260d0612c63c5eaed0b65c956e3954c5a879", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/difference.html"}, "node_info": {"start": 0, "end": 3097, "_node_type": "1"}, "relationships": {"1": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66", "3": "d195b25b-e4a8-4f8b-805b-91d563ac4f01"}}, "__type__": "1"}, "d195b25b-e4a8-4f8b-805b-91d563ac4f01": {"__data__": {"text": "All contracts can use the storage and dynamic calls by default. You can implement the OnNEP17Payment method to accept NEP-17 assets and implement the OnNEP11Payment method to accept NEP-11 (NFT standard) assets. |\n| Declare support for NEP | Code example:<br/>public static string[] SupportedStandards()<br/>{<br/>    string[] result = { \"NEP-5\", \"NEP-7\", \"NEP-10\" };<br/>    return result;<br/>} | Directly add the feature to the contract class name `[SupportedStandards(\"NEP-17\")]` |\n\n### Declaration of static variables\n\nNeo Legacy\n\n```c#\nprivate static readonly byte[] InitialOwnerScriptHash = \"AJhZmdHxW44FWMiMxD5bTiF7UgHcp3g2Fr\".ToScriptHash();\n```\n\nNeo N3\n\n```c#\n[InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\nstatic readonly UInt160 Owner = default;\n```\n\n### Methods and Events\n\n|                     | Neo Legacy                                                   | Neo N3                                                       |\n| ------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| main                |                                                              | Removed. Developers no longer need to write the redundant main method for contract method jumping |\n| Verify              | Determined in the Main method, for example\uff1a<br/>public static object Main(string method, object[] args)<br/>{<br/>    if (Runtime.Trigger == TriggerType.Verification)<br/>    {<br/>    \treturn IsOwner();<br/>    )<br/>} | Independent method\uff1a<br/> `public static bool Verify() => IsOwner();` |\n| Method Name         | To make the method name conform to the smart contract naming rules, the method is declared like this: <br/>[DisplayName(\"balanceOf\")]<br/>public static BigInteger BalanceOf(byte[] account) | The first letter of the method name is automatically compiled to lowercase, so developers no longer have to use DisplayName, but DisplayName is still acceptable. |\n| Deployment          | Initialization variables are placed into a separate method that is called manually after deployment. | The method `_deploy` is added, which is executed automatically after deployment. |\n| Update and destroy  | You need to write the Update and Destroy methods by yourself. | Update and Destroy methods are built in the contract template |\n| transfer event name | `transfer`                                                   | `Transfer`                                                   |\n\n### Permission\n\n#### User's signature\n\nIn Neo Legacy all contracts in the", "doc_id": "d195b25b-e4a8-4f8b-805b-91d563ac4f01", "embedding": null, "doc_hash": "c2aba76b5e0a80a85f93c2ecf2bdcdca03cc12c3e78fa623397e4b87e794ad31", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/difference.html"}, "node_info": {"start": 3027, "end": 5620, "_node_type": "1"}, "relationships": {"1": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66", "2": "2a6357ae-58d9-41b5-90e1-0df0c33eb8e8", "3": "cee0e86e-e674-451b-ac39-5bf0358fbb90"}}, "__type__": "1"}, "cee0e86e-e674-451b-ac39-5bf0358fbb90": {"__data__": {"text": "User's signature\n\nIn Neo Legacy all contracts in the call chain can use user signatures by default.\n\nNeo N3 adds the concept of WitnessScope, which by default allows only the entry contract to use the user signature and allows the user to modify it.\n\n#### Permission and trust\n\nIn Neo Legacy, contracts can call each other via dynamic invoking function. You need to set invoking permission in the code, but this way has limited effect.\n\nNeo N3\uff1a\n\n- Added restrictions on contract invoking permission. You need to declare Permission first and then invoke.\n- Added the concept of contract Groups and Trusts to enable wallets to give security warnings.\n\n- Added the concept of CallFlag to restrict the behavior of the called contract.\n\n\n#### Security method\n\nNeo N3 adds a new security method. You can execute the contract in a read-only manner by adding the [Safe] feature to the method.\n\n## Contract Framework\n\n### Native contracts\n\nNeo N3 introduces a large number of native contracts, moving massive interoperable services from Neo Legacy to native contracts. The major changes are as follows.\n\n- Upgraded the Blockchain class to a Ledger native contract, e.g. `Blockchain.GetBlock()` changed to `Ledger.GetBlock()`.\n- Added the ContractManagement native contract to query contracts and manage their updating and destruction.\n\n- Moved the contract part of the Blockchain class to the ContractManagement native contract, e.g. `Blockchain.GetContract()` changed to `ContractManagement .GetContract()`.\n\n- Added the CryptoLib native contract and moved Sha256, ripemd160, VerifyWithECDsa and other methods to this contract.\n\n- Added the StdLib native contract and moved serialization, deserialization, data conversion and other methods from Helper class to this contract.\n\n- Added native contracts such as NEO, GAS, Oracle, Policy, and RoleManagement.\n\n- Moved the functions election, voting, and GAS extraction from specific transactions to the NEO native contract.\n\n\n### Class\n\n- The Runtime class has been extensively updated. More runtime states are added.\n- The Transaction class has been extensively updated to fit the data structure of Neo N3 transactions.\n- Added a new Crypto class and moved some of the methods provided by the SmartContract class to this class.\n- Moved a number of classes:\n  -  Account\n  -  Asset\n  - Header\n  - InvocationTransaction\n  - TransactionAttribute\n  - TransactionInput\n  - TransactionOutput\n\n\n### Storage\n\n|                 | Neo Legacy                                                   | Neo N3                                                       |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| StorageMap      | StorageMap cannot be used as static variable. It should be written to each method. | Support for declaration of static StorageMap.                |\n| Storage search  | Returns byte[] if no corresponding key is found.             | Returns null if no corresponding key is found. You need to determine whether it is empty, otherwise a null reference exception may occur. |\n| Data conversion | Data is converted via the method `ToBigInteger`              | Data is compulsively converted via the method `(BigInteger)` |\n|                 | The `Storage.CurrentContext.CreateMap(string name)` method   | Changed to the construction method of StorageMap            ", "doc_id": "cee0e86e-e674-451b-ac39-5bf0358fbb90", "embedding": null, "doc_hash": "3f1e23d145307a32698758880893140b112c874f49bde3b27c5ef65172a13e44", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/difference.html"}, "node_info": {"start": 5647, "end": 9060, "_node_type": "1"}, "relationships": {"1": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66", "2": "d195b25b-e4a8-4f8b-805b-91d563ac4f01", "3": "8c4d1617-95e4-4fe2-91cf-8e3391184a1b"}}, "__type__": "1"}, "8c4d1617-95e4-4fe2-91cf-8e3391184a1b": {"__data__": {"text": "to the construction method of StorageMap             |\n\nNeo Legacy \uff1a\n\n```c#\npublic static readonly string mapName = \"asset\";\n\npublic static void Put(byte[] key, BigInteger value) => Storage.CurrentContext.CreateMap(mapName).Put(key, value);\n\npublic static BigInteger Get(byte[] key) => Storage.CurrentContext.CreateMap(mapName).Get(key).ToBigInteger();\n```\n\nNeo N3\uff1a\n\n```c#\npublic static readonly string mapName = \"asset\";\n\npublic static void Put(UInt160 key, BigInteger value) => assetMap.Put(key, value);\n\npublic static BigInteger Get(UInt160 key)\n{\n    var value = assetMap.Get(key);\n    return value is null ? 0 : (BigInteger)value;\n}\n```\n\n### TokenSale Operations\n\n#### Contract writing\n\nNeo Legacy\uff1a\n\nIt is very complicated to do Token Sale due to the deference between UTXO assets and contract assets. Generally, you have to write the mintTokens method, get the transaction that invokes the contract, then analyze the sender from the transaction input, analyze the transfer amount and asset name from the transaction output, and finally transfer the contract asset to the sender.\n\nNeo N3\uff1a\n\nTokenSale can be implemented via OnNEP17Payment. The sender and transfer amount no longer need to be analyzed from the transaction one by one and then summed up, but can be directly obtained from the parameters. Here is an example:\n\n```c#\npublic static void OnNEP17Payment(UInt160 from, BigInteger amount, object data)\n{\n    if (Runtime.CallingScriptHash == NEO.Hash)\n    {\n        Mint(amount * TokensPerNEO);\n    }\n    else if (Runtime.CallingScriptHash == GAS.Hash)\n    {\n        if (from != null) Mint(amount * TokensPerGAS);\n    }\n}\n```\n\n#### User operations\n\nNeo Legacy\uff1a\n\nThe user initiates InvocationTransaction, constructs the transaction input and output, transfers the NEO/GAS to the contract address, and calls the mintTokens method of the contract address to complete TokenSale.\n\nNeo N3 \uff1a\n\nThe user just need to send NEO/GAS to the contract address, which triggers the OnNEP17Payment method of the contract to complete TokenSale.\n\n### Exception\n\nNeo Legacy\uff1a\n\nWhen invoking a contract, if the contract execution encounters an exception, the exception message is not printed.\n\nNeo N3\uff1a\n\nWhen invoking a contract, the exception message is printed as the result of the call.\n\n### Static call\n\nNeo Legacy \uff1a\n\n```c#\n[Appcall(\"XXXXXXXXXX\")]//ScriptHash\npublic static extern int AnotherContract(string arg);\n\npublic static void Main()\n{\n    AnotherContract(\"Hello\");    \n}\n```\n\nNeo N3 \uff1a\n\n```c#\n[Contract(\"0102030405060708090A0102030405060708090A\")]\npublic class Contract1\n{\n    public static extern void MyMethod();\n}\n\npublic static void Call()\n{\n    Contract1.MyMethod();\n}\n```\n\n### Dynamic call\n\nNeo Legacy\uff1a\n\n```c#\ndelegate object Dyncall(string method, object[] args);\npublic static object Main(string operation, object[] args)\n{\n    var dyncall = (Dyncall)target.ToDelegate();\n    var newArgs = new object[1];\n    var method = (string)args[0];\n    newArgs[0] = args[1];\n   ", "doc_id": "8c4d1617-95e4-4fe2-91cf-8e3391184a1b", "embedding": null, "doc_hash": "cf0f14269c327f91a0e0a704ff7ea1a1d4e7759ffea3a72380528dc34f1b3888", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/difference.html"}, "node_info": {"start": 9071, "end": 12045, "_node_type": "1"}, "relationships": {"1": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66", "2": "cee0e86e-e674-451b-ac39-5bf0358fbb90", "3": "dee6bc35-0fb1-4caf-b4e7-8426cf554e2d"}}, "__type__": "1"}, "dee6bc35-0fb1-4caf-b4e7-8426cf554e2d": {"__data__": {"text": "   newArgs[0] = args[1];\n    dyncall(method, newArgs);\n}\n```\n\nNeo N3\uff1a\n\nYou can invoke `Contract.Call()` to complete the dynamic call of the contract.\n\n```c#\npublic static bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data)\n{\n    Contract.Call(to, \"onNEP17Payment\", CallFlags.All, new object[] { from, amount, data });\n}\n```\n\n", "doc_id": "dee6bc35-0fb1-4caf-b4e7-8426cf554e2d", "embedding": null, "doc_hash": "bbfca0a2d2045435ab89aae0f6f83a68deffde74be68664a81f3b6ec2cd97382", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/difference.html"}, "node_info": {"start": 12052, "end": 12397, "_node_type": "1"}, "relationships": {"1": "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66", "2": "8c4d1617-95e4-4fe2-91cf-8e3391184a1b"}}, "__type__": "1"}, "3400f8bc-289e-4e5f-aafc-20df76068bd3": {"__data__": {"text": "# NEF and Manifest Files\n\nNeo N3 uses the NEF (NEO Executable Format) and Manifest files as a replacement of the AVM and ABI files in Neo Legacy.\n\nWhen a contract is compiled successfully, the compiler generates both the NEF file and Manifest file. These two files are also needed when you deploy a contract or upgrade a contract.\n\n## NEF\n\nThe NEF file includes the following fields.\n\n\n| Field    | Type          | Comment                                                 |\n| -------- | ------------- | ------------------------------------------------------- |\n| Magic    | uint32        | The Magic value of the blockchain.                      |\n| Compiler | byte[64]      | Compiler name and version                               |\n| Source   | byte[64]      | The source code address of the contract                 |\n| Reserve  | byte[2]       | The field reserved for future extensions. It must be 0. |\n| Tokens   | MethodToken[] | Method tokens.                                          |\n| Reserve  | byte[2]       | The field reserved for future extensions. It must be 0. |\n| Script   | Byte[]        | The contract script                                     |\n| Checksum | uint32        | The first four bytes after two-time SHA256 hashed       |\n\n## Manifest\n\nBefore deploying the contract, you need to explicitly declare the contract functions and permissions in the manifest file, which affects the contract behavior when running.\n\nThe Manifest file includes the following fields.\n\n| Field              | Type                                                         | Comment                                                      |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Name               | string                                                       | Contract name                                                |\n| Groups             | ContractGroup[]<br>Consisting of a public key and a signature on the contract hash | Defines a group of trusted contracts. Contracts in a group trusts each other and can be invoked by each other,  without prompting the user any warnings. For example, a series of contracts that call each other for a DeFi project. <br/>A group is identified by a public key and must has a signature for the contract hash to prove that the contract is included in the group. |\n| SupportedStandards |", "doc_id": "3400f8bc-289e-4e5f-aafc-20df76068bd3", "embedding": null, "doc_hash": "b41e4e95d5a0c72e6af44134e30ee0079a1fe9600d1f1dbadbaf648ff539a915", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/manifest.html"}, "node_info": {"start": 0, "end": 2445, "_node_type": "1"}, "relationships": {"1": "fcedba8087fd732ba9bbf616f76d12206839e2b5", "3": "ad7c9cc2-8406-4cbf-8bdc-fdfa91f20f89"}}, "__type__": "1"}, "ad7c9cc2-8406-4cbf-8bdc-fdfa91f20f89": {"__data__": {"text": "to prove that the contract is included in the group. |\n| SupportedStandards | string[]                                                     | Supported NEP standard, equivalent to NEP-10 in Neo Legacy.x      |\n| Abi                | ContractAbi                                                  | NEP-14 (NeoContract ABI)<br>Description of smart contract methods (name, parameters, return value, offset, safe or not), events (name, parameters) |\n| Permissions        | ContractPermission[]<br>Consisting of the contract and its method names | This field is an array containing a permission object, which defines other contracts and methods that the contract wants to call. The contract can be ScriptHash, Group, or wildcard *. The method is the method name or wildcard *. Contracts or methods not declared in the manifest cannot be called by the contract. |\n| Trusts             | WildcardContainer\\<UInt160>                                  | Defines other contracts trusted by the contract. The contract can be ScriptHash, Group, or wildcard *. If a contract is trusted, the user will not receive any warning message when the contract is called. |\n| Extra              | object                                                       | Other user-defined data, such as developer, email, URL, contract profile, etc. |\n\n", "doc_id": "ad7c9cc2-8406-4cbf-8bdc-fdfa91f20f89", "embedding": null, "doc_hash": "1afb7469ee2e05314b580d814dc4f2a0caf418d4d37821faf5260c83bb06700b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/manifest.html"}, "node_info": {"start": 2368, "end": 3684, "_node_type": "1"}, "relationships": {"1": "fcedba8087fd732ba9bbf616f76d12206839e2b5", "2": "3400f8bc-289e-4e5f-aafc-20df76068bd3"}}, "__type__": "1"}, "40c6275a-d6ac-4096-b4da-c446b55588c2": {"__data__": {"text": "# NEP-11 \n\nThe NEP-11 proposal outlines the standard for writing NFT (Non-fungible token) contracts. This document will explain how to write a simple NFT contract using C#.\n\n## Defining NFT attributes\n\nA shortcut for developers to develop NFT contracts is inheriting directly from the class  `Nep11Token<Nep11TokenState>`, where `Nep11TokenState` is the class accommodating all the NFT attributes. In addition to the default `Name` and `Owner` fields, you can add customized attributes, such as images, videos, categories, URLs, attack power, defense power, etc.\n\n| Fields | Example                                    | Description                 |\n| ------ | ------------------------------------------ | --------------------------- |\n| Name   | HarryPotter #001                           | NFT name                    |\n| Owner  | 0x4578060c29f4c03f1e16c84312429d991952c94c | NFT owner                   |\n| Type   | 0                                          | Type\uff08customized\uff09          |\n| Image  | https://neo.org/images/HarryPotter.jpg     | Image\uff08customized\uff09         |\n| ATK    | 3000                                       | Attack power\uff08customized\uff09  |\n| DEF    | 3000                                       | Defense power\uff08customized\uff09 |\n\nAn NFT asset requires a unique identifier. If your contract includes NFT assets with different names, you can use the `Name` field in `Nep11TokenState` as TokenID. If there are NFT assets with duplicate name, you need to add a new field like ID or TokenID.\n\nParticularly, it is recommended that developers name the image field `Image` in order for the wallet to display the NFT image properly. Wallet developers can also capture NFT images based on the NFT Image attribute.  \n\nThe `TokenState`  code example is as follows\uff1a\n\n```c#\npublic class MyTokenState : Nep11TokenState\n{\n    public string Image { get; set; }\n    \n    public MyTokenState(string name)\n    {\n        //TODO: Replace it with your own URL.\n        Image = \"https://neo.org/images/\" + name + \".jpg\";\n    }\n}\n```\n\nAfter inheriting `Nep11Token<Nep11TokenState>` you need to rewrite the Symbol method, as follows:\n\n```c#\npublic override string Symbol() => \"MNFT\";\n```\n\n## Distribution Method\n\nThe base class `Nep11Token` doesn't include the method for NFT distribution. Developers can write it on demand. In this example we create a method `Airdrop`, which functions airdrop of NFT to the specified address, to enable the contract owner to issue NFT assets.\n\n```c#\npublic static bool Airdrop(UInt160 to, string name)\n{\n    if (!IsOwner()) throw new Exception(\"No", "doc_id": "40c6275a-d6ac-4096-b4da-c446b55588c2", "embedding": null, "doc_hash": "1d569909e048d47d4ca6237c08333e5cfa13ad097cd9a01764f865e13b3945fc", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep11.html"}, "node_info": {"start": 0, "end": 2571, "_node_type": "1"}, "relationships": {"1": "646063726f109495484d7522abb13f00c7c684f4", "3": "9630e194-c78f-47b9-b021-42624306ba1e"}}, "__type__": "1"}, "9630e194-c78f-47b9-b021-42624306ba1e": {"__data__": {"text": "string name)\n{\n    if (!IsOwner()) throw new Exception(\"No authorization.\");\n    if (!to.IsValid) throw new Exception(\"Amount is invalid.\");\n\n    Mint(name, new MyTokenState(name));\n    return true;\n}\n```\n\nIn the above code segment, the `Mint` method is inherited from `Nep11Token`. To invoke it, you just need to pass in TokenID and the `TokenState` object of NFT.\n\n## Example\n\nThe complete code is as follows:\n\n```c#\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Attributes;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n\nnamespace Contract1\n{\n    [SupportedStandards(\"NEP-11\")]\n    public class Contract1 : Nep11Token<MyTokenState>\n    {\n        //TODO: Replace it with your own address.\n        [InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\n        static readonly UInt160 Owner = default;\n\n        private static bool IsOwner() => Runtime.CheckWitness(Owner);\n\n        public override string Symbol() => \"MNFT\";\n\n        public static bool Airdrop(UInt160 to, string name)\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            if (!to.IsValid) throw new Exception(\"Amount is invalid.\");\n\n            Mint(name, new MyTokenState(name));\n            return true;\n        }\n    }\n\n    public class MyTokenState : Nep11TokenState\n    {\n        public string Image { get; set; }\n\n        public MyTokenState(string name)\n        {\n            //TODO: Replace it with your own URL.\n            Image = \"https://neo.org/images/\" + name + \".jpg\";\n        }\n    }\n}\n\n```\n\nTo enable the user to purchase NFT with GAS, you can add the following method:\n\n```c#\npublic static void OnNEP17Payment(UInt160 from, BigInteger amount, object _)\n{\n    \n    if (Runtime.CallingScriptHash != GAS.Hash)\n        throw new Exception(\"Please pay with GAS\");\n    amount /= 100000000;\n    for (int i = 0; i < amount; i++)\n    {\n        //TODO: Please replace with your own naming logic. TokenId is not allowed to be the same\n        var name = \"HarryPotter #001\";\n        Mint(name, new MyTokenState(name));\n    }\n}\n```\n\nBy now we have completed a simple NFT contract.\n\n## Methods and events in base class\n\nThe base class `Nep11Token` also provides the following methods and events:\n\n#### NEP-11 methods\n\n| Name        | Parameters                                     | Returns          | Description                       ", "doc_id": "9630e194-c78f-47b9-b021-42624306ba1e", "embedding": null, "doc_hash": "987184d9af4859d1552742d5c97bb8a299095f6ec18b38cf05c0c5940ed6083c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep11.html"}, "node_info": {"start": 2523, "end": 4970, "_node_type": "1"}, "relationships": {"1": "646063726f109495484d7522abb13f00c7c684f4", "2": "40c6275a-d6ac-4096-b4da-c446b55588c2", "3": "d94f4642-81f0-41c7-a622-cfd7dd641d6d"}}, "__type__": "1"}, "d94f4642-81f0-41c7-a622-cfd7dd641d6d": {"__data__": {"text": "                                              |\n| ----------- | ---------------------------------------------- | ---------------- | ------------------------------------------------------------ |\n| symbol      | --                                             | String           | Returns the contract symbol, e.g. \"MNFT\"                     |\n| decimals    | --                                             | Integer          | Returns the integer 0                                        |\n| totalSupply | --                                             | Integer          | NFT total supply. Total supply= Amount of minted tokens - Amount of burned tokens |\n| balanceOf   | Hash160\uff08owner\uff09                               | Integer          | The total amount of NFT owned by the user                    |\n| ownerOf     | ByteArray\uff08tokenId\uff09                           | Hash160          | Returns the owner of the specified NFT.                      |\n| properties  | ByteArray\uff08tokenId\uff09                           | Map              | Returns the properties of the given NFT.                     |\n| tokens      |                                                | InteropInterface | Returns all of the tokens minted by the contract.            |\n| tokensOf    | Hash160\uff08owner\uff09                               | InteropInterface | Returns all of the token ids owned by the specified address  |\n| transfer    | Hash160\uff08to\uff09 ByteArray\uff08tokenId\uff09 Any\uff08data\uff09 | Boolean          | It transfers an amount of NFT with  TokenId. This method requires the signature of NFT owner. |\n\n#### Events\n\n| Name     | Parameters                                                   | Returns         | Description                                                  |\n| -------- | ------------------------------------------------------------ | --------------- | ------------------------------------------------------------ |\n| transfer", "doc_id": "d94f4642-81f0-41c7-a622-cfd7dd641d6d", "embedding": null, "doc_hash": "99a2d194796e50d50aa6d44028e60651405a3f4ac3250d142fea63e43b242ae7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep11.html"}, "node_info": {"start": 5020, "end": 6916, "_node_type": "1"}, "relationships": {"1": "646063726f109495484d7522abb13f00c7c684f4", "2": "9630e194-c78f-47b9-b021-42624306ba1e", "3": "e840ab4b-a963-4489-b7af-78720a939681"}}, "__type__": "1"}, "e840ab4b-a963-4489-b7af-78720a939681": {"__data__": {"text": "    |\n| -------- | ------------------------------------------------------------ | --------------- | ------------------------------------------------------------ |\n| transfer | Hash160\uff08from\uff09 Hash160\uff08to\uff09 Integer\uff08amount\uff09 ByteArray\uff08tokenId\uff09 | Transfer  event | When the `from` address is set to `null` tokens are created; When the `to` address set to `null`tokens are burned. |\n\n## See also\n\n[NEP-11 Proposal](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki)\n\n[Nep11TokenState Source Code](https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11TokenState.cs)\n\n[Nep11Token Source Code](https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11Token.cs)\n\n[NeoVerse Document](https://github.com/chenzhitong/neoverse-readme)\n\n", "doc_id": "e840ab4b-a963-4489-b7af-78720a939681", "embedding": null, "doc_hash": "f6235ad5e372b125e828c73548c05a1020007adb4aafb904a9d0c98aa2a47b0e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep11.html"}, "node_info": {"start": 6743, "end": 7570, "_node_type": "1"}, "relationships": {"1": "646063726f109495484d7522abb13f00c7c684f4", "2": "d94f4642-81f0-41c7-a622-cfd7dd641d6d"}}, "__type__": "1"}, "0121f8a6-8bd9-4316-9fc3-352d3855190a": {"__data__": {"text": "# NEP-17\n\nThe NEP-17 proposal is a replacement of the original NEP5 proposal, which outlines a token standard for the Neo blockchain that will provide systems with a generalized interaction mechanism for tokenized Smart Contracts. \n\nNEP17 assets are recorded in the contract storage area, through updating account balance in the storage area, to complete the transaction.\n\nIn the method definitions below, we provide both the definitions of the functions as they are defined in the contract as well as the invoke parameters.\n\n**totalSupply**\n\n    {\n      \"name\": \"totalSupply\",\n      \"parameters\": [],\n      \"returntype\": \"Integer\"\n    }\n\nReturns the total token supply deployed in the system.\n\n**symbol**\n\n    {\n      \"name\": \"symbol\",\n      \"parameters\": [],\n      \"returntype\": \"String\"\n    }\n\nReturns a short string symbol of the token managed in this contract. e.g. \"MYT\". \n\nThis string MUST be valid ASCII, MUST NOT contain whitespace or control characters, SHOULD be limited to uppercase Latin alphabet (i.e. the 26 letters used in English) and SHOULD be short (3-8 characters is recommended). \n\nThis method MUST always return the same value every time it is invoked.\n\n**decimals**\n\n    {\n      \"name\": \"decimals\",\n      \"parameters\": [],\n      \"returntype\": \"Integer\"\n    }\n\nReturns the number of decimals used by the token - e.g. `8`, means to divide the token amount by `100,000,000` to get its user representation.\n\nThis method MUST always return the same value every time it is invoked.\n\n**balanceOf**\n\n    {\n      \"name\": \"balanceOf\",\n      \"parameters\": [\n        {\n          \"name\": \"account\",\n          \"type\": \"Hash160\"\n        }\n      ],\n      \"returntype\": \"Integer\"\n    }\n\nReturns the token balance of the `account`.\n\nThe parameter `account` MUST be a 20-byte address. If not, this method SHOULD `throw` an exception.\n\nIf the `account` is an unused address, this method MUST return `0`.\n\n**transfer**\n\n    {\n      \"name\": \"transfer\",\n      \"parameters\": [\n        {\n          \"name\": \"from\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"to\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"Integer\"\n        },\n        {\n          \"name\": \"data\",\n          \"type\": \"Any\"\n        }\n      ],\n      \"returntype\": \"Boolean\"\n    }\n\nTransfers an `amount` of tokens from the `from` account to the `to` account. \n\nThe parameters `from` and `to` MUST be 20-byte addresses. If not, this method SHOULD `throw` an exception.<br/>\n\nThe parameter `amount` MUST be greater", "doc_id": "0121f8a6-8bd9-4316-9fc3-352d3855190a", "embedding": null, "doc_hash": "eef4a80b116c344bd1aed0877cb323f14939694f8e60539437d95373537009db", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep17.html"}, "node_info": {"start": 0, "end": 2547, "_node_type": "1"}, "relationships": {"1": "4882a2fe714b9001994272f13c7e0437e1f5cb99", "3": "9767a31a-ef75-48b5-90b3-9b08d99579de"}}, "__type__": "1"}, "9767a31a-ef75-48b5-90b3-9b08d99579de": {"__data__": {"text": "an exception.<br/>\n\nThe parameter `amount` MUST be greater than or equal to `0`. If not, this method SHOULD `throw` an exception.<br/>\n\nThe function MUST return `false` if the `from` account balance does not have enough tokens to spend.<br/>\n\nIf the method succeeds, it MUST fire the `Transfer` event, and MUST return `true`, even if the `amount` is `0`, or `from` and `to` are the same address.<br/>\n\nThe function SHOULD check whether the `from` address equals the caller contract hash. If so, the transfer SHOULD be processed; If not, the function SHOULD use the SYSCALL `Neo.Runtime.CheckWitness` to verify the transfer.<br/>\n\nIf the transfer is not processed, the function MUST return `false`.\n\nIf the receiver is a deployed contract, the function MUST call `onNEP17Payment` method on receiver contract with the `data` parameter from `transfer` AFTER firing the `Transfer` event. If the receiver doesn't want to receive this transfer it MUST call `ABORT`. \n\n**Transfer Event**\n\n    {\n      \"name\": \"Transfer\",\n      \"parameters\": [\n        {\n          \"name\": \"from\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"to\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"Integer\"\n        }\n      ]\n    }\n\nMUST trigger when tokens are transferred, including zero value transfers and self-transfers. <br/>\n\nA token contract which creates new tokens MUST trigger a `Transfer` event with the `from` address set to `null` when tokens are created.<br/>\n\nA token contract which burns tokens MUST trigger a `Transfer` event with the `to` address set to `null` when tokens are burned.\n\nNEP17 methods are as follows. For the complete code refer to [NEP-17 contract code](https://github.com/neo-project/examples/tree/master/csharp/NEP17).\n\n```c#\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\nusing System.Numerics;\n\nnamespace Template.NEP17.CSharp\n{\n    public partial class NEP17 : SmartContract\n    {\n        public static BigInteger TotalSupply() => TotalSupplyStorage.Get();\n\n        public static BigInteger BalanceOf(UInt160 account)\n        {\n            if (!ValidateAddress(account)) throw new Exception(\"The parameters account SHOULD be a 20-byte non-zero address.\");\n            return AssetStorage.Get(account);\n        }\n\n        public static bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data)\n        {\n            if (!ValidateAddress(from) || !ValidateAddress(to)) throw new Exception(\"The parameters from and to SHOULD be 20-byte non-zero addresses.\");\n            if (amount <= 0) throw new Exception(\"The parameter amount MUST be greater than 0.\");\n          ", "doc_id": "9767a31a-ef75-48b5-90b3-9b08d99579de", "embedding": null, "doc_hash": "6855060b135057abdf017e09fd0c64bc368d9239b04cc5c15b5ab004b2a3a2cc", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep17.html"}, "node_info": {"start": 2496, "end": 5280, "_node_type": "1"}, "relationships": {"1": "4882a2fe714b9001994272f13c7e0437e1f5cb99", "2": "0121f8a6-8bd9-4316-9fc3-352d3855190a", "3": "5ca6eacc-0e24-4b69-a7d1-97cb709c82ba"}}, "__type__": "1"}, "5ca6eacc-0e24-4b69-a7d1-97cb709c82ba": {"__data__": {"text": "MUST be greater than 0.\");\n            if (!Runtime.CheckWitness(from) && !from.Equals(ExecutionEngine.CallingScriptHash)) throw new Exception(\"No authorization.\");\n            if (AssetStorage.Get(from) < amount) throw new Exception(\"Insufficient balance.\");\n            if (from == to) return true;\n\n            AssetStorage.Reduce(from, amount);\n            AssetStorage.Increase(to, amount);\n\n            OnTransfer(from, to, amount);\n\n            // Validate payable\n            if (IsDeployed(to)) Contract.Call(to, \"onNEP17Payment\", new object[] { from, amount, data });\n            return true;\n        }\n    }\n}\n```\n\n## NEP-17 changes\n\nThis section summaries NEP-17 changes compared to the previous NEP-5 protocol.  \n\n### onNEP17Payment\n\n- The Transfer method should determine if the recipient is the deployed contract, and if so, call its `onNEP17Payment` method.\n\n- The FungibleToken (NeoToken, GasToken) of the native contract calls the `onNEP17Tokens` method when transferring assets. The NonfungibleToken calls the `onNEP11Tokens` method when transferring assets.\n\n- The TokenSale contract should implement the `onNEP17Payment` method to receive assets and modify the Manifest file to trust the received asset contract.\n\n\n### name method\n\nThe name method is moved to the manifest file, and you need to add `[DisplayName(\"Token Name\")]` when writing the contract.\n\n```c#\n[DisplayName(\"Token Name\")]\n[ManifestExtra(\"Author\", \"Neo\")]\n[ManifestExtra(\"Email\", \"dev@neo.org\")]\n[ManifestExtra(\"Description\", \"This is a NEP17 example\")]\n[SupportedStandards(\"NEP-17\")]\npublic partial class NEP17 : SmartContract\n{\n    [DisplayName(\"Transfer\")]\n    public static event Action<UInt160, UInt160, BigInteger> OnTransfer;\n\n    public static string Symbol() => \"TokenSymbol\";\n\n    public static ulong Decimals() => 8;\n    \n    //\u2026\u2026\n}\n```\n\n### Transfer event\n\nThe transfer event is changed to Transfer event (first letter capitalized).\n\n### IsPayable\n\nIn Neo Legacy, you should check the IsPayable checkbox when deploying contracts to receive NEP-5 assets.\n\nIn Neo N3.x, the payable check has been removed and the corresponding logic has been placed in the `onNEP17Payment` method.\n\nThe ability of the contract to receive assets has been changed from a fixed constant to the code logic within the contract.", "doc_id": "5ca6eacc-0e24-4b69-a7d1-97cb709c82ba", "embedding": null, "doc_hash": "2b94b53bccbfba7e2a78da93dba6351c18f2811e64e3d980ff0152b8a2df26b2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep17.html"}, "node_info": {"start": 5295, "end": 7599, "_node_type": "1"}, "relationships": {"1": "4882a2fe714b9001994272f13c7e0437e1f5cb99", "2": "9767a31a-ef75-48b5-90b3-9b08d99579de"}}, "__type__": "1"}, "2a628a7f-7009-4aa5-bd43-b40d5eb3bf88": {"__data__": {"text": "# Contract Update and Destroy\n\nSmart contracts support to be updated or destroyed after release. Before you can do that you need to implement the Update and Destroy interfaces in the old contracts.\n\n## Contract Update\n\nIn some cases you want to upgrade the smart contracts deployed on the blockchain or migrate the storage of a contract into another new contract, you need to update smart contracts. Neither the contract hash nor the storage is changed when the contract is upgraded.\n\n### Implementing the Update interface\nTo enable the update function, you need to implement the `Update` method in the contract. In the contract template this method has been implemented by default, as follows:\n\n```c#\npublic static bool Verify() => IsOwner();\n\npublic static void Update(ByteString nefFile, string manifest)\n{\n    if (!IsOwner()) throw new Exception(\"No authorization.\");\n    ContractManagement.Update(nefFile, manifest, null);\n}\n```\n\nIf you want to update the contract later, you must implement the `update` method in the contract prior to deployment. For more information, refer to [Deploying and Invoking Smart Contracts](../deploy/deploy.md).\n\n### Updating the contract\n1. Get the compiled NEF file and Manifest file of the new contract ready\n\n2. Base64-encode the NEF file with the tool like [File to Base64 online](https://www.hitoy.org/tool/file_base64.php)\n\n3. Compress and escape the Manifest file with the tool like [JSON compressed and escaped online](http://www.bejson.com/zhuanyi/)\n\n4. Use the invoke command to call the update method of the contract\n\n\nFor information about invoking the contract, refer to [Invoking contracts](../deploy/invoke.md).\n\n![](../../../zh-cn/develop/assets/update.png)\n\nAfter the `update` method is executed, the contract is upgraded and neither the contract hash nor the storage area is changed.\n\n## Contract Destruction\n\nTo destroy a contract, you need to reserve the destruction method in the contract.\n\nTo use the contract destroy feature, you need to implement the destroy method in the original contract. The `destroy` method has been implemented by default in the contract template as follows.\n\n```c#\npublic static bool Verify() => IsOwner();\n\npublic static void Destroy()\n{\n    if (!IsOwner()) throw new Exception(\"No authorization.\");\n    ContractManagement.Destroy();\n}\n```\n\nThe Destroy method takes no arguments. When it is invoked, the contract and its storage, if any, are deleted. Then the contract is no longer available.\n\n\n\n", "doc_id": "2a628a7f-7009-4aa5-bd43-b40d5eb3bf88", "embedding": null, "doc_hash": "78082a511bb78482f52101aa90e5d15ff33409a5ae3734b54e9385f5cfc45729", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/update.html"}, "node_info": {"start": 0, "end": 2481, "_node_type": "1"}, "relationships": {"1": "f0f5db55d43628fda1b6a6bc1da1f95731ba83dc"}}, "__type__": "1"}, "6560115e-86a3-4bf8-ad5c-a2aa6e163af9": {"__data__": {"text": "## Using Neo-CLI\n\nThe Neo-CLI client works as a node in the P2P network and meanwhile a cross-platform wallet handling various assets transactions. \n\n### Neo-CLI Security Policies\n\n> [!Caution]\n>\n> The exchange must use a white list or firewall to block external server requests; otherwise there will be a significant security risk.\n\nNeo-CLI does not provide the function to remotely switching on/off the wallet, and it does not verify the process when opening a wallet. Therefore, exchanges should set their own security policies. The wallet must be kept open all the time to respond to the withdrawal requests of users. For security reasons, the wallets should be run in an independent server on which the firewall is configured properly, as shown below. \n\n|                    | Mainnet | Testnet |\n| ------------------ | ------- | ------- |\n| JSON-RPC via HTTPS | 10331   | 20331   |\n| JSON-RPC via HTTP  | 10332   | 20332   |\n| P2P                | 10333   | 20333   |\n| websocket          | 10334   | 20334   |\n\n### About Neo-CLI\n\nNeo-CLI is a command-line client (wallet) for developers. Developers have two ways to interact with it\uff1a \n\n- Using the CLI (command-line interface) commands. For example, you can create a wallet, generate an address, etc.\n- Using the Remote Procedure Call (RPC). For example, you can transfer to the designated address, acquire the block information of the designated height, acquire the information of the designated trade, etc.\n\nNeo-CLI provides the following features\uff1a \n\n- As a wallet, manages assets through the command-line.\n\n  To enable the wallet\uff0center the following command under the Neo-CLI directory\uff1a\n\n\n  ```\n  dotnet neo-cli.dll\n  ```\n\n  To check all the available commands, enter the following command\uff1a\n\n  ```\n  help\n  ```\n\n  For more information, refer to [CLI Command Reference](../node/cli/cli.md).\n\n- Provides a set of RPC APIs in conjunction with the RpcServer plugin to retrieve blockchain data from nodes. The interfaces are provided through  [JSON-RPC](http://www.jsonrpc.org/specification)\uff0cand the underlying communications use HTTP/HTTPS protocols.\n\n  Before you can start a node which provides RPC service, you must has the plugin RpcServer installed with Neo-CLI installation.\n\n  For more API information, refer to [API Reference](../reference/rpc/latest-version/api.md).\n\n\n- Provides transaction information of NEP-17 assets.\n\n\n### Creating a Wallet\n\nThe exchange needs to create an online wallet to manage the deposit addresses of users. A wallet is used to store the information of the accounts (both public keys and private keys) and the contracts. It is the most important proof that the user holds. Users must keep the wallet files and the wallet passwords secure. They must not lose or disclose these data. Exchanges do not have to create a wallet for every address. An online wallet usually keeps all deposit addresses of users. A cold wallet (offline wallet) is another storage option which provides better security.\n\n> [!Note]\n>\n> Neo-CLI supports wallets in two formats: the sqlite wallet (.db3) and the new [NEP6 standard](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki) wallet (.json). For exchanges the sqlite wallet is recommended.\n\nTo create a wallet, do the following\uff1a\n\n1. enter  `create wallet <path>`.\n\n   <path> is the wallet path and wallet file name. The file", "doc_id": "6560115e-86a3-4bf8-ad5c-a2aa6e163af9", "embedding": null, "doc_hash": "f36bf8db095fa4f0201dd58583e785d8a79b9b4adb6ef538e3c0e3a10614b68d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/client.html"}, "node_info": {"start": 0, "end": 3363, "_node_type": "1"}, "relationships": {"1": "735d40528fddd510f26a26dfc86f52978b7d0e8a", "3": "77455c72-ee6e-47c7-85df-3665f70f7b31"}}, "__type__": "1"}, "77455c72-ee6e-47c7-85df-3665f70f7b31": {"__data__": {"text": "  <path> is the wallet path and wallet file name. The file extension can be .db3 or .json, depending on the wallet type you are using, for example,  `create wallet /home/mywallet.db3`. If the file extension is not specified, the NEP6 format (.json) is used by default. \n\n2. Set a password for the wallet. \n\n### Generating Deposit Addresses\n\nA wallet can store multiple addresses. The exchange needs to generate a deposit address for each user. \n\nThere are two methods to generate deposit addresses: \n\n- When the user deposit (NEO/GAS) for the first time, the program dynamically generates a NEO address. The advantage is that there is no need to generate addresses at fixed time intervals, while the disadvantage is that it's not convenient for backup.\n\n  To develop the program to dynamically generate addresses, use the RpcServer API  [getnewaddress Method](../reference/rpc/latest-version/api/getnewaddress.md). The created address is returned.\n\n- The exchange creates a batch of NEO addresses in advance. When the user charges (NEO/GAS) for the first time, the exchange assigns a NEO address to him or her. The advantage is the convenience to backup the wallet, while the disadvantage is the need to generate NEO addresses manually.\n  To generate addresses in batch, run the NEO- CLI command `create address [n]`. The  addresses are exported automatically to the address.txt file.\n  [n] is optional. Its default value is 1. For example, to generate 100 addresses at a time, enter `create address 100`.\n\n\n> [!Note]\n>\n> Either way, the exchange must import the addresses into the database and distribute them to users. It is generally recommend the exchange use the second way, so as to reduce the external controls and run the wallet more stably.\n", "doc_id": "77455c72-ee6e-47c7-85df-3665f70f7b31", "embedding": null, "doc_hash": "b39484b656a188636f81033b1206955a6cb7c69bfbd88e6bc081b26abea87a85", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/client.html"}, "node_info": {"start": 3305, "end": 5055, "_node_type": "1"}, "relationships": {"1": "735d40528fddd510f26a26dfc86f52978b7d0e8a", "2": "6560115e-86a3-4bf8-ad5c-a2aa6e163af9"}}, "__type__": "1"}, "55922938-7ffb-4df7-b8d1-a582bebcce4f": {"__data__": {"text": "# Deploying Neo Nodes on Server\n\n## Install Neo client\n\n1. Install [.NET Core Runtime](https://www.microsoft.com/net/download/core#/runtime) on the server, 5.0 and the later version.\n2. From GitHub, download the [Neo-CLI](https://github.com/neo-project/neo-node/releases) program and enable the Neo node.\n\n## Install plugins\n\nSome additional functionalities are individually encapsulated in plug-ins for the purpose of improving node security, stability, and flexibility. For more information, refer to [Installing plugins](../node/cli/config.html#installing-plugins).\n\nGo to [here](https://github.com/neo-project/neo-modules/releases/) to download plugins. Exchanges need to install the following plugins to get the complete functionality of transaction log API and automatic synchronization with the offline package:\n\n- ApplicationLogs (Mandatory)\n- LevelDBStore (Preloaded)\n- RpcServer (Mandatory)\n- TokensTracker (Recommended)\n\nUnzip the plugin packages under the Neo-CLI root directory, as shown below, all the plugin files are extracted into the Plugins folder automatically. \n\n![PluginsForExchange.png](../../zh-cn/assets/PluginsForExchange.png)\n\nYou can also install plugins using CLI commands\uff1a\n\n```\ninstall ApplicationLogs\ninstall LevelDBStore\ninstall RpcServer\ninstall TokensTracker\n```\n\n> [!Note]\n>\n> - The RpcServer plug-in must be installed before you can use the TokensTracker plug-in.\n> - You must install the plugins ApplicationLogs and TokensTracker before synchronizing the Neo client, otherwise the log in the blocks synchronized before will be lost.\n\n## Modifying configuration files\n\nBefore running Neo-CLI, you need to make necessary configurations in the Neo-CLI configuration files. For more information, refer to [Configuring and Starting Neo-CLI](../node/cli/config.md).\n\n> [!Caution]\n>\n> Be cautious to enable automatic opening of wallet. Before you do that, make sure your firewall is open and safe as Password specified in the file is in clear text.\n", "doc_id": "55922938-7ffb-4df7-b8d1-a582bebcce4f", "embedding": null, "doc_hash": "a83b7a4c56850701c3ed04e2d74cfb1b66b6b8cefff7ee608d6334c91fc3ab14", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/deploynode.html"}, "node_info": {"start": 0, "end": 1979, "_node_type": "1"}, "relationships": {"1": "f511f52fbc4cc9f87a3ed5a9c3b37fb6862ecba9"}}, "__type__": "1"}, "d85bc2ac-cf03-4170-bcbe-027ec44234ef": {"__data__": {"text": "# Distributing GAS to Users\n\nThe exchange can determine whether to distribute GAS to users. GAS is used to pay to the NEO blockchain for recording and additional services. \n\n## What is GAS ?\n\nGAS represents the right to use the Neo Blockchain. Once NEO is acquired, GAS will be generated in the system following the algorithms.\n\nIn Neo N3 every time a NEO transfer transaction occurs in the address, GASs generated since last time NEO transfer transaction are claimed automatically.\n\n## Calculating the claimed GAS amount\n\nClaimed *GAS = f(neo_amount, \u0394t_const)*\n\n\u0394t_const = t_end - t_start\n-  t_end = the current time that Neo is transferred into or out of the address. \n-  t_start = the last time that Neo was transferred into or out of the address. \n\n\u0394t_const is fixed, thus the claimed Gas is of a fixed amount too. And this amount depends on the amount of Neo held by the user and the duration between the moments that the user transferred this amount of Neo into and out of his or her address. \n\n## Distributing GAS to Users\n\nSuppose all the exchange addresses are stored in one wallet, the following chart demonstrates the procedure and computational formula how the exchange distributes GAS to the user A.\n\n\n![gasflow_en](../develop/assets/gasflow_en.png)\n\nThe shorter the snapshot interval, the more precise the calculation is. If the snapshot interval is not uniform, use the weighted average calculation method.\n\n> [!Note]\n>\n> In NEO N3, since exchange users cannot participate in voting, the fixed income is 10% of the total amount of GAS to be claimed. For details refer to [GAS distribution rule](https://docs.neo.org/docs/zh-cn/basic/governance.html#gas-%E5%88%86%E9%85%8D%E8%A7%84%E5%88%99).\n\n## RPC methods\n\nThe following RPC method can be used to help exchanges query users' GAS information. For details, click the desired method link in the table below. \n\n| Method                                                       | Description                                             |\n| ------------------------------------------------------------ | ------------------------------------------------------- |\n| [getunclaimedgas](../reference/rpc/latest-version/api/getunclaimedgas.md) | Returns the unclaimed GAS amount in the current wallet. |\n\n## Claiming GAS\n\nGAS is claimed automatically after the user transfers NEO in or out of the address. For example, suppose you have NEO in address A without claiming GAS, when you transfer NEO to yourself (i.e. address A) then GAS is claimed automatically.\n\nThe following table lists the GAS claiming steps and corresponding commands.\n\n| #    | Steps                                                        | Command                                         |\n| ---- | :----------------------------------------------------------- | ----------------------------------------------- |\n| 1    | Run Neo-CLI                                                  | `dotnet", "doc_id": "d85bc2ac-cf03-4170-bcbe-027ec44234ef", "embedding": null, "doc_hash": "4abf987e2b132569bbb89d80f205defefacc426256764f0211d18787a265c6da", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/gas.html"}, "node_info": {"start": 0, "end": 2916, "_node_type": "1"}, "relationships": {"1": "ed76af1c7743556b464d363037967b0b46ac677d", "3": "4ed039a3-7945-4b1d-b365-7462b6d4de61"}}, "__type__": "1"}, "4ed039a3-7945-4b1d-b365-7462b6d4de61": {"__data__": {"text": "                | `dotnet neo-cli.dll`                            |\n| 2    | Check the client version                                     | `version`                                       |\n| 3    | Check the synchronized height of the client ( Height: height/header height, Nodes: amount of connected nodes). | `show state`                                    |\n| 4    | Open a wallet                                                | `open wallet /home/NeoNode/test.json`           |\n| 5    | Check the addresses and assets in the wallet                 | `list asset`                                    |\n| 6    | Check the GAS balance in the wallet                          | `show gas`                                      |\n| 7    | Transfer NEO to your address\uff08e.g. NTdzVdQ8SmFobD1XWCA1fR9tQr7gFv1SXf\uff09 to claim the GAS automatically. | `send neo NTdzVdQ8SmFobD1XWCA1fR9tQr7gFv1SXf 1` |\n| 8    | Check the asset balance again.                               | `list asset`                                    |\n\n", "doc_id": "4ed039a3-7945-4b1d-b365-7462b6d4de61", "embedding": null, "doc_hash": "64b958b5998a30934388c90c8eba8aacf4536c3067e000a4c838ceb429245ecd", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/gas.html"}, "node_info": {"start": 2891, "end": 3905, "_node_type": "1"}, "relationships": {"1": "ed76af1c7743556b464d363037967b0b46ac677d", "2": "d85bc2ac-cf03-4170-bcbe-027ec44234ef"}}, "__type__": "1"}, "2e9e1614-a3b4-4dd5-9b22-a80789049c55": {"__data__": {"text": "# Introduction\n\nThis document is intended to guide exchange developers to set up Neo nodes on the exchange server and complete necessary programing tasks for Neo assets transactions. \n\nThis document contains the following topics\uff1a\n\n- [Deploying Neo nodes on server](deploynode.md)\n- [Using Neo-CLI to create wallets and deposit addresses](client.md)\n- [Dealing with asset transactions](transaction.md)\n- [Distributing GAS to users](gas.md)\n\n> [!Note]\n>\n> Different versions of Neo-CLI are different in ways of interfacing with exchanges. Please note the version behavior differences before upgrading your client version.\n\n", "doc_id": "2e9e1614-a3b4-4dd5-9b22-a80789049c55", "embedding": null, "doc_hash": "4b6d0715c398ade4b20e2233a654b8024033da5f1ef4986501a8fb1e7503549b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/general.html"}, "node_info": {"start": 0, "end": 621, "_node_type": "1"}, "relationships": {"1": "bea39f524f33c090c079450175271269a59c92c9"}}, "__type__": "1"}, "b2ea520c-b2dc-4885-9b38-08ad14c9fcbc": {"__data__": {"text": "# Dealing with Asset Transactions\n\n## Overview\n\nNeo N3 has only one type of digital assets, i.e. NEP-17 assets, which are managed by BALANCE. The exchanges mainly deal with user balance queries,  deposits, withdrawals, and other operations of this type assets.\n\nFollowing flow charts show the work processes of these operations:\n\n![](assets/query.png)\n\n![](assets/deposit.png)\n\n![](assets/withdraw.png)\n\n## Network fee\n\nThe network fee, as a reward for the consensus nodes generating blocks, is charged when the user submits a transactions to Neo blockchain. There is a  base fee for each transaction and the calculation formula is shown below. The transaction is only executed if the fee paid by the user is greater than or equal to the base fee; otherwise, the transaction will be treated as invalid.  \n\n```\nNetworkFee = VerificationCost + tx.size * FeePerByte\n```\n\n- VerficationCost: Fees for instructions executed by NeoVM to verify transaction signatures.\n- tx.size: The transaction data byte length\n- FeePerByte: Transaction fee per byte, currently defined as 0.00001 GAS in PolicyContract.\n\n## System fee\n\nThe system fee is charged for the instructions executed by NeoVM. For each instruction fee refer to [System Fee](../reference/fees.md). The total system fee you need to pay depends on the number and type of the instructions executed by your smart contract. The following figure shows the calculation formula:\n\n```\nSystemFee = InvocationCost = The sum of all executed opcode fee\n```\n\n### **Instructions fee**\n\nIn Neo N3, NeoVM instructions fee has decreased to 1/1000 of the original fee in Neo Legacy, which significantly reduces the development cost. \n\nIn comparison with Neo Legacy: \n\n![netfee](../../zh-cn/exchange/assets/feecomparewith2x.png)\n\n## Dealing with query transactions\n\nThe way for a exchange itself to query balance of the user deposit address is different than the way it deal with the user's request of balance querying. \n\n### Querying the user deposit address balance\n\nThe exchange needs to do the following:\n\n1. Construct JSON files to invoke either of the following RPC methods:\n   - getnep17balances (Plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases/) is required)\n   - invokefunction (Plugin [RpcServer](https://github.com/neo-project/neo-modules/releases/) is required)\n2. Send a `getnep17balances` request to the Neo RPC server to get the asset hash and amount.\n3. Send the invokefunction requests twice to the Neo RPC server to get the corresponding asset symbol and decimals, respectively.\n4. Calculate the user balance according to the returned values.\n\nTo query the balance of an asset for a particular user, use `invokefunction` to call the `balanceOf` method of asset.\n\n#### Invoking getnep17balances to query\n\nIn JSON, a general getnep17balances request body is in the following form: \n\n```json\n{\n\"jsonrpc\": \"2.0\",\n\"method\": \"getnep17balances\",\n\"params\": [\"NVfJmhP28Q9qva9Tdtpt3af4H1a3cp7Lih\"],\n\"id\": 1\n}\n```\n\nAfter sending the request you will get the following response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"balance\": [\n            {\n                \"asset_hash\":", "doc_id": "b2ea520c-b2dc-4885-9b38-08ad14c9fcbc", "embedding": null, "doc_hash": "98db6d39148bb85ee2c8887474bd12fd4b007e9ec0c14ac7b4c31f3ac5a1dc7f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 0, "end": 3169, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "3": "b59d68b7-6b08-4569-b0f7-d3b046612a2d"}}, "__type__": "1"}, "b59d68b7-6b08-4569-b0f7-d3b046612a2d": {"__data__": {"text": "              \"asset_hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n                \"amount\": \"2\",\n                \"last_updated_block\": 52675\n            },\n            {\n                \"asset_hash\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n                \"amount\": \"700000000\",\n                \"last_updated_block\": 52675\n            }\n        ],\n        \"address\": \"NVfJmhP28Q9qva9Tdtpt3af4H1a3cp7Lih\"\n    }\n}\n```\n\nAs we can see in the request above, there are two kinds of assets which hashes are \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\" and \"0xd2a4cff31913016155e38e474a2c06d08be276cf\". Now we need to call invokefunction to get symbol and decimals of the asset, which will be elaborated below.\n\nIn the example above the asset A symbol is NEO, decimals is 0, and the user A balance is 2 NEO.  For the asset B, its symbol is GAS, decimals is 8, and the balance is 700000000/10\u2078 GAS (7 GAS).\n\n#### Invoking invokefunction to query\n\nIn JSON, a general invokefunction request body is in the following form: \n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"script hash\",\n    \"method name\",\n    [\n      {\n        \"optional arguments\"\n      }\n    ]\n  ],\n  \"id\": 1\n}\n```\n\nYou need to replace these strings when querying the user's balance:\n\n- script hash\n\n  The script hash of the NEP-17 asset you are querying. For example:\n  \n  - NEO is *0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5*\n  - GAS is *0xd2a4cff31913016155e38e474a2c06d08be276cf*\n\n\n- method name\n\n  The name of the method you are invoking. To query the user's balance, you need to invoke these three methods:\n\n  **balanceOf**\n\n  - Syntax: `public static BigInteger balanceOf(byte[] account)`\n  - Remarks: \"balanceOf\" returns the token balance of the '''account'''.\n\n  **decimals**\n\n  - Syntax: `public static byte decimals()`\n  - Remarks: \"decimals\" returns the number of decimals used by the token.\n\n  **symbol**\n\n  - Syntax: `public static string symbol()`\n  - Remarks: \"symbol\" returns the token symbol.\n\n\n- optional arguments\n\n  Optional. If the method you are invoking requires arguments, you can pass them by constructing these parameters into an array. For example, \"balanceOf\" in NEP-17 returns the token balance of the \"account\":\n\n  `public static BigInteger balanceOf(byte[] account)`\n\n  So you need to pass the account as an argument in the \"balanceOf\" method.\n\n##### Example\n\n##### **Invoking balanceOf**\n\nSuppose the account address is", "doc_id": "b59d68b7-6b08-4569-b0f7-d3b046612a2d", "embedding": null, "doc_hash": "bf3aaf4db92064ac8d2e95b7d436b5bdaf46e840689e02509dc99d310466a0e1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 3157, "end": 5611, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "b2ea520c-b2dc-4885-9b38-08ad14c9fcbc", "3": "92860a34-7f82-444b-bad5-ee24a84516fc"}}, "__type__": "1"}, "92860a34-7f82-444b-bad5-ee24a84516fc": {"__data__": {"text": "Example\n\n##### **Invoking balanceOf**\n\nSuppose the account address is NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag, you need to convert it into Hash160 type and construct this parameter as a JSON object:\n\n```json\n{\n    \"type\": \"Hash160\",\n    \"value\": \"0x762f8a2bf0e8673c64cc608ba69b9c2a946a188f\"\n}\n```\n\nThen you can construct the JSON message as the following:\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n    \"balanceOf\",\n    [\n      {\n        \"type\": \"Hash160\",\n        \"value\": \"0x762f8a2bf0e8673c64cc608ba69b9c2a946a188f\"\n      }\n    ]\n  ],\n  \"id\": 3\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"DBSPGGqUKpybpotgzGQ8Z+jwK4ovdhHAHwwJYmFsYW5jZU9mDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"2028330\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"1938845793634190\"\n            }\n        ]\n    }\n}\n```\n\nTo get the balance divide the returned value by decimals, without needing of data conversion.\n\n##### **Invoking decimals**\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n    \"decimals\",\n    []\n    ],\n  \"id\": 2\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"wh8MCGRlY2ltYWxzDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"984060\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"8\"\n            }\n        ]\n    }\n}\n```\n\nIt returns integer", "doc_id": "92860a34-7f82-444b-bad5-ee24a84516fc", "embedding": null, "doc_hash": "c5186a375167a1ab011820973404760daa34ddadb9cab1ac3e3ab5f2cd47c1be", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 5562, "end": 7423, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "b59d68b7-6b08-4569-b0f7-d3b046612a2d", "3": "2598eae3-3d4b-4974-8aab-22f7d880465e"}}, "__type__": "1"}, "2598eae3-3d4b-4974-8aab-22f7d880465e": {"__data__": {"text": "   ]\n    }\n}\n```\n\nIt returns integer 8.\n\n##### **Invoking symbol**\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n    \"symbol\",\n    []\n  ],\n  \"id\": 3\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"wh8MBnN5bWJvbAwUz3bii9AGLEpHjuNVYQETGfPPpNJBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"984060\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"R0FT\"\n            }\n        ]\n    }\n}\n```\n\nIt returns \"R0FT\" which can be decoded to \"GAS\".\n\n##### **Calculating the User Balance**\n\nAccording to all the returned values,  we can calculate the user balance as follows:\nThe balance = return / 10<sup>decimals</sup>\n\n### Dealing with users' queries\n\nThe actual user balance in the exchange is recorded in the exchange database. The exchange needs to write programs to monitor each transaction of each block, record all deposits and withdrawals transactions in the database, and modify the user balance in the database accordingly.\n\n## Dealing with User Deposits\n\nTo get the user deposits information the exchange needs to do the following:\n\n1. Get each block details using the `getblock` API, including details of all the transactions in the block.\n2. Invoke the `getapplicationlog` API to get the details of each \"InvocationTransaction\" transaction and analyze the transaction content to complete the user deposit.\n\n### Invoking getapplicationlog\n\nThis API is used to get transaction information.\n\nAfter correctly installing the ApplicationLogs plug-in and starting the neo-cli node, you can find a folder \"ApplicationLogs\" is generated under the root path. The complete contract log is recorded in this directory, and each NEP-17 transaction is recorded in a leveldb file.\n\nThe following shows an example of the API invoking result. \n\n```JSON\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"txid\": \"0xd9aaa1243cae91e063a140239807a9de45f82850130ec36403f44770955dd2d7\",\n        \"trigger\": \"Application\",\n        \"vmstate\": \"HALT\",\n        \"gasconsumed\": \"11819770\",\n        \"stack\": [],\n        \"notifications\": [\n            {\n                \"contract\": \"0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\",\n                \"eventname\": \"Transfer\",\n               ", "doc_id": "2598eae3-3d4b-4974-8aab-22f7d880465e", "embedding": null, "doc_hash": "8fe5ba76863ca571c2ade61bd5bd29320b06e4a60aedb8f2b03ae807dc4e5fc8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 7460, "end": 9911, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "92860a34-7f82-444b-bad5-ee24a84516fc", "3": "98e4f1c6-87ff-4879-b5a3-4438e532e472"}}, "__type__": "1"}, "98e4f1c6-87ff-4879-b5a3-4438e532e472": {"__data__": {"text": "\"Transfer\",\n                \"state\": {\n                    \"type\": \"Array\",\n                    \"value\": [\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\"\n                        },\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"7ztGBn8vR7L38EQqojcghdCHCO8=\"\n                        },\n                        {\n                            \"type\": \"Integer\",\n                            \"value\": \"800000000000\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n> [!Note]\n>\n> This example shows the log of a successful token transfer, however, in case of a failed transfer or NeoVM exception, the outcomes can be:\n>\n> - Failed transfer: no Transfer notification event is returned, execution ends in a `HALT` state with a stack value of `False`.\n> - NeoVM exception: a Transfer notification event may or may not be returned, but execution ends in a `FAULT` state.\n\nThe parameters related to a transaction in the file are the following:\n\n- **contract**: the script hash of smart contract. For exchanges, it is the script hash of NEP17 assets type and the unique identity of the asset. For example, here \"0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\" is the NEP17 asset script hash.\n\n- **eventname**: the event identifier of smart contact. Exchanges only need to listen on \u201ctransfer\u201d transactions to find out users' transfer transactions. There may be more than one eventname in the Notifications array, and only those with the Transfer keyword are NEP17 Transfer data.\n\n- **state**: The objects included in the array are:\n\n  - from account: The first object in the array is the account address where the asset is transferred from. Its type \"bytearray\" and the value \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\u201c can be  decoded to \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\" with base64. \n\n    > [!Note]\n    >\n    > In Neo, hexadecimal strings are processed in big-endian order if they are preceded by 0x, or little-endian", "doc_id": "98e4f1c6-87ff-4879-b5a3-4438e532e472", "embedding": null, "doc_hash": "b14286ed271a6619a47dbc2edf8144b322f010f23f05c554b59a7e035d4ac50a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 9927, "end": 12038, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "2598eae3-3d4b-4974-8aab-22f7d880465e", "3": "a418d0e7-5c48-4ae6-8e53-4908656218cd"}}, "__type__": "1"}, "a418d0e7-5c48-4ae6-8e53-4908656218cd": {"__data__": {"text": "big-endian order if they are preceded by 0x, or little-endian order if they are not.\n    \n    ```json\n    {\n    \"type\": \"ByteString\",\n      \"value\": \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\"\n    }\n    ```\n    \n  - to account: The second object in the array is the account address where the asset is transferred to.  Its type \"bytearray\" and the value \"7ztGBn8vR7L38EQqojcghdCHCO8=\u201c can be decoded to \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\" with base64. If the address is an exchange account address, it is a deposit transaction.\n  \n    ```json\n    {\n  \"type\": \"ByteString\",\n      \"value\": \"7ztGBn8vR7L38EQqojcghdCHCO8=\"\n  }\n    ```\n  \n  - amount: The last object in the array is the transfer amount, which value is 800000000000. Since the decimal is 8 bit the value is actually 8000.00000000.\n  \n    ```\n    {\n      \"type\": \"Integer\",\n      \"value\": \"800000000000\"\n    }\n    ```\n    \n\n> [!Note]\n>\n> Regarding the data format conversion of the transfer in the file, you can refer to [Neo3 data conversion](https://neo.org/converter/index).\n\n## Dealing with User Withdrawals\n\nThe exchange can choose one of the following way to send assets to users: \n\n- Neo-CLI command: `send`\n- RPC method: `sendfrom`\n- RPC method: `sendtoaddress`\n- RPC method: `sendmany`\n\n### Neo-CLI Command: send\n\n##### Syntax\n\n`send <id|alias> <address> <amount>|all [from=null] [signerAccounts=null]`\n\n##### Parameters\n\n- `id|alias`: asset ID or asset abbreviations, e.g. neo, gas\n- `address`: address to transfer assets to\n- `amount|all`: transfer amount\n- `from`: address to transfer assets from\n- `signerAccounts`: signer's address\n\n\nThis command verifies the wallet password. \n\n##### Example\n\nTransfer 100 Neo to the address NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag: \n\n```\nneo> send a1760976db5fcdfab2a9930e8f6ce875b2d18225 NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag 100\npassword: ********\nTXID: 0x8f831d8de723093316c05749a053a226514bc06338b2bceb50db690610e0b92f\n```\n\nIf you are not sure of the asset ID, you can enter `list asset` to view all assets in the wallet.\n\nIn above example, we can also replace the asset ID with asset abbreviation, as shown below:\n\n```\nneo> send gas NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag 100\npassword: ********\nTXID: 0xae0675797c2d738dcadb21cec3f1809ff453ac291046a05ac679cbd95b79c856\n```\n\n### RPC Method: openwallet\n\n> [!Note]\n>\n> Before you can invoke any of the wallet-related RPC methods you must invoke the method `openwallet` first.\n\nThe key \"params\" includes an array of two", "doc_id": "a418d0e7-5c48-4ae6-8e53-4908656218cd", "embedding": null, "doc_hash": "4f973392a9ebcecce178fce8bb0ffe5a68b941b839fe94cf056dbe7b714d17c9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 11999, "end": 14452, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "98e4f1c6-87ff-4879-b5a3-4438e532e472", "3": "a2193892-991b-4dc7-9248-fda1b778c6b1"}}, "__type__": "1"}, "a2193892-991b-4dc7-9248-fda1b778c6b1": {"__data__": {"text": "the method `openwallet` first.\n\nThe key \"params\" includes an array of two parameters.\n\n`\"params\":[path\uff0c password]`\n\nFor example, to open the wallet `a.json` with a password `111111`, you can construct a JSON file as follows and send it to RPC server.\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"openwallet\",\n  \"params\": [\"a.json\", \"111111\"],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}\n\n```\n\n### RPC Method: sendfrom\n\nThe key \"params\" includes an array of four parameters.\n\n`\"params\":[script hash, address from, address to, amount]`\n\nFor example, to send 10 NEO from NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o to  Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z, construct a JSON file as follows and send it to RPC server.\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendfrom\",\n  \"params\": [\"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\", 10],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x2dad82755c3b3e3233c10a49402bea9b8bb3f43b079102bbc3c5a50c3b522137\",\n        \"size\": 264,\n        \"version\": 0,\n        \"nonce\": 1073258915,\n        \"sender\": \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        \"sysfee\": \"9007990\",\n        \"netfee\": \"1264390\",\n        \"validuntilblock\": 2107189,\n        \"attributes\": [\n            {\n                \"type\": \"Cosigner\",\n                \"account\": \"0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"script\": \"GgwU7ztGBn8vR7L38EQqojcghdCHCO8MFLl7Ss1/gg9h0tTU+a6l61BJjd9VE8AMCHRyYW5zZmVyDBQlBZ7LSHjTqHX5HFHO3tMw1Fdf3kFifVtSOA==\",\n        \"witnesses\": [\n            {\n          ", "doc_id": "a2193892-991b-4dc7-9248-fda1b778c6b1", "embedding": null, "doc_hash": "91674542eb239f4a44c5a2784c7b288feb99cef0a7e52cf8ce3c0c1c121b8380", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 14442, "end": 16321, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "a418d0e7-5c48-4ae6-8e53-4908656218cd", "3": "7f41c9f6-8589-42fe-9188-cf58151ffba0"}}, "__type__": "1"}, "7f41c9f6-8589-42fe-9188-cf58151ffba0": {"__data__": {"text": "        {\n                \"invocation\": \"DEBL7Fxz2ZyIgtz+kESSs8YjbJd5dcc13gpxOwrLjU+WiIa0fuFQSgHXM75S1Z21wDMvEirUHpU1rIYylfnQH6Ul\",\n                \"verification\": \"DCECTLb+CYh0tAkrQbRliAmdLaB5NLR0FqIWxgiCPlnz/B4LQZVEDXg=\"\n            }\n        ]\n    }\n}\n```\n\n### RPC Method: sendtoaddress\n\nThe key \"params\" includes an array of three parameters. \n\n`\"params\":[script hash, address, amount]`\n\nFor example, to send 1000 GAS to Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z , construct a JSON file as follows and send it to RPC server.\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendtoaddress\",\n  \"params\": [\"0x70e2301955bf1e74cbb31d18c2f96972abadb328\", \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\", 1000],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xda4de7d6fc3bcd0eba51a3dcba01eaba7d59467acf91525c5f3f0b56df06aec8\",\n        \"size\": 272,\n        \"version\": 0,\n        \"nonce\": 1325103139,\n        \"sender\": \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        \"sysfee\": \"9007990\",\n        \"netfee\": \"1272390\",\n        \"validuntilblock\": 2107253,\n        \"attributes\": [\n            {\n                \"type\": \"Cosigner\",\n                \"account\": \"0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"script\": \"AwDodkgXAAAADBTvO0YGfy9HsvfwRCqiNyCF0IcI7wwUuXtKzX+CD2HS1NT5rqXrUEmN31UTwAwIdHJhbnNmZXIMFLyvQdaEx9StbuDZnalwe50fDI5mQWJ9W1I4\",\n        \"witnesses\": [\n            {\n                \"invocation\":", "doc_id": "7f41c9f6-8589-42fe-9188-cf58151ffba0", "embedding": null, "doc_hash": "9103309dc104e2799e3bfc2efc0a62ddb9e04e22cea7f7071cb46365da0ace37", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 16383, "end": 17961, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "a2193892-991b-4dc7-9248-fda1b778c6b1", "3": "57711c24-7dd1-433c-9839-020d9178f859"}}, "__type__": "1"}, "57711c24-7dd1-433c-9839-020d9178f859": {"__data__": {"text": "               \"invocation\": \"DEBd+BDi7LWMQ5zzWxmzvH9zsO9fRZpdqn9SqnyEfSzazVnFsUlDJG7ik79epcqpF+IWGQJM1lS1oDeI4Eh/Yq04\",\n                \"verification\": \"DCECTLb+CYh0tAkrQbRliAmdLaB5NLR0FqIWxgiCPlnz/B4LQZVEDXg=\"\n            }\n        ]\n    }\n}\n```\n\n### RPC Method: sendmany\n\nThe key \"params\" includes an array of at least two parameter:\n\n`\"params\":[address from(optional), []]`\n\nFor example, to send 100 NEO and 1000 GAS to Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z  from NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o, you can construct a JSON file as follows and send it to RPC server.\n\nRequest Body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"sendmany\",\n    \"params\": [\n    \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        [\n            {\n                \"asset\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"value\": 100,\n                \"address\": \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\"\n            },\n            {\n                \"asset\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"value\": 1000,\n                \"address\": \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\"\n            }\n        ]\n    ],\n    \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xea4564840441713481363ffc0b3e2df95e5319af4d5da4189603c2333d6702f5\",\n        \"size\": 358,\n        \"version\": 0,\n        \"nonce\": 93745276,\n        \"sender\": \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        \"sysfee\": \"18015980\",\n        \"netfee\": \"1358390\",\n        \"validuntilblock\": 2107284,\n        \"attributes\": [\n            {\n        ", "doc_id": "57711c24-7dd1-433c-9839-020d9178f859", "embedding": null, "doc_hash": "b18d885a4941c150881fd54ce28e9b59fabe6e61672e7e09a5d97cdec05c7c0c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 17951, "end": 19565, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "7f41c9f6-8589-42fe-9188-cf58151ffba0", "3": "6f559d62-abda-4e4e-8478-84c7a40f9205"}}, "__type__": "1"}, "6f559d62-abda-4e4e-8478-84c7a40f9205": {"__data__": {"text": "          {\n                \"type\": \"Cosigner\",\n                \"account\": \"0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"script\": \"AGQMFO87RgZ/L0ey9/BEKqI3IIXQhwjvDBS5e0rNf4IPYdLU1PmupetQSY3fVRPADAh0cmFuc2ZlcgwUJQWey0h406h1+RxRzt7TMNRXX95BYn1bUjgDAOh2SBcAAAAMFO87RgZ/L0ey9/BEKqI3IIXQhwjvDBS5e0rNf4IPYdLU1PmupetQSY3fVRPADAh0cmFuc2ZlcgwUvK9B1oTH1K1u4NmdqXB7nR8MjmZBYn1bUjg=\",\n        \"witnesses\": [\n            {\n                \"invocation\": \"DEA1J31Wq9CS6s7Zyzv71jS/LXbJroKgzMhTk176KaCNDBIas5kqBgsv0hHVxetxdwnapXU7Cui/9PlHr3fZNPf3\",\n                \"verification\": \"DCECTLb+CYh0tAkrQbRliAmdLaB5NLR0FqIWxgiCPlnz/B4LQZVEDXg=\"\n            }\n        ]\n    }\n}\n```\n\n## See Also\n\n[NEP17 Token Standard](https://github.com/neo-project/proposals/blob/nep-17/nep-17.mediawiki)\n\n[Neo3 Data Conversion](https://neo.org/converter/index)\n", "doc_id": "6f559d62-abda-4e4e-8478-84c7a40f9205", "embedding": null, "doc_hash": "8faed5ce6cea80364b9b555b1b942039fe1f4584676e0cff967b77d3975f0764", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}, "node_info": {"start": 19558, "end": 20459, "_node_type": "1"}, "relationships": {"1": "0548048c629300181a159f3493bddc5618b16567", "2": "57711c24-7dd1-433c-9839-020d9178f859"}}, "__type__": "1"}, "d11e1765-90a8-4706-ab19-6c621f101a66": {"__data__": {"text": "# Deploying and invoking contract\n\nIn the previous section we have compiled an NEP17 contract file (NEP17.nef) and contract descriptive file (NEP17.manifest.json), next we will move on to deployment and invocation of the contract with Neo-CLI.\n\n## Deploying contract\n\nIn Neo-CLI, input the deploy command  `deploy <nefFilePath> [manifestFile]` , for example:\n\n```bash\ndeploy NEP17.nef\n```\n\nOr\n\n```bash\ndeploy NEP17.nef NEP17.manifest.json\n```\n\nAfter the command is executed, the NEP17 contract is deployed and the related fee is charged by the system automatically.\n\n```bash\nneo> deploy NEP17.nef\nScript hash: 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26\nGas: 10.1477624\n\nSigned and relayed transaction with hash=0xe03aade81fb96c44e115a1cc9cfe984a9df4a283bd10aa0aefa7ebf3e296f757\n```\n\nFor more information, refer to [Deploying Smart Contracts](../develop/deploy/deploy.md).\n\n## Invoking contract\n\nNow we can invoke the contract using the Neo-CLI command `invoke`:\n\n```bash\ninvoke <scriptHash> <operation> [contractParameters=null] [witnessAddress=null]\n```\n\nFor example:\n\n```bash\ninvoke 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26 symbol\n```\n\nAfter executed successfully, the following information is printed\uff1a\n\n```bash\nInvoking script with: '10c00c046e616d650c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0103609\nEvaluation Stack: [{\"type\":\"ByteArray\",\"value\":\"VG9rZW5TeW1ib2w=\"}]\n\nrelay tx(no|yes):\n```\n\nWhere:\n\n- VM State: `HALT` indicates the vm executed successfully;  `FAULT` indicates the vm exited during execution due to an exception.\n- Evaluation Stack: the result of contract execution, where the value is encoded with Base64 when it is a string or ByteArray.\n- You can do the data format conversion [here](https://neo.org/converter/) `VG9rZW5TeW1ib2w=` => `TokenSymbol`\n\nFor more information, refer to [Invoking Smart Contracts](../develop/deploy/invoke.md).\n", "doc_id": "d11e1765-90a8-4706-ab19-6c621f101a66", "embedding": null, "doc_hash": "a7ccda810bee1d9981ce99a968835849d32b5878bcb2aa85f71d21ff362b2d5b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/deploy.html"}, "node_info": {"start": 0, "end": 1907, "_node_type": "1"}, "relationships": {"1": "5bf1cf88b972cc6feb32ad12a20e5319e68644a1"}}, "__type__": "1"}, "be6e5071-23a0-4002-adff-570a626b070e": {"__data__": {"text": "# Developing a contract\n\nWe have completed setting up the private chain and configuring the node. In this section we will walk you through configuring the environment, writing, and compiling an NEP17 contract using C#.\n\nThe following steps are applicable to multiple system platforms, such as Windows, macOS, and Ubuntu.\n\n## Installing tools\n\n1. Download and install [Visual Studio Code](https://code.visualstudio.com/Download)\n\n2. Download and install [.NET 6.0 SDK](https://dotnet.microsoft.com/download)\n\n3. Run the command line and enter the following command to check if you have installed SDK successfully. \n\n   ```powershell\n   dotnet --list-sdks\n   ```\n\n   If there is no issue the SDK version number is displayed.\n\n## Installing contract template\n\n[Neo3.SmartContract.Templates](https://www.nuget.org/packages/Neo3.SmartContract.Templates/) contains the latest contract compiler and a hello contract template. The latest version is recommended\uff1a\n\n```powershell\ndotnet new -i Neo3.SmartContract.Templates\n```\n\n## Creating a contract project\n\n1. Create a folder named `Nep17` as the contract project\u3002\n\n2. In the command line go to the `Nep17` path and then enter the command to generate code files based on the template.\n\n   ```powershell\n    dotnet new neo3-contract\n   ```\n   \n   You can find the files named by the folder name under `Nep17` directory: Nep17.cs and Nep17.csproj.\n   \n   If you want to specify the file name, add the option -n, for example, `dotnet new neo3-contract -n tokenA`.\n\n## Editing NEP17 code\n\nSince many developers are concerned about how to publish their own contract assets on the Neo block chain, now let's proceed with the NEP17 contract development on private chain.\n\n1. Download all the .cs files from [NEP17 Template](https://github.com/neo-project/examples/tree/master/csharp/NEP17) and place them under the  `Nep17` directory.\n\n2. Remove the original Nep17.cs generated by the HelloContract template.\n\n3. Run VS Code and install the C# extension as prompted.\n\n   ![](../../zh-cn/gettingstarted/assets/extension.png)\n\n4. Open the `Nep17` folder to edit the Nep17 template\u3002\n\nIn comparison with Neo Legacy, the Neo N3 NEP17 sample has the following changes:\n\n- Added the customized attributes above the smart contract class\n\n  ```\n  [DisplayName(\"Token Name\")] \n  [ManifestExtra(\"Author\", \"Neo\")] \n  [ManifestExtra(\"Email\", \"dev@neo.org\")] \n  [ManifestExtra(\"Description\", \"This is a NEP17 example\")] \n  [SupportedStandards(\"NEP-17\")] \n  [ContractPermission(\"*\", \"onNEP17Payment\")] \n  public class NEP17 : SmartContract \n  \u2026\u2026 \n  ```\n\n- Removed the Name method\n\n- Added _deploy method, which will be executed immediately after the contract is deployed\n\n- Added the Update and Destroy methods\n\n- All the Crowdsale methods are in the NEP17.Crowdsale.cs file. Developers can choose to use this file if need be.\n\n- Called the onNEP17Payment method of the recipient in the Transfer method\n\n- Implemented onNEP17Payment to automatically execute the smart contract when NEP17 assets are received.\n\n- Major changes occurred in smart contract framework. For details refer to [Smart Contract API](https://docs.neo.org/docs/en-us/reference/scapi/interop.html)\n\nFor more information refer to [NEP-17](https://docs.neo.org/docs/en-us/develop/write/nep17.html) .\n\n##", "doc_id": "be6e5071-23a0-4002-adff-570a626b070e", "embedding": null, "doc_hash": "5c962e4006460dd8f079d7ff80f3556c209c77f37e52e9a4fd3eb498f0a4b018", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/develop.html"}, "node_info": {"start": 0, "end": 3291, "_node_type": "1"}, "relationships": {"1": "7b96b3a91d8e9e8b32ae0f8d17d0abab970b0750", "3": "13ea593f-4510-4b72-91a6-cdae5b743fb7"}}, "__type__": "1"}, "13ea593f-4510-4b72-91a6-cdae5b743fb7": {"__data__": {"text": ".\n\n## Compiling contract file\n\nRun the following command to build your contract\uff1a\n\n```powershell\ndotnet build\n```\n\nRelated contract files are outputted under `bin\\sc` path in the contract project directory.\n\n## See also\n\nFor more information about writing contracts, refer to [Basics](../develop/write/basics.md).\n\nFor information about differences between Neo N3 and Neo Legacy contracts, refer to [Differences than Neo Legacy](../develop/write/difference.md)\n\n", "doc_id": "13ea593f-4510-4b72-91a6-cdae5b743fb7", "embedding": null, "doc_hash": "d00d66b8e20779dd42fde5485e13fdf3022280f519b27158375eec7e6b87fe12", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/develop.html"}, "node_info": {"start": 3286, "end": 3747, "_node_type": "1"}, "relationships": {"1": "7b96b3a91d8e9e8b32ae0f8d17d0abab970b0750", "2": "be6e5071-23a0-4002-adff-570a626b070e"}}, "__type__": "1"}, "4cffac4e-e52f-44cf-84c6-9efc09aabf2a": {"__data__": {"text": "# Setting up local network\n\n## Setting up a private chain\n\nNeo provides a test net for development, debugging and testing purposes. Besides, you can also choose to set up your own private chain where you can get more flexibility with plenty of test tokens. You can pick one of the following options:\n\n- [Set up a private chain with one node](../develop/network/private-chain/solo.md)\n- [Set up a private chain with multiple nodes](../develop/network/private-chain/private-chain2.md)\n\nRefer to the instructions from above links to set up your private chain and withdraw NEO and GAS from genesis block.\n\n## Preparing a wallet file\n\nNow let's create a new wallet file used for deploying smart contracts:\n\n1. Create a new wallet file named 0.json and copy the default address for later use.\n2. Open the wallet where you have withdrawn NEO and GAS from genesis block, transfer all the assets in the wallet to 0.json and wait for the transaction to be confirmed.\n3. Open 0.json to check if the assets are received.\n\n", "doc_id": "4cffac4e-e52f-44cf-84c6-9efc09aabf2a", "embedding": null, "doc_hash": "f2346a3d145924082ea6d31ae1754545f6064820f097128c447be990ea8c6924", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/enviroment.html"}, "node_info": {"start": 0, "end": 1010, "_node_type": "1"}, "relationships": {"1": "3e33209cf119a9713609610a7bd2b2b4fd17ba4e"}}, "__type__": "1"}, "7ee159a4-6f11-4deb-b56a-719bd8f94f02": {"__data__": {"text": "# Before You Begin\n\nIn this tutorial, we will work you through an example of how to release an NEP17 asset on Neo blockchain, which includes the tasks of setting up and configuring the development environment, compiling, deploying and invoking the smart contract on a private Neo chain.\n\n## System environment\n\nYou are recommended to run Neo-CLI in the following environments that we have tested:\n\n- Windows 10\n- Ubuntu 16.04/18.04\n- CentOS 7.4/7.6\n- macOS Big Sur/version 11.1\n\n### Download Neo-CLI\n\nRefer to [Neo-CLI Setup](../node/cli/setup.md) to download and install Neo-CLI package from GitHub.", "doc_id": "7ee159a4-6f11-4deb-b56a-719bd8f94f02", "embedding": null, "doc_hash": "5bb0f89ca6c032b7631c54dd58404646c23c3d3dd9bd6eec0d7a8b7e00352fd6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/prerequisites.html"}, "node_info": {"start": 0, "end": 600, "_node_type": "1"}, "relationships": {"1": "d35783ee9c448dda98c3aac7fe2be9bc692f597c"}}, "__type__": "1"}, "639f56d4-2ed2-41a1-bcd0-1fb949c50856": {"__data__": {"text": "<div>\n    <div class=\"text-center\">\n        <h1 class=\"m-0 p-0\">Neo Documentation</h1>\n        <p>Here is an exhaustive library of Neo technical documents, including development examples for your reference.</p>\n        <div class=\"search-bar2 mt-5 mb-4\">\n            <i class=\"fas fa-search\"></i>\n            <span class=\"search-de2\">X</span>\n            <input id=\"sInput2\" type=\"text\" class=\"form-control pl-5\" placeholder=\"Search for help...\">\n            <div class=\"search-re2\">\n                <ul id=\"sResult2\" class=\"p-0\"></ul>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12 col-md-6 my-3 align-items-stretch\">\n            <a class=\"home-link p-4\" href=\"gettingstarted/prerequisites.html\">\n                <img src=\"assets/section1.svg\" />\n                <div class=\"div2\">\n                    <p class=\"m-0\">Getting Started</p>\n                    <p class=\"p2\">Start here to build and deploy a basic smart contract if you are a beginner.</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"col-12 col-md-6 my-3 align-items-stretch\">\n            <a class=\"home-link p-4\" href=\"basic/concept/blockchain/block.html\">\n                <img src=\"assets/section2.svg\" />\n                <div class=\"div2\">\n                    <p class=\"m-0\">Neo Basics</p>\n                    <p class=\"p2\">Get a basic-level understanding of Neo core concepts.</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"col-12 col-md-6 my-3 align-items-stretch\">\n            <a class=\"home-link p-4\" href=\"node/introduction.html\">\n                <img src=\"assets/section3.svg\" />\n                <div class=\"div2\">\n                    <p class=\"m-0\">Neo Node</p>\n                    <p class=\"p2\">Learn how to run a Neo node and manage your wallet.</p>\n                </div>\n            </a>\n     ", "doc_id": "639f56d4-2ed2-41a1-bcd0-1fb949c50856", "embedding": null, "doc_hash": "2f7d6f401f6a1007b1eb93bd93ce4e55fa5b2d0ff90f87fe38118b1c518f8979", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/index.html"}, "node_info": {"start": 0, "end": 1880, "_node_type": "1"}, "relationships": {"1": "b2d8691844beb4f5c62c09b71a2ca6f546d7d4e1", "3": "eb457743-ad1d-4fd2-b11e-6cb452ba0488"}}, "__type__": "1"}, "eb457743-ad1d-4fd2-b11e-6cb452ba0488": {"__data__": {"text": "           </a>\n        </div>\n        <div class=\"col-12 col-md-6 my-3 align-items-stretch\">\n            <a class=\"home-link p-4\" href=\"develop/network/testnet.html\">\n                <img src=\"assets/section4.svg\" />\n                <div class=\"div2\">\n                    <p class=\"m-0\">Developer Guide</p>\n                    <p class=\"p2\">Dive into comprehensive guides of smart contract, dApp, development tools, and more.</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"col-12 col-md-6 my-3 align-items-stretch\">\n            <a class=\"home-link p-4\" href=\"reference/rpc/latest-version/api.html\">\n                <img src=\"assets/section5.svg\" />\n                <div class=\"div2\">\n                    <p class=\"m-0\">Reference</p>\n                    <p class=\"p2\">Consult development reference information such as APIs, frameworkd, fees, and more.</p>\n                </div>\n            </a>\n        </div>\n        <div class=\"col-12 col-md-6 my-3 align-items-stretch\">\n            <a class=\"home-link p-4\" href=\"exchange/general.html\">\n                <img src=\"assets/section5.svg\" />\n                <div class=\"div2\">\n                    <p class=\"m-0\">Support for Exchanges</p>\n                    <p class=\"p2\">Learn how to integrate the Neo node with exchange if you are a exchange developer.</p>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>\n<link href=\"../zh-cn/index.css\" rel=\"stylesheet\" />", "doc_id": "eb457743-ad1d-4fd2-b11e-6cb452ba0488", "embedding": null, "doc_hash": "da71d682ab9e142c9d24eecf7214d9194efae2ca08aad7e68dd40dd0541aa2db", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/index.html"}, "node_info": {"start": 1859, "end": 3323, "_node_type": "1"}, "relationships": {"1": "b2d8691844beb4f5c62c09b71a2ca6f546d7d4e1", "2": "639f56d4-2ed2-41a1-bcd0-1fb949c50856"}}, "__type__": "1"}, "bafde456-0f1a-4504-adb2-8cf6f2fe596d": {"__data__": {"text": "# Glossary\n\n#### Block\n\nA block in a Blockchain contains a number of transaction records.  Blocks are paired up with the previous block according to the timestamp and the cryptographic hash of the previous block contained in each block header, thereby creating a chain of blocks, or a blockchain.\n\n#### Wallet\n\nA wallet is a cryptographic public/private key pair which is used to sign and authenticate database transactions that occur on the Neo network.\n\n#### Account (Address)\n\nSimilar to your bank account, a blockchain account is used to transfer or receive assets in a transaction. The address is generated by the script hash through some operations, and can be converted back to the script hash. In Neo Legacy, the address starts with A, and in Neo N3, the address starts with N.\n\n#### Private Key/Public Key\n\nThe private key is a 256-bit random number that is kept by users themselves, without disclosing to others. It is a proof of the user's right to use the account and ownership of assets in the account. Each private key has a public key paired with it.\n\n#### Transaction\n\nA Neo transaction is a signed data package with an instruction for the network, for example a user indicating that he wants to transfer assets to another address. Each Neo block in the blockchain ledger contains one or more transactions, making each block a transaction batch. \n\n#### Script\n\nA script is a piece of code that consists of opcodes and operands. Each account is a contract with a script. A standard account script is composed of the public key and the OpCode that verifies the signature. The format is as follows\n\n```\nPUSHDATA1 03ac765294075da6f7927c96bfe3d3f64ae3680c5eb50f82f55170a9f1bea59dad\nSYSCALL Neo.Crypto.VerifyWithECDsaSecp256r1\n```\n\n#### Script Hash\n\nThe script hash is generated from the smart contract script with the RIPEMD-160 algorithm. Each script has a unique script hash. Any change made in the script of the contract will cause the script hash to change. The script hash length is 20 bytes (160 bits). The script hash is generated unidirectionally by the script, and cannot be reversed to the script. The script hash and address can be converted to each other.\n\n#### Opcode\n\nOpcodes are similar to instructions in assembly language. For all OpCode, refer to [OpCode source](https://github.com/neo-project/neo-vm/blob/master/src/neo-vm/OpCode.cs).\n\n#### Cryptographic private key\n\nCryptographic private key refers to the encryption of the private key through the wallet password, which is more secure than the plaintext private key. In this way, you can write the cryptographic private key on paper and keep the password in your mind.\n\n#### Smart Contract\n\nFrom the blockchain perspective, a smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises.\n\n#### NEP-17\n\nThe NEP-17 proposal outlines a token standard for the Neo blockchain that will provide systems with a generalized interaction mechanism for tokenized smart contracts.\n\n#### SysCall\n\nThe system call is a special operation code, through which you can call the interoperable service layer interface. By calling the interoperable service layer interface, NeoVM can access data such as block, transaction , contract, and asset information that are required for running smart contracts. For more information refer to the files in  [Neo smart contract module](https://github.com/neo-project/neo/tree/master/src/neo/SmartContract) starting with  `ApplicationEngine.` , such as  `ApplicationEngine.Contract.cs`, `ApplicationEngine.Blockchain.cs`.\n\n#### Dynamic Call\n\nA special system call that invokes another contract within a contract. It can be wrote as `Contract.Call(scriptHash, method, params)`. For more information refer to [Invoking Smart Contracts](../develop/deploy/invoke.md).\n\n#### Storage\n\nEach smart contract", "doc_id": "bafde456-0f1a-4504-adb2-8cf6f2fe596d", "embedding": null, "doc_hash": "4c9fb195d63b063a9a47e03c906d922ad36283fca14c3c5bab8e645eb746413e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/intro/glossary.html"}, "node_info": {"start": 0, "end": 3873, "_node_type": "1"}, "relationships": {"1": "c9703fb9da44831bf3fcf0389f5c6204b9fc2ff7", "3": "4e8185c2-9d65-41bb-9a10-f9b5746f255e"}}, "__type__": "1"}, "4e8185c2-9d65-41bb-9a10-f9b5746f255e": {"__data__": {"text": "Storage\n\nEach smart contract deployed on the Neo blockchain has a private storage area for storing application data. When creating a smart contract or transaction to use this contract, the contract code needs to read and write its storage. Each contract can declare a storage area. For more information refer to [Storage](../reference/scapi/framework/services/storage.md).\n\n#### NEF\n\nNEF is short for Neo Executable Format. The smart contract compiler compiles the source code and eventually generate NEF files and Manifest files (see below).\n\n| Magic      | 4 bytes   | Magic header                                    |\n| ---------- | --------- | ----------------------------------------------- |\n| Field      | Length    | Comment                                         |\n| Compiler   | 32 bytes  | Compiler used                                   |\n| Version    | 16 bytes  | Compiler version (Mayor, Minor, Build, Version) |\n| ScriptHash | 20 bytes  | ScriptHash for the script                       |\n| Checksum   | 4 bytes   | Sha256 of the header (CRC)                      |\n| Script     | Var bytes | Var bytes for the payload                       |\n\n", "doc_id": "4e8185c2-9d65-41bb-9a10-f9b5746f255e", "embedding": null, "doc_hash": "99f8511588f6c652d1ab00fbdbbe94f7e4e0b87382595b3b09cde0f7fb3a9794", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/intro/glossary.html"}, "node_info": {"start": 3845, "end": 5006, "_node_type": "1"}, "relationships": {"1": "c9703fb9da44831bf3fcf0389f5c6204b9fc2ff7", "2": "bafde456-0f1a-4504-adb2-8cf6f2fe596d"}}, "__type__": "1"}, "4d0fb250-d4b3-4e20-925e-9b714ea40669": {"__data__": {"text": "# CLI Command Reference\n\nOpen the command line, navigate to the directory where Neo-CLI is located, and enter the following code to start the command line Neo node.\n\n`dotnet neo-cli.dll`\n\nThis section will introduce all the commands in the command line node. You can manipulate your node with commands for creating a wallet, importing and exporting of private key, transferring, starting consensus, etc.\n\n## Overview\n\nThe following tables list all the commands. You can also enter `help` in the command line to view them all.\n\nAll the commands described in this document conform with these conventions:\n\n- `<>` indicate a parameter.\n- `[]` is for optional parameters.\n- `|` separates multiple parameters where any one of them can be used at your choice.\n- `=` indicates the default value of the optional parameter without an input.\n\n#### Console commands\n\n| Command      | Description      |\n| ------- | --------- |\n| version | Shows the current Neo-CLI version |\n| help [plugin-name] | Help menu, which can also show plugin related commands. |\n| [parse](#parse) \\<value> | Convert the input string into various supported data format |\n| clear   | Clear screen      |\n| exit    | Exit program      |\n\n#### Wallet commands\n\n| Command                                           | Parameters                             | Description                                                  |\n| ------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [create wallet](#create-wallet)                   | \\<path>                                | Creates a wallet file.                                       |\n| [open wallet](#open-wallet)                       | \\<path>                                | Opens a wallet file.                                         |\n| close wallet                                      |                                        | Closes the current wallet.                                   |\n| [upgrade wallet](#upgrade-wallet)                 | \\<path>                                | Upgrades old wallet files.                                   |\n\nThe commands listed in the table below requires you to open the wallet before invoking.\n\n| Command                                 ", "doc_id": "4d0fb250-d4b3-4e20-925e-9b714ea40669", "embedding": null, "doc_hash": "32cb213a1df5fa052d2a4907bf3e3fc7d952b42e683f6084013f932fcf14f93d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 0, "end": 2303, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "3": "fd461848-22ce-4d6e-8a66-018154b1d2b1"}}, "__type__": "1"}, "fd461848-22ce-4d6e-8a66-018154b1d2b1": {"__data__": {"text": "                             | Parameters                    | Description                                          |\n| ------------------------------------------------- | ----------------------------- | ---------------------------------------------------- |\n| [change password](#change-password)               |                        | Changes the wallet password                          |\n| list address                                      |                               | lists all the accounts in the wallet.                |\n| list asset                                        |                               | Lists all assets in the wallet.                      |\n| list key                                          |                               | Lists all public keys in your wallet.                |\n| [show gas](#show-gas)                             |                               | Lists all the GAS in your wallet.                    |\n| [create address](#create-address)                 | [count=1]                     | Creates address / batch create address               |\n| [import key](#import-key)                         | \\<wifOrFile>          | Imports a private key / bulk import of private keys. |\n| [export key](#export-key)                         | \\[path=null] \\[scriptHash=null] | Exports private keys.                                |\n| [import multisigaddress](#import-multisigaddress) | \\<m> \\<publicKeys>                                           | Creates a multi-signature contract.                  |\n| [import watchonly](#import-watchonly) | \\<addressOrFile> | Imports the watch-only address (e.g. contract address)|\n| [send](#send)                                  | \\<id", "doc_id": "fd461848-22ce-4d6e-8a66-018154b1d2b1", "embedding": null, "doc_hash": "ab4511ee731ac63e5ba97a96751c28b7437f4afff2d4fb4f1b912c49a3bcc209", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 2304, "end": 4022, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "4d0fb250-d4b3-4e20-925e-9b714ea40669", "3": "74b34037-331b-44ca-8814-38d73161b268"}}, "__type__": "1"}, "74b34037-331b-44ca-8814-38d73161b268": {"__data__": {"text": "                 | \\<id \\|alias> \\<address> \\<amount> \\[from=null] \\[data=null] \\[signerAccounts=null] | Sends assets to the specified address.                       |\n| [sign](#sign)                                     | \\<jsonObjectToSign>                    | Signs the transaction. The parameter is the json string that records the transaction information. |\n\n#### Contract commands\n\n| Command           | Parameters                                                   | Description        |\n| ----------------- | ------------------------------------------------------------ | ------------------ |\n| [deploy](#deploy) | \\<nefFilePath> [manifestFile]                                | Deploys a contract |\n| [invoke](#invoke) | \\<scripthash> \\<operation> \\[contractParameters=null] \\[sender=null] \\[signerAccounts=null] \\[maxGas=20] | Invokes a contract |\n| [update](#update) | \\<scriptHash> \\<filePath> \\<manifestPath> \\<sender> \\[signerAccounts=null] | Upgrade a contract |\n\n\n#### Node commands\n\n| Command    | Parameters      | Description                                                  |\n| ---------- | --------------- | ------------------------------------------------------------ |\n| show state |                 | Displays the current status of blockchain synchronization.   |\n| show pool  | [verbose=False] | Displays the transactions in the memory pool (These transactions are in the state of zero confirmation). |\n\n#### Nep17 commands\n\n| Command                 | Parameters                                                   | Description                                                  |\n| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [balanceof](#balanceof) | \\<tokenHash> \\<address>                                      | Queries the balance of specified token at the specified address |\n| [decimals](#decimals)   | \\<tokenHash>                                                 | Queries the precision of specified token                     |\n| [name](#name)           | \\<tokenHash>                                                 | Queries the specified token name                             |\n|", "doc_id": "74b34037-331b-44ca-8814-38d73161b268", "embedding": null, "doc_hash": "fc2afcd57f03522e4b82098fbae350dab655722f12bc34ba626611910e7c5987", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 4018, "end": 6240, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "fd461848-22ce-4d6e-8a66-018154b1d2b1", "3": "5d6330e7-9b86-47e4-a5f2-d6820e5b1929"}}, "__type__": "1"}, "5d6330e7-9b86-47e4-a5f2-d6820e5b1929": {"__data__": {"text": "                 |\n| [transfer](#transfer)   | \\<tokenHash> \\<to> \\<amount>  \\[from=null] \\[data=null] \\[signersAccounts=null] | Invokes the transfer method to transfer the specified token  |\n\n#### Native contract commands\n\n| Command                                     | Parameters | Description                                        |\n| ------------------------------------------- | ---------- | -------------------------------------------------- |\n| [list nativecontract](#list-nativecontract) |            | Lists all the native contract names and scripthash |\n\n#### Network commands\n\n| Command         | Parameters          | Description                                                  |\n| --------------- | ------------------- | ------------------------------------------------------------ |\n| [relay](#relay) | \\<jsonObjectToSign> | Broadcasts the transaction. The parameter is the json string that records the transaction information. |\n| [broadcast addr](#broadcast-addr) |  \\<payload IP address> \\<port>   | Broadcasts the IP address of the node |\n| [broadcast block](#broadcast-block) |  \\<block hash \\| block height>  | Broadcasts a block |\n| [broadcast getblocks](#broadcast-getblocks) |  \\<block hash>  | Broadcasts the getblocks request |\n| [broadcast getdata](#broadcast-getdata) |  \\<inventory type> \\<payload>  | Broadcasts the getdata request |\n| [broadcast getheaders](#broadcast-getheaders) |  \\<block index>  | Broadcasts the getheaders request |\n| [broadcast inv](#broadcast-inv) |  \\<inventory type> \\<payload>  | Broadcasts the inventory data |\n| [broadcast transaction](#broadcast-transaction) |  \\<transaction hash>  | Broadcasts a transaction |\n\n#### Plugin commands\n\n| Command                       | Parameters    | Description                              |\n| ----------------------------- | ------------- | ---------------------------------------- |\n| [plugins](#plugins)           |               | Lists loaded plugins                     |\n| [install](#install)           | [Plugin name] | Installs the specified plugin            |\n| [uninstall](#install)         | [Plugin name] | Uninstalls the specified plugin          |\n| [dump storage](#dump-storage) | \\<key>        | Exports all or the specified state data. This command requires installation of the StatesDumper plugin. |\n| [start consensus](#start-consensus) |  | Starts consensus. This command requires installation of the DBFTPlugin plugin. |\n| [start oracle](#start-oracle) | | Starts Oracle. This command requires installation of the OracleService plugin. |\n| [stop oracle](#stop-oracle) | | Stops Oracle. This command requires installation of the OracleService plugin. |\n| [state root](#state-root) | \\<index> | Queries the state root with index. This command requires installation of the StateService plugin. |\n| state height | | Queries the state height. This command requires installation of the StateService plugin. |\n| [get proof](#get-proof)", "doc_id": "5d6330e7-9b86-47e4-a5f2-d6820e5b1929", "embedding": null, "doc_hash": "27c30ff1f7a7a73dc50f4026e5e7149e30f302a1768167f4c6a988ac4a084131", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 6243, "end": 9193, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "74b34037-331b-44ca-8814-38d73161b268", "3": "17367998-fad8-4f7f-a008-29506a111cd3"}}, "__type__": "1"}, "17367998-fad8-4f7f-a008-29506a111cd3": {"__data__": {"text": "installation of the StateService plugin. |\n| [get proof](#get-proof) | \\<rootHash> \\<scriptHash> \\<key> | Gets proof with root hash, contract hash, and storage key. |\n| [verify proof](#verify-proof) | \\<rootHash> \\<proof> | Verifies with root hash and proof. |\n\n#### Voting commands\n\n| Command                                       | Parameters                    | Description                                                 |\n| --------------------------------------------- | ----------------------------- | ----------------------------------------------------------- |\n| [get accountstate](#get-accountstate)         | \\<address>                    | Gets the latest voting information of the specified account |\n| [get candidates](#get-candidates)             |                               | Gets candidates' public keys and votes                      |\n| [get committee](#get-committee)               |                               | Gets the committee member's public key                      |\n| [get next validators](#get-next-validators)   |                               | Gets the next validator's  public key                       |\n| [register candidate](#register-candidate)     | \\<account> [maxGas=1010]      | Registers the candidate                                     |\n| [unregister candidate](#unregister-candidate) | \\<account>                    | Unregisters the candidate                                   |\n| [vote](#vote)                                 | \\<senderAccount> \\<publicKey> | Votes for candidates                                        |\n| [unvote](#unvote)                             | \\<senderAccount>              | Cancel the voting                                           |\n\n#### Block Commands\n\n| Command                         | Parameters                             | Description                                              ", "doc_id": "17367998-fad8-4f7f-a008-29506a111cd3", "embedding": null, "doc_hash": "04acbfa1d4a2b9b76c42739d3d9f86e171e286b7eb9e1c1498375c0069fdcf20", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 9136, "end": 11016, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "5d6330e7-9b86-47e4-a5f2-d6820e5b1929", "3": "9e96ee20-9e32-47cc-bb93-e4aa9d2ecf01"}}, "__type__": "1"}, "9e96ee20-9e32-47cc-bb93-e4aa9d2ecf01": {"__data__": {"text": "                       |\n| ------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [export blocks](#export-blocks) | \\<start> \\[block count] \\[export path] | Exports the blockchain data from the specified block height. The exported data  can be used for offline synchronization. |\n\n## Command Description\n\n### parse\n\nConverts the input string into various supported data formats.\n\n##### Syntax\n\n `parse <value>`\n\n##### Example\n\n```\nneo> parse NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\nAddress to ScriptHash           0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\nAddress to Base64               uXtKzX+CD2HS1NT5rqXrUEmN31U=\nString to Hex String            4e637068746a675479653363335a4c354a356e445a68736633554a4d47416a64376f\nString to Base64                TmNwaHRqZ1R5ZTNjM1pMNUo1bkRaaHNmM1VKTUdBamQ3bw==\nneo> parse AHVYXVTcKw==\nBase64 to Big Integer           12345678900000000\nString to Hex String            41485659585654634b773d3d\nString to Base64                QUhWWVhWVGNLdz09\nneo> parse 0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\nScriptHash to Address           NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\nHex String to Big Integer       490249589479789641828817600658206854216357149625\nString to Hex String            307835356466386434393530656261356165663964346434643236313066383237666364346137626239\nString to Base64                MHg1NWRmOGQ0OTUwZWJhNWFlZjlkNGQ0ZDI2MTBmODI3ZmNkNGE3YmI5\n```\n\nIf you see messy codes that is because some data types cannot be converted. \n\n### create wallet\n\nCreates a wallet file in the .db3 or .json format. A wallet password is required to be specified during the process. \n\n##### Syntax\n\n `create wallet <path>` \n\n##### Example\n\n```\nneo> create wallet test.json\npassword: *\npassword: *\n   Address: NRq91uUULStNMBmsgFQpQVe18YUcwo1rTK\n    Pubkey: 02e7ada69ebe8f730c871ea999185a5238c80ab91abe86bfb26fdac5ebb8ae6613\nScriptHash: 0x19d69593a368ba01b2aac8dc0a67d7b675e1e640\n```\n\nThe wallet file is generated under the neo-cli root directory. If you want to set other path, you need to create the folder in advance.\n\n### open wallet\n\nOpens the wallet file at the specified path. The wallet password is required to be entered when opening the wallet.\n\n##### Syntax\n\n `open wallet <path>` \n\n##### Example\n\n```\nneo> open wallet", "doc_id": "9e96ee20-9e32-47cc-bb93-e4aa9d2ecf01", "embedding": null, "doc_hash": "dae2f9723350f69d19e958fc6370727073819c220959d5188565861e194d712d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 11078, "end": 13409, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "17367998-fad8-4f7f-a008-29506a111cd3", "3": "4ba16fe0-b133-45bb-99aa-25abd328ee56"}}, "__type__": "1"}, "4ba16fe0-b133-45bb-99aa-25abd328ee56": {"__data__": {"text": "wallet <path>` \n\n##### Example\n\n```\nneo> open wallet test.json\npassword: *\n```\n\n### change password\n\nChanges the wallet password.\n\n##### Syntax\n\n `change password` \n\n##### Example\n\n```\nneo> change password\npassword: ***\nNew password: ***\nRe-Enter Password: ***\nPassword changed successfully\n```\n\n### upgrade wallet\n\nUpgrades the old .db3 wallet file into the .json format.\n\n##### Syntax\n\n `upgrade wallet <path>` \n\n##### Example\n\n```\nneo> upgrade wallet test.db3\nWallet file upgrade complete. New wallet file has been auto-saved at: test.json\n```\n\n### show gas\n\nlists all the unclaimed GAS in the current wallet.\n\n##### Syntax\n\n`show gas` \n\n##### Example\n\n```\nneo> show gas\nunclaimed gas: 16.7367406\n```\n\n> [!NOTE]\n>\n> This command does not show the GAS that has been claimed. Use `list asset` instead.\n\nOn Neo N3, The GAS in an account is claimed automatically every time when the number of Neo in the account changes.  \n\n### create address\n\nCreates a new address. One can also enter `create address 100` to create 100 new addresses in batches; Addresses are automatically exported to the address.txt file.\n\n##### Syntax\n\n`create address [n]` \n\n##### Parameters\n\n`n`: Number of addresses to create. n is an integer and defaults to 1.\n\n##### Example\n\n```\nneo> create address 3\nThe file 'address.txt' already exists, do you want to overwrite it? (yes|no): yes\n[3/3]\nExport addresses to address.txt\n```\n\n### balanceof\n\nQueries the balance of specified token at the specified address\n\n##### Syntax\n\n `balanceof <tokenHash> <address>`\n\n##### Parameters\n\n- `tokenHash`: The token hash\n\n- `address`: The address to query\n\n##### Example\n\n```\nneo> balanceof 0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\nInvoking script with: '0c14b97b4acd7f820f61d2d4d4f9aea5eb50498ddf5511c00c0962616c616e63654f660c14ec99f691c0f7dfa41400473edd1c2afceb70c2d241627d5b52'\nVM State: HALT\nGas Consumed: 0.0373876\nResult Stack: [{\"type\":\"Integer\",\"value\":\"1998380000000000\"}]\n\n{{$Token Name}} balance: 19983800\n```\n\n### decimals\n\nQueries the precision of specified token\n\n##### Syntax\n\n `decimals <tokenHash>`\n\n##### Parameters\n\n`tokenHash`: The token hash\n\n##### Example\n\n```\nneo> decimals 0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\nInvoking script with: '10c00c08646563696d616c730c14ec99f691c0f7dfa41400473edd1c2afceb70c2d241627d5b52'\nVM State: HALT\nGas Consumed: 0.0125075\nResult Stack: [{\"type\":\"Integer\",\"value\":\"8\"}]\nResult : 8\n```\n\n### transfer\n\nInvokes the transfer method to transfer the specified token.\n\n##### Syntax\n\n `transfer <tokenHash> <to> <amount> [from=null] [data=null] [signersAccounts=null]`\n\n##### Parameters\n\n- `tokenHash`: The token hash\n- `to`: The address you transfer the token to\n- `amount`: The amount to", "doc_id": "4ba16fe0-b133-45bb-99aa-25abd328ee56", "embedding": null, "doc_hash": "8845aceec0ec40007725bc80baeb425d00ab9bd23aac300f296f45f8d442b9ce", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 13363, "end": 16099, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "9e96ee20-9e32-47cc-bb93-e4aa9d2ecf01", "3": "42935348-7dc6-4fc7-9f17-c3acaac86dcf"}}, "__type__": "1"}, "42935348-7dc6-4fc7-9f17-c3acaac86dcf": {"__data__": {"text": "`to`: The address you transfer the token to\n- `amount`: The amount to transfer\n- `from`: The address you transfer the token from\n- `data`\uff1aThe additional parameter. The default value is null.\n- `signersAccounts`: The signer's address\n\n##### Example\n\n```\nneo> transfer 0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec Nhe4mzfQRoKojkXhqxJHjANvBMT7BYAXDv 6000 NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y transferdata NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y\nRelay tx(no|yes): y\nSigned and relayed transaction with hash=0x0d82a59ca2106c93e6383893d86a098d1a9fbf950c091772c61790880acc78c5\n```\n\n### list nativecontract\n\nLists all the native contract names and scripthash.\n\n\n##### Syntax\n\n `list nativecontract`\n\n\n##### Example\n\n```\nneo> list nativecontract\n        ContractManagement  0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\n        StdLib              0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\n        CryptoLib           0x726cb6e0cd8628a1350a611384688911ab75f51b\n        LedgerContract      0xda65b600f7124ce6c79950c1772a36403104f2be\n        NeoToken            0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n        GasToken            0xd2a4cff31913016155e38e474a2c06d08be276cf\n        PolicyContract      0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b\n        RoleManagement      0x49cf4e5378ffcd4dec034fd98a174c5491e395e2\n        OracleContract      0xfe924b7cfe89ddd271abaf7210a80a7e11178758\n        NameService         0x7a8fcf0392cd625647907afa8e45cc66872b596b\n```\n\n### get accountstate\n\nGets the latest voting information of the specific account, including the address it voted, the amount of votes cast and the block height at the time of voting.\n\n##### Syntax\n\n `get accountstate <address>` \n\n##### Parameter\n\n`address`\uff1aThe address you want to query the voting information.\n\n##### Example\n\n```\nneo> get accountstate NNz4ppADL3mke7HT8RvRr5nX8zTAbNdWjv\nInvoking script with: 'DBQhrr+TO5ru/CWrG+m3Gq80Ff3tORHAHwwPZ2V0QWNjb3VudFN0YXRlDBT1Y+pAvCg9TQ4FxI6jBbPyoHNA70FifVtS'\nVM State: HALT\nGas Consumed: 0.0202833\nResult Stack:", "doc_id": "42935348-7dc6-4fc7-9f17-c3acaac86dcf", "embedding": null, "doc_hash": "6d3e13a2aa57356e5c97d844ea7a971af096a45f64ff2d082b82035396e99f3a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 16089, "end": 18089, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "4ba16fe0-b133-45bb-99aa-25abd328ee56", "3": "f035b9a5-d75d-44ec-a328-b67f23dde95e"}}, "__type__": "1"}, "f035b9a5-d75d-44ec-a328-b67f23dde95e": {"__data__": {"text": "State: HALT\nGas Consumed: 0.0202833\nResult Stack: [{\"type\":\"Struct\",\"value\":[{\"type\":\"Integer\",\"value\":\"900\"},{\"type\":\"Integer\",\"value\":\"9774\"},{\"type\":\"ByteString\",\"value\":\"AsNeyvySxknpefBTobcD9O\\u002BQiieFUIdCtmzAWZvxQPA4\"}]}]\n\nVoted: NNuEErrm2qpLyoWUxtEy7Sgxh1cm71Ngb6\nAmount: 900\nBlock: 9774\n```\n\n### get candidates\n\nGets candidates' public keys and votes\n\n##### Syntax\n\n `get candidates`\n\n##### Example\n\n```\nneo> get candidates\nInvoking script with: '10c00c0d67657443616e646964617465730c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 1.0100757\n\nCandidates:\n02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d      49900000\n```\n\n### get committee\n\nGets the committee member's public key\n\n##### Syntax\n\n `get committee`\n\n##### Example\n\n```\nneo> get committee\nInvoking script with: '10c00c0c676574436f6d6d69747465650c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 1.0100757\n\nCommittee:\n02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d\n```\n\n### get next validators\n\nGets the next validator's public key\n\n##### Syntax\n\n `get next validators`\n\n##### Example\n\n```\nneo> get next validators\nInvoking script with: '10c00c166765744e657874426c6f636b56616c696461746f72730c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 1.0100757\n\nNext validators:\n02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d\n```\n\n### register candidate\n\nRegisters the candidate\n\n##### Syntax\n\n `register candidate <account> [maxGas=1010]`\n\n##### Parameters\n\n`account`: The account to register candidate\n\n`maxGas`: The maximum GAS can be consumed. Default is 1010, where the registration fee is 1000 GAS.\n\n##### Example\n\n```\nneo> register candidate NUNtEBBbJkmPrmhiVSPN6JuM7AcE8FJ5sE\nInvoking script with: 'DCECSVwDcw3pu71X7c2DqNv8jNiqsw75XuAGjy+ko6bkt/YRwB8MEXJlZ2lzdGVyQ2FuZGlkYXRlDBT1Y+pAvCg9TQ4FxI6jBbPyoHNA70FifVtS'\nVM State: HALT\nGas Consumed: 1000.0104529\nResult Stack: [{\"type\":\"Boolean\",\"value\":true}]\nrelay tx(no|yes): y\nSigned and relayed transaction with hash=0xc30ecd2e30d2d3347e389dbdb205c6a38a663819ff8b473ad11b03e035c67bb5\n```\n\n### unregister candidate\n\nUnregisters the candidate\n\n##### Syntax\n\n `unregister candidate <account>`\n\n#####", "doc_id": "f035b9a5-d75d-44ec-a328-b67f23dde95e", "embedding": null, "doc_hash": "7e8a9e932ae03be90bf6c0b8defdf349e7eb36b6eea27e4239686083b35453f0", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 18103, "end": 20375, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "42935348-7dc6-4fc7-9f17-c3acaac86dcf", "3": "271f6e9b-0b63-43ce-8fb1-7cd4be4bffff"}}, "__type__": "1"}, "271f6e9b-0b63-43ce-8fb1-7cd4be4bffff": {"__data__": {"text": "Syntax\n\n `unregister candidate <account>`\n\n##### Parameters\n\n`account`: The account to unregister candidate\n\n##### Example\n\n```\nneo> unregister candidate NUNtEBBbJkmPrmhiVSPN6JuM7AcE8FJ5sE\nInvoking script with: 'DCECSVwDcw3pu71X7c2DqNv8jNiqsw75XuAGjy+ko6bkt/YRwB8ME3VucmVnaXN0ZXJDYW5kaWRhdGUMFPVj6kC8KD1NDgXEjqMFs/Kgc0DvQWJ9W1I='\nVM State: HALT\nGas Consumed: 0.0301137\nResult Stack: [{\"type\":\"Boolean\",\"value\":true}]\nRelay tx(no|yes): yes\nSigned and relayed transaction with hash=0xa799e315956e120a51bf5b5804d9518754a844bbe4dadef3efd37ac3d15a6305\n```\n\n### vote\n\nVotes for candidates\n\n##### Syntax\n\n `vote <senderAccount> <publicKey>`\n\n##### Parameters\n\n- `senderAccount`: The account used to vote\n- `publickey`: The public key of the account you vote for\n\n##### Example\n\n```\nneo> vote Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z 02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d\nInvoking script with: '0c2102344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d0c14ef3b46067f2f47b2f7f0442aa2372085d08708ef12c00c04766f74650c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 5.0100793\nEvaluation Stack: [{\"type\":\"Boolean\",\"value\":true}]\n\nrelay tx(no|yes): y\nSigned and relayed transaction with hash=0x8083633ecc4827b7967ba8b0a30f02992dc524e4a5356accebdf080e9cd26df2\n```\n\n### unvote\n\nCancel the voting\n\n##### Syntax\n\n `unvote <senderAccount>`\n\n##### Parameter\n\n`senderAccount`: The account to unvote\n\n##### Example\n\n```\nneo> unvote 0x39edfd1534af1ab7e91bab25fcee9a3b93bfae21\nInvoking script with: 'CwwUIa6/kzua7vwlqxvptxqvNBX97TkSwB8MBHZvdGUMFPVj6kC8KD1NDgXEjqMFs/Kgc0DvQWJ9W1I='\nVM State: HALT\nGas Consumed: 0.030114\nResult Stack: [{\"type\":\"Boolean\",\"value\":true}]\nRelay tx(no|yes): y\nSigned and relayed transaction with hash=0x78f83fd1e0607f078fa0964a97b9972d3f4844191f6702c1750ff6d532cd5019\n```\n\n### export key\n\nExports private key of the address to the specified file. The command also requires the verification of the wallet password.\n\n##### Syntax\n\n `export key [address] [path]`\n\n##### Parameters\n\n- `address`: Address to export private key.\n- `path`: Path to the file used to store the private key.\n\n##### Example\n\nExports the key to the console:\n\n```\nneo> export key\npassword:", "doc_id": "271f6e9b-0b63-43ce-8fb1-7cd4be4bffff", "embedding": null, "doc_hash": "ba1a58d6ea1aac43a4d83afe4c8b66841a137d7356975bbb5d5bf16b11090d81", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 20376, "end": 22610, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "f035b9a5-d75d-44ec-a328-b67f23dde95e", "3": "125846c0-6ad4-4d9b-bcf3-253966f14e05"}}, "__type__": "1"}, "125846c0-6ad4-4d9b-bcf3-253966f14e05": {"__data__": {"text": "the key to the console:\n\n```\nneo> export key\npassword: ********\nL4HoTTfKfzjV8tdWv6vRaMY1cBQbsVc4euGqhPW9Mf8z6993fgMH\nL3raEwVsJHzovTXfgVG1HWxzmH4Zm3vMia8byszhVrvbJ38YnsXv\nKywrMAnBWRXUAb4Aq76ZoCCqDvGNL9nidjVwWwDr3DbMPwg1RPBL\nKwhNLC9rULxJmevqwYbQzJhYNvaCDPyAUAm7EkHrW5kQwLYfxTFG\n```\n\nExports the key to the specified file:\n\n```\nneo> export key key1.txt\npassword: ********\n```\n\n```\nneo> export key key2.txt NPpH6FxNaVXZCrsecNWEHGLwMe87UkPdm5\npassword: ********\n```\n\n### import key\n\nImports a private key, or  a file with a number of private keys.\n\n##### Syntax\n\n `import key <wif | path>`\n\n##### Parameters\n\n`wif | path`: The key to import or the file path.\n\n##### Example\n\n```\nneo> import key L4q37aCJzjEXhAUJ6npdxbjGGbyTXuWhpgYxkb2NWPmzXv4DdxiD\nAddress: NPpH6FxNaVXZCrsecNWEHGLwMe87UkPdm5\n Pubkey: 02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\n```\n\n```\nneo> import key key1.txt\n```\n\nIf there is a specified file, the file is in the private key format. Refer to export key key.txt output.\n\n### import multisigaddress\n\nCreates a multi-party signed address. \n\n##### Syntax\n\n`import multisigaddress m pubkeys...`\n\n##### Parameters\n\n- `m`: m is the minimal number of signatures. For example, creating a multi-party signed address with two public keys, m can be 1 or 2.\n- `pubkeys`: Public keys of multiple parties involved.\n\n##### Example\n\n```\nneo> import multisigaddress 2 03fadbc9b25d1b6827124665c50801e602240c9d8ebdda2bae49de6683f8f86af9 02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\nMultisig. Addr.: NN58k4Ei4nUzWxrgksHZPantyuDxWgouod\n```\n\n### import watchonly\n\nImports the watch-only address, e.g contract account.\n\n##### Syntax\n\n`import watchonly scriptHash`\n\n##### Parameters\n\n`addressOrFile`\uff1aaccount address, hash, contract hash, or files storing these data\n\n##### Example\n\n```\nneo> import watchonly 0xbfe215933f29b29dacf0e8383722a62974ac8aa6\nAddress: Nb6ZUp9h5aCKkNADpdUD5TbuJGP6wyRvE8\n```\n\n### send\n\nTransfers the asset to the specified address. The command requires the verification of the wallet password.\n\n##### Syntax\n\n`send <id | alias> <address> <amount> [from=null] [data=null] [signerAccounts=null]`\n\n##### Parameters\n\n- `id | alias`: asset ID or asset abbreviations, e.g. neo, gas\n- `address`: address to transfer assets to\n- `amount`: transfer amount\n- `from`: address to transfer assets", "doc_id": "125846c0-6ad4-4d9b-bcf3-253966f14e05", "embedding": null, "doc_hash": "2aaa8e765894a976ce4a81def41a83338292335e2d1386a6c1a0a20838d3bd7d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 22608, "end": 24950, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "271f6e9b-0b63-43ce-8fb1-7cd4be4bffff", "3": "dc83c85c-5eac-4541-9e3e-bb2fb5b253a5"}}, "__type__": "1"}, "dc83c85c-5eac-4541-9e3e-bb2fb5b253a5": {"__data__": {"text": "assets to\n- `amount`: transfer amount\n- `from`: address to transfer assets from\n- `data`: the additional transaction information, which defaults to null.\n- `signerAccounts`: signer's address\n\n##### Example\n\nTransfer 100 Neo to the address Ni5iS2XHazKZtXfzLJbdyDk8UUcGBZGePR: \n\n```\nneo> send 0xd2a4cff31913016155e38e474a2c06d08be276cf Ni5iS2XHazKZtXfzLJbdyDk8UUcGBZGePR 100\npassword: *\nTXID: 0xf8b9824808c037893525a60f2f8d4ec034dffe8ac17d4142ff889e2e712d8df1\n```\n\nIf you are not sure of the asset ID, you can enter `list asset` to view all assets in the wallet.\n\nIn above example, we can also replace the asset ID with asset abbreviation, as shown below:\n\n```\nneo> send gas Ni5iS2XHazKZtXfzLJbdyDk8UUcGBZGePR 100\npassword: *\nTXID: 0xea2454d0210aefff406097e03abd2137dc416617adac6f23842ca1914d001419\n```\n\nWhen withdrawing assets from a multi-signed address, multiple signatures are required. A json string is returned requiring signatures, as shown below:\n\n```\nneo> send neo NdJ5Nbs7gvmjDmqraVCJy8nPQxue1e5LK1 10\npassword:", "doc_id": "dc83c85c-5eac-4541-9e3e-bb2fb5b253a5", "embedding": null, "doc_hash": "e8a01d37e47e3ed9650cf950173274dbc877d474bc32b9b4ae2733ea37fb2800", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 24934, "end": 25953, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "125846c0-6ad4-4d9b-bcf3-253966f14e05", "3": "a5e43e68-2463-4749-b7b5-3224114f1680"}}, "__type__": "1"}, "a5e43e68-2463-4749-b7b5-3224114f1680": {"__data__": {"text": "10\npassword: *\nSignatureContext:\n{\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"}}}}\n```\n\nWhen withdrawing assets from a contract, `from` is the contract hash and the signer account must contain the contract hash and verify account, for example:\n\n```\nneo> send", "doc_id": "a5e43e68-2463-4749-b7b5-3224114f1680", "embedding": null, "doc_hash": "108aa7a381457bdd2bc2fa381dc0160d35f48e869de8f26bd31744b4af6187df", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 26007, "end": 27689, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "dc83c85c-5eac-4541-9e3e-bb2fb5b253a5", "3": "bcc331ba-5f56-4a31-8a36-497806193c9b"}}, "__type__": "1"}, "bcc331ba-5f56-4a31-8a36-497806193c9b": {"__data__": {"text": "the contract hash and verify account, for example:\n\n```\nneo> send 0x70e2301955bf1e74cbb31d18c2f96972abadb328 NZttvm9tAhMjyxZATvqN9WFYkHYMNaXD6C 0.000002 0x436b18e7b624c0323b090141a89e79a3ab588b6a transferdata 0x436b18e7b624c0323b090141a89e79a3ab588b6a NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y\npassword: *\nTXID: 0x174bab85eb004a07ae5b411f23cb6d3128346f9249305a768c286707938b4727\n```\n\n### sign\n\nThis command is used to sign ContractParametersContext. The translation can be broadcasted only after signing is completed.\n\n##### Syntax\n\n`sign <jsonObjectToSign>` \n\n##### Parameters\n\n`jsonObjectToSign`: The json string that records the transaction information. \n\n##### Example\n\n```\nneo> sign", "doc_id": "bcc331ba-5f56-4a31-8a36-497806193c9b", "embedding": null, "doc_hash": "0d7ba15401b4b3b51b120a3937c8253fce7b814c4a7273459cb2e381e1de612b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 27645, "end": 28325, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "a5e43e68-2463-4749-b7b5-3224114f1680", "3": "d2ff72ba-74f3-4064-911f-96ee6bb857dd"}}, "__type__": "1"}, "d2ff72ba-74f3-4064-911f-96ee6bb857dd": {"__data__": {"text": "the transaction information. \n\n##### Example\n\n```\nneo> sign {\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"}}}}\nSigned Output:", "doc_id": "d2ff72ba-74f3-4064-911f-96ee6bb857dd", "embedding": null, "doc_hash": "334ca7f5c61165ecef38fca455b799b308c5294018035b362b0679f2efbc70d1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 28329, "end": 29877, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "bcc331ba-5f56-4a31-8a36-497806193c9b", "3": "d6bfc54c-4241-44b6-b2c9-741b4a2421dc"}}, "__type__": "1"}, "d6bfc54c-4241-44b6-b2c9-741b4a2421dc": {"__data__": {"text": "Output: {\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"},{\"type\":\"Signature\",\"value\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\"},{\"type\":\"Signature\",\"value\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0y", "doc_id": "d6bfc54c-4241-44b6-b2c9-741b4a2421dc", "embedding": null, "doc_hash": "6b54fd72f40928e1ad3e16fc8d0cca519dbf406ca7ccc37ced70c26c2c734f9e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 29925, "end": 31449, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "d2ff72ba-74f3-4064-911f-96ee6bb857dd", "3": "0d087aa5-6287-4182-9057-e0a57e9a4673"}}, "__type__": "1"}, "0d087aa5-6287-4182-9057-e0a57e9a4673": {"__data__": {"text": "JWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"},{\"type\":\"Signature\",\"value\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\"},{\"type\":\"Signature\",\"value\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\",\"0302242b1dced63e1bf7eb14876f7ef026b79567f9c5be83de1943dd185ec28e68\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\",\"020df8858b66ff4d7b0a6a68d11ddedcc7d90d2a64ffa2cd087c4c5dabf4150b40\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\",\"025e8494903b93dc369f08a2bd7e221f574c75d9675591f04907cba9daeeb83d10\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\",\"038415d0be8dc12b61d3e3b76b98f464dfab7fddee74271c35e2de624bb51023a6\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"}}}} ```  The signed json string is returned. If the signature is complete, you can broadcast the transaction using the command `relay`.\n\n### deploy\n\nDeploys a contract on the blockchain.\n\n##### Syntax\n\n`deploy <nefFilePath> [manifestFile]` \n\n##### Parameters\n\n- `nefFilePath`: Path to the executable file (.nef) of NeoVM.\n- `manifestFile`: Path to the file manifest.json, which records each interface information and configuration content of the contract.\n\n##### Example\n\n```\nneo> deploy Template.nef Template.manifest.json  \nScript hash: 0x1e5ce27b9af630aed82bc94695fa8d424cdbe5c6\nGas Consumed: 100000000\n\nSigned and relayed transaction with", "doc_id": "0d087aa5-6287-4182-9057-e0a57e9a4673", "embedding": null, "doc_hash": "a7b286fcb7ce3fe5d47a73213134f8f9411de04e545f9e3358dad185282c3cfe", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 31457, "end": 33248, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "d6bfc54c-4241-44b6-b2c9-741b4a2421dc", "3": "43b1e8a2-a3fa-419e-a3e7-a12e6eb516d1"}}, "__type__": "1"}, "43b1e8a2-a3fa-419e-a3e7-a12e6eb516d1": {"__data__": {"text": "Consumed: 100000000\n\nSigned and relayed transaction with hash=0xab6dd63ea36a7c95580b241f34ba756e62c767813be5d53e02a983f4e561d284\n```\n\n### invoke\n\nInvokes a contract. \n\n##### Syntax\n\n`invoke <scriptHash> <operation> [contractParameters=null] [sender=null] [signerAccounts=null][maxGas]` \n\n##### Parameters\n\n- `scripthash`: Contract hash to invoke.\n\n- `command`: Method name in the contract, which can be followed by input parameters separated by space. \n\n- `contractParameters`: Parameters to invoke. You need to pass in JSON-formatted string. For ByteArray type, encode it with Base64 in advance. \n\n  For example, the address `NfKA6zAixybBHHpmaPYPDywoqDaKzfMPf9` can be converted to the hexadecimal big-endian script hash  `0xe4b0b6fa65a399d7233827502b178ece1912cdd4` or the Base64-encoded script hash `1M0SGc6OFytQJzgj15mjZfq2sOQ=`. The JSON-formatted parameters are:\n\n  ```\n  [{\"type\":\"ByteArray\",\"value\":\"1M0SGc6OFytQJzgj15mjZfq2sOQ=\"}]\n  [{\"type\":\"Hash160\",\"value\":\"0xe4b0b6fa65a399d7233827502b178ece1912cdd4\"}]\n  ```\n\n- `sender` : Transaction sender, i.e. the GAS payment account.\n\n- `signerAccounts` : An array of co-signed addresses and only supports standard accounts (single address). After filling in Neo-CLI will append signatures of all addresses in the array to the invocation transaction.\n\n- `maxGas`: The maximum GAS can be consumed.\n\n##### Example 1\n\nInput:\n\n```\ninvoke 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26 symbol\n```\nOutput:\n\n```\nInvoking script with: '10c00c046e616d650c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0103609\nEvaluation Stack: [{\"type\":\"ByteArray\",\"value\":\"VG9rZW5TeW1ib2w=\"}]\n\nrelay tx(no|yes):\n```\n\n- `VM State`: there are two states:\n  -  `HALT` : the virtual machine executes successfully.\n  -  `FAULT` : the virtual machine exits during execution due to an exception. \n- `Gas Consumed`: the system fees consumed for smart contract invocation.\n- `Evaluation Stack`: shows the result of contract execution, where the value is encoded with Base64.\n\nInput:\n\n```\ninvoke 0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 balanceOf [{\"type\":\"ByteArray\",\"value\":\"1M0SGc6OFytQJzgj15mjZfq2sOQ=\"}]\n```\n\nOutput:\n\n```\nInvoking script with: '0c14d4cd1219ce8e172b50273823d799a365fab6b0e411c00c0962616c616e63654f660c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0355309\nEvaluation Stack: [{\"type\":\"Integer\",\"value\":\"9999999900000000\"}]\n\nrelay tx(no|yes): no\n```\n\nOutput:\n\n```\ninvoke", "doc_id": "43b1e8a2-a3fa-419e-a3e7-a12e6eb516d1", "embedding": null, "doc_hash": "3cd0c223d1912e93d900831b0c49d0d47e688aae4be0c425a2cc54ecc043a359", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 33198, "end": 35679, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "0d087aa5-6287-4182-9057-e0a57e9a4673", "3": "a1e36122-5261-44f2-ac8c-b87bd41b07d6"}}, "__type__": "1"}, "a1e36122-5261-44f2-ac8c-b87bd41b07d6": {"__data__": {"text": "tx(no|yes): no\n```\n\nOutput:\n\n```\ninvoke 0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 balanceOf [{\"type\":\"Hash160\",\"value\":\"0xe4b0b6fa65a399d7233827502b178ece1912cdd4\"}]\n```\n\nor\n\n```\ninvoke 0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 balanceOf [{\"type\":\"Hash160\",\"value\":\"d4cd1219ce8e172b50273823d799a365fab6b0e4\"}]\n```\n\nOutput:\n\n```\nInvoking script with: '0c14d4cd1219ce8e172b50273823d799a365fab6b0e411c00c0962616c616e63654f660c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0355309\nEvaluation Stack: [{\"type\":\"Integer\",\"value\":\"9999999900000000\"}]\n\nrelay tx(no|yes): no\n```\n##### Example 3\n\nInput:\n\n    neo> invoke 0x70e2301955bf1e74cbb31d18c2f96972abadb328 transfer [{\"type\":\"Hash160\",\"value\":\"0x436b18e7b624c0323b090141a89e79a3ab588b6a\"},{\"type\":\"Hash160\",\"value\":\"0xb4ba98beea38621dd96a9804384db24451b1cff2\"},{\"type\":\"Integer\",\"value\":\"1\"}] 0x436b18e7b624c0323b090141a89e79a3ab588b6a 0x436b18e7b624c0323b090141a89e79a3ab588b6a NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y\n\nOutput:\n\n    Invoking script with: '110c14f2cfb15144b24d3804986ad91d6238eabe98bab40c146a8b58aba3799ea84101093b32c024b6e7186b4313c00c087472616e736665720c14bcaf41d684c7d4ad6ee0d99da9707b9d1f0c8e6641627d5b52'\n    VM State: HALT\n    Gas Consumed: 0.0900796\n    Result Stack: [{\"type\":\"Boolean\",\"value\":true}]\n    Relay tx(no|yes): no\n\n\n> [!Note]\n>\n> After entering the invoke command, the node invokes the `operation` method, and passes `operation` and `contractParameters` as arguments. If `operation` and `contractParameters` are not processed in the contract, the expected result will not be returned.\n\n###  update\n\nUpgrades a contract.\n\n##### Syntax\n\n`update <scriptHash> <filePath> <manifestPath> <sender> [signerAccounts=null]` \n\n##### Parameters\n\n- `scriptHash`: hash of the contract to update\n\n- `nefFilePath`: File path to the NeoVM executable file nef.\n- `manifestFile`: Path of the manifest.json file which records all the contract interfaces and configuration. If not specified, the manifest.json with the same name as nef will be automatically matched.  \n- `sender`: The transaction sender that pays for GAS\n- `signerAccounts`: An array of co-signed addresses and only supports standard accounts (single address). After filling in Neo-CLI will append signatures of all addresses in the array to the invocation transaction.\n\n##### Example\n\n```\nupdate", "doc_id": "a1e36122-5261-44f2-ac8c-b87bd41b07d6", "embedding": null, "doc_hash": "42aa1e737531bbc411907b73239f8eb67d959e2503b77a37d151a251a8447396", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 35693, "end": 38053, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "43b1e8a2-a3fa-419e-a3e7-a12e6eb516d1", "3": "f6abd2ef-4ada-4a16-8413-11e5e64845b6"}}, "__type__": "1"}, "f6abd2ef-4ada-4a16-8413-11e5e64845b6": {"__data__": {"text": "the array to the invocation transaction.\n\n##### Example\n\n```\nupdate 0x3096fb5cd0a2a95b29e8e92692f0be77c4cce06f NEP17.nef NEP17.manifest.json 0xf6a3f0fda46abdeacac9eda4600a354d0687c420\nContract hash: 0x3096fb5cd0a2a95b29e8e92692f0be77c4cce06f\nUpdated times: 0\nGas consumed: 3.3317182\nNetwork fee: 0.0448052\nTotal fee: 3.3765234 GAS\nRelay tx? (no|yes): y\nSigned and relayed transaction with hash=0x4587846a2cbc8574e16ce04e95e8c73d76b88250581d81291c23f05c215273ba\n```\n\n### relay\n\nAfter signing completed, this command can be used to broadcast the transaction information.  \n\n##### Syntax\n\n`relay <jsonObjectToSign>` \n\n##### Parameters\n\n`jsonObjectToSign`: The json string that records the transaction information.\n\n##### Example\n\n```\nneo> relay", "doc_id": "f6abd2ef-4ada-4a16-8413-11e5e64845b6", "embedding": null, "doc_hash": "5721afee85d065f420e849317a8a03ab679696d58d479efe3bc1565c97ad64ae", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 38031, "end": 38772, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "a1e36122-5261-44f2-ac8c-b87bd41b07d6", "3": "ace23ef0-2d5e-4a64-947a-ce30b78dccff"}}, "__type__": "1"}, "ace23ef0-2d5e-4a64-947a-ce30b78dccff": {"__data__": {"text": "the transaction information.\n\n##### Example\n\n```\nneo> relay {\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"},{\"type\":\"Signature\",\"value\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\"},{\"type\":\"Signature\",\"value\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0y", "doc_id": "ace23ef0-2d5e-4a64-947a-ce30b78dccff", "embedding": null, "doc_hash": "9ee87f7508bf4d06e88d78c6f8f9943c4b89fe85a68c8582fbc658424e5725e9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 38779, "end": 40355, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "f6abd2ef-4ada-4a16-8413-11e5e64845b6", "3": "93d59ac2-b665-49e8-bdbe-ec1990138649"}}, "__type__": "1"}, "93d59ac2-b665-49e8-bdbe-ec1990138649": {"__data__": {"text": "JWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"},{\"type\":\"Signature\",\"value\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\"},{\"type\":\"Signature\",\"value\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\",\"0302242b1dced63e1bf7eb14876f7ef026b79567f9c5be83de1943dd185ec28e68\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\",\"020df8858b66ff4d7b0a6a68d11ddedcc7d90d2a64ffa2cd087c4c5dabf4150b40\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\",\"025e8494903b93dc369f08a2bd7e221f574c75d9675591f04907cba9daeeb83d10\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\",\"038415d0be8dc12b61d3e3b76b98f464dfab7fddee74271c35e2de624bb51023a6\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"}}}} Data relay success, the hash is shown as follows:\n0xc65c3b3618823238b2b5589dba54c665f86310c85a3460f901cfb0030d4dbf28\n```\n\n### broadcast addr\n\nBroadcasts the IP address of a block.\n\n##### Syntax\n\n`broadcast addr <IPAddress> <port>`\n\n##### Example\n\n```\nneo> broadcast addr 127.0.0.1 10332\nneo> \n```\n\n### broadcast block\n\nBroadcasts a block.\n\n##### Syntax\n\n`broadcast block <block-hash> `\n\n`broadcast block <block-height> `\n\n##### Example\n\n```\nneo> broadcast block 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>", "doc_id": "93d59ac2-b665-49e8-bdbe-ec1990138649", "embedding": null, "doc_hash": "db6e75e475be5d98bcc674691824ad460db0383fa1e9bd894519e961f0592f0b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 40411, "end": 42097, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "ace23ef0-2d5e-4a64-947a-ce30b78dccff", "3": "e29f4f8f-87ac-4f44-976a-2497a0350f9e"}}, "__type__": "1"}, "e29f4f8f-87ac-4f44-976a-2497a0350f9e": {"__data__": {"text": "\nneo> broadcast block 537\nneo> \n```\n\n### broadcast getblocks\n\nBroadcasts the getblocks request.\n\n##### Syntax\n\n`broadcast getblocks <block-hash> `\n\n##### Example\n\n```\nneo> broadcast getblocks 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \n```\n\n### broadcast getheaders\n\nBroadcasts the getheaders request.\n\n##### Syntax\n\n`broadcast getheaders <block-hash> `\n\n##### Example\n\n```\nneo> broadcast getheaders 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \n```\n\n### broadcast getdata\n\nBroadcasts the getdata request.\n\n##### Syntax\n\n`broadcast getdata <inventory type> <payload> `\n\n##### Example\n\n```\nneo> broadcast getdata Block 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \nneo> broadcast getdata TX 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\nneo> broadcast getdata Consensus 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\n```\n\n### broadcast inv\n\nBroadcasts inventory data.\n\n##### Syntax\n\n`broadcast inv <inventory type> <payload> `\n\n##### Example\n\n```\nneo> broadcast inv Block 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \nneo> broadcast inv TX 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\nneo> broadcast inv Consensus 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\n```\n\n### broadcast transaction\n\nBroadcasts a transaction.\n\n##### Syntax\n\n`broadcast transaction <transaction hash> `\n\n##### Example\n\n```\nneo> broadcast transaction 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \n```\n\n### plugins\n\nShows all the loaded plugins.\n\n##### Syntax\n\n`plugins`\n\n##### Example\n\n```\nneo> plugins\nLoaded plugins:\n        ApplicationLogs     Synchronizes the smart contract log with the NativeContract log (Notify)\n        DBFTPlugin          Consensus plugin with dBFT algorithm.\n        LevelDBStore        Uses LevelDB to store the blockchain data\n        OracleService       Built-in oracle plugin\n        TokensTracker     Enquiries NEP-17 balances and transaction history of accounts through RPC\n        RpcServer           Enables RPC for the node\n        StatesDumper        Exports Neo-CLI status data\n        StateService        Enables MPT for the node\n```\n\n### install\n\nInstalls plugins.\n\n`install [Plugin name]` \n\nTo", "doc_id": "e29f4f8f-87ac-4f44-976a-2497a0350f9e", "embedding": null, "doc_hash": "d129722a45cc4654374ffe8a3dd925034074dd1476386f31dd0785513d727e0a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 42098, "end": 44445, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "93d59ac2-b665-49e8-bdbe-ec1990138649", "3": "20e9d1cc-d87c-4b29-a748-200420144ad5"}}, "__type__": "1"}, "20e9d1cc-d87c-4b29-a748-200420144ad5": {"__data__": {"text": "install\n\nInstalls plugins.\n\n`install [Plugin name]` \n\nTo install a plugin, enter the command as follows:\n\n```\nneo> install RpcServer\nDownloading from https://github.com/neo-project/neo-modules/releases/download/v3.1.0/RpcServer.zip\nInstall successful, please restart neo-cli.\n```\n\nFor information about all plugins refer to [Install Plug-ins](config.md).\n\n### dump storage\n\nExports all or the specified state data.\n\n##### Syntax\n\n`dump storage <key>`\n\n### export blocks\n\nExports the block data from the specified block height. The output can be used for offline synchronization. \n\n##### Syntax\n\n`export blocks <index>`\n\n##### Parameters\n\n`<index> `: The height of the starting block from which the data is exported.\n\n### start consensus\n\nStarts the consensus on the premise that the wallet has a consensus authority, allows consensus authority to be obtained on the main net through voting. This command requires  installation of the DBFTPlugin. If a private chain is deployed, public key of the consensus can be set up in the `protocol.json`. For more information refer to [Setting up Private Chain](../../develop/network/private-chain/private-chain2.md).\n\n### start oracle\n\nStarts Oracle. This command requires installation of the OracleService plugin. The Oracle service is enabled only if the public key of the current wallet address has been assigned the Oracle role by the committee.\n\n### stop oracle\n\nStops Oracle. This command requires installation of the OracleService plugin.\n\n### state root\n\nQueries the state root with index. This command requires installation of the StateService plugin.\n\n##### Syntax\n\n`state root <index>`\n\n##### Parameters\n\n`<index> `: The block index\n\n```\nneo> state root", "doc_id": "20e9d1cc-d87c-4b29-a748-200420144ad5", "embedding": null, "doc_hash": "74dd3e4c6c2cca7c3896a1b36e9b641f2adbb3bdd99480c0b7a7b88bf15805b5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 44394, "end": 46098, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "e29f4f8f-87ac-4f44-976a-2497a0350f9e", "3": "d1da0c5d-2624-440c-bfcd-e5761b8b60b5"}}, "__type__": "1"}, "d1da0c5d-2624-440c-bfcd-e5761b8b60b5": {"__data__": {"text": "`: The block index\n\n```\nneo> state root 20000\n{\"version\":0,\"index\":20000,\"roothash\":\"0x0121262f9833b21eae7b8d375c1c334fdd4d4500f1d3fad2da669d5b83e94157\",\"witness\":{\"invocation\":\"DECny9LhRZpH61UNC/sXG9WEBFMl7cf1rZPT7U0tCvZa\\u002BHs6rG/fz2gKTfvLBUp5lcmGDlrMlKCCfKoougYGt7s4DEAuhkhPROcr2FM5SSHCl5LFWSTrcvxa6rvmLc1NGXwpgcRHV9LY5/H6q5SnwdAW3DSspap93FjvSHqU48Mn41nGDEDI5G6bGhGvyLl8rZbT0LzAHRbQUZ2OWIcnFi/Jo/QtwZoCGrK6L3g2miCXsgkckzUsJ1DoruMzKgVEFb4t/KYBDEAWC2fagW\\u002BOt6iUGyo\\u002BNu0zC1jl105uLyv5bY4tE03vBjbJDTm1T3o17jC8b3HMaeYMro2IGZTSOGt3b9YF6ntiDEBaMGwM/\\u002Bd\\u002BkTHmBb9c\\u002BuCfMkEHOez8XuyoSZotQdDCtaVMCT4wHwIHspxeGGp1iVIEtEYFhJl0EfPEObcO0YfGDEBCC3/hBNLGmusDpr4gDfD6asqjyNCGPNerYIHunu2gsOr6kr3uQJBFqaXSYp\\u002BCkz9HBrc6Cq2fNz4HPn/tIo5S\",\"verification\":\"FgwhAwAqLhjDnN7Qb8Yd2UoHuOnz\\u002BgNqcFvu\\u002BHZCUpVOgtDXDCECAM1gQDlYokm5qzKbbAjI/955zDMJc2eji/a1GIEJU2EMIQIhkM6Z1WxnvBcDTCedOLpwWTZHFtEduMhLpf3Z/AJgEQwhAzU7wXKtEGB62apHDocfRKJil\\u002ByBAIP6J8aLnJSjTL/5DCECNxinjeXEq5HT3NK2m0dPLTUIuN3EeHiMupRY6Sj\\u002B/qYMIQKXhyDsbFxYdeA0d\\u002BFsbZj5AQhamA13R64ysGgh19j6UwwhAqPXy4P0JIWNvpx5c9df/ut8OUCIRJ9onGacn09vEIVODCEDySUJ5CjN1/ek/dSpfGeJELQPFGXd3k8En3MlrzOAeSkYC0ETje\\u002Bv\"}}\n```\n\n### get proof\n\nGets proof with root hash, contract hash, and storage key.\n\n##### Syntax\n\n`get proof <root hash> <script hash> <key>`\n\n##### Parameters\n\n* `<root hash>`: hash of the state root.\n* `<script hash>`: Contract hash\n* `<key>`: key of the storage; Base64-encoded.\n\n```\nneo> get proof 0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca 0x79bcd398505eb779df6e67e4be6c14cded08e2f2", "doc_id": "d1da0c5d-2624-440c-bfcd-e5761b8b60b5", "embedding": null, "doc_hash": "9aff9605891a1c9ceebe7c6685b3d2028831447d6b45d4b83a39facb0de88fb8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 46117, "end": 47701, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "20e9d1cc-d87c-4b29-a748-200420144ad5", "3": "c350152e-381e-4743-9213-375d1098e396"}}, "__type__": "1"}, "c350152e-381e-4743-9213-375d1098e396": {"__data__": {"text": "Fw==\nBfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\n```\n\n### verify proof\n\nVerifies with root hash and proof.\n\n##### Syntax\n\n`verify proof <root hash> <proof>`\n\n##### Parameters\n\n* `<root hash>`: hash of the state root.\n* `<proof>`: proof of the state root; Base64-encoded.\n\n```\nneo> verify proof 0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca", "doc_id": "c350152e-381e-4743-9213-375d1098e396", "embedding": null, "doc_hash": "0909de08639d1236ffc1be96b6b09a6c2f8d2b0b6f43424158b5ff76d33bd9d3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 47736, "end": 48809, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "d1da0c5d-2624-440c-bfcd-e5761b8b60b5", "3": "5ed13d50-b799-4583-b966-ccef64415850"}}, "__type__": "1"}, "5ed13d50-b799-4583-b966-ccef64415850": {"__data__": {"text": "Bfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\nAAI=\n```\n\n", "doc_id": "5ed13d50-b799-4583-b966-ccef64415850", "embedding": null, "doc_hash": "150b60d28cf12953326cbebb6f2a5929a5affd051d9f13ac27be90509fca3230", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}, "node_info": {"start": 48810, "end": 49577, "_node_type": "1"}, "relationships": {"1": "3ed333957855992aea21bf7831656a79429d11a7", "2": "c350152e-381e-4743-9213-375d1098e396"}}, "__type__": "1"}, "602510b7-5a3f-4a2e-aa5e-9b2e43b61cda": {"__data__": {"text": "# Configuring and Starting Neo-CLI \n\nAfter installation of Neo-CLI, this section we will walk you through the necessary configurations before running Neo-CLI and the steps to start Neo-CLI using commands. \n\n## Modifying configuration files\n\nNeo-CLI accesses the configuration file `config.json`  during execution. You need to make necessary configurations in the file before starting Neo-CLI.\n\n### Configuring a wallet\n\nTo make Neo-CLI automatically open a wallet when running, you can configure the wallet in  `config.json`  beforehand, as follows:\n\n- `Path`: the wallet path\n- `Password`: the wallet password. Note that the password configured here is displayed in plaintext!\n- `IsActive`: Set to `true` to allow Neo-CLI to open the wallet automatically.\n\nHere is an example:\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": false,\n      \"Active\": false\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 10333,\n      \"WsPort\": 10334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"wallet.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 860833102,\n    \"AddressVersion\": 53,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTransactionsPerBlock\": 512,\n    \"MemoryPoolMaxTransactions\": 50000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"InitialGasDistribution\": 5200000000000000,\n    \"ValidatorsCount\": 7,\n    \"StandbyCommittee\": [\n      \"03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c\",\n      \"02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093\",\n      \"03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a\",\n      \"02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554\",\n      \"024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d\",\n      \"02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e\",\n      \"02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70\",\n      \"023a36c72844610b4d34d1968662424011bf783ca9d984efa19a20babf5582f3fe\",\n     ", "doc_id": "602510b7-5a3f-4a2e-aa5e-9b2e43b61cda", "embedding": null, "doc_hash": "34020bf379e37800fc6a230b06e5d2286ccf71294581e4388ce296424f0f6c9e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/config.html"}, "node_info": {"start": 0, "end": 2212, "_node_type": "1"}, "relationships": {"1": "2f705619e09b0779c5868a0c30a13034caf69c00", "3": "1924cda5-ac27-4268-acb1-73f34c42fd0e"}}, "__type__": "1"}, "1924cda5-ac27-4268-acb1-73f34c42fd0e": {"__data__": {"text": "     \"03708b860c1de5d87f5b151a12c2a99feebd2e8b315ee8e7cf8aa19692a9e18379\",\n      \"03c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a050\",\n      \"03204223f8c86b8cd5c89ef12e4f0dbb314172e9241e30c9ef2293790793537cf0\",\n      \"02a62c915cf19c7f19a50ec217e79fac2439bbaad658493de0c7d8ffa92ab0aa62\",\n      \"03409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd0\",\n      \"0288342b141c30dc8ffcde0204929bb46aed5756b41ef4a56778d15ada8f0c6654\",\n      \"020f2887f41474cfeb11fd262e982051c1541418137c02a0f4961af911045de639\",\n      \"0222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c30\",\n      \"03d281b42002647f0113f36c7b8efb30db66078dfaaa9ab3ff76d043a98d512fde\",\n      \"02504acbc1f4b3bdad1d86d6e1a08603771db135a73e61c9d565ae06a1938cd2ad\",\n      \"0226933336f1b75baa42d42b71d9091508b638046d19abd67f4e119bf64a7cfb4d\",\n      \"03cdcea66032b82f5c30450e381e5295cae85c5e6943af716cc6b646352a6067dc\",\n      \"02cd5a5547119e24feaa7c2a0f37b8c9366216bab7054de0065c9be42084003c8a\"\n    ],\n    \"SeedList\": [\n      \"seed1.neo.org:10333\",\n      \"seed2.neo.org:10333\",\n      \"seed3.neo.org:10333\",\n      \"seed4.neo.org:10333\",\n      \"seed5.neo.org:10333\"\n    ]\n  }\n}\n```\n\nWhere:\n\n- `ConsoleOutput`: Whether to print log information on console. `true` means foreground and background printing, while `false` means background logging.\n- `Active`: Whether to enable Log\n- `Engine`: It defaults to LevelDBStore, which means the engine used by the blockchain to store data.\n- `PluginURL`: The downloading URL of the plugin, which will be used when using the CLI install command.\n\n### Connecting the node to network\n\nNeo-CLI connects to N3 main net by default. To connect the node to test net, replace the content of `config.json` with the content of  `config.testnet.json`. \n\nTo connect the node to your private net, refer to [Setting up Private Chain](../../develop/network/private-chain/solo.md).\n\n## Installing plugins\n\nSome additional functionalities are individually encapsulated in plug-ins for the purpose of improving node security, stability, and flexibility. The user can select the desired extension functionality instead of invoking it with additional parameters every time starting neo-cli, thus avoiding many human errors and some", "doc_id": "1924cda5-ac27-4268-acb1-73f34c42fd0e", "embedding": null, "doc_hash": "1630bc7044b071b4fdb255f12364daa9db2fe9dcf5fe16441a102bcc8cf22aba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/config.html"}, "node_info": {"start": 2213, "end": 4452, "_node_type": "1"}, "relationships": {"1": "2f705619e09b0779c5868a0c30a13034caf69c00", "2": "602510b7-5a3f-4a2e-aa5e-9b2e43b61cda", "3": "86f4cfba-37fd-4a4e-abb5-eb305789f36c"}}, "__type__": "1"}, "86f4cfba-37fd-4a4e-abb5-eb305789f36c": {"__data__": {"text": "additional parameters every time starting neo-cli, thus avoiding many human errors and some tedious instructions such as opening a wallet and calling APIs. \n\nYou can choose one of the following ways to install plugins:\n\n- Download the plugin package from GitHub\n- Use the CLI command to install automatically\n\n### Downloading plugins from GitHub\n\nDownload the plugins you need from the following table, and then unzip the packages under the neo-cli root directory.\n\n<table class=\"table table-hover\">\n    <thead>\n        <tr>\n            <th style=\"width: 25%;\">Plugin</th>\n            <th style=\"width: 35%;\">Description</th>\n            <th style=\"width: 20%;\">API Included</th>\n            <th style=\"width: 20%;\"></th>\n        </tr>\n    </thead>\n    <tbody>\n            <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/ApplicationLogs.zip\">ApplicationLogs</a>\n            </td>\n            <td>Synchronizes the smart contract log with the NativeContract log (Notify)</td>\n            <td><a href=\"../../reference/rpc/latest-version/api/getapplicationlog.html\">getapplicationlog</a></td>\n            <td>Recommended</td>\n        </tr>\n          <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/DBFTPlugin.zip\">DBFTPlugin</a>\n            </td>\n            <td>dBFT consensus plugin</td>\n            <td></td>\n            <td>Mandatory when served as a consensus node</td>\n        </tr>   \n        <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/LevelDBStore.zip\">LevelDBStore</a>\n            </td>\n            <td>Uses LevelDB to store the blockchain data</td>\n            <td></td>    \n            <td>Mandatory</td>\n        </tr>\n             <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/OracleService.zip\">OracleService</a>\n            </td>\n            <td>Oracle service plugin</td>\n           ", "doc_id": "86f4cfba-37fd-4a4e-abb5-eb305789f36c", "embedding": null, "doc_hash": "3a377f381a918b0552d41dd28607da9fbd3e1593913774bb15b8c514760a875d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/config.html"}, "node_info": {"start": 4374, "end": 6455, "_node_type": "1"}, "relationships": {"1": "2f705619e09b0779c5868a0c30a13034caf69c00", "2": "1924cda5-ac27-4268-acb1-73f34c42fd0e", "3": "905f9d27-3a16-466b-ba3a-8d7a3980754c"}}, "__type__": "1"}, "905f9d27-3a16-466b-ba3a-8d7a3980754c": {"__data__": {"text": "service plugin</td>\n            <td></td>\n            <td>Mandatory when served as an Oracle node</td>\n        </tr>\n        <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/RocksDBStore.zip\">RocksDBStore</a>\n            </td>\n            <td>Uses RocksDBStore to store the blockchain data</td>\n            <td></td>\n            <td>An alternative to LevelDBStore</td>\n        </tr>\n                <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/TokensTracker.zip\">TokensTracker</a>\n            </td>\n            <td>Enquiries NEP-11 and NEP-17 assets balance and transactions history of accounts through RPC</td>\n            <td><a href=\"../../reference/rpc/latest-version/api/getnep11balances.html\">getnep11balances</a><br><a href=\"../../reference/rpc/latest-version/api/getnep11properties.html\">getnep11properties</a><br><a href=\"../../reference/rpc/latest-version/api/getnep11transfers.html\">getnep11transfers</a><br><a href=\"../../reference/rpc/latest-version/api/getnep17balances.html\">getnep17balances</a><br><a\n                    href=\"../../reference/rpc/latest-version/api/getnep17transfers.html\">getnep17transfers</a></td>\n            <td>Recommended</td>\n        </tr>\n        <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/RpcServer.zip\">RpcServer</a>\n            </td>\n            <td>Enables RPC for the node</td>\n            <td><a href=\"../../reference/rpc/latest-version/api.html\"> RPC API </a></td>\n            <td>Mandatory</td>\n        </tr>\n        <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/StatesDumper.zip\">StatesDumper</a>\n            </td>\n            <td>Exports Neo-CLI status data.</td>\n           ", "doc_id": "905f9d27-3a16-466b-ba3a-8d7a3980754c", "embedding": null, "doc_hash": "981837f322178dce1b25068465a8911ffa08823d2c7710cf74b6575531a763a7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/config.html"}, "node_info": {"start": 6516, "end": 8431, "_node_type": "1"}, "relationships": {"1": "2f705619e09b0779c5868a0c30a13034caf69c00", "2": "86f4cfba-37fd-4a4e-abb5-eb305789f36c", "3": "80e00182-c238-4303-a1dd-80c98df9a180"}}, "__type__": "1"}, "80e00182-c238-4303-a1dd-80c98df9a180": {"__data__": {"text": "status data.</td>\n            <td></td>\n            <td>Optional</td>\n        </tr>  \n         <tr>\n            <td><a\n                    href=\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/StateService.zip\">StateService</a>\n            </td>\n            <td>StateRoot consensus service plugin</td>\n            <td><a href=\"../../reference/rpc/latest-version/api/getstateroot.html\">getstateroot</a><br>\n                <a href=\"../../reference/rpc/latest-version/api/getproof.html\">getproof</a><br>\n                <a href=\"../../reference/rpc/latest-version/api/verifyproof.html\">verifyproof</a><br>\n                <a href=\"../../reference/rpc/latest-version/api/getstateheight.html\">getstateheight</a>\n            </td>\n            <td>Mandatory when served as a StateRoot consensus node</td>\n        </tr>   \n    </tbody>\n</table>\n\n### Downloading plugins using command\n\nIt is easier to automatically install or uninstall the plugin using commands, for example:\n\n```\nneo> install StatesDumper\nDownloading from https://github.com/neo-project/neo-modules/releases/download/v3.1.0/StatesDumper.zip\nInstall successful, please restart neo-cli.\n```\n\n```\nneo> uninstall StatesDumper\nUninstall successful, please restart neo-cli.\n```\n\nAfter installation, restart Neo-CLI for the plugin to take effect.\n\n## Starting the NEO node\n\nOpen the command line, navigate to the Neo-CLI directory, and enter the following command to start the Neo node:\n\nOn **Windows 10**:\n\n```\ndotnet neo-cli.dll\n```\n\nor \n\n```\nneo-cli.exe\n```\n\nOn **Linux (ubuntu 16.04/18.04)**:\n\n```\n./neo-cli\n```\n\nor\n\n```\ndotnet neo-cli.dll\n```\n\n> [!Note]\n>\n> If you  use dotnet install .net core in advance.\n\nIf you want the external program to access the node API need to open the firewall port: 10331-10334, 20331-20334\n\n> [!WARNING]\n>\n> If you open the API service and the wallet in Neo-CLI, you need to set up your firewall policy. For example, set a whitelist for the firewall to only allow access to these ports by whitelisted IP addresses. If completely opening the service to external network, others may be able to export the private key or transfer assets using API.", "doc_id": "80e00182-c238-4303-a1dd-80c98df9a180", "embedding": null, "doc_hash": "9e99b48455a5754f14c731190aeae3b8a087bfb3518175ed91581ae2bd365b83", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/config.html"}, "node_info": {"start": 8421, "end": 10575, "_node_type": "1"}, "relationships": {"1": "2f705619e09b0779c5868a0c30a13034caf69c00", "2": "905f9d27-3a16-466b-ba3a-8d7a3980754c"}}, "__type__": "1"}, "337e89c4-d755-484b-b01e-87bab502584d": {"__data__": {"text": "# Installing Neo-CLI\n\nYou can choose one of the following ways to install Neo-CLI:\n\n- Install the official Neo-CLI released package\n- or publish Neo-CLI source code from GitHub into an executable file. If you use macOS, this way is highly recommended.\n\nThis document will describe both ways.\n\n## Hardware requirements\n\nThe following table lists the minimum and recommended hardware requirements for the computer running Neo-CLI.\n\n|           | Minimum                                              | Recommended                                          |\n| --------- | ---------------------------------------------------- | ---------------------------------------------------- |\n| System    | Windows 10<br/>Ubuntu 16.04/18.04<br/>CentOS 7.4/7.6 | Windows 10<br/>Ubuntu 16.04/18.04<br/>CentOS 7.4/7.6 |\n| CPU       | Dual core                                            | Quad core                                            |\n| Memory    | 8G                                                   | 16G                                                  |\n| Hard Disk | 50G SSD hard drive                                   | 100G SSD hard drive                                  |\n\n## Installing Neo-CLI package\n\n1. Download the latest [Neo-CLI](https://github.com/neo-project/neo-cli/releases) package according to your operating system on Github and unzip it.\n\n2. On Linux, install the LevelDB and SQLite3 dev packages. \n\n  **Ubuntu:**\n\n  ```\n  sudo apt-get install libleveldb-dev sqlite3 libsqlite3-dev libunwind8-dev\n  ```\n\n  **CentOS:**\n\n  ```\n  sudo wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n  sudo yum -y install epel-release-latest-7.noarch.rpm\n  sudo yum  -y install leveldb-devel libunwind-devel libsqlite3x-devel sqlite3*\n  ```\n\n  If you use RocksDB as the storage, modify config.json, as shown below\uff1a\n\n  ```\n  \"Storage\": {\n     \"Engine\": \"RocksDBStore\"\n   },\n  ```\n\n  and then enter the following command on ubuntu 18.04\uff1a\n\n  ```\n  sudo apt-get install librocksdb-dev\n  ```\n\n  If using Windows, you can skip this step as those files are already included in the installation package.\n\n## Publishing from Neo-CLI source code\n\nYou can download and compile the Neo-CLI source directly from Github.\n\n### Installing required files\n\n1. Git clone Neo-CLI source code from", "doc_id": "337e89c4-d755-484b-b01e-87bab502584d", "embedding": null, "doc_hash": "d8545a8bc8beba59155361c099f6c835386ae3b3794c4737fc17bb80e8d84050", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/setup.html"}, "node_info": {"start": 0, "end": 2300, "_node_type": "1"}, "relationships": {"1": "678988222db96675acd73ba5c66bf71548d5db33", "3": "0c806fac-543a-44c0-b590-292ca01b6128"}}, "__type__": "1"}, "0c806fac-543a-44c0-b590-292ca01b6128": {"__data__": {"text": "Installing required files\n\n1. Git clone Neo-CLI source code from [Github](https://github.com/neo-project/neo-node) or using the following command:\n\n  ```\n $ git clone https://github.com/neo-project/neo-node.git\n  ```\n\n2. Download [LevelDB](https://github.com/neo-ngd/leveldb/releases) and unzip the package for later use.\n\n3. Install the latest version of  [.NET Core Runtime](https://dotnet.microsoft.com/download/dotnet-core/current/runtime)\n\n### Publishing using Visual Studio (Windows)\n\nIf you has Visual Studio 2022 installed on your Windows system, this way is recommended:\n\n1. In Visual Studio, open the project file neo-node.sln.\n2. In the Solution panel, right click `neo-cli` and select `Publish`.\n3. Go to the directory where the compiled files are outputted and copy the libleveldb.dll downloaded before to here.\n\n### Publishing using command line (Windows/Linux/macOS)\n\nYou can also use .NET Core CLI to pubish the project. For more information refer to [dotnet publish](https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-publish).\n\n1. Run the following command in the command line:\n  \n   ```\n   cd neo-node\\neo-cli\n   dotnet restore\n   dotnet publish -c release -r <RUNTIME_IDENTIFIER>\n   ```\n   Where `<RUNTIME_IDENTIFIER>` should be replaced by the related [system platform RID](https://docs.microsoft.com/zh-cn/dotnet/core/rid-catalog), e.g.  `win-x64`, `linux-x64`, or `osx-x64`.\n\n2. Go to the directory where the compiled files are outputted and copy the libleveldb.dll downloaded before to here.\n\n", "doc_id": "0c806fac-543a-44c0-b590-292ca01b6128", "embedding": null, "doc_hash": "e6eba7fd35d58238be33576e790a9ef0d4d96286f744befb5f0d4a2779d2f4ba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/setup.html"}, "node_info": {"start": 2236, "end": 3760, "_node_type": "1"}, "relationships": {"1": "678988222db96675acd73ba5c66bf71548d5db33", "2": "337e89c4-d755-484b-b01e-87bab502584d"}}, "__type__": "1"}, "73a229ce-74f5-4115-9353-0dde44c11262": {"__data__": {"text": "# Advanced Functions\n\n## Election and Voting\n\nUsing Neo-GUI you can elect candidates and vote for Neo consensus nodes. After all the Neo consensus nodes reach a consensus through the DBFT algorithm, new blocks are generated. Voting for consensus nodes is conducted constantly in real time in the Neo blockchain. The main process is:\n\n1. Neo nodes register as candidates\n2. NEO token holders vote for candidates\n3. Neo blockchain determines the consensus nodes based on the number of candidates and their votes cast.\n\n### Election\n\nAfter the candidates are registered, the NEO token holders can vote for consensus nodes. Before you participate in the election make sure:\n\n- You open the wallet\n- There are enough GAS in your wallet (approximately 1000.12 GAS) for payment of  candidate registration.\n\nTo register as a candidate:\n\n1. In Neo-GUI home page click `Advanced` -> `Election`\n\n2. Select the public key of the account in the list and click `OK`. \n\n   > [!Note]\n   >\n   > The multi-signature address is not displayed in the list as it cannot be registered to a candidate.\n\nAfter the transaction is sent successfully, you can do the following to check if the candidate has been registered:\n\nClick `Advanced` -> `Vote` to enter the **Vote** page. The candidate's public key should be displayed in the candidate list:\n\n![](../assets/guiValidators.png)\n\n### Voting\n\nEach Neo node can vote for the candidates. The number of NEO in the current voting account will be automatically calculated as the number of the candidate's votes. For example, if you vote for a candidate from an account that has 100 NEO, the candidate receives 100 votes. If NEO in the account is spent after the vote, the candidate' votes will simultaneously be decreased to the current NEO balance.\n\nTo vote:  \n\n1. In Neo-GUI open a wallet and then click `Advanced` -> `Vote`\n2. Choose the account to vote\n3. In the Candidates field, enter the public key of the candidate to vote. \n4. Click `OK`. \n\nAfter voting you can check the votes in the candidates list after the block data has been updated.\n\n## Signature\n\nWhen initiating any transaction from a multi-signature address, e.g. transferring assets, invoking a contract, or voting, the transaction needs to obtain the minimum number of signatures to carry out the transaction.\n\n1. When GUI prompts there is insufficient signature after you send a transaction from a multi-signature address, copy the transaction information displayed in the pop-up window. \n\n2. In Neo-GUI, click `Advanced`-> `Signature`.\n\n3. Paste the transaction information copied before into the Transaction Json box, and then click `Signature`.\n\n   ![](../assets/sign_2.png)\n\n4. Copy the output data, enter the next wallet participating in the signature, and repeat that same operation until the signature is completed.\n\n   ![](../assets/sign_3.png)\n\n5. Click `Broadcast`.\n\n   ![](../assets/sign_4.png)\n\n", "doc_id": "73a229ce-74f5-4115-9353-0dde44c11262", "embedding": null, "doc_hash": "2f433f0bfc716d6d6fd04e3bc1bff72d44d99a1298dacea86f41c25a7e41f318", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/advanced.html"}, "node_info": {"start": 0, "end": 2899, "_node_type": "1"}, "relationships": {"1": "76da6c0201680703b0965a3b79215a10c2e802e8"}}, "__type__": "1"}, "c391e37b-c6a0-41fe-9862-10c701d57fb7": {"__data__": {"text": "# Viewing Blockchain Information\n\nYou can click `Block` on the Neo-GUI main page to enter the blockchain page to view detailed information of blocks, transactions, and assets on the Neo blockchain.\n\n## Block\n\nThe block is a logical structure and the most basic unit of the blockchain. Data is permanently recorded on the blockchain via blocks. For information about the basic concept of the block refer to [Block](../../basic/concept/blockchain/block.md).\n\n### Viewing block list\n\nThe Block List page shows the newly generated blocks. You can view each block information such as block height, generation time, block hash, the number of transactions included, and etc.\n\nYou can search a specific block by entering the block index in the search box of the page.\n\nTo view more detailed information of the block, click the block entry in the list.\n\n![](../assets/guiBlocks.png)\n\n### Block Information\n\nThe Block Info page displays the following information:\n\n- Block header: basic data of the block, such as block height, generation time, block size, block hash, random number, witness, etc.\n- Transaction list: all transactions packaged in this block. Click any of transaction items to view details.\n\n\n## Transaction\n\nA block can have one or more transactions. A transaction may be a collection of one or more transfers, or an invocation of a smart contract.\n\nYou can view the transactions of two states in the Transaction page:\n\n- Transactions: all transactions packaged on the blockchain.\n- Pending: transactions in the memory pool of the node, waiting to be packaged on the blockchain.\n\n### Transaction List\n\nThe transaction list shows the confirmed transactions on the current blockchain.  You can enter the transaction details page by clicking any of transaction entries.\n\n![](../assets/guiTransaction.png)\n\nYou can view the following information by switching tabs in this page:\n\n- **Transaction**: Displays the basic information of the transaction, such as the block, size, time stamp, as well as the transaction transfer record and the witness of the transaction.\n- **Notifications**: Displays the execution log of the smart contract in the transaction, including information such as whether the NEP-17 transfer was successful.\n\nFor information about the basic concept of transactions refer to [Transaction](../../basic/concept/transaction.md).\n\n## Assets\n\nAll digital assets in Neo N3 are contract assets, including NEO and GAS.\n\n### Asset list\n\nThe Asset list shows all assets on the blockchain, including information such as the asset script hash, precision, and etc.\n\nClick on the specific asset entry to enter the asset details page. Here you can view all transaction records related to the asset.\n", "doc_id": "c391e37b-c6a0-41fe-9862-10c701d57fb7", "embedding": null, "doc_hash": "c78887a62e624ce61b952666ecad0cbea2451f34d780303b4962ace24855a1f5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/blockchain.html"}, "node_info": {"start": 0, "end": 2707, "_node_type": "1"}, "relationships": {"1": "baddb1bbf38fb3141d460051bfe189358a8878c4"}}, "__type__": "1"}, "2e4e3451-57f6-4a53-ad87-5ef9f4863397": {"__data__": {"text": "# Contract\n\nIn the Neo-GUI homepage click **Contract** to enter the contract page, where you can quickly search, deploy, or invoke a contract.\n\n## Searching a contract\n\nIn the search box, you can search for a contract by its contract hash.\n\n![](../assets/guiSearchContract.png)\n\nUpon searching the contract details page is displayed, where you can view the following information:\n\n-  `Contract Hash`: The hash generated by the contract script using the RIPEMD-160 algorithm.\n-  `ID`\uff1aThe serial number of the contract, where negative numbers represent native contracts and positive numbers represent ordinary smart contracts.\n- Contract methods&notifications: methods and events/notifications included in the contract, including the method name, parameter, and returned value details.\n\n## Deploying a contract\n\nTo deploy a contract on the blockchain, open a wallet first and then do the following:\n\n1. Go to the **Deploy Contract** page.\n\n2. Select the nef and manifest files compiled along with the contract previously.\n\n   ![](../assets/guiDeployContract.png)\n\n3. Click `Trial Run` to test running and check the result.\n\n   If something goes wrong, there may be these reasons:\n\n   - The contract already exists\n   - nef file and manifest file do not match\n   - Nef file or manifest error\n   - Insufficient handling fee\n\n4. If the trial run goes successfully, click `Deploy` to confirm the deployment.\n\nAfter the contract is deployed on the blockchain successfully, you can search and invoke the contract with the contract hash.\n\nFor more information refer to [Deploying Smart Contracts](../../develop/deploy/deploy.md).\n\n## Invoking a contract\n\nAfter the contract deployed on the blockchain you can enter the **Invoke** page to invoke the contract.\n\n1. Enter the contract script hash in the search box and click `Search` .\n\n   The methods and parameters included in the current contract are displayed. These information was obtained from the contract manifest file on the blockchain.\n\n2. Select the desired method and fill in the parameters. Suppose we invoke a transfer method in the nep17 standard, fill in the following\uff1a\n\n   + `from`/`to`: Addresses you transfer assets from and to. You can select one of the following data types and enter corresponding string:\n\n     + Address - standard address\n     + Hash160 - endian hash of the address\n     + ByteArray - little endian hash (Base64-encoding) of the address\n\n     You can use the Data Transform tool built in Neo-GUI to convert the wallet address into required string.\n\n     ![](../assets/datatransf_1.png)\n\n   + `amount`\uff1a1*10000 (accuracy)\n\n     When invoking the tranfer method in the nep17 standard, the amount filled in needs to be multiplied by the nep17 accuracy.\n\n   ![](../assets/guiInvokeContract.png)\n\n   + `Cosigners`: (Optional) In case that cosigners are required by some methods when invoked, you need to add one or multiple standard accounts in the Cosigners field.\n\n4. Click `Test Invoke` to test running and check the result.\n\n   A trial run just creates a NeoVM locally and simulates execution. It does not affect the blockchain.\n\n5. If the trial run goes successfully, click `Invoke`.\n\nFor more information refer to [Invoking Smart Contracts](../../develop/deploy/invoke.md).\n\n", "doc_id": "2e4e3451-57f6-4a53-ad87-5ef9f4863397", "embedding": null, "doc_hash": "19f4965b83be374c854b92deb2baaac15965b4d7eb4ee038f28d5d766013160b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/contract.html"}, "node_info": {"start": 0, "end": 3254, "_node_type": "1"}, "relationships": {"1": "c9955194a150523643ef678ba71151822e97c72f"}}, "__type__": "1"}, "d16d6091-746f-4ab1-a592-eb91ef1b4b96": {"__data__": {"text": "# Installing Neo-GUI\n\nNeo-GUI is a full-node application on the Neo blockchain. It uses Electron cross-platform technology and currently can run on Windows 10 and macOS systems.\n\nIt has these main functions:\n\n- Viewing and searching blockchain information\n- Basic wallet operations, including creating wallets, importing wallets, transferring transactions, etc.\n- Deploying and invoking smart contracts\n- Election and voting consensus nodes\n\n## Downloading the client\n\nNeo-GUI is an open source project, thus you can download the installation package of the corresponding system version on [GitHub](https://github.com/neo-ngd/Neo3-GUI/releases) , and complete the installation according to the prompts.\n\n> [!Note]\n>\n> - Make sure your Windows / macOS system has [.NET Core 5.0](https://dotnet.microsoft.com/download/dotnet-core/current/runtime) installed.\n>\n> - When installing on the Windows system, do not install Neo-GUI under the default path C:\\Program Files, or you have to run the client with the administrator privileges to connect the client to the network and download the blockchain data.\n\n## Connecting to the network\n\nAfter installation Neo-GUI connects to the N3 main net automatically. \n\nTo connect the node to test net, go to any page and click **Settings** in the lower left corner. Then check **Testnet**.\n\nIf you have already built a private chain (see [Setting up private chain](../../develop/network/private-chain/solo.md)), you can also connect Neo-GUI to it.\n\n1. Find the `config.json` file of your private chain.\n\n   Make sure that the address port configured in `config.json` SeedList can be accessed from this machine.\n\n2. Go to the path `resources\\build-neo-node` under Neo-GUI installation directory and find the file `config.private.json`  \n\n3. Replace the content of `config.private.json` with the content of config.json you found in Step 1\n\n4. Run Neo-GUI and go to any page.\n\n5. Click `Settings` in the lower left corner.\n\n6. Under **Network** check `Privatenet`.\n\n   ![](../../assets/guinetwork.png)\n\nAfter a while, when you see the block synchronization data displayed at the top of the main page is increasing, that indicates your client has connected to the network successfully. ", "doc_id": "d16d6091-746f-4ab1-a592-eb91ef1b4b96", "embedding": null, "doc_hash": "f287715578767df692d90fbbba94a0e884e43d68091ca7946b75472a8bf0cee6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/install.html"}, "node_info": {"start": 0, "end": 2216, "_node_type": "1"}, "relationships": {"1": "3743ab5933f8b5a7ac780947ff268f9548093bf9"}}, "__type__": "1"}, "7aedbf37-aa17-4ee2-92ac-083114bb7c84": {"__data__": {"text": "# Wallet\n\nThe wallet is a database file of Neo-GUI used to store Neo account and asset information in the account. This file is very important and must be properly kept and safely backed up.\n\n> [!CAUTION]\n>\n> Do not open or create a wallet on an insecure computer. Once the wallet file or wallet password is lost, it will cause the loss of your assets. So back up your wallet file securely, keep it safe, and remember your wallet password.\n\n## Creating a wallet\n\n1. In Neo-GUI main page click `Wallet` -> `New Wallet Database`.\n\n2. Select the wallet file storage path, set the file name, and then click `Save`.\n\n3. Enter `Password` and `Re-Password` and save your own password.\n\n4. Click `OK` and the wallet is successfully created, which by default comes with a standard account.\n\n> [!Warning]\n>\n> After the wallet is created, please back up the wallet file safely;\n>\n> It is not recommended to save your wallet files directly under the neo-gui root directory, or you may lose your wallet files when upgrading the software.\n\n## Opening a wallet\n\n1. In Neo-GUI main page click `Wallet` -> `Open Wallet Database`.\n2. Select the wallet and enter the password. Click `OK` to open the wallet.\n\n> [!Note]\n>\n> The wallets created in Neo Legacy cannot be opened in Neo3-GUI. To work around this issue you can import the wallet to Neo3-GUI through the private key.\n\n## Importing a wallet\n\nNeo-GUI supports importing wallets through the private key and encrypted private key. Importing  mnemonics will be supported in the future.\n\n## Account operations\n\n### Viewing account list\n\n![](../assets/guiWallet.png)\n\nAfter creating or opening the wallet, you will go to the account list page, which displays the following information:\n\n- Account list: all account addresses in the wallet, and the number of NEO and GAS in each account.\n\n- Asset list: all asset types and balance in the wallet, including NEO, GAS and other NEP-17 assets, etc.\n\n  The GAS balance shows the amount of GAS claimed, and the Claim GAS button at the bottom of the page shows the amount of unclaimed GAS. To withdraw the GAS into the account, click the button.\n\nClicking on the account address you can enter a new page to view the private key or delete the address.\n\n\n> [!CAUTION]\n>\n> At no point should the private key be disclosed to others. Once the private key is disclosed, it may result in the loss of your assets.\n\n### Creating addresses\n\nYou can create both standard addresses and multi-signature addresses in a wallet account. A multi-signature address is a contract address composed of multiple public keys, requiring one or more parties to sign to transfer assets. For example, after building a private chain, you need to create a multi-signature address to claim NEO and GAS from the genesis block.\n\nTo create a standard address\uff1a\n\nClick the `+` button beside Accounts and select `Create new address`.\n\nTo create a multi-signature address\uff1a\n\n1. Click the `+` button beside Accounts and select `Create multi-signature address`.\n2. In `Multi-signature pubkeys` field, select public keys or enter multiple public keys directly, and set `Minimum number of signatures`.\n3. Click `Confirm`.\n\n> [!Note]\n>\n> If you set multiple signature public keys, you must create the same multi-party signature address in all corresponding wallet accounts so that to successfully complete the signature of the transaction. For more information refer to [Signature](advanced.md).\n\nThe newly created address is displayed in the account list.\n\n### Importing private key\n\nYou can import the account address corresponding to the private key into the current wallet. To do so, click the `+` button beside Accounts and select `Import private`.\n\n## Viewing transaction list\n\nYou can view all transaction records related to the wallet by clicking the transaction list. This includes the", "doc_id": "7aedbf37-aa17-4ee2-92ac-083114bb7c84", "embedding": null, "doc_hash": "2e733dd6ea2a2bfe0d9456e468000e4d58d4c01198d7c69498e802a800001c49", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/wallet.html"}, "node_info": {"start": 0, "end": 3826, "_node_type": "1"}, "relationships": {"1": "04773228c8cda33bfedd9eed3dd9e30b7b868a97", "3": "b3141872-f196-4899-a881-c6bc6b5bf944"}}, "__type__": "1"}, "b3141872-f196-4899-a881-c6bc6b5bf944": {"__data__": {"text": "all transaction records related to the wallet by clicking the transaction list. This includes the confirmed transactions and the transactions that have just been initiated but have not yet been confirmed.\n\n+ **Latest transaction**: Transactions already packaged on the blockchain by consensus nodes\n+ **Unconfirmed transaction**: Transactions waiting to be packaged on the blockchain\n\n## Transfer\n\nIn Neo-GUI, you can do multiple transfers at one time, or bulk transfers from a single address to multiple addresses.\n\n1. In Neo-GUI click `Wallet` -> `Transfer`.\n2. Do one of the following:\n   - Single transfer: enter necessary transfer parameters.\n   - Multiple transfers: click `Add transfer` to add transfer parameters for multiple addresses.\n   - Bulk transfers: Click the `Bulk transfer` tab and then enter necessary parameters.\n3. Click `Send`.\n\nIf the transfer transaction is initiated from a multi-signature address, you will receive a message prompting the signatures are not enough. Copy the information and proceed with the signature procedure to complete the transaction. For more information refer to  [Signature](advanced.md).\n\n![](../assets/sign_1.png)\n\n## Address book\n\nThe address book shows all the addresses in the current wallet.", "doc_id": "b3141872-f196-4899-a881-c6bc6b5bf944", "embedding": null, "doc_hash": "22d5025ace1d77d6e6f03ec54907e9b36b0665fa267867e78071e2cbcef80021", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/wallet.html"}, "node_info": {"start": 3729, "end": 4977, "_node_type": "1"}, "relationships": {"1": "04773228c8cda33bfedd9eed3dd9e30b7b868a97", "2": "7aedbf37-aa17-4ee2-92ac-083114bb7c84"}}, "__type__": "1"}, "094eacbe-a6b9-4aea-891b-51f200dcff44": {"__data__": {"text": "# Neo Node Introduction\nNodes that store all of the blockchain are called \u201cfull-nodes\u201d. They are connected to the blockchain through a P2P network. All the nodes in the blockchain network are equal, they act both as a client interface and as a server.\n\nThere are two full-node programs:\n\n- Neo-CLI, which provides a command-line interface and a set of RPC API for developers. It also helps other nodes achieve consensus with the network and is involved in generating new blocks.\n- Neo-GUI, which provides a graphical interface for ordinary users and developers, with most functions except consensus.\n\n## Download links\n\n|      | Neo-GUI                        | Neo-CLI                        |\n| ---- | ---------------------------------------- | ---------------------------------------- |\n| Releases | [Download](https://github.com/neo-ngd/Neo3-GUI/releases) | [Download](https://github.com/neo-project/neo-cli/releases) |\n| Source code | [Github](https://github.com/neo-ngd/Neo3-GUI) | [Github](https://github.com/neo-project/neo-cli) |\n\n## Neo-GUI and Neo-CLI comparison\n\n|           | Neo-GUI  | Neo-CLI  |\n| --------- | :--: | :--: |\n| **General** |  |  |\n| Graphic interface | \u2714   |      |\n| Command line interface | \u00a0 \u00a0  | \u2714 \u00a0 |\n| Query blocks/transactions/assets | \u2714   |      |\n| **Wallet** |  |  |\n| Create wallet | \u2714   | \u2714   |\n| Open wallet | \u2714 \u00a0 | \u2714\u00a0|\n| Import/Export key pair | \u2714 \u00a0 | \u2714 \u00a0 |\n| Import mnemonics into wallet | \u2714 \u00a0 |  \u00a0 |\n| Upgrade wallet file |  \u00a0 | \u2714 \u00a0 |\n| Show all key pairs | \u2714   | \u2714   |\n| Show all addresses | \u2714   | \u2714   |\n| Show all assets | \u2714   | \u2714   |\n| Transfer | \u2714   | \u2714   |\n| Claim GAS | \u2714   | \u2714 |\n| Create address | \u2714   | \u2714   |\n| Create multi-party signed address | \u2714 \u00a0 | \u2714 |\n| Generate multiple addresses |      | \u2714   |\n| Change wallet password | \u2714   | \u2714    |\n| Delete address | \u2714   | \u2714 |\n| **Contract** |  |  |\n| Query contract | \u2714   |    |\n| Deploy contract | \u2714   | \u2714   |\n| Invoke contract | \u2714   | \u2714   |\n| **Advanced** |  |  |\n| Register to candidate | \u2714 \u00a0 | \u2714 |\n| Voting | \u2714 \u00a0 | \u2714 |\n| Custom transaction construction | \u2714   |  |\n| Signature | \u2714   | \u2714 |\n| Data conversion | \u2714   |  |\n| JSON-RPC |      | \u2714   |\n| Participate in blockchain consensus |      | \u2714   |\n\n## NEO-CLI security policy\n\nTo enable an external program to access the node API, you need to open the firewall port. \n\n> [!CAUTION]\n>\n> To avoid the significant security risk, a whitelist or firewall must be used to block external server requests.\n\nNeo-CLI does not provide the function to remotely switching on/off the wallet, and it does not verify the process when opening a wallet. Therefore, you should set your own security policies. The wallet must be kept open all the time to respond to the", "doc_id": "094eacbe-a6b9-4aea-891b-51f200dcff44", "embedding": null, "doc_hash": "d467220aa346d55bbd3b91ab20643fad81aa9227edcfe32d32059ab1f94ecc2c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/introduction.html"}, "node_info": {"start": 0, "end": 2700, "_node_type": "1"}, "relationships": {"1": "42ca53d382f933c7e75ee59ba174c9a5f88216a1", "3": "0ef231ec-8084-40ae-a95e-93d52d8d24c8"}}, "__type__": "1"}, "0ef231ec-8084-40ae-a95e-93d52d8d24c8": {"__data__": {"text": "your own security policies. The wallet must be kept open all the time to respond to the withdrawal requests of users. For security reasons, the wallets should be run in an independent server on which the firewall is configured properly, as shown below. \n\n|                    | Main Net | Test Net |\n| ------------------ | ------------ | ------------- |\n| JSON-RPC via HTTPS | 10331        | 20331         |\n| JSON-RPC via HTTP  | 10332        | 20332         |\n| P2P via TCP        | 10333        | 20333         |\n| P2P via WebSocket  | 10334        | 20334         |\n\n\n\n", "doc_id": "0ef231ec-8084-40ae-a95e-93d52d8d24c8", "embedding": null, "doc_hash": "e1a0173140f79558bdd6e501a597669d953c3064a4a5396bdeca97bc1bb8e7ad", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/introduction.html"}, "node_info": {"start": 2613, "end": 3186, "_node_type": "1"}, "relationships": {"1": "42ca53d382f933c7e75ee59ba174c9a5f88216a1", "2": "094eacbe-a6b9-4aea-891b-51f200dcff44"}}, "__type__": "1"}, "c4563905-e349-49ae-afbf-159024704eaa": {"__data__": {"text": "# Synchronizing the blockchain faster\n\nThe client must be fully synchronized before use. In order to speed up network synchronization you can download an offline package of the blockchain data up to a certain block height. This means the client will only need to sync the additional blocks from the Neo network rather than the entire blockchain.\n\n## Step 1 - Download the offline package\n\n1. Close the Neo client and go to [offline synchronized package](https://sync.ngd.network/) downloading page.\n\n2. From the offline package downloading page, click **N3 Mainnet** or **N3 Testnet** according to your network and then download one of the following packages (no need to unzip the package):\n\n   - **Full offline package**: contains the most complete blockchain data. It is applicable to the client running for the first time. The download file is chain.0.acc.zip.\n   - **Increment offline package**: contains data in the range from starting height to ending height of the package. It is applicable to the client which has been synchronized up to the block height within the increment offline package coverage. The download file is chain.xxx.acc.zip, where xxx is the package starting height, e.g. chain.378997.acc.zip.\n\n   ![](../../zh-cn/node/assets/sync_01.png)\n\n## Step 2 - Place the offline package\n\n> [!Warning]\n>\n> You must not change the default offline package file name (chain.acc.zip or chain.xxx.acc.zip) , otherwise it will not work for synchronization.\n\nFor Neo-CLI:\n\nPlace the downloaded package (chain.0.acc.zip or chain.xxx.acc.zip) under the Neo-CLI root folder, as shown below:\n\n![](../../zh-cn/node/assets/sync_02.png)\n\nFor Neo-GUI:\n\nPlace the downloaded package (chain.0.acc.zip or chain.xxx.acc.zip) under the Neo-GUI\\resources\\build-neo-node folder, as shown below:\n\n![](../../zh-cn/node/assets/sync_05.png)\n\n## Step 3 - Check the client synchronization status\n\nRun the client again and check the blocks downloading status\uff1a\n\n- For Neo-CLI\uff0center `open wallet <path>` to open a wallet, and then enter `show state` to check the blocks downloading status. When you see the connected nodes is 0 and the synchronizing speed is greatly accelerated, that means the offline package is working. When the connected nodes appear, it indicates the synchronization is completed.\n\n  ![](../../zh-cn/node/assets/sync_03.png)\n\n  ![](../../zh-cn/node/assets/sync_04.png)\n\n- For Neo-GUI, you can see the client is now synchronized faster. \n\n  ![](assets/sync_06.png)\n\n> [!Note]\n>\n> - The client cannot be reached during the process when it is synchronizing with the offline package, thus the connected nodes is 0 and you cannot invoke APIs from the client until it has completed synchronization.\n> - You can also use the Neo-CLI command `export blocks`, to export the entire blockchain data to a package or export the specified number of block data from the specified block height . For more information, see [CLI Command Line](cli/cli.md).", "doc_id": "c4563905-e349-49ae-afbf-159024704eaa", "embedding": null, "doc_hash": "c8acc7db36f955dc12cb869a07e6c27d992dc5409832bd92a8b083860ba5e849", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/syncblocks.html"}, "node_info": {"start": 0, "end": 2943, "_node_type": "1"}, "relationships": {"1": "23776682c639645af8424cb160000e8dbfeb9063"}}, "__type__": "1"}, "8bbabe8f-9320-484a-8bd6-4290a78f5eba": {"__data__": {"text": "# Fees\n\nParticipants in Neo ecosystem need to pay network fees and system fees with GAS when using the Neo network.\n\nSystem fees are the cost of resources consumed by the transaction execution in NeoVM. The execution of smart contracts, including the execution of its own scripts and the invocation of other contracts, requires system fees.\n\nNetwork fee is the fee to pack transactions into a block. Transactions that deploy and invoke smart contracts on the blockchain and execute the Verify method requires network fees. \n\nTherefore, a smart contract invocation transaction requires both system fee and network fee. The sysfee is burned for each transaction and the netfee is rewarded to the consensus address that packed the current block.\n\nFees in Neo3 can be dynamically changed. In this document we only introduce the basic fees. \n\n## System fees\n\nSystem fees include:\n\n- Instruction fee (OpCode)\n- SysCall fee\n- CPU processing fee for native contracts\n- Storage fee\n\n\n### Instruction fee\n\n| Fee\uff08GAS\uff09 | OpCode                                                       |\n| ---------- | ------------------------------------------------------------ |\n| 0.00032768 | CALLT                                                        |\n| 0.00008192 | APPEND, REVERSEITEMS, SETITEM, VALUES                        |\n| 0.00004096 | PUSHDATA4                                                    |\n| 0.00002048 | CAT, CONVERT, LEFT, MEMCPY, RIGHT, SUBSTR                    |\n| 0.00000512 | CALL, CALL_L, CALLA, NEWARRAY, NEWARRAY_T, NEWSTRUCT, PACK, PUSHDATA2, THROW, UNPACK |\n| 0.00000256 | NEWBUFFER                                                    |\n| 0.00000064 | HASKEY,INITSLOT,PICKITEM                                     |\n| 0.00000032 | EQUAL,NOTEQUAL                                               |\n| 0.00000016 | CLEAR, CLEARITEMS, INITSSLOT, KEYS, NEWARRAY0, NEWSTRUCT0, POPITEM, REMOVE, REVERSEN, ROLL, XDROP |\n| 0.00000008 | ADD, AND, BOOLAND, BOOLOR, DIV, GE, GT, LE, LT, MAX, MIN, MOD, MUL, NEWMAP, NUMEQUAL, NUMNOTEQUAL, OR, PUSHDATA1, SHL, SHR, SUB, WITHIN, XOR |\n| 0.00000004 | ABS, DEC, ENDFINALLY, ENDTRY, ENDTRY_L, INC, INVERT, NEGATE, NOT, NZ, PUSHA, PUSHINT128, PUSHINT256, SIGN, SIZE, TRY, TRY_L |\n| 0.00000002 | DEPTH, DROP, DUP, ISNULL, ISTYPE, JMP,", "doc_id": "8bbabe8f-9320-484a-8bd6-4290a78f5eba", "embedding": null, "doc_hash": "6a492be8727d212bd41f1f399c012bf32fe12732f72fe278952136029467e0b5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 0, "end": 2265, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "3": "63ad2ef4-34e2-4233-a46c-cadbf3ad0042"}}, "__type__": "1"}, "63ad2ef4-34e2-4233-a46c-cadbf3ad0042": {"__data__": {"text": "| DEPTH, DROP, DUP, ISNULL, ISTYPE, JMP, JMP_L, JMPEQ, JMPEQ_L, JMPGE, JMPGE_L, JMPGT, JMPGT_L, JMPIF, JMPIF_L, JMPIFNOT, JMPIFNOT_L, JMPLE, JMPLE_L, JMPLT, JMPLT_L, JMPNE, JMPNE_L, LDARG, LDARG0, LDARG1, LDARG2, LDARG3, LDARG4, LDARG5, LDARG6, LDLOC, LDLOC0, LDLOC1, LDLOC2, LDLOC3, LDLOC4, LDLOC5, LDLOC6, LDSFLD, LDSFLD0, LDSFLD1, LDSFLD2, LDSFLD3, LDSFLD4, LDSFLD5, LDSFLD6, NIP, OVER, PICK, REVERSE3, REVERSE4, ROT, STARG,STARG0,STARG1,STARG2,STARG3,STARG4,STARG5,STARG6,STLOC,STLOC0,STLOC1,STLOC2,STLOC3,STLOC4,STLOC5,STLOC6,STSFLD,STSFLD0,STSFLD1,STSFLD2,STSFLD3,STSFLD4,STSFLD5,STSFLD6,SWAP,TUCK |\n| 0.00000001 | ASSERT, NOP, PUSH0, PUSH1, PUSH10, PUSH11, PUSH12, PUSH13, PUSH14, PUSH15, PUSH16,PUSH2,PUSH3,PUSH4,PUSH5,PUSH6,PUSH7,PUSH8,PUSH9,PUSHINT16,PUSHINT32,PUSHINT64,PUSHINT8,PUSHM1,PUSHNULL |\n| 0          | ABORT, RET, SYSCALL                                          |\n\nReference: [ApplicationEngine.OpCodePrices.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.OpCodePrices.cs)\n\n### System call fee\n\n| **Interop Service**                   | Fee\uff08GAS\uff09                                               |\n| ------------------------------------- | -------------------------------------------------------- |\n| System.Contract.Call                  | 0.00032768                                               |\n| System.Contract.CallNative            | Refer to native contract fee                             |\n| System.Contract.IsStandard            | 0.00001024                                               |\n| System.Contract.GetCallFlags          | 0.00001024                                               |\n| System.Contract.CreateStandardAccount | 0.00000256                           ", "doc_id": "63ad2ef4-34e2-4233-a46c-cadbf3ad0042", "embedding": null, "doc_hash": "88e5ea6e99311f4770e850483fae5c07b80d5ca355d38889592343e3f8d25f0e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 2232, "end": 3975, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "2": "8bbabe8f-9320-484a-8bd6-4290a78f5eba", "3": "75baf60c-3022-49c5-b507-844b686f3c0a"}}, "__type__": "1"}, "75baf60c-3022-49c5-b507-844b686f3c0a": {"__data__": {"text": "                                       |\n| System.Contract.CreateMultisigAccount | 0.00000256                                               |\n| Neo.Crypto.CheckSig                   | 0.00032768                                               |\n| Neo.Crypto.CheckMultisig              | Dynamically calculated based on the number of signatures |\n| System.Iterator.Create                | 0.00000016                                               |\n| System.Iterator.Next                  | 0.00032768                                               |\n| System.Iterator.Value                 | 0.00000016                                               |\n| System.Runtime.Platform               | 0.00000008                                               |\n| System.Runtime.GetTrigger             | 0.00000008                                               |\n| System.Runtime.GetTime                | 0.00000008                                               |\n| System.Runtime.GetScriptContainer     | 0.00000008                                               |\n| System.Runtime.GetExecutingScriptHash | 0.00000016                                               |\n| System.Runtime.GetCallingScriptHash   | 0.00000016                                               |\n| System.Runtime.GetEntryScriptHash     | 0.00000016                                               |\n| System.Runtime.CheckWitness           | 0.00001024                                              ", "doc_id": "75baf60c-3022-49c5-b507-844b686f3c0a", "embedding": null, "doc_hash": "fca5b8347ada709d1d59f9f5325204cda8a63514e9ceeb2900751e382c6991bf", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 4010, "end": 5462, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "2": "63ad2ef4-34e2-4233-a46c-cadbf3ad0042", "3": "f64dcaa3-364e-4252-879b-9f5dd4e81b09"}}, "__type__": "1"}, "f64dcaa3-364e-4252-879b-9f5dd4e81b09": {"__data__": {"text": "                    |\n| System.Runtime.GetInvocationCounter   | 0.00000016                                               |\n| System.Runtime.Log                    | 0.00032768                                               |\n| System.Runtime.Notify                 | 0.00032768                                               |\n| System.Runtime.GetNotifications       | 0.00000256                                               |\n| System.Runtime.GasLeft                | 0.00000016                                               |\n\nReference:\n\n[ApplicationEngine.Contract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Contract.cs)\n\n[ApplicationEngine.Crypto.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Crypto.cs)\n\n[ApplicationEngine.Contract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Contract.cs)\n\n[ApplicationEngine.Iterator.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Iterator.cs)\n\n[ApplicationEngine.Runtime.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Runtime.cs)\n\n[ApplicationEngine.Storage.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Storage.cs)\n\n### Native contract execution fee\n\n| Native Contract    | Method                  | Fee\uff08GAS\uff09                                                   |\n| ------------------ | ----------------------- | ------------------------------------------------------------ |\n| ContractManagement | Deploy                  | Refer to storage fee. Minimum is  10 GAS.                    |\n| ContractManagement | Update                  | Refer to storage fee                                         |\n| LedgerContract     | GetTransactionFromBlock | 0.00065536                                                   |\n| NeoToken           | UnclaimedGas            | 0.00131072   ", "doc_id": "f64dcaa3-364e-4252-879b-9f5dd4e81b09", "embedding": null, "doc_hash": "bb21352e4758d21d342c53a19a01f2d9b85cbdb8e182e3ab842e55233515af60", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 5463, "end": 7448, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "2": "75baf60c-3022-49c5-b507-844b686f3c0a", "3": "5cf2c0df-4056-44a7-a20b-de5d97b2baf1"}}, "__type__": "1"}, "5cf2c0df-4056-44a7-a20b-de5d97b2baf1": {"__data__": {"text": "          | 0.00131072                                                   |\n| NeoToken           | RegisterCandidate       | Calculated dynamically. Default is 1000 GAS                  |\n| NeoToken           | UnregisterCandidate     | 0.00065536                                                   |\n| NeoToken           | Vote                    | 0.00065536                                                   |\n| NeoToken           | GetCandidates           | 0.04194304                                                   |\n| NeoToken           | GetCommittee            | 0.04194304                                                   |\n| NeoToken           | GetNextBlockValidators  | 0.04194304                                                   |\n| NeoToken\u3001GasToken | Transfer                | 0.00131072                                                   |\n| OracleContract     | Request                 | Calculated dynamically. The user specifies the fee when invoking. |\n| StdLib             | Deserialize             | 0.00008192                                                   |\n| StdLib             | JsonDeserialize         | 0.00008192                                                   |\n| StdLib             | Other                   | 0.00002048                                                   |\n\nThe fee for other native contract methods not listed is 0.00032768 GAS.\n\nReference:", "doc_id": "5cf2c0df-4056-44a7-a20b-de5d97b2baf1", "embedding": null, "doc_hash": "0a9c12514077e3a973b10999cd9b5f520c43b1ba98427da5a8f60cbc63445f10", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 7438, "end": 8833, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "2": "f64dcaa3-364e-4252-879b-9f5dd4e81b09", "3": "f6a115e9-ad89-48c7-9033-660179d279ed"}}, "__type__": "1"}, "f6a115e9-ad89-48c7-9033-660179d279ed": {"__data__": {"text": "other native contract methods not listed is 0.00032768 GAS.\n\nReference: [neo/SmartContract/Native](https://github.com/neo-project/neo/tree/master/src/neo/SmartContract/Native)\n\n### Storage fee\n\nThe storage fee is charged according to the written byte. The default unit price is 0.001 GAS / Byte. Committee members can dynamically adjust the fee, and the upper limit is 1 GAS / Byte.\n\nFor the key data written to the storage, the fee charged for the first time write-in and the subsequent write-in are different. See the following table for details.\n\n| Scenarios                                          | Charging Rule                                                | Example                                                      | Fee<br/>(Based on unit price 0.001)   |\n| -------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------- |\n| First-time write in                                | (key.Length + value.Length) \u00d7 unit price                     | key = `key`, value= `hello world`, totally 14 bytes          | **0.014** GAS                         |\n| Subsequent write in. New data size \u2264 Old data size | No fee for key. The first byte of the value is normally charged, and the remaining bytes are charged at a 75% discount | The value modified as `hello neo3`, totally 10 bytes         | (1+(10-1)/4 )\u00d70.001 = **0.003** GAS   |\n| Subsequent write in. New data size > Old data size | The previous fee plus the new data byte fee (i.e. new data byte \u00d7 unit price) | The value modified as `hello neo3.0`, totally 12 bytes       | 0.003 + (12-10)\u00d70.001 = **0.005** GAS |\n| Subsequent write in. New data size > Old data size | The same as above line                                       | The value modified as `hello neo3.0 preview5`, totally 21 bytes | 0.005 + (21-12)\u00d70.001 = **0.014** GAS |\n| The value removed                                  | 0                                                            | The value removed                                            | **0** GAS                             |\n\nReference: [ApplicationEngine.Storage.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Storage.cs)\n\n## Network fee\n\nThe network fee includes:\n\n- Network byte fee\n- Script verification fee\n\n### Network", "doc_id": "f6a115e9-ad89-48c7-9033-660179d279ed", "embedding": null, "doc_hash": "efe5732da16c58095acc67e21161f3dc270d9fc571fa00fc59ba1d7c5dff10f6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 8782, "end": 11200, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "2": "5cf2c0df-4056-44a7-a20b-de5d97b2baf1", "3": "7a683e7a-be5b-4840-997d-29c1584f9344"}}, "__type__": "1"}, "7a683e7a-be5b-4840-997d-29c1584f9344": {"__data__": {"text": "network fee includes:\n\n- Network byte fee\n- Script verification fee\n\n### Network byte fee\n\nBy default the network byte fee is 0.00001 GAS / Byte. Committee members can dynamically adjust the fee.\n\nReference: \n\n[PolicyContract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/Native/PolicyContract.cs)\n\n[Transaction.cs#L302](https://github.com/neo-project/neo/blob/ee898bf41667cdbe3b836b3bd08c2d3199046c2e/src/neo/Network/P2P/Payloads/Transaction.cs#L302)\n\n### Script verification fee\n\nThe script verification fee is limit to 0.5 GAS. Its formula is:\n\n`Script verification fee`= `Execution fee of script verification` * `multiple`\n\nWhere,\n\n`Execution fee of script verification` = `OpCode execution fee` + `SysCall fee` + `CPU processing fee for native contracts` + `Storage fee`\n\nThe multiple for script verification fee defaults to 30, which can be dynamically adjusted by committee with the upper limit of 1000.\n\nDevelopers can use the API `InvokeContractVerify` to evaluate the fee for script verification.\n\nFor example:\n\nThe script verification fee for a standard address is (OpCode.PUSHDATA1 + OpCode.PUSHDATA1 + OpCode.SYSCALL + Neo.Crypto.CheckSig) \u00d730 = **0.0098352** GAS.\n\nReference: \n\n[PolicyContract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/Native/PolicyContract.cs)\n\n[Transaction.cs#L302](https://github.com/neo-project/neo/blob/ee898bf41667cdbe3b836b3bd08c2d3199046c2e/src/neo/Network/P2P/Payloads/Transaction.cs#L302)\n\n", "doc_id": "7a683e7a-be5b-4840-997d-29c1584f9344", "embedding": null, "doc_hash": "15dba3e9db4058420bf85463e8b98edeca4056695ee60578a455b855b4a291c9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}, "node_info": {"start": 11183, "end": 12672, "_node_type": "1"}, "relationships": {"1": "bfef6cb83803cd3595e3e641edaba1ecd8d893d1", "2": "f6a115e9-ad89-48c7-9033-660179d279ed"}}, "__type__": "1"}, "b8b99386-089c-44f4-b5e6-14daf46b61eb": {"__data__": {"text": "# decimals Method\n\nReturns token decimals.\n\n## Contract\n\n\tNep17Token\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nep17Hash, \"decimals\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"0\"\n}\n```\n\nRespond description:\n\n- Integer type: Token balance is obtained.\n\n- Others: failed.\n", "doc_id": "b8b99386-089c-44f4-b5e6-14daf46b61eb", "embedding": null, "doc_hash": "636e53fc79508b1eab341df3af1cbc68f183e8feeb859cba29f14ddd2d23fd71", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/decimals.html"}, "node_info": {"start": 0, "end": 333, "_node_type": "1"}, "relationships": {"1": "9ffa64d23dbbcfc718c2e076ea4841d265ca072c"}}, "__type__": "1"}, "de8dea67-b6a6-44cd-a4f2-a90c010569d9": {"__data__": {"text": "# getBlockedAccounts Method\n\nReturns the blocked accounts.\n\n## Contract\n\n\tPolicyContract\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(policyHash, \"getBlockedAccounts\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"Struct\",\n\t\t\"value\": [{\n\t\t\t\"type\": \"ByteString\",\n\t\t\t\"value\": \"AkuBfvN/L8PUoz/jZoflktnzD\\u002BJLPigYfcjxKzs7K4Oe\"\n\t\t}, {\n\t\t\t\"type\": \"Integer\",\n\t\t\t\"value\": \"0\"\n\t\t}]\n\t}]\n}\n```\n\nRespond description:\n\n- Array type: account address is successfully requested.\n\n- Others: failed.\n", "doc_id": "de8dea67-b6a6-44cd-a4f2-a90c010569d9", "embedding": null, "doc_hash": "43b40167b21bc08ce8c7c7a2a6151c14bec364d693367d84190c7d8a712c88df", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/getBlockedAccounts.html"}, "node_info": {"start": 0, "end": 554, "_node_type": "1"}, "relationships": {"1": "16b9c5c0493f8bfe727e4e139343a6a4a7aa8da2"}}, "__type__": "1"}, "0c89f1d5-3d4c-47fe-a5e4-5d65afb3ea2a": {"__data__": {"text": "# getValidators Method\n\nReturns current validators.\n\n## Contract\n\n\tNeoToken\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(neoHash, \"getValidators\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"Struct\",\n\t\t\"value\": [{\n\t\t\t\"type\": \"ByteString\",\n\t\t\t\"value\": \"AkuBfvN/L8PUoz/jZoflktnzD\\u002BJLPigYfcjxKzs7K4Oe\"\n\t\t}, {\n\t\t\t\"type\": \"Integer\",\n\t\t\t\"value\": \"0\"\n\t\t}]\n\t}]\n}\n```\n\nRespond description:\n\n- Array type: current validators are successfully requested.\n\n- Others: failed.\n", "doc_id": "0c89f1d5-3d4c-47fe-a5e4-5d65afb3ea2a", "embedding": null, "doc_hash": "854dffc21856e08a3b5253abdc574bc49cdc8312a55a9763adf3e7b92b539983", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/getValidators.html"}, "node_info": {"start": 0, "end": 537, "_node_type": "1"}, "relationships": {"1": "46a4ba4c245feecd6aa2ad2a02f14b35aa203ce7"}}, "__type__": "1"}, "3bb244fc-df4e-48b5-b39d-9a22f0c32a1b": {"__data__": {"text": "# name Method\n\nReturns contract name.\n\n## Contract\n\n\tNativeContract\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nativeHash, \"name\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"ByteString\",\n\t\"value\":\"NEO\"\n}\n```\n\nRespond description:\n\n- ByteString type: contract name is successfully requested.\n\n- Others: failed.\n", "doc_id": "3bb244fc-df4e-48b5-b39d-9a22f0c32a1b", "embedding": null, "doc_hash": "7f758c2d6955b1fad16136cb9003a5ac6adcf2b2b08bd04e0cea0d89533b8451", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/name.html"}, "node_info": {"start": 0, "end": 351, "_node_type": "1"}, "relationships": {"1": "42423117fffa4424452f942f8c1ae359fa66b585"}}, "__type__": "1"}, "904f8c48-1902-4cbf-8099-e201e37ff10c": {"__data__": {"text": "# onPersist Method\n\nManually performs actions the Nep17 contract will do upon block persisting.\n\n## Contract\n\n\tNativeContract\n\n## Parameters\n\nRequest content:\n\n```json\nvar result = Contract.Call(nativeHash, \"onPersist\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"Void\",\n\t\"value\":\"NULL\"\n}\n```\n\nRespond description:\n\n- Void type: The method is successfully performed.\n\n- Others: failed.\n", "doc_id": "904f8c48-1902-4cbf-8099-e201e37ff10c", "embedding": null, "doc_hash": "6f5a57d27ef11c2f547fe6f0f5342ce7b12fdb3949f64627d16e3151e4558d20", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/onPersist.html"}, "node_info": {"start": 0, "end": 403, "_node_type": "1"}, "relationships": {"1": "07dabe8745e40a791294aae16fe02e8a326e90ac"}}, "__type__": "1"}, "f0b7d9c3-38dd-4dac-a3b0-00fad2bc2699": {"__data__": {"text": "# supportedStandards Method\n\nReturns supported NEP standards.\n\n## Contract\n\n\tNativeContract\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nativeHash, \"supportedStandards\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"NEP-5\"\n\t}, {\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"NEP-10\"\n\t}]\n}\n```\n\nRespond description:\n\n- Array type: supported NEP standards successfully requested.\n\n- Others: failed.\n", "doc_id": "f0b7d9c3-38dd-4dac-a3b0-00fad2bc2699", "embedding": null, "doc_hash": "71cf88ea7445bea6ca319a0f6f6bf007b56a45ffe11e36bac03ddaa688f34ac3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/supportedStandards.html"}, "node_info": {"start": 0, "end": 482, "_node_type": "1"}, "relationships": {"1": "1038dbd099dc82010c7137a160e6ac18060a48d4"}}, "__type__": "1"}, "86a1e835-2318-4209-b90e-e292727f6761": {"__data__": {"text": "# symbol Method\n\nReturns token symbol.\n\n## Contract\n\n\tNep17Token\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nep17Hash, \"symbol\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"ByteString\",\n\t\"value\":\"neo\"\n}\n```\n\nRespond description:\n\n- ByteString type: token symbol is successfully requested.\n\n- Others: failed.\n", "doc_id": "86a1e835-2318-4209-b90e-e292727f6761", "embedding": null, "doc_hash": "5d2538f7e400d0af029c66cb2f122534b830c16ef11ebc68efbdff0b260dc424", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/symbol.html"}, "node_info": {"start": 0, "end": 348, "_node_type": "1"}, "relationships": {"1": "4cd0931c2ded02ae30ac96be7562e43523167826"}}, "__type__": "1"}, "a9814641-9da4-4414-9dff-d46775ca38bd": {"__data__": {"text": "# Governance API\n\n## Candidates\n\nThere is no duty assigned to candidates. However, committee members and consensus nodes are elected from certain number of candidates with most votes. \n\n#### How to Become a Candidate\n\nAn address can be registered as candidate or unregistered afterwards. Corresponding contract methods are as follows:\n\n| Method | Parameters | Fee in GAS |\n| ---- | ------------------------------------ | ---- |\n| [`RegisterCandidate`](scapi/framework/native/Neo/RegisterCandidate.md) | ECPoint publicKey | Adjustable, initially 0.00001 |\n| [`UnregisterCandidate`](scapi/framework/native/Neo/UnregisterCandidate.md) | ECPoint publicKey | 0.00065536 (CpuFee) |\n\n> [!Note]\n>\n> Registering / unregistering candidate requires signature. It means candidate registering / unregistering is only self-determined. \n\n#### Candidate Voting \n\nEvery address has the right to vote to only one address (whether or not it's a candidate). Candidate's received votes are defined as the sum of NEO held by its voter. Every standby committee member will vote to itself in genesis block. \n\nVoting contract method is as follows. Please not that voter's signature will be checked. \n\n| Method | Parameters | Fee in GAS |\n| ---- | ------------------------------------ | ---- |\n| [`Vote`](scapi/framework/native/Neo/Vote.md) | UInt160 account, byte[] voteTo | 0.00065536 (CpuFee) |\n\nAs voters' votes & held NEO, as well as registered candidates keep changing, candidate set and their votes are re-calculated in every block.\n\n| Method | Parameters | Fee in GAS |\n| ---- | ------------------------------------ | ---- |\n| [`GetCandidates`](scapi/framework/native/Neo/GetCandidates.md) | null | 0 |\n\n## Committee\n\n#### Function & Scope\n\nCommittee members have the privilege to modify the configuration of Neo network by voting, including:\n\n* Role designation\n* Set fee per byte for network transmission\n* Set execution fee (CpuFee) factor\n* Set storage price\n* Block / unblock account\n* Set Oracle service price\n* Set gas released per block\n* Set fee to register a candidate\n* Add NNS root\n* Set the NNS registration/renewal fee\n* Update the NNS contract\n* Set minimum fee for contract deployment\n\nMethod definition and corresponding fee are defined in PolicyContract as shown below:\n\n| Method | Parameters | Fee in GAS | Contract |\n| ---- | ------------------------------------ | ---- | ---- |\n| DesignateAsRole | Role role, ECPoint[] nodes | 0.00032768 (CpuFee) | RoleManagement |\n| SetFeePerByte | long value | 0.00032768 (CpuFee) | PolicyContract |\n| SetExecFeeFactor | uint value | 0.00032768 (CpuFee) | PolicyContract |\n| SetStoragePrice | uint value | 0.00032768 (CpuFee) | PolicyContract |\n| SetPrice | long price | 0.00032768 (CpuFee) | OracleContract |\n| SetGasPerBlock | BigInteger gasPerBlock | 0.00032768 (CpuFee) | NeoToken |\n| SetRegisterPrice | long registerPrice | 0.00032768 (CpuFee) | NeoToken |\n| AddRoot | string root | 0.00032768 (CpuFee) | NameService |\n| SetPrice | long price | 0.00032768 (CpuFee) | NameService |\n| Update | ByteString nef, string manifest | StoragePrice * (nefFile.Length + manifest.Length) | NameService |\n| SetMinimumDeploymentFee | BigInteger value | 0.00032768 (CpuFee) | ContractManagement |\n\nTo bring such modification into effect, committee members should send a transaction which calls corresponding method & includes enough signatures on chain. This transaction is executed as long as it's signed by more than half of the committee", "doc_id": "a9814641-9da4-4414-9dff-d46775ca38bd", "embedding": null, "doc_hash": "245cf9b2938bc1a182c4bbc8c64e5b3fa8f20be1b14d6f4176d6f15530ada03c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/governance_api.html"}, "node_info": {"start": 0, "end": 3469, "_node_type": "1"}, "relationships": {"1": "2b84d29cf798f8028fb890af3f2433ff794b7c65", "3": "538cd619-c5d9-4ea9-983b-f70fd4c75061"}}, "__type__": "1"}, "538cd619-c5d9-4ea9-983b-f70fd4c75061": {"__data__": {"text": "This transaction is executed as long as it's signed by more than half of the committee members.\n\nFurthermore, corresponding reading methods are also supported:\n\n| Method | Parameters | Fee in GAS | Contract |\n| ---- | ------------------------------------ | ---- | ---- |\n| [`GetDesignatedByRole`](scapi/framework/native/RoleManagement/GetDesignatedByRole.md) | Role role, uint index | 0.00032768 (CpuFee) | RoleManagement |\n| [`GetFeePerByte`](scapi/framework/native/Policy/GetFeePerByte.md) | null | 0.00032768 (CpuFee) | PolicyContract |\n| GetExecFeeFactor | null | 0.00032768 (CpuFee) | PolicyContract |\n| GetStoragePrice | null | 0.00032768 (CpuFee) | PolicyContract |\n| [`IsBlocked`](scapi/framework/native/Policy/IsBlocked.md) | UInt160 account | 0.00032768 (CpuFee) | PolicyContract |\n| GetPrice | null | 0.00032768 (CpuFee) | OracleContract |\n| [`GetGasPerBlock`](scapi/framework/native/Neo/GetGasPerBlock.md) | null | 0.00032768 (CpuFee) | NeoToken |\n| GetRegisterPrice | null | 0.00032768 (CpuFee) | NeoToken |\n| GetMinimumDeploymentFee | null | 0.00032768 (CpuFee) | ContractManagement |\n\n#### How are committee members elected\n\n1. Sort the registered candidates by votes\n2. Take certain numbers of candidates (21 by default) with the most votes as committee members.\nCommittee members are refreshed every 21 blocks.\n\n#### Corresponding contract method\n\n| Method | Parameters | Fee in GAS | Return value |\n| ---- | ------------------------------------ | ---- | ---- |\n| [`GetCommittee`](scapi/framework/native/Neo/GetCommittee.md) | null | 0.04194304 (CpuFee) | Current committee members in format of Array<ECPoint> |\n\n## Consensus Nodes\n\n#### Function & Scope\n\nConsensus nodes are nodes which are able to start or vote to new block proposals. \n\n#### How are consensus nodes elected\n\n1. Sort the registered candidates by votes\n2. Take certain numbers of candidates (7 by default) with the most votes as consensus nodes.\nSimilar to committee members, consensus nodes are refreshed every 21 blocks.\n\n#### Corresponding contract method\n\n| Method | Parameters | Fee in GAS | Return value |\n| ---- | ------------------------------------ | ---- | ---- |\n|  [`GetNextBlockValidators`](scapi/framework/native/Neo/GetNextBlockValidators.md)  | null | 0.04194304 (CpuFee) | Consensus nodes by persisting block in format of Array<ECPoint> |\n\n## Token Distribution\n\nTotal NEO amount, or 100 million tokens are distributed in genesis block to standby consensus nodes' multi-signature address.\n\nAll interactions in Neo are performed through transactions. Sending a transaction on chain requires paying GAS tokens as fee, including system fee and network fee. System fee will be burnt as resource consumption for transaction execution, while network fee will be distributed to the speaker (the consensus node who starts a new-block proposal) of the block where corresponding transaction is included.\n\n## Nep17 Contract Method\n\nNEO and GAS are [Nep17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) contracts. Nep17 contract methods are as follows:\n\n| Method | Parameters | Fee in GAS | Result |\n| ---- | ---- | ---- | ---- |\n| [`symbol`](govapi/symbol.md)  | null | 0 | Token symbol in String |\n|  [`decimals`](govapi/decimals.md)  | null | 0 | Token decimals in UInt |\n|", "doc_id": "538cd619-c5d9-4ea9-983b-f70fd4c75061", "embedding": null, "doc_hash": "c5d32bf2f3459d31323973a29c81d25f80fe695b3efe12f8f14335e935194540", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/governance_api.html"}, "node_info": {"start": 3399, "end": 6690, "_node_type": "1"}, "relationships": {"1": "2b84d29cf798f8028fb890af3f2433ff794b7c65", "2": "a9814641-9da4-4414-9dff-d46775ca38bd", "3": "878653f2-c221-48c5-91df-57bbe53a14a0"}}, "__type__": "1"}, "878653f2-c221-48c5-91df-57bbe53a14a0": {"__data__": {"text": " | null | 0 | Token decimals in UInt |\n| [`TotalSupply`](scapi/framework/native/Neo/TotalSupply.md) | null | 0.00032768 (CpuFee) | Token total supply in BigInteger |\n| [`BalanceOf`](scapi/framework/native/Neo/BalanceOf.md) | UInt160 account | 0.00032768 (CpuFee) | account balance in BigInteger |\n| [`Transfer`](scapi/framework/native/Neo/Transfer.md) | UInt160 from, UInt160 to, BigInteger amount | 0.00131072 (CpuFee) + 0.0000005 (StorageFee) | Send specified amount of token from Address *from* to Address *to*. Please note that it will check *from*'s signature, whether caller is *from*, whether *to* is payable, whether *from*'s balance is enough |\n\nContract methods by NEO:\n\n| Method | Parameters | Fee in GAS | Return value |\n| ---- | ------------------------------------ | ---- | ---- |\n| [`UnclaimedGas`](scapi/framework/native/Neo/UnclaimedGas.md) | UInt160 account | 0.00131072 (CpuFee) | unclaimed GAS amount of this address in uint |", "doc_id": "878653f2-c221-48c5-91df-57bbe53a14a0", "embedding": null, "doc_hash": "7e2dc9b7630ac3e2e7d124f3ed1c289ceda044f406f24f63e246929590119572", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/governance_api.html"}, "node_info": {"start": 6721, "end": 7667, "_node_type": "1"}, "relationships": {"1": "2b84d29cf798f8028fb890af3f2433ff794b7c65", "2": "538cd619-c5d9-4ea9-983b-f70fd4c75061"}}, "__type__": "1"}, "7c8dcbfe-8f7a-4969-8c83-5f3fc04302cd": {"__data__": {"text": "# NeoVM Instructions\n\n## Built-in data types\n\nNeoVM has following built-in data types:\n\n| Type | Description |\n|------|------|\n| Array | Implemented as a `List<StackItem>`, the `StackItem` is an abstract class, and all the built-in data types are inherited from it. |\n| Boolean |  Implemented as two byte arrays, `TRUE` and `FALSE`.  |\n| Buffer        | Readonly byte array, implemented as a buffer array `byte[]`  |\n| ByteString        | Readonly byte array, implemented as a `ReadOnlyMemory<byte>` |\n| Integer | Implemented as a `BigInteger` value.  |\n| InteropInterface | Interoperable interface |\n| Map | Implemented as a key-value pair `Dictionary<StackItem, StackItem>`.  |\n| Null | Null type |\n| Pointer    | Implemented as a context `Script` and an instruction `Position` |\n| Struct |  Inherited from Array, a `Clone` method is added and `Equals` method is overridden. |\n\n- `CompoundType` : Compound type, which includes  `Array`, `Map` and `Struct`\u3002\n- `PrimitiveType`: Basic type which includes `Boolean`, `ByteString` and `Integer`\u3002\n\n```c#\n// boolean type\nprivate static readonly byte[] TRUE = { 1 };\nprivate static readonly byte[] FALSE = { 0 };\n\nprivate bool value;\n```\n\n## Instructions\n\nNeoVM has implemented 189 instructions. The categories are as follows:\n\n| Constant | Flow Control | Stack Operation | Slot Operation |String Operation | Logical Operation | Arithmetic Operation | Advanced Data Structure | Type Operation |\n| ---- | -------- | ------ | ------ | -------- | -------- | -------- | ---- | ---- |\n| 29 | 32 | 15 | 50 | 6 | 6 | 25 | 18 | 3|\n\nDetails of each instruction in each category are introduced as follows.\n\n### Constants\n\nThe constant instructions mainly complete the function of pushing constants or arrays into the `EvaluationStack`.\n\n#### PUSHINT\n\n| Instruction   | PUSHINT8, PUSHINT16, PUSHINT32, PUSHINT64, PUSHINT128, PUSHINT256                                   |\n|----------|---------------------------------------|\n| Bytecode | 0x00, 0x01, 0x02, 0x03, 0x04, 0x05                                                  |\n| Fee | 0.00000001 GAS, 0.00000001 GAS, 0.00000001 GAS, 0.00000001 GAS, 0.00000004 GAS, 0.00000004 GAS |\n| Function   | Push an integer onto the stack, the bit length of which is specified with the number 8\\16\\32\\64\\128\\256. |\n\n#### PUSHA\n\n| Instruction   | PUSHA                                 |\n|----------|----------|\n| Bytecode | 0x0A                                  |\n| Fee | 0.00000004 GAS             |\n| Function | Convert the next four bytes to an address, and push the address onto the stack. |\n\n#### PUSHNULL\n\n| Instruction   | PUSHNULL                                   |\n|----------|------------------------------------------|\n| Bytecode |", "doc_id": "7c8dcbfe-8f7a-4969-8c83-5f3fc04302cd", "embedding": null, "doc_hash": "d24af179b3b63cbbfa83872d219b55637923f1d2011a84cdd5f3826cf273168f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 0, "end": 2711, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "3": "011a24a7-172d-4198-853d-d3040505c6ae"}}, "__type__": "1"}, "011a24a7-172d-4198-853d-d3040505c6ae": {"__data__": {"text": "       |\n|----------|------------------------------------------|\n| Bytecode | 0x0B                                     |\n| Fee | 0.00000001 GAS                 |\n| Function   | The item `null` is pushed onto the stack. |\n\n#### PUSHDATA\n\n| Instruction   | PUSHDATA1, PUSHDATA2, PUSHDATA4                                   |\n|----------|---------------------------------------|\n| Bytecode | 0x0C, 0x0D, 0x0E                                                  |\n| Fee | 0.00000008 GAS, 0.00000512 GAS, 0.00004096 GAS |\n| Function   | The next `n` bytes contain the number of bytes to be pushed onto the stack, where n is specified by 1\\|2\\|4. |\n\n#### PUSHM1\n\n| Instruction   | PUSHM1                                   |\n|----------|------------------------------------------|\n| Bytecode | 0x0F                                     |\n| Fee | 0.00000001 GAS               |\n| Function   | The number -1 is pushed onto the stack. |\n\n#### PUSHN\n\n| Instruction   | PUSH0\\~PUSH16                               |\n|----------|---------------------------------------------|\n| Bytecode | 0x10\\~0x20                                  |\n| Fee | 0.00000001 GAS                        |\n| Function   | The number `n` is pushed onto the stack\uff0cwhere n is specified by 0\\~16. |\n\n### Flow Control\n\nIt's used to control the running process of NeoVM, including jump, call and other instructions.\n\n#### NOP\n\n| Instruction   | NOP                                         |\n|----------|---------------------------------------------|\n| Bytecode | 0x21                                        |\n| Fee | 0.00000001 GAS                  |\n| Function   | The `NOP` operation does nothing. It is intended to fill in space if opcodes are patched. |\n\n#### JMP\n\n| Instruction   | JMP                                                     |\n|----------|---------------------------------------------------------|\n| Bytecode | 0x22                                                    |\n| Fee | 0.00000002 GAS       ", "doc_id": "011a24a7-172d-4198-853d-d3040505c6ae", "embedding": null, "doc_hash": "c097f8fc4626ff8e4ae1f90b7a5902ce3bbf4fc366a6ba32777c46b532e12640", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 2644, "end": 4613, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "7c8dcbfe-8f7a-4969-8c83-5f3fc04302cd", "3": "8ced54e1-3659-4815-b39b-087ca4a296f0"}}, "__type__": "1"}, "8ced54e1-3659-4815-b39b-087ca4a296f0": {"__data__": {"text": " |\n| Fee | 0.00000002 GAS                              |\n| Function   | Unconditionally transfers control to a target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMP_L\n\n| Instruction   | JMP_L                                                     |\n|----------|---------------------------------------------------------|\n| Bytecode | 0x23                                                    |\n| Fee | 0.00000002 GAS                              |\n| Function   | Unconditionally transfers control to a target instruction. The target instruction is represented as a 4-bytes signed offset from the beginning of the current instruction.|\n\n#### JMPIF\n\n| Instruction   | JMPIF                                                                                                                |\n|----------|----------------------------------------------------------------------------------------------------------------------|\n| Bytecode | 0x24                                                                                                                 |\n| Fee | 0.00000002 GAS                                                                                           |\n| Function   | Transfers control to a target instruction if the value is `true`, not `null`, or non-zero. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction.|\n\n#### JMPIF_L\n\n| Instruction   | JMPIF                                                                                                                |\n|----------|----------------------------------------------------------------------------------------------------------------------|\n| Bytecode | 0x25                                                                                                                 |\n| Fee | 0.00000002", "doc_id": "8ced54e1-3659-4815-b39b-087ca4a296f0", "embedding": null, "doc_hash": "e46a18731378266ec81cbed2a22938747787ea479709a2c2643843f5d63fbb79", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 4662, "end": 6561, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "011a24a7-172d-4198-853d-d3040505c6ae", "3": "401b909a-22ae-4422-9655-8e44bec433af"}}, "__type__": "1"}, "401b909a-22ae-4422-9655-8e44bec433af": {"__data__": {"text": "          |\n| Fee | 0.00000002 GAS                                                                                           |\n| Function   | Transfers control to a target instruction if the value is `true`, not `null`, or non-zero. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPIFNOT\n\n| Instruction   | JMPIFNOT                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x26                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the value is `false`, a `null` reference, or zero. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPIFNOT_L\n\n| Instruction   | JMPIFNOT_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x27                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the value is `false`, a `null` reference, or zero. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPEQ\n\n| Instruction   | JMPEQ                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x28                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if two values are equal. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPEQ_L\n\n| Instruction   | JMPEQ_L                  ", "doc_id": "401b909a-22ae-4422-9655-8e44bec433af", "embedding": null, "doc_hash": "e8726860c130a70d0ad5ff8af92245c8058801b8ae3f796ae99f310dfe5b963e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 6565, "end": 8609, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "8ced54e1-3659-4815-b39b-087ca4a296f0", "3": "638ada6f-8cc7-4e4e-9394-e17358c8d252"}}, "__type__": "1"}, "638ada6f-8cc7-4e4e-9394-e17358c8d252": {"__data__": {"text": "                                                          |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x29                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if two values are equal. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPNE\n\n| Instruction   | JMPNE                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2A                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction when two values are not equal. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPNE_L\n\n| Instruction   | JMPNE_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2B                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction when two values are not equal. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGT\n\n| Instruction   | JMPGT                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2C                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than the second value. The target instruction is represented as a 1-byte signed offset", "doc_id": "638ada6f-8cc7-4e4e-9394-e17358c8d252", "embedding": null, "doc_hash": "5a9f96d2529d602de8035e2bd5d0cebbfc5f923996f95803e2b3b6c435bf6855", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 8627, "end": 10672, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "401b909a-22ae-4422-9655-8e44bec433af", "3": "f3c2ac86-12b1-4403-ab43-fe8e147aaaf9"}}, "__type__": "1"}, "f3c2ac86-12b1-4403-ab43-fe8e147aaaf9": {"__data__": {"text": "greater than the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGT_L\n\n| Instruction   | JMPGT_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2D                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGE\n\n| Instruction   | JMPGE                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2E                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than or equal to the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGE_L\n\n| Instruction   | JMPGE_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2F                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than or equal to the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLT\n\n| Instruction   | JMPLT                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x30                                                               |\n| Fee | 0.00000002 GAS        ", "doc_id": "f3c2ac86-12b1-4403-ab43-fe8e147aaaf9", "embedding": null, "doc_hash": "e253f0437b17964770acc4f97353a5bacab0239d1dade71a91118f9783607c28", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 10593, "end": 12710, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "638ada6f-8cc7-4e4e-9394-e17358c8d252", "3": "4694313f-5702-427c-83d5-a3d8a2005ce9"}}, "__type__": "1"}, "4694313f-5702-427c-83d5-a3d8a2005ce9": {"__data__": {"text": "|\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLT_L\n\n| Instruction   | JMPLT_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x31                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLE\n\n| Instruction   | JMPLE                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x32                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than or equal to the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLE_L\n\n| Instruction   | JMPLE_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x33                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than or equal to the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### CALL\n\n| Instruction   | CALL                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x34                         ", "doc_id": "4694313f-5702-427c-83d5-a3d8a2005ce9", "embedding": null, "doc_hash": "02eee45f0fae77c01900514385905d2b607f26e7517fbcf2320985d9085243a3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 12771, "end": 14929, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "f3c2ac86-12b1-4403-ab43-fe8e147aaaf9", "3": "b36fb85c-5969-433e-97c0-f6a8ba125104"}}, "__type__": "1"}, "b36fb85c-5969-433e-97c0-f6a8ba125104": {"__data__": {"text": "                                            |\n| Fee | 0.00000512 GAS             |\n| Function   | Calls the function at the target address which is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### CALL_L\n\n| Instruction   | CALL_L                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x35                                                  |\n| Fee | 0.00000512 GAS             |\n| Function   | Calls the function at the target address which is represented as a 4-bytes signed offset from the beginning of the current instruction. |\n\n#### CALLA\n\n| Instruction   | CALLA                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x36                                                  |\n| Fee | 0.00000512 GAS             |\n| Function   | Pops the address of a function from the stack, and call the function. |\n\n#### CALLT\n\n| Instruction | CALLT                                                        |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x37                                                         |\n| Fee         | 0.00032768 GAS                                               |\n| Function    | Pops the function Token from the stack, and call the function. |\n\n#### ABORT\n\n| Instruction   | ABORT                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x38                                                  |\n| Fee | 0 GAS                           |\n| Function   | It turns the vm state to FAULT immediately, and the exception cannot be caught. |\n\n#### ASSERT\n\n| Instruction   | ASSERT                                                       |\n|----------|------------------------------------------------------------------|\n| Bytecode | 0x39   ", "doc_id": "b36fb85c-5969-433e-97c0-f6a8ba125104", "embedding": null, "doc_hash": "056209bbc2857586a81ddba521c2d655c7a6a38d2d54a6b2dfc4af51a0876b15", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 14950, "end": 16923, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "4694313f-5702-427c-83d5-a3d8a2005ce9", "3": "ebeba8c1-7df8-444b-9a38-011e7c96849d"}}, "__type__": "1"}, "ebeba8c1-7df8-444b-9a38-011e7c96849d": {"__data__": {"text": " |\n|----------|------------------------------------------------------------------|\n| Bytecode | 0x39                                                             |\n| Fee | 0.00000001 GAS                                          |\n| Function   | Pop the top value of the stack, if it is false, then exit vm execution and set vm state to FAULT. |\n\n#### THROW\n\n| Instruction   | THROW                 |\n|----------|-----------------------|\n| Bytecode | 0x3A                  |\n| Fee | 0.00000512 GAS                            |\n| Function   | Throws the exception of stack top |\n\n#### TRY\n\n| Instruction | TRY                                                          |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3B                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Enters the block of Try statement. The Catch and Finally address offset are represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### TRY_L\n\n| Instruction | TRY_L                                                        |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3C                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Enters the block of Try statement. The Catch and Finally address offset are represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### ENDTRY\n\n| Instruction | ENDTRY                                                       |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3D                                                         |\n| Fee         | 0.00000004 GAS                                       ", "doc_id": "ebeba8c1-7df8-444b-9a38-011e7c96849d", "embedding": null, "doc_hash": "b8e521bf8f73344252b1e4dc90a0f3ca6d74492d5db984e56372114eeb836659", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 16828, "end": 18738, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "b36fb85c-5969-433e-97c0-f6a8ba125104", "3": "667b2736-d769-4e27-a961-57ff9f9d6f68"}}, "__type__": "1"}, "667b2736-d769-4e27-a961-57ff9f9d6f68": {"__data__": {"text": "                           |\n| Function    | Terminates the block Try and unconditionally transfers control to a target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### ENDTRY_L\n\n| Instruction | ENDTRY_L                                                     |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3E                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Terminates the block Try and unconditionally transfers control to a target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### ENDFINALLY\n\n| Instruction | ENDFINALLY                                                   |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3F                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Terminates the block Finally and goes to the target instruction ENDTRY/ENDTRY_L if there is no exception, or throw the exception to the  upper level again. |\n\n#### RET\n\n| Instruction   | RET                                                                                              |\n|----------|--------------------------------------------------------------------------------------------------|\n| Bytecode | 0x40                                                                                             |\n| Fee | 0 GAS                                                        |\n| Function   | Returns from the current method. |\n\n#### SYSCALL\n\n| Instruction   | SYSCALL                                                |\n|----------|--------------------------------------------------------|\n| Bytecode | 0x41                          ", "doc_id": "667b2736-d769-4e27-a961-57ff9f9d6f68", "embedding": null, "doc_hash": "e798f55f63ed9e26286b265e403e2f502a1a786ede87273dd2a6d4fe8f74d5d6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 18835, "end": 20814, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "ebeba8c1-7df8-444b-9a38-011e7c96849d", "3": "4e74557e-45f4-4dc8-b765-7d45e63c85e0"}}, "__type__": "1"}, "4e74557e-45f4-4dc8-b765-7d45e63c85e0": {"__data__": {"text": "                                            |\n| Fee | 0 GAS                                                        |\n| Function   | Calls to an interop service. |\n### Stack Operation\n\nCopy, remove and swap the elements of the stack.\n\n#### DEPTH\n| Instruction   | DEPTH                          |\n|----------|------------------------------------------|\n| Bytecode | 0x43                                     |\n| Fee | 0.00000002 GAS                                          |\n| Function | Puts the number of stack items onto the stack. |\n\n#### DROP\n\n| Instruction   | DROP                   |\n|----------|------------------------|\n| Bytecode | 0x45                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Removes the top stack item. |\n\n#### NIP\n\n| Instruction   | NIP                               |\n|----------|------------------------------------------|\n| Bytecode | 0x46                                     |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Removes the second-to-top stack item. |\n\n#### XDROP\n\n| Instruction   | XDROP                                              |\n|----------|----------------------------------------------------|\n| Bytecode | 0x48                                               |\n| Fee | 0.00000016 GAS                                          |\n| Function   | The item n back in the main stack is removed. |\n| Function | Gets the integer N from the top stack and removes elements indexed to N from the remaining elements of the stack. |\n\n#### CLEAR\n\n| Instruction   | CLEAR                             |\n|----------|------------------------------------------|\n| Bytecode | 0x49                                     |\n| Fee | 0.00000016 GAS                 |\n| Function   | Clear the stack |\n\n#### DUP\n\n| Instruction   | DUP         ", "doc_id": "4e74557e-45f4-4dc8-b765-7d45e63c85e0", "embedding": null, "doc_hash": "1c8b42091a9d25d3254b8e7783ffbbe48a0e54a90fd50ed1ff5cf6831730a9ac", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 20815, "end": 22659, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "667b2736-d769-4e27-a961-57ff9f9d6f68", "3": "31b8eae2-eced-4831-89ce-24fb50dc7e8f"}}, "__type__": "1"}, "31b8eae2-eced-4831-89ce-24fb50dc7e8f": {"__data__": {"text": "Instruction   | DUP                    |\n|----------|------------------------|\n| Bytecode | 0x4A                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Copies the top stack item to the top. |\n\n#### OVER\n\n| Instruction   | OVER                    |\n|----------|------------------------|\n| Bytecode | 0x4B                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Copies the second-to-top stack item to the top. |\n\n#### PICK\n\n| Instruction   | PICK                    |\n|----------|------------------------|\n| Bytecode | 0x4D                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Gets the integer N from the top stack and copies elements indexed to N from the remaining elements of the stack to the top. |\n\n#### TUCK\n\n| Instruction   | TUCK                    |\n|----------|------------------------|\n| Bytecode | 0x4E                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | The item at the top of the stack is copied and inserted before the second-to-top item. |\n\n#### SWAP\n\n| Instruction   | SWAP                    |\n|----------|------------------------|\n| Bytecode | 0x50                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | The top two items on the stack are swapped. |\n\n#### ROT\n\n| Instruction   | ROT                    |\n|----------|------------------------|\n| Bytecode | 0x51                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Moves the elements indexed to 2 to the top |\n\n#### ROLL\n\n| Instruction   | ROLL                    |\n|----------|------------------------|\n| Bytecode | 0x52                   |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Gets the integer N", "doc_id": "31b8eae2-eced-4831-89ce-24fb50dc7e8f", "embedding": null, "doc_hash": "32bd943b25d44f3633a489de4958b4a9371c1b4175821b6a94118b4def9d90da", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 22645, "end": 24533, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "4e74557e-45f4-4dc8-b765-7d45e63c85e0", "3": "34ad620d-6576-444c-be95-4f127f798044"}}, "__type__": "1"}, "34ad620d-6576-444c-be95-4f127f798044": {"__data__": {"text": "        |\n| Function   | Gets the integer N from the top stack and moves elements indexed to N from the remaining elements of the stack to the top. |\n\n#### REVERSE3\n\n| Instruction   | REVERSE3                    |\n|----------|------------------------|\n| Bytecode | 0x53                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Reverse the order of the top 3 items on the stack. |\n\n#### REVERSE4\n\n| Instruction   | REVERSE4                    |\n|----------|------------------------|\n| Bytecode | 0x54                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Reverse the order of the top 4 items on the stack. |\n\n#### REVERSEN\n\n| Instruction   | REVERSEN                    |\n|----------|------------------------|\n| Bytecode | 0x55                   |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Gets the integer N from the top stack, and reverse the order of the top N items on the stack. |\n\n### Slot\n\n#### INITSSLOT\n\n| Instruction   | INITSSLOT                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x56                                  |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Initialize the static field list for the current execution context. |\n\n#### INITSLOT\n\n| Instruction   | INITSLOT                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x57                                  |\n| Fee | 0.00000064 GAS                                          |\n| Function   | Initialize the argument slot and the local variable list for the current execution context. |\n\n#### LDSFLDN\n\n| Instruction   | LDSFLD0\\~LDSFLD6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x58\\~0x5E                                  |\n| Fee | 0.00000002 GAS                  ", "doc_id": "34ad620d-6576-444c-be95-4f127f798044", "embedding": null, "doc_hash": "3025c906397d213c56f6c340e7aa8bcf50045fdb61f11ca967aa4a21d3fc6072", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 24522, "end": 26480, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "31b8eae2-eced-4831-89ce-24fb50dc7e8f", "3": "a159d6c8-6299-4fd1-84d3-39093f641848"}}, "__type__": "1"}, "a159d6c8-6299-4fd1-84d3-39093f641848": {"__data__": {"text": "GAS                                          |\n| Function   | Loads the static field at index `n` onto the evaluation stack, where the n is 0\\~6\u3002 |\n\n#### LDSFLD\n\n| Instruction   | LDSFLD                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x5F                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the static field at a specified index onto the evaluation stack. The index is represented as a 1-byte unsigned integer. |\n\n#### STSFLDN\n\n| Instruction   | STSFLD0\\~STSFLD6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x60\\~0x0x66                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the static field list at index `n`, where the n is 0\\~6\u3002 |\n\n#### STSFLD\n\n| Instruction   | STSFLD                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x67                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the static field list at a specified index. The index is represented as a 1-byte unsigned integer. |\n\n#### LDLOCN\n\n| Instruction   | LDLOC0\\~LDLOC6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x68\\~0x6E                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the local variable at index `n` onto the evaluation stack, where the n is 0\\~6\u3002 |\n\n#### LDLOC\n\n| Instruction   | LDLOC                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x6F                                  |\n| Fee | 0.00000002 GAS                     ", "doc_id": "a159d6c8-6299-4fd1-84d3-39093f641848", "embedding": null, "doc_hash": "7bcd5b1f85117c05110aac0948abc26fa6c283a5f662c0d25622580ef5d9356a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 26505, "end": 28429, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "34ad620d-6576-444c-be95-4f127f798044", "3": "4408cd15-53b4-4d28-91c8-49b644ce42ea"}}, "__type__": "1"}, "4408cd15-53b4-4d28-91c8-49b644ce42ea": {"__data__": {"text": "                                        |\n| Function   | Loads the local variable at a specified index onto the evaluation stack. The index is represented as a 1-byte unsigned integer. |\n\n#### STLOCN\n\n| Instruction   | STLOC0\\~STLOC6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x70\\~0x76                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the local variable list at index `n`, where the n is 0\\~6\u3002 |\n\n#### STLOC\n\n| Instruction   | STLOC                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x77                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the local variable list at a specified index. The index is represented as a 1-byte unsigned integer. |\n\n#### LDARGN\n\n| Instruction   | LDARG0\\~LDARG6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x78\\~0x7E                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the argument at index `n` onto the evaluation stack, where the n is 0\\~6. |\n\n#### LDARG\n\n| Instruction   | LDARG                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x7F                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the argument at a specified index onto the evaluation stack. The index is represented as a 1-byte unsigned integer. |\n\n#### STARGN\n\n| Instruction   | STARG0\\~STARG6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x80\\~0x86                                |\n| Fee | 0.00000002 GAS                           ", "doc_id": "4408cd15-53b4-4d28-91c8-49b644ce42ea", "embedding": null, "doc_hash": "5a6e3707236ed648b55fff2d7983005f02884676db5c911c792aae4d39105958", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 28433, "end": 30401, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "a159d6c8-6299-4fd1-84d3-39093f641848", "3": "6766ce00-1b31-44d1-acee-fff474577ced"}}, "__type__": "1"}, "6766ce00-1b31-44d1-acee-fff474577ced": {"__data__": {"text": "                                  |\n| Function   | Stores the value on top of the evaluation stack in the argument slot at index `n`, where the n is 0\\~6. |\n\n#### STARG\n\n| Instruction   | STARG                                 |\n|----------|--------------------------------------|\n| Bytecode | 0x87                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the argument slot at a specified index. The index is represented as a 1-byte unsigned integer. |\n\n### String Operation\n\n#### NEWBUFFER\n\n| Instruction   | NEWBUFFER                                              |\n|----------|--------------------------------------------------|\n| Bytecode | 0x88                                             |\n| Fee | 0.00000256  GAS                                         |\n| Function   | Create a new buffer |\n\n#### MEMCPY\n\n| Instruction   | MEMCPY                                              |\n|----------|--------------------------------------------------|\n| Bytecode | 0x89                                             |\n| Fee | 0.00002048  GAS                                         |\n| Function   | memory copy |\n\n#### CAT\n\n| Instruction   | CAT                                              |\n|----------|--------------------------------------------------|\n| Bytecode | 0x8B                                             |\n| Fee | 0.00002048  GAS                                         |\n| Function   | Concatenates two strings. |\n\n#### SUBSTR\n\n| Instruction   | SUBSTR                                       |\n|----------|----------------------------------------------|\n| Bytecode | 0x8C                                         |\n| Fee | 0.00002048 GAS                                        ", "doc_id": "6766ce00-1b31-44d1-acee-fff474577ced", "embedding": null, "doc_hash": "f0064acbb00e4aa3e198150dc12a3f790c453124f149e23e7e6b8885c53d9537", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 30402, "end": 32196, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "4408cd15-53b4-4d28-91c8-49b644ce42ea", "3": "e46bd04e-ff28-459e-b1c7-e8c6b8b60d53"}}, "__type__": "1"}, "e46bd04e-ff28-459e-b1c7-e8c6b8b60d53": {"__data__": {"text": "                     |\n| Function   | Returns a section of a string. |\n\n#### LEFT\n\n| Instruction   | LEFT                                         |\n|----------|----------------------------------------------|\n| Bytecode | 0x8D                                         |\n| Fee | 0.00002048 GAS                                          |\n| Function   | Gets characters in the left of the specified point in a string. |\n\n#### RIGHT\n\n| Instruction   | RIGHT                                        |\n|----------|----------------------------------------------|\n| Bytecode | 0x8E                                         |\n| Fee | 0.00002048 GAS                                          |\n| Function   | Gets characters in the right of the specified point in a string. |\n\n### Logical Operation\n\n#### INVERT\n\n| Instruction   | INVERT                       |\n|----------|------------------------------|\n| Bytecode | 0x90                         |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Flips all of the bits in the input. |\n\n#### AND\n\n| Instruction   | AND                                    |\n|----------|----------------------------------------|\n| Bytecode | 0x91                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Boolean and between each bit in the inputs |\n\n#### OR\n\n| Instruction   | OR                                     |\n|----------|----------------------------------------|\n| Bytecode | 0x92                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Boolean or between each bit in the inputs. |\n\n#### XOR\n\n| Instruction   | XOR                                      |\n|----------|------------------------------------------|\n| Bytecode | 0x93                    ", "doc_id": "e46bd04e-ff28-459e-b1c7-e8c6b8b60d53", "embedding": null, "doc_hash": "101439a25c89f3875ec48444c5a81a4c9dd8754cde38e5b56a09780656fd2446", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 32197, "end": 34023, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "6766ce00-1b31-44d1-acee-fff474577ced", "3": "aae8a8f7-8ba1-46ce-8885-2ae9b0f8c109"}}, "__type__": "1"}, "aae8a8f7-8ba1-46ce-8885-2ae9b0f8c109": {"__data__": {"text": "                                    |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Boolean exclusive or between each bit in the inputs. |\n\n#### EQUAL\n\n| Instruction   | EQUAL                                        |\n|----------|----------------------------------------------|\n| Bytecode | 0x97                                         |\n| Fee | 0.00000032 GAS                                          |\n| Function   | Returns 1 if the inputs are exactly equal, 0 otherwise. |\n\n#### NOTEQUAL\n\n| Instruction   | NOTEQUAL                                        |\n|----------|----------------------------------------------|\n| Bytecode | 0x98                                         |\n| Fee | 0.00000032 GAS                                          |\n| Function   | Returns 1 if the inputs are not equal, 0 otherwise. |\n\n### Arithmetic Operation\n\n#### SIGN\n\n| Instruction   | SIGN                                         |\n|----------|----------------------------------------------|\n| Bytecode | 0x99                                         |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Puts the sign of top stack item on top of the main stack. If value is negative, put -1; if positive, put 1; if value is zero, put 0. |\n\n#### ABS\n\n| Instruction   | ABS                            |\n|----------|--------------------------------|\n| Bytecode | 0x9A                           |\n| Fee | 0.00000004 GAS                                          |\n| Function   | The input is made positive. |\n\n#### NEGATE\n\n| Instruction   | NEGATE                         |\n|----------|--------------------------------|\n| Bytecode | 0x9B                           |\n| Fee | 0.00000004 GAS                                          |\n| Function   | The sign of", "doc_id": "aae8a8f7-8ba1-46ce-8885-2ae9b0f8c109", "embedding": null, "doc_hash": "e5efaee67b30da4aa3f6993ccd54980990b6f6e576e6f13e5a6c2a80db8eaeab", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 34024, "end": 35827, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "e46bd04e-ff28-459e-b1c7-e8c6b8b60d53", "3": "14f05ea2-46be-4d05-99a0-d3eebe4e79f4"}}, "__type__": "1"}, "14f05ea2-46be-4d05-99a0-d3eebe4e79f4": {"__data__": {"text": "          |\n| Function   | The sign of the input is flipped. |\n\n#### INC\n\n| Instruction   | INC                                |\n|----------|------------------------------------|\n| Bytecode | 0x9C                               |\n| Fee | 0.00000004 GAS                                          |\n| Function   | 1 is added to the input. |\n\n#### DEC\n\n| Instruction   | DEC                                |\n|----------|------------------------------------|\n| Bytecode | 0x9D                               |\n| Fee | 0.00000004 GAS                                          |\n| Function   | 1 is subtracted from the input. |\n\n#### ADD\n\n| Instruction   | ADD                                    |\n|----------|----------------------------------------|\n| Bytecode | 0x9E                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | a is added to b. |\n\n#### SUB\n\n| Instruction   | SUB                                    |\n|----------|----------------------------------------|\n| Bytecode | 0x9F                                  |\n| Fee | 0.00000008 GAS                                          |\n| Function   | b is subtracted from a. |\n\n#### MUL\n\n| Instruction   | MUL                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xA0                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | a is multiplied by b. |\n\n#### DIV\n\n| Instruction   | DIV                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xA1                                   |\n| Fee | 0.00000008 GAS                                 ", "doc_id": "14f05ea2-46be-4d05-99a0-d3eebe4e79f4", "embedding": null, "doc_hash": "650bb913c11eb9aa53497404fea78d7ecf2ea8d5949264bec16a7957aec20b04", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 35807, "end": 37503, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "aae8a8f7-8ba1-46ce-8885-2ae9b0f8c109", "3": "e12bda77-847f-471d-832c-b2667e4f114e"}}, "__type__": "1"}, "e12bda77-847f-471d-832c-b2667e4f114e": {"__data__": {"text": "                            |\n| Function   | a is divided by b. |\n\n#### MOD\n\n| Instruction   | MOD                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xA2                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns the remainder after dividing a by b. |\n\n#### POW\n\n| Instruction | POW                                                |\n| ----------- | -------------------------------------------------- |\n| Bytecode    | 0xA3                                               |\n| Fee         | 0.00000064 GAS                                     |\n| Function    | The result of raising value to the exponent power. |\n\n#### SQRT\n\n| Instruction | SQRT                                           |\n| ----------- | ---------------------------------------------- |\n| Bytecode    | 0xA4                                           |\n| Fee         | 0.00000064 GAS                                 |\n| Function    | Returns the square root of a specified number. |\n\n#### SHL\n\n| Instruction   | SHL                              |\n|----------|----------------------------------|\n| Bytecode | 0xA8                             |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Gets the integer n from the top stack and performs a n-bit left shift operation on the remaining BigInteger on the stack. |\n\n#### SHR\n\n| Instruction   | SHR                              |\n|----------|----------------------------------|\n| Bytecode | 0xA9                             |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Gets the integer n from the top stack and performs a n-bit right shift operation on the remaining BigInteger on the stack. |\n\n#### NOT\n\n| Instruction   | NOT                 ", "doc_id": "e12bda77-847f-471d-832c-b2667e4f114e", "embedding": null, "doc_hash": "b04bf1a6a0a0ba2f6e0e5b2e3a1f1fb221778ce1b93c1085599fc1ad69be7c51", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 37525, "end": 39370, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "14f05ea2-46be-4d05-99a0-d3eebe4e79f4", "3": "84368e21-284f-4737-82e1-b05c2718e61d"}}, "__type__": "1"}, "84368e21-284f-4737-82e1-b05c2718e61d": {"__data__": {"text": " | NOT                                |\n|----------|------------------------------------|\n| Bytecode | 0xAA                               |\n| Fee | 0.00000004 GAS                                          |\n| Function   | If the input is 0 or 1, it is flipped. Otherwise the output will be 0. |\n\n#### BOOLAND\n\n| Instruction   | BOOLAND                                |\n|----------|----------------------------------------|\n| Bytecode | 0xAB                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | If both a and b are not 0, the output is 1. Otherwise 0. |\n\n#### BOOLOR\n\n| Instruction   | BOOLOR                                 |\n|----------|----------------------------------------|\n| Bytecode | 0xAC                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | If a or b is not 0, the output is 1. Otherwise 0. |\n\n#### NZ\n\n| Instruction   | NZ                                  |\n|----------|-------------------------------------|\n| Bytecode | 0xB1                                |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Returns 0 if the input is 0. 1 otherwise. |\n\n\n#### NUMEQUAL\n\n| Instruction   | NUMEQUAL                               |\n|----------|----------------------------------------|\n| Bytecode | 0xB3                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if the numbers are equal, 0 otherwise. |\n\n#### NUMNOTEQUAL\n\n| Instruction   | NUMNOTEQUAL                              |\n|----------|------------------------------------------|\n| Bytecode | 0xB4                                     |\n| Fee | 0.00000008 GAS                            ", "doc_id": "84368e21-284f-4737-82e1-b05c2718e61d", "embedding": null, "doc_hash": "f0fefe1b123d905774d8a55b37214f70ab3d44ca48d02e29349b24a2bda09d4a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 39367, "end": 41148, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "e12bda77-847f-471d-832c-b2667e4f114e", "3": "2b6fc718-e80b-40a6-bd55-b0142b6e05d0"}}, "__type__": "1"}, "2b6fc718-e80b-40a6-bd55-b0142b6e05d0": {"__data__": {"text": "                                 |\n| Function   | Returns 1 if the numbers are not equal, 0 otherwise.|\n\n#### LT \n\n| Instruction   | LT                                     |\n|----------|----------------------------------------|\n| Bytecode | 0xB5                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is less than b, 0 otherwise. |\n\n#### LE\n\n| Instruction   | LE                                        |\n|----------|--------------------------------------------|\n| Bytecode | 0xB6                                       |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is less than or equal to b, 0 otherwise. |\n\n#### GT\n\n| Instruction   | GT                                     |\n|----------|----------------------------------------|\n| Bytecode | 0xB7                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is greater than b, 0 otherwise. |\n\n#### GE\n\n| Instruction   | GE                                        |\n|----------|--------------------------------------------|\n| Bytecode | 0xB8                                       |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is greater than or equal to b, 0 otherwise. |\n\n#### MIN\n\n| Instruction   | MIN                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xB9                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns the smaller of a and b. |\n\n\n#### MAX\n\n| Instruction   | MAX                                   ", "doc_id": "2b6fc718-e80b-40a6-bd55-b0142b6e05d0", "embedding": null, "doc_hash": "16ac5d6e503cd8b3d8e036696645247f1c293baa2a85f3a90c87b8596dde626b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 41153, "end": 42887, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "84368e21-284f-4737-82e1-b05c2718e61d", "3": "c0516597-627f-49cb-94fe-5a1f730fc621"}}, "__type__": "1"}, "c0516597-627f-49cb-94fe-5a1f730fc621": {"__data__": {"text": "                    |\n|----------|----------------------------------------|\n| Bytecode | 0xBA                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns the larger of a and b. |\n\n#### WITHIN\n\n| Instruction   | WITHIN                                       |\n|----------|----------------------------------------------|\n| Bytecode | 0xBB                                         |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if x is within the specified range (left-inclusive), 0 otherwise. |\n\n### Advanced Data Structure\n\nIt has implemented common operations for array, map, struct, etc.\n\n#### PACKMAP\n\n| Instruction | PACKMAP                                                      |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0xBE                                                         |\n| Fee         | 0.00002048 GAS                                               |\n| Function    | A value n is taken from top of main stack. The next n*2 items on main stack are removed, put inside n-sized map and this map is put on top of the main stack. |\n\n#### PACKSTRUCT\n\n| Instruction | PACKSTRUCT                                                   |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0xBF                                                         |\n| Fee         | 0.00002048 GAS                                               |\n| Function    | A value n is taken from top of main stack. The next n items on main stack are removed, put inside n-sized struct and this struct is put on top of the main stack. |\n\n#### PACK\n\n| Instruction   | PACK                              |\n|----------|-----------------------------------|\n| Bytecode | 0xC0                              |\n| Fee | 0.00002048 GAS                ", "doc_id": "c0516597-627f-49cb-94fe-5a1f730fc621", "embedding": null, "doc_hash": "bf225a916379887d5206f91628071c1d4cb78a0465a8285b06fd28c268b4efad", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 42888, "end": 44809, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "2b6fc718-e80b-40a6-bd55-b0142b6e05d0", "3": "628a9bfa-f8ca-403a-921e-68c5ce33467a"}}, "__type__": "1"}, "628a9bfa-f8ca-403a-921e-68c5ce33467a": {"__data__": {"text": "GAS                                       |\n| Function   | A value n is taken from top of main stack. The next n items on main stack are removed, put inside n-sized array and this array is put on top of the main stack. |\n\n#### UNPACK\n\n| Instruction   | UNPACK                             |\n|----------|------------------------------------|\n| Bytecode | 0xC1                               |\n| Fee | 0.00002048 GAS                                       |\n| Function   | An array is removed from top of the main stack. Its elements are put on top of the main stack (in reverse order) and the array size is also put on main stack. |\n\n#### NEWARRAY0\n\n| Instruction   | NEWARRAY0                             |\n|----------|------------------------------------|\n| Bytecode | 0xC2                               |\n| Fee | 0.00000016 GAS                                          |\n| Function   | An array with size n is put on top of the main stack. |\n\n#### NEWARRAY\n\n| Instruction   | NEWARRAY                             |\n|----------|------------------------------------|\n| Bytecode | 0xC3                               |\n| Fee | 0.00000512 GAS                                          |\n| Function   | A value n is taken from top of main stack. A null-filled array with size n is put on top of the main stack. |\n\n#### NEWARRAY_T\n\n| Instruction   | NEWARRAY_T                           |\n|----------|------------------------------------|\n| Bytecode | 0xC4                               |\n| Fee | 0.00000512 GAS                                          |\n| Function   | An array of type T with size n is put on top of the main stack. |\n\n#### NEWSTRUCT0\n\n| Instruction   | NEWSTRUCT0                           |\n|----------|------------------------------------|\n| Bytecode | 0xC5                               |\n| Fee | 0.00000016 GAS                                          |\n| Function   | A structure with size n and all 0 elements is put on top of the main stack. |\n\n#### NEWSTRUCT\n\n| Instruction   | NEWSTRUCT       ", "doc_id": "628a9bfa-f8ca-403a-921e-68c5ce33467a", "embedding": null, "doc_hash": "9a9528e2fb1dd27abb057496b1f199cc44c15ce6f56c855e1a8c89d8d0d24fc9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 44807, "end": 46819, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "c0516597-627f-49cb-94fe-5a1f730fc621", "3": "e204528d-2a9a-4cc1-9adc-81d1b81fa058"}}, "__type__": "1"}, "e204528d-2a9a-4cc1-9adc-81d1b81fa058": {"__data__": {"text": "NEWSTRUCT\n\n| Instruction   | NEWSTRUCT                           |\n|----------|------------------------------------|\n| Bytecode | 0xC6                               |\n| Fee | 0.00000512 GAS                                          |\n| Function   | A value n is taken from top of main stack. A zero-filled struct with size n is put on top of the main stack. |\n\n#### NEWMAP\n\n| Instruction   | NEWMAP                  |\n|----------|-------------------------|\n| Bytecode | 0xC8                    |\n| Fee | 0.00000008 GAS                                          |\n| Function   | An empty Map is put on top of the main stack. |\n\n#### SIZE\n\n| Instruction   | SIZE                  |\n|----------|-------------------------|\n| Bytecode | 0xCA                    |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Gets the size of elements on the top stack. |\n\n#### HASKEY\n\n| Instruction   | HASKEY                  |\n|----------|-------------------------|\n| Bytecode | 0xCB                    |\n| Fee | 0.00000064 GAS                                          |\n| Function   | An input index n (or key) and an array (Map\uff0cBuffer, ByteString) are returned from the top of the main stack. Puts True on top of main stack if n is in the length range of the array (Map\uff0cBuffer, ByteString), and False otherwise. |\n\n#### KEYS\n\n| Instruction   | KEYS                                |\n|----------|-------------------------------------|\n| Bytecode | 0xCC                                |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Gets all Keys of the map from top of the main stack and constructs a new array with all Key and puts it on top of the main stack. |\n\n#### VALUES\n\n| Instruction   | VALUES                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xCD                                    |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Gets", "doc_id": "e204528d-2a9a-4cc1-9adc-81d1b81fa058", "embedding": null, "doc_hash": "856ef2e4c200107496fd7d077f10191ff7c800244c0bf1353d949b4de9f43a4c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 46790, "end": 48772, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "628a9bfa-f8ca-403a-921e-68c5ce33467a", "3": "4ffa669a-bdb7-4db0-a30f-19d5092a0255"}}, "__type__": "1"}, "4ffa669a-bdb7-4db0-a30f-19d5092a0255": {"__data__": {"text": "           |\n| Function   | Gets all Values of the elements (Array or Map) from top of the main stack and constructs a new array with all Value and puts it on top of the main stack.|\n\n#### PICKITEM\n\n| Instruction   | PICKITEM                           |\n|----------|------------------------------------|\n| Bytecode | 0xCE                               |\n| Fee | 0.00000064 GAS                                          |\n| Function   | Gets the Nth element in the array of the top stack|\n\n#### APPEND\n\n| Instruction   | APPEND                |\n|----------|-----------------------|\n| Bytecode | 0xCF                  |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Adds a new item to the arry of the top stack |\n\n#### SETITEM\n\n| Instruction   | SETITEM                                  |\n|----------|------------------------------------------|\n| Bytecode | 0xD0                                     |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Assigns a value to the specified index of element \uff08Array\uff0cMap or Buffer\uff09in the top stack |\n\n#### REVERSEITEMS\n\n| Instruction   | REVERSEITEMS                                  |\n|----------|------------------------------------------|\n| Bytecode | 0xD1                                     |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Reverses the elements in Array or Buffer from the top stack.|\n\n#### REMOVE\n\n| Instruction   | REMOVE                            |\n|----------|-----------------------------------|\n| Bytecode | 0xD2                              |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Removes the specified index or Key elements from Array or Map        |\n\n#### CLEARITEMS\n\n| Instruction   | CLEARITEMS                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xD3                   ", "doc_id": "4ffa669a-bdb7-4db0-a30f-19d5092a0255", "embedding": null, "doc_hash": "47b2c13d81f0998fdf7b059228e6b6817fcb175a644f2d0eca191a75312b2981", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 48790, "end": 50726, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "e204528d-2a9a-4cc1-9adc-81d1b81fa058", "3": "0595d50b-e6a4-4a2b-8521-5e00607fbeea"}}, "__type__": "1"}, "0595d50b-e6a4-4a2b-8521-5e00607fbeea": {"__data__": {"text": "                                   |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Remove all the items from the compound-type. |\n\n#### POPITEM\n\n| Instruction | POPITEM                                                      |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0xD4                                                         |\n| Fee         | 0.00000016 GAS                                               |\n| Function    | Pops the last element in Array from the stack top and push into the stack. |\n\n### Type \n\n#### ISNULL\n\n| Instruction   | ISNULL                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xD8                                    |\n| Fee | 0.00000002 GAS                            |\n| Function   | Returns true if the input is null. Returns false otherwise. |\n\n#### ISTYPE\n\n| Instruction   | ISTYPE                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xD9                                    |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Returns true if the top item is of the specified type.|\n\n#### CONVERT\n\n| Instruction   | CONVERT                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xDB                                    |\n| Fee | 0.00002048 GAS                            |\n| Function   | Converts the top item to the specified type. |\n\n> [!Note]\n>\n> The operation code with \\* indicates that the result of the operation is not pushed back to the `EvaluationStack` using `PUSH()`.\n", "doc_id": "0595d50b-e6a4-4a2b-8521-5e00607fbeea", "embedding": null, "doc_hash": "aa88fb0935bb7c6ae06d171ca7812e24a948f59ce22cc4a181a3f9c555b9e0a2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}, "node_info": {"start": 50724, "end": 52403, "_node_type": "1"}, "relationships": {"1": "15d14ada85a706762e9d64584d7f7c57b4fea321", "2": "4ffa669a-bdb7-4db0-a30f-19d5092a0255"}}, "__type__": "1"}, "643ef0d3-77ef-44f2-a2e4-7c86a554b23e": {"__data__": {"text": "# NNS API Reference\n\nThe Neo Name Service (NNS) is a distributed, open, and extensible naming system based on the Neo blockchain. It maps human-readable names to various complex data types, such as IP address, domain aliase, content hash, and so forth. \n\n## Name processing\n\nThe NNS works with fixed length 160-bit cryptographic hashes in place of human-readable names. For user-registered domain strings, NNS hashes them with the ripemd160 algorithms.\n\n```c#\nByteString tokenKey = CryptoLib.ripemd160(name);\n```\n\n## Committee duties \n### Register root domain name\nThe NNS root domain name is registered by the Neo committee, and the multi-party signature of the committee is verified during registration. Before your can register a domain name, you must ensure that the corresponding root domain name already exists, otherwise, an exception is thrown.\n\n```c#\nvoid AddRoot(string root)\n```\n### Set fee\n\nThe domain name registering and renewing requires  a certain fee, which defaults to 10 GAS. The fee is set by the Neo committee and the upper limit is 10,000 GAS. The multi-party signature of the committee should be provided for the signature verification.\n\n```c#\nvoid SetPrice(long price)\n```\n### Update contract\n\nYou can update the NNS contract by providing committee's multi-party signatures for signature verification.\n\n```\nvoid Update(ByteString nef, string manifest)\n```\n\n## Domain registry\n\nNNS supports the registration of second-level domain names. When registering, the signature of the registrar (i.e. the domain name owner) needs to be verified. The default validity period of the registered domain is 1 year. Registering a domain name requires a certain fee, which is currently 10 GAS.\n\nIf the domain name to be registered already exists, you need to verify if it has expired. If yes, the registration will fail; otherwise, change the account information of the domain name owner. If the domain name to be registered does not exist, modify the account information of the domain name owner, and update TotalSupply of the domain name in the system at the same time\n\n```c#\nbool Register(string name, UInt160 owner)\n```\n\n## Domain renewal\nNNS supports the renewal of second-level domain names. Anyone can renew the desired domain name to extend the validity period of the domain name and its sub-domains. Renewing a domain name requires a certain fee, which is currently 10 GAS. After the renewal, the validity period of the domain name is extended for one year.\n\n```c#\nulong Renew(string name)\n```\n## Administration\nThe domain name owners can specify an administrator, who is authorized to perform a series operations on the domain name, including  setting and removing domain types, and so on. NNS supports the administrator setting of the second-level domain name. The signatures of the administrator and the domain name owner must be provided for verification.\n\n```c#\nvoid SetAdmin(string name, UInt160 admin)\n```\n\n### Type setting\nThe domain name owner or administrator can set the data type for the domain name. Currently the four types `A (IPv4)`, `CNAME (alias)`, `TXT (text type)`, and `AAAA (IPv6)` are supported. The domain name to be set is not limited to the second-level domain name. The signature of the second-level domain name's owner or administrator needs to be provided for verification.\n\n```c#\nvoid SetRecord(string name, RecordType type, string data)\n```\n### Name resolving\nYou can input the domain name and the data type to resolve the corresponding domain name data. NNS will recursively resolve the entered domain name no more than three times.\n\nFor example, invoke `SetRecord(\"test.neo\", RecordType.CNAME, \"test2.neo\")` and set the domain name`test.neo` to the alias of `test2.neo`. Then", "doc_id": "643ef0d3-77ef-44f2-a2e4-7c86a554b23e", "embedding": null, "doc_hash": "923ea58d4a9dec936e17beb5b4eb269a6f073e32f5ac16f2aa0bf8a3822f02e6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/nns.html"}, "node_info": {"start": 0, "end": 3725, "_node_type": "1"}, "relationships": {"1": "bf14935ee27ccf10503e29b45d6583d46bd077d8", "3": "00c28627-aa14-480a-acbd-5af6e85e4c8e"}}, "__type__": "1"}, "00c28627-aa14-480a-acbd-5af6e85e4c8e": {"__data__": {"text": "domain name`test.neo` to the alias of `test2.neo`. Then invoke`SetRecord(\"tes2.neo\", RecordType.A, \"127.0.0.1\")` and set an IPv4 type data 127.0.0.1 to `test2.neo`. If you invoke the function  `Resolve(\"test.neo\", RecordType.A)`\uff0cthe IP `127.0.0.1` can be obtained after recursive resolution.\n\n```c#\nstring Resolve(string name, RecordType type)\n```\n## Name transfer\nNNS supports ownership transfer, which requires verification of the original domain name owner's  signature while updating the account status of the sender and receiver.\n\n```c#\nbool Transfer(UInt160 to, byte[] tokenId)\n```\n## Handling of expired names\nNNS will check the domain name expiration time in the system when doing certain operations. For expired domain names, only re-registration (`Register`) is supported. Other operations such as ownership transfer, domain information inquiry, renewal, setting administrator, type data related operations (set, get, delete), etc. will throw an exception.", "doc_id": "00c28627-aa14-480a-acbd-5af6e85e4c8e", "embedding": null, "doc_hash": "dc000d990713376b3a9b4276afe4037e2ab6e5287dd68bd9b9e7fcd1810abf8e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/nns.html"}, "node_info": {"start": 3670, "end": 4636, "_node_type": "1"}, "relationships": {"1": "bf14935ee27ccf10503e29b45d6583d46bd077d8", "2": "643ef0d3-77ef-44f2-a2e4-7c86a554b23e"}}, "__type__": "1"}, "527e75f8-f9cc-4e02-8298-2a86da12a699": {"__data__": {"text": "# API Reference\n\nEach NEO-CLI node provides an API interface for obtaining blockchain data from it, making it easy to develop blockchain applications. The interface is provided via [JSON-RPC](http://wiki.geekdream.com/Specification/json-rpc_2.0.html), and the underlying protocol uses HTTP/HTTPS for communication. \n\nTo start a node that provides an RPC service, you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases). Refer to [Installing plugins](../../../node/cli/config.html#installing-plugins) for instructions. No need to add an argument when starting Neo-CLI.\n\n> [!Note]\n>\n> If the desired version of file is not found during installation, it is because the corresponding version of RpcServer plug-in has not been released yet. In that case, you can compile the project [neo-modules](https://github.com/neo-project/neo-modules) by yourself:\n>\n> 1. Create the folder Plugins under the directory where neo-cli.dll locates.\n> 2. Put the RpcServer file you has complied in the Plugins folder and then restart Neo-CLI.\n\n## Listening ports\n\nAfter the JSON-RPC server is started, it will listen to the TCP port. By default it is the port 10332 of the local address (127.0.0.1), which is\n\n```\nhttp://127.0.0.1:10332/\n```\n\nYou can modify the port in config.json in the RpcServer folder.\n\n## Command Lists\n\n### Blockchain\n\n| Method                                        | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getbestblockhash](api/getbestblockhash.md) |                                          | Gets the hash of the latest block in the blockchain. |\n| [getblock](api/getblock.md)              | \\<hash \\| index> [verbose=0]                  | Returns the block information with the specified hash value or index. |\n| [getblockcount](api/getblockcount.md)    |                                          | Gets the block count of the blockchain. |\n| [getblockhash](api/getblockhash.md)      | \\<index>                                 | Returns the block hash with the specified index. |\n| [getblockheader](api/getblockheader.md) | \\<hash \\| index> [verbose=0] | Returns the information of the block header with the specified script hash or index. |\n| [getcommittee](api/getcommittee.md) | | Gets the public key list of current Neo committee members. |\n| [getnativecontracts](api/getnativecontracts.md)         |                              | Gets the list of native contracts.    |\n| [getnextblockvalidators](api/getnextblockvalidators.md) |", "doc_id": "527e75f8-f9cc-4e02-8298-2a86da12a699", "embedding": null, "doc_hash": "b2db2a25f06e239553dea3f89a0e1e1f829e0f3e896d16c20aec6bfb1e3fbe94", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html"}, "node_info": {"start": 0, "end": 2707, "_node_type": "1"}, "relationships": {"1": "df222dc1540a5712d14a666de832b4506fe754c6", "3": "4abd3583-d024-4845-b9ef-261cdbd86866"}}, "__type__": "1"}, "4abd3583-d024-4845-b9ef-261cdbd86866": {"__data__": {"text": "[getnextblockvalidators](api/getnextblockvalidators.md) |                              | Gets the validators list of the next block. |\n| [getcontractstate](api/getcontractstate.md) | \\<script_hash>                           | Returns information of the contract with the specified script hash. |\n| [getrawmempool](api/getrawmempool.md)    | [shouldGetUnverified=0]         | Gets a list of confirmed transactions in memory. If the value is 1 it gets all the transactions including both confirmed and unconfirmed transactions. |\n| [getrawtransaction](api/getrawtransaction.md) | \\<txid> [verbose=0]                      | Returns the transaction information with the specified hash value. |\n| [getstorage](api/getstorage.md)          | \\<script_hash>  \\<key>                   | Returns the value with the contract script hash and the key. |\n| [gettransactionheight](api/gettransactionheight.md) | \\<txid> | Returns the transaction height with the specified transaction hash. |\n\n\n### Node\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getconnectioncount](api/getconnectioncount.md) |                                          | Gets the current connection count of the node. |\n| [getpeers](api/getpeers.md)              |                                          | Gets a list of nodes that are currently connected/disconnected by this node. |\n| [getversion](api/getversion.md)          |                                          | Gets the version information of the node. |\n| [sendrawtransaction](api/sendrawtransaction.md) | \\<hex> | Broadcasts a transaction over the network. |\n| [submitblock](api/submitblock.md) | \\<hex> | Submits a new block to the network.<br/>**Note**: Need to be a validator |\n\n### Smart Contract\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getunclaimedgas](api/getunclaimedgas.md) | \\<address> | Gets unclaimed gas of the specified address. |\n| [invokefunction](api/invokefunction.md) | \\<script_hash>", "doc_id": "4abd3583-d024-4845-b9ef-261cdbd86866", "embedding": null, "doc_hash": "cd041fa4388a6a653d87797abc21d214cc64815cc6531b992658609266e0b05d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html"}, "node_info": {"start": 2652, "end": 5123, "_node_type": "1"}, "relationships": {"1": "df222dc1540a5712d14a666de832b4506fe754c6", "2": "527e75f8-f9cc-4e02-8298-2a86da12a699", "3": "ed95445e-d515-434e-940e-26a5032fe054"}}, "__type__": "1"}, "ed95445e-d515-434e-940e-26a5032fe054": {"__data__": {"text": "|\n| [invokefunction](api/invokefunction.md) | \\<script_hash>  \\<operation>  \\[params] \\[sender] \\[signers] | Invokes a smart contract with the specified script hash, passing in the method name and its params. |\n| [invokescript](api/invokescript.md) | \\<script> \\[sender] \\[signers] | Runs a script through the virtual machine and returns the results. |\n| [traverseiterator](api/traverseiterator.md) | \\<session> \\<iterator id>] \\<count> | Gets the Iterator type data. |\n\n### Tool\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [listplugins](api/listplugins.md) | | Returns a list of plugins loaded by the node. |\n| [validateaddress](api/validateaddress.md) | \\<address>                              | Verifies whether the address is a valid NEO address. |\n\n### Wallet\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [calculatenetworkfee](api/calculatenetworkfee.md) | \\<tx> | Calculates network fee for the specified transaction. |\n| [closewallet](api/closewallet.md) |  | Closes the current wallet. |\n| [dumpprivkey](api/dumpprivkey.md) | \\<address>                              | Exports the private key of the specified address. |\n| [getnewaddress](api/getnewaddress.md) |  | Creates a new address. |\n| [getwalletbalance](api/getwalletbalance.md) | \\<asset_id> | Returns the balance of the corresponding asset in the wallet. |\n| [getwalletunclaimedgas](api/getwalletunclaimedgas.md) |  | Gets the amount of unclaimed GAS in the wallet. |\n| [importprivkey](api/importprivkey.md) | \\<key> | Imports the private key to the wallet. |\n| [invokecontractverify](api/invokecontractverify.md) | \\<script_hash>   \\[params] \\[signers] | Invokes the verification method of contract. |\n| [listaddress](api/listaddress.md) |  | Lists all the addresses in the current wallet. |\n| [openwallet](api/openwallet.md) | \\<path> \\<password> | Opens the specified wallet. |\n| [sendfrom](api/sendfrom.md) | \\<asset_id>\\<from>\\<to>\\<value> | Transfers from the specified address to the destination address. |\n| [sendmany](api/sendmany.md) | \\<outputs_array> \\[signers] | Initiates multiple transfers to multiple addresses in a transaction. |\n| [sendtoaddress](api/sendtoaddress.md) | \\<asset_id>\\<address>\\<value> \\[signers] | Transfers", "doc_id": "ed95445e-d515-434e-940e-26a5032fe054", "embedding": null, "doc_hash": "38df5b56ad5e912d1ef2bbd0df7638625b1129aee64ebba1ea351d23c0fa7f09", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html"}, "node_info": {"start": 5123, "end": 7874, "_node_type": "1"}, "relationships": {"1": "df222dc1540a5712d14a666de832b4506fe754c6", "2": "4abd3583-d024-4845-b9ef-261cdbd86866", "3": "227ccfee-23ab-4a16-8897-948b54db7fa4"}}, "__type__": "1"}, "227ccfee-23ab-4a16-8897-948b54db7fa4": {"__data__": {"text": "\\[signers] | Transfers to the specified address. |\n\n### ApplicationLogs plugin\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getapplicationlog](api/getapplicationlog.md) | \\<txid> | Returns the contract event information based on the specified txid. |\n\n### TokensTracker plugin\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getnep11balances](api/getnep11balances.md) | \\<address> | Returns the balance of all NEP11 assets in the specified address. |\n| [getnep11properties](api/getnep11properties.md) | \\<contract_hash>\\<tokenId> | Returns the customized properties of NEP-11 assets. |\n| [getnep11transfers](api/getnep17transfers.md) | \\<address>[timestamp] | Returns all the NEP11 transaction information occurred in the specified address. |\n| [getnep17balances](api/getnep17balances.md) | \\<address> | Returns the balance of all NEP17 assets in the specified address. |\n| [getnep17transfers](api/getnep17transfers.md) | \\<address>[timestamp] | Returns all the NEP17 transaction information occurred in the specified address. |\n\n### StateService plugin\n\n| Method                                  | Parameter                                       | Description                                                  |\n| --------------------------------------- | ----------------------------------------------- | ------------------------------------------------------------ |\n| [getstateroot](api/getstateroot.md)     | \\<index>                                        | Queries the state root by the block height.                  |\n| [getproof](api/getproof.md)             | \\<roothash>\\<scripthash>\\<key>                  | Gets proof by querying root hash, contract hash, and storage key. |\n| [verifyproof](api/verifyproof.md)       | \\<roothash>\\<proof>                             | Verifies using the root hash and proof, and gets the value of the storage corresponding to the key. |\n| [getstateheight](api/getstateheight.md) |                       ", "doc_id": "227ccfee-23ab-4a16-8897-948b54db7fa4", "embedding": null, "doc_hash": "a830d97430d9024cb3e0d8a98eab1999d71adfefcf3eaf5980619af76d2a1aed", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html"}, "node_info": {"start": 7912, "end": 10403, "_node_type": "1"}, "relationships": {"1": "df222dc1540a5712d14a666de832b4506fe754c6", "2": "ed95445e-d515-434e-940e-26a5032fe054", "3": "07c11651-ece2-4ee5-b399-506114fa831d"}}, "__type__": "1"}, "07c11651-ece2-4ee5-b399-506114fa831d": {"__data__": {"text": "                                             | Queries the stateroot height.                                |\n| [getstate](api/getstate.md)             | \\<roothash>\\<scripthash>\\<key>                  | Queries `state` with the `root hash`, `contract hash` and `storage key`. |\n| [findstates](api/findstates.md)         | \\<roothash>\\<scripthash>\\<prefix> [key] [count] | Queries `state` with the prefix of `root hash`, `contract hash` and `storage key`. |\n\n> [!Note]\n>\n> For RPC API, all the return values related to the amount such as fees, NEP-17 asset balance, wallet balance, transfer amount, etc. are unsigned integer, which are automatically converted according to the asset decimal when requested by [RpcClient](https://github.com/neo-project/neo-modules/tree/master/src/RpcClient) (C# light node SDK). If you write the request by yourselves, you need to convert the amount manually. For example, if the return value is 1234560 and the asset decimal is 8, the  actual amount is 0.0123456.\n\n## GET request example\n\nThe format of a typical JSON-RPC GET request is as follows:\n\nHere is an example of how to get the number of blocks in the block chain.\n\nRequest URL:\n\n```\nhttp://127.0.0.1:10332?jsonrpc=2.0&method=getblockcount&params=[]&id=1\n```\n\nAfter sending the request, you will get the following response:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": 909129\n}\n```\n\n## POST request example\n\nThe format of a typical JSON-RPC Post request is as follows:\n\nHere is an example of how to get the number of blocks in the block chain.\n\nRequest URL:\n\n```\nhttp://127.0.0.1:10332\n```\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockcount\",\n  \"params\":[],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": 909122\n}\n```\n\n> [!Note]\n>\n> To make sure you get the latest result synchronize your client to the latest block height before you use the API.\n\n## Test tools\n\nYou can use the Chrome extension in Postman to facilitate the test (Installation of the Chrome extension requires Internet connection). A test screenshot is shown below:\n\n![image](../../../assets/api_3.jpg)\n\n## See also\n\n[C# JSON-RPC Command List](https://github.com/chenzhitong/CSharp-JSON-RPC/blob/master/json_rpc/Program.cs)\n", "doc_id": "07c11651-ece2-4ee5-b399-506114fa831d", "embedding": null, "doc_hash": "aec2ee980ff30459406c88e0d146758abd00b1c300df032901cb451a02329274", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html"}, "node_info": {"start": 10404, "end": 12707, "_node_type": "1"}, "relationships": {"1": "df222dc1540a5712d14a666de832b4506fe754c6", "2": "227ccfee-23ab-4a16-8897-948b54db7fa4"}}, "__type__": "1"}, "e64adea3-263f-4925-9ce6-3e8a0a8b75f0": {"__data__": {"text": "# calculatenetworkfee Method\n\nCalculates network fee for the specified transaction.\n\n> [!Note]\n>\n> Before you can invoke this method you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases).\n\n## Parameter Description\n\ntx: Base64-encoded string of transaction information.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"calculatenetworkfee\",\n  \"params\": [\"AAzUzgl2c4kAAAAAAMhjJAAAAAAAmRQgAAKDHlc9J/rM4KzhpixYX/fRkt2q8ACBubhEJKzaXrq9mt5PesW40qC01AEAXQMA6HZIFwAAAAwUgx5XPSf6zOCs4aYsWF/30ZLdqvAMFIG5uEQkrNpeur2a3k96xbjSoLTUE8AMCHRyYW5zZmVyDBS8r0HWhMfUrW7g2Z2pcHudHwyOZkFifVtSOAJCDED0lByRy1/NfBDdKCFLA3RKAY+LLVeXAvut42izfO6PPsKX0JeaL959L0aucqcxBJfWNF3b+93mt9ItCxRoDnChKQwhAuj/F8Vn1i8nT+JHzIhKKmzTuP0Nd5qMWFYomlYKzKy0C0GVRA14QgxAMbiEtF4zjCUjGAzanxLckFiCY3DeREMGIxyerx5GCG/Ki0LGvNzbvPUAWeVGvbL5TVGlK55VfZECmy8voO1LsisRDCEC6P8XxWfWLydP4kfMiEoqbNO4/Q13moxYViiaVgrMrLQRC0ETje+v\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"networkfee\": \"23848400\"\n    }\n}\n\n```\n", "doc_id": "e64adea3-263f-4925-9ce6-3e8a0a8b75f0", "embedding": null, "doc_hash": "fe7b47a43e1e42c53752330aa0a72c74e3e09fad91a4f8080f0e69c85245bfac", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/calculatenetworkfee.html"}, "node_info": {"start": 0, "end": 1071, "_node_type": "1"}, "relationships": {"1": "c5ee54ebffbf1d7c16ce8e8b9ef6b89541e850b3"}}, "__type__": "1"}, "751a830d-074c-4710-a8ab-3374457b1349": {"__data__": {"text": "# closewallet Method\n\nCloses the current wallet.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"closewallet\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}\n```\n\nResponse Description:\n\ntrue: The wallet is closed successfully.\nOthers: failure", "doc_id": "751a830d-074c-4710-a8ab-3374457b1349", "embedding": null, "doc_hash": "29c79618dd3a9092cd1a24bbc62f9783754107f9155fff0f500c34a6d1563803", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/closewallet.html"}, "node_info": {"start": 0, "end": 548, "_node_type": "1"}, "relationships": {"1": "c09362cc87962de69302bf671b07990507d8d0f3"}}, "__type__": "1"}, "dada4a4b-3df0-43d1-ba51-8476c98a5a11": {"__data__": {"text": "\ufeff# dumpprivkey Method\n\nExports the private key of the specified address.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n### Parameter Description\n\naddress: To export the addresses of the private key. The address is required as a standard address.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"dumpprivkey\",\n  \"params\": [\"NepVckSSgHJf1szQ6LEibd5NU7Ap67yJrJ\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"L5LEfSAAbVAk5vxmkBpWQqJ2e1hyh3nEqgWaosB35XpBAkZdizj4\"\n}\n```\n\nResponse Description:\n\nReturns the private key of the standard address.", "doc_id": "dada4a4b-3df0-43d1-ba51-8476c98a5a11", "embedding": null, "doc_hash": "36c2588e81c9108ed329452d102d29dccf27264dc53c26e642308469fbcdfc4c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/dumpprivkey.html"}, "node_info": {"start": 0, "end": 778, "_node_type": "1"}, "relationships": {"1": "4660c21f482836bf37c4241d48c68bb2bbfd3a7f"}}, "__type__": "1"}, "1962f297-77d4-43a4-93e8-4e03516685fa": {"__data__": {"text": "# findstates Method\n\nQueries the desired state by the root hash, contract hash and storage key prefix.\n\n> [!Note]\n>\n> You must install the plugin  [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameters\n\n- roothash: The root hash of state root.\n\n- scripthash: The contract hash\u3002\n\n- prefix: The prefix of storage key, Base64-encoded.\n\n- key: Optional. Returns the Base64-encoded key at the start of the result, with no information about the key in the result, but the result after the key.\n\n- count: Optional. The count of returned items. \n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"findstates\",\n  \"params\": [\"0xec31cdb14da4143e2ab471a8b5812d895b88fc1c12d54e112791491feca9b5f4\",\"0xb1fbb6b0096919071769906bb23b2ca2ec51eea7\",\"AQE=\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"firstProof\": \"GgEAAAABAUzxBIiQG4dVg53aSJGZBdc4jzffBlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJwwPAQAECAgJAAELCAcFBQgDCQ0NCgQICQEJCQAFDQcDCAgPAwcNDwPqBPR7WXK0bOm5grD7JqZG1o8ymVny67eCX22yIybAzAYCBJzCeAE=\",\n        \"lastProof\":", "doc_id": "1962f297-77d4-43a4-93e8-4e03516685fa", "embedding": null, "doc_hash": "034c3e28f8acde1e5aca521f4667611940e9fdd80d50b83211d7f0aa10f68b2f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/findstates.html"}, "node_info": {"start": 0, "end": 1613, "_node_type": "1"}, "relationships": {"1": "16055bd9e15434a976cb5eace890ace537f262f7", "3": "2a9ed5f7-c47b-4d2a-a4c6-d2404e329c6e"}}, "__type__": "1"}, "2a9ed5f7-c47b-4d2a-a4c6-d2404e329c6e": {"__data__": {"text": "       \"lastProof\": \"GgEAAAABAe7wFiVtSpzngy2v5Lv6LQCPkn8uBlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJw4PAAEGAgUGDQQKCQwOBwgDAg0KDw4ECwsPCgINAAAIDwkCBw8CDgOpMv0n0GGU2BoUUydwQJcc1bzfrOCWmTdbjX56GFcBagcCBZzq4+8A\",\n        \"truncated\": false,\n        \"results\": [\n            {\n                \"key\": \"AQFM8QSIkBuHVYOd2kiRmQXXOI833w==\",\n                \"value\": \"nMJ4AQ==\"\n            },\n            {\n                \"key\": \"AQFmmdXxSKUGNq3wQcppLAdAe8sD+g==\",\n                \"value\": \"yGJI4+cA\"\n            },\n            {\n                \"key\": \"AQHu8BYlbUqc54Mtr+S7+i0Aj5J/Lg==\",\n                \"value\": \"nOrj7wA=\"\n            }\n        ]\n    }\n}\n```\n\nRequest body:\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"findstates\",\n  \"params\": [\"0xec31cdb14da4143e2ab471a8b5812d895b88fc1c12d54e112791491feca9b5f4\",\"0xb1fbb6b0096919071769906bb23b2ca2ec51eea7\",\"AQE=\",\"AQFM8QSIkBuHVYOd2kiRmQXXOI833w==\",2],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n", "doc_id": "2a9ed5f7-c47b-4d2a-a4c6-d2404e329c6e", "embedding": null, "doc_hash": "323b2877e63c6a9ed0ab5964a568c4b2dba1751fdc5eacba081c2336bd4251f3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/findstates.html"}, "node_info": {"start": 1602, "end": 2990, "_node_type": "1"}, "relationships": {"1": "16055bd9e15434a976cb5eace890ace537f262f7", "2": "1962f297-77d4-43a4-93e8-4e03516685fa", "3": "3b23e9a6-25de-4714-b9df-da4bd16c3aa6"}}, "__type__": "1"}, "3b23e9a6-25de-4714-b9df-da4bd16c3aa6": {"__data__": {"text": "   \"id\": 1,\n    \"result\": {\n        \"firstProof\": \"GgEAAAABAWaZ1fFIpQY2rfBBymksB0B7ywP6BlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJwYJCQ0FDwEECAoFAAYDBgoNDwAEAQwKBgkCDAAHBAAHCwwLAAMPCgOdJYDatk7lvSUyTBhr0mRtcpdMQNr3JtRyjRD2dEjxpwgCBshiSOPnAA==\",\n        \"lastProof\": \"GgEAAAABAe7wFiVtSpzngy2v5Lv6LQCPkn8uBlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJw4PAAEGAgUGDQQKCQwOBwgDAg0KDw4ECwsPCgINAAAIDwkCBw8CDgOpMv0n0GGU2BoUUydwQJcc1bzfrOCWmTdbjX56GFcBagcCBZzq4+8A\",\n        \"truncated\": false,\n        \"results\": [\n            {\n                \"key\":", "doc_id": "3b23e9a6-25de-4714-b9df-da4bd16c3aa6", "embedding": null, "doc_hash": "014629a1b6db8bab7e54066f885b9629e1c0d3e53fb70d6f31ceb53a4e5fdc5f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/findstates.html"}, "node_info": {"start": 2984, "end": 4320, "_node_type": "1"}, "relationships": {"1": "16055bd9e15434a976cb5eace890ace537f262f7", "2": "2a9ed5f7-c47b-4d2a-a4c6-d2404e329c6e", "3": "05ce2ebe-8dab-4be1-80f0-5153ca9ea3f9"}}, "__type__": "1"}, "05ce2ebe-8dab-4be1-80f0-5153ca9ea3f9": {"__data__": {"text": "{\n                \"key\": \"AQFmmdXxSKUGNq3wQcppLAdAe8sD+g==\",\n                \"value\": \"yGJI4+cA\"\n            },\n            {\n                \"key\": \"AQHu8BYlbUqc54Mtr+S7+i0Aj5J/Lg==\",\n                \"value\": \"nOrj7wA=\"\n            }\n        ]\n    }\n}\n```", "doc_id": "05ce2ebe-8dab-4be1-80f0-5153ca9ea3f9", "embedding": null, "doc_hash": "d9c09f788dd02ab01b4102cc2fda70e91f185fbb13283a9111b18af1f7b85db5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/findstates.html"}, "node_info": {"start": 4315, "end": 4571, "_node_type": "1"}, "relationships": {"1": "16055bd9e15434a976cb5eace890ace537f262f7", "2": "3b23e9a6-25de-4714-b9df-da4bd16c3aa6"}}, "__type__": "1"}, "2e35348c-ef85-4d11-97a8-97c5ee684da6": {"__data__": {"text": "# getapplicationlog method\n\nReturns the contract event information based on the specified txid. The contract event information is stored under the ApplicationLogs directory.\n\n> [!Note]\n>\n> You must install the plugins [ApplicationLogs](https://github.com/neo-project/neo-modules/releases) and [LevelDBStore](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- txid: Transaction ID\n\n- trigger type:  Optional. It has the following options:\n\n  - OnPersist\n  - PostPersist\n  - Application\n  - Verification\n  - System: OnPersist | PostPersist\n  - All: OnPersist | PostPersist | Verification | Application\n\n  It defaults to All. You can specify a trigger type.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getapplicationlog\",\n  \"params\": [\n    \"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\"\n  ]\n}\n```\n\nThis transaction transfers 100 GAS from NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF to NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ.\n\nResponse body 1:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"txid\": \"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\",\n        \"executions\": [\n            {\n                \"trigger\": \"Application\",\n                \"vmstate\": \"HALT\",\n                \"exception\": null,\n                \"gasconsumed\": \"9999540\",\n                \"stack\": [],\n                \"notifications\": [\n                    {\n                        \"contract\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                        \"eventname\": \"Transfer\",\n                        \"state\": {\n                            \"type\": \"Array\",\n                            \"value\": [\n                                {\n                                    \"type\": \"ByteString\",\n                                    \"value\": \"4rZTInKT6ZxPKQbVNVOrtKZy34Y=\"\n       ", "doc_id": "2e35348c-ef85-4d11-97a8-97c5ee684da6", "embedding": null, "doc_hash": "c28cb9501aef8e381dc9d2697441b57bcda4ce107521b1aa139f9ef4e4e7ec77", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html"}, "node_info": {"start": 0, "end": 1903, "_node_type": "1"}, "relationships": {"1": "8ef591d31307e1985e7d377e2811e9e3e3cdeebc", "3": "0abb2219-323d-46cd-9c28-e67c8dcef9e9"}}, "__type__": "1"}, "0abb2219-323d-46cd-9c28-e67c8dcef9e9": {"__data__": {"text": "                               },\n                                {\n                                    \"type\": \"ByteString\",\n                                    \"value\": \"+on7LBTfD1nd3wT25WUX8rNKrus=\"\n                                },\n                                {\n                                    \"type\": \"Integer\",\n                                    \"value\": \"10000000000\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\nResponse description:\n\n- txid: Transaction ID.\n\n- trigger: Triggers.\n\n- vmstate: VM execution state. HALT represents success, and FAULT represents failure.\n- gasconsumed: The transaction fee, which means the GAS consumed in the transaction execution. \n- notifications: The notification sent by the smart contract. If no notifications is returned it indicates the transfer is not successful. See the Note below.\n\n- contract: The contract sending the notification. Here is GasToken.\n\n- eventname: Event name of the notification.\n\n- state: Notification content, where ByteString is Base64-encoded wallet address and can be converted at https://neo.org/converter/index.\n\n> [!Note]\n>\n> This example shows the log of a successful token transfer, however, in case of a failed transfer or NeoVM exception, the outcomes can be:\n>\n> - Failed transfer: no Transfer notification event is returned, execution ends in a `HALT` state with a stack value of `False`.\n> - NeoVM exception: a Transfer notification event may or may not be returned, but execution ends in a `FAULT` state.\n", "doc_id": "0abb2219-323d-46cd-9c28-e67c8dcef9e9", "embedding": null, "doc_hash": "6d26c0bf723e6d4d358105d19efa86f47a521c817c834ba6cc1aa3c46af1db9b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html"}, "node_info": {"start": 1897, "end": 3517, "_node_type": "1"}, "relationships": {"1": "8ef591d31307e1985e7d377e2811e9e3e3cdeebc", "2": "2e35348c-ef85-4d11-97a8-97c5ee684da6"}}, "__type__": "1"}, "49eda21f-a927-4913-8cb3-2457a4cfbd39": {"__data__": {"text": "\ufeff# getbestblockhash Method\n\nReturns the latest block hash of the block chain.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\n##### Request body\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getbestblockhash\",\n   \"params\":[],\n   \"id\": 1\n}\n```\n\n##### Response body\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": \"0xbee7a65279d6b31cc45445a7579d4c4a4e52d1edc13cc7ec7a41f7b1affdf0ab\"\n}\n```\n\n##### Response Description\n\nResult: The latest block hash of the block chain.", "doc_id": "49eda21f-a927-4913-8cb3-2457a4cfbd39", "embedding": null, "doc_hash": "1a56e55b31ce58a3fb476ae30325ca66df71f6e959f050b7511d0057fb51d3c8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getbestblockhash.html"}, "node_info": {"start": 0, "end": 581, "_node_type": "1"}, "relationships": {"1": "36dccbbe64e2fb11628cb45681b957d3bbbc6c14"}}, "__type__": "1"}, "d8f5e582-890d-41e0-9306-a2d2e746560c": {"__data__": {"text": "\ufeff# getblock Method\n\nReturns the corresponding block information according to the specified hash or index.\n\nThe usage of this method is as same as `getblockheader`. The only difference is that `getblockeader` gets the block header and `getblock` gets the complete block.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n* hash | index: Block hash string or block index (i.e. block height = number of blocks - 1).\n\n* verbose: Optional. The default value is false. \n  * When verbose is false, serialized information of the block is returned in a Base64-encoded string. If you need the detailed information, use SDK for deserialization. \n  * When verbose is true or 1, detailed information of the block is returned in Json format.\n\n## Example\n\n**Example 1 - Get serialized information of the block**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblock\",\n  \"params\": [26536],\n  \"id\": 1\n}\n```\n\nor\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getblock\",\n  \"params\": [\"0xd373a9afdbe57d79ad788196aa4ef37dbfb28c7d8f22ffa1ccbc236d56268bca\"]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\":", "doc_id": "d8f5e582-890d-41e0-9306-a2d2e746560c", "embedding": null, "doc_hash": "703e9386574b5979b1faa768fa8edd617df41dc44c66eb69b51b39acbd46f772", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 0, "end": 1257, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "3": "2c2aa642-8f06-46f5-963c-2f98056f2598"}}, "__type__": "1"}, "2c2aa642-8f06-46f5-963c-2f98056f2598": {"__data__": {"text": "   \"id\": 1,\n    \"result\": \"AAAAAM5doa+yo+aKrc8RO/Pfo96BYyedF2ed+jODYAzESzgvm458FX3T6b9rYw2KSBTWfttaeiA9McxN1LiWuQwI1O/6eEAaeAEAAKhnAAAG+CRl3iIpI2tQ6MaMSCq5GLum1uwB/UoBDEA2ZR0uduwN/5tFVCKoHJtAnSJINfqlRDcNXnYl0H0Jcb3YBy1M0G4Z1LB3PQMIb6J4kOtFm7TBL0B6vfPuDpigDEBLHKna+SPlL9vn755blCr3vxvc2HLP5dUch0isPARVDbg24QwVuvx3mbQ6awn0cQ/h+Jym/9xFo0MR0ddKXKzCDEAIcXyoqzFq4+3N9JtyK46LLeyx9ikidPLiXg9HWQk9Ps5wx9+XIe8zziS9dRAOqT4od7tW1SA6cRU3U8ZCexJ1DECxN+nyE15RaIvwpJ0JK3/RJvAM++YKou/ljVef5atDx9pce5nkuibfZzvzrjcoJF53qnP8ZSXBKThjrN2kGCxlDEBSVfUQAFNm4j4KihACjt5Kx1A9hN8RIDQkLw7udpcFm7Nf4PtDtucw7pS7WGEkmu3c+yt2BV3KeCzNBAreypb7/BUMIQMCJCsdztY+G/frFIdvfvAmt5Vn+cW+g94ZQ90YXsKOaAwhAg34hYtm/017Cmpo0R3e3MfZDSpk/6LNCHxMXav0FQtADCECF5VDAAGEeB5UR7Pw+6zmZOqSt+MSJ8jnG8Tnza/M244MIQJehJSQO5PcNp8Ior1+Ih9XTHXZZ1WR8EkHy6na7rg9EAwhA4QV0L6NwSth0+O3a5j0ZN+rf93udCccNeLeYku1ECOmDCEDybHInG4tSr1imi24t9A6ztUYpWeTvJD0mF737T8bSBoMIQPoq1GG4d6rzRDsDlCd7U//reb931NKw+BQYmi64/1EphdBe85spQEAKihGP0BY1TwAAAAAAKBVAAAAAAAnfgAAAW78pd5nDtnbpGznfCdo9+vKgwVMAAD9dBENSgh7Im5hbWUiOiJUb2tlbiBOYW1lIiwiZ3JvdXBzIjpbXSwic3VwcG9ydGVkc3RhbmRhcmRzIjpbIk5FUDE3IiwiTkVQMTAiXSwiYWJpIjp7Im1ldGhvZHMiOlt7Im5hbWUiOiJfZGVwbG95IiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImRhdGEiLCJ0eXBlIjoiQW55In0seyJuYW1lIjoidXBkYXRlIiwidHlwZSI6IkJvb2xlYW4ifV0sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0IjowLCJzYWZlIjpmYWxz", "doc_id": "2c2aa642-8f06-46f5-963c-2f98056f2598", "embedding": null, "doc_hash": "eb28a43c1d5ada1f3a7190c671062d51fd62b61a53b8c7bce83b3466165be431", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 1241, "end": 2564, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "d8f5e582-890d-41e0-9306-a2d2e746560c", "3": "3544b464-4c78-4873-b335-9a64158abec9"}}, "__type__": "1"}, "3544b464-4c78-4873-b335-9a64158abec9": {"__data__": {"text": "ZX0seyJuYW1lIjoiX2luaXRpYWxpemUiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjI3Miwic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImJhbGFuY2VPZiIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJhY2NvdW50IiwidHlwZSI6Ikhhc2gxNjAifV0sInJldHVybnR5cGUiOiJJbnRlZ2VyIiwib2Zmc2V0IjozNjgsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJkZWNpbWFscyIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiSW50ZWdlciIsIm9mZnNldCI6NTE1LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoiZGVzdHJveSIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6NTM3LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoiZGlzYWJsZVBheW1lbnQiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjYwNywic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImVuYWJsZVBheW1lbnQiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjY3OSwic2FmZSI6ZmFsc2V9LHsibmFtZSI6Im9uTkVQMTdQYXltZW50IiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImZyb20iLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6ImFtb3VudCIsInR5cGUiOiJJbnRlZ2VyIn0seyJuYW1lIjoiZGF0YSIsInR5cGUiOiJBbnkifV0sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0IjoxMjMwLCJzYWZlIjpmYWxzZX0seyJuYW1lIjoic3ltYm9sIiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJTdHJpbmciLCJvZmZzZXQiOjE2MDIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ0ZXN0Y29udHJhY3QiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlN0cmluZyIsIm9mZnNldCI6MTYzMywic2FmZSI6ZmFsc2V9LHsibmFtZSI6InRlc3RkeW5hbWljY2FsbCIsInBhcmFtZXRlcnMiOlt7Im5hbWUi", "doc_id": "3544b464-4c78-4873-b335-9a64158abec9", "embedding": null, "doc_hash": "8382e00cbb46b71ac55ae28281926d45ec207165900bfc797a6df0b22a8f44c8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 2582, "end": 3854, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "2c2aa642-8f06-46f5-963c-2f98056f2598", "3": "67668553-25dd-4606-a0ee-87704517b4fe"}}, "__type__": "1"}, "67668553-25dd-4606-a0ee-87704517b4fe": {"__data__": {"text": "OiJoYXNoIiwidHlwZSI6Ikhhc2gxNjAifSx7Im5hbWUiOiJtZXRob2QiLCJ0eXBlIjoiU3RyaW5nIn1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MTY0Miwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InRvdGFsU3VwcGx5IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJJbnRlZ2VyIiwib2Zmc2V0IjoxNjU4LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoidHJhbnNmZXIiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiZnJvbSIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoidG8iLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6ImFtb3VudCIsInR5cGUiOiJJbnRlZ2VyIn0seyJuYW1lIjoiZGF0YSIsInR5cGUiOiJBbnkifV0sInJldHVybnR5cGUiOiJCb29sZWFuIiwib2Zmc2V0IjoxNjY0LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoidXBkYXRlIiwicGFyYW1ldGVycyI6W3sibmFtZSI6Im5lZkZpbGUiLCJ0eXBlIjoiU3RyaW5nIn0seyJuYW1lIjoibWFuaWZlc3QiLCJ0eXBlIjoiU3RyaW5nIn1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MTk5Miwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InZlcmlmeSIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiQm9vbGVhbiIsIm9mZnNldCI6MjA1OCwic2FmZSI6ZmFsc2V9XSwiZXZlbnRzIjpbeyJuYW1lIjoiVHJhbnNmZXIiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiYXJnMSIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoiYXJnMiIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoiYXJnMyIsInR5cGUiOiJJbnRlZ2VyIn1dfV19LCJwZXJtaXNzaW9ucyI6W3siY29udHJhY3QiOiIqIiwibWV0aG9kcyI6IioifV0sInRydXN0cyI6W10sImV4dHJhIjp7IkF1dGhvciI6Ik5lbyIsIkVtYWlsIjoiZGV2QG5lby5vcmciLCJEZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSBORVAxNyBleGFtcGxlIn19Df4ITkVGM25lb24tMy4wLjAuMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXA7znO4OTpJ", "doc_id": "67668553-25dd-4606-a0ee-87704517b4fe", "embedding": null, "doc_hash": "f8018e2088e06e5c296cc9d8747ba16926fcd236b271ab3d7fa2b5647a0895e5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 3855, "end": 5216, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "3544b464-4c78-4873-b335-9a64158abec9", "3": "db27d730-37a3-47a8-8056-d341841cca80"}}, "__type__": "1"}, "db27d730-37a3-47a8-8056-d341841cca80": {"__data__": {"text": "cbCoGp54UQN2G/OrARpdG9hAgABD/2j+kNG6lMqJY/El92t22Q3yf3/C2dldENvbnRyYWN0AQABD/2j+kNG6lMqJY/El92t22Q3yf3/BnVwZGF0ZQMAAA/9o/pDRupTKiWPxJfdrdtkN8n9/wdkZXN0cm95AAAAD0OkVyMwdLSq1p8g/WmykRNSvvAeBXRlc3QyAAABDwAA/RAIVwICeXBoJgcjBwEAACE1JgMAABC3cWkmIAwbQ29udHJhY3QgaGFzIGJlZW4gZGVwbG95ZWQuOgwcYWZ0ZXIgZ2V0IHRvdGFsU3VwcGx5U3RvcmFnZUHP50eWDAdBQpxJ/RoH2yE1aAMAAAwhYWZ0ZXIgaW5jcmVhc2UgdG90YWxTdXBwbHlzdG9yYWdlQc/nR5YMFG78pd5nDtnbpGznfCdo9+vKgwVMDAdBQpxJ/RoH2yFQNQYDAAAMG2FmdGVyIGluY3JlYXNlIGFzc2V0c3RvcmFnZUHP50eWCwwUbvyl3mcO2dukbOd8J2j368qDBUwMB0FCnEn9GgfbIVMTwAwIVHJhbnNmZXJBlQFvYUBWCAwIAACKXXhFYwHbIWAMB0FCnEn9GgfbIWEMFG78pd5nDtnbpGznfCdo9+vKgwVMYgwEAJQ1d9shYxFkDAVhc3NldGUMCGNvbnRyYWN0ZgwLdG90YWxTdXBwbHlnB0BXAgF4NX4GAAAQs3BoJkEMPFRoZSBwYXJhbWV0ZXJzIGFjY291bnQgU0hPVUxEIGJlIGEgMjAtYnl0ZSBub24temVybyBhZGRyZXNzLjoMFnZhbGlkIGFkZHJlc3MgY29tcGxldGVBz+dHlng18QAAAHFpQFcBAnh52zBQNAVwaEBXAQISw0p4EFDQSnkRUNBwaEAYQFcBAngRznmLcHgQzmhQQS9Yxe1AVwEANcsBAAAQs3BoJhYMEU5vIGF1dGhvcml6YXRpb24uOiE3AwBAQZv2Z84MBWFzc2V0UDSXDAZlbmFibGUQUzWMAwAAQFcBADWFAQAAELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjohNL5AQZv2Z84MBWFzc2V0UDVS////DAZlbmFibGURUzVEAwAAQFcBADU9AQAAELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjohNLtAVwMBQZv2Z84MBWFzc2V0UDUH////eFA1kAAAAHAMF2NoZWNrIGlmIHN0YXR1cyBpcyBudWxsQc/nR5Zo2HFpJgYQciIiIWhK2CYFEFBF2yEaUDcAAEHP50eWaErYJgUQUEXbIXJqQFcDAEGb9mfODAhjb250", "doc_id": "db27d730-37a3-47a8-8056-d341841cca80", "embedding": null, "doc_hash": "64209ff9849360235979a989f2aacec819c9c17d10c1c0da4b181cc9a955c299", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 5217, "end": 6536, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "67668553-25dd-4606-a0ee-87704517b4fe", "3": "3540700f-f64b-495a-a5ef-6782da68e0ae"}}, "__type__": "1"}, "3540700f-f64b-495a-a5ef-6782da68e0ae": {"__data__": {"text": "cmFjdFA1nf7//wwLdG90YWxTdXBwbHlQNBpwaNhxaSYGEHIiDWhK2CYFEFBF2yFyakBXAgJ4Ec55i3B4EM5oUEGSXegxcWlAVwIAQZv2Z84MBWFzc2V0UDVK/v//DAZlbmFibGVQNMxK2CYFEFBF2yFwaBGzcWlAVwACeHg1Dv///3meUDXZAQAAQFcAATVk////eJ415AEAAEBXAAF4NwEA2KpADBRu/KXeZw7Z26Rs53wnaPfryoMFTEH4J+yMQFcGATUu////cGgQtnNrJhsMFkNvbnRyYWN0IG5vdCBkZXBsb3llZC46DAgAAIpdeEVjAdshaJ9xeBC2dGwmGwwWQW1vdW50IGNhbm5vdCBiZSB6ZXJvLjp4abd1bSY/eBpQNwAAQc/nR5ZpGlA3AABBz+dHlgwkSW5zdWZmaWNpZW50IHN1cHBseSBmb3IgbWludCB0b2tlbnMuOiFBLVEIMHJqE854UDUP////eDUc////C2oTznhTE8AMCFRyYW5zZmVyQZUBb2FAVwQDNbn+//9waCefAAAAQTlTbjwMFPVj6kC8KD1NDgXEjqMFs/Kgc0Dvs3FpJikMD21pbnQgbmVvIHRva2Vuc0HP50eWeQwEAJQ1d9shoDXm/v//IlIhQTlTbjwMFM924ovQBixKR47jVWEBExnzz6TSs3JqJhR42KpzayYKeRGgNbT+//8hIh8hDBlXcm9uZyBjYWxsaW5nIHNjcmlwdCBoYXNoOiEiKiEMJFBheW1lbnQgaXMgZGlzYWJsZSBvbiB0aGlzIGNvbnRyYWN0ITpAVwACQZv2Z84MBWFzc2V0UDU0/P//eHlTNC1AVwABQZv2Z84MCGNvbnRyYWN0UDUW/P//DAt0b3RhbFN1cHBseXhTNANAVwEDeBHOeYtweBDOaHpTQeY/GIRAVwICeDXP/P//cGh5s3FpJgd4NBkiCXhoeZ9QNItAVwABNRn9//94nzSZQFcAAUGb9mfODAVhc3NldFA1r/v//3hQNcn7//9ADBxUZXN0Q29udHJhY3RNYW5hZ2VtZW50VXBkYXRlQFcBADcEAHBoQFcAAnh5HxDDVEFifVtSRUA1uvz//0BXBwR4NW4BAAAmDHk1ZgEAABCzIgMRcGgmRQxAVGhlIHBhcmFtZXRlcnMgZnJvbSBhbmQgdG8gU0hPVUxEIGJlIDIwLWJ5dGUgbm9uLXplcm8gYWRkcmVzc2VzLjp6ELZxaSYxDCxUaGUgcGFyYW1ldGVyIGFtb3VudCBNVVNUIGJlIGdyZWF0ZXIgdGhhbiAwLjp4Qfgn7IwkDXhBOVNuPJcQsyIDEHJqJhYMEU", "doc_id": "3540700f-f64b-495a-a5ef-6782da68e0ae", "embedding": null, "doc_hash": "6ea782cc3f7d114c1f61bff4e910644bbdddb496a713226b46763aa75df44dab", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 6537, "end": 7875, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "db27d730-37a3-47a8-8056-d341841cca80", "3": "7de1e08f-d6d0-4de3-b252-5813e4809729"}}, "__type__": "1"}, "7de1e08f-d6d0-4de3-b252-5813e4809729": {"__data__": {"text": "5vIGF1dGhvcml6YXRpb24uOng1jfv//3q1c2smGgwVSW5zdWZmaWNpZW50IGJhbGFuY2UuOnh5s3RsJgYRdSJaeHpQNYn+//95elA1Qfz//3h5elMTwAwIVHJhbnNmZXJBlQFvYXk1Sfz//3ZuJil5DA5vbk5FUDE3UGF5bWVudB8Tw0oQeNBKEXrQShJ70FRBYn1bUkURdW1AVwECNRz8//8Qs3BoJhYMEU5vIGF1dGhvcml6YXRpb24uOnh5C1M3AgBAVwABeErZKFDKABSzqyYJeBCzELMiAxBANd37//9AtFz2MBLAHwwGZGVwbG95DBT9o/pDRupTKiWPxJfdrdtkN8n9/0FifVtSAUIMQHefw35eIZrwfE+JXNTEqoXbBmbMyxCK8j07RU26X+GWNle4ynNroOlNlniZ+mWprVE2lybXFAOjtw6hVHX2frooDCECVOanJ/RSNsd2Itpgwx8fHJooXf3zbTYO/4EAs9Oud+FBdHR2qg==\" } ```  **Example 2 - Get block information in Json**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblock\",\n  \"params\": [26536, true],\n  \"id\": 1\n}\n```\n\nor\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getblock\",\n  \"params\": [\"0xd373a9afdbe57d79ad788196aa4ef37dbfb28c7d8f22ffa1ccbc236d56268bca\", true]\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"hash\": \"0xd373a9afdbe57d79ad788196aa4ef37dbfb28c7d8f22ffa1ccbc236d56268bca\",\n    \"size\": 5317,\n    \"version\": 0,\n    \"previousblockhash\": \"0x2f384bc40c608333fa9d67179d276381dea3dff33b11cfad8ae6a3b2afa15dce\",\n    \"merkleroot\": \"0xefd4080cb996b8d44dcc313d207a5adb7ed614488a0d636bbfe9d37d157c8e9b\",\n    \"time\": 1615348136186,\n    \"index\": 26536,\n    \"primary\": 6,\n    \"nextconsensus\": \"NiY2NJTPFPyqjrGtdEhQnryJpJbxnQTvpR\",\n    \"witnesses\": [\n      {\n        \"invocation\":", "doc_id": "7de1e08f-d6d0-4de3-b252-5813e4809729", "embedding": null, "doc_hash": "da8d43afd05e4cc02635971576a3b6714870aa03ade3c29da7881d7ceea0d7ba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 7876, "end": 9260, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "3540700f-f64b-495a-a5ef-6782da68e0ae", "3": "bb784ec4-4be4-4997-89b9-70902d9cc9bf"}}, "__type__": "1"}, "bb784ec4-4be4-4997-89b9-70902d9cc9bf": {"__data__": {"text": "[\n      {\n        \"invocation\": \"DEA2ZR0uduwN/5tFVCKoHJtAnSJINfqlRDcNXnYl0H0Jcb3YBy1M0G4Z1LB3PQMIb6J4kOtFm7TBL0B6vfPuDpigDEBLHKna+SPlL9vn755blCr3vxvc2HLP5dUch0isPARVDbg24QwVuvx3mbQ6awn0cQ/h+Jym/9xFo0MR0ddKXKzCDEAIcXyoqzFq4+3N9JtyK46LLeyx9ikidPLiXg9HWQk9Ps5wx9+XIe8zziS9dRAOqT4od7tW1SA6cRU3U8ZCexJ1DECxN+nyE15RaIvwpJ0JK3/RJvAM++YKou/ljVef5atDx9pce5nkuibfZzvzrjcoJF53qnP8ZSXBKThjrN2kGCxlDEBSVfUQAFNm4j4KihACjt5Kx1A9hN8RIDQkLw7udpcFm7Nf4PtDtucw7pS7WGEkmu3c+yt2BV3KeCzNBAreypb7\",\n        \"verification\": \"FQwhAwIkKx3O1j4b9+sUh29+8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA+irUYbh3qvNEOwOUJ3tT/+t5v3fU0rD4FBiaLrj/USmF0F7zmyl\"\n      }\n    ],\n    \"tx\": [\n      {\n        \"hash\": \"0xefd4080cb996b8d44dcc313d207a5adb7ed614488a0d636bbfe9d37d157c8e9b\",\n        \"size\": 4628,\n        \"version\": 0,\n        \"nonce\": 1061562410,\n        \"sender\": \"NW2pB9EqjHVnJ8M9W7oXS1LgdM6pwhvGyx\",\n        \"sysfee\": \"1020614720\",\n        \"netfee\": \"5611520\",\n        \"validuntilblock\": 32295,\n        \"signers\": [\n          {\n            \"account\": \"0x4c0583caebf768277ce76ca4dbd90e67dea5fc6e\",\n            \"scopes\": \"None\"\n          }\n        ],\n        \"attributes\": [],\n       ", "doc_id": "bb784ec4-4be4-4997-89b9-70902d9cc9bf", "embedding": null, "doc_hash": "34b83e48982ed2cda04c42a858457f9b6facf8c04631c8c7028faf99cb8762ea", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 9244, "end": 10615, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "7de1e08f-d6d0-4de3-b252-5813e4809729", "3": "59cbf345-5a29-4656-9a54-ef449b038f81"}}, "__type__": "1"}, "59cbf345-5a29-4656-9a54-ef449b038f81": {"__data__": {"text": "      \"attributes\": [],\n        \"script\":", "doc_id": "59cbf345-5a29-4656-9a54-ef449b038f81", "embedding": null, "doc_hash": "0e6e342c774fd32222c6fd2dec4ad4d5ba8c3f5ffa987025acdab42b2d534712", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 10616, "end": 10657, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "bb784ec4-4be4-4997-89b9-70902d9cc9bf", "3": "ff34398b-ed35-4fa2-9b1f-c0b4412d4118"}}, "__type__": "1"}, "ff34398b-ed35-4fa2-9b1f-c0b4412d4118": {"__data__": {"text": "   \"attributes\": [],\n        \"script\": \"DUoIeyJuYW1lIjoiVG9rZW4gTmFtZSIsImdyb3VwcyI6W10sInN1cHBvcnRlZHN0YW5kYXJkcyI6WyJORVAxNyIsIk5FUDEwIl0sImFiaSI6eyJtZXRob2RzIjpbeyJuYW1lIjoiX2RlcGxveSIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJkYXRhIiwidHlwZSI6IkFueSJ9LHsibmFtZSI6InVwZGF0ZSIsInR5cGUiOiJCb29sZWFuIn1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MCwic2FmZSI6ZmFsc2V9LHsibmFtZSI6Il9pbml0aWFsaXplIiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0IjoyNzIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJiYWxhbmNlT2YiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiYWNjb3VudCIsInR5cGUiOiJIYXNoMTYwIn1dLCJyZXR1cm50eXBlIjoiSW50ZWdlciIsIm9mZnNldCI6MzY4LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoiZGVjaW1hbHMiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IkludGVnZXIiLCJvZmZzZXQiOjUxNSwic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImRlc3Ryb3kiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjUzNywic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImRpc2FibGVQYXltZW50IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0Ijo2MDcsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJlbmFibGVQYXltZW50IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0Ijo2NzksInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJvbk5FUDE3UGF5bWVudCIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJmcm9tIiwidHlwZSI6Ikhhc2gxNjAifSx7Im5hbWUiOiJhbW91bnQiLCJ0eXBlIjoiSW50ZWdlciJ9LHsibmFtZSI6ImRhdGEiLCJ0eXBlIjoiQW55In1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MTIzMC", "doc_id": "ff34398b-ed35-4fa2-9b1f-c0b4412d4118", "embedding": null, "doc_hash": "89cd40a38ff0dd2caa15622a21671ac9b439517d47a34862ed002111a2d1398f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 10649, "end": 11959, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "59cbf345-5a29-4656-9a54-ef449b038f81", "3": "4a185ba6-71ad-4e39-aa15-3f94d96d73dd"}}, "__type__": "1"}, "4a185ba6-71ad-4e39-aa15-3f94d96d73dd": {"__data__": {"text": "wic2FmZSI6ZmFsc2V9LHsibmFtZSI6InN5bWJvbCIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiU3RyaW5nIiwib2Zmc2V0IjoxNjAyLCJzYWZlIjpmYWxzZX0seyJuYW1lIjoidGVzdGNvbnRyYWN0IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJTdHJpbmciLCJvZmZzZXQiOjE2MzMsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ0ZXN0ZHluYW1pY2NhbGwiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiaGFzaCIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoibWV0aG9kIiwidHlwZSI6IlN0cmluZyJ9XSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjE2NDIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ0b3RhbFN1cHBseSIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiSW50ZWdlciIsIm9mZnNldCI6MTY1OCwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InRyYW5zZmVyIiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImZyb20iLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6InRvIiwidHlwZSI6Ikhhc2gxNjAifSx7Im5hbWUiOiJhbW91bnQiLCJ0eXBlIjoiSW50ZWdlciJ9LHsibmFtZSI6ImRhdGEiLCJ0eXBlIjoiQW55In1dLCJyZXR1cm50eXBlIjoiQm9vbGVhbiIsIm9mZnNldCI6MTY2NCwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InVwZGF0ZSIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJuZWZGaWxlIiwidHlwZSI6IlN0cmluZyJ9LHsibmFtZSI6Im1hbmlmZXN0IiwidHlwZSI6IlN0cmluZyJ9XSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjE5OTIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ2ZXJpZnkiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IkJvb2xlYW4iLCJvZmZzZXQiOjIwNTgsInNhZmUiOmZhbHNlfV0sImV2ZW50cyI6W3sibmFtZSI6IlRyYW5zZmVyIiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImFyZzEiLCJ0eXBlIjoiSGFzaDE2MC", "doc_id": "4a185ba6-71ad-4e39-aa15-3f94d96d73dd", "embedding": null, "doc_hash": "f4cb2d43cb70d42226dece0c411d145ae45786748f6ee95a832205207853e028", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 11986, "end": 13258, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "ff34398b-ed35-4fa2-9b1f-c0b4412d4118", "3": "6f781e10-51ba-405e-87fc-5f2f923e7b93"}}, "__type__": "1"}, "6f781e10-51ba-405e-87fc-5f2f923e7b93": {"__data__": {"text": "J9LHsibmFtZSI6ImFyZzIiLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6ImFyZzMiLCJ0eXBlIjoiSW50ZWdlciJ9XX1dfSwicGVybWlzc2lvbnMiOlt7ImNvbnRyYWN0IjoiKiIsIm1ldGhvZHMiOiIqIn1dLCJ0cnVzdHMiOltdLCJleHRyYSI6eyJBdXRob3IiOiJOZW8iLCJFbWFpbCI6ImRldkBuZW8ub3JnIiwiRGVzY3JpcHRpb24iOiJUaGlzIGlzIGEgTkVQMTcgZXhhbXBsZSJ9fQ3+CE5FRjNuZW9uLTMuMC4wLjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwO85zuDk6SXGwqBqeeFEDdhvzqwEaXRvYQIAAQ/9o/pDRupTKiWPxJfdrdtkN8n9/wtnZXRDb250cmFjdAEAAQ/9o/pDRupTKiWPxJfdrdtkN8n9/wZ1cGRhdGUDAAAP/aP6Q0bqUyolj8SX3a3bZDfJ/f8HZGVzdHJveQAAAA9DpFcjMHS0qtafIP1pspETUr7wHgV0ZXN0MgAAAQ8AAP0QCFcCAnlwaCYHIwcBAAAhNSYDAAAQt3FpJiAMG0NvbnRyYWN0IGhhcyBiZWVuIGRlcGxveWVkLjoMHGFmdGVyIGdldCB0b3RhbFN1cHBseVN0b3JhZ2VBz+dHlgwHQUKcSf0aB9shNWgDAAAMIWFmdGVyIGluY3JlYXNlIHRvdGFsU3VwcGx5c3RvcmFnZUHP50eWDBRu/KXeZw7Z26Rs53wnaPfryoMFTAwHQUKcSf0aB9shUDUGAwAADBthZnRlciBpbmNyZWFzZSBhc3NldHN0b3JhZ2VBz+dHlgsMFG78pd5nDtnbpGznfCdo9+vKgwVMDAdBQpxJ/RoH2yFTE8AMCFRyYW5zZmVyQZUBb2FAVggMCAAAil14RWMB2yFgDAdBQpxJ/RoH2yFhDBRu/KXeZw7Z26Rs53wnaPfryoMFTGIMBACUNXfbIWMRZAwFYXNzZXRlDAhjb250cmFjdGYMC3RvdGFsU3VwcGx5ZwdAVwIBeDV+BgAAELNwaCZBDDxUaGUgcGFyYW1ldGVycyBhY2NvdW50IFNIT1VMRCBiZSBhIDIwLWJ5dGUgbm9uLXplcm8gYWRkcmVzcy46DBZ2YWxpZCBhZGRyZXNzIGNvbXBsZXRlQc/nR5Z4NfEAAABxaUBXAQJ4edswUDQFcGhAVwECEsNKeBBQ0Ep5EVDQcGhAGEBXAQJ4Ec55i3B4EM5oUEEvWMXtQFcBADXLAQAAELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjohNwMAQEGb9mf", "doc_id": "6f781e10-51ba-405e-87fc-5f2f923e7b93", "embedding": null, "doc_hash": "4c5da246092f6789314b3b28d3922bffac055903a9ff2bfdde540f49a17772c9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 13259, "end": 14640, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "4a185ba6-71ad-4e39-aa15-3f94d96d73dd", "3": "bf3029cf-b476-44a3-bd72-2d2d4a660496"}}, "__type__": "1"}, "bf3029cf-b476-44a3-bd72-2d2d4a660496": {"__data__": {"text": "ODAVhc3NldFA0lwwGZW5hYmxlEFM1jAMAAEBXAQA1hQEAABCzcGgmFgwRTm8gYXV0aG9yaXphdGlvbi46ITS+QEGb9mfODAVhc3NldFA1Uv///wwGZW5hYmxlEVM1RAMAAEBXAQA1PQEAABCzcGgmFgwRTm8gYXV0aG9yaXphdGlvbi46ITS7QFcDAUGb9mfODAVhc3NldFA1B////3hQNZAAAABwDBdjaGVjayBpZiBzdGF0dXMgaXMgbnVsbEHP50eWaNhxaSYGEHIiIiFoStgmBRBQRdshGlA3AABBz+dHlmhK2CYFEFBF2yFyakBXAwBBm/ZnzgwIY29udHJhY3RQNZ3+//8MC3RvdGFsU3VwcGx5UDQacGjYcWkmBhByIg1oStgmBRBQRdshcmpAVwICeBHOeYtweBDOaFBBkl3oMXFpQFcCAEGb9mfODAVhc3NldFA1Sv7//wwGZW5hYmxlUDTMStgmBRBQRdshcGgRs3FpQFcAAnh4NQ7///95nlA12QEAAEBXAAE1ZP///3ieNeQBAABAVwABeDcBANiqQAwUbvyl3mcO2dukbOd8J2j368qDBUxB+CfsjEBXBgE1Lv///3BoELZzayYbDBZDb250cmFjdCBub3QgZGVwbG95ZWQuOgwIAACKXXhFYwHbIWifcXgQtnRsJhsMFkFtb3VudCBjYW5ub3QgYmUgemVyby46eGm3dW0mP3gaUDcAAEHP50eWaRpQNwAAQc/nR5YMJEluc3VmZmljaWVudCBzdXBwbHkgZm9yIG1pbnQgdG9rZW5zLjohQS1RCDByahPOeFA1D////3g1HP///wtqE854UxPADAhUcmFuc2ZlckGVAW9hQFcEAzW5/v//cGgnnwAAAEE5U248DBT1Y+pAvCg9TQ4FxI6jBbPyoHNA77NxaSYpDA9taW50IG5lbyB0b2tlbnNBz+dHlnkMBACUNXfbIaA15v7//yJSIUE5U248DBTPduKL0AYsSkeO41VhARMZ88+k0rNyaiYUeNiqc2smCnkRoDW0/v//ISIfIQwZV3JvbmcgY2FsbGluZyBzY3JpcHQgaGFzaDohIiohDCRQYXltZW50IGlzIGRpc2FibGUgb24gdGhpcyBjb250cmFjdCE6QFcAAkGb9mfODAVhc3NldFA1NPz//3h5UzQtQFcAAUGb9mfODAhjb250cmFjdFA1Fvz//wwLdG90YWxTdXBwbHl4UzQDQFcBA3gRznmLcHgQzmh6U0HmPxiEQFcCAng1z/z//3BoebNxaSYHeDQZIgl4aHmfUDSLQFcAATUZ/f//eJ80mUBXAAFBm/ZnzgwFYXNzZXRQ", "doc_id": "bf3029cf-b476-44a3-bd72-2d2d4a660496", "embedding": null, "doc_hash": "d1bfea99bcaa7d9750cf23e2e24c1d0976b694aa54e8c0a98ad8c97a941aab1e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 14641, "end": 15986, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "6f781e10-51ba-405e-87fc-5f2f923e7b93", "3": "7035ccc5-0d89-469a-b589-c744f5b95603"}}, "__type__": "1"}, "7035ccc5-0d89-469a-b589-c744f5b95603": {"__data__": {"text": "Na/7//94UDXJ+///QAwcVGVzdENvbnRyYWN0TWFuYWdlbWVudFVwZGF0ZUBXAQA3BABwaEBXAAJ4eR8Qw1RBYn1bUkVANbr8//9AVwcEeDVuAQAAJgx5NWYBAAAQsyIDEXBoJkUMQFRoZSBwYXJhbWV0ZXJzIGZyb20gYW5kIHRvIFNIT1VMRCBiZSAyMC1ieXRlIG5vbi16ZXJvIGFkZHJlc3Nlcy46ehC2cWkmMQwsVGhlIHBhcmFtZXRlciBhbW91bnQgTVVTVCBiZSBncmVhdGVyIHRoYW4gMC46eEH4J+yMJA14QTlTbjyXELMiAxByaiYWDBFObyBhdXRob3JpemF0aW9uLjp4NY37//96tXNrJhoMFUluc3VmZmljaWVudCBiYWxhbmNlLjp4ebN0bCYGEXUiWnh6UDWJ/v//eXpQNUH8//94eXpTE8AMCFRyYW5zZmVyQZUBb2F5NUn8//92biYpeQwOb25ORVAxN1BheW1lbnQfE8NKEHjQShF60EoSe9BUQWJ9W1JFEXVtQFcBAjUc/P//ELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjp4eQtTNwIAQFcAAXhK2ShQygAUs6smCXgQsxCzIgMQQDXd+///QLRc9jASwB8MBmRlcGxveQwU/aP6Q0bqUyolj8SX3a3bZDfJ/f9BYn1bUg==\",         \"witnesses\": [\n          {\n            \"invocation\": \"DEB3n8N+XiGa8HxPiVzUxKqF2wZmzMsQivI9O0VNul/hljZXuMpza6DpTZZ4mfplqa1RNpcm1xQDo7cOoVR19n66\",\n            \"verification\": \"DCECVOanJ/RSNsd2Itpgwx8fHJooXf3zbTYO/4EAs9Oud+FBdHR2qg==\"\n          }\n        ]\n      }\n    ],\n    \"confirmations\": 50,\n    \"nextblockhash\": \"0x568b1d99c5abd460e4a05230d2a70bc7fd432b9f372354076eacd3b9f5cd399e\"\n  }\n}\n```\n\n", "doc_id": "7035ccc5-0d89-469a-b589-c744f5b95603", "embedding": null, "doc_hash": "d245aeebfb13d4f1c7abaf811c9a84e6e08da78ec70b0387b599739e4a573156", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}, "node_info": {"start": 15987, "end": 17085, "_node_type": "1"}, "relationships": {"1": "1745234eab7894f819f14395c0ce93f6ecc7b72d", "2": "bf3029cf-b476-44a3-bd72-2d2d4a660496"}}, "__type__": "1"}, "1190cbef-a68d-4e17-b878-63dfa7d8c9d2": {"__data__": {"text": "\ufeff# getblockcount Method\n\nGets the block count of the blockchain.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getblockcount\",\n   \"params\":[],\n   \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": 991991\n}\n```\n", "doc_id": "1190cbef-a68d-4e17-b878-63dfa7d8c9d2", "embedding": null, "doc_hash": "6b617065cec1845ffba460fd620ed9e46823b13217ffb0aa3a3379e78641c68c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockcount.html"}, "node_info": {"start": 0, "end": 415, "_node_type": "1"}, "relationships": {"1": "35b840f41ecf41337534f4b57b833ed112bd72f0"}}, "__type__": "1"}, "4fbb5c0d-9ed1-4b1b-bb68-346bac21fba6": {"__data__": {"text": "\ufeff# getblockhash Method\n\nReturns the hash value of the corresponding block based on the specified index.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n##  Parameter Description\n\nindex: Block index (block height)\n\n## Example\n\nRequest body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getblockhash\",\n   \"params\": [10000],\n   \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": \"0xdf17b40c5627a45e83d61b286a6d6d14859136621760d0a5b58dd59d18fd53d4\"\n}\n```", "doc_id": "4fbb5c0d-9ed1-4b1b-bb68-346bac21fba6", "embedding": null, "doc_hash": "62fa038508c84d6a2f8c54ca7227e038270bb32e1893d50a4a419e5a98918941", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockhash.html"}, "node_info": {"start": 0, "end": 582, "_node_type": "1"}, "relationships": {"1": "77fea4a8a53be2dcf1e2cf8de41cac3cdfed3d30"}}, "__type__": "1"}, "589d672d-e4d0-4337-be0e-c45d0c9b5d27": {"__data__": {"text": "\ufeff# getblockheader Method\n\nReturns the corresponding block header information according to the specified script hash or index.\n\nThe usage of this method is as same as `getblock`. The only difference is that `getblockeader` gets the block header and `getblock` gets the complete block.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n* hash | index: The block script hash or index (i.e. block height=number of blocks - 1).\n\n* verbose: Optional, the default value is false. \n  * When verbose is false, serialized information of the block is returned in a hexadecimal string. If you need the detailed information, use the SDK for deserialization. \n  * When verbose is true or 1, detailed information of the block is returned in Json format. \n\n## Example\n\n**Example 1 - invoke with block hash**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockheader\",\n  \"params\": [140],\n  \"id\": 1\n}\n```\n\nor\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockheader\",\n  \"params\": [\"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"AAAAAFrf0tgylRv20FkZygEC2UDiMHJTukXJPQ/DFP5sezdzm3A7VffHxK0b4rwXh/xR/zV24Mj6+Vhq25qoN1WlxRIBIKp7dwEAAIwAAADitlMicpPpnE8pBtU1U6u0pnLfhgFCDEDGZIUihuWK6RLqloq6UiKxkoW0QFhqGhoQU3cK5IQRATFUY807W/hGmYqP80N8qjKQ/e4o8URTzgRUXJKXf1/sKxEMIQLO1DI5fdxE7boDHAvDuTPyj92Wd3kteyDmwDbdqqzx4hELQRON768A\"\n}\n```\n\n**Example 2 - \u83b7\u53d6 JSON \u683c\u5f0f\u7684\u533a\u5757\u4fe1\u606f**\n\n\u8bf7\u6c42\u6b63\u6587\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockheader\",\n  \"params\": [140, true],\n  \"id\": 1\n}\n```\n\n\u6216\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getblockheader\",\n  \"params\": [\"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\", true]\n}\n```\n\n\u54cd\u5e94\u6b63\u6587\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\",\n        \"size\": 213,\n        \"version\": 0,\n       ", "doc_id": "589d672d-e4d0-4337-be0e-c45d0c9b5d27", "embedding": null, "doc_hash": "97036b89da1b361d5aa3b95e1aa43b26517bf4445d96a85ea22bce39022b3c27", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockheader.html"}, "node_info": {"start": 0, "end": 2069, "_node_type": "1"}, "relationships": {"1": "938d0901aaca9015140edc6121e54133fe5043ea", "3": "0e9b6c03-82b3-4be9-82a3-088e6ebaca81"}}, "__type__": "1"}, "0e9b6c03-82b3-4be9-82a3-088e6ebaca81": {"__data__": {"text": "       \"version\": 0,\n        \"previousblockhash\": \"0x73377b6cfe14c30f3dc945ba537230e240d90201ca1959d0f61b9532d8d2df5a\",\n        \"merkleroot\": \"0x12c5a55537a89adb6a58f9fac8e07635ff51fc8717bce21badc4c7f7553b709b\",\n        \"time\": 1612687482881,\n        \"primary\": 0,\n        \"index\": 140,\n        \"nextconsensus\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n        \"witnesses\": [\n            {\n                \"invocation\": \"DEDGZIUihuWK6RLqloq6UiKxkoW0QFhqGhoQU3cK5IQRATFUY807W/hGmYqP80N8qjKQ/e4o8URTzgRUXJKXf1/s\",\n                \"verification\": \"EQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n            }\n        ],\n        \"confirmations\": 41,\n        \"nextblockhash\": \"0xd087785fc3cf5b59c6a4631bdbdd63ed3e44947c22eb69ba866ea9291473b2b5\"\n    }\n}\n```\n\n", "doc_id": "0e9b6c03-82b3-4be9-82a3-088e6ebaca81", "embedding": null, "doc_hash": "7f946c1a3396ebbed948a3381cd7c5e5f416b74217c3ee77dbc31fff284d78ea", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockheader.html"}, "node_info": {"start": 2041, "end": 2806, "_node_type": "1"}, "relationships": {"1": "938d0901aaca9015140edc6121e54133fe5043ea", "2": "589d672d-e4d0-4337-be0e-c45d0c9b5d27"}}, "__type__": "1"}, "5c7388e7-2ebc-4840-a9b1-3577e036c3e0": {"__data__": {"text": "# getcommittee Method\n\nGets the public key list of current Neo committee members.\n> [!Note]\n>\n> Before you can invoke this method you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases).\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getcommittee\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"020f2887f41474cfeb11fd262e982051c1541418137c02a0f4961af911045de639\",\n        \"03204223f8c86b8cd5c89ef12e4f0dbb314172e9241e30c9ef2293790793537cf0\",\n        \"0222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c30\",\n        \"0226933336f1b75baa42d42b71d9091508b638046d19abd67f4e119bf64a7cfb4d\",\n        \"023a36c72844610b4d34d1968662424011bf783ca9d984efa19a20babf5582f3fe\",\n        \"03409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd0\",\n        \"02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70\",\n        \"024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d\",\n        \"02504acbc1f4b3bdad1d86d6e1a08603771db135a73e61c9d565ae06a1938cd2ad\",\n        \"03708b860c1de5d87f5b151a12c2a99feebd2e8b315ee8e7cf8aa19692a9e18379\",\n        \"0288342b141c30dc8ffcde0204929bb46aed5756b41ef4a56778d15ada8f0c6654\",\n        \"02a62c915cf19c7f19a50ec217e79fac2439bbaad658493de0c7d8ffa92ab0aa62\",\n        \"02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e\",\n        \"03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c\",\n        \"03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a\",\n        \"03c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a050\",\n       ", "doc_id": "5c7388e7-2ebc-4840-a9b1-3577e036c3e0", "embedding": null, "doc_hash": "a2e36fb57d280d3473b40f1a0ac14220e7a381f0b7e7f408a3a7059858860e70", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcommittee.html"}, "node_info": {"start": 0, "end": 1675, "_node_type": "1"}, "relationships": {"1": "a39cad07b676292d5ca4bc307fc2e864b64021c1", "3": "a4927468-cd33-47a3-bc4c-9c737259fcfe"}}, "__type__": "1"}, "a4927468-cd33-47a3-bc4c-9c737259fcfe": {"__data__": {"text": "       \"02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554\",\n        \"02cd5a5547119e24feaa7c2a0f37b8c9366216bab7054de0065c9be42084003c8a\",\n        \"03cdcea66032b82f5c30450e381e5295cae85c5e6943af716cc6b646352a6067dc\",\n        \"03d281b42002647f0113f36c7b8efb30db66078dfaaa9ab3ff76d043a98d512fde\",\n        \"02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093\"\n    ]\n}\n```", "doc_id": "a4927468-cd33-47a3-bc4c-9c737259fcfe", "embedding": null, "doc_hash": "0a2cdd655cdd173a2d1c3e8a724e2ee3c90323d98335723bfea070ffdd21e67a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcommittee.html"}, "node_info": {"start": 1669, "end": 2068, "_node_type": "1"}, "relationships": {"1": "a39cad07b676292d5ca4bc307fc2e864b64021c1", "2": "5c7388e7-2ebc-4840-a9b1-3577e036c3e0"}}, "__type__": "1"}, "7759f154-6a1c-415f-8ed4-b7ba4370283a": {"__data__": {"text": "\ufeff# getconnectioncount Method\n\nGets the current number of connections for the node.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getconnectioncount\",\n   \"params\":[],\n   \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": 10\n}\n```", "doc_id": "7759f154-6a1c-415f-8ed4-b7ba4370283a", "embedding": null, "doc_hash": "3d6328532d5947c892a6962edb37509457fb7a2f077313ffe52bedd81f8af87b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getconnectioncount.html"}, "node_info": {"start": 0, "end": 433, "_node_type": "1"}, "relationships": {"1": "10ca7a4a9b7973152b451f03803bf73bd33826dd"}}, "__type__": "1"}, "b2015061-c73b-4e58-bc06-3d5a76bb1654": {"__data__": {"text": "\ufeff# getcontractstate Method\n\nQueries the contract information with the contract script hash or native contract name. \n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\nscript_hash / name: Contract script hash or the native contract name.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getcontractstate\",\n  \"params\": [\"neotoken\"],\n  \"id\": 1\n}\n```\n\nor\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getcontractstate\",\n  \"params\": [\"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"id\": 383,\n        \"updatecounter\": 0,\n        \"hash\": \"0xe7f2e74b3498d3a0d80bcbd5925bca32e4acc4f7\",\n        \"nef\": {\n            \"magic\": 860243278,\n            \"compiler\": \"Neo.Compiler.CSharp 3.1.0\",\n            \"source\": \"https://github.com/neo-project/neo\",\n            \"tokens\": [\n                {\n                    \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"method\": \"update\",\n                    \"paramcount\": 3,\n                    \"hasreturnvalue\": false,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"method\": \"destroy\",\n                    \"paramcount\": 0,\n                    \"hasreturnvalue\": false,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xfe924b7cfe89ddd271abaf7210a80a7e11178758\",\n                    \"method\": \"request\",\n                    \"paramcount\": 5,\n                    \"hasreturnvalue\": false,\n        ", "doc_id": "b2015061-c73b-4e58-bc06-3d5a76bb1654", "embedding": null, "doc_hash": "6400bc64bcc5d14c7bb82e89fe99353bfe6af284dfb94b82ca44f9e0cb0dad17", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 0, "end": 1772, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "3": "598b6e5e-6f5b-4ad5-b80f-ad94c6bd71de"}}, "__type__": "1"}, "598b6e5e-6f5b-4ad5-b80f-ad94c6bd71de": {"__data__": {"text": "    \"hasreturnvalue\": false,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n                    \"method\": \"itoa\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n                    \"method\": \"jsonDeserialize\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"method\": \"getContract\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n                    \"method\": \"getTransaction\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n                    \"method\": \"getTransactionState\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n            ", "doc_id": "598b6e5e-6f5b-4ad5-b80f-ad94c6bd71de", "embedding": null, "doc_hash": "face93f2d5d618e3e9d40eeeb6f06cc6d6a83a8357c897295cf1ca50437e332c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 1749, "end": 3178, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "b2015061-c73b-4e58-bc06-3d5a76bb1654", "3": "a275e22f-0394-4910-ac7f-d8c1d70e09c3"}}, "__type__": "1"}, "a275e22f-0394-4910-ac7f-d8c1d70e09c3": {"__data__": {"text": "\"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                }\n            ],\n            \"script\":", "doc_id": "a275e22f-0394-4910-ac7f-d8c1d70e09c3", "embedding": null, "doc_hash": "d71cadf93cdbd155038922d330f586bd56e5318268bcf8febf5ef663198e8196", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 3180, "end": 3297, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "598b6e5e-6f5b-4ad5-b80f-ad94c6bd71de", "3": "4ad0d845-85d0-4a69-9873-e34ee4abdbe7"}}, "__type__": "1"}, "4ad0d845-85d0-4a69-9873-e34ee4abdbe7": {"__data__": {"text": "    ],\n            \"script\": \"WEH4J+yMQEH4J+yMQDTzQFkMBmVuYWJsZUsRzlCLUBDOQZJd6DFK2CYERRDbIRGzQErYJgRFENshQEsRzlCLUBDOQZJd6DFANLiqJhYMEU5vIGF1dGhvcml6YXRpb24uOlkMBmVuYWJsZRESTRHOUYtREM5B5j8YhEASTRHOUYtREM5B5j8YhEA1d////6omFgwRTm8gYXV0aG9yaXphdGlvbi46WQwGZW5hYmxlEBJNEc5Ri1EQzkHmPxiEQFcAAzVP////JgYiKyIpDCRQYXltZW50IGlzIGRpc2FibGUgb24gdGhpcyBjb250cmFjdCE6QFcBAzUJ////qiYWDBFObyBhdXRob3JpemF0aW9uLjoLenlB2/6odBTAcGgfDAh0cmFuc2ZlcnhBYn1bUkXCSnjPSnnPSnrPDAtVbmxvY2tFdmVudEGVAW9hEdsgIgJAQdv+qHRAQWJ9W1JAVwIAEMBwaB8MCGlzUGF1c2VkWtsoStgkCUrKABQoAzpBYn1bUnHCSmnPDA1Jc1BhdXNlZEV2ZW50QZUBb2FpIgJA2yhK2CQJSsoAFCgDOkBXAAJ5JgQiGgwFV29ybGQMBUhlbGxvQZv2Z85B5j8YhEBB5j8YhEBBm/ZnzkBXAAI1If7//6omFgwRTm8gYXV0aG9yaXphdGlvbi46C3l4NwAAQDcAAEA1+v3//6omFgwRTm8gYXV0aG9yaXphdGlvbi46NwEAQDcBAEBXAgMMCGNhbGxiYWNrcAwIdXNlcmRhdGFxemloeHk3AgBANwIAQFcDBEE5U248DBRYhxcRfgqoEHKvq3HS3Yn+fEuS/pgmEgwNVW5hdXRob3JpemVkITp6EJgmLgwiT3JhY2xlIHJlc3BvbnNlIGZhaWx1cmUgd2l0aCBjb2RlIHo3AwCL2yg6ezcEAHBocWkQznIMCnVzZXJkYXRhOiB5i9soQc/nR5YMEHJlc3BvbnNlIHZhbHVlOiBqi9soQc/nR5ZAQTlTbjxADBRYhxcRfgqoEHKvq3HS3Yn+fEuS/kA3BABAQc/nR5ZAVwACeXhBm/ZnzkHmPxiEQFcBABFwIhtZaDcDAGgSTRHOUYtREM5B5j8YhGhKnHBFaAHoA7Uk4kBXAQBB2/6odDcFAHBoFM4VziICQDcFAEBXAQBB2/6odDcFAHBoFM4TziICQFcCAEEtUQgwcGgQznHCSmk3BgDPDBBUcmFuc2FjdGlvblN0YXRlQZUBb2FpNwcAIgJAQS1RCDBANwYAQDcHAEBWAwwUwJjkrPCyCQ3Rbss9WN5CaocVhRtgDBRC5UOC6", "doc_id": "4ad0d845-85d0-4a69-9873-e34ee4abdbe7", "embedding": null, "doc_hash": "ea5402f05bf2cef61dea5855a45f757e0551689889a9342ad0e590f6cb4a6076", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 3309, "end": 4652, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "a275e22f-0394-4910-ac7f-d8c1d70e09c3", "3": "4d769aea-3f7b-406a-bffd-b74de8207c48"}}, "__type__": "1"}, "4d769aea-3f7b-406a-bffd-b74de8207c48": {"__data__": {"text": "G3Nygng2ou2fi+sTUmHRGIMBWFzc2V0QZv2Z84SwGFAEsBA\",             \"checksum\": 1593448136\n        },\n        \"manifest\": {\n            \"name\": \"TestNetFee\",\n            \"groups\": [],\n            \"features\": {},\n            \"supportedstandards\": [\n                \"NEP-17\"\n            ],\n            \"abi\": {\n                \"methods\": [\n                    {\n                        \"name\": \"verify\",\n                        \"parameters\": [],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 13,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"getPaymentStatus\",\n                        \"parameters\": [],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 16,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"enablePayment\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 72,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"disablePayment\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 137,\n                        \"safe\": false\n     ", "doc_id": "4d769aea-3f7b-406a-bffd-b74de8207c48", "embedding": null, "doc_hash": "eca6fb49d7fb354ebc468b8b2ab04ab2b18b39fed0585cd2fa6236d87b4fce42", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 4665, "end": 6015, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "4ad0d845-85d0-4a69-9873-e34ee4abdbe7", "3": "ca6adbb2-736d-4b21-864d-155694ee6424"}}, "__type__": "1"}, "ca6adbb2-736d-4b21-864d-155694ee6424": {"__data__": {"text": "          \"safe\": false\n                    },\n                    {\n                        \"name\": \"onNEP17Payment\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"from\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"amount\",\n                                \"type\": \"Integer\"\n                            },\n                            {\n                                \"name\": \"data\",\n                                \"type\": \"Any\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 190,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"unlock\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"toAssetHash\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"toAddress\",\n                                \"type\": \"Hash160\"\n ", "doc_id": "ca6adbb2-736d-4b21-864d-155694ee6424", "embedding": null, "doc_hash": "65b3d02361cdf5708e7863ce56b79942162f592cfa1292221318e6e9aad6bdf7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 6003, "end": 7213, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "4d769aea-3f7b-406a-bffd-b74de8207c48", "3": "180aa681-9fca-4271-bd85-09cd83c427fa"}}, "__type__": "1"}, "180aa681-9fca-4271-bd85-09cd83c427fa": {"__data__": {"text": "           \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"amount\",\n                                \"type\": \"Integer\"\n                            }\n                        ],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 244,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"isPaused\",\n                        \"parameters\": [],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 351,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"_deploy\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"data\",\n                                \"type\": \"Any\"\n                            },\n                            {\n                                \"name\": \"update\",\n                                \"type\": \"Boolean\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 431,\n                        \"safe\": false\n      ", "doc_id": "180aa681-9fca-4271-bd85-09cd83c427fa", "embedding": null, "doc_hash": "1d27d4a8aa98302fc2e065fe00d6654d6ac42067bf0c9269cd063cfa1e2bfbf8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 7210, "end": 8439, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "ca6adbb2-736d-4b21-864d-155694ee6424", "3": "1d6f38d8-44a7-4809-a231-8a299232adaa"}}, "__type__": "1"}, "1d6f38d8-44a7-4809-a231-8a299232adaa": {"__data__": {"text": "         \"safe\": false\n                    },\n                    {\n                        \"name\": \"update\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"nefFile\",\n                                \"type\": \"ByteArray\"\n                            },\n                            {\n                                \"name\": \"manifest\",\n                                \"type\": \"String\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 476,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"destroy\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 518,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"doRequest\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"filter\",\n                                \"type\": \"String\"\n                            },\n                            {\n                          ", "doc_id": "1d6f38d8-44a7-4809-a231-8a299232adaa", "embedding": null, "doc_hash": "2781dec67705aa3a62c85187ea8e353b7300e099b7471ef7b5c82b7dd0783de2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 8444, "end": 9668, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "180aa681-9fca-4271-bd85-09cd83c427fa", "3": "0558471e-8a7d-468f-8589-159fd9d9e8dc"}}, "__type__": "1"}, "0558471e-8a7d-468f-8589-159fd9d9e8dc": {"__data__": {"text": "                         \"name\": \"url\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"gasForResponse\",\n                                \"type\": \"Integer\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 554,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"callback\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"url\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"userdata\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"code\",\n                                \"type\": \"Integer\"\n                            },\n                            {\n                                \"name\": \"result\",\n                                \"type\": \"String\"\n                           ", "doc_id": "0558471e-8a7d-468f-8589-159fd9d9e8dc", "embedding": null, "doc_hash": "7e7b366497899e823fa54fe0acf38aab13b81632d8f860f1c63ba067ba69e212", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 9682, "end": 10883, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "1d6f38d8-44a7-4809-a231-8a299232adaa", "3": "35ca8dd9-d362-4f3b-867a-e27650438e99"}}, "__type__": "1"}, "35ca8dd9-d362-4f3b-867a-e27650438e99": {"__data__": {"text": "                    }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 592,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"put\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"key\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"value\",\n                                \"type\": \"String\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 789,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"putMulti\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 805,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"testPermission\",\n                        \"parameters\": [],\n                        \"returntype\": \"Any\",\n                        \"offset\": 845,\n   ", "doc_id": "35ca8dd9-d362-4f3b-867a-e27650438e99", "embedding": null, "doc_hash": "3945606f122cf204a1574d183544b9098d5f1c141a4ebf4b8ae961164d01ce75", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 10884, "end": 12123, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "0558471e-8a7d-468f-8589-159fd9d9e8dc", "3": "ec421604-e4a1-4816-8d5c-52b734e814a1"}}, "__type__": "1"}, "ec421604-e4a1-4816-8d5c-52b734e814a1": {"__data__": {"text": "          \"offset\": 845,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"testSupportedStandards\",\n                        \"parameters\": [],\n                        \"returntype\": \"Any\",\n                        \"offset\": 869,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"getState\",\n                        \"parameters\": [],\n                        \"returntype\": \"Any\",\n                        \"offset\": 889,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"_initialize\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 953,\n                        \"safe\": false\n                    }\n                ],\n                \"events\": [\n                    {\n                        \"name\": \"UnlockEvent\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"arg1\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"arg2\",\n              ", "doc_id": "ec421604-e4a1-4816-8d5c-52b734e814a1", "embedding": null, "doc_hash": "1f9130ac084e053426108a66f14511894352d49c5d5b60932b799b8c9ce1985b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 12110, "end": 13379, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "35ca8dd9-d362-4f3b-867a-e27650438e99", "3": "76205753-6c27-4c5b-b694-59cb2d26eda1"}}, "__type__": "1"}, "76205753-6c27-4c5b-b694-59cb2d26eda1": {"__data__": {"text": "\"arg2\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"arg3\",\n                                \"type\": \"Integer\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"IsPausedEvent\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"obj\",\n                                \"type\": \"Any\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"TransactionState\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"obj\",\n                                \"type\": \"Any\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"permissions\": [\n                {\n                    \"contract\": \"0x42e54382e86dcdca09e0da8bb67e2fac4d498744\",\n                    \"methods\": [\n                        \"test\"\n                    ]\n                },\n    ", "doc_id": "76205753-6c27-4c5b-b694-59cb2d26eda1", "embedding": null, "doc_hash": "137a752647464f3bda6e3338f19df9b77461096ad634be1e4bc742b074ad424b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 13386, "end": 14577, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "ec421604-e4a1-4816-8d5c-52b734e814a1", "3": "9092e5de-5f95-43d4-bf3f-ab8628c8837a"}}, "__type__": "1"}, "9092e5de-5f95-43d4-bf3f-ab8628c8837a": {"__data__": {"text": "              },\n                {\n                    \"contract\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n                    \"methods\": [\n                        \"itoa\",\n                        \"jsonDeserialize\"\n                    ]\n                },\n                {\n                    \"contract\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n                    \"methods\": [\n                        \"getTransaction\",\n                        \"getTransactionState\"\n                    ]\n                },\n                {\n                    \"contract\": \"0xfe924b7cfe89ddd271abaf7210a80a7e11178758\",\n                    \"methods\": [\n                        \"request\"\n                    ]\n                },\n                {\n                    \"contract\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"methods\": [\n                        \"destroy\",\n                        \"getContract\",\n                        \"update\"\n                    ]\n                }\n            ],\n            \"trusts\": [],\n            \"extra\": {\n                \"Author\": \"Neo\",\n                \"Email\": \"dev@neo.org\",\n                \"Description\": \"This is a contract example\"\n            }\n        }\n    }\n}\n```\n", "doc_id": "9092e5de-5f95-43d4-bf3f-ab8628c8837a", "embedding": null, "doc_hash": "47a043e22dbd481fc91ab2c67cb44e32bbf9fb3edc0eb9ff76204452583656a8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}, "node_info": {"start": 14564, "end": 15796, "_node_type": "1"}, "relationships": {"1": "d5dccca8e365f304565ed0afc3a787ceae2b3919", "2": "76205753-6c27-4c5b-b694-59cb2d26eda1"}}, "__type__": "1"}, "f70a6ab0-2e5a-4df3-a305-8d7ba2a1fa9b": {"__data__": {"text": "# getnativecontracts Method\n\nGets the native contracts list, which includes the basic information of native contracts and the contract descriptive file manifest.json.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"getnativecontracts\",\n    \"params\": []\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"id\": -1,\n            \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 1110259869\n            },\n            \"manifest\": {\n                \"name\": \"ContractManagement\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"deploy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                        ", "doc_id": "f70a6ab0-2e5a-4df3-a305-8d7ba2a1fa9b", "embedding": null, "doc_hash": "0a162e0a8a6fa9c688a6a6b3205b3c1774ebb107c3e49161b02e3031d6c309f4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 0, "end": 1583, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "3": "4550e4a9-c49f-4706-b932-bc4d69640be0"}}, "__type__": "1"}, "4550e4a9-c49f-4706-b932-bc4d69640be0": {"__data__": {"text": "                               \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"deploy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 7,\n                            \"safe\": false\n                        },\n                        {\n                           ", "doc_id": "4550e4a9-c49f-4706-b932-bc4d69640be0", "embedding": null, "doc_hash": "fa818fd8a7e41cad9b8daecc3cc0c89e24b17885d0fac903e57fc66e77431364", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 1584, "end": 2753, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "f70a6ab0-2e5a-4df3-a305-8d7ba2a1fa9b", "3": "70f1e1a1-6bb6-49f2-ac28-4767ac974eb1"}}, "__type__": "1"}, "70f1e1a1-6bb6-49f2-ac28-4767ac974eb1": {"__data__": {"text": "                    \"name\": \"destroy\",\n                            \"parameters\": [],\n                            \"returntype\": \"Void\",\n                            \"offset\": 14,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getContract\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getMinimumDeploymentFee\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"setMinimumDeploymentFee\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n", "doc_id": "70f1e1a1-6bb6-49f2-ac28-4767ac974eb1", "embedding": null, "doc_hash": "23ed99b8921d2ef53eb64d88abea1e8de6134753831b6c59ba858bb2fff3355d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 2754, "end": 4005, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "4550e4a9-c49f-4706-b932-bc4d69640be0", "3": "f1b1b882-5e17-4bac-8507-0d29249b1f24"}}, "__type__": "1"}, "f1b1b882-5e17-4bac-8507-0d29249b1f24": {"__data__": {"text": "             \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 35,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"update\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 42,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"update\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n           ", "doc_id": "f1b1b882-5e17-4bac-8507-0d29249b1f24", "embedding": null, "doc_hash": "ac2c0e0bf6428280cea6e97d48117421e7883a97d8cbfd8203c9cf508093f45f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 3990, "end": 5184, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "70f1e1a1-6bb6-49f2-ac28-4767ac974eb1", "3": "9b366707-2042-412e-86ab-591276bf5432"}}, "__type__": "1"}, "9b366707-2042-412e-86ab-591276bf5432": {"__data__": {"text": "\"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 49,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Deploy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"Update\",\n                            \"parameters\": [\n        ", "doc_id": "9b366707-2042-412e-86ab-591276bf5432", "embedding": null, "doc_hash": "1b69555e8880ffdc596a3c045f35917719ba56abc391dba8fc3df67af3b70b84", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 5183, "end": 6361, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "f1b1b882-5e17-4bac-8507-0d29249b1f24", "3": "32389e23-b13c-4875-bd55-d163b9c4f645"}}, "__type__": "1"}, "32389e23-b13c-4875-bd55-d163b9c4f645": {"__data__": {"text": "      \"parameters\": [\n                                {\n                                    \"name\": \"Hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"Destroy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -2,\n            \"hash\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n               ", "doc_id": "32389e23-b13c-4875-bd55-d163b9c4f645", "embedding": null, "doc_hash": "707bac3f20440bbdc732bcfedae5df610327f3d03fb7eacf7b12478efd84df56", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 6365, "end": 7576, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "9b366707-2042-412e-86ab-591276bf5432", "3": "b9db7b41-bc0d-40bf-979d-ff367c11bf5f"}}, "__type__": "1"}, "b9db7b41-bc0d-40bf-979d-ff367c11bf5f": {"__data__": {"text": "\"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 1325686241\n            },\n            \"manifest\": {\n                \"name\": \"StdLib\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"atoi\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"atoi\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"String\"\n   ", "doc_id": "b9db7b41-bc0d-40bf-979d-ff367c11bf5f", "embedding": null, "doc_hash": "f25cd5a15f2c4bb7abaecd2c8e52808e14d3c7360eb033414d8c9fceee08da98", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 7588, "end": 8854, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "32389e23-b13c-4875-bd55-d163b9c4f645", "3": "200190b8-2161-49c8-bcae-3d95b1b53f77"}}, "__type__": "1"}, "200190b8-2161-49c8-bcae-3d95b1b53f77": {"__data__": {"text": "          \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"base\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58CheckDecode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"s\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58CheckEncode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n             ", "doc_id": "200190b8-2161-49c8-bcae-3d95b1b53f77", "embedding": null, "doc_hash": "2d23b1a4d1794af1301f8dd827746195c4686ac48cd55f09b3985c788651645b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 8843, "end": 10047, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "b9db7b41-bc0d-40bf-979d-ff367c11bf5f", "3": "117f4e1a-9e74-49b4-a884-bd19cdd2ad30"}}, "__type__": "1"}, "117f4e1a-9e74-49b4-a884-bd19cdd2ad30": {"__data__": {"text": "\"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58Decode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"s\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58Encode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 35,\n                            \"safe\": true\n             ", "doc_id": "117f4e1a-9e74-49b4-a884-bd19cdd2ad30", "embedding": null, "doc_hash": "7b566d0029854d07d6c4e53d1d966a513f320b67759a75b27598f74a91a79cf8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 10052, "end": 11256, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "200190b8-2161-49c8-bcae-3d95b1b53f77", "3": "9bac900e-b816-4ac2-8905-36b11219e819"}}, "__type__": "1"}, "9bac900e-b816-4ac2-8905-36b11219e819": {"__data__": {"text": "  \"safe\": true\n                        },\n                        {\n                            \"name\": \"base64Decode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"s\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 42,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base64Encode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 49,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"deserialize\",\n                            \"parameters\": [\n                                {\n                       ", "doc_id": "9bac900e-b816-4ac2-8905-36b11219e819", "embedding": null, "doc_hash": "12622e05b8d89e2f34aa96161bcfad2ee028a95c3a9b7b414cd0f969f023b64b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 11257, "end": 12456, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "117f4e1a-9e74-49b4-a884-bd19cdd2ad30", "3": "4ddd676f-caad-4a1a-911c-eda40689a2b6"}}, "__type__": "1"}, "4ddd676f-caad-4a1a-911c-eda40689a2b6": {"__data__": {"text": "                                \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Any\",\n                            \"offset\": 56,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"itoa\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 63,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"itoa\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\":", "doc_id": "4ddd676f-caad-4a1a-911c-eda40689a2b6", "embedding": null, "doc_hash": "032fb36c9f403b569a448ce7ffb0bcfebe6f86a78ab3ce8cac490bbfff7e2bab", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 12469, "end": 13646, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "9bac900e-b816-4ac2-8905-36b11219e819", "3": "4c8b5b1b-be9f-44dc-a9f3-7e57d6722311"}}, "__type__": "1"}, "4c8b5b1b-be9f-44dc-a9f3-7e57d6722311": {"__data__": {"text": "                 \"name\": \"base\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 70,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"jsonDeserialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"json\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Any\",\n                            \"offset\": 77,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"jsonSerialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"item\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                  ", "doc_id": "4c8b5b1b-be9f-44dc-a9f3-7e57d6722311", "embedding": null, "doc_hash": "f6d5e1723307f4382e0df12deea7cf77969b3fe9627b6601517c19050bc8a152", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 13640, "end": 14842, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "4ddd676f-caad-4a1a-911c-eda40689a2b6", "3": "c47b8d67-0d01-4103-b9c1-3ddf06adbb27"}}, "__type__": "1"}, "c47b8d67-0d01-4103-b9c1-3ddf06adbb27": {"__data__": {"text": "                           \"offset\": 84,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memoryCompare\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"str1\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"str2\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 91,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memorySearch\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"mem\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"value\",\n                        ", "doc_id": "c47b8d67-0d01-4103-b9c1-3ddf06adbb27", "embedding": null, "doc_hash": "58ac3f39e4e10533e83fa759354a1f0eebccaedeb14249bfa5c7ea9bb5aab551", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 14850, "end": 16038, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "4c8b5b1b-be9f-44dc-a9f3-7e57d6722311", "3": "cfb2b35d-a049-4dc7-ae94-eb80da0d8347"}}, "__type__": "1"}, "cfb2b35d-a049-4dc7-ae94-eb80da0d8347": {"__data__": {"text": "                               \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 98,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memorySearch\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"mem\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"start\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 105,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\":", "doc_id": "cfb2b35d-a049-4dc7-ae94-eb80da0d8347", "embedding": null, "doc_hash": "53e8456ce49c87fae4577cc3afb81879eec3bcf97cb67b5d7b0a26ea8591b7b9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 16039, "end": 17225, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "c47b8d67-0d01-4103-b9c1-3ddf06adbb27", "3": "ac99fb10-9865-4cf4-bedf-3c328bbd5826"}}, "__type__": "1"}, "ac99fb10-9865-4cf4-bedf-3c328bbd5826": {"__data__": {"text": "                 \"name\": \"memorySearch\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"mem\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"start\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"backward\",\n                                    \"type\": \"Boolean\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 112,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"serialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"item\",\n", "doc_id": "ac99fb10-9865-4cf4-bedf-3c328bbd5826", "embedding": null, "doc_hash": "5b528045180aebe4515dcadc835f613afd6e77f4ce77526911272b0cefee1120", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 17219, "end": 18412, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "cfb2b35d-a049-4dc7-ae94-eb80da0d8347", "3": "f45ed43c-639c-43d2-92bb-2861fb93540a"}}, "__type__": "1"}, "f45ed43c-639c-43d2-92bb-2861fb93540a": {"__data__": {"text": "             \"name\": \"item\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 119,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"stringSplit\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"str\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"separator\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 126,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"stringSplit\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"str\",\n                ", "doc_id": "f45ed43c-639c-43d2-92bb-2861fb93540a", "embedding": null, "doc_hash": "0d17d394eb904b1e8cc74f1969613639618d276727f90f9688b1556881f04630", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 18405, "end": 19602, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "ac99fb10-9865-4cf4-bedf-3c328bbd5826", "3": "6afc5f2c-d05e-4327-83d4-24365b8c840f"}}, "__type__": "1"}, "6afc5f2c-d05e-4327-83d4-24365b8c840f": {"__data__": {"text": "\"str\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"separator\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"removeEmptyEntries\",\n                                    \"type\": \"Boolean\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 133,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -3,\n            \"hash\": \"0x726cb6e0cd8628a1350a611384688911ab75f51b\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\":", "doc_id": "6afc5f2c-d05e-4327-83d4-24365b8c840f", "embedding": null, "doc_hash": "0653073129690bf23c1e0b0ec8c7c86296dfbc8675c1208a6565169f704281d2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 19611, "end": 20847, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "f45ed43c-639c-43d2-92bb-2861fb93540a", "3": "aadcac5b-ab84-46b0-a7e2-501738a67229"}}, "__type__": "1"}, "aadcac5b-ab84-46b0-a7e2-501738a67229": {"__data__": {"text": "               \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dA\",\n                \"checksum\": 1592866325\n            },\n            \"manifest\": {\n                \"name\": \"CryptoLib\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"ripemd160\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"sha256\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n     ", "doc_id": "aadcac5b-ab84-46b0-a7e2-501738a67229", "embedding": null, "doc_hash": "61428d285b44dc11986762785723041e2cf0e420f77d3dfd00e939d87d2575a2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 20844, "end": 22103, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "6afc5f2c-d05e-4327-83d4-24365b8c840f", "3": "7a1365db-255b-4f89-8825-2c7083c74855"}}, "__type__": "1"}, "7a1365db-255b-4f89-8825-2c7083c74855": {"__data__": {"text": "             ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"verifyWithECDsa\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"message\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"pubkey\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"signature\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"curve\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 14,\n                            \"safe\": true\n         ", "doc_id": "7a1365db-255b-4f89-8825-2c7083c74855", "embedding": null, "doc_hash": "b12cea8afcdec132ff0d3a6544bc0dda724cf7c9c60c2a9d5ad04d5c38f04df9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 22112, "end": 23309, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "aadcac5b-ab84-46b0-a7e2-501738a67229", "3": "16967394-98f3-4a8b-8dad-1bacf1a6c702"}}, "__type__": "1"}, "16967394-98f3-4a8b-8dad-1bacf1a6c702": {"__data__": {"text": "      \"safe\": true\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -4,\n            \"hash\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dA\",\n                \"checksum\": 529571427\n            },\n            \"manifest\": {\n                \"name\": \"LedgerContract\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"currentHash\",\n                            \"parameters\": [],\n                            \"returntype\": \"Hash256\",\n                            \"offset\": 0,\n                            \"safe\": true\n     ", "doc_id": "16967394-98f3-4a8b-8dad-1bacf1a6c702", "embedding": null, "doc_hash": "c1925740d1ea72319180350042f464182bacd252e22a3f8ea1ac028eddb7fe7d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 23301, "end": 24638, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "7a1365db-255b-4f89-8825-2c7083c74855", "3": "6138e236-21f6-4060-b497-da9743df7bb7"}}, "__type__": "1"}, "6138e236-21f6-4060-b497-da9743df7bb7": {"__data__": {"text": "          \"safe\": true\n                        },\n                        {\n                            \"name\": \"currentIndex\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getBlock\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"indexOrHash\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getTransaction\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"hash\",\n                                    \"type\": \"Hash256\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n             ", "doc_id": "6138e236-21f6-4060-b497-da9743df7bb7", "embedding": null, "doc_hash": "6d8f48e448d22978e4676184328c0493401d36f78bccf9e4c0073a7192b59df1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 24639, "end": 25861, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "16967394-98f3-4a8b-8dad-1bacf1a6c702", "3": "f41d92b0-a15c-4564-8f0c-56dc0a199056"}}, "__type__": "1"}, "f41d92b0-a15c-4564-8f0c-56dc0a199056": {"__data__": {"text": "\"Array\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getTransactionFromBlock\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"blockIndexOrHash\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"txIndex\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getTransactionHeight\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"hash\",\n                                    \"type\": \"Hash256\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                         ", "doc_id": "f41d92b0-a15c-4564-8f0c-56dc0a199056", "embedding": null, "doc_hash": "d6a1ea17dabcb74fdf57ffad765174e42aee62c1b989527f181b4419308a8bc1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 25865, "end": 27088, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "6138e236-21f6-4060-b497-da9743df7bb7", "3": "81babd30-2d69-414a-95ef-ceef73fe3d69"}}, "__type__": "1"}, "81babd30-2d69-414a-95ef-ceef73fe3d69": {"__data__": {"text": "                      \"offset\": 35,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -5,\n            \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 588003825\n            },\n            \"manifest\": {\n                \"name\": \"NeoToken\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [\n                    \"NEP-17\"\n                ],\n                \"abi\": {\n                    \"methods\": [\n                        {\n      ", "doc_id": "81babd30-2d69-414a-95ef-ceef73fe3d69", "embedding": null, "doc_hash": "f35a4863fbf6cc920b63b515e6486f5ddf14900bf1c7a443ff46fd40afc4217b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 27098, "end": 28406, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "f41d92b0-a15c-4564-8f0c-56dc0a199056", "3": "3e78087e-cd99-479f-838f-adb839761cae"}}, "__type__": "1"}, "3e78087e-cd99-479f-838f-adb839761cae": {"__data__": {"text": "            {\n                            \"name\": \"balanceOf\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"decimals\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getAccountState\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 14,\n                            \"safe\":", "doc_id": "3e78087e-cd99-479f-838f-adb839761cae", "embedding": null, "doc_hash": "74c25f24700815bf8ddb38fc68da3c1234a63d45f31852b8350955f2ff6c8178", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 28405, "end": 29625, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "81babd30-2d69-414a-95ef-ceef73fe3d69", "3": "01582b39-464f-4d6c-b21c-4c298875fd3a"}}, "__type__": "1"}, "01582b39-464f-4d6c-b21c-4c298875fd3a": {"__data__": {"text": "                 \"safe\": true\n                        },\n                        {\n                            \"name\": \"getCandidates\",\n                            \"parameters\": [],\n                            \"returntype\": \"Array\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getCommittee\",\n                            \"parameters\": [],\n                            \"returntype\": \"Array\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getGasPerBlock\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 35,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getNextBlockValidators\",\n                            \"parameters\": [],\n                            \"returntype\": \"Array\",\n                            \"offset\": 42,\n                            \"safe\": true\n                        },\n                        {\n                       ", "doc_id": "01582b39-464f-4d6c-b21c-4c298875fd3a", "embedding": null, "doc_hash": "211b7308e42618ccae2e7e464bf69ae1a207533036ee81b8af8a9388e3660147", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 29621, "end": 30882, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "3e78087e-cd99-479f-838f-adb839761cae", "3": "efe29999-5f48-4b6b-8cdd-5be8d2736c69"}}, "__type__": "1"}, "efe29999-5f48-4b6b-8cdd-5be8d2736c69": {"__data__": {"text": "                        \"name\": \"getRegisterPrice\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 49,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"registerCandidate\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"pubkey\",\n                                    \"type\": \"PublicKey\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 56,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setGasPerBlock\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"gasPerBlock\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 63,\n                            \"safe\": false\n          ", "doc_id": "efe29999-5f48-4b6b-8cdd-5be8d2736c69", "embedding": null, "doc_hash": "5dadd7fda48a9e00e9b5dc62d3107821ef4a61e1be60e9425691fe92ee207e61", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 30890, "end": 32131, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "01582b39-464f-4d6c-b21c-4c298875fd3a", "3": "d8f9bfc4-b4a4-419f-9adf-b764a0bb4e3c"}}, "__type__": "1"}, "d8f9bfc4-b4a4-419f-9adf-b764a0bb4e3c": {"__data__": {"text": "     \"safe\": false\n                        },\n                        {\n                            \"name\": \"setRegisterPrice\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"registerPrice\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 70,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"symbol\",\n                            \"parameters\": [],\n                            \"returntype\": \"String\",\n                            \"offset\": 77,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"totalSupply\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 84,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"transfer\",\n                            \"parameters\": [\n              ", "doc_id": "d8f9bfc4-b4a4-419f-9adf-b764a0bb4e3c", "embedding": null, "doc_hash": "4d46b1d82bad019b2f8ce67bbf1a0958a14c857131edecab4fbab33951f6e219", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 32119, "end": 33364, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "efe29999-5f48-4b6b-8cdd-5be8d2736c69", "3": "ef511a7b-074c-445e-9efb-7b9bbbcb5849"}}, "__type__": "1"}, "ef511a7b-074c-445e-9efb-7b9bbbcb5849": {"__data__": {"text": "\"parameters\": [\n                                {\n                                    \"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 91,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"unclaimedGas\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n         ", "doc_id": "ef511a7b-074c-445e-9efb-7b9bbbcb5849", "embedding": null, "doc_hash": "e89dbc9b1740b0f203bb0e485faa9606eaa0db9b8edeb9c6d6a065cf0f31e709", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 33363, "end": 34543, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "d8f9bfc4-b4a4-419f-9adf-b764a0bb4e3c", "3": "0ffd160e-5972-491e-9a56-a5943bb88684"}}, "__type__": "1"}, "0ffd160e-5972-491e-9a56-a5943bb88684": {"__data__": {"text": "   \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"end\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 98,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"unregisterCandidate\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"pubkey\",\n                                    \"type\": \"PublicKey\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 105,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"vote\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                      ", "doc_id": "0ffd160e-5972-491e-9a56-a5943bb88684", "embedding": null, "doc_hash": "e940123818506734680896762e5d4a895a36cbc7d888ab4e1569e599f0b1d314", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 34542, "end": 35747, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "ef511a7b-074c-445e-9efb-7b9bbbcb5849", "3": "8de592c0-ae47-4abd-870c-b9738bf50906"}}, "__type__": "1"}, "8de592c0-ae47-4abd-870c-b9738bf50906": {"__data__": {"text": "                             },\n                                {\n                                    \"name\": \"voteTo\",\n                                    \"type\": \"PublicKey\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 112,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Transfer\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                }\n                            ]\n                        }\n   ", "doc_id": "8de592c0-ae47-4abd-870c-b9738bf50906", "embedding": null, "doc_hash": "7c782021a4995938e654c0f05e2dc5cc8873acab75443c212c6db9d462f50b2b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 35765, "end": 36926, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "0ffd160e-5972-491e-9a56-a5943bb88684", "3": "925f8df6-ee64-4c86-8230-a4f779bfd462"}}, "__type__": "1"}, "925f8df6-ee64-4c86-8230-a4f779bfd462": {"__data__": {"text": "               }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -6,\n            \"hash\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 2663858513\n            },\n            \"manifest\": {\n                \"name\": \"GasToken\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [\n                    \"NEP-17\"\n                ],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"balanceOf\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n ", "doc_id": "925f8df6-ee64-4c86-8230-a4f779bfd462", "embedding": null, "doc_hash": "d5ea3132173b4ac004c3a4a52586e591ca623f28a05ce34a56b38cdb22e13d36", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 36925, "end": 38233, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "8de592c0-ae47-4abd-870c-b9738bf50906", "3": "7878c2ea-71f1-43d7-ae2e-dbf8503034b4"}}, "__type__": "1"}, "7878c2ea-71f1-43d7-ae2e-dbf8503034b4": {"__data__": {"text": "           \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"decimals\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"symbol\",\n                            \"parameters\": [],\n                            \"returntype\": \"String\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"totalSupply\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"transfer\",\n                            \"parameters\": [\n                     ", "doc_id": "7878c2ea-71f1-43d7-ae2e-dbf8503034b4", "embedding": null, "doc_hash": "7cf2a41ca3351854ceb9069225f77b3c74696680d94fe52cb8512f7d2c28dbd4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 38219, "end": 39462, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "925f8df6-ee64-4c86-8230-a4f779bfd462", "3": "5170f1d9-6325-4311-a9a3-194e841443be"}}, "__type__": "1"}, "5170f1d9-6325-4311-a9a3-194e841443be": {"__data__": {"text": "                              {\n                                    \"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 28,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Transfer\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"from\",\n                ", "doc_id": "5170f1d9-6325-4311-a9a3-194e841443be", "embedding": null, "doc_hash": "d39e076e8e1100556a8b73c6b3cd65145606469f903f70edd19769d621ff12d7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 39480, "end": 40642, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "7878c2ea-71f1-43d7-ae2e-dbf8503034b4", "3": "d2426a6e-0a5e-4b78-b2a2-f7ec2614ca48"}}, "__type__": "1"}, "d2426a6e-0a5e-4b78-b2a2-f7ec2614ca48": {"__data__": {"text": "\"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -7,\n            \"hash\": \"0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\":", "doc_id": "d2426a6e-0a5e-4b78-b2a2-f7ec2614ca48", "embedding": null, "doc_hash": "9c9da1caa68674dee03f16763bfa6498d461058e5ac90e3372c97060658696cc", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 40635, "end": 41788, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "5170f1d9-6325-4311-a9a3-194e841443be", "3": "9f371e19-c9a5-4955-a451-d0ce1d61eaff"}}, "__type__": "1"}, "9f371e19-c9a5-4955-a451-d0ce1d61eaff": {"__data__": {"text": "               \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dA\",\n                \"checksum\": 3443651689\n            },\n            \"manifest\": {\n                \"name\": \"PolicyContract\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"blockAccount\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getExecFeeFactor\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getFeePerByte\",\n                           ", "doc_id": "9f371e19-c9a5-4955-a451-d0ce1d61eaff", "embedding": null, "doc_hash": "02a9d453cc9293e7223d6342a4e74f86f57b92631ff8ab47287ae92a4f7e9861", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 41788, "end": 43074, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "d2426a6e-0a5e-4b78-b2a2-f7ec2614ca48", "3": "44127b92-25a3-4903-b77b-7379eed580ef"}}, "__type__": "1"}, "44127b92-25a3-4903-b77b-7379eed580ef": {"__data__": {"text": "                    \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getStoragePrice\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"isBlocked\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"setExecFeeFactor\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                   ", "doc_id": "44127b92-25a3-4903-b77b-7379eed580ef", "embedding": null, "doc_hash": "a804f7e78dc08c6350f67e7749a24d4148768e77f51964cffc211037f389530d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 43084, "end": 44313, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "9f371e19-c9a5-4955-a451-d0ce1d61eaff", "3": "2e94209e-590f-4038-aaf7-cb4ed306f58e"}}, "__type__": "1"}, "2e94209e-590f-4038-aaf7-cb4ed306f58e": {"__data__": {"text": "                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 35,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setFeePerByte\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 42,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setStoragePrice\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 49,\n                      ", "doc_id": "2e94209e-590f-4038-aaf7-cb4ed306f58e", "embedding": null, "doc_hash": "455b50edd8248dc888186f7905f67b68dee59acd2c879141d81a0d0c49327215", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 44314, "end": 45513, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "44127b92-25a3-4903-b77b-7379eed580ef", "3": "e420041b-b314-44fe-beff-fdc6900d2e60"}}, "__type__": "1"}, "e420041b-b314-44fe-beff-fdc6900d2e60": {"__data__": {"text": "                         \"safe\": false\n                        },\n                        {\n                            \"name\": \"unblockAccount\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 56,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -8,\n            \"hash\": \"0x49cf4e5378ffcd4dec034fd98a174c5491e395e2\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\":", "doc_id": "e420041b-b314-44fe-beff-fdc6900d2e60", "embedding": null, "doc_hash": "205415594f013cdcef496ebb866bc8ea2915d5fc1c595f87887e5a33eca95b96", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 45514, "end": 46760, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "2e94209e-590f-4038-aaf7-cb4ed306f58e", "3": "52581092-5c34-4234-b9ff-7751d80123b0"}}, "__type__": "1"}, "52581092-5c34-4234-b9ff-7751d80123b0": {"__data__": {"text": "               \"script\": \"EEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 983638438\n            },\n            \"manifest\": {\n                \"name\": \"RoleManagement\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"designateAsRole\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"role\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"nodes\",\n                                    \"type\": \"Array\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getDesignatedByRole\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"role\",\n                                    \"type\":", "doc_id": "52581092-5c34-4234-b9ff-7751d80123b0", "embedding": null, "doc_hash": "dbf4202d81e2db32b57e7a5f5e49cd2434ccee2300f6cb1a1d00697d7c52ebe0", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 46752, "end": 48006, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "e420041b-b314-44fe-beff-fdc6900d2e60", "3": "ad7a3653-3159-4520-8430-46d2bdd0cdf7"}}, "__type__": "1"}, "ad7a3653-3159-4520-8430-46d2bdd0cdf7": {"__data__": {"text": "                 \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"index\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Designation\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Role\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"BlockIndex\",\n                                    \"type\": \"Integer\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                    ", "doc_id": "ad7a3653-3159-4520-8430-46d2bdd0cdf7", "embedding": null, "doc_hash": "61e778a0e6f147ba463e26978922551198e0de358eb11525245de0d3b3ddaeee", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 48009, "end": 49188, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "52581092-5c34-4234-b9ff-7751d80123b0", "3": "b75a8bb7-a6a8-4c8f-83e3-5bd702f03e05"}}, "__type__": "1"}, "b75a8bb7-a6a8-4c8f-83e3-5bd702f03e05": {"__data__": {"text": "                       \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -9,\n            \"hash\": \"0xfe924b7cfe89ddd271abaf7210a80a7e11178758\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 2663858513\n            },\n            \"manifest\": {\n                \"name\": \"OracleContract\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"finish\",\n                            \"parameters\": [],\n                            \"returntype\": \"Void\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getPrice\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                           ", "doc_id": "b75a8bb7-a6a8-4c8f-83e3-5bd702f03e05", "embedding": null, "doc_hash": "add3281d1eb99ca5239123e08bc60561358663fe20b3ca4c453a5ffb536315d9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 49196, "end": 50524, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "ad7a3653-3159-4520-8430-46d2bdd0cdf7", "3": "f43bbe81-3054-4aa1-9c6a-bb9685619a61"}}, "__type__": "1"}, "f43bbe81-3054-4aa1-9c6a-bb9685619a61": {"__data__": {"text": "                    \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"request\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"url\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"filter\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"callback\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"userData\",\n                                    \"type\": \"Any\"\n                                },\n                                {\n                                    \"name\": \"gasForResponse\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                           ", "doc_id": "f43bbe81-3054-4aa1-9c6a-bb9685619a61", "embedding": null, "doc_hash": "8cf6c5fe026bbaec2bee09f0e30b70379f21bc2f97c9380d3099a39ba26963f5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 50525, "end": 51687, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "b75a8bb7-a6a8-4c8f-83e3-5bd702f03e05", "3": "d64960f1-2ec7-4c81-8cbc-54f59fe78e9f"}}, "__type__": "1"}, "d64960f1-2ec7-4c81-8cbc-54f59fe78e9f": {"__data__": {"text": "                    \"returntype\": \"Void\",\n                            \"offset\": 14,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setPrice\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"price\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 21,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"verify\",\n                            \"parameters\": [],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"OracleRequest\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Id\",\n                              ", "doc_id": "d64960f1-2ec7-4c81-8cbc-54f59fe78e9f", "embedding": null, "doc_hash": "a025e7d2a625396eea44f76c238f23ec82da8782fc6f2f8b47cf5af46d1522f4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 51688, "end": 52898, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "f43bbe81-3054-4aa1-9c6a-bb9685619a61", "3": "386e8535-1601-4a18-9d5c-f5d4cae2545a"}}, "__type__": "1"}, "386e8535-1601-4a18-9d5c-f5d4cae2545a": {"__data__": {"text": "                         \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"RequestContract\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"Url\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"Filter\",\n                                    \"type\": \"String\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"OracleResponse\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Id\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"OriginalTx\",\n                                    \"type\": \"Hash256\"\n                                }\n                    ", "doc_id": "386e8535-1601-4a18-9d5c-f5d4cae2545a", "embedding": null, "doc_hash": "fa01cc2e3a9e7fbd04bab97ee3e12eef4ce7289ea0195a30599fe531df4a7b29", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 52899, "end": 54065, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "d64960f1-2ec7-4c81-8cbc-54f59fe78e9f", "3": "5d3ea744-ab65-4d6c-992f-7005090f42dc"}}, "__type__": "1"}, "5d3ea744-ab65-4d6c-992f-7005090f42dc": {"__data__": {"text": "                           ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        }\n    ]\n}\n```\n\n", "doc_id": "5d3ea744-ab65-4d6c-992f-7005090f42dc", "embedding": null, "doc_hash": "7f01a835e6d60065de61ed914f85785979e98e4f9f7a0f8ef0cd5da542a2d8e1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}, "node_info": {"start": 54046, "end": 54479, "_node_type": "1"}, "relationships": {"1": "a654c63c595171096a6b6736d27ddb04df37b6e2", "2": "386e8535-1601-4a18-9d5c-f5d4cae2545a"}}, "__type__": "1"}, "90c73496-a497-4ae2-924d-751b9fe98af4": {"__data__": {"text": "# getnep11balances Method\n\nReturns the balance of all NEP11 assets in the specified address.\n\n> [!Note]\n>\nYou must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\naddress: The address that you want to query balance.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep11balances\",\n  \"params\": [\"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n        \"balance\": [\n            {\n                \"assethash\": \"0xb3b65e5c0d2af3f98cac6e80083f6c2b90476f40\",\n                \"tokens\": [\n                    {\n                        \"tokenid\": \"426c696e6420426f782032\",\n                        \"amount\": \"1\",\n                        \"lastupdatedblock\": 36653\n                    },\n                    {\n                        \"tokenid\": \"426c696e6420426f782033\",\n                        \"amount\": \"1\",\n                        \"lastupdatedblock\": 37100\n                    },\n                    {\n                        \"tokenid\": \"426c696e6420426f782031323635\",\n                        \"amount\": \"1\",\n                        \"lastupdatedblock\": 501483\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n> [!Note]\n>\n> - Only when your client synchronizes", "doc_id": "90c73496-a497-4ae2-924d-751b9fe98af4", "embedding": null, "doc_hash": "1da0f3f992681b8a1a5d36294a4a2349db4c0d4b513ed015b0f9e29e78d5dadf", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11balances.html"}, "node_info": {"start": 0, "end": 1867, "_node_type": "1"}, "relationships": {"1": "16b076dd76191d30f83f62b041355418f301160f", "3": "9f0757e4-09ae-4e68-8fb5-4269210d1eb2"}}, "__type__": "1"}, "9f0757e4-09ae-4e68-8fb5-4269210d1eb2": {"__data__": {"text": "[!Note]\n>\n> - Only when your client synchronizes to the block that the contract was deployed, execution of this API will return the correct value, otherwise execution of the API will result in an error. \n> - When the input parameter is a script hash of a non-NEP11 smart contract, execution of the API will result in an error. \n> - Make sure your client has been fully synchronized to the latest block height before using this API, otherwise the balance returned may not be up-to-date.\n\n", "doc_id": "9f0757e4-09ae-4e68-8fb5-4269210d1eb2", "embedding": null, "doc_hash": "2309b11ecb89dc59856c54c2a4c3905dbe118a376b6e06f91c3eb547a026f24d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11balances.html"}, "node_info": {"start": 1819, "end": 2306, "_node_type": "1"}, "relationships": {"1": "16b076dd76191d30f83f62b041355418f301160f", "2": "90c73496-a497-4ae2-924d-751b9fe98af4"}}, "__type__": "1"}, "b2eb8bdb-06a2-4f66-baf6-0af36e6e0d4a": {"__data__": {"text": "# getnep11properties Method\n\nGets the customized properties of the NEP-11 token, where the name, description, image, and tokenURI properties are automatically decoded by UTF8.\n\n> [!Note]\n>\n> You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- contract: The contract hash\n\n- tokenId: The  hex string of token id\n\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep11properties\",\n  \"params\": [\"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\"452023313032204e6f697a\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"name\": \"E #102 Noiz\",\n        \"owner\": \"wJjkrPCyCQ3Rbss9WN5CaocVhRs=\",\n        \"number\": \"Zg==\",\n        \"image\": \"https://neo.org/Noiz.png\",\n        \"video\": null\n    }\n}\n```\n\n\n\n", "doc_id": "b2eb8bdb-06a2-4f66-baf6-0af36e6e0d4a", "embedding": null, "doc_hash": "f67b473e97ddf9863f652197d95d47814d98639638c7fbab3d04d9db5da4f2a4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11properties.html"}, "node_info": {"start": 0, "end": 1017, "_node_type": "1"}, "relationships": {"1": "0ad6cbcb81b8b10208588d14dc652df545ad3720"}}, "__type__": "1"}, "83ee751f-4f36-4119-8005-4ee1077b91aa": {"__data__": {"text": "# getnep11transfers Method\n\nReturns all the NEP11 transaction information occurred in the specified address.\n\n> [!Note]\n>\n> You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- address: The address to query the transaction information.\n\n- startTime | endTime: Optional. The UTC timestamp which records the asset start or end  time (included).\n  - If start and end timestamps are specified, transactions occurred in the time range are returned.\n  - If only one timestamp is specified, transactions occurred since that time are returned.\n  - If not specified, transactions in recent seven days are returned.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep11transfers\",\n  \"params\": [\"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",1635146038919],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n        \"sent\": [\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 0,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420412023343838\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": \"NNNPy5qxVD9yW2BavkwLdDybbR88NdvaGi\",\n                \"amount\": \"1000\",\n                \"blockindex\": 540423,\n    ", "doc_id": "83ee751f-4f36-4119-8005-4ee1077b91aa", "embedding": null, "doc_hash": "c07a5b984884e5c2afed49005b3bc1ecf2847ee8225c53eadbe5e8b0248d7b1e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11transfers.html"}, "node_info": {"start": 0, "end": 2200, "_node_type": "1"}, "relationships": {"1": "d9e3ae301641eada53ae86f6cec29341d00e64a8", "3": "021ffb3b-90bc-45d1-a2c4-f9a380ef938f"}}, "__type__": "1"}, "021ffb3b-90bc-45d1-a2c4-f9a380ef938f": {"__data__": {"text": "       \"blockindex\": 540423,\n                \"transfernotifyindex\": 1,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420422023313734\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": \"NNNPy5qxVD9yW2BavkwLdDybbR88NdvaGi\",\n                \"amount\": \"10000\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 2,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420432023313238\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 3,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420442023363731\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 4,\n                \"txhash\":", "doc_id": "021ffb3b-90bc-45d1-a2c4-f9a380ef938f", "embedding": null, "doc_hash": "e49de6f335f84e8756dbe1ae4395ad89253c543541fef2d00e35f9169721612b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11transfers.html"}, "node_info": {"start": 2180, "end": 3680, "_node_type": "1"}, "relationships": {"1": "d9e3ae301641eada53ae86f6cec29341d00e64a8", "2": "83ee751f-4f36-4119-8005-4ee1077b91aa", "3": "61c60970-0e96-454f-97c7-9f98f1625a8b"}}, "__type__": "1"}, "61c60970-0e96-454f-97c7-9f98f1625a8b": {"__data__": {"text": "               \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420452023353832\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 5,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e74204620233736\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 6,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420472023333534\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 7,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\":", "doc_id": "61c60970-0e96-454f-97c7-9f98f1625a8b", "embedding": null, "doc_hash": "dad8c489512fe8988e37586daade38e731c35224a5146d5a0224ee4ba8e8bd2a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11transfers.html"}, "node_info": {"start": 3693, "end": 5180, "_node_type": "1"}, "relationships": {"1": "d9e3ae301641eada53ae86f6cec29341d00e64a8", "2": "021ffb3b-90bc-45d1-a2c4-f9a380ef938f", "3": "0cefb193-cc32-4457-b77a-aa21ba888ed7"}}, "__type__": "1"}, "0cefb193-cc32-4457-b77a-aa21ba888ed7": {"__data__": {"text": "               \"tokenid\": \"467261676d656e7420482023363432\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 8,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e742049202331323539\"\n            }\n        ],\n        \"received\": [\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 9,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"4e20233134204e65726f\"\n            }\n        ]\n    }\n}\n```\n\n", "doc_id": "0cefb193-cc32-4457-b77a-aa21ba888ed7", "embedding": null, "doc_hash": "a72d4280fe6e4a59e4536599e4c76a3661950df0467b3f045a3a1e3a9e6e45ca", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11transfers.html"}, "node_info": {"start": 5164, "end": 6196, "_node_type": "1"}, "relationships": {"1": "d9e3ae301641eada53ae86f6cec29341d00e64a8", "2": "61c60970-0e96-454f-97c7-9f98f1625a8b"}}, "__type__": "1"}, "0952cc31-144f-4c17-87e5-9e012da4aa5b": {"__data__": {"text": "# getnep17balances Method\n\nReturns the balance of all NEP17 assets in the specified address.\n\n> [!Note]\n>\n> You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\naddress: The address that you want to query balance.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep17balances\",\n  \"params\": [\"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"balance\": [\n            {\n                \"assethash\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"amount\": \"3000000100000000\",\n                \"lastupdatedblock\": 2\n            },\n            {\n                \"assethash\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"amount\": \"99999900\",\n                \"lastupdatedblock\": 2\n            }\n        ],\n        \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n    }\n}\n```\n\n\n\n> [!Note]\n> \n>- Only when your client synchronizes to the block that the contract was deployed, execution of this API will return the correct value, otherwise execution of the API will result in an error. \n> - When the input parameter is a script hash of a non-NEP17 smart contract, execution of the API will result in an error. \n>- Make sure your client has been fully synchronized to the latest block height before using this API, otherwise the balance returned may not be up-to-date.\n\n", "doc_id": "0952cc31-144f-4c17-87e5-9e012da4aa5b", "embedding": null, "doc_hash": "5dbeac7717961a6a81a0c69e6e2c71c3cd9a890b310f4ba094ff26e5fc770316", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17balances.html"}, "node_info": {"start": 0, "end": 1936, "_node_type": "1"}, "relationships": {"1": "3d1cfee582ca2798faf9ab1f8ed3d81e5d838c11"}}, "__type__": "1"}, "97c5fb85-5da1-4b3d-a009-d212522fae6f": {"__data__": {"text": "# getnep17transfers Method\n\nReturns all the NEP17 transaction information occurred in the specified address.\n\n> [!Note]\n>\n> You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- address: The address to query the transaction information.\n\n- startTime | endTime: Optional. The UTC timestamp which records the asset start or end  time (included).\n  - If start and end timestamps are specified, transactions occurred in the time range are returned.\n  - If only one timestamp is specified, transactions occurred since that time are returned.\n  - If not specified, transactions in recent seven days are returned.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\n##### Example 1 - Set the start time:\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep17transfers\",\n  \"params\": [\"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\", 0],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"sent\": [],\n        \"received\": [\n            {\n                \"timestamp\": 1612690497725,\n                \"assethash\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"100\",\n                \"blockindex\": 2,\n                \"transfernotifyindex\": 1,\n                \"txhash\": \"0x5f957960a782514d6587c445288ee1cca7d6b0f952edc204f14d9be83b8152ff\"\n            },\n            {\n                \"timestamp\": 1612690513541,\n                \"assethash\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"10000000000\",\n                \"blockindex\": 3,\n                \"transfernotifyindex\": 0,\n                \"txhash\":", "doc_id": "97c5fb85-5da1-4b3d-a009-d212522fae6f", "embedding": null, "doc_hash": "6cabdbdb6b3e153f2f72803955ae488e72de8f7fd418f0f8ec60795fc55da254", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17transfers.html"}, "node_info": {"start": 0, "end": 2228, "_node_type": "1"}, "relationships": {"1": "21f851e90403cd8766bf60670d89810100439105", "3": "93854574-6b68-4101-9120-45737c72c06d"}}, "__type__": "1"}, "93854574-6b68-4101-9120-45737c72c06d": {"__data__": {"text": "               \"txhash\": \"0xe42108b343626035cb51fbcb54949bb38aac50c8ba278841d304e9fdce0807ac\"\n            }\n        ],\n        \"address\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\"\n    }\n}\n```\n\n##### Example 2 - Set both timestamps:\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getnep17transfers\",\n    \"params\": [\"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\", 1611716619654, 2011716619654],\n    \"id\": 1\n}\n```\n\nResponse body: \n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"sent\": [],\n        \"received\": [\n            {\n                \"timestamp\": 1612690497725,\n                \"assethash\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"100\",\n                \"blockindex\": 2,\n                \"transfernotifyindex\": 1,\n                \"txhash\": \"0x5f957960a782514d6587c445288ee1cca7d6b0f952edc204f14d9be83b8152ff\"\n            },\n            {\n                \"timestamp\": 1612690513541,\n                \"assethash\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"10000000000\",\n                \"blockindex\": 3,\n                \"transfernotifyindex\": 0,\n                \"txhash\": \"0xe42108b343626035cb51fbcb54949bb38aac50c8ba278841d304e9fdce0807ac\"\n            }\n        ],\n        \"address\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\"\n    }\n}\n```", "doc_id": "93854574-6b68-4101-9120-45737c72c06d", "embedding": null, "doc_hash": "7660239b2c209615bba0a08ae08bde2aca34387fcb4459c50f8e3cb6db677552", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17transfers.html"}, "node_info": {"start": 2204, "end": 3670, "_node_type": "1"}, "relationships": {"1": "21f851e90403cd8766bf60670d89810100439105", "2": "97c5fb85-5da1-4b3d-a009-d212522fae6f"}}, "__type__": "1"}, "853be4b6-36d0-4c38-8252-303bda9c4045": {"__data__": {"text": "\ufeff# getnewaddress Method\n\nCreates a new address.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnewaddress\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"NeMDdPDC29BfayYF7xNvnCSfCq9Drh1xKX\"\n}\n```\n\nResponse Description:\n\nReturns the newly created address.", "doc_id": "853be4b6-36d0-4c38-8252-303bda9c4045", "embedding": null, "doc_hash": "5e6118b7b8b1b2b61aa37b5e1fcb61fa553757e07c56feb10b6d4761ff822a29", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnewaddress.html"}, "node_info": {"start": 0, "end": 559, "_node_type": "1"}, "relationships": {"1": "73be24af12777a8ce653fbcfc4e756ee2f4d8d36"}}, "__type__": "1"}, "b5725fa7-a722-44f0-a852-0dca0019c441": {"__data__": {"text": "# getnextblockvalidators Method\n\nGets the validators list of the next block.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnextblockvalidators\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": [\n    {\n      \"publickey\": \"03aa052fbcb8e5b33a4eefd662536f8684641f04109f1d5e69cdda6f084890286a\",\n      \"votes\": \"0\",\n      \"active\": true\n    }\n  ]\n}\n```\n\n`result` returns an array containing multiple validators. Every validator contains information about the public key, the votes, and whether it is a validator or not.\n\n> [!Note]\n>\n> The default vote of validator is 0 when voting has not started.", "doc_id": "b5725fa7-a722-44f0-a852-0dca0019c441", "embedding": null, "doc_hash": "7c4314b4933ee3acba17c1987f162e95f241769b62f7fa6729cf3f0a3ef81abb", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnextblockvalidators.html"}, "node_info": {"start": 0, "end": 816, "_node_type": "1"}, "relationships": {"1": "b108715d91d467c0b202d1d47cf665b15d4a37d1"}}, "__type__": "1"}, "8a886e87-5447-442e-a29d-b3651c9a0644": {"__data__": {"text": "\ufeff# getpeers Method\n\nGets a list of nodes that the node is currently connected/disconnected from.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getpeers\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"unconnected\": [],\n        \"bad\": [],\n        \"connected\": [\n            {\n                \"address\": \"47.90.28.99\",\n                \"port\": 21333\n            },\n            {\n                \"address\": \"47.90.28.99\",\n                \"port\": 22333\n            }\n        ]\n    }\n}\n```\n\nResponse Description:\n\n- Unconnected: Nodes that are not currently connected.\n\n- Bad: Nodes that are no longer connected.\n\n- Connected: Nodes to which you are currently connected.\n", "doc_id": "8a886e87-5447-442e-a29d-b3651c9a0644", "embedding": null, "doc_hash": "355c017a9e2df40f175914428bbc0be17b0f2130a6f86a3f228bfe8fded30534", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getpeers.html"}, "node_info": {"start": 0, "end": 904, "_node_type": "1"}, "relationships": {"1": "dd8dfae87073e39fe801c9efc37f087599f68034"}}, "__type__": "1"}, "7519699c-c11c-4bf0-8c15-e646c775b396": {"__data__": {"text": "# getproof Method\nGets proof by querying root hash, contract hash, and storage key.\n\n> [!Note]\n>\n> You must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- roothash: root hash of state root\n\n- scripthash: Contract script hash\n\n- key: key of the storage; Base64-encoded.\n\n## Configuration\n\nBefore you can invoke the getproof method you must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases), and then modify the following fields in the [StateService](https://github.com/neo-project/neo-modules/releases) config.json file\uff1a\n\n- FullState: Set to true, or the error message is returned as follows\uff1a\n\n  ```json\n  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n      \"code\": -100,\n      \"message\": \"Old state not supported\",\n      \"data\": \"   at Neo.Plugins.StateService.StatePlugin.GetProof(UInt256 root_hash, UInt160 script_hash, Byte[] key)\\r\\n   at Neo.Plugins.StateService.StatePlugin.GetProof(JArray _params)\\r\\n   at Neo.Plugins.RpcServer.ProcessRequest(HttpContext context, JObject request)\"\n    }\n  }\n  ```\n\n- Network: Set to the same value as `Network` in the Neo-cli config.json.\n\n- AutoVerify: Set whether to enable verification by default, and if yes, the default active wallet in Neo-cli is used as the verification node.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getproof\",\n  \"params\": [\"0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca\",\"0x79bcd398505eb779df6e67e4be6c14cded08e2f2\",\"Fw==\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"result\":", "doc_id": "7519699c-c11c-4bf0-8c15-e646c775b396", "embedding": null, "doc_hash": "2c9fe2807e9dcf5f16e2d8977de30d1d254c9e2e6056050fbb7731be374127a4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getproof.html"}, "node_info": {"start": 0, "end": 1821, "_node_type": "1"}, "relationships": {"1": "ed071685063a0930dd3a5411e1d04bba1fae7032", "3": "fffcf870-147d-4e53-9ce5-835677ddf37b"}}, "__type__": "1"}, "fffcf870-147d-4e53-9ce5-835677ddf37b": {"__data__": {"text": "   \"id\": \"1\",\n    \"result\": \"Bfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\"\n}\n```", "doc_id": "fffcf870-147d-4e53-9ce5-835677ddf37b", "embedding": null, "doc_hash": "ff8648d3976fe35d6cf9326424c7ce0dfcf6709eb76f3a216d92751cf8eb39bf", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getproof.html"}, "node_info": {"start": 1794, "end": 2586, "_node_type": "1"}, "relationships": {"1": "ed071685063a0930dd3a5411e1d04bba1fae7032", "2": "7519699c-c11c-4bf0-8c15-e646c775b396"}}, "__type__": "1"}, "01b41f93-d279-49b5-ae8d-173ea785f847": {"__data__": {"text": "\ufeff# getrawmempool Method\n\nObtains a list of confirmed / unconfirmed transactions in memory.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Examples\n\n##### Example 1 - Get verified transactions\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getrawmempool\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x9786cce0dddb524c40ddbdd5e31a41ed1f6b5c8a683c122f627ca4a007a7cf4e\",\n        \"0xb488ad25eb474f89d5ca3f985cc047ca96bc7373a6d3da8c0f192722896c1cd7\",\n        \"0xf86f6f2c08fbf766ebe59dc84bc3b8829f1053f0a01deb26bf7960d99fa86cd6\"\n    ]\n}\n```\n\nThese are the confirmed transactions received by nodes.\n\n##### Example 2 - Get verified and unverified transactions\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getrawmempool\",\n  \"params\": [true],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"height\": 5882071,\n    \"verified\": [\n      \"0x0c65fbfd2598aee5f30cd18f1264b458f1db137c4a460f4a174facb3f2d59d06\",\n      \"0xc8040c285aa495f5b5e5b3761fd9333899f4ed902951c46d86c3bbb1cb12f2c0\"\n    ],\n    \"unverified\": []\n  }\n}\n```", "doc_id": "01b41f93-d279-49b5-ae8d-173ea785f847", "embedding": null, "doc_hash": "cdd18fca1aad9b9885ec565500a35073fefde060b990fda02a88b510f44e0f63", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getrawmempool.html"}, "node_info": {"start": 0, "end": 1250, "_node_type": "1"}, "relationships": {"1": "e886e76ae030ff1f694d46fb4ad273fc73b1bd85"}}, "__type__": "1"}, "79134c3d-0ed2-46d4-8d7e-469289ae5db1": {"__data__": {"text": "\ufeff# getrawtransaction Method\n\nReturns the corresponding transaction information based on the specified hash value.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n* txid: Transaction ID\n\n* verbose: Optional. The default value is false. \n  * When verbose is false, serialized information of the block is returned in a Base64-encoded string. If you need the detailed information, use the SDK for deserialization. \n  * When verbose is true or 1, detailed information of the block is returned in Json format string.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getrawtransaction\",\n  \"params\": [\"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\"]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"AIsJtw60lJgAAAAAAAjoIwAAAAAACxcAAAL6ifssFN8PWd3fBPblZRfys0qu6wDitlMicpPpnE8pBtU1U6u0pnLfhgEAXwsDAOQLVAIAAAAMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBTitlMicpPpnE8pBtU1U6u0pnLfhhTAHwwIdHJhbnNmZXIMFCizratyafnCGB2zy3Qev1UZMOJwQWJ9W1I5AkIMQLfVkTWSIgU9qfupqX+H0ViwPYtOTot/SbQptuHUYTFSpMB/J7sEOPITKV9HnT8BU1CSv6D6NdcwcZzEXgxRgFApDCECztQyOX3cRO26AxwLw7kz8o/dlnd5LXsg5sA23aqs8eILQZVEDXhCDED8PagPv03pnEbsxUY7XgFk/qniHcha36hDCzZsmaJkpFg5vbgxk5+QE46K0GFsNpsqDJHNToGD9jeXsPzSvD5TKxEMIQLO1DI5fdxE7boDHAvDuTPyj92Wd3kteyDmwDbdqqzx4hELQRON768=\"\n}\n```\n\nRequest body:\n\nWhen verbose = true, the result in Json format is returned:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getrawtransaction\",\n  \"params\": [\"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\", true],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\",\n        \"size\": 386,\n        \"version\": 0,\n        \"nonce\": 246876555,\n        \"sender\":", "doc_id": "79134c3d-0ed2-46d4-8d7e-469289ae5db1", "embedding": null, "doc_hash": "620fdb288e24747537c06853a84739b354ca5cb9030aad591af471b889b77202", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getrawtransaction.html"}, "node_info": {"start": 0, "end": 1922, "_node_type": "1"}, "relationships": {"1": "1af4005b46cb830c2958beed3c26210a0b599ce9", "3": "585b8bbe-22c9-42a0-897c-3cdaf8ed6189"}}, "__type__": "1"}, "585b8bbe-22c9-42a0-897c-3cdaf8ed6189": {"__data__": {"text": "246876555,\n        \"sender\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n        \"sysfee\": \"0.0999954\",\n        \"netfee\": \"0.0235316\",\n        \"validuntilblock\": 5899,\n        \"signers\": [\n            {\n                \"account\": \"0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\",\n                \"scopes\": \"None\"\n            },\n            {\n                \"account\": \"0x86df72a6b4ab5335d506294f9ce993722253b6e2\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"attributes\": [],\n        \"script\": \"CwMA5AtUAgAAAAwU+on7LBTfD1nd3wT25WUX8rNKrusMFOK2UyJyk+mcTykG1TVTq7Smct+GFMAfDAh0cmFuc2ZlcgwUKLOtq3Jp+cIYHbPLdB6/VRkw4nBBYn1bUjk=\",\n        \"witnesses\": [\n            {\n                \"invocation\": \"DEC31ZE1kiIFPan7qal/h9FYsD2LTk6Lf0m0Kbbh1GExUqTAfye7BDjyEylfR50/AVNQkr+g+jXXMHGcxF4MUYBQ\",\n                \"verification\": \"DCECztQyOX3cRO26AxwLw7kz8o/dlnd5LXsg5sA23aqs8eILQZVEDXg=\"\n            },\n            {\n                \"invocation\": \"DED8PagPv03pnEbsxUY7XgFk/qniHcha36hDCzZsmaJkpFg5vbgxk5+QE46K0GFsNpsqDJHNToGD9jeXsPzSvD5T\",\n                \"verification\": \"EQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n            }\n        ],\n        \"blockhash\": \"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\",\n        \"confirmations\": 26,\n        \"blocktime\": 1612687482881\n    }\n}\n```\n", "doc_id": "585b8bbe-22c9-42a0-897c-3cdaf8ed6189", "embedding": null, "doc_hash": "7f42b32d7ba2c4d836bae587169e81b162173d1c86fe0f85a9f4335121c40355", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getrawtransaction.html"}, "node_info": {"start": 1894, "end": 3230, "_node_type": "1"}, "relationships": {"1": "1af4005b46cb830c2958beed3c26210a0b599ce9", "2": "79134c3d-0ed2-46d4-8d7e-469289ae5db1"}}, "__type__": "1"}, "88acd8a0-9179-43bf-a3f5-2415279d3c72": {"__data__": {"text": "# getstate Method\n\nQueries the state by the root hash, contract hash and storage key.\n\n> [!Note]\n>\n> You must install the plugin  [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameters\n\n- roothash: The root hash of state root.\n\n- scripthash: The contract hash.\n\n- key: The storage key value encoded by Base64.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getstate\",\n  \"params\": [\"0xec31cdb14da4143e2ab471a8b5812d895b88fc1c12d54e112791491feca9b5f4\",\"0xb1fbb6b0096919071769906bb23b2ca2ec51eea7\",\"AQFM8QSIkBuHVYOd2kiRmQXXOI833w==\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"nMJ4AQ==\"\n}\n```", "doc_id": "88acd8a0-9179-43bf-a3f5-2415279d3c72", "embedding": null, "doc_hash": "07137a490d732b4549e4c9f62060d0b1dad3c20082ecfa534273c2b2f110af5a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstate.html"}, "node_info": {"start": 0, "end": 795, "_node_type": "1"}, "relationships": {"1": "7d2041a9ae8c38b71a844e97afb4a28f56928e27"}}, "__type__": "1"}, "8af5fb59-82fc-48c1-88e3-ab8da09e1ccb": {"__data__": {"text": "# getstateheight Method\nQueries the stateroot height.\n\n> [!Note]\n>\n> You must install the plugin  [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getstateheight\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"result\": {\n        \"localrootindex\": 602,\n        \"validatedrootindex\": 602\n    }\n}\n```", "doc_id": "8af5fb59-82fc-48c1-88e3-ab8da09e1ccb", "embedding": null, "doc_hash": "77d5fdb2a99a637b745bb22d016d7da85e50d56171d10a17f56d50182570b29b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstateheight.html"}, "node_info": {"start": 0, "end": 546, "_node_type": "1"}, "relationships": {"1": "84de05c401b7d859973822ad2a5399befa294af3"}}, "__type__": "1"}, "5e0b43df-586b-4be9-baf9-5c1e2ffdd9af": {"__data__": {"text": "# getstateroot Method\n\nQueries the state root by the block height.\n\n> [!Note]\n>\n> You must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- index: Block index\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getstateroot\",\n  \"params\": [160],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"version\": 0,\n        \"index\": 160,\n        \"roothash\": \"0x3d3f099e05cf92c018703ab309d8643c30a0ab6b2b008cc6fe80869b1a350c31\",\n        \"witnesses\": []\n    }\n}\n```", "doc_id": "5e0b43df-586b-4be9-baf9-5c1e2ffdd9af", "embedding": null, "doc_hash": "c107658c9ff6aa22b291b8795eb77187f7040929cf2de24ae8db8b91841fad48", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstateroot.html"}, "node_info": {"start": 0, "end": 697, "_node_type": "1"}, "relationships": {"1": "e2169ce03382e317fb34aff819120f5c83eebc3c"}}, "__type__": "1"}, "86564024-4379-4c58-92e6-609287d61e9c": {"__data__": {"text": "\ufeff# getstorage Method\n\nReturns the stored value according to the contract script hash and the stored key. Both key and value are Base64-encoded.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n### Parameter Description\n\n* script_hash: Contract script hash or contract ID\n\n* key: The key to look up in storage (Base64-encoded)\n\n## Example\n\nRequest body:\n\n`hello` is converted into the Base64 string `aGVsbG8=`.\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getstorage\",\n    \"params\": [\"0x99042d380f2b754175717bb932a911bc0bb0ad7d\", \"aGVsbG8=\"],\n    \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"d29ybGQ=\"\n}\n```\n\n`d29ybGQ=` is converted into the string `world`.", "doc_id": "86564024-4379-4c58-92e6-609287d61e9c", "embedding": null, "doc_hash": "bcd6fa34e5a184b6cc3be305c4c905e680e60702a2474cb3282537a0906df1c2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstorage.html"}, "node_info": {"start": 0, "end": 799, "_node_type": "1"}, "relationships": {"1": "33c817d7a7fefc7498f217f140230a174d10b37d"}}, "__type__": "1"}, "2a366114-ca9b-43d4-a115-6218f4de9859": {"__data__": {"text": "\ufeff# gettransactionheight method\n\nReturns the transaction height with the specified transaction hash.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\ntxid: Transaction id.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"gettransactionheight\",\n  \"params\": [\"0x57280b29c2f9051af6e28a8662b160c216d57c498ee529e0cf271833f90e1a53\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": 14\n}\n\n```\n", "doc_id": "2a366114-ca9b-43d4-a115-6218f4de9859", "embedding": null, "doc_hash": "61d1e2ffac7fbc56a891347a33b95088a10bef83c6eb3af66fc3978dacdeaec3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/gettransactionheight.html"}, "node_info": {"start": 0, "end": 571, "_node_type": "1"}, "relationships": {"1": "f807e1c4539d7788d4cfa7a221c5d27e87b92120"}}, "__type__": "1"}, "241c4788-fd72-44df-879c-27ed90624559": {"__data__": {"text": "# getunclaimedgas method\n\nReturns the unclaimed GAS with the specified address.\n\n> [!Note]\n>\n> Before you can invoke this method you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases).\n\n## Parameter Description\n\naddress: Specified address.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getunclaimedgas\",\n  \"params\": [\"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"unclaimed\": \"499999500\",\n        \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n    }\n}\n```", "doc_id": "241c4788-fd72-44df-879c-27ed90624559", "embedding": null, "doc_hash": "b8af7fdf09233e8ff5896886b79a07a24306f915f70438599a42c2c1c3addb8b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getunclaimedgas.html"}, "node_info": {"start": 0, "end": 614, "_node_type": "1"}, "relationships": {"1": "2d66f9788377ccce186d4bcd4b7f375f9d5784f9"}}, "__type__": "1"}, "1cc2df44-a2b4-4620-ad42-94cf44c6d962": {"__data__": {"text": "\ufeff\ufeff# getversion Method\n\nReturns the version information of the node.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getversion\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"tcpport\": 10333,\n        \"wsport\": 10334,\n        \"nonce\": 1930156121,\n        \"useragent\": \"/Neo:3.0.3/\",\n        \"protocol\": {\n            \"addressversion\": 53,\n            \"network\": 860833102,\n            \"validatorscount\": 7,\n            \"msperblock\": 15000,\n            \"maxtraceableblocks\": 2102400,\n            \"maxvaliduntilblockincrement\": 5760,\n            \"maxtransactionsperblock\": 512,\n            \"memorypoolmaxtransactions\": 50000,\n            \"initialgasdistribution\": 5200000000000000\n        }\n    }\n}\n```\n", "doc_id": "1cc2df44-a2b4-4620-ad42-94cf44c6d962", "embedding": null, "doc_hash": "c5f0e3f1a8d6ae096f8e014fef12f991fd4ec77da11768d7c581b246b20951ab", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getversion.html"}, "node_info": {"start": 0, "end": 938, "_node_type": "1"}, "relationships": {"1": "9b1c7acbc35e4298a358d10e02219986d96768e9"}}, "__type__": "1"}, "f422deb4-ddc7-47c6-ac74-405899e7b92a": {"__data__": {"text": "\ufeff# getwalletbalance Method\n\nReturns the balance of the corresponding asset in the wallet, based on the specified asset number. This method applies to the contract assets that conform to [NEP-17](https://github.com/neo-project/proposals/blob/1937ff56a09ac7e8380637e61129e9359e01a1b6/nep-17.mediawiki) standards.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Parameter Description\n\nAsset_id: Asset ID (asset identifier), which is the script hash of the contract for contract assets.\n\nFor example, NEO is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n\nGas is 0xd2a4cff31913016155e38e474a2c06d08be276cf\n\nYou can query asset ID using the [CLI command](../../../../node/cli/cli.md) `list asset` or using the blockchain browser.\n\n## Example\n\n> [!Note]\n>\n> Make sure your client has been fully synchronized to the latest block height before using this API, otherwise the balance returned may not be up-to-date.\n\nExample: querying the balance of NEP-17 assets.\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getwalletbalance\",\n  \"params\": [\"0xd2a4cff31913016155e38e474a2c06d08be276cf\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"balance\": \"3000014661474560\"\n    }\n}\n```\n\nResponse Description:\n\nbalance: the balance of the asset in the wallet. Since the NEP-17 assets adopt the balance system rather than the UTXO system, there is no `confirmed` in the returned result and the balance is the actual available balance.\n\n> [!Note]\n>\n> * Only when your client synchronizes to the block that the contract was deployed, execution of this API will return the correct value, otherwise execution of the API will result in an error.\n> * When the input parameter is a script hash of a non-NEP-17 smart contract, execution of the API will result in an error.\n", "doc_id": "f422deb4-ddc7-47c6-ac74-405899e7b92a", "embedding": null, "doc_hash": "be16f69cf2bf663685a2732b70a639127f55b105586e9d27a274f253f0876300", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getwalletbalance.html"}, "node_info": {"start": 0, "end": 1981, "_node_type": "1"}, "relationships": {"1": "9b22021d04746de34e03fc3d92ad21d74a740a8a"}}, "__type__": "1"}, "0c632084-2b8a-4e96-85cf-e5ecebf3c761": {"__data__": {"text": "\ufeff# getwalletunclaimedgas Method\n\nGets the amount of unclaimed GAS in the wallet.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getwalletunclaimedgas\",\n  \"params\": [\"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"750000000\"\n}\n```\n\nResponse description:\n\nReturns the unclaimed GAS amount.", "doc_id": "0c632084-2b8a-4e96-85cf-e5ecebf3c761", "embedding": null, "doc_hash": "ba3bf2fef4503c22b7340393e966287804dadb1834a06a59fef8a863c43772a5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getwalletunclaimedgas.html"}, "node_info": {"start": 0, "end": 610, "_node_type": "1"}, "relationships": {"1": "38dad9a9fb22cd68b2340db09b820797a2a9b1b9"}}, "__type__": "1"}, "bb4e336b-5bd7-461c-9903-dcc16f5f41e6": {"__data__": {"text": "\ufeff# importprivkey Method\n\nImports the private key to the wallet.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n### Parameter Description\n\nkey: The WIF-format private key.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"importprivkey\",\n  \"params\": [\"KwYRSjqmEhK4nPuUZZz1LEUSxvSzSRCv3SVePoe67hjcdPGLRJY5\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NPvKVTGZapmFWABLsyvfreuqn73jCjJtN1\",\n        \"haskey\": true,\n        \"label\": null,\n        \"watchonly\": false\n    }\n}\n```\n\nResponse description:\n\nReturns the address corresponding to the key.", "doc_id": "bb4e336b-5bd7-461c-9903-dcc16f5f41e6", "embedding": null, "doc_hash": "cab8308d56499f0c7f53249370a6ea35e337b76025d1fd29eadf1d4333833d8d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/importprivkey.html"}, "node_info": {"start": 0, "end": 803, "_node_type": "1"}, "relationships": {"1": "3d9cc6525542d12c0a26a430c5424949478e2fbf"}}, "__type__": "1"}, "91370e5f-d65c-425a-8743-f8c1bd85da59": {"__data__": {"text": "# invokecontractverify Method\n\nInvokes the contract method `Verify`. Unlike the method `invokefunction` which executes the contract by the Application trigger, `invokecontractverify` executes the contract by the Verification trigger and can pass parameters as `params` and `signers`. Specific parameter type and number depend on the smart contract to invoke.\n\n> [!Note]\n>\n> - This method is used to test your VM script as if they ran on the blockchain at that point in time. This RPC call does not affect the blockchain in any way.\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- scripthash: Smart contract scripthash.\n\n- params: The parameters to be passed to the smart contract operation. \n\n- signers: Optional. List of contract signature accounts.\n  * account: signature account\n  * scopes: signature's valid scopes, allowed values: FeeOnly, CalledByEntry, CustomContracts, CustomGroups, Global\n  * allowedcontracts: contracts of the signature can take effect, if scopes is CustomContracts\n  * allowedgroups: pubkeys of the signature can take effect, if scopes is CustomGroups\n  \n  > [!Note]\n  >\n  > You need to use the proper byte order of the address passed according to its data type. If the data type is Hash160, use the big endian script hash; if the data type is ByteArray, use the little endian scripthash.\n  \n  For example:\n  \n    ```json\n    {\n      \"type\": \"String\",\n      \"value\": \"Hello\"\n    }\n  \n    {\n      \"type\": \"Hash160\",\n      \"value\": \"0xf621168b1fce3a89c33a5f6bcf7e774b4657031c\"\n    }\n  \n    {\n      \"type\": \"ByteArray\",\n      \"value\": \"7472616e73666572\"\n    }\n    ```\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokecontractverify\",\n  \"params\": [ \n  \"0x92f5c79b88560584a900cfec15b0e00dc4d58b54\", \n  [ ],\n  [\n      {\n        \"account\": \"NTpqYncLsNNsMco71d9qrd5AWXdCq8YLAA\",\n        \"scopes\": \"CalledByEntry\"\n      }\n  ]\n],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"script\": \"VgEMFFbIjRQK0swPKQN90Qp/AGCitShcYEBXAANAQZv2Z84MBWhlbGxvDAV3b3JsZFNB5j8YhEBXAQAMFFbIjRQK0swPKQN90Qp/AGCitShcQfgn7IxwaEA=\",\n    \"state\": \"HALT\",\n    \"gasconsumed\": \"1017810\",\n    \"exception\": null,\n    \"stack\": [\n      {\n        \"type\": \"Boolean\",\n        \"value\": true\n      }\n    ]\n  }\n}\n```\n\nResponse description:\n\n- script: the invocation script of the contract. You can convert it to OpCode at [Neo 3.0 data", "doc_id": "91370e5f-d65c-425a-8743-f8c1bd85da59", "embedding": null, "doc_hash": "d647562d3c0739a5be7e6056054a6e3c967f7a3abf0f649bf99f360b0284524e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokecontractverify.html"}, "node_info": {"start": 0, "end": 2502, "_node_type": "1"}, "relationships": {"1": "1e6d0ae10cb750cd3e177cf7875e04b4d6ff2d62", "3": "6e03191b-cc83-4afd-a495-14d6b2f4380f"}}, "__type__": "1"}, "6e03191b-cc83-4afd-a495-14d6b2f4380f": {"__data__": {"text": "of the contract. You can convert it to OpCode at [Neo 3.0 data converter](https://neo.org/converter).\n- state: `HALT` means the vm executed successfully, and`FAULT` means the vm exited due to an exception. \n- gasconsumed: the system fee consumed for invocation.\n- stack: the contract execution result. If the value is String or ByteArray, it is encoded by Base64.", "doc_id": "6e03191b-cc83-4afd-a495-14d6b2f4380f", "embedding": null, "doc_hash": "64f6f117c9e4fb15e117d36009b1cfe7b719e6e147852360176837987bb771ba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokecontractverify.html"}, "node_info": {"start": 2440, "end": 2803, "_node_type": "1"}, "relationships": {"1": "1e6d0ae10cb750cd3e177cf7875e04b4d6ff2d62", "2": "91370e5f-d65c-425a-8743-f8c1bd85da59"}}, "__type__": "1"}, "cad3ffd2-07e8-42ff-86a7-9359631e9974": {"__data__": {"text": "\ufeff\ufeff\ufeff# invokefunction Method\n\nInvokes a smart contract with its scripthash based on the specified operation and parameters and returns the result.\n\n> [!Note]\n>\n> - This method is used to test your VM script as if they ran on the blockchain at that point in time. This RPC call does not affect the blockchain in any way.\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n* scripthash: Smart contract scripthash. You need to use the proper byte order of the address passed according to its data type. If the data type is Hash160, use the big endian scripthash; if the data type is ByteArray, use the little endian scripthash.\n\n* operation: The operation name (string)\n\n* params: Optional. The parameters to be passed into the smart contract operation\n\n* signers: Optional. List of contract signature accounts.\n\n  * account: signature account\n  * scopes: signature's valid scopes, allowed values are:\n    * None: Only transactions are signed and no contracts are allowed to use this signature.\n    * CalledByEntry: It only applies to the chain call entry. That is,  if the user invokes contract A, and then contract A calls contract B, only contract A can use the signature. It is recommended as the default value for the wallet.\n    * CustomContracts: Custom contract. The signature can be used in the specified contract.\n      It can be used in conjunction with CalledByEntry.\n    * CustomGroups: Custom contract groups that can be used in a specified contract group.\n      It can be used in conjunction with CalledByEntry.\n    * Global: Global. Global. The risk is extremely high because the contract may transfer all assets in the address. Only choose it when the contract is extremely trusted.\n  * allowedcontracts: contracts of the signature can take effect, if scopes is CustomContracts\n  * allowedgroups: pubkeys of the signature can take effect, if scopes is CustomGroups\n* use diagnostic: Whether to return the simulated invocation information and storage change information. The default value is `false`.\n> [!Note]\n>\n> You need to use the proper byte order of the address passed according to its data type. If the data type is Hash160, use the big endian script hash; if the data type is ByteArray, use the little endian scripthash.\n\nFor example:\n\n```json\n{\n  \"type\": \"String\",\n  \"value\": \"Hello\"\n}\n  \n{\n  \"type\": \"Hash160\",\n  \"value\": \"0xf621168b1fce3a89c33a5f6bcf7e774b4657031c\"\n}\n \n{\n  \"type\": \"ByteArray\",\n  \"value\": \"7472616e73666572\"\n}\n```\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n    \"transfer\",\n    [\n            {\n                \"type\": \"Hash160\",\n                \"value\": \"0xfa03cb7b40072c69ca41f0ad3606a548f1d59966\"\n            },\n            {\n                \"type\": \"Hash160\",\n                \"value\":", "doc_id": "cad3ffd2-07e8-42ff-86a7-9359631e9974", "embedding": null, "doc_hash": "7e29fecf392350727a12aaf38bbe0bcadf6e1b0c5f2a0b4a2417e725ded2feba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 0, "end": 2952, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "3": "618bf232-092d-4f60-98de-6075442a107f"}}, "__type__": "1"}, "618bf232-092d-4f60-98de-6075442a107f": {"__data__": {"text": "               \"value\": \"0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\"\n            },\n            {\n                \"type\": \"Integer\",\n                \"value\": \"10000\"\n            },\n            {\n                \"type\": \"String\",\n                \"value\": \"\"\n            }\n        ],\n        [\n            {\n                \"account\": \"0xfa03cb7b40072c69ca41f0ad3606a548f1d59966\",\n                \"scopes\": \"CalledByEntry\",\n                \"allowedcontracts\": [],\n                \"allowedgroups\": []\n            }\n        ],\n    true\n  ]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAABECcMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBRmmdXxSKUGNq3wQcppLAdAe8sD+hTAHwwIdHJhbnNmZXIMFMTiKascQ8IoLIUKuF3Y3n1ndaOhQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1490312\",\n        \"exception\": null,\n        \"notifications\": [\n            {\n                \"eventname\": \"Transfer\",\n                \"contract\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                \"state\": {\n                    \"type\": \"Array\",\n                    \"value\": [\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"ZpnV8UilBjat8EHKaSwHQHvLA/o=\"\n                        },\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\":", "doc_id": "618bf232-092d-4f60-98de-6075442a107f", "embedding": null, "doc_hash": "2d73e7a7a8b4476ac6fcfb902bc91fc93727a40ea99eee38d77391b6cf05def7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 2945, "end": 4327, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "2": "cad3ffd2-07e8-42ff-86a7-9359631e9974", "3": "b2cdd6f4-8606-4d54-a277-0f5000e98edb"}}, "__type__": "1"}, "b2cdd6f4-8606-4d54-a277-0f5000e98edb": {"__data__": {"text": "                 \"value\": \"+on7LBTfD1nd3wT25WUX8rNKrus=\"\n                        },\n                        {\n                            \"type\": \"Integer\",\n                            \"value\": \"10000\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"diagnostics\": {\n            \"invokedcontracts\": {\n                \"hash\": \"0x9cac876fcc1646f1f017aa49b1fbcf87bd37b043\",\n                \"call\": [\n                    {\n                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                        \"call\": [\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                           ", "doc_id": "b2cdd6f4-8606-4d54-a277-0f5000e98edb", "embedding": null, "doc_hash": "1c019fef6b525384e6fd5f411517ca11c52273cafee78b0fbd2f45d42b7053af", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 4328, "end": 5551, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "2": "618bf232-092d-4f60-98de-6075442a107f", "3": "5fc5a2cb-ae46-4497-ae04-b94ec55a9388"}}, "__type__": "1"}, "5fc5a2cb-ae46-4497-ae04-b94ec55a9388": {"__data__": {"text": "                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                                \"call\": [\n                                    {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    },\n                                    {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                                \"call\": [\n                                    {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    },\n                             ", "doc_id": "5fc5a2cb-ae46-4497-ae04-b94ec55a9388", "embedding": null, "doc_hash": "505a98b1fd4d7b119d0f678ed4b9ff88b43d43aca871e294096b46f32259aa22", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 5560, "end": 6733, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "2": "b2cdd6f4-8606-4d54-a277-0f5000e98edb", "3": "19b0d285-adfc-4f7e-8242-7bb31983ba8b"}}, "__type__": "1"}, "19b0d285-adfc-4f7e-8242-7bb31983ba8b": {"__data__": {"text": "                          {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"storagechanges\": [\n                {\n                    \"state\": \"Changed\",\n                    \"key\": \"BgAAAAEBZpnV8UilBjat8EHKaSwHQHvLA/o=\",\n                    \"value\": \"8CTJ5wda\"\n                },\n                {\n                    \"state\": \"Added\",\n                    \"key\": \"BgAAAAEB+on7LBTfD1nd3wT25WUX8rNKrus=\",\n                    \"value\": \"ECc=\"\n                }\n            ]\n        },\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": true\n            }\n        ],\n        \"tx\":", "doc_id": "19b0d285-adfc-4f7e-8242-7bb31983ba8b", "embedding": null, "doc_hash": "dfb48cbda339444b0dfd964bacfbddbd1dadc77795e13468194e7da68f99363b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 6734, "end": 7738, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "2": "5fc5a2cb-ae46-4497-ae04-b94ec55a9388", "3": "d311e4bd-55d1-4a2e-b37f-c0d0f4cf4ac0"}}, "__type__": "1"}, "d311e4bd-55d1-4a2e-b37f-c0d0f4cf4ac0": {"__data__": {"text": "       ],\n        \"tx\": \"AOaXOgSIvRYAAAAAAKzgAQAAAAAAesUGAAFmmdXxSKUGNq3wQcppLAdAe8sD+gEAWQwAARAnDBT6ifssFN8PWd3fBPblZRfys0qu6wwUZpnV8UilBjat8EHKaSwHQHvLA/oUwB8MCHRyYW5zZmVyDBTE4imrHEPCKCyFCrhd2N59Z3WjoUFifVtSAUIMQMTS2HRIO9gDxq/U/lqIB77dLBzVHT4cwKdvqoGOZqm4IoGqHbYzBSYHOPHWGNutWvkjCgIQGQFKK1JGyOR16LwoDCEDrQCtTQQyXXSsHZm3oRiqiAzP00uFPaW9tICYC3D7Bm9BVuezJw==\"\n    }\n}\n```\n\nResponse description:\n\n- script: the invocation script of the contract. You can analysis from https://neo.org/converter\n\n  ```\n   PUSHDATA1\n   PUSHINT16 10000\n   PUSHDATA1 0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\n   PUSHDATA1 0xfa03cb7b40072c69ca41f0ad3606a548f1d59966\n   PUSH4\n   PACK\n   PUSH15\n   PUSHDATA1 transfer\n   PUSHDATA1 0xa1a375677dded85db80a852c28c2431cab29e2c4\n   SYSCALL System.Contract.Call\n  ```\n\n- state:  `HALT` means the vm executed successfully, and`FAULT` means the vm exited due to an exception. \n\n- gasconsumed: the system fee consumed for invocation.\n\n- exception: The exception messages occurred during contract execution. It is `null` when there is no exception.\n\n- notifications: The event messages occurred during contract execution.  They can be checked by [getapplicationlog](./getapplicationlog.md) for on-chain transactions. \n\n- diagnostics: The process information and storage changes of the contract invocation. This request does not change the real storage on the blockchain, but only simulates the storage changes after the transaction is sent on the blockchain.  \n\n- stack: the contract execution result. If the value is String or ByteArray, it is encoded by Base64.\n\n- tx: the transaction's hex string of this invocation, need open wallet and added signers correctly, otherwise the string will not be returned.\n\n- pendingsignature: It is returned if the transaction requires multiple signatures and the currently open wallet does not include all accounts of signers.\n\n## About iterator\n\nIf the execution result of contract includes iterators, whether to return `session` is decided by the value of  `SessionEnabled` in `config.json` of the plugin `RpcServer`. If  `SessionEnabled` is `true`, `session` is returned to get further details of the Iterator. Otherwise, if  `SessionEnabled` is `false`, `session` is not returned.\n\nIn the following example,  `SessionEnabled` is `true`\uff1a\n\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"wh8MBnRva2VucwwU/+Ha24YygjLl9RpzOqiVrDhOCyVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"247083\",\n       ", "doc_id": "d311e4bd-55d1-4a2e-b37f-c0d0f4cf4ac0", "embedding": null, "doc_hash": "efb3131d6993e4b746d129fbfd311aa12f79df00e0e8127edb3b8bc15ddc512b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 7731, "end": 10221, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "2": "19b0d285-adfc-4f7e-8242-7bb31983ba8b", "3": "48d4326a-b312-4678-bcc5-950fa4793f9f"}}, "__type__": "1"}, "48d4326a-b312-4678-bcc5-950fa4793f9f": {"__data__": {"text": " \"gasconsumed\": \"247083\",\n        \"exception\": null,\n        \"notifications\": [],\n        \"stack\": [\n            {\n                \"type\": \"InteropInterface\",\n                \"interface\": \"IIterator\",\n                \"id\": \"bfc3ccf4-d814-4497-9d68-eb50806c3b7a\"\n            }\n        ],\n        \"session\": \"77c20bc6-6c6a-40dc-87b9-0be461c04831\"\n    }\n}\n```\n\nTo get iterators, refer to the method [traverseiterator](traverseiterator.md) \n", "doc_id": "48d4326a-b312-4678-bcc5-950fa4793f9f", "embedding": null, "doc_hash": "a8e183fe84b6fd40088729ddef0a828d0161bf3b2bcbb5809312610014767ae2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}, "node_info": {"start": 10196, "end": 10633, "_node_type": "1"}, "relationships": {"1": "bb7dfccac308be11326ae4524c22bf0146f54a13", "2": "d311e4bd-55d1-4a2e-b37f-c0d0f4cf4ac0"}}, "__type__": "1"}, "732bab44-395d-414e-ad11-dfb15821e336": {"__data__": {"text": "\ufeff\ufeff\ufeff# invokescript Method\n\nReturns the result after passing a script through the VM.\n\n> [!Note]\n>\n> - This method is to test your VM script as if they ran on the blockchain at that point in time. This RPC call does not affect the blockchain in any way.\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n### Parameter Description\n\n- script: A script runnable in the VM. This is the same script that is returned in invokefunction\n- signers: Optional. List of contract signature accounts.\n  * account: signature account\n  * scopes: signature's valid scopes, allowed values are:\n    * None: Only transactions are signed and no contracts are allowed to use this signature.\n    * CalledByEntry: It only applies to the chain call entry. That is,  if the user invokes contract A, and then contract A calls contract B, only contract A can use the signature. It is recommended as the default value for the wallet.\n    * CustomContracts: Custom contract. The signature can be used in the specified contract.\n      It can be used in conjunction with CalledByEntry.\n    * CustomGroups: Custom contract groups that can be used in a specified contract group.\n      It can be used in conjunction with CalledByEntry.\n    * Global: Global. Global. The risk is extremely high because the contract may transfer all assets in the address. Only choose it when the contract is extremely trusted.\n  * allowedcontracts: contracts of the signature can take effect, if scopes is CustomContracts\n  * allowedgroups: pubkeys of the signature can take effect, if scopes is CustomGroups\n- use diagnostic: Whether to return the simulated invocation information and storage change information. The default value is `false`.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"invokescript\",\n  \"params\": [\n    \"DAABECcMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBRmmdXxSKUGNq3wQcppLAdAe8sD+hTAHwwIdHJhbnNmZXIMFMTiKascQ8IoLIUKuF3Y3n1ndaOhQWJ9W1I=\",\n        [\n            {\n                \"account\": \"0xfa03cb7b40072c69ca41f0ad3606a548f1d59966\",\n                \"scopes\": \"CalledByEntry\",\n                \"allowedcontracts\": [],\n                \"allowedgroups\": []\n            }\n        ],\n    true\n  ]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAABECcMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBRmmdXxSKUGNq3wQcppLAdAe8sD+hTAHwwIdHJhbnNmZXIMFMTiKascQ8IoLIUKuF3Y3n1ndaOhQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1490312\",\n   ", "doc_id": "732bab44-395d-414e-ad11-dfb15821e336", "embedding": null, "doc_hash": "17e4b74e026d46faf170e4e21015dc1199a83e36bc9e193f70a294be923bf161", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}, "node_info": {"start": 0, "end": 2552, "_node_type": "1"}, "relationships": {"1": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f", "3": "18450f21-e800-4c15-99f1-8d117d72c409"}}, "__type__": "1"}, "18450f21-e800-4c15-99f1-8d117d72c409": {"__data__": {"text": "     \"gasconsumed\": \"1490312\",\n        \"exception\": null,\n        \"notifications\": [\n            {\n                \"eventname\": \"Transfer\",\n                \"contract\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                \"state\": {\n                    \"type\": \"Array\",\n                    \"value\": [\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"ZpnV8UilBjat8EHKaSwHQHvLA/o=\"\n                        },\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"+on7LBTfD1nd3wT25WUX8rNKrus=\"\n                        },\n                        {\n                            \"type\": \"Integer\",\n                            \"value\": \"10000\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"diagnostics\": {\n            \"invokedcontracts\": {\n                \"hash\": \"0x9cac876fcc1646f1f017aa49b1fbcf87bd37b043\",\n                \"call\": [\n                    {\n                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                        \"call\": [\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n              ", "doc_id": "18450f21-e800-4c15-99f1-8d117d72c409", "embedding": null, "doc_hash": "69a9d255a379cc2fd076d08d2bada0b301dd204d0741eca318160b70e43db4ba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}, "node_info": {"start": 2528, "end": 3837, "_node_type": "1"}, "relationships": {"1": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f", "2": "732bab44-395d-414e-ad11-dfb15821e336", "3": "3e839ae9-5f2a-4257-8576-46b97574a097"}}, "__type__": "1"}, "3e839ae9-5f2a-4257-8576-46b97574a097": {"__data__": {"text": "    },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                                \"call\": [\n                                    {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    },\n                                    {\n                                        \"hash\":", "doc_id": "3e839ae9-5f2a-4257-8576-46b97574a097", "embedding": null, "doc_hash": "b2355bed32d3e6c2f160030f6578d6fc3136d29de4575cd9850a88788b0022d0", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}, "node_info": {"start": 3860, "end": 5010, "_node_type": "1"}, "relationships": {"1": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f", "2": "18450f21-e800-4c15-99f1-8d117d72c409", "3": "cd641c07-32c8-4503-b23f-53451565ef8a"}}, "__type__": "1"}, "cd641c07-32c8-4503-b23f-53451565ef8a": {"__data__": {"text": "                 \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\",\n                                \"call\": [\n                                    {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    },\n                                    {\n                                        \"hash\": \"0xa1a375677dded85db80a852c28c2431cab29e2c4\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"storagechanges\": [\n                {\n                    \"state\": \"Changed\",\n                    \"key\": \"BgAAAAEBZpnV8UilBjat8EHKaSwHQHvLA/o=\",\n                    \"value\": \"8CTJ5wda\"\n                },\n       ", "doc_id": "cd641c07-32c8-4503-b23f-53451565ef8a", "embedding": null, "doc_hash": "cedc447ac780af3e11a7133acdf3b02dcde31d14383677f9271f90d3dabc80f8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}, "node_info": {"start": 5007, "end": 6191, "_node_type": "1"}, "relationships": {"1": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f", "2": "3e839ae9-5f2a-4257-8576-46b97574a097", "3": "1a0c3bca-f12e-431c-af5e-d10f86005506"}}, "__type__": "1"}, "1a0c3bca-f12e-431c-af5e-d10f86005506": {"__data__": {"text": "           },\n                {\n                    \"state\": \"Added\",\n                    \"key\": \"BgAAAAEB+on7LBTfD1nd3wT25WUX8rNKrus=\",\n                    \"value\": \"ECc=\"\n                }\n            ]\n        },\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": true\n            }\n        ],\n        \"tx\": \"AOaXOgSIvRYAAAAAAKzgAQAAAAAAesUGAAFmmdXxSKUGNq3wQcppLAdAe8sD+gEAWQwAARAnDBT6ifssFN8PWd3fBPblZRfys0qu6wwUZpnV8UilBjat8EHKaSwHQHvLA/oUwB8MCHRyYW5zZmVyDBTE4imrHEPCKCyFCrhd2N59Z3WjoUFifVtSAUIMQMTS2HRIO9gDxq/U/lqIB77dLBzVHT4cwKdvqoGOZqm4IoGqHbYzBSYHOPHWGNutWvkjCgIQGQFKK1JGyOR16LwoDCEDrQCtTQQyXXSsHZm3oRiqiAzP00uFPaW9tICYC3D7Bm9BVuezJw==\"\n    }\n}\n```\n\n- script\uff1a\u5408\u7ea6\u7684\u8c03\u7528\u811a\u672c\uff0c\u5728 Neo \u5b98\u7f51\u4e0a\u53ef\u4ee5\u89e3\u6790 https://neo.org/converter\n\n  ```\n   PUSHDATA1\n   PUSHINT16 10000\n   PUSHDATA1 0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\n   PUSHDATA1 0xfa03cb7b40072c69ca41f0ad3606a548f1d59966\n   PUSH4\n   PACK\n   PUSH15\n   PUSHDATA1 transfer\n   PUSHDATA1 0xa1a375677dded85db80a852c28c2431cab29e2c4\n   SYSCALL System.Contract.Call\n  ```\n\n- state:  `HALT` means the vm executed successfully, and`FAULT` means the vm exited due to an exception. \n\n- gasconsumed: the system fee consumed for invocation.\n\n- exception: The exception messages occurred during contract execution. It is `null` when there is no exception.\n\n- notifications: The event messages occurred during contract execution.  They can be checked by [getapplicationlog](./getapplicationlog.md) for on-chain transactions. \n\n- diagnostics: The process information and storage changes of the contract invocation. This request does not change the real storage on the blockchain, but only simulates the storage changes after the transaction is sent on the blockchain.  \n\n- stack: the contract execution result. If the value is String or ByteArray, it is encoded by Base64.\n\n- tx: the transaction's hex string of this invocation, need open wallet and added signers correctly, otherwise the string will not be returned.\n\n-", "doc_id": "1a0c3bca-f12e-431c-af5e-d10f86005506", "embedding": null, "doc_hash": "a5ec838748c10c6d317846c8818b8087517cc257059daa1d8a3348d742e261d6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}, "node_info": {"start": 6196, "end": 8187, "_node_type": "1"}, "relationships": {"1": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f", "2": "cd641c07-32c8-4503-b23f-53451565ef8a", "3": "cf927263-bfb6-4b9b-85dc-76a3f880e804"}}, "__type__": "1"}, "cf927263-bfb6-4b9b-85dc-76a3f880e804": {"__data__": {"text": "and added signers correctly, otherwise the string will not be returned.\n\n- pendingsignature: It is returned if the transaction requires multiple signatures and the currently open wallet does not include all accounts of signers.\n\n## About iterator\n\nIf the execution result of contract includes iterators, whether to return `session` is decided by the value of  `SessionEnabled` in `config.json` of the plugin `RpcServer`. If  `SessionEnabled` is `true`, `session` is returned to get further details of the Iterator. Otherwise, if  `SessionEnabled` is `false`, `session` is not returned.\n\nIn the following example,  `SessionEnabled` is `true`\uff1a\n\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"wh8MBnRva2VucwwU/+Ha24YygjLl9RpzOqiVrDhOCyVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"247083\",\n        \"exception\": null,\n        \"notifications\": [],\n        \"stack\": [\n            {\n                \"type\": \"InteropInterface\",\n                \"interface\": \"IIterator\",\n                \"id\": \"bfc3ccf4-d814-4497-9d68-eb50806c3b7a\"\n            }\n        ],\n        \"session\": \"77c20bc6-6c6a-40dc-87b9-0be461c04831\"\n    }\n}\n```\n\n", "doc_id": "cf927263-bfb6-4b9b-85dc-76a3f880e804", "embedding": null, "doc_hash": "ec4eedd5586a3dba723a4a35940478d91282d8db8392792ca08fad2851f5fd39", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}, "node_info": {"start": 8116, "end": 9280, "_node_type": "1"}, "relationships": {"1": "d9d198d3648d0792fe85af1dbd696b32d8e3c39f", "2": "1a0c3bca-f12e-431c-af5e-d10f86005506"}}, "__type__": "1"}, "3434b996-a288-402a-936e-fe429a309e76": {"__data__": {"text": "\ufeff# listaddress Method\n\nLists all the addresses in the current wallet.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"listaddress\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"address\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n            \"haskey\": true,\n            \"label\": null,\n            \"watchonly\": false\n        },\n        {\n            \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n            \"haskey\": true,\n            \"label\": null,\n            \"watchonly\": false\n        }\n    ]\n}\n```\n\nResponse description\uff1a\n\naddress: The address in the wallet.\n\nhaskey: Whether there is a private key for the address.\n\nlabel: Address label.\n\nwatchonly: Indicates whether it is a watch only address.", "doc_id": "3434b996-a288-402a-936e-fe429a309e76", "embedding": null, "doc_hash": "0941d11170323cb554a967f4836cbdb96c5e549cf1a45fe0efabdf34a52432a8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/listaddress.html"}, "node_info": {"start": 0, "end": 1024, "_node_type": "1"}, "relationships": {"1": "73d629203862f09266388e1396146f4ff62c137c"}}, "__type__": "1"}, "49aa2fcd-206e-49bf-9bf0-449239e3b43a": {"__data__": {"text": "# listplugins Method\n\nReturns a list of plugins loaded by the node.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"listplugins\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"name\": \"DBFTPlugin\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": [\n                \"IP2PPlugin\"\n            ]\n        },\n        {\n            \"name\": \"LevelDBStore\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": []\n        },\n        {\n            \"name\": \"TokensTracker\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": [\n                \"IPersistencePlugin\"\n            ]\n        },\n        {\n            \"name\": \"RpcServer\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": []\n        },\n        {\n            \"name\": \"SystemLog\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": [\n                \"ILogPlugin\"\n            ]\n        }\n    ]\n}\n```", "doc_id": "49aa2fcd-206e-49bf-9bf0-449239e3b43a", "embedding": null, "doc_hash": "c867412116384a95309d928f5d0cb3ade7be7055f9e428f05edf077be0732027", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/listplugins.html"}, "node_info": {"start": 0, "end": 1142, "_node_type": "1"}, "relationships": {"1": "350079dc1d22e48375082d056e10b4bf86998d41"}}, "__type__": "1"}, "8539ca1a-01fc-492d-98fa-98fc46afd1b5": {"__data__": {"text": "# openwallet Method\n\nOpens the specified wallet file. To be on the safe side this method is disabled by default. If you do need to use this method you can manually enable this method in the RpcServer configuration file.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke this method.\n\n## Parameter Description\n\n- path: The wallet file path\n- password: In plain text.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"openwallet\",\n  \"params\": [\"11.db3\", \"1\"],\n  \"id\": 1\n}\n```\n\nResponse body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}\n```\n\nResponse description\uff1a\n\ntrue: The wallet is opened.\n\nOthers: The wallet cannot be opened.\n\nIf `Access denied` is returned this is because `openwallet` is disabled. To enable it, you can remove  `openwallet` in the field DisabledMethods in RpcServer config.json.\n\n", "doc_id": "8539ca1a-01fc-492d-98fa-98fc46afd1b5", "embedding": null, "doc_hash": "c2448ed0c9c779b4f662a5284c466ceac8fa0c51878b7284a869e067b3dce463", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/openwallet.html"}, "node_info": {"start": 0, "end": 925, "_node_type": "1"}, "relationships": {"1": "31d376a4e81839a5d32a3ae5db67580979d219b9"}}, "__type__": "1"}, "63a71a11-0a68-4304-a0e1-c74edf1aa243": {"__data__": {"text": "\ufeff# sendfrom Method\n\nTransfer from the specified address to the destination address.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n### Parameter Description\n\n* asset_id: Asset ID\uff08asset identifier\uff09, the script hash of nep-17 contract.\n\n  e.g. NEO is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n\n\u200b        GAS is 0xd2a4cff31913016155e38e474a2c06d08be276cf\n* from: transfering address.\n* address: destination address.\n* value: Transfer amount\n* signers: The signature account of transaction\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"sendfrom\",\n    \"params\": [\n        \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n        \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n        \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n        100000000\n    ]\n}\n```\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xe01b16626dec583941c1053467100041ce868e3b35e5fe3a85e530792cc9149d\",\n        \"size\": 252,\n        \"version\": 0,\n        \"nonce\": 2114899852,\n        \"sender\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n        \"sysfee\": \"9999540\",\n        \"netfee\": \"1235610\",\n        \"validuntilblock\": 5810,\n        \"signers\": [\n            {\n                \"account\": \"0x86df72a6b4ab5335d506294f9ce993722253b6e2\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"attributes\": [],\n        \"script\": \"CwIA4fUFDBT6ifssFN8PWd3fBPblZRfys0qu6wwU4rZTInKT6ZxPKQbVNVOrtKZy34YUwB8MCHRyYW5zZmVyDBQos62rcmn5whgds8t0Hr9VGTDicEFifVtSOQ==\",\n        \"witnesses\": [\n            {\n                \"invocation\":", "doc_id": "63a71a11-0a68-4304-a0e1-c74edf1aa243", "embedding": null, "doc_hash": "bf51cdb687edae7974408dbfa7d323ca79c833ee0e3e4908910c650f44cbea0b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendfrom.html"}, "node_info": {"start": 0, "end": 1741, "_node_type": "1"}, "relationships": {"1": "c10e39e76a18c0c776849f303b5e575691e65c73", "3": "2de5e500-5540-4e29-afad-6c8cc207bf81"}}, "__type__": "1"}, "2de5e500-5540-4e29-afad-6c8cc207bf81": {"__data__": {"text": "               \"invocation\": \"DEAUQ3hUPg/qi77rnSzXRgd2RYdZCsPDBa/n0a6M+sCsOpC/YyLPeeoqcVNAyh73qpocOqdX1tnGeizh+C8cXoK0\",\n                \"verification\": \"EQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n            }\n        ]\n    }\n}\n```\n\nResponse Description:\n\nReturns the transaction details as above if the transaction was sent successfully; otherwise the transaction is failed.\n\nIf the signature is incomplete, a pending transaction is returned. If the balance is insufficient, an error message is returned.\n", "doc_id": "2de5e500-5540-4e29-afad-6c8cc207bf81", "embedding": null, "doc_hash": "e381c5e5fa3291505715541eaa0f2c97a8d8e1c04df89e16b9bce2918647d2f7", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendfrom.html"}, "node_info": {"start": 1713, "end": 2239, "_node_type": "1"}, "relationships": {"1": "c10e39e76a18c0c776849f303b5e575691e65c73", "2": "63a71a11-0a68-4304-a0e1-c74edf1aa243"}}, "__type__": "1"}, "e784f3d9-fed2-4d23-9d5c-bec85c8d9bd4": {"__data__": {"text": "\ufeff# sendmany Method\n\nBulk transfer order, and you can specify a change address.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendmany\",\n  \"params\": [from, outputs_array],\n  \"id\": 1\n}\n```\n\n### Parameter Description\n\n* `from`: Optional. The address from which you transfer the asset.\n\n* `outputs_array`\uff1aArray, the data structure of each element in the array is as follows:\n\n  ```json\n  {\"asset\": <asset>,\"value\": <value>,\"address\": <address>, \"signers\": <signers>}\n  ```\n\n  * `asset`: Asset ID (asset identifier),  the NEP-17 contract scripthash\n  \n    e.g. NeoToken is: 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n  \n    GasToken is: 0xd2a4cff31913016155e38e474a2c06d08be276cf\n  \n  * `value`: Transfer amount\n  \n  * `address`: Destination address\n  \n  * `signers`: The signature account of transaction\n\n## Example\n\nRequest text:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"sendmany\",\n    \"params\": [\n        \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n        [\n            {\n                \"asset\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"value\": 10,\n                \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n            },\n            {\n                \"asset\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"value\": 50000000,\n                \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n            }\n        ]\n    ]\n}\n```\n\nRequest text (with fromAddress):\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendmany\",\n  \"params\": [\n     \"NY9nnDv7cAJ44C2xeRScrXfzkrCJfFWYku\",\n\t[\n\t    {\n\t\t\t    \"asset\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\", \n\t\t\t    \"value\": 100, \n\t\t\t\t\t\"address\": \"NbtvbHpwv6nswDtVFpKEyooHhDHwZh2LHf\"\n\t\t\t}, \n\t\t\t{\n\t\t\t     \"asset\":", "doc_id": "e784f3d9-fed2-4d23-9d5c-bec85c8d9bd4", "embedding": null, "doc_hash": "3e39a1107f888eb63dc66bfd52d17de5f08a76a100c3e5f240a26b397179d70a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendmany.html"}, "node_info": {"start": 0, "end": 1919, "_node_type": "1"}, "relationships": {"1": "27e877a7c425e2dc56f385eaa3e57183eeea465f", "3": "abc33b47-f917-4253-a05d-3ae152cf1b27"}}, "__type__": "1"}, "abc33b47-f917-4253-a05d-3ae152cf1b27": {"__data__": {"text": "\n\t\t\t{\n\t\t\t     \"asset\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\", \n\t\t\t\t\t \"value\": 100, \n\t\t\t\t\t \"address\": \"NbtvbHpwv6nswDtVFpKEyooHhDHwZh2LHf\"\n\t\t\t},\n\t\t\t    {\n\t\t\t    \"asset\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\", \n\t\t\t    \"value\": 100, \n\t\t\t\t\t\"address\": \"NPTvd2T1zi7ioj3LmvpeBd45pPvAJU3gvr\"\n\t\t\t}, \n\t\t\t{\n\t\t\t     \"asset\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\", \n\t\t\t\t\t \"value\": 100, \n\t\t\t\t\t \"address\": \"NPTvd2T1zi7ioj3LmvpeBd45pPvAJU3gvr\"\n\t\t\t}\n\t ]\n\t ],\n  \"id\": 1\n}\n```\n\nResponse text:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"hash\": \"0xe8742fc5a69f3180ab59f3f21695ce5459891429682a7f1df38219bc05cce39e\",\n    \"size\": 514,\n    \"version\": 0,\n    \"nonce\": 537723951,\n    \"sender\": \"NY9nnDv7cAJ44C2xeRScrXfzkrCJfFWYku\",\n    \"sysfee\": \"39726800\",\n    \"netfee\": \"1497580\",\n    \"validuntilblock\": 6357,\n    \"signers\": [\n      {\n        \"account\": \"0x9dd95824d6a1789d5bb665abd727d0c387a53e86\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ],\n    \"attributes\": [],\n    \"script\": \"CwBkDBSvT25X7NLzUvxKKqw14LOzO554tQwUhj6lh8PQJ9erZbZbnXih1iRY2Z0UwB8MCHRyYW5zZmVyDBT1Y+pAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQsAZAwUJvOMLBhLx7odYBaJkOQJlbxNJF4MFIY+pYfD0CfXq2W2W514odYkWNmdFMAfDAh0cmFuc2ZlcgwU9WPqQLwoPU0OBcSOowWz8qBzQO9BYn1bUjkLAGQMFK9Pblfs0vNS/EoqrDXgs7M7nni1DBSGPqWHw9An16tltludeKHWJFjZnRTAHwwIdHJhbnNmZXIMFM924ovQBixKR47jVWEBExnzz6TSQWJ9W1I5CwBkDBQm84wsGEvHuh1gFomQ5AmVvE0kXgwUhj6lh8PQJ9erZbZbnXih1iRY2Z0UwB8MCHRyYW5zZmVyDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtSOQ==\",\n    \"witnesses\": [\n     ", "doc_id": "abc33b47-f917-4253-a05d-3ae152cf1b27", "embedding": null, "doc_hash": "c9012ee3d14cfdceebec2b45fcc4dcbaaff3da968e7c0a98aadcaf7611960eea", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendmany.html"}, "node_info": {"start": 1903, "end": 3402, "_node_type": "1"}, "relationships": {"1": "27e877a7c425e2dc56f385eaa3e57183eeea465f", "2": "e784f3d9-fed2-4d23-9d5c-bec85c8d9bd4", "3": "3a316d76-3ce0-4af2-91b7-d8cc2450aa8e"}}, "__type__": "1"}, "3a316d76-3ce0-4af2-91b7-d8cc2450aa8e": {"__data__": {"text": "   \"witnesses\": [\n      {\n        \"invocation\": \"DEDxTxMc/IKpEzhfYV0bMv8qUEL1na7LvrnK3hisz1SBoYJr2SF7SpXY0RzA/1x5QfHEuxHUuvelul1aiDjFenYD\",\n        \"verification\": \"EQwhA+CII7RDmfaiqiJIg02SChWrOuktx1Y89+Q/3dWxwBgvEUF7zmyl\"\n      }\n    ]\n  }\n}\n```\n\nResponse Description:\n\nReturns the transaction details as above if the transaction was sent successfully; otherwise the transaction is failed.\n\nIf the JSON format is incorrect, a Parse error is returned. If the signature is incomplete, a pending transaction is returned. If the balance is insufficient, an error message is returned.\n", "doc_id": "3a316d76-3ce0-4af2-91b7-d8cc2450aa8e", "embedding": null, "doc_hash": "a39cbee7d01b8f613306f3d4fc24dea7fdf420997d3eb3af102ec936dcfc5708", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendmany.html"}, "node_info": {"start": 3396, "end": 3977, "_node_type": "1"}, "relationships": {"1": "27e877a7c425e2dc56f385eaa3e57183eeea465f", "2": "abc33b47-f917-4253-a05d-3ae152cf1b27"}}, "__type__": "1"}, "5216bafc-3b7a-43ab-83a1-9ce7be99987f": {"__data__": {"text": "\ufeff# sendrawtransaction Method\n\nBroadcasts transactions over the NEO network.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\ntransaction: A Base64-encoded string that has been serialized after the transaction signed in the program.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendrawtransaction\",\n  \"params\": [\"ALmNfAb4lqIAAAAAAAZREgAAAAAA8S8AAAEKo4e1Ppa3mJpjFDGgVt0fQKBC9gEAKQwFd29ybGQRwAwDcHV0DBR9rbALvBGpMrl7cXVBdSsPOC0EmUFifVtSAUIMQACXF48H1VRmI50ievPfC042rJgj7ZQ3Y4ff27abOpeclh+6KpsL6gWfZTAUyFOwdjkA7CWLM3HsovQeDQlI0oopDCEDzqPi+B8a+TUi0p7eTySh8L7erXKTOR0ziA9Uddl4eMkLQZVEDXg=\"],\n  \"id\": 1\n}\n```\n\nResponse body in successful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x13ccdb9f7eda95a24aa5a4841b24fed957fe7f1b944996cbc2e92a4fa4f1fa73\"\n    }\n}\n```\n\nResponse body in unsuccessful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n        \"code\": -500,\n        \"message\": \"AlreadyExists\"\n    }\n}\n```\n\nResponse Description:\n\nWhen result is false, the current transaction has failed to broadcast and an exception occurs. In this example, a confirmed transaction is broadcast, which fails due to the double cost.\n\nThe following error codes can be expected:\n\n| Error codes | Message           | Description                                                  |\n| ----------- | ----------------- | ------------------------------------------------------------ |\n| 500         | AlreadyExists     | Block or transaction already exists and cannot be sent repeatedly. |\n|             | OutOfMemory       | The memory pool is full and no more transactions can be sent. |\n|             | UnableToVerify    | The block cannot be validated.                               |\n|             | Invalid           | The format or parameter is incorrect                         |\n|             | Expired           | The block information is expired                             |\n|             | InsufficientFunds | Insufficient funds  ", "doc_id": "5216bafc-3b7a-43ab-83a1-9ce7be99987f", "embedding": null, "doc_hash": "47bebc22242b256f13f5498d70653bca8e7aba737b1114dd09e0ef47e9d98461", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendrawtransaction.html"}, "node_info": {"start": 0, "end": 2120, "_node_type": "1"}, "relationships": {"1": "66428027e27b2f19fc6fafd9c1acdb4f9ce0c54d", "3": "182984e7-d5f5-4abc-ba75-81793a449dca"}}, "__type__": "1"}, "182984e7-d5f5-4abc-ba75-81793a449dca": {"__data__": {"text": "        | InsufficientFunds | Insufficient funds                                           |\n|             | PolicyFail        | The behavior is not allowed (such as blacklist address trading) |\n\n", "doc_id": "182984e7-d5f5-4abc-ba75-81793a449dca", "embedding": null, "doc_hash": "8816f646e8d451ec3056d452f6be6a3e8b9b73c2ade17bcf3bb478657e69330b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendrawtransaction.html"}, "node_info": {"start": 2070, "end": 2266, "_node_type": "1"}, "relationships": {"1": "66428027e27b2f19fc6fafd9c1acdb4f9ce0c54d", "2": "5216bafc-3b7a-43ab-83a1-9ce7be99987f"}}, "__type__": "1"}, "ae274180-1ba1-45b7-bb7b-881da32d0559": {"__data__": {"text": "\ufeff\ufeff# sendtoaddress Method\n\nTransfers to the specified address.\n\n> [!Note]\n>\n> Before you can invoke this method you must:\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendtoaddress\",\n  \"params\": [asset_id,address,value],\n  \"id\": 1\n}\n```\n\n## Parameter Description\n\n* asset_id\uff1a Asset ID (asset identifier),  the script hash of NEP-17 contract\n\n  e.g. NeoToken is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n\n  GasToken is 0xd2a4cff31913016155e38e474a2c06d08be276cf\n\n* address: Payment address\n\n* value: The amount transferred. It is a large integer without precision. For example, to transfer 0.000001 GAS (precision is 8), enter 100 here; To transfer 100 GAS, enter 10000000000.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendtoaddress\",\n  \"params\": [\"0xd2a4cff31913016155e38e474a2c06d08be276cf\", \"NUuPz4k387bHuySx2e2RWhZj5SpF8V4Csy\", 100],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x4c072646cf9515dd2a5df9fc4df0563a4f2e468910d24a9b2196743bcea8b8f0\",\n        \"size\": 246,\n        \"version\": 0,\n        \"nonce\": 573855568,\n        \"sender\": \"NSXYk7V6bgrwCJJbh5m8ZGCy1fbREY4gk5\",\n        \"sysfee\": \"9977780\",\n        \"netfee\": \"1229520\",\n        \"validuntilblock\": 17307,\n        \"signers\": [\n            {\n                \"account\": \"0x580d152d36db6f34c9aaf676facbbe2779538b48\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"attributes\": [],\n        \"script\": \"CwBkDBRinWqydAv8Nt9xgEEbqA/YeB0pvQwUSItTeSe+y/p29qrJNG/bNi0VDVgUwB8MCHRyYW5zZmVyDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtSOQ==\",\n        \"witnesses\": [\n            {\n                \"invocation\":", "doc_id": "ae274180-1ba1-45b7-bb7b-881da32d0559", "embedding": null, "doc_hash": "98942c9783ae5f222ca19f32138a4eb0cda8ab543ad62138f0655154a4a8276a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendtoaddress.html"}, "node_info": {"start": 0, "end": 1829, "_node_type": "1"}, "relationships": {"1": "bc9c337e1c893f89c76ac744dec3bdadd5f3747c", "3": "57d7d373-b2ae-454c-affe-9ba66702f00b"}}, "__type__": "1"}, "57d7d373-b2ae-454c-affe-9ba66702f00b": {"__data__": {"text": "               \"invocation\": \"DEDROjmUBKzywJa+WCD9MttL6V+3i+HvjnfW8hMjT5y8zMcXzqt4HI2/72YM/aS2nfWPXOfJVXZmK/89mSJqPVX6\",\n                \"verification\": \"DCECUDQqDEv7ud85rbYDDT8/i+vdyxW46/e8TMrafzqJui5BVuezJw==\"\n            }\n        ]\n    }\n}\n```\n\nResponse Description:\n\nReturning of the transaction details above indicates that the transaction was sent successfully. If not, the transaction has failed to send.\n\nIf the signature is incomplete, it returns the transaction to be signed.\n\nIf the balance is insufficient, it returns an error message.\n", "doc_id": "57d7d373-b2ae-454c-affe-9ba66702f00b", "embedding": null, "doc_hash": "e69a9ef54e018b72ea81b39d9a524d84bc1279fb65777e521645488c2452b6f5", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendtoaddress.html"}, "node_info": {"start": 1801, "end": 2350, "_node_type": "1"}, "relationships": {"1": "bc9c337e1c893f89c76ac744dec3bdadd5f3747c", "2": "ae274180-1ba1-45b7-bb7b-881da32d0559"}}, "__type__": "1"}, "7ed1bb5e-e6af-4795-ada5-adccad93c3e4": {"__data__": {"text": "\ufeff# submitblock Method\n\nBroadcasts a new block in the NEO network.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"submitblock\",\n  \"params\": [hex],\n  \"id\": 1\n}\n```\n\n### Parameter Description\n\nhex: A Base64-encoded string of a serialized block.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"submitblock\",\n  \"params\": [\"AAAAACMSKFbGpGl6t7uroMpi2ilhQd84eU/pUrRfQyswXYl76woLOY0oW1z4InfxoKyxFAAB+8FS6cRu2Pm0iaOiD8OMCnLadQEAAMgcAAD6lrDvowCyjK9dBALCmE1fvMuahQFCDEAd8EoEFBcxOLCZfh8w0tUEHHmyn++KzW4I8oeJ1WyMmjHVcolpNzOnAOzXTn/xujwy93gJ9ijvVo6wAF5qC3wCKxEMIQL4L//X3jDpIyMLze0sPNW+yFcufrrL3bnzOipdJpNLixELQRON768CAGUTt7+NSxXGAA7aoUS2kokAAAAAACYcEwAAAAAARzMAAAHNWK7P0zW+HrPTEeHcgAlj39ctnwEAXQMA5AtUAgAAAAwUzViuz9M1vh6z0xHh3IAJY9/XLZ8MFM1Yrs/TNb4es9MR4dyACWPf1y2fE8AMCHRyYW5zZmVyDBS8r0HWhMfUrW7g2Z2pcHudHwyOZkFifVtSOAFCDEADRhUarLK+/BBjhqaWY5ieento21zgkcsUMWNCBWGd+v8a35zatNRgFbUkni4dDNI/BGc3zOgPT6EwroUsgvR+KQwhAv3yei642bBp1hrlpk26E7iWN8VC2MdMXWurST/mONaPC0GVRA14\"],\n  \"id\": 1\n}\n```\n\nResponse body in successful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xbe153a2ef9e9160906f7054ed8f676aa223a826c4ae662ce0fb3f09d38b093c1\"\n    }\n}\n```\n\nResponse body in unsuccessful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n        \"code\": -500,\n        \"message\": \"AlreadyExists\"\n    }\n}\n```\n\nResponse Description:\n\nWhen result is false, the block has failed to broadcast and an exception occurs. The following error codes can be expected\n\n| Error codes | Message           | Description                                                  |\n| ----------- | ----------------- | ------------------------------------------------------------ |\n| 500         | AlreadyExists     | Block or transaction already exists and", "doc_id": "7ed1bb5e-e6af-4795-ada5-adccad93c3e4", "embedding": null, "doc_hash": "27b524d36f123a5b53cc087d761ac5b4e31f42ffc4adb995162f925728829025", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/submitblock.html"}, "node_info": {"start": 0, "end": 1916, "_node_type": "1"}, "relationships": {"1": "b2508c096a01bc76cfca72c3c704d8ff905c3d02", "3": "becd4fac-d39d-4e55-ba8e-c47d72e86440"}}, "__type__": "1"}, "becd4fac-d39d-4e55-ba8e-c47d72e86440": {"__data__": {"text": "  | AlreadyExists     | Block or transaction already exists and cannot be sent repeatedly. |\n|             | OutOfMemory       | The memory pool is full and no more transactions can be sent. |\n|             | UnableToVerify    | The block cannot be validated.                               |\n|             | Invalid           | The format or parameter is incorrect                         |\n|             | Expired           | The block information is expired                             |\n|             | InsufficientFunds | Insufficient funds                                           |\n|             | PolicyFail        | The behavior is not allowed (such as blacklist address trading) |", "doc_id": "becd4fac-d39d-4e55-ba8e-c47d72e86440", "embedding": null, "doc_hash": "6bf36a455eef3e0f4bed7b01c35486ab7137633be68ffd0389e07bd8a371baf1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/submitblock.html"}, "node_info": {"start": 1853, "end": 2543, "_node_type": "1"}, "relationships": {"1": "b2508c096a01bc76cfca72c3c704d8ff905c3d02", "2": "7ed1bb5e-e6af-4795-ada5-adccad93c3e4"}}, "__type__": "1"}, "f32da9c7-74c5-4772-a3b5-d6ea98b11053": {"__data__": {"text": "# traverseiterator Method\n\nGets the Iterator value from `session` and `Iterator id` returned by [invokefunction](./invokefunction.md) or [invokescript](./invokescript.md) .\n\n> [!Note]\n>\n> - This method queries Iterator type data and does not affect the blockchain data.\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n> - Before you can use the method, make sure that the `SessionEnabled` value in `config.json` of the plugin `RpcServer` is `true`, and you have obtained `Iterator id` and `session` by invoking [invokefunction](./invokefunction.md) or [invokescript](./invokescript.md).\n\n## Parameters\n\n- session: Cache  id. It is `session` returned by [invokefunction](./invokefunction.md) or [invokescript](./invokescript.md) .\n- iterator id: Iterator data id. It is the `id` of `stack` returned by [invokefunction](./invokefunction.md) or [invokescript](./invokescript.md).\n- count: The number of values returned. It cannot exceed the value of the `MaxIteratorResultItems` field in config.json of the `RpcServer` plug-in.\n\n> [!Note]\n>\n> The validity of the `session` and `iterator id` is set by `SessionExpirationTime` in the `config.json` file of the `RpcServer` plug-in, in seconds.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"traverseiterator\",\n  \"params\": [\n    \"c5b628b6-10d9-4cc5-b850-3cfc0b659fcf\",\n    \"593b02c6-138d-4945-846d-1e5974091daa\",\n    10\n  ]\n}\n\n\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AAUPmAOGDBtFrjhmByyKoaxgy9LvzyEh8qUiEU1gxTE=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"ABX1SHTkVThVWpKlyFr3OO8swQXWfnRuqw99TTvi2UU=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"ACj/5pqjP2Mko/2c0GSUKxkJlIyC3cwUbgETEZ5+5YI=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AF16dMuw8CAZBr/sgdJnW8XWrDDDxifHsa8myh+zsD0=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AF9luS6mW+nVUNwwlkKqqRLjgoXaIlk98NuhzLTZ2sI=\"\n        },\n        {\n ", "doc_id": "f32da9c7-74c5-4772-a3b5-d6ea98b11053", "embedding": null, "doc_hash": "f885578032272d2d481d61254db9b00ee9decffa2a8a4cc5695e122d360db176", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/traverseiterator.html"}, "node_info": {"start": 0, "end": 2197, "_node_type": "1"}, "relationships": {"1": "b27edde0c14f6b26b31d921e3f7813973fd575f2", "3": "ea67495b-4feb-4f89-aeb3-e4178472e23f"}}, "__type__": "1"}, "ea67495b-4feb-4f89-aeb3-e4178472e23f": {"__data__": {"text": "       },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AHg1cOvi+r1ORjQcs9VD5bpBDCFtpzp/G4g0BMfsneo=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AM9ZDm7y7R4M5AicSk06sRv+AEmRPToxjoiHo5aeCfo=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AOqjq4sfaUcMBtXWVHKh6HqXZA3bOSiNc1VjIEi1auY=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"AOsx7QOiuKZCB2bFBR1s/SjJnfvdbyVvC5ZvaTCFe2U=\"\n        },\n        {\n            \"type\": \"ByteString\",\n            \"value\": \"APHR02jt/M9nkLF9z+5yRnRE8efjVhMvjIjDHAQeGV0=\"\n        }\n    ]\n}\n```\n\nResponse Description:\n\nThe result is the first `count` of data traversed in the Iterator, and follow-up requests will continue traversing from  `count + 1`. ", "doc_id": "ea67495b-4feb-4f89-aeb3-e4178472e23f", "embedding": null, "doc_hash": "b9d963217e5fbde1df72b08e5c75322387dd77b99784c45f030d8dde033c9a91", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/traverseiterator.html"}, "node_info": {"start": 2176, "end": 2970, "_node_type": "1"}, "relationships": {"1": "b27edde0c14f6b26b31d921e3f7813973fd575f2", "2": "f32da9c7-74c5-4772-a3b5-d6ea98b11053"}}, "__type__": "1"}, "5a2337e3-a159-4dcb-bf5c-21f446758317": {"__data__": {"text": "\ufeff# validateaddress Method\n\nVerifies that the address is a valid NEO address.\n\n> [!Note]\n>\n> You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [address],\n  \"id\": 1\n}\n```\n\n## Parameter Description\n\naddress: Address.\n\n> [!Note]\n>\n> The NEO standard address begins with N because AddressVersion in Neo N3 has been modified to 53.\n\n## Example\n\n**Example 1**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [\"NPvKVTGZapmFWABLsyvfreuqn73jCjJtN1\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NPvKVTGZapmFWABLsyvfreuqn73jCjJtN1\",\n        \"isvalid\": true\n    }\n}\n```\n\n**Example 2**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [\"152f1muMCNa7goXYhYAQC61hxEgGacmncB\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"152f1muMCNa7goXYhYAQC61hxEgGacmncB\",\n        \"isvalid\": false\n    }\n}\n```\n\n**Example 3**\n\nRequest body:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [\"0x9127ea19791e3f3fc59309778a4abf275d5290e5\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"address\": \"0x9127ea19791e3f3fc59309778a4abf275d5290e5\",\n    \"isvalid\": false\n  }\n}\n```", "doc_id": "5a2337e3-a159-4dcb-bf5c-21f446758317", "embedding": null, "doc_hash": "a013acf05c9fb05ea689f43f307544bd126cd4db729a7ad8e3b9adb0fbcad950", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/validateaddress.html"}, "node_info": {"start": 0, "end": 1475, "_node_type": "1"}, "relationships": {"1": "91bc2e134483d59a02555f6a018f45b153586bc3"}}, "__type__": "1"}, "3cb4df3e-2bdf-4535-a87d-136483601e53": {"__data__": {"text": "# verfyproof Method\n\nVerifies using the root hash and proof, and gets the value of the storage corresponding to the key.\n\n> [!Note]\n>\n> You must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- roothash: root hash of the state root\n\n- proof: proof data of the state root; Base64-encoded.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"verifyproof\",\n  \"params\": [\"0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca\", \"Bfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"AAI=\"\n}\n```", "doc_id": "3cb4df3e-2bdf-4535-a87d-136483601e53", "embedding": null, "doc_hash": "91f8c98bf01e8d27491f849e69deaf1c40918d93b9cb74b64257b64df98c8c1d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/verifyproof.html"}, "node_info": {"start": 0, "end": 1491, "_node_type": "1"}, "relationships": {"1": "6d98dc0294175f5fa8433ee4692a8f399fae4610"}}, "__type__": "1"}, "58aad590-42af-407b-81ee-85fa016b34b3": {"__data__": {"text": "# Neo.SmartContract.Framework\n\n## Class\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| ByteString      | Encapsulation for Byte Array                                 |\n| ECPoint         | Represents a (X,Y) coordinate pair for elliptic curve cryptography (ECC) structures |\n| ExecutionEngine | Represents the VM used to execute the script                 |\n| List            | Similar to List in .net                                      |\n| Map             | Similar to Dictionary in .net                                |\n| Nep11Token      | Abstraction class for NFT asset                          |\n| Nep17Token      | Abstraction class for digital asset                              |\n| UInt160         | UInt160                                                      |\n| UInt256         | UInt256                                                      |\n\n\n## Extension method\n\n| Name         | Description                                                  |\n| ------------ | ------------------------------------------------------------ |\n| ToByteString | - Converts byte to byte[] considering the byte as a BigInteger (0x00 at the end).<br/>- Converts sbyte to byte[].<br/>- Converts string to byte[]. Examples: \"hello\" -> [0x68656c6c6f]; \"\" -> []; \"Neo\" -> [0x4e656f]<br/>- Converts byte[] to string. Examples: [0x68656c6c6f] -> \"hello\"; [] -> \"\"; [0x4e656f] -> \"Neo\"<br/> |\n| Within       | Returns true if a <= x && x < b. Examples: x=5 a=5 b=15 is true; x=15 a=5 b=15 is false |\n| Concat       | Concatenates two byte arrays                                 |\n| Range        | Copies the subarray, starting from the specified position and having the specified length |\n| Take         | Returns a specified number of contiguous elements from the start of a sequence |\n| Last         | Returns a specified number of contiguous elements from the last of a sequence |\n| Reverse      | Reverses the order of the elements                   ", "doc_id": "58aad590-42af-407b-81ee-85fa016b34b3", "embedding": null, "doc_hash": "faa44364b00c0c23952270b6fa2e58f6b12da5fdb662d209e0eb2e9840b83251", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework.html"}, "node_info": {"start": 0, "end": 2059, "_node_type": "1"}, "relationships": {"1": "f71c0b8fe740205051c40c4c6a2a4576c49277d3", "3": "992d585a-7806-4135-9ec4-19fad3a80ea5"}}, "__type__": "1"}, "992d585a-7806-4135-9ec4-19fad3a80ea5": {"__data__": {"text": "                          |\n| Sqrt         | Calculates the square root                                   |\n\n## Enum\n\n| Name                  | Description                                   |\n| --------------------- | --------------------------------------------- |\n| ContractParameterType | Represents the parameter type of contract     |\n| OpCode                | Underlying types, which developers can ignore |\n| StackItemType         | Underlying types, which developers can ignore |\n", "doc_id": "992d585a-7806-4135-9ec4-19fad3a80ea5", "embedding": null, "doc_hash": "1918d258a80fccb706c0838b6e9b74968699c06662fe62dc829b91c7a8c38ec3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework.html"}, "node_info": {"start": 2041, "end": 2529, "_node_type": "1"}, "relationships": {"1": "f71c0b8fe740205051c40c4c6a2a4576c49277d3", "2": "58aad590-42af-407b-81ee-85fa016b34b3"}}, "__type__": "1"}, "6b1759b4-398f-4252-b97a-863a01fb8c3f": {"__data__": {"text": "# Neo.SmartContract.Framework.Native\n\nA series of native contract methods that can be invoked in the smart contract.\n\n## Native Contract Classes\n\n| Contract Name                                                | Script Hash                                | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------ | ------------------------------------------------------------ |\n| [ContractManagement](native/ContractManagement.md) | 0xfffdc93764dbaddd97c48f252a53ea4643faa3fd | A native contract used to manage all deployed smart contracts |\n| [CryptoLib](native/CryptoLib.md) | 0x726cb6e0cd8628a1350a611384688911ab75f51b | A native contract library that provides cryptographic algorithms |\n| [GAS](native/GAS.md)             | 0xd2a4cff31913016155e38e474a2c06d08be276cf | Represents the GAS token in the NEO system                   |\n| [Ledger](native/Ledger.md)       | 0xda65b600f7124ce6c79950c1772a36403104f2be | A native contract for storing all blocks and transactions    |\n| [NEO](native/NEO.md)             | 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 | Represents the NEO token in the Neo system                   |\n| [Oracle](native/Oracle.md)       | 0xfe924b7cfe89ddd271abaf7210a80a7e11178758 | The native Oracle service for Neo system                     |\n| [Policy](native/Policy.md)       | 0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b | A native contract that manages the system policies           |\n| [RoleManagement](native/RoleManagement.md) | 0x49cf4e5378ffcd4dec034fd98a174c5491e395e2 | A native contract for managing roles in Neo system           |\n| [StdLib](native/StdLib.md)       | 0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0 | A native contract library that provides useful functions     |\n\n## Enumeration\n\n| Enumeration                                                  | Description                                |\n| ------------------------------------------------------------ | ------------------------------------------ |\n| [NamedCurve](native/NamedCurve.md) | Supported Elliptic Curves Extension        |\n| [OracleResponseCode](native/OracleResponseCode.md) | Defines the response code types of Oracle  |\n| [Role](native/Role.md)           | Defines permission types of RoleManagement |\n\n", "doc_id": "6b1759b4-398f-4252-b97a-863a01fb8c3f", "embedding": null, "doc_hash": "0f211f99dafbdf890854129dca6bdd27637489c3ca522220dce93817745efec2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native.html"}, "node_info": {"start": 0, "end": 2334, "_node_type": "1"}, "relationships": {"1": "a264d976268783a1bd1685c226188343b107e973"}}, "__type__": "1"}, "2f75614b-cefe-4d67-b36e-c092cbece277": {"__data__": {"text": "# ContractManagement Class\n\nProvides a series of methods for the native contract `ContractManagement`, which contract hash is `0xfffdc93764dbaddd97c48f252a53ea4643faa3fd`.\n\nNamespace: [Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class ContractManagement\n```\n\n## Attributes\n\n| Name | Description   |\n| ---- | ------------- |\n| Hash | Contract hash |\n\n## Methods\n\n| Name                                                         | Description                                        |\n| ------------------------------------------------------------ | -------------------------------------------------- |\n| GetMinimumDeploymentFee()                                    | Gets the minimum fee of contract deployment        |\n| [GetContract(UInt160 hash)](ContractManagement/GetContract.md) | Gets the contract based on the given contract hash |\n| [Deploy(byte[] nefFile, string manifest)](ContractManagement/Deploy.md) | Deploys the contract                               |\n| [Update(byte[] nefFile, string manifest)](ContractManagement/Update.md) | Updates the contract                               |\n| [Destroy()](ContractManagement/Destroy.md)                   | Destroys the contract                              |\n\n", "doc_id": "2f75614b-cefe-4d67-b36e-c092cbece277", "embedding": null, "doc_hash": "8ec4e52aa4c8fc0d1d995c3c7562852b146c466a35324b643a0a2e30eb624c59", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement.html"}, "node_info": {"start": 0, "end": 1283, "_node_type": "1"}, "relationships": {"1": "edc8e0f0af2000fafbf1e5d5a0fbd69c67f906d3"}}, "__type__": "1"}, "1a416c4f-3b82-4fc0-af7e-445deea42fb4": {"__data__": {"text": "# ContractManagement.Deploy Method\n\nDeploys the contract.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Contract Deploy(ByteString nefFile, string manifest);\npublic static extern Contract Deploy(ByteString nefFile, string manifest, object data);\n```\n\nParameters:\n\n- nefFile: nef data of the contract in byte array.\n- manifest: Metadata of the contract in Json string.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static byte[] nef = \"4e4546336e656f6e00000000000000000000000000000000000000000000000000000000332e302e302e30000000000000000000000000000000000000000000000000000211407060ba5f\".HexToBytes();\n    private static string manifest = \"{\\\"name\\\":\\\"\\\",\\\"groups\\\":[],\\\"supportedstandards\\\":[],\\\"abi\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"update\\\",\\\"parameters\\\":[],\\\"offset\\\":0,\\\"returntype\\\":\\\"Any\\\",\\\"safe\\\":false}],\\\"events\\\":[]},\\\"permissions\\\":[{\\\"contract\\\":\\\"*\\\",\\\"methods\\\":\\\"*\\\"}],\\\"trusts\\\":[],\\\"extra\\\":null}\";\n\n    public static object Deploy()\n    {\n        Contract contract = ContractManagement.Deploy(nef, manifest);\n        return contract.Hash;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n    \"type\":\"ByteString\",\n    \"value\":\"fbKpbpzeGaTQ5xgyBeVh0JkNcPo=\"\n}]\n```\n\nResponse description:\n\n- ByteString string: the deployed contract hash.\n\n- Other: failed.\n\nUsually, you can define the method `_deploy` in the contract and execute the neo-cli command `deploy contract.nef` to deploy the contract.\n\n```c#\npublic static void _deploy(object data, bool update)\n{\n    if (update) return;\n    // Add other logics after the contract is deployed\n}\n```\n\n[Back](../ContractManagement.md)", "doc_id": "1a416c4f-3b82-4fc0-af7e-445deea42fb4", "embedding": null, "doc_hash": "7eda2eb56cc00fa818b7797e25f245e973a6af19567b0d3d98770c5f7ed59937", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/Deploy.html"}, "node_info": {"start": 0, "end": 1727, "_node_type": "1"}, "relationships": {"1": "1f45236df09d40d4391442605c409e55985d7e69"}}, "__type__": "1"}, "3d8cbc33-5f37-40e4-bb04-30cfaf404644": {"__data__": {"text": "# ContractManagement.Destroy Method\n\nDestroies the contract.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern void Destroy();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 Owner = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static void Destroy()\n    {\n        if (!Runtime.CheckWitness(Owner)) throw new Exception(\"No authorization.\");\n        ContractManagement.Destroy();\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\"type\":\"Any\"}]\n```\n\nResponse description:\n\n- Void type: the contract was destroyed successfully.\n\n- Other: failed.\n\n[back](../ContractManagement.md)", "doc_id": "3d8cbc33-5f37-40e4-bb04-30cfaf404644", "embedding": null, "doc_hash": "147e5f4301b44f444cb0f8f22c9d608acef3732b5db62358c075884978dad924", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/Destroy.html"}, "node_info": {"start": 0, "end": 755, "_node_type": "1"}, "relationships": {"1": "a8d7ffa4c2fa4535c5fae6c4d20257636adcef45"}}, "__type__": "1"}, "e3b15f49-cf81-4f73-83a2-fd596c3c6f0c": {"__data__": {"text": "# ContractManagement.GetContract Method\n\nGets the contract information.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Contract GetContract(UInt160 hash);\n```\n\nParameters:\n\n- hash: the contract hash\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static UInt160 ScriptHash = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object GetContract()\n    {\n        Contract contract = ContractManagement.GetContract(ScriptHash);\n        return contract != null;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n    \"type\":\"Boolean\",\n    \"value\":true\n}]\n```\n\nResponse description:\n\n- Boolean type: true indicates the contract has been deployed.\n\n- Other: failed.\n\n[Back](../ContractManagement.md)", "doc_id": "e3b15f49-cf81-4f73-83a2-fd596c3c6f0c", "embedding": null, "doc_hash": "567c1d538a35381984bf6c9dfc26c32627fe6a1eb26f2c7365911ac50484a4f6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/GetContract.html"}, "node_info": {"start": 0, "end": 848, "_node_type": "1"}, "relationships": {"1": "505c33ba0354ea9c9af98d71a21ef1752a73f674"}}, "__type__": "1"}, "b29a7782-697e-4586-865e-a164d548d746": {"__data__": {"text": "# ContractManagement.Update Method\n\nUpdate the contract.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern void Update(ByteString nefFile, string manifest);\npublic static extern void Update(ByteString nefFile, string manifest, object data = null);\n```\n\nParameters:\n\n- nefFile: nef data of the contract in byte array.\n- manifest: Metadata of the contract in Json string.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static byte[] nef = \"4e4546336e656f6e00000000000000000000000000000000000000000000000000000000332e302e302e30000000000000000000000000000000000000000000000000000211407060ba5f\".HexToBytes();\n    private static string manifest = \"{\\\"name\\\":\\\"\\\",\\\"groups\\\":[],\\\"supportedstandards\\\":[],\\\"abi\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"update\\\",\\\"parameters\\\":[],\\\"offset\\\":0,\\\"returntype\\\":\\\"Any\\\",\\\"safe\\\":false}],\\\"events\\\":[]},\\\"permissions\\\":[{\\\"contract\\\":\\\"*\\\",\\\"methods\\\":\\\"*\\\"}],\\\"trusts\\\":[],\\\"extra\\\":null}\";\n\n    public static void Update()\n    {\n        if (!Runtime.CheckWitness(Owner)) throw new Exception(\"No authorization.\");\n        ContractManagement.Update(nef, manifest);\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\"type\":\"Any\"}]\n```\n\nResponse description:\n\n- Void type: update completed.\n\n- Other: failed.\n\n> [!Note] \n>\n> The contract hash remains unchanged after the update.\n\n[Back](../ContractManagement.md)", "doc_id": "b29a7782-697e-4586-865e-a164d548d746", "embedding": null, "doc_hash": "76ce903022890d7c72ade338693d9d6c73f5831e848ba7b08606eedb75fbfce0", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/Update.html"}, "node_info": {"start": 0, "end": 1465, "_node_type": "1"}, "relationships": {"1": "e5193b1efa1aac3a7cd11cbbe798dd9c44bc4f6e"}}, "__type__": "1"}, "a986de9f-0c6e-45f0-ace3-15887a8b0680": {"__data__": {"text": "# CryptoLib Class\n\nProvides a series methods of the native contract `CryptoLib`. The contract hash is `0x726cb6e0cd8628a1350a611384688911ab75f51b`\u3002\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static class CryptoLib\n```\n\n## Attributes\n\n| Name | Description            |\n| ---- | ---------------------- |\n| Hash | Gets the contract hash |\n\n## Methods\n\n| Name                                   | Description   |\n| ---------------------------------------- | --------------- |\n| Sha256(ByteString value) | Calculates the byte array with SHA256 hash |\n| ripemd160(ByteString value) | Calculates the byte array with RIPEMD160 |\n| VerifyWithECDsa(ByteString message, Cryptography.ECC.ECPoint pubkey, ByteString signature, NamedCurve curve) | Uses elliptic curve to verify the signature |", "doc_id": "a986de9f-0c6e-45f0-ace3-15887a8b0680", "embedding": null, "doc_hash": "d633c6eb1c2634fcb0b153bd168dc33e87e9295ec10a0ee09393628c1b246c8c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/CryptoLib.html"}, "node_info": {"start": 0, "end": 861, "_node_type": "1"}, "relationships": {"1": "78ab1ede974f7f6659fc9e471232f7862616dc9a"}}, "__type__": "1"}, "8495a10f-2495-4414-bbac-1377dc14e2cc": {"__data__": {"text": "# GAS Class\n\nProvides a series of attributes and methods of the native contract `GasToken`, which contract hash is `0xd2a4cff31913016155e38e474a2c06d08be276cf`.\n\nGasToken is also an NEP-17 contract, which inherits all properties and methods of an NEP-17 contract. \n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class GAS\n```\n\n## Attributes\n\n| Name          | Description                                              |\n| ----------------- | ------------------------------------------------------------ |\n| Hash           | Gets the contract hash                  |\n| Symbol           | Gets the symbol, gas                            |\n| Decimals          | Gets decimals                   |\n\n## Methods\n\n| Name                                                         | Description                             |\n| ------------------------------------------------------------ | --------------------------------------- |\n| [TotalSupply()](Gas/TotalSupply.md)                          | Gets the total supply of GAS            |\n| [BalanceOf(UInt160 account)](Gas/BalanceOf.md)               | Gets the balance                        |\n| [Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null)](Gas/Transfer.md) | Transfers GAS                           |\n| Refuel                                                       | Refuel (adding fees) for smart contract |", "doc_id": "8495a10f-2495-4414-bbac-1377dc14e2cc", "embedding": null, "doc_hash": "eda2ce25673e984807073ed51bb18f6c71f0ce8f2a39fd30a5dbf4d3947ceee4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas.html"}, "node_info": {"start": 0, "end": 1457, "_node_type": "1"}, "relationships": {"1": "8fc2443ed25576a2a7d0dce7b6b47eec55dee768"}}, "__type__": "1"}, "568047ff-4097-4ef0-b608-493afa9715d1": {"__data__": {"text": "# GAS.BalanceOf Method\n\nGets the GAS balance in the account.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern BigInteger BalanceOf(byte[] account);\n```\n\nParameters:\n\n- account: Script hash of the account\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInteger result = GAS.BalanceOf(account);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description\n\n- Integer type: The account balance obtained successfully.\n\n- Other: failed.\n\n[Back](../Gas.md)", "doc_id": "568047ff-4097-4ef0-b608-493afa9715d1", "embedding": null, "doc_hash": "02b8c0d039214f60698a7eb58838e632f432c25421be9436fc85b1a2a5d32b05", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas/BalanceOf.html"}, "node_info": {"start": 0, "end": 799, "_node_type": "1"}, "relationships": {"1": "72c85d89dad9ce56e1bd7b41306a9055944981c9"}}, "__type__": "1"}, "c08f9f1b-c6eb-4c07-83f0-1ba306c84d09": {"__data__": {"text": "# GAS.TotalSupply Method\n\nGets the total supply of GAS.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern BigInteger TotalSupply();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        BigInteger result = GAS.TotalSupply();\n        return result;\n    }\n}\n```\n\n[Back](../Gas.md)", "doc_id": "c08f9f1b-c6eb-4c07-83f0-1ba306c84d09", "embedding": null, "doc_hash": "241de9f944e8a78d0db6d43d6404045cd4ad884e8da9ff6837aa16ff85834610", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas/TotalSupply.html"}, "node_info": {"start": 0, "end": 452, "_node_type": "1"}, "relationships": {"1": "1cdd5e8543008cbe30a2f3f5b15b1de877099a68"}}, "__type__": "1"}, "9b8d34f0-2ef4-4d1a-964d-afd71ef4fb9f": {"__data__": {"text": "# **GAS.Transfer Method**\n\nTransfers GAS\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null);\n```\n\nParameters:\n\n- from: Script hash of the account you transfer from\n- to: Script hash of the account you transfer to\n- amount: The amount to be transferred.\n- data: An additional parameter, which will be passed as a parameter when the onNEP17Payment method of the receiver is called in the transfer method of NEP-17.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 from = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    private static readonly UInt160 to = \"NXjtqYERuvSWGawjVux8UerNejvwdYg7eE\".ToScriptHash();\n\n    public static object Test()\n    {\n        bool result = GAS.Transfer(from, to, 1000);\n        return result;\n    }\n}\n```\n\nRespond:\n\n```json\n{\n\t\"type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nRespond description:\n\n- Boolean type: true means assets are transferred successfully.\n\n- Others: failed.\n\n[Back](../Gas.md)\n", "doc_id": "9b8d34f0-2ef4-4d1a-964d-afd71ef4fb9f", "embedding": null, "doc_hash": "43592f1a684f2e75449d2afbe29ad449e04735cc0e84bf7f3293d34c9d1aa87a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas/Transfer.html"}, "node_info": {"start": 0, "end": 1172, "_node_type": "1"}, "relationships": {"1": "1e716f94fe8eb558b86bdcb0e4aaa50a9c1010e3"}}, "__type__": "1"}, "21ea8e67-4e0b-4c86-8638-f4c616667d77": {"__data__": {"text": "# Ledger Class\n\nProvides a series attributes and methods of the native contract GasToken, which hash is`0xda65b600f7124ce6c79950c1772a36403104f2be`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Ledger\n```\n\n## Attributes\n\n| Name         | Description                                                  |\n| ------------ | ------------------------------------------------------------ |\n| Hash         | Gets the contract hash.                                      |\n| CurrentHash  | Gets hash of the latest block                                |\n| CurrentIndex | Gets latest block height in current blockchain<br/>Block height = Block index = Block count - 1<br/> |\n\n## Methods\n\n| Name                                                         | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [GetBlock()](Ledger/GetBlock.md)                             | Gets block by the block hash or index                        |\n| [GetTransaction(UInt256 hash)](Ledger/GetTransaction.md)     | Gets transaction by transaction ID                           |\n| [GetTransactionFromBlock()](Ledger/GetTransactionFromBlock.md) | Gets the specified transaction by the block and transaction indexes |\n| [GetTransactionHeight(UInt256 hash)](Ledger/GetTransactionHeight.md) | Gets the block height where the transaction occurs by the transaction hash |\n\n", "doc_id": "21ea8e67-4e0b-4c86-8638-f4c616667d77", "embedding": null, "doc_hash": "525d5680a5382a89f01a9a83c5f412b489180f0bbb79a8bc81030a58ea5a5235", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger.html"}, "node_info": {"start": 0, "end": 1561, "_node_type": "1"}, "relationships": {"1": "fca1dfc31725b1627035daf3faf62afef2792037"}}, "__type__": "1"}, "f00b35ce-423c-4df7-9c93-141b488237a9": {"__data__": {"text": "# Ledger.GetBlock Method\n\nGets block by the block hash or index.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Block GetBlock(uint index);\npublic static extern Block GetBlock(UInt256 hash);\n```\n\nParameters\uff1a\n\n- index: Index of the block to query\n- hash: Hash of the block to query\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Test()\n    {\n        var block = Ledger.GetBlock(100);\n    }\n    public static void Test2(UInt256 hash)\n    {\n        var block = Ledger.GetBlock(hash);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "f00b35ce-423c-4df7-9c93-141b488237a9", "embedding": null, "doc_hash": "861d8d95f186b7c92a06555245a044edc285fe63248464b4481844accdf713b4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetBlock.html"}, "node_info": {"start": 0, "end": 669, "_node_type": "1"}, "relationships": {"1": "0beea9a45e1a87a2ed3c12e3522502f6389bc1fb"}}, "__type__": "1"}, "c949bcf4-dd5a-4859-b311-074336c778d6": {"__data__": {"text": "# Ledger.GetTransaction Method\n\nGets transaction by transaction hash.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Transaction GetTransaction(UInt256 hash);\n```\n\nParameter:\n\n- hash: The hash of the queried transaction\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Test(UInt256 hash)\n    {\n        var tx = Ledger.GetTransaction(hash);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "c949bcf4-dd5a-4859-b311-074336c778d6", "embedding": null, "doc_hash": "a33f25c67851f7591d241fd4c9c749ebdb7bf0c656bb0198a7b36336f9f9c4c9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetTransaction.html"}, "node_info": {"start": 0, "end": 526, "_node_type": "1"}, "relationships": {"1": "6ece9af1b34b7a816977d753a8766911e9abd8b6"}}, "__type__": "1"}, "f7fad926-d201-40aa-a60f-522af9ebe7e7": {"__data__": {"text": "# Ledger.GetTransactionFromBlock Method\n\nGets the specified transaction by the block index (or block hash) and transaction index.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Transaction GetTransactionFromBlock(UInt256 blockHash, int txIndex);\npublic static extern Transaction GetTransactionFromBlock(uint blockHeight, int txIndex);\n```\n\nParameters:\n\n- blockHash: the hash of the specified block\n\n- blockHeight: the index of the specified block (block height)\n- txIndex: transaction index. The transaction index starts from 0 and increases sequentially.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void GetFirstTransaction(uint block)\n    {\n        var tx = Ledger.GetTransactionFromBlock(block, 0);\n    }\n    public static void GetFirstTransaction(UInt256 block)\n    {\n        var tx = Ledger.GetTransactionFromBlock(block, 0);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "f7fad926-d201-40aa-a60f-522af9ebe7e7", "embedding": null, "doc_hash": "dc09daae0aa7a77dad89adae56e44466969cf8efbed02453eb7a31ba1545f496", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetTransactionFromBlock.html"}, "node_info": {"start": 0, "end": 1017, "_node_type": "1"}, "relationships": {"1": "aa3974a530b289a3fe3a6e3908c96072f858a207"}}, "__type__": "1"}, "445076fa-7b95-4998-86d9-7ed7f4d92e27": {"__data__": {"text": "# Ledger.GetTransactionHeight Method\n\nGets the block height where the transaction occurs by the transaction hash.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern int GetTransactionHeight(UInt256 hash);\n```\n\nParameter:\n\n- hash: The hash of the queried transaction\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static int Test(UInt256 txHash)\n    {\n        return Ledger.GetTransactionHeight(txHash);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "445076fa-7b95-4998-86d9-7ed7f4d92e27", "embedding": null, "doc_hash": "27b086cc31696fbcb1ba44964ac82fd02e71dc1224753b03a59a3c0e2161ed69", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetTransactionHeight.html"}, "node_info": {"start": 0, "end": 575, "_node_type": "1"}, "relationships": {"1": "e77d169a8f8dc7ef8ace19f107581922f52f1187"}}, "__type__": "1"}, "813b99c7-b4ae-4a2a-b08b-ae8aaf916b69": {"__data__": {"text": "# NamedCurve Enumeration\n\nSupported Elliptic Curves Extension.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly\uff1aNeo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic enum NamedCurve : byte\n{\n    secp256k1 = 22,\n    secp256r1 = 23\n}\n```\n\n## Description\n\nUse in [CryptoLib.VerifyWithECDsa](../native/CryptoLib.md) method.\n\nReference [RFC 4492](https://tools.ietf.org/html/rfc4492#section-5.1.1).\n\n", "doc_id": "813b99c7-b4ae-4a2a-b08b-ae8aaf916b69", "embedding": null, "doc_hash": "ff0809931f4022f52801da63d7c24bcd95ee4099128a89839874b0d6e3b39f72", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/NamedCurve.html"}, "node_info": {"start": 0, "end": 417, "_node_type": "1"}, "relationships": {"1": "bb887ed692c4f4fb43306f15d43f9778f1a99c44"}}, "__type__": "1"}, "538e4438-0a47-46dd-b6e8-5fa86a01d823": {"__data__": {"text": "# Neo Class\n\nProvides a series of attributes and methods of the native contract NeoToken, which contract hash is `0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5`.\n\nNeoToken is also an NEP-17 contract that inherits all NEP-17 specific attributes and methods.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class NEO\n```\n\n## Attributes\n\n| Name          | Description                                              |\n| ----------------- | ------------------------------------------------------------ |\n| Name              | Gets the name, NEO   |\n| Symbol           | Gets the symbol, neo |\n| Decimals          | Gets decimals                      |\n\n## Methods\n\n| Name                                                         | Description                                     |\n| ------------------------------------------------------------ | ----------------------------------------------- |\n| [TotalSupply()](Neo/TotalSupply.md)                          | Gets the total supply of NEO                    |\n| [BalanceOf(UInt160 account)](Neo/BalanceOf.md)               | Gets the balance                                |\n| [Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null)](Neo/Transfer.md) | Transfers NEO                                   |\n| [GetGasPerBlock()](Neo/GetGasPerBlock.md)                    | Gets the number of GAS generated for each block |\n| [UnclaimedGas(UInt160 account, uint end)](Neo/UnclaimedGas.md) | Gets the number of unclaimed GAS                |\n| [RegisterCandidate(ECPoint pubkey)](Neo/RegisterCandidate.md) | Registers as a candidate                        |\n| [UnRegisterCandidate(ECPoint pubkey)](Neo/UnRegisterCandidate.md) | Unregisters as a candidate                      |\n| [Vote(UInt160 account, ECPoint voteTo)](Neo/Vote.md)         | Votes for candidates                            |\n| [GetCandidates()](Neo/GetCandidates.md)                      | Gets candidates list                            |\n|", "doc_id": "538e4438-0a47-46dd-b6e8-5fa86a01d823", "embedding": null, "doc_hash": "64fa2ced1b2aa603d2dfd234d501fd287cd4cb7aca99f607ed7832f887b07390", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo.html"}, "node_info": {"start": 0, "end": 2039, "_node_type": "1"}, "relationships": {"1": "520ccd5253712cc23e98fe7edd4dc220cfcb3148", "3": "713578f9-54cc-43a3-b8b9-dbb05cb47d7b"}}, "__type__": "1"}, "713578f9-54cc-43a3-b8b9-dbb05cb47d7b": {"__data__": {"text": "                 |\n| [GetCommittee()](Neo/GetCommittee.md)                        | Gets committee members list                     |\n| [GetNextBlockValidators()](Neo/GetNextBlockValidators.md)    | Gets validators list for the next block         |\n| [GetAccountState(DataCache snapshot, UInt160 account)](Neo/GetAccountState.md) | Gets the latest votes of the specified  account |\n\n", "doc_id": "713578f9-54cc-43a3-b8b9-dbb05cb47d7b", "embedding": null, "doc_hash": "affd1011ca89bb33d3dacc0f37c7f8bb7ab634cd6287a8fabf8947a79e94100b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo.html"}, "node_info": {"start": 2019, "end": 2402, "_node_type": "1"}, "relationships": {"1": "520ccd5253712cc23e98fe7edd4dc220cfcb3148", "2": "538e4438-0a47-46dd-b6e8-5fa86a01d823"}}, "__type__": "1"}, "3196c1be-11cf-4ca6-89f8-39a4a8523dfb": {"__data__": {"text": "# **NEO.BalanceOf** Method (UInt160)\n\nGets the NEO balance in the account.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern BigInteger BalanceOf(UInt160 account);\n```\n\nParameters:\n\n- account: Script hash of the account\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInteger result = NEO.BalanceOf(account);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description:\n\n- Integer type: The account balance is obtained successfully.\n\n- Others: failed.\n\n[Back](../Neo.md)\n\n", "doc_id": "3196c1be-11cf-4ca6-89f8-39a4a8523dfb", "embedding": null, "doc_hash": "67d83199d778cf5d3265450bfc709a06a2958022b20feeff72484a1e20a39f8b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/BalanceOf.html"}, "node_info": {"start": 0, "end": 821, "_node_type": "1"}, "relationships": {"1": "71c0ecf8add2eb85487d281e54a58ca42aba4b6d"}}, "__type__": "1"}, "b64bd9a7-7e1f-42ae-bf5b-42ac56235811": {"__data__": {"text": "# NEO.GetAccountState Method ()\n\nGets the latest votes of the specified account.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```\npublic static extern NeoAccountState GetAccountState(DataCache snapshot, UInt160 account)\n```\n\n## Example\n\n```\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    \n    public static object Test()\n    {\n        return NEO.GetAccountState(account);\n    }\n}\n```\n\nResponse body:\n\n```\n[\n      {\n        \"type\": \"Struct\",\n        \"value\": [\n          {\n            \"type\": \"Integer\",\n            \"value\": \"900\"\n          },\n          {\n            \"type\": \"Integer\",\n            \"value\": \"9774\"\n          },\n          {\n            \"type\": \"ByteString\",\n            \"value\": \"AsNeyvySxknpefBTobcD9O\\u002BQiieFUIdCtmzAWZvxQPA4\"\n          }\n        ]\n      }\n]\n```\n\nResponse description:\n\n- 1st value: the current account balance, which equals to the votes cast. \n- 2nd value: The block height at last update.\n- 3rd value: The public key of the account address to vote.\n\n[Back](../Neo.md)", "doc_id": "b64bd9a7-7e1f-42ae-bf5b-42ac56235811", "embedding": null, "doc_hash": "8784381c55792dab4ce1faf06fc4a49a6bbf493babed6a30886d687bbd334d22", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetAccountState.html"}, "node_info": {"start": 0, "end": 1198, "_node_type": "1"}, "relationships": {"1": "20c794285446ac86257df2cec9ec228c881271d1"}}, "__type__": "1"}, "57de8aec-2658-459e-a9a5-cdcc418c356e": {"__data__": {"text": "# NEO.GetCandidates Method ()\n\nGets the list of candidates.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern (ECPoint, BigInteger)[] GetCandidates();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        (ECPoint, BigInteger)[] result = NEO.GetCandidates();\n        return result;\n    }\n}\n```\n\nResponse description:\n\n```json\n[{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"Struct\",\n\t\t\"value\": [{\n\t\t\t\"type\": \"ByteString\",\n\t\t\t\"value\": \"Apls6R4n/uoL7MTn/cB3Llj8G\\u002BuLJ7LUyL/JWBQg4I0y\"\n\t\t}, {\n\t\t\t\"type\": \"Integer\",\n\t\t\t\"value\": \"10000\"\n\t\t}]\n\t}]\n}]\n```\n\nResponse description:\n\n- Array type: candidates are successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)\n\n", "doc_id": "57de8aec-2658-459e-a9a5-cdcc418c356e", "embedding": null, "doc_hash": "6bda65077da78ff8ff8e5325569b62cc2f8d158223382fc1617bd05450c2c0da", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetCandidates.html"}, "node_info": {"start": 0, "end": 838, "_node_type": "1"}, "relationships": {"1": "6c6ca6ff3b8c05a01d6ae8e81bc4bfeab8d3b075"}}, "__type__": "1"}, "a23ec419-5332-45b4-946c-23033fe244cc": {"__data__": {"text": "# NEO.GetCommittee Method ()\n\nGets the list of committee members.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern string[] GetCommittee();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        string[] result = NEO.GetCommittee();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"Auj/F8Vn1i8nT\\u002BJHzIhKKmzTuP0Nd5qMWFYomlYKzKy0\"\n\t}]\n}]\n```\n\nRespond description:\n\n- Array type: committee members are successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "a23ec419-5332-45b4-946c-23033fe244cc", "embedding": null, "doc_hash": "14282de8a0074ba9f383a137a8a2423b8b420b5085d17f1c1040749710867058", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetCommittee.html"}, "node_info": {"start": 0, "end": 719, "_node_type": "1"}, "relationships": {"1": "6ff7b71da1425ca5258e67c4abcd64a76c768124"}}, "__type__": "1"}, "564d0986-3731-4fe6-b314-3a3b62258233": {"__data__": {"text": "# NEO.GetGasPerBlock Method ()\n\nGets the number of GAS generated in each block.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern BigInteger GetGasPerBlock();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        BigInteger result = NEO.GetGasPerBlock();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description:\n\n- Integer type: the number of GAS generated in each block\n\n- Others: failed\n\n[Back](../Neo.md)", "doc_id": "564d0986-3731-4fe6-b314-3a3b62258233", "embedding": null, "doc_hash": "b26ad25e7f7e4eac80d2fc7b482c009c75a265fc8f6bbc1e9bfbdd442df0c721", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetGasPerBlock.html"}, "node_info": {"start": 0, "end": 655, "_node_type": "1"}, "relationships": {"1": "d97bbf00291e5613c81c7ea86eda888df9d06bf7"}}, "__type__": "1"}, "0002db59-895e-4e03-9fa9-7b4cbfb90ac8": {"__data__": {"text": "# NEO.GetNextBlockValidators Method ()\n\nGets the list of validators for the next block\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern string[] GetNextBlockValidators();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        string[] result = NEO.GetNextBlockValidators();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"Auj/F8Vn1i8nT\\u002BJHzIhKKmzTuP0Nd5qMWFYomlYKzKy0\"\n\t}]\n}]\n```\n\nResponse description:\n\n- Array type: validators by persisting block are successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "0002db59-895e-4e03-9fa9-7b4cbfb90ac8", "embedding": null, "doc_hash": "3df12948ed4c7fe0e4a98096c50f709b1764909bf032348a70608407fdba6d34", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetNextBlockValidators.html"}, "node_info": {"start": 0, "end": 774, "_node_type": "1"}, "relationships": {"1": "687eb09745c8ce58c3837f6727dbf037c54b161b"}}, "__type__": "1"}, "0178ec7c-9448-4775-8a71-7ebdd2b9a3ab": {"__data__": {"text": "# NEO.RegisterCandidate Method\n\nRegisters as a candidate.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n> [!Note]\n>\n> Candidate registration requires the candidate's signature. It means candidate registering is only self-determined. \n\n## Syntax\n\n```c#\npublic static extern bool RegisterCandidate(ECPoint pubkey);\n```\n\nParameter\uff1a\n\n- pubkey: The public key of the account to be registered.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly byte[] pubkey = \"02e8ff17c567d62f274fe247cc884a2a6cd3b8fd0d779a8c5856289a560accacb4\".HexToBytes();\n\n    public static object Test()\n    {\n        bool result = NEO.RegisterCandidate((ECPoint)pubkey);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n   \t\"type\":\"Boolean\",\n   \t\"value\":\"true\"\n}\n```\n\nResponse description:\n\n- Boolean type: true means candidate registration is succeeded.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "0178ec7c-9448-4775-8a71-7ebdd2b9a3ab", "embedding": null, "doc_hash": "f05c812b740138167a0c1535cd85ed0de78ad4a26cce307969346a9a252f6fe8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/RegisterCandidate.html"}, "node_info": {"start": 0, "end": 994, "_node_type": "1"}, "relationships": {"1": "fa51e0dc2e7fde580781d72ccd8a7124c7cf4ee0"}}, "__type__": "1"}, "810d6691-7062-49ae-8734-a2e80db2756e": {"__data__": {"text": "# NEO.TotalSupply Method\n\nGets the total supply of NEO.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern BigInteger TotalSupply();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        BigInteger result = NEO.TotalSupply();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description:\n\n- Integer type: token total supply is successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "810d6691-7062-49ae-8734-a2e80db2756e", "embedding": null, "doc_hash": "96b729b46c8f3f1856abe625f32e3be013553839fc2a44a108b296f4521b66e4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/TotalSupply.html"}, "node_info": {"start": 0, "end": 630, "_node_type": "1"}, "relationships": {"1": "b91c9b9ca60cca930c66820e325b128745d2ed66"}}, "__type__": "1"}, "4da65b5d-2def-4c77-a7b1-0ab4c2b36b14": {"__data__": {"text": "# NEO.Transfer Method \n\nTransfers NEO.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n> [!Note]\n>\n> The method will check sender's signature, whether caller is sender, whether receiver is payable, and whether sender's balance is enough.\n\n## Syntax\n\n```c#\npublic static extern bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null);\n```\n\nParameters:\n\n- from: Script hash of the account you transfer from\n- to: Script hash of the account you transfer to\n- amount: The amount to be transferred.\n- data: An additional parameter, which will be passed as a parameter when the onNEP17Payment method of the receiver is called in the transfer method of NEP-17.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 from = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    private static readonly UInt160 to = \"NXjtqYERuvSWGawjVux8UerNejvwdYg7eE\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInterger value = 1000;\n        bool result = NEO.Transfer(from, to, value);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nResponse description:\n\n- true:  assets are transferred successfully.\n\n- Others: failed.\n\n[Back](../Neo.md)\n", "doc_id": "4da65b5d-2def-4c77-a7b1-0ab4c2b36b14", "embedding": null, "doc_hash": "5f169aa3876f357757380592476be2c539170c42d3c1559c914cd72847f7f214", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/Transfer.html"}, "node_info": {"start": 0, "end": 1346, "_node_type": "1"}, "relationships": {"1": "fac593e317fbd0fdbbc5e0d62feec3054fe5024c"}}, "__type__": "1"}, "3f627794-1845-4c2c-add3-da4ba8dd3139": {"__data__": {"text": "# NEO.UnRegisterCandidate Method\n\nUnregisters as a candidate.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n> [!Note]\n>\n> Unregistering candidate requires the candidate's signature. It means candidate unregistering is only self-determined. \n\n## Syntax\n\n```c#\npublic static extern bool UnRegisterCandidate(ECPoint pubkey);\n```\n\nParameter:\n\n- pubkey: the public key of the account to be unregistered.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly byte[] pubkey = \"02e8ff17c567d62f274fe247cc884a2a6cd3b8fd0d779a8c5856289a560accacb4\".HexToBytes();\n\n    public static object Test()\n    {\n        bool result = NEO.UnRegisterCandidate((ECPoint)pubkey);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nResponse description:\n\n- true: The candidate is successfully unregistered.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "3f627794-1845-4c2c-add3-da4ba8dd3139", "embedding": null, "doc_hash": "f8acf87a44c467d763044335fda7f3a4bee2333cc7c4e9906a2b601d8f00e4a8", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/UnRegisterCandidate.html"}, "node_info": {"start": 0, "end": 989, "_node_type": "1"}, "relationships": {"1": "03af670ecaab16815c5a1797f3ec8fe3fbb260c0"}}, "__type__": "1"}, "a7493407-1afc-472a-945f-b5f14a2b9367": {"__data__": {"text": "# NEO.UnclaimedGas Method\n\nGets the number of unclaimed GAS.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern BigInteger UnclaimedGas(UInt160 account, uint end);\n```\n\nParameters\n\n- account: The script hash of the account to be queried;\n- end: To which block height the query ends.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInteger result = NEO.UnclaimedGas(account, 100);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000\"\n}\n```\n\nResponse description:\n\n- Integer type: unclaimed GAS amount of this address is successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "a7493407-1afc-472a-945f-b5f14a2b9367", "embedding": null, "doc_hash": "84ac19459b82037d4361dab5006f1ad04d33b0edba6ff89324cbe6d083e65660", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/UnclaimedGas.html"}, "node_info": {"start": 0, "end": 904, "_node_type": "1"}, "relationships": {"1": "430b4a3ee1d6a6f3e5f93791ba96108446979c01"}}, "__type__": "1"}, "720c7960-be33-4518-a105-da897ebc0694": {"__data__": {"text": "# NEO.Vote Method\n\nVotes for the candidates.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n> [!Note]\n>\n> - Voting towards non-candidate is recorded but not taken into account in committee & validator election. However, such votes will be effective as soon as the voted address becomes a candidate.\n> - Voter's signature will be checked. \n\n## Syntax\n\n```c#\npublic static extern bool Vote(UInt160 account, ECPoint voteTo);\n```\n\nParameters:\n\n- account: Script hash of the voting account.\n- voteTo: Public key of the account to vote.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    private static readonly byte[] pubkey = \"02e8ff17c567d62f274fe247cc884a2a6cd3b8fd0d779a8c5856289a560accacb4\".HexToBytes();\n\n    public static object Test()\n    {\n        bool result = NEO.Vote(account, (ECPoint)pubkey);\n        return result;\n    }\n}\n```\n\n\u54cd\u5e94\u6b63\u6587\uff1a\n\n```json\n{\n\t\"type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nRespond description:\n\n- Boolean type: voted successfully.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "720c7960-be33-4518-a105-da897ebc0694", "embedding": null, "doc_hash": "c9cd314b26767ee510c448951c6574b5125c2a36176a0656b8c07beeb9c371da", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/Vote.html"}, "node_info": {"start": 0, "end": 1187, "_node_type": "1"}, "relationships": {"1": "337148ee2a04d225830818a16eec6189a4f439c7"}}, "__type__": "1"}, "260e6c75-73a6-44ee-aab9-6667db05d7d9": {"__data__": {"text": "# Oracle Class\n\nProvides a series of methods of the native contract Oracle, which contract hash is `0xfe924b7cfe89ddd271abaf7210a80a7e11178758`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Oracle\n```\n\n## Attribute\n\n| Name | Description       |\n| ---- | ----------------- |\n| Hash | The contract hash |\n\n## Method\n\n| Name                                                         | Description                          |\n| ------------------------------------------------------------ | ------------------------------------ |\n| GetPrice()                                                   | Gets the price for an Oracle request |\n| [Request(string url, string filter, string callback, object userData, long gasForResponse)](Oracle/Request.md) | Initiates an Oracle request          |", "doc_id": "260e6c75-73a6-44ee-aab9-6667db05d7d9", "embedding": null, "doc_hash": "8e9e99311ce95a66440eeae92c62ad0dbb044713f2ec1910c53df7addcaaaaef", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Oracle.html"}, "node_info": {"start": 0, "end": 867, "_node_type": "1"}, "relationships": {"1": "add4da5c3ab8c45ad2d2025f92ecee8c986a371f"}}, "__type__": "1"}, "332251bc-12d1-45cd-a207-7bb7d9e088e9": {"__data__": {"text": "# Request Method\n\nInitiates an Oracle request.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern void Request(string url, string filter, string callback, object userData, long gasForResponse);\n```\n\nParameters\uff1a\n\n- url: The request Url\n- filter: Filter, used to filter useless data\n- callback: Callback function\n- userData: Additional data provided by the user\n- long: The cost of getting a response\n\n## Example\n\n```c#\nnamespace demo\n{\n    [DisplayName(\"Oracle Demo\")]\n    [ManifestExtra(\"Author\", \"Neo\")]\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a Oracle contract example\")]\n    public class OracleDemo: SmartContract\n    {\n        static readonly string PreResponseData = \"ResponseData\";\n\n        /// <summary>\n        /// Create a request.\n        /// </summary>\n        /// <param name=\"url\">URL\uff0ce.g.\"http://127.0.0.1:8080/test\"</param>\n        /// <param name=\"filter\">Filter,e.g.\"$.value\"; JSONPath, { \"value\": \"hello world\" }</param>\n        /// <param name=\"callback\">Callback method,e.g.\"callback\"</param>\n        /// <param name=\"userData\">User data,e.g.new byte[0]</param>\n        /// <param name=\"gasForResponse\">Gas for response,e.g.10000000</param>\n        public static void Request(string url,string filter,string callback,byte[] userData,long gasForResponse) {\n            Oracle.Request(url, filter, callback, userData, gasForResponse);\n        }\n\n        /// <summary>\n        /// Callback method\n        /// </summary>\n        /// <param name=\"url\">Url</param>\n        /// <param name=\"userData\">User data</param>\n        /// <param name=\"code\">Response status</param>\n        /// <param name=\"result\">Result data</param>\n        public static void Callback(string url, byte[] userData, int code, byte[] result) {\n            Storage.Put(Storage.CurrentContext, PreResponseData, result.ToByteString());\n        }\n        public static string GetData()\n        {\n            return Storage.Get(Storage.CurrentContext, PreResponseData);\n        }\n    }\n}\n```\n\n[Back](../Oracle.md)", "doc_id": "332251bc-12d1-45cd-a207-7bb7d9e088e9", "embedding": null, "doc_hash": "a1e87a24010932806eb5ec2bbb8c734ee418ad9f60b225f7faa850e84c78b096", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Oracle/Request.html"}, "node_info": {"start": 0, "end": 2136, "_node_type": "1"}, "relationships": {"1": "8dcfa5c69c66f1b2b04d97b1eeca7a3e98f46067"}}, "__type__": "1"}, "9b1b377f-820f-4d8c-9470-4c7f40a77851": {"__data__": {"text": "# OracleResponseCode Enumeration\n\nDefines response types of Oracle.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic enum OracleResponseCode : byte\n{\n    Success = 0x00,\n\n    ProtocolNotSupported = 0x10,\n    ConsensusUnreachable = 0x12,\n    NotFound = 0x14,\n    Timeout = 0x16,\n    Forbidden = 0x18,\n    ResponseTooLarge = 0x1a,\n    InsufficientFunds = 0x1c,\n\n    Error = 0xff\n}\n```\n\n##### Description\n\n- Success: success\n\n- ProtocolNotSupported: The protocol is not supported.\n\n- ConsensusUnreachable: Consensus failed.\n\n- NotFound: HTTP 404 request failed. The requested resource was not found on the server.\n\n- Timeout: HTTP 408 request timeout.\n\n- Forbidden: The HTTP 403 server already understands the request, but refuses to execute it.\n\n- ResponseTooLarge: HTTP 413 Request Entity Too Large. The server refuses to process the current request because the size of the entity submitted by the request is larger than the server is willing or able to process.\n\n- InsufficientFunds: system fee is insufficient.\n\n- Error: other errors\n\n\nYou need to fill in the callback function name in [Oracle.Rqeuest](Oracle/Request.md). The order of the parameter data types of the callback function is fixed and must be `string url, byte[] userData, int code, byte[] result`. The code can be judged in the contract and different logic codes can be executed. Such as:\n\n```c#\npublic static void Callback(string url, byte[] userData, int code, byte[] result)\n{\n    switch (code)\n    {\n        case OracleResponseCode.Success: \n            \n            break;\n        case OracleResponseCode.NotFound: \n            \n            break;\n    }\n}\n```\n\n\n\n", "doc_id": "9b1b377f-820f-4d8c-9470-4c7f40a77851", "embedding": null, "doc_hash": "50c74c6b5340580a40e0889f11d5ad20d69c78843bdf1585a2ec9bdb0556376e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/OracleResponseCode.html"}, "node_info": {"start": 0, "end": 1711, "_node_type": "1"}, "relationships": {"1": "8299cf6a6f25fcdfbf3c49ca3a1cab5046f20f27"}}, "__type__": "1"}, "a1eb3477-9bf1-4d58-83ed-6d5edcd63d68": {"__data__": {"text": "# Policy Class\n\nProvides a series of methods of the native contract Policy, which contract hash is `0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Policy\n```\n\n## Attribute\n\n| Name | Description       |\n| ---- | ----------------- |\n| Hash | The contract hash |\n\n## Methods\n\n| Name                                              | Description                                                  |\n| ------------------------------------------------- | ------------------------------------------------------------ |\n| [GetFeePerByte()](Policy/GetFeePerByte.md)        | Gets the network fee per transaction byte                    |\n| [GetExecFeeFactor()](Policy/GetExecFeeFactor.md)  | Gets the execution fee factor. This is a multiplier that can be adjusted by the committee to adjust the system fees for transactions |\n| [GetStoragePrice()](Policy/GetStoragePrice.md)    | Gets the storage price                                       |\n| [IsBlocked(UInt160 account)](Policy/IsBlocked.md) | Determines whether the specified account is blocked          |\n\n", "doc_id": "a1eb3477-9bf1-4d58-83ed-6d5edcd63d68", "embedding": null, "doc_hash": "385953b1d7b99a08db04c4975ce614333ae02eb5c2626cebf56f061ffde44ac3", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy.html"}, "node_info": {"start": 0, "end": 1178, "_node_type": "1"}, "relationships": {"1": "3a410e386dfc6c7e78f8c85ae93a5d5ea5dd05cd"}}, "__type__": "1"}, "38f4f69f-9690-47b3-bcbb-dfefc154621d": {"__data__": {"text": "# Policy.GetExecFeeFactor Method\n\nGets NeoVM execution fee. \n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern uint GetExecFeeFactor();\n```\n\nReturn:\n\n- vm execution fee\n\n## Example\n\n```c#\npublic static void Test()\n{\n    var factor = Policy.GetExecFeeFactor();\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "38f4f69f-9690-47b3-bcbb-dfefc154621d", "embedding": null, "doc_hash": "41246276e7e214f5c1efebb622a334447255a3f8fabde2fce8f3bd0b85eaac83", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/GetExecFeeFactor.html"}, "node_info": {"start": 0, "end": 382, "_node_type": "1"}, "relationships": {"1": "4e5df3702b6f8844702380d2a1dec7f9af5749f6"}}, "__type__": "1"}, "92df290f-19fb-4901-ad55-4108bb6a9e40": {"__data__": {"text": "# Policy.GetFeePerByte Method\n\nGets the transaction network fee per byte.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern long GetFeePerByte();\n```\n\nReturn:\n\n- Transaction network fee per byte\n\n## Example\n\n```c#\npublic static void Test()\n{\n    var feePerByte = Policy.GetFeePerByte();\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "92df290f-19fb-4901-ad55-4108bb6a9e40", "embedding": null, "doc_hash": "c7cba03719a84dc83faa8fa351828a93cd7fe61a65656b96c3f2e12eb57f2b29", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/GetFeePerByte.html"}, "node_info": {"start": 0, "end": 409, "_node_type": "1"}, "relationships": {"1": "e8672ffed7586465dc5fc8030096597cb96e1621"}}, "__type__": "1"}, "ebff1df4-a1ea-4570-a605-0f35d89a8b46": {"__data__": {"text": "# Policy.GetStoragePrice Method\n\nGets data storage fee per byte.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern uint GetStoragePrice();\n```\n\nReturn:\n\n- Data storage fee per byte\n\n## Example\n\n```c#\npublic static void Test()\n{\n    var price = Policy.GetStoragePrice();\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "ebff1df4-a1ea-4570-a605-0f35d89a8b46", "embedding": null, "doc_hash": "4efbca1f939421251f67b9248cbfaf58f923f9692b3ca11d2fd0261048c30763", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/GetStoragePrice.html"}, "node_info": {"start": 0, "end": 392, "_node_type": "1"}, "relationships": {"1": "cb8d46fd103ab8650f2ceac6ea9534f67aed47f0"}}, "__type__": "1"}, "14275e7d-6a0f-4aec-befe-c7d41992ad58": {"__data__": {"text": "# Policy.IsBlocked Method\n\nVerifies if the specified account is blocked.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern bool IsBlocked(UInt160 account);\n```\n\nParameter:\n\n- account: the specified account\n\nReturn:\n\n- Whether the account is blocked\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        var isBlocked= Policy.IsBlocked(account);\n    }\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "14275e7d-6a0f-4aec-befe-c7d41992ad58", "embedding": null, "doc_hash": "3d51ee55cf4ff9cd7a0d56018b945df2354982b40efb5c4f67f6b7d169bd96b6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/IsBlocked.html"}, "node_info": {"start": 0, "end": 649, "_node_type": "1"}, "relationships": {"1": "a2948ebfc17236c036107526eb206f0f50f925b6"}}, "__type__": "1"}, "026006e6-2b15-45e6-a319-c39a7ee53e25": {"__data__": {"text": "# Role Class\n\nDefines permission types of the native contract `RoleManagement`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic enum Role : byte\n{\n    StateValidator = 4,\n    Oracle = 8\n}\n```\n\nFor more information see the method `GetDesignatedByRole` in [RoleManagement](RoleManagement.md).\n\n", "doc_id": "026006e6-2b15-45e6-a319-c39a7ee53e25", "embedding": null, "doc_hash": "db1b7d6d12ffd98e4fe32ba78cf88d07f770c25c8b17bc69f4e96ff3b7176531", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Role.html"}, "node_info": {"start": 0, "end": 370, "_node_type": "1"}, "relationships": {"1": "4f4bef178133355a54c28e3090c85960f49a4105"}}, "__type__": "1"}, "22b9140a-bd53-4402-a541-85f37de8dead": {"__data__": {"text": "# RoleManagement Class\n\nProvides a series attributes and methods of the native contract `RoleManagement`, which contract hash is`0x49cf4e5378ffcd4dec034fd98a174c5491e395e2`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class RoleManagement\n```\n\n## Attribute\n\n| Name | Description            |\n| ---- | ---------------------- |\n| Hash | Gets the contract hash |\n\n## Method\n\n| Name                                                         | Description                                   |\n| ------------------------------------------------------------ | --------------------------------------------- |\n| [GetDesignatedByRole(Role role, uint index)](RoleManagement/GetDesignatedByRole.md) | Gets the list of nodes for the specified role |\n\n", "doc_id": "22b9140a-bd53-4402-a541-85f37de8dead", "embedding": null, "doc_hash": "953c5bb0ca51aab762f161d84a7aa7bf966b7d22dee079630a5c6976db8f3f05", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/RoleManagement.html"}, "node_info": {"start": 0, "end": 817, "_node_type": "1"}, "relationships": {"1": "e45f85eb56ba48bc119c054da35db4f44baf4abf"}}, "__type__": "1"}, "7e8a8b57-7856-45db-ae79-b3830ec1c2a0": {"__data__": {"text": "# RoleManagement.GetDesignatedByRole Method\n\nGets the block where the transaction occurs with transaction hash.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Cryptography.ECC.ECPoint[] GetDesignatedByRole(Role role, uint index);\n```\n\nParameter:\n\n- role: The type of the role\n- index: The index of the block to be queried\n\nreturns: \n\n- The public keys of the nodes\n\n## Example\n\n```c#\npublic static void Test()\n{\n    var nodes = RoleManagement.GetDesignatedByRole(Role.Oracle, 0);\n}\n```\n[Back](../RoleManagement.md)\n\n", "doc_id": "7e8a8b57-7856-45db-ae79-b3830ec1c2a0", "embedding": null, "doc_hash": "f61e8b553e74cf5d1d67c478bf81853700660ef20a63fd0c232181a1307b04ba", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/RoleManagement/GetDesignatedByRole.html"}, "node_info": {"start": 0, "end": 612, "_node_type": "1"}, "relationships": {"1": "91b0c08afea06ec25ed38a75015996d3be3c7d0d"}}, "__type__": "1"}, "c5fd0edd-8770-48e9-b5ca-ad29e0bd8dcd": {"__data__": {"text": "# StdLib Class\n\nProvides a series methods of the native contract `StdLib`, which contract hash is `0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0`.\n\nNamespace: [Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static class StdLib\n```\n\n## Attributes\n\n| Name | Description            |\n| ---- | ---------------------- |\n| Hash | Gets the contract hash |\n\n## Methods\n\n| Name                                   | Description   |\n| ---------------------------------------- | --------------- |\n| Serialize(object source) | Serializes the object to byte array |\n| Deserialize(ByteString source) | Deserializes the byte array to object |\n| JsonSerialize(object obj) | Serializes the object to Json |\n| JsonDeserialize(string json) | Deserializes the Json to object |\n| Base64Decode(string input) | Decodes the Base64-encoded string into byte array |\n| Base64Encode(ByteString input) | Encodes the byte array into Base64 string |\n| Base58Decode(string input) | Decodes the Base58 encoded string into byte array |\n| Base58Encode(ByteString input) | Encodes the byte array into Base58 string |\n| Base58CheckDecode(string input) | Decodes the Base58Check encoded string into byte array |\n| Base58CheckEncode(ByteString input) | Encodes the byte array into Base58Check string |\n| Itoa | Converts the integer to string |\n| Atoi(string value, int @base = 10) | Converts the string to integer |\n| MemoryCompare(ByteString, ByteString) | If two arrays are the same, return 0; if array 1 is less than array 2, return a value less than 0; if array 1 is greater than array 2, return a value greater than 0 |\n| MemorySearch | Returns the index of the first match of array 2 in array 1, or -1 if no match |\n| StringSplit | Creates an array of substrings by splitting the input string based on one or more delimiters |", "doc_id": "c5fd0edd-8770-48e9-b5ca-ad29e0bd8dcd", "embedding": null, "doc_hash": "f52bcc426685892bc474d27873241ecdfdb9285cf80ec0002fa496a071d924e1", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/StdLib.html"}, "node_info": {"start": 0, "end": 1855, "_node_type": "1"}, "relationships": {"1": "fdc9e907e6ced0d62229e2ca99a39d26902ad685"}}, "__type__": "1"}, "dccd3c1b-54d5-44af-b37e-714265f81711": {"__data__": {"text": "# Neo.SmartContract.Framework.Services\n\n## Class\n\n| Class                                                        | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Block](services/Block.md)       | A class representing a block, provides a set of block-specific properties. |\n| [Contract](services/Contract.md) | A class representing a contract.                             |\n| [Crypto](services/Crypto.md)     | Provides the ECDsa method to verify the signature.           |\n| [Iterator](services/Iterator.md) | The customized iterator in the smart contract.               |\n| [Notification](services/Notification.md) | The notification sent when the contract is executed.         |\n| [Runtime](services/Runtime.md)   | Provides a set of methods during smart contract execution    |\n| [Storage](services/Storage.md)   | Provides a set of methods to insert, query, or delete data of a persistent store |\n| [StorageContext](services/StorageContext.md) | A class representing storage context of the persistent storage |\n| [StorageMap](services/StorageMap.md) | A key-value storage for a specific prefix in the given storage context. |\n| [Transaction](services/Transaction.md) | The base class representing the transaction                  |\n\n## Enumeration\n\n| Enumeration                            | Description                                                  |\n| -------------------------------------- | ------------------------------------------------------------ |\n| [CallFlags](services/CallFlags.md)     | Defines the pattern when invoking contracts                  |\n| [FindOptions](services/FindOptions.md) | Defines search options for searching a storage. Used in the  Storage.Find method. |\n| [TriggerType](services/TriggerType.md) | Defines the trigger types                                    |\n\n", "doc_id": "dccd3c1b-54d5-44af-b37e-714265f81711", "embedding": null, "doc_hash": "60ba076563b0beba15c58d5ea1320365cdaf4ac834ef4e89c503e0ed098ac833", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services.html"}, "node_info": {"start": 0, "end": 1952, "_node_type": "1"}, "relationships": {"1": "77317c54cb7795d54d933e141fdd1f3a00f34763"}}, "__type__": "1"}, "b987ff8c-481c-4b6a-918f-89887e1666b3": {"__data__": {"text": "# Block Class\n\nThe class that represents blocks, providing a set of related properties.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Block\n```\n\n## Attributes\n\n| Name              | Description                                                  |\n| ----------------- | ------------------------------------------------------------ |\n| Hash              | Gets the block hash                                          |\n| Version           | Gets the block version number                                |\n| PrevHash          | Gets the hash of the previous block                          |\n| MerkleRoot        | Gets the Merkle root of the block                            |\n| Timestamp         | Get the time stamp of the block                              |\n| Index             | Gets the block index which is counted from 0<br/>Index = Height = Count - 1 |\n| PrimaryIndex      | The primary(speaker) index of the consensus node that generated this block |\n| NextConsensus     | Get the consensus contract for the next block, i.e. multi-party signed contract composed of more than 2/3 consensus nodes) |\n| TransactionsCount | Gets the transaction number of the block                     |\n\n## Constructor\n\nThe Block object can be constructed through [Ledger.GetBlock()](../native/Ledger/GetBlock.md).\n\n", "doc_id": "b987ff8c-481c-4b6a-918f-89887e1666b3", "embedding": null, "doc_hash": "b5a4af835bf240a976cff55872994fbf49096876ed61b86e1704a8e4269567bb", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Block.html"}, "node_info": {"start": 0, "end": 1389, "_node_type": "1"}, "relationships": {"1": "a492402ef25459084bd7911800c455964cb3ba31"}}, "__type__": "1"}, "801df3f1-6c3c-4c9a-a3d4-71bff5617860": {"__data__": {"text": "# CallFlags Enumerator\n\nDefines special behaviors allowed when invoking smart contracts, such as chain calls, sending notifications, modifying states, etc.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic enum CallFlags : byte\n{\n    None = 0,\n\n    AllowModifyStates = 0b00000001,\n    AllowCall = 0b00000010,\n    AllowNotify = 0b00000100,\n\n    ReadOnly = AllowCall | AllowNotify,\n    All = AllowModifyStates | AllowCall | AllowNotify\n}\n```\n\n### Parameters description\n\nNone: Special behaviors of the invoked contract are not allowed, such as chain calls, sending notifications, modifying state, etc.\n\nAllowModifyStates: Allows the invoked contract to modify status.\n\nAllowCall: Allows the invoked contract to do chain calls.\n\nAllowNotify: Allows the invoked contract to send notifications.\n\nReadOnly: Allows the invoked contract to do chain calls and send notifications.\n\nAll: All behaviors of the invoked contract are allowed.\n\nCallFlags is used in the method [Call(UInt160, string, CallFlags, params object[])](Contract/Call.md).\n\nYou can also get CallFlags of native contract by [GetCallFlags()](Contract/GetCallFlags.md) .", "doc_id": "801df3f1-6c3c-4c9a-a3d4-71bff5617860", "embedding": null, "doc_hash": "ce889ab1021cdf7fc0af8deda6d43cee239a9b5fff64d3bb32a83f3e7e68b42e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/CallFlags.html"}, "node_info": {"start": 0, "end": 1206, "_node_type": "1"}, "relationships": {"1": "965e8703354bebadd36c94286c3dfe1b703dbc3e"}}, "__type__": "1"}, "4fb17398-95b5-4193-96e5-2216881f977f": {"__data__": {"text": "# Contract Class\n\nThe class representing a contract.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Contract\n```\n\n## Attributes\n\n| Name | Description |\n| -------------------------------- | ------ |\n| Id     | Contract Id. The native contract ID is a negative integer, and the normal contract ID is a positive integer. |\n| UpdateCounter | Contract update counter |\n| Hash  | Contract hash, which is determined by the deployer's script hash, the contract NEF checkcode, and the contract name. |\n| Nef | Nef |\n| Manifest  | Json strings that represents the contract Manifest |\n\n## Methods\n\n| Name | Description |\n| -------------------------------- | ------ |\n| [Call(UInt160 scriptHash, string method, object[] arguments)](Contract/Call.md) | Invokes the contract |\n| [GetCallFlags()](Contract/GetCallFlags.md)         | Gets the CallFlag of the contract |\n| [CreateStandardAccount()](Contract/CreateStandardAccount.md)         | Generate a script hash of standard account with public key |\n| CreateMultisigAccount(int, params Cryptography.ECC.ECPoint[]) | Generate a script hash of multi-signature accounts based on the public key list and minimum number of signatures |\n\n## Constructor\n\nThe Contract object can be constructed through [ContractManagement.GetContract(UInt60 hash)](../native/ContractManagement/GetContract.md).\n\n [ContractManagement.Deploy(byte[] nefFile, string manifest)](../native/ContractManagement/Deploy.md) publishes the contract onto the blockchain and returns a contract object.\n\n", "doc_id": "4fb17398-95b5-4193-96e5-2216881f977f", "embedding": null, "doc_hash": "1e641899a2e9395b24f2195110d11bd60fe4f47dbad4368af90fbb5221dc7a97", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract.html"}, "node_info": {"start": 0, "end": 1592, "_node_type": "1"}, "relationships": {"1": "0c47a1a54d1c86b466f31147be094047cd290390"}}, "__type__": "1"}, "52fe1ca3-db34-4798-8be6-1715a69fc62f": {"__data__": {"text": "# Contract.Call Method\n\nInvokes the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern object Call(UInt160 scriptHash, string method, object[] arguments)\n```\n\nParameters:\n\n- scriptHash: The contract script hash\n- method: The contract method\n- arguments: The contract method arguments\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract\n {\n     delegate object Dyncall(string method, object[] args);\n\n     //0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 in little endian order\n     //HexToBytes()\u3001ToScriptHash() can only operate on constants and cannot be written in the Main method\n     //scriptHash can be modified to be passed in from the parameter or read from storage\n     static UInt160 ScriptHash = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n     public static object Test(string operation, object[] args)\n     {\n         if (operation == \"name\")\n         {\n             return Contract.Call((UInt160)ScriptHash, \"name\", new object[0]);\n         }\n         if (operation == \"totalSupply\")\n         {\n             return Contract.Call(ScriptHash, \"totalSupply\", new object[0]);\n         }\n         return true;\n     }\n }\n```\n\n\n\n[Back](../Contract.md)", "doc_id": "52fe1ca3-db34-4798-8be6-1715a69fc62f", "embedding": null, "doc_hash": "119f8261860443ff032c294dedf5221919fec22da17b8837dc4a406f64dfdfe6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/Call.html"}, "node_info": {"start": 0, "end": 1276, "_node_type": "1"}, "relationships": {"1": "8b57d32dd8d0f99dd854285a826d5eaed37803d4"}}, "__type__": "1"}, "fae6e1ff-4995-4e66-9513-498df0595142": {"__data__": {"text": "# Contract.CallEx Method (UInt160, string, object[], CallFlags)\n\nInvokes the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly:  Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern object CallEx(UInt160 scriptHash, string method, object[] arguments, CallFlags flag)\n```\n\nParameters:\n\n- scriptHash: The contract script hash\n- method: The contract method\n- arguments: The contract method arguments\n- flag: The contract call flag\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract\n {\n     delegate object Dyncall(string method, object[] args);\n\n     //0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 in little endian order\n     //HexToBytes()\u3001ToScriptHash() can only operate on constants and cannot be written in the Main method\n     //scriptHash can be modified to be passed in from the parameter or read from storage\n     static byte[] ScriptHash = \"f9f81497c3f9b62ba93f73c711d41b1eeff50c23\".HexToBytes();\n\n     public static object Main(string operation, object[] args)\n     {\n         if (operation == \"name\")\n         {\n             return Contract.Call((UInt160)ScriptHash, \"name\", new object[0], CallFlags.ReadOnly);\n         }\n         if (operation == \"totalSupply\")\n         {\n             return Contract.Call((UInt160)ScriptHash, \"totalSupply\", new object[0], CallFlags.ReadOnly);\n         }\n         return true;\n     }\n }\n```\n\n\n\n[Back](../Contract.md)", "doc_id": "fae6e1ff-4995-4e66-9513-498df0595142", "embedding": null, "doc_hash": "6706da2d6d682d1b94a61b6ca515154e5c85639aba1d5ffa15eba658ac974144", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/CallEx.html"}, "node_info": {"start": 0, "end": 1419, "_node_type": "1"}, "relationships": {"1": "7a0af43aec21e2c881cebfa949779e8017665af1"}}, "__type__": "1"}, "bddce048-7ca3-4d43-bf02-e413749bdb25": {"__data__": {"text": "# Contract.CreateStandardAccount Method\n\nCreates a standard account with the public key.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern UInt160 CreateStandardAccount(ECPoint pubKey);\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n        public static UInt160 CreateStandardAccount(byte[] pubKey)\n        {\n            return Contract.CreateStandardAccount((ECPoint)pubKey);\n        }\n}\n```\nThe input parameter can be either a compressed or uncompressed public key.\n\nExample with compressed public key\uff1a\n{ 0x02, 0x48, 0x6f, 0xd1, 0x57, 0x02, 0xc4, 0x49, 0x0a, 0x26, 0x70, 0x31, 0x12, 0xa5, 0xcc, 0x1d, 0x09, 0x23, 0xfd, 0x69, 0x7a, 0x33, 0x40, 0x6b, 0xd5, 0xa1, 0xc0, 0x0e, 0x00, 0x13, 0xb0, 0x9a, 0x70 } => \"3ae15fc83b48d9bb5c327e578e2f1d2100ba1b89\"\n\nExample with uncompressed public key\uff1a\n{ 0x04, 0x48, 0x6f, 0xd1, 0x57, 0x02, 0xc4, 0x49, 0x0a, 0x26, 0x70, 0x31, 0x12, 0xa5, 0xcc, 0x1d, 0x09, 0x23, 0xfd, 0x69, 0x7a, 0x33, 0x40, 0x6b, 0xd5, 0xa1, 0xc0, 0x0e, 0x00, 0x13, 0xb0, 0x9a, 0x70, 0x05, 0x43, 0x6c, 0x08, 0x2c, 0x2c, 0x88, 0x08, 0x5b, 0x4b, 0x53, 0xd5, 0x4c, 0x55, 0x66, 0xba, 0x44, 0x8d, 0x5c, 0x3e, 0x2a, 0x2a, 0x5c, 0x3a, 0x3e, 0xa5, 0x00, 0xe1, 0x40, 0x77, 0x55, 0x9c } => 3ae15fc83b48d9bb5c327e578e2f1d2100ba1b89\n\n\n\n", "doc_id": "bddce048-7ca3-4d43-bf02-e413749bdb25", "embedding": null, "doc_hash": "f370187375e84309d54446d1a960a75caa68efd222602871d8d9689e5e660dda", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/CreateStandardAccount.html"}, "node_info": {"start": 0, "end": 1371, "_node_type": "1"}, "relationships": {"1": "e5e9ba3912bb9f234755ca2dceea50ac9cb2a73f"}}, "__type__": "1"}, "55e08c99-852c-49ab-bec8-d09bae418518": {"__data__": {"text": "# Contract.GetCallFlags Method\n\nGets the call privilege of the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern byte GetCallFlags();\n```\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n        public static int GetCallFlags()\n        {\n            return Contract.GetCallFlags();\n        }\n}\n```\n\n\n", "doc_id": "55e08c99-852c-49ab-bec8-d09bae418518", "embedding": null, "doc_hash": "5d1598f8c747d15f0d0b68f3e0fcf208526f1bca499511ebd37bd920cceff424", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/GetCallFlags.html"}, "node_info": {"start": 0, "end": 443, "_node_type": "1"}, "relationships": {"1": "212f8c4b9dee9e1a5b26f812911ad3f8b6a6c910"}}, "__type__": "1"}, "7c1592ad-56be-4ed4-9437-3d6886d44f58": {"__data__": {"text": "# Contract.IsPayable\n\nWhether the contract is able to accept NEP-17 assets\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic extern bool IsPayable\n```\n\n[Back](../Contract.md)", "doc_id": "7c1592ad-56be-4ed4-9437-3d6886d44f58", "embedding": null, "doc_hash": "cfe05081c23f99d3791109f83fbf0e2852c76f4ff81672723a07fb983ada47f6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/IsPayable.html"}, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "fe2194f4b21f2b9d991d45226bd689759df8bdc8"}}, "__type__": "1"}, "eae0e18f-a68b-4dcd-90f7-f53f5877a91b": {"__data__": {"text": "# Contract.StorageContext\n\nReturns the storage context of the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic extern StorageContext StorageContext\n```\n\nAttribute value: [StorageContext](../StorageContext.md)\n\n[Back](../Contract.md)", "doc_id": "eae0e18f-a68b-4dcd-90f7-f53f5877a91b", "embedding": null, "doc_hash": "9ef63e9b4532a67bdabf2d1e3bb01c883b76089f3b3fa6516240c8af7cd7b9a9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/StorageContext.html"}, "node_info": {"start": 0, "end": 327, "_node_type": "1"}, "relationships": {"1": "3cd263ff36e9e9cb481456678b35356f92fad72c"}}, "__type__": "1"}, "f9c280c2-7454-4fc2-82e7-ab8375d90a63": {"__data__": {"text": "# Crypto Class\n\nStatic class, which provides a method to verify signatures by ECDsa\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static class Crypto\n```\n\n## Methods\n\n| Name                                   | Description   |\n| ---------------------------------------- | --------------- |\n| CheckSig(Cryptography.ECC.ECPoint, ByteString)          | Checks the signature for the current script container |\n| CheckMultisig(Cryptography.ECC.ECPoint[], ByteString[]) | Checks the signatures for the current script container |\n\n# Constructor\n\nCrypto is a static class and does not require a constructor.", "doc_id": "f9c280c2-7454-4fc2-82e7-ab8375d90a63", "embedding": null, "doc_hash": "e88b9982f4c474abc1f2ef586c533e40e2b8e7690666cd1b4b55e9e7a463bec6", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Crypto.html"}, "node_info": {"start": 0, "end": 682, "_node_type": "1"}, "relationships": {"1": "d47a1ab75e4e59034b68ad73b197b5902728e39d"}}, "__type__": "1"}, "7306eac6-0aa4-439e-bbad-912bce7bb8b6": {"__data__": {"text": "# FindOptions Enumeration\n\nDefines find options for searching storage. This is used in the Storage.Find method.\n\nNamespace: Neo.SmartContract\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic enum FindOptions : byte\n{\n    None = 0,\n\n    KeysOnly = 1 << 0,\n    RemovePrefix = 1 << 1,\n    ValuesOnly = 1 << 2,\n    DeserializeValues = 1 << 3,\n    PickField0 = 1 << 4,\n    PickField1 = 1 << 5\n}\n```\n\n##### Description\n\n- None: Search all\n\n- KeysOnly: Search Key only. It cannot be used together with ValuesOnly, DeserializeValues, PickField0, and PickField1.\n- RemovePrefix: Similar to KeysOnly. It will filter to the first byte of Key, i.e., the prefix of Key. It cannot be used together with ValuesOnly\n- ValuesOnly: Search Value only. It cannot be used together with KeysOnly and RemovePrefix.\n- DeserializeValues: Search Value and then deserialize the Value.\n- PickField0: Search the first element of Value array. It must be used together with DeserializeValues, not with PickField1.\n- PickField1: Search the second element of Value array. It must be used together with DeserializeValues, not with PickField0.\n- FindOptions is used in [Storage.Find(StorageContext, ByteString, FindOptions)](Storage/Find.md) \n\n", "doc_id": "7306eac6-0aa4-439e-bbad-912bce7bb8b6", "embedding": null, "doc_hash": "350732ab35d081bc0c1913853f6bf596e6ca594d23083ddaa533d162b6a7e05c", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/FindOptions.html"}, "node_info": {"start": 0, "end": 1224, "_node_type": "1"}, "relationships": {"1": "e8e335369dbd51f1340bda9980a83c32e50e470d"}}, "__type__": "1"}, "448380dd-0351-46a1-a3cb-fa63bb2fd47d": {"__data__": {"text": "# Iterator Class\n\nThe iterator for smart contracts.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Iterator\npublic class Iterator<T> : Iterator, IApiInterface\n```\n\n## Attributes\n\n| Name | Description          |\n| ----- | ------------------------ |\n| Value | Gets the element in the collection at the current position of the iterator |\n\n## Methods\n\n| Name                            | Name                                                     |\n| ----------------------------------- | ------------------------------------------------------------ |\n| Next()            | Advances the iterator to the next element of the collection |\n\nYou can also use [Storage.Find()](Storage/Find.md)  to construct the Iterator object.", "doc_id": "448380dd-0351-46a1-a3cb-fa63bb2fd47d", "embedding": null, "doc_hash": "c22e9ca511dd66a693bb695dc5f9557150da33abfb3519507e8e119ef0d7e5ca", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator.html"}, "node_info": {"start": 0, "end": 805, "_node_type": "1"}, "relationships": {"1": "a0b46d38eacc6ce551420272d1a37396a10aede7"}}, "__type__": "1"}, "5b13afcf-ec33-4f1a-8936-427d0e27cb0e": {"__data__": {"text": "# Iterator\\<TKey, TValue>.Key Property\n\nGets the Key of the current cursor.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic extern TKey Key\n```\n\nAttribute value: genericity.\n\n\n\n[Back](../Iterator.md)", "doc_id": "5b13afcf-ec33-4f1a-8936-427d0e27cb0e", "embedding": null, "doc_hash": "55fdba75723986ac80a3a6e53fe860b1e0b31a229cadcd6be77d4fcf501a381a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator/Key.html"}, "node_info": {"start": 0, "end": 285, "_node_type": "1"}, "relationships": {"1": "46fd2ea166c18f77f2b1a991b2da70e14e1b2586"}}, "__type__": "1"}, "38aeae0c-dc79-40cb-b11b-aaeabd6f01a7": {"__data__": {"text": "# Iterator\\<TKey, TValue>.Next Method ()\n\nThe cursor moves down in the collection and returns the state, where `true` means the cursor has not moved to the end, and `false` means the cursor has moved to the end.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic extern bool Next();\n```\n\nReturned value: Whether the cursor moves to the end of the collection.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract\n{\n    public static void Main()\n    {\n        var iterator = Storage.Find(new byte[] { 0x01 });\n\t\twhile (iterator.Next())\n\t\t{\n    \t\tvar k = iterator.Key;\n    \t\tvar v = iterator.Value;\n    \t\t\u2026\u2026\n\t\t}\n    }\n}\n```\n\n\n\n[Back](../Iterator.md)", "doc_id": "38aeae0c-dc79-40cb-b11b-aaeabd6f01a7", "embedding": null, "doc_hash": "4ed66d5520bc1558a8b193220fa33aaa522cc101158ea4b32cbdbf3f20f9e89b", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator/Next.html"}, "node_info": {"start": 0, "end": 734, "_node_type": "1"}, "relationships": {"1": "592a848695b98e81aeab2762103bcd3b7e911915"}}, "__type__": "1"}, "eeaad532-882e-4efb-9d73-33ae0515c22d": {"__data__": {"text": "# Iterator\\<TKey, TValue>.Value Property\n\nGets the current cursor value\u3002\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic extern TKey Value\n```\n\nAttribute value: genericity.\n\n\n\n[Back](../Iterator.md)", "doc_id": "eeaad532-882e-4efb-9d73-33ae0515c22d", "embedding": null, "doc_hash": "815e529f880c20e1b350df86880a36d2fefd1478f190afa6f6c5aeb948568485", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator/Value.html"}, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "3890ff8c74c5ffd53320b73b59baab7c886e5f12"}}, "__type__": "1"}, "ea585120-9a12-43d3-ae22-4b9a2389fbf9": {"__data__": {"text": "# Notification Class\n\nRepresents the notification sent when the smart contract executes.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Notification : IApiInterface\n```\n\n## Attributes\n\n| Name                                   | Description              |\n| ---------------------------------------- | -------------------------- |\n| ScriptHash | The script hash of the notification sender |\n| EventName | The event name of the notification |\n| State          |   The object representing the notification content, which can be of any type such as value, string, array, etc.   |\n\n## Constructor\n\nGets Notification objects from [Runtime.GetNotifications(UInt160 hash = null)](Runtime/GetNotifications.md).\n", "doc_id": "ea585120-9a12-43d3-ae22-4b9a2389fbf9", "embedding": null, "doc_hash": "7d0cfa5a66977146950d3ae38c93378ee652b4cd9d26dfda9bae3a25af7a153e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Notification.html"}, "node_info": {"start": 0, "end": 790, "_node_type": "1"}, "relationships": {"1": "eb757f15ecc4d9b3581df43f30b6bcfa9e3810d0"}}, "__type__": "1"}, "5dfa8bf8-cdf6-48a4-bb4b-b123e83737d1": {"__data__": {"text": "# Runtime Class\n\nProvides a set of methods during smart contract execution.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly\uff1aNeo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static class Runtime\n```\n\n## Attributes\n\n| Name                          | Description                                                  |\n| ----------------------------- | ------------------------------------------------------------ |\n| [Trigger](Runtime/Trigger.md) | Gets the trigger type for the smart contract (verification contract or application contract). |\n| Platform                      | Gets information of the platform on which the smart contract is currently executed |\n| ScriptContainer               | Gets the current script container                            |\n| ExecutingScriptHash           | Gets the script hash of the current context                  |\n| CallingScriptHash             | Gets the script hash of the calling contract                 |\n| EntryScriptHash               | Gets the script hash of the entry context                    |\n| Time                          | Gets the timestamp of the current block                      |\n| InvocationCounter             | Gets the call number of the current contract                 |\n| GasLeft                       | Gets the left GAS of the fee of current transaction          |\n\n## Method\n\n| Name                                                         | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [GetNotifications(UInt160 hash = null)](Runtime/GetNotifications.md) | Gets all notifications of the execution of a contract        |\n| [Log(string)](Runtime/Log.md)                                | Sends a log message to the client executing the smart contract. |\n| [CheckWitness()](Runtime/CheckWitness.md)                    | Determines whether the specified account has witnessed the current transaction |\n| BurnGas                                                      | Burning GAS to benefit the Neo ecosystem                     |\n\n## Constructor\n\nThe Runtime class is a static class and does not require a constructor.", "doc_id": "5dfa8bf8-cdf6-48a4-bb4b-b123e83737d1", "embedding": null, "doc_hash": "b4dc96f9cf408657aa75c9dcdb6cbc24d1e657e6b5999401af4331ab7e728d85", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime.html"}, "node_info": {"start": 0, "end": 2265, "_node_type": "1"}, "relationships": {"1": "d9b45bfefbf7f9b3fe25b76f23d7858b4e91ec74"}}, "__type__": "1"}, "c3f4cd49-8353-40ec-ac17-19839d7e5700": {"__data__": {"text": "# Runtime.CheckWitness Method\n\nVerifies that the transactions / block of the calling contract has validated the required script hashes.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern bool CheckWitness(UInt160 hash);\npublic static extern bool CheckWitness(ECPoint pubkey);\n```\n\nParameters:\n\n- hash: script hash\n- Pubkey: public key as a byte array of length 33.\n\n\nReturn value: Whether if the verification has been done, boolean.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract\n{\n    public static void Main()\n    {\n        byte[] pubKey = { 2, 123, 48, 51, 62, 13, 14, 101, 82, 174, 109, 29, 169, 249, 64, 159, 85, 30, 53, 238, 151, 25, 48, 94, 148, 93, 196, 220, 186, 153, 132, 86, 202 };\n        bool result1 = Runtime.CheckWitness((ECPoint)pubKey);\n        byte[] scriptHash = { 36, 23, 241, 177, 228, 54, 109, 223, 27, 237, 139, 54, 207, 38, 132, 101, 172, 3, 10, 73 };\n        bool result2 = Runtime.CheckWitness((UInt160)scriptHash);\n    }\n}\n```\n\n\n\n[Back](../Runtime.md)", "doc_id": "c3f4cd49-8353-40ec-ac17-19839d7e5700", "embedding": null, "doc_hash": "c3b5a019db58159a73058ebd08e292a67bee8cf2f7256ff79189f292db6f6b27", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/CheckWitness.html"}, "node_info": {"start": 0, "end": 1087, "_node_type": "1"}, "relationships": {"1": "7fa5ddd73fce0f6a107ea4fd16fbead578bd6d4b"}}, "__type__": "1"}, "d148fe1e-9226-4246-888b-424ac59ce192": {"__data__": {"text": "# Runtime.GetNotifications Method\n\nGets all notifications of the given contract execution.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Notification[] GetNotifications(UInt160 hash = null)\n```\n\nParameters:\n\n- hash: Contract script hash as a byte array of length 20. When the array values are all 0, all notifications that currently exists are returned. \n\nReturn value: All notifications during the contract execution.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        Notification[] result1 = Runtime.GetNotifications();\n        byte[] hash = { 2, 123, 48, 51, 62, 13, 14, 101, 82, 174, 109, 29, 169, 249, 64, 159, 85, 30, 53, 238};\n        Notification[] result2 = Runtime.GetNotifications((UInt160)hash);\n    }\n}\n```\n\n[Back](../Runtime.md)", "doc_id": "d148fe1e-9226-4246-888b-424ac59ce192", "embedding": null, "doc_hash": "bef21053f14b78ab34e528ffeb4a524615e8a25c86f68c6edf8633cd44a61ccb", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/GetNotifications.html"}, "node_info": {"start": 0, "end": 922, "_node_type": "1"}, "relationships": {"1": "b165411176779f2260e529ba34c84264ddd36715"}}, "__type__": "1"}, "064dce44-9cef-4368-971d-85cd50bafc9d": {"__data__": {"text": "# Runtime.Log Method\n\nSends a log message to the client executing the smart contract. This method can trigger an event on the client but requires the client to be compatible.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern void Log(string message)\n```\n\nParameters: \n\n- message: Log as a string.\n\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main(bool debug)\n    {\n        if(debug)\n        {\n            Runtime.Log(\"Execution successful\");\n        }\n    }\n}\n```\n\n\n\n[Back](../Runtime.md)", "doc_id": "064dce44-9cef-4368-971d-85cd50bafc9d", "embedding": null, "doc_hash": "fe097e4781cda2089715e2f9ca5af6ef13a236906205d06e4b312cd26213467d", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/Log.html"}, "node_info": {"start": 0, "end": 649, "_node_type": "1"}, "relationships": {"1": "db0b3bad9ac76e922be3592107cb173bf37d2264"}}, "__type__": "1"}, "bfe18604-9ebd-4f34-92c6-b93584d03a49": {"__data__": {"text": "# Runtime.Time Attribute\n\nGets the current block time stamp.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern uint Time\n```\n\nAttribute: unix time stamp. Unsigned Integer.\n\n## Example\n\n```c#\npublic static bool Main()\n{\n    if (Runtime.Time >= 1587959138)\n    {\n        // do something;\n    }\n}\n```\n\n\n\n[Back](../Runtime.md)", "doc_id": "bfe18604-9ebd-4f34-92c6-b93584d03a49", "embedding": null, "doc_hash": "f7fdbc5a29acfbbaddfb3de8b69c88ecaabb5e63cbdf1f770e26f89939f9fce4", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/Time.html"}, "node_info": {"start": 0, "end": 420, "_node_type": "1"}, "relationships": {"1": "f1f4356f9dc182f0e791c26e1915fb283a41c792"}}, "__type__": "1"}, "c7e0f11c-2088-492f-b963-f815e4c7eb68": {"__data__": {"text": "# Runtime.Trigger Attribute\n\nGets the trigger type for the smart contract. \n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern TriggerType Trigger { get; }\n```\n\nAttribute\uff1a[TriggerType](../TriggerType.md).\n\n## Example\n\n```c#\npublic static bool Main()\n{\n    if (Runtime.Trigger == TriggerType.Verification)\n    {\n        // do something;\n    }\n    else if (Runtime.Trigger == TriggerType.Application)\n    {\n        // do something;\n    }\n}\n```\n\nFor details, refer to [Template](https://github.com/neo-project/examples/blob/master/csharp/ICO_Template/ICO_Template.cs).\n\n\n\n[Back](../Runtime.md)", "doc_id": "c7e0f11c-2088-492f-b963-f815e4c7eb68", "embedding": null, "doc_hash": "b8850c1daeef9d1f8b6eae0b18544acab3b3524d7cbe54d5c4e3d6e3a69bf62f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/Trigger.html"}, "node_info": {"start": 0, "end": 687, "_node_type": "1"}, "relationships": {"1": "8ca0356c760a8d53a64cbfc8a921d1bd597688b8"}}, "__type__": "1"}, "e95a6f11-f1bf-4327-b1a8-9530e0a19c50": {"__data__": {"text": "# Storage Class\n\nProvides a set of methods to insert, query, and delete data in the persistent storage.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static class Storage\n```\n\n## Attributes\n\n| Name                                   | Description |\n| ---------------------------------------- | ---------- |\n| [CurrentContext](Storage/CurrentContext.md) | Returns the current storage context |\n| CurrentReadOnlyContext | Returns the read-only context of the current contract storage |\n\n## Methods\n\n| Name                                    | Description                    |\n| ---------------------------------------- | -------------------------------- |\n| [Delete](Storage/Delete.md) | Deletes the value corresponding to the key from the given storage context. This method has multiple overloads. |\n| [Get](Storage/Get.md) | Gets the byte[] value corresponding to the given key from the given storage context. This method has multiple overloads. |\n| [Put](Storage/Put.md) | Puts the key-value pair into the given storage context. This method has multiple overloads. |\n| [Find](Storage/Find.md) | Finds the content in the given storage context. This method has multiple overloads. |\n\n## Constructor\n\nThe Storage class is a static class and does not require a constructor.", "doc_id": "e95a6f11-f1bf-4327-b1a8-9530e0a19c50", "embedding": null, "doc_hash": "b445bc92de53baf301d26655402d434c1109c56b52e19c2d38ce300078705014", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage.html"}, "node_info": {"start": 0, "end": 1353, "_node_type": "1"}, "relationships": {"1": "0359bfd6c84da2a6ab2e46ab614424c106f47e56"}}, "__type__": "1"}, "6f6052f6-0156-4bfc-9e9f-18dc2b4f55f2": {"__data__": {"text": "# Storage.CurrentContext Property\n\nReturns the current storage context. After obtaining the storage context, the object can be passed as an argument to other contracts (as a way of authorization), allowing other contracts to perform read/write operations on the persistent store of the current contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern StorageContext CurrentContext {get;}\n```\n\nAttribute value: Current storage context as a [StorageContext](../StorageContext.md).\n\n\n\n[Back](../Storage.md)\n", "doc_id": "6f6052f6-0156-4bfc-9e9f-18dc2b4f55f2", "embedding": null, "doc_hash": "5124b8a4ae2e2c5ac92e9c2974f7b62989600ae05cfdf8269d7b1674e090989f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/CurrentContext.html"}, "node_info": {"start": 0, "end": 605, "_node_type": "1"}, "relationships": {"1": "01369cd8aac77bf42c3bd6087f608851eb5ec32b"}}, "__type__": "1"}, "931b3039-cfc1-4855-bfb7-14c60e941a8a": {"__data__": {"text": "# Storage.Delete Method\n\nDeletes the value corresponding to the given key from the specific storage context.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern void Delete(StorageContext context, byte[] key);\npublic static extern void Delete(StorageContext context, ByteString key);\n```\n\nParameters:\n\n- Context: Storage context as a [StorageContext](../StorageContext.md).\n\n- Key: Key as a byte array or string. Max length 64 bytes.\n\n\nReturn value: void.\n\n```c#\npublic static extern void Delete(byte[] key);\npublic static extern void Delete(string key);\n```\n\nParameters:\n\nKey: Key as a byte array or string.\n\nReturn value: void.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        Storage.Delete(Storage.CurrentContext, \"aa\");\n        Storage.Delete(Storage.CurrentContext, new byte[] { 0 });\n        Storage.Delete(\"aa\");\n        Storage.Delete(new byte[] { 0 });\n    }\n}\n```\n\n\n\n[Back](../Storage.md)\n", "doc_id": "931b3039-cfc1-4855-bfb7-14c60e941a8a", "embedding": null, "doc_hash": "3c2541d16e0511f55cc35019e2aa7bbaa6df711c91a5cda6cac3fa711ae0eccc", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Delete.html"}, "node_info": {"start": 0, "end": 1075, "_node_type": "1"}, "relationships": {"1": "1363c45bd3a5e4d539351d83d77fca206b6153da"}}, "__type__": "1"}, "4e3642f3-b356-48ac-ae9f-f62975e4bd12": {"__data__": {"text": "# Storage.Find Method\n\nFinds the content in the storage context that matches the specified prefix.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern Iterator Find(StorageContext context, byte[] prefix, FindOptions options = FindOptions.None);\npublic static extern Iterator Find(StorageContext context, ByteString prefix, FindOptions options = FindOptions.None);\n```\n\nParameters:\n\n- context: Storage context as a [StorageContext](../StorageContext.md)\n- prefix: Prefix as a byte array or string.\n\nReturn value: The iterator composed of the elements  that meet conditions in the context.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        byte[] prefix1 = new byte[] { 0 };\n        string prefix2 = \"aa\";\n        Storage.Find(Storage.CurrentContext, prefix1);\n        Storage.Find(Storage.CurrentContext, prefix2);\n        Storage.Find(prefix1);\n        Storage.Find(prefix2);\n    }\n}\n```\n\n[Back](../Storage.md)\n", "doc_id": "4e3642f3-b356-48ac-ae9f-f62975e4bd12", "embedding": null, "doc_hash": "0e82d8ecb2bc1ca30daac36606654cd43d0b7efe572f727c673766667eb88a79", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Find.html"}, "node_info": {"start": 0, "end": 1085, "_node_type": "1"}, "relationships": {"1": "a0ed09cc780b31df29220186e547647a7f865099"}}, "__type__": "1"}, "02fd8abe-d876-4a9f-aa08-70a5177e00d7": {"__data__": {"text": "# Storage.Get Method\n\nReturns a value from the persistent store based on the given key.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic static extern byte[] Get(StorageContext context, byte[] key);\npublic static extern byte[] Get(StorageContext context, ByteString key);\n```\n\nParameters:\n\nContext: Storage context as a [StorageContext](../StorageContext.md).\n\nKey: Key as a byte array or string. Max length 64 bytes.\n\nReturn Value: The value corresponding to the key as a byte array.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        byte[] value = Storage.Get(Storage.CurrentContext, new byte[] { 0 });\n        byte[] value = Storage.Get(Storage.CurrentContext, \"aa\");\n    }\n}\n```\n\n\n\n[Back](../Storage.md)\n", "doc_id": "02fd8abe-d876-4a9f-aa08-70a5177e00d7", "embedding": null, "doc_hash": "921cd16a98390af54a8e534c6d38f27629f7f9a1046847ab91cd3611777f42d9", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Get.html"}, "node_info": {"start": 0, "end": 871, "_node_type": "1"}, "relationships": {"1": "f53ae8403c6277ff0298515513e1c9bfebab500a"}}, "__type__": "1"}, "217edf74-59db-4b97-a302-8909b0fd01b4": {"__data__": {"text": "# Storage.Put Method\n\nInserts a given value to the given key in the persistent storage.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\nPut(StorageContext context, byte[] key, ByteString value);\nPut(StorageContext context, byte[] key, byte[] value);\nPut(StorageContext context, byte[] key, BigInteger value);\nPut(StorageContext context, ByteString key, ByteString value);\nPut(StorageContext context, ByteString key, BigInteger value);\nPut(StorageContext context, byte[] key, byte[] value, StorageFlags flags);\nPut(StorageContext context, byte[] key, BigInteger value, StorageFlags flags);\nPut(StorageContext context, ByteString key, BigInteger value, StorageFlags flags);\nPut(StorageContext context, ByteString key, ByteString value, StorageFlags flags);\n```\n\nParameters:\n\n- context: Storage context as a [StorageContext](../StorageContext.md).\n- key: Key as a byte array or string. Max length 64 bytes.\n- value: Value as a byte array, Biginteger, or string.\n- flag: StorageFlags type, representing a variable or constant in storage.\n\n\nReturn value: void.\n\n## Example\n\n```c#\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        byte[] key1 = new byte[] { 0 };\n        string key2 = \"aa\";\n        byte[] value1 = new byte[] { 1 };\n        BigInteger value2 = new BigInteger(\"1\");\n        string value3 = \"bb\";\n        Storage.Put(Storage.CurrentContext, key1, value1);\n        Storage.Put(Storage.CurrentContext, key1, value2);\n        Storage.Put(Storage.CurrentContext, key1, value3);\n        Storage.Put(Storage.CurrentContext, key2, value1);\n        Storage.Put(Storage.CurrentContext, key2, value2);\n        Storage.Put(Storage.CurrentContext, key2, value3);\n    }\n}\n```\n\n[Back](../Storage.md)\n", "doc_id": "217edf74-59db-4b97-a302-8909b0fd01b4", "embedding": null, "doc_hash": "ababc010aa1455bba6246fa70679535204ecdc46d888de9cdef012895660d659", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Put.html"}, "node_info": {"start": 0, "end": 1833, "_node_type": "1"}, "relationships": {"1": "082998ccf964412bf9f84fdbbdd733a3451a21a7"}}, "__type__": "1"}, "e2652d28-cfa3-4d29-880c-42c80a95172b": {"__data__": {"text": "# StorageContext Class\n\nThe class representing the storage context of the persistent store.\n\nThe smart contract can obtain its own storage context through Storage.CurrentContext and pass the context as an argument to other contracts(as a way of authorization), allowing other contracts to call the read/write methods for its persistent storage.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class StorageContext\n```\n\n## Attribute\n\n| Name       | Description                                                  |\n| ---------- | ------------------------------------------------------------ |\n| AsReadOnly | Converts the specified storage context to a new readonly storage context |\n\n## Constructor\n\nThe StorageContext object is constructed through [Storage.CurrentContext](Storage/CurrentContext.md).", "doc_id": "e2652d28-cfa3-4d29-880c-42c80a95172b", "embedding": null, "doc_hash": "2a1cd4d9ff557d15d5593222c00868947c9b06cf6b2799eabca6312d61df398f", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/StorageContext.html"}, "node_info": {"start": 0, "end": 879, "_node_type": "1"}, "relationships": {"1": "b421223cd2eb50e5e10cf04ae1015154fddf6fd9"}}, "__type__": "1"}, "bbea082f-1f9c-4679-a7a0-05db05b6eff0": {"__data__": {"text": "# StorageMap Class\n\nThis class represents the key-value storage for the specific prefix in the given storage context.\n\nNamespace:[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class StorageMap\n```\n\n## Attribute\n\n| Name                                   | Description |\n| ---------------------------------------- | ---------- |\n| Context | Storage context |\n| Prefix | Prefix |\n\n## Methods\n\n| Name   | Description                                                  |\n| ------ | ------------------------------------------------------------ |\n| Delete | Deletes the value corresponding to the key from the given storage context. This method has multiple overloads. |\n| Get    | Gets the byte[] value corresponding to the given key from the given storage context. This method has multiple overloads. |\n| Put    | Puts the key-value pair into the given storage context. This method has multiple overloads. |\n| Find   | Finds the content in the given storage context. This method has multiple overloads. |\n\n", "doc_id": "bbea082f-1f9c-4679-a7a0-05db05b6eff0", "embedding": null, "doc_hash": "228e23549ed42b4dfdec31aed8fe7477493797a23f951b604c012f16054470b2", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/StorageMap.html"}, "node_info": {"start": 0, "end": 1071, "_node_type": "1"}, "relationships": {"1": "1af641745e8fd1ab351010f0529e9a6f5fbf358a"}}, "__type__": "1"}, "facd5753-a391-44bf-995b-72318ba0ec73": {"__data__": {"text": "# Transaction Class\n\nUsed to represent the base class of a transaction.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic class Transaction\n```\n\n## Attributes\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| Hash            | Hash of the current transaction                              |\n| Version         | Transaction version number. For now it is 0                  |\n| Nonce           | Random number                                                |\n| Sender          | Address script hash of the sender                            |\n| SystemFee       | System fee, which is paid to the network for resource cost   |\n| NetworkFee      | Network fee, which is paid to the verifier for packaging the transaction |\n| ValidUntilBlock | Validity period of the transaction                           |\n| Script          | Contract script hash of the transaction                      |\n\n## Constructor\n\nThe Transaction object is constructed through [Ledger.GetTransaction(UInt256)](../native/Ledger/GetTransaction.md) and [Ledger.GetTransactionFromBlock()](../native/Ledger/GetTransactionFromBlock.md).\n\n", "doc_id": "facd5753-a391-44bf-995b-72318ba0ec73", "embedding": null, "doc_hash": "063d98cc72fd715653bf272df94d310c90c3a8aa5f34cb010dbf43704cd4ff0e", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Transaction.html"}, "node_info": {"start": 0, "end": 1300, "_node_type": "1"}, "relationships": {"1": "a349e33ea899d8385324e2edec91999f5525a538"}}, "__type__": "1"}, "00963616-c598-4451-a761-642e58e27e64": {"__data__": {"text": "# TriggerType Enumeration\n\nThis enumeration represents the type of smart contract triggers. Triggers enable the contract to execute different logic under different usage scenarios.\n\nFor more information about triggers, refer to [Smart Contract Basics](../../../../develop/write/basics.md).\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```c#\npublic enum TriggerType : byte\n{\n    OnPersist = 0x01,\n    PostPersist = 0x02,\n    Verification = 0x20,\n    Application = 0x40,\n    System = OnPersist | PostPersist,\n    All = OnPersist | PostPersist | Verification | Application\n}\n```\n\nOnPersist: Indicate that the contract is triggered by the system to execute the OnPersist method of the native contracts.\n\nPostPersist: Indicate that the contract is triggered by the system to execute the PostPersist method of the native contracts.\n\nVerification: Indicates that the contract is triggered by the verification of a IVerifiable.\n\nApplication: Indicates that the contract is triggered by the execution of transactions.\n\nSystem: The combination of all system triggers.\n\nAll: The combination of all triggers.", "doc_id": "00963616-c598-4451-a761-642e58e27e64", "embedding": null, "doc_hash": "e4ac94d271a8e5142b6ce72911773c0c1b5bf638c5a8460912db625b33f1dc97", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/TriggerType.html"}, "node_info": {"start": 0, "end": 1168, "_node_type": "1"}, "relationships": {"1": "1c28c649dc2179731d0573928af083c324cb2469"}}, "__type__": "1"}, "13dcf944-48bd-4771-b2b7-dd130ca58a3b": {"__data__": {"text": "# Interoperable service\n\nThis article lists the interoperable service in Neo N3. \n\nThe Interoperable service is the underlying API of the system. For more information on how to use the framework to easily call APIs in high-level languages, see [Smart Contracts Framework](framework.md).\n\n**Contract**:\n\n| API                                   | Description                                                  |\n| ------------------------------------- | ------------------------------------------------------------ |\n| System.Contract.Call                  | Use it to call another contract dynamically.                 |\n| System.Contract.GetCallFlags          | Gets the CallFlags for the current context                   |\n| System.Contract.CreateStandardAccount | Calculates corresponding account scripthash for the given public key |\n| System.Contract.CreateMultisigAccount | Creates the script hash of multi-signed account using public key. |\n\n**Crypto**:\n\n| API                         | Description                                            |\n| --------------------------- | ------------------------------------------------------ |\n| System.Crypto.CheckSig      | Checks the signature for the current script container  |\n| System.Crypto.CheckMultisig | Checks the signatures for the current script container |\n\n**Iterator**:\n\n| API                    | Description                                                  |\n| ---------------------- | ------------------------------------------------------------ |\n| System.Iterator.Next   | Advances the iterator to the next element of the collection  |\n| System.Iterator.Values | Gets the element in the collection at the current position of the iterator |\n\n**Runtime**:\n\n| API                                   | Description                                                  |\n| ------------------------------------- | ------------------------------------------------------------ |\n| System.Runtime.Platform               | Gets the name of the current platform                        |\n| System.Runtime.GetTrigger             | Gets the trigger of the execution                            |\n| System.Runtime.GetTime                | Gets the timestamp of the current block                      |\n| System.Runtime.GetScriptContainer     | Gets the current script container                            |\n| System.Runtime.GetExecutingScriptHash | Gets the script hash of the current context                  |\n| System.Runtime.GetCallingScriptHash   | Gets the script hash of the calling contract           ", "doc_id": "13dcf944-48bd-4771-b2b7-dd130ca58a3b", "embedding": null, "doc_hash": "75799616196fe718629e0543519ea4233424b1eb887b685c73236b4666b50559", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/interop.html"}, "node_info": {"start": 0, "end": 2553, "_node_type": "1"}, "relationships": {"1": "918d7684d864aa3e51612f15f404052cc42abb0f", "3": "c39992a1-b13c-4929-93d1-5700e554d241"}}, "__type__": "1"}, "c39992a1-b13c-4929-93d1-5700e554d241": {"__data__": {"text": "Gets the script hash of the calling contract                 |\n| System.Runtime.GetEntryScriptHash     | Gets the script hash of the entry context                    |\n| System.Runtime.CheckWitness           | Determines whether the specified account has witnessed the current transaction |\n| System.Runtime.GetInvocationCounter   | Gets the number of times the current contract has been called during the execution |\n| System.Runtime.Log                    | Writes a log                                                 |\n| System.Runtime.GetNotifications       | Gets the notifications sent by the specified contract during the execution |\n| System.Runtime.GasLeft                | Gets the remaining GAS that can be spent in order to complete the execution |\n| System.Runtime.BurnGas                | Burning GAS to benefit the Neo ecosystem                     |\n| System.Runtime.GetNetwork             | Gets the current network number                              |\n| System.Runtime.GetRandom              | Gets random number                                           |\n\n**Storage**:\n\n| API                               | Description                                                  |\n| --------------------------------- | ------------------------------------------------------------ |\n| System.Storage.GetContext         | Gets the storage context for the current contract            |\n| System.Storage.GetReadOnlyContext | Gets the read-only storage context for the current contract  |\n| System.StorageContext.AsReadOnly  | Converts the specified storage context to a new read-only storage context |\n| System.Storage.Get                | Gets the entry with the specified key from the storage       |\n| System.Storage.Find               | Finds the entries from the storage                           |\n| System.Storage.Put                | Puts a new entry into the storage                            |\n| System.Storage.Delete             | Deletes an entry from the storage                            |\n\n", "doc_id": "c39992a1-b13c-4929-93d1-5700e554d241", "embedding": null, "doc_hash": "a124c3b2b8a9e51737f58beb21d756e86ead63871cf3c3429c7765f1591c244a", "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/interop.html"}, "node_info": {"start": 2498, "end": 4513, "_node_type": "1"}, "relationships": {"1": "918d7684d864aa3e51612f15f404052cc42abb0f", "2": "13dcf944-48bd-4771-b2b7-dd130ca58a3b"}}, "__type__": "1"}, "f695b24c-2fca-4ad6-a080-f4f27e835ebc": {"__data__": {"text": "# General\n\n## What is Neo\uff1f\n\nNeo is a distributed network which utilizes blockchain technology and digital identity to digitize assets and automate the management of digital assets using smart contracts. Neo network has two tokens, NEO representing the right to manage Neo blockchain and GAS representing the right to use the Neo Blockchain. \n\n## What developer communities does Neo have?\n\nNeo has a large number of worldwide developer communities that have been contributing to Neo development for a long time. Following are some representative communities:\n\n- **CoZ**, the earliest developer community in Neo ecosystem: https://github.com/CityOfZion\n- **NEL**, the first Chinese developer community in Neo ecosystem: https://github.com/NewEconoLab\n- **NeoResearch**, the South American developer community\uff1ahttps://github.com/NeoResearch\n- **NSPCC**, the St. Petersburg developer community, russia\uff1ahttps://www.nspcc.ru/en/\n- **NEO\u00b7ONE**, a Neo blockchain development toolkit: https://neo-one.io/\n- **Red4Sec**, Neo contract security audit\uff1ahttps://red4sec.com/\n- **NEONEWSTODAY**, Neo ecosystem latest news: https://neonewstoday.com/\n- **NEXT**, Neo Dapp tools development\uff1ahttps://neonext.io/\n- **neow3j**, multi-language SDK for Neo smart contract development\uff1ahttps://github.com/neow3j/\n\n## What is GAS\uff1fHow to acquire GAS\uff1f\n\nGAS represents the right to use the Neo Blockchain. Neo network charges GAS for the new assets issuance and smart contract running as well as all translations that modify the blockchain status . The Neo N3 Genesis block will mint the exact amount of GAS token needed to account for all GAS token circulating on the NEO Legacy chain at the time of Genesis block. In Neo N3 once NEO is transferred from the account, the relevant GAS is claimed to the same address automatically.\n\nUnlike the Neo Legacy, there is no supply limit for Neo N3 GAS and system fees for  transactions will be burned off.\n\n## What consensus algorithms does Neo use\uff1f\n\nNeo utilizes a delegated Byzantine Fault Tolerance (dBFT) algorithm which provides a  \ud835\udc53 = \u230a (\ud835\udc5b\u22121) / 3 \u230b  fault tolerance to a consensus system that comprises n nodes. \n\nThere are several types of nodes in this mechanism, such as the ordinary nodes, the candidate nodes, the committee nodes, and the consensus nodes.  Anyone can start a transaction to become the candidate or vote for the candidate. Candidates with a certain amount votes are elected as committee members or consensus nodes. When a consensus needs to be passed, a speaker is randomly selected to decide the proposal, and then other consensus nodes vote according to the dBFT algorithm. If more than 2/3 of nodes agree to the proposal, the consensus is reached; otherwise, the speaker is re-elected and the voting process is repeated.  \n\n## How to become a Neo consensus node\uff1fIs there any incentives\uff1f\n\nNeo consensus nodes are elected by NEO holders. For more information see https://docs.neo.org/docs/zh-cn/basic/consensus/vote_validator.html. The network fee will be distributed to the consensus node who starts a new-block proposal of the block where corresponding transaction is included. The consensus node that packages transactions and proposes a new block will be rewarded the network fee of all transactions included in the block.\n\n## What browsers are available for Neo blockchain?\n\n<https://neo3.neotube.io/> is commonly used, or you can access http://ndapp.org/ and find all the", "doc_id": "f695b24c-2fca-4ad6-a080-f4f27e835ebc", "embedding": null, "doc_hash": "1a184111ccb477d7dffae9a7b3db426d0f5b89b7728a0fc531c7c43727a1f220", "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/basic.html"}, "node_info": {"start": 0, "end": 3418, "_node_type": "1"}, "relationships": {"1": "aa2e213149d7f9d791758c74e07f9c32c1ae831d", "3": "8abd1a2f-76cb-4f78-87fd-c6398ba4ab2a"}}, "__type__": "1"}, "8abd1a2f-76cb-4f78-87fd-c6398ba4ab2a": {"__data__": {"text": "is commonly used, or you can access http://ndapp.org/ and find all the browsers listed under the Explorer tab.\n\n## How can I check the status of my transaction?\n\nYou can check it on any Neo blockchain explorer, such as https://neotube.io/.\n\n## Is there an equivalent of ERC-20 standard for Neo?\n\nYes. NEP-17, the replacement of the standard NEP-5, is the Neo N3 token standard which outlines the specifications to be followed by contracts deployed on the Neo blockchain. \n\n## How to view NEP-17 assets in Neo-CLI\uff1f\n\nTo view NEP-17 assets invoke the  RPC API [getnep17balances](../../docs/en-us/reference/rpc/latest-version/api/getnep17balances.md) or use the Neo-CLI command [balanceof](../../docs/en-us/node/cli/cli.html#balanceof) .\n\n## What is NEP-6\uff1f\n\nNEP-6 is a wallet standard that specifies the wallet format, the definition of parameters in it, the creation rules of wallet address and so on. NEP-6 is applicable to several current Neo client versions including 2.7.6. The Neo client supports wallets in two formats,  sqlite wallet (in .db3) and NEP-6 wallet (in .json). Considering the processing speed, the sqlite wallet is strongly recommended for exchanges. \n\n## Can you store NEO the same way as Bitcoin? I am nervous about the storage safety.\n\nYes. If you are holding NEO, then you are always keeping it online. Storing private keys offline means your coins are safe and can not be touched.\n\n## Is there a transfer fee between Neo wallets?\n\nYes. On Neo N3 any transfer transaction requires a certain amount of GAS.\n\n## If I keep my NEO on an exchange, can I still get my GAS?\n\nThis depends on the exchange; some (like [Binance](https://www.binance.com/)) have chosen to give users their GAS when you leave your NEO on the exchange, while others (like [Bittrex](https://www.bittrex.com/)) keep the GAS for themselves. If you want to make sure you receive your Gas, move your NEO to a private wallet and manually claim your GAS.\n\n## I have transferred my NEO balance from the exchange and the exchange kept 0.9750 NEO. However, I cannot send this anywhere because you need at least 1 NEO to be able to send. Can this amount be topped up, held or sold?\n\nYou can keep it there to be sold later, or you can buy additional NEO on the exchange so that your amount is more than 1 NEO. You can also exchange NEO to other tokens like USDT, GAS, etc.\n\n", "doc_id": "8abd1a2f-76cb-4f78-87fd-c6398ba4ab2a", "embedding": null, "doc_hash": "1661c0b939abbe039412a6d2bdaa40529b2a71288bce5a301aff007acc02ee7c", "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/basic.html"}, "node_info": {"start": 3348, "end": 5701, "_node_type": "1"}, "relationships": {"1": "aa2e213149d7f9d791758c74e07f9c32c1ae831d", "2": "f695b24c-2fca-4ad6-a080-f4f27e835ebc"}}, "__type__": "1"}, "90764e97-8e74-4012-a9ee-38556d3943b6": {"__data__": {"text": "# Neo-CLI\n\n## When I start the neo-cli compiled by myself, it reports an error: System.Collections.Generic.KeyNotFoundException. The given key 'LevelDBStore' was not present in the dictionary.\n\nYou need to install the plugin LevelDBStore, as it is defined in the Neo-CLI config file by default for storing the block data.\n\n## When I start the neo-cli and RpcServer compiled by myself, they report an error: Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly  Microsoft.AspNetCore.ResponseCompression, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\n\nTo solve this issue, add the following reference to generate the Microsoft.AspNetCore.ResponseCompression.dll file before you compile neo-cli:\n\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.ResponseCompression\" />\n</ItemGroup>\n```\n\n## When I start the second node on the same computer, it reports an error: Unhandled exception. System.IO.IOException: Failed to bind to address xxx: address already in use. \n\nThere is port conflicting. Check the config files of the two nodes and the config files of their RpcServer plug-in, and make sure all ports are set different. \n\n## When I invoke the RPC API openwallet, it returns an error: Access denied\n\nThe openwallet is disabled in the RpcServer config file by default for security reasons. If you need to invoke it remotely,  remove the method from the DisableMethods field under the secure conditions.", "doc_id": "90764e97-8e74-4012-a9ee-38556d3943b6", "embedding": null, "doc_hash": "f4887524580ed88ee36a1660bddcdab27059df0226299e666adc4ea6a1b3f060", "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/cli.html"}, "node_info": {"start": 0, "end": 1474, "_node_type": "1"}, "relationships": {"1": "5cb675b9c622930784126c56910a6e0cd1f50c18"}}, "__type__": "1"}, "033d0a3f-f9a7-4b2c-9db1-921d5eec7223": {"__data__": {"text": "# Development\n\n## How to apply for test tokens?\n\nUp to 1000 GAS and 1000 NEO per day can be requested via the [NGD faucet](https://neowish.ngd.network/neo3/). If you need more than that, go to https://neo.org/testcoin/apply and fill out the application form. If the application is accepted, you will be notified in three to five workdays.\n\n## How to build a private chain?\n\nTo build a private chain, you have the following options\uff1a\n\n- Build a private chain with one node. See [here](../../docs/en-us/develop/network/private-chain/solo.md).\n- Build a private chain on your local host. See [here](../../docs/en-us/develop/network/private-chain/private-chain2.md).\n\nYou can also refer to the [community articles](../../articles/en-us/index.md) to learn more options.\n\n## What languages can I use to develop smart contracts?\n\nNeo supports a variety of mainstream programming languages and can be developed using C#, Python, Go, JS, and Jave. Currently in the NEO ecosystem, the infrastructure for C# and Python is extremely well-developed and various compilers are provided for developers.\n\n## How can I obtain the NEP-5 asset hash?\n\nYou can use a blockchain browser, e.g.  https://neo3.neotube.io, to view the NEP-5 asset hash:\n\n  1. In the browser, click Tokens in the top navigation bar. \n  2. Click the desired asset to view its hash in the details page that appears.\n\n\n## Why is it prompted that there is no object's private key in the wallet when withdrawing assets from a multi-party signature contract?\n\nAfter the private chain is set up, you need to make the same configurations in all (n/2+1) wallets (n is the node number), that is, add the multi-party signed addresses and then rebuild the wallet index. \n\n## What SDKs are provided for developers?\n\nNeo developer communities have developed and maintained various NEO SDKs for many mainstream languages including C#, JavaScript, Java, and etc. You can check them here:\n\n- C# SDK: [neo](https://github.com/neo-project/neo-devpack-dotnet)\n- JavaScript SDK: [neon-js](https://github.com/CityOfZion/neon-js)\n- Java SDK: [neow3j](https://github.com/neow3j/neow3j)\n- Go: [neo-gogogo](https://github.com/neo-ngd/neo-gogogo) / [neo-go](https://github.com/nspcc-dev/neo-go)\n- Python: [neo-python](https://github.com/CityOfZion/neo-python)\n\n", "doc_id": "033d0a3f-f9a7-4b2c-9db1-921d5eec7223", "embedding": null, "doc_hash": "58a90c98f924429947bab373a5353617c3c1966fd0942bdf48f0578fdeceda12", "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/dev.html"}, "node_info": {"start": 0, "end": 2288, "_node_type": "1"}, "relationships": {"1": "4b9c909c61e58fd3b1a60d5ccd2c9749d24153c9"}}, "__type__": "1"}, "254c36ec-f3d2-4421-bc1f-07dfb97f8377": {"__data__": {"text": "# An Introduction to Contract Development on Neo\n\nIn this tutorial, we will work you through an example contract on Neo blockchain, which includes the tasks of setting up and configuring the development environment, compiling, deploying, and invoking the smart contract on a private chain and testnet. This one is simply meant to get us up and running with a basic development and testing environment, highlighting some key technical concepts along the way.\n\nThis tutorial contains the following topics:\n\n- [Development Environment](#development-environment)\n- [Developing a contract](#developing-a-contract)\n- [Compiling the contract](#compiling-the-contract)\n- [Deploying the contract](#deploying-the-contract)\n- [Invoking the contract](#invoking-the-contract)\n- [Interfacing using NeoLine wallet](#interfacing-using-neoline-wallet)\n\n## Development environment\n\n### System environment\nYou are recommended to run Neo-CLI in the following environments that we have tested:\n- Windows 10\n- Ubuntu 16.04/18.04\n- CentOS 7.4/7.6\n- macOS Big Sur/version 11.1\n\n### Connecting to network\n\nNeo provides the Test network where you can develop, debug, and test your programs before publishing them on the live network. To connect your node to test net, see detailed instructions [here](https://docs.neo.org/docs/en-us/develop/network/testnet.html). \n\nAlternatively, you can also set up your own private chain where you can get more flexibility with plenty of test tokens. \n\n#### Setting up a private chain\n\nYou can pick one of the following options:\n\n- Build a private chain with one node\n\n  Neo-CLI supports generating blocks without consensus nodes, which means you can set up a private chain with one node. There are two ways to achieve this, you can choose either of them of your will. \n\n  - Directly download the project [neo-express](https://github.com/neo-project/neo-express) to run the private chain quickly. \n  - Or build a private chain with one node from scratch, more details please check at the [guide](https://docs.neo.org/docs/en-us/develop/network/private-chain/solo.html#prerequisites).\n\n- Build a private chain with multiple nodes\n\n  You can also choose to build a private chain with multiple nodes to practise the consensus mechanism. The [guide](https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html) here shows you the way to build a private chain on a windows system computer. \n\nRefer to the instructions from above links to set up your private chain and withdraw NEO and GAS from genesis block.\n\n### Preparing a wallet file\n\nNow let's create a new wallet file used for deploying smart contracts:\n\n1. Create a new wallet file named 0.json and copy the default address for later use.\n2. Open the wallet where you have withdrawn NEO and GAS from genesis block, transfer all the assets in the wallet to 0.json and wait for the transaction to be confirmed.\n3. Open 0.json to check if the assets are received.\n\n## Developing a contract\n\n### Configuring the development tool\n\nRefer to the official [guide](https://docs.neo.org/docs/en-us/gettingstarted/develop.html#installing-tools) to install tools and contract template, and then create a contract project named Contract1 with the following command:\n\n```\ndotnet new neo3-contract -n Contract1\n```\n\n### Editing the contract\n\nHere we provide a simple smart contract written in C#. The source code is here:\n\n```csharp\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\nusing System.ComponentModel;\nusing Neo;\nusing Neo.SmartContract;\n\nnamespace Example\n{\n    [ManifestExtra(\"Email\",", "doc_id": "254c36ec-f3d2-4421-bc1f-07dfb97f8377", "embedding": null, "doc_hash": "5b5f66fdea18583502c23eb34cd33ecee40f44cb6b24acf85247547ea0556e16", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/development.html"}, "node_info": {"start": 0, "end": 3650, "_node_type": "1"}, "relationships": {"1": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3", "3": "d16867b4-a773-423e-a20d-114525dd8e28"}}, "__type__": "1"}, "d16867b4-a773-423e-a20d-114525dd8e28": {"__data__": {"text": "Example\n{\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a example contract\")]\n    public class Contract1 : SmartContract\n    {\n        //TODO: Replace it with your own address.\n        [InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\n        static readonly UInt160 Owner = default;\n\n        private static bool IsOwner() => Runtime.CheckWitness(Owner);\n\n        // When this contract address is included in the transaction signature,\n        // this method will be triggered as a VerificationTrigger to verify that the signature is correct.\n        // For example, this method needs to be called when withdrawing token from the contract.\n        public static bool Verify() => IsOwner();\n\n        // TODO: Replace it with your methods.\n        public static string MyMethod()\n        {\n            return Storage.Get(Storage.CurrentContext, \"Hello\");\n        }\n\n        // This method will be executed immediately after the contract is deployed.\n        public static void _deploy(object data, bool update)\n        {\n            if (update) return;\n\n            // It will be executed during deploy\n            Storage.Put(Storage.CurrentContext, \"Hello\", \"World\");\n        }\n\n        public static void Update(ByteString nefFile, string manifest)\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            ContractManagement.Update(nefFile, manifest, null);\n        }\n\n        public static void Destroy()\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            ContractManagement.Destroy();\n        }\n    }\n}\n```\nIn the example contact above, note these methods:\n\n-  `Update`\uff1aThis method enables the contract update function.  When it is invoked, the contract is upgraded and neither the contract hash nor the storage area is changed. You can refer to [here](https://docs.neo.org/docs/en-us/develop/write/update.html) to update your contract.\n- `Destroy`: This method takes no arguments. When it is invoked, the contract and its storage, if any, are deleted. Then the contract is no longer available.\n\n## Compiling the contract\n\nRun the following command to build your contract\uff1a\n\n```\ndotnet build\n```\n\nRelated contract files are outputted under `\\bin\\Debug\\net6.0` path in the contract project directory.\n\n## Deploying the contract\n\nPreviously, we have compiled an example contract file (Contract1.nef) and contract descriptive file (Contract1.manifest.json), next we will move on to deployment and invocation of the contract with Neo-CLI.\n\nIn Neo-CLI, input the deploy command `deploy <nefFilePath> [manifestFile]` , for example:\n\n```\ndeploy Contract1.nef\n```\n\nor\n\n```\ndeploy Contract1.nef Contract1.manifest.json\n```\n\nAfter the command is executed, the contract is deployed and the related", "doc_id": "d16867b4-a773-423e-a20d-114525dd8e28", "embedding": null, "doc_hash": "c8598410c7be8457056ad92f8a2fcb084f84c950f7d4e583ffec0c7980d405e0", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/development.html"}, "node_info": {"start": 3618, "end": 6457, "_node_type": "1"}, "relationships": {"1": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3", "2": "254c36ec-f3d2-4421-bc1f-07dfb97f8377", "3": "0320d91f-b083-426f-b24f-c6d09af615e4"}}, "__type__": "1"}, "0320d91f-b083-426f-b24f-c6d09af615e4": {"__data__": {"text": "the command is executed, the contract is deployed and the related fee is charged by the system automatically. For more information, refer to the [official guide](https://docs.neo.org/docs/en-us/develop/deploy/deploy.html). \n\n## Invoking the contract\n\nAfter you deployed a smart contract on the blockchain, you can then invoke it by its script hash. You can query contract details, such as the contract general information, methods, notifications, etc.\n\nIn `Neo-CLI`, invoke the contract using the  command line:\n\n```\ninvoke <scriptHash> <operation> [contractParameters=null] [witnessAddress=null]\n```\n\nFor example:\n\n```\ninvoke 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26 symbol\n```\n\nAfter executed successfully, the following information is printed\uff1a\n\n```\nInvoking script with: '10c00c046e616d650c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0103609\nEvaluation Stack: [{\"type\":\"ByteArray\",\"value\":\"VG9rZW5TeW1ib2w=\"}]\n\nrelay tx(no|yes):\n```\n\nWhere:\n\n- VM State: `HALT` indicates the vm executed successfully; `FAULT` indicates the vm exited during execution due to an exception.\n\n- Evaluation Stack: the result of contract execution, where the value is encoded with Base64 when it is a string or ByteArray.\n\n- You can do the data format conversion [here](https://neo.org/converter/) `VG9rZW5TeW1ib2w= => TokenSymbol`\n\nFor more details, please check at the [guide](https://docs.neo.org/docs/en-us/develop/deploy/invoke.html) here.\n\n## Interfacing using NeoLine wallet\n\nThe interaction between smart contracts deployed on the blockchain and its users can happen in many different devices and platforms.\n\nIn our example, we'll use the NeoLine extension plugin wallet to interface with the chain and expose the results in a simple user interface. \n\n### Installation\n\nThe following options are available for you to install the NeoLine plugin, you can choose one of your will.\n\n- Directly download the [NeoLine extension plugin wallet](https://chrome.google.com/webstore/detail/neoline/cphhlgmgameodnhkjdmkpanlelnlohao?utm_source=chrome-ntp-icon) to run the desired chain quickly.\n- Get the latest `crx` release from [here](https://github.com/NeoNEXT/neoline/releases).\n- Or build the project. For more details check at [README](https://github.com/NeoNEXT/neoline#readme)\n\n### Using NeoLine\n\nAfter you installed the NeoLine and pined it to the browser shortcut, then see the gif below to create a wallet.\n\n<img src=\"./images/create.gif\" alt=\"create\" style=\"zoom:50%;\" />\n\nThe following shows that how to transfer `N3 Gas`. you can check the transaction at [N3 NeoTube](https://neo3.neotube.io).\n\n![transfer](./images/transfer.gif)\n\n### Calling the dAPI\n\nAfter you completed the instructions above, you can call the dAPI of NeoLine and run it directly on the browser, without deploying the full node of Neo.</br>\n\nInitialize NeoLine N3 dAPI example.</br>\n\n```js\nwindow.addEventListener('NEOLine.NEO.EVENT.READY', () => {\n    const neoline = new neoline.Init();\n    const neolineN3 = new neolineN3.Init();\n});\n\nneolineN3.getBalance().then(result =>", "doc_id": "0320d91f-b083-426f-b24f-c6d09af615e4", "embedding": null, "doc_hash": "3c9c5701590cbb8ee898447461839b54cdd777e78453c3ae1300f4f2a888c80e", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/development.html"}, "node_info": {"start": 6436, "end": 9514, "_node_type": "1"}, "relationships": {"1": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3", "2": "d16867b4-a773-423e-a20d-114525dd8e28", "3": "54300cbc-9eae-41c6-876c-9aaf91d78174"}}, "__type__": "1"}, "54300cbc-9eae-41c6-876c-9aaf91d78174": {"__data__": {"text": "=> console.log(result));\n```\n\nFor more details check the following links:\n\n- [Neo2 dAPI Docs](https://neoline.io/dapi/)\n- [N3 dAPI Docs](https://neoline.io/dapi/N3.html)\n\n\n\n\n\n\n\n", "doc_id": "54300cbc-9eae-41c6-876c-9aaf91d78174", "embedding": null, "doc_hash": "b651cf1c4a6d14fcb1246395dcdee5ca05de96d992f02ddab7cb444577024c47", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/development.html"}, "node_info": {"start": 9567, "end": 9744, "_node_type": "1"}, "relationships": {"1": "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3", "2": "0320d91f-b083-426f-b24f-c6d09af615e4"}}, "__type__": "1"}, "d61e1c40-eb0e-4046-bbf0-cdcbead8019b": {"__data__": {"text": "# Neo N3 Migration Guideline on Migration Page\n\nThis tutorial will guide you through the process of migrating Neo and GAS tokens from Neo legacy to Neo N3 on the Migration website using N3 compatible wallets.\n\n## Migration with NeoLine Wallet\n\n1. Click the icon in the upper right corner and click `Create wallet`.\n\n    ![](assets/picture1.png)\n\n2. Select `Neo N3` to create a Neo N3 wallet.\n\n    ![](assets/picture2.png)\n\n3. Input your wallet name and password and click `Create` . A new Neo N3 wallet is successfully created. \n   \n    > [!Note]\n    >\n    > Please follow the prompt to back up your private key carefully.\n   \n    ![](assets/picture3.png)\n\n4. Go to the [Migration To N3](https://migration.neo.org/) website. Click `CONNECT WALLET`.\n\n    ![](assets/Picture4.png)\n\n5. Click `Connect NeoLine` to connect a NeoLine wallet.\n\n    ![](assets/Picture5.png)\n\n6. Click `Connect`.\n\n    ![](assets/Picture6.png)\n\n7. Select an asset you want to migrate.\n\n    ![](assets/Picture7.png)\n\n8. Input the amount you want to migrate. \n\n   > [!Note]\n   >\n   > A 1 GAS fee is required if you are migrating less than 10 NEO or 20 GAS. This is because fees are now required on all Neo N3 transactions. Allowing users to migrate small quantities of tokens with no fee opens up an exploit where users could potentially spam transactions to burn Neo Foundation GAS inefficiently.\n\n    ![](assets/Picture8.png)\n\n9. Click `Select an N3 address` to select an N3 wallet address that you want to migrate to and then click `Done`.\n\n    ![](assets/Picture9.png)\n\n10. Click `NEXT` to start the migration.\n\n    ![](assets/Picture10.png)\n\n11. Confirm the migration information. If the information is correct, click `NEXT`. Otherwise, click the `BACK` button to revise the information.\n\n    ![](assets/iShot2021-08-09174013.png)\n\n12. Click `Yes` to approve the migration. \n\n    ![](assets/iShot2021-08-09174132.png)\n\n13. Wait for the migration process to complete. You can click `Migration history` to check the migration status.\n\n     ![](assets/iShot2021-08-09174340.png)\n\n     ![](assets/history.png)\n\n     \n\n\n## Migration with O3 Wallet\n\n1. Open the O3 wallet app. Click the wallet account and click `Create`.\n\n2. Select `NEO N3` and click `Next` to create a Neo N3 wallet.\n   \n    ![](assets/Picture11.png)\n\n3. Input your wallet name and password and click `Create`. A new Neo N3 wallet is successfully created. \n   \n4. Go to the [Migrate To N3](https://migration.neo.org/) website. Click `CONNECT WALLET` to connect a wallet.\n\n    ![](assets/Picture4.png)\n\n5. Click `Connect O3` to connect an O3 wallet.\n\n6. Select an account and click `Connect`.\n\n    ![](assets/Picture6.png)\n\n7. Select an asset you want to migrate.\n\n    ![](assets/Picture7.png)\n\n8. Input the amount you want to migrate.\n\n   > [!Note]\n   >\n   > A 1 GAS fee is required if you are migrating less than 10 NEO or 20 GAS. This is because", "doc_id": "d61e1c40-eb0e-4046-bbf0-cdcbead8019b", "embedding": null, "doc_hash": "1dea53e7030ee242c917e3d3fbb26d960d5391b9717c8a8371966954b4a6784a", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migration-guide.html"}, "node_info": {"start": 0, "end": 2886, "_node_type": "1"}, "relationships": {"1": "09b1d43f7cab658c0a044a4f5608f5a85ceafbb6", "3": "16920f72-1fbf-4bad-9910-8af977788b15"}}, "__type__": "1"}, "16920f72-1fbf-4bad-9910-8af977788b15": {"__data__": {"text": "required if you are migrating less than 10 NEO or 20 GAS. This is because fees are now required on all Neo N3 transactions. Allowing users to migrate small quantities of tokens with no fee opens up an exploit where users could potentially spam transactions to burn Neo Foundation GAS inefficiently.\n\n   ![](assets/Picture8.png)\n\n9. Click `Select an N3 address` to select an address that you want to migrate to, and then click `Select`.\n\n    ![](assets/iShot2021-08-09175750.png)\n\n10. Click `NEXT` to start the migration.\n   \n    ![](assets/Picture10.png)\n\n11. Confirm the migration information. If the information is correct, click `NEXT`. Otherwise, click `BACK` to revise the information.\n\n    ![](assets/iShot2021-08-09174013.png)\n\n12. Click `Approve`. \n\n    ![](assets/iShot2021-08-09180551.png)\n\n13. Wait for the migration process to complete. You can click `Migration history` to check the migration status.\n\n     ![](assets/iShot2021-08-09174340.png)\n\n     ![](assets/history.png)\n", "doc_id": "16920f72-1fbf-4bad-9910-8af977788b15", "embedding": null, "doc_hash": "a22d01b4b7fc2a377db9f8657d54fc7f4df6fea9b02f37576c50f82f7c9728d9", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migration-guide.html"}, "node_info": {"start": 2813, "end": 3801, "_node_type": "1"}, "relationships": {"1": "09b1d43f7cab658c0a044a4f5608f5a85ceafbb6", "2": "d61e1c40-eb0e-4046-bbf0-cdcbead8019b"}}, "__type__": "1"}, "51c86fcd-b680-4aed-beee-4eba7cd16576": {"__data__": {"text": "# Migration from Neo Legacy to Neo N3\n\nThis tutorial is intended to guide developers in migrating the global assets NEO and GAS on the Neo Legacy chain to the Neo N3 chain via the cross-chain technology.\n\n## Exchange to nNEO / cGAS\n\nIn order to facilitate the invocation and precision calculation of assets across chains, as well as the interaction with smart contracts, we need to exchange the UTXO asset NEO /GAS to nNEO / cGAS which are NEP-5 contract mapping assets and can be divided. \n\nnNEO and cGAS are open source and can be found in GitHub: [nNEO ](https://github.com/neo-ngd/CNEO-Contract \"nNEO\") and [cGAS](https://github.com/neo-ngd/CGAS-Contract \"cGAS\").\n\n> [!Note]\n>\n> Because the minimum unit of NEO is 1 and tokens cannot be subdivided, you can only migrate an integer number of NEO (nNEO), e.g. if there are 10.5 nNEOs in the wallet, only 10 nNEOs can be migrated to N3. \n\nnNEO and cGAS can be converted one to one by the global assets NEO and GAS through the `mintTokens`  function. See the example codes as below.\n\nJS example\uff1a\n\n```js\nconst { default: Neon, api, wallet, tx, u, sc, rpc, core } = require(\"@cityofzion/neon-js\");\n\nlet outPutObj1 = {\n    \"assetId\": \"602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7\",\n    \"value\": \"1022\",\n    \"scriptHash\": \"f0e522806601209e9599d5e9b4dfc59773c4a882\"\n}\n\nlet outPutObj2 = {\n    \"assetId\": \"602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7\",\n    \"value\": \"10\",\n    \"scriptHash\": \"74f2dc36a68fdc4682034178eb2220729231db76\" //cGAS hash\n}\n\nlet inputObj = {\n    \"prevHash\": \"f9452b21e6c079e06be717c9eded71a7d947e83f54a962e5277c7c8d56fff86c\",\n    \"prevIndex\": 1\n}\n\nconst props2 = {\n    scriptHash: \"74f2dc36a68fdc4682034178eb2220729231db76\", //cGAS hash\n    operation: \"mintTokens\",\n    args: []\n};\nconst script2 = Neon.default.create.script(props2);\nlet invokeTx = new Neon.tx.InvocationTransaction({ script: script2 })\ninvokeTx.addOutput(new Neon.tx.TransactionOutput(outPutObj1));\ninvokeTx.addOutput(new Neon.tx.TransactionOutput(outPutObj2));\ninvokeTx.inputs[0] = new Neon.tx.TransactionInput(inputObj);\n\ninvokeTx.sign(\"Your private key\")\n\nconst rpcClient = new Neon.rpc.RPCClient(\"http://seed10.ngd.network:20332\");\n\nrpcClient.sendRawTransaction(invokeTx).then((response) => {\n    console.log(response);\n}).catch((err) => {\n    console.log(err);\n});\n\n```\n\nC# example\uff1a\n\n```c#\n//UTXO input\n            var inputs = new List<CoinReference>\n            {\n          ", "doc_id": "51c86fcd-b680-4aed-beee-4eba7cd16576", "embedding": null, "doc_hash": "059cb99dd0fd5eb543b5570a32a4a18d05d43969b0d71201e316d3af75679561", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}, "node_info": {"start": 0, "end": 2455, "_node_type": "1"}, "relationships": {"1": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7", "3": "561a8b3d-931c-4ba6-9bda-e64f247496c9"}}, "__type__": "1"}, "561a8b3d-931c-4ba6-9bda-e64f247496c9": {"__data__": {"text": "        {\n                new CoinReference()\n                {\n                    PrevHash = neoList[0].txid,\n                    PrevIndex = (ushort)neoList[0].n\n                }\n            }.ToArray();\n\n            long amount = 100_2345_6789;\n            //UTXO output\n            var outputs = new List<TransactionOutput>\n            {\n                new TransactionOutput()\n                {\n                    AssetId = Blockchain.UtilityToken.Hash,\n                    ScriptHash = CGAS,\n                    Value = new Fixed8(amount)//Amount\n                },\n                new TransactionOutput()\n                {\n                    AssetId = Blockchain.UtilityToken.Hash,\n                    ScriptHash = User.ScriptHash,\n                    Value = Fixed8.FromDecimal(neoList[0].value) -  new Fixed8(amount)//Amount\n                }\n            }.ToArray();\n\n\n            //Construct a transaction\n            Transaction tx = null;\n            using (ScriptBuilder sb = new ScriptBuilder())\n            {\n                //nNEO hash\n                sb.EmitAppCall(UInt160.Parse(\"0xf46719e2d16bf50cddcef9d4bbfece901f73cbb6\"), \"mintTokens\");     \n                //cGAS hash\n                //sb.EmitAppCall(UInt160.Parse(\"0x74f2dc36a68fdc4682034178eb2220729231db76\"), \"mintTokens\");\n                tx = new InvocationTransaction\n                {\n                    Version = 1,\n                    Script = sb.ToArray(),\n                    Outputs = outputs,\n                    Inputs = inputs,\n                    Attributes = new TransactionAttribute[0],\n                    Witnesses = new Witness[0]\n                };\n      ", "doc_id": "561a8b3d-931c-4ba6-9bda-e64f247496c9", "embedding": null, "doc_hash": "5b15dd15be64e4f0acccaf0234e90f98e199129f1331ebcc9afc3324b0d20cc6", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}, "node_info": {"start": 2454, "end": 4111, "_node_type": "1"}, "relationships": {"1": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7", "2": "51c86fcd-b680-4aed-beee-4eba7cd16576", "3": "1f36dd37-905f-4e2c-adcb-6b42438e815e"}}, "__type__": "1"}, "1f36dd37-905f-4e2c-adcb-6b42438e815e": {"__data__": {"text": "            };\n            }\n\n            //User signature\n            tx.Attributes = Helper.GetAttribute(User.ScriptHash);\n            var signature = tx.Sign(keyPair);\n            tx.Witnesses = Helper.GetWitness(signature, keyPair.PublicKey);\n\n            //Send the transaction\n            byte[] data = tx.ToArray();\n\t\t\tstring rawdata = data.ToHexString();\n            string result = Helper.InvokeRpc(url, \"sendrawtransaction\", rawdata);\n```\n\nJava example\uff1a\n\n```java\n    Neow3j neow3j = Neow3j.build(new HttpService(\"http://seed1.ngd.network:20332\")); // Neo2 test net\n    Account account = Account.fromWIF(\"your wif string\").build();\n    // nNeo contract hash on Neo2 testnet\n    ScriptHash nNeoHash = new ScriptHash(\"0x17da3881ab2d050fea414c80b3fa8324d756f60e\"); \n    account.updateAssetBalances(neow3j);\n    ContractInvocation invoc = new ContractInvocation.Builder(neow3j)\n            .contractScriptHash(nNeoHash)\n            .function(\"mintTokens\")\n            .account(account)\n            .output(new RawTransactionOutput(NEOAsset.HASH_ID, lockValue, nNeoHash.toAddress()))\n            .build()\n            .sign()\n            .invoke();\n    String txHash = invoc.getTransaction().getTxId();\n```\n\n## Cross-chain architecture\n\nIn virtue of the cross-chain technology which is of the capability transferring data from one chain to another, our migration adopts the following architecture:\n\n![](images/migration.png)\n\nThe components in the figure above are defined as follows:\n\n- **Neo Legacy**: neo 2.x side chain, from which the assets are migrated out.\n- **Neo N3**: neo 3.0 side chain, to which the assets are transfered.\n- [**Poly cross chain**](https://github.com/polynetwork/docs/blob/master/poly/README.md): The Poly cross chain plays an important role in the overall architecture, where each node is run by different individuals or organizations with their own governance model and trust mechanism. It is responsible for connecting side chains together and transferring cross-chain information.\n- **Relayer**: Each sidechain has its own Relayer, which is responsible for carrying cross-chain information such as transactions to and from Poly to the sidechain, and they gain rewards in the process.\n- **Cross Chain Management Contract**: The role of Cross Chain Management Contract (CCMC for short) includes but is not limited to processing cross-chain requests, verifying cross-chain transactions, sending cross-chain events, etc.\n- **Proxy contract**: Used to lock and unlock assets. The assets locked/unlocked on both sidechains must be of the same type and number.\n- **User**: Generally refers to all objects involved in a migration process, including but not limited to exchanges, individuals, wallets, etc. The user must invoke a proxy contract to initiate a cross-chain transaction.\n\n## Migration process flow\n\nBefore starting the migration, you need to register two side chains and two Relayers and bind the corresponding assets on both side chains.  \n\n>", "doc_id": "1f36dd37-905f-4e2c-adcb-6b42438e815e", "embedding": null, "doc_hash": "5ab1c07ee4808e833971eace6b4dbe84e64213cfa7a30fc8921a655a35ff042a", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}, "node_info": {"start": 4111, "end": 7092, "_node_type": "1"}, "relationships": {"1": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7", "2": "561a8b3d-931c-4ba6-9bda-e64f247496c9", "3": "d5f66be2-dde2-471e-91ed-909c20161fd7"}}, "__type__": "1"}, "d5f66be2-dde2-471e-91ed-909c20161fd7": {"__data__": {"text": "and two Relayers and bind the corresponding assets on both side chains.  \n\n> [!Warning]\n>\n> Please ensure at least 1 cGAS at the user's address before starting the migration, otherwise the migration may fail!\n>\n> Currently the cross-chain contract adds a condition that migration to N3 is free as long as the amount of assets is greater than or equal to 10 NEO or 20 GAS; otherwise, the contract will charge 1 cGAS at the user's address if the condition is not met.\n\nAs illustrated in the above architecture figure, an usual migration process flow is as follows:\n\n**Neo Legacy side:**\n\n1. The user invokes the proxy contract  `lock`  method on Neo Legacy.\n\n   > [!Note]\n   >\n   > - For the C# invocation code example, refer to [C# Demo](https://github.com/neo-ngd/CrossChainExample/blob/main/CrossChainDemo/Demo.cs).\n   > - For the Java invocation code example, refer to [Java Demo](https://github.com/neo-ngd/CrossChainExample/tree/main/CrossChainDemo_Java/src/main/java/crosschain/demo).\n   > - For the Javascript code example, refer to [JS Demo](https://github.com/neo-ngd/CrossChainExample/tree/main/CrossChainDemo_js).\n\n2. The proxy contract locks the assets to migrate out in its address.\n\n3. The proxy contract invokes the `crossChain` method of CCMC.\n\n4. CCMC generates `Request ID` and saves it.\n\n5. CCMC sends out a cross-chain event.\n\n6. Consensus nodes generate state root and proof of the cross-chain transaction.\n\n7. The Relayer scans sidechain blocks one by one and captures the cross-chain event.\n\n8. The Relayer constructs a transaction to send the state root and proof to Poly.\n\n**Poly side\uff1a**\n\n9. CCMC uses the handler of the Neo Legacy chain to verify the proof via the `from chain ID` in the cross-chain parameter\n10. Poly constructs the new state root and proof for the transaction mentioned in step 8, and sends a cross-chain event.\n\n**Neo N3 side\uff1a**\n\n11. The Relayer scans Poly blocks one by one and captures the cross-chain event.\n12. Relayer invokes the  `verifyAndExecuteTx` method of CCMC to construct a transaction, and sends the block header containing the state root and proof to the sidechain. \n13. CCMC verifies the proof in the Poly transaction\n14. CCMC invokes the  `UnlockAsset` method of Neo N3 proxy contract.\n15. The proxy contract unlocks the corresponding assets and release to the user's Neo N3 address. \n\n## Transfer verification\n\nAfter completing the cross-chain transfer of assets, the exchange needs to check if the assets have arrived by doing the following:\n\n1. Get details for each block using the [getblock](https://docs.neo.org/docs/zh-cn/reference/rpc/latest-version/api/getblock.html) API, including details of all transactions in the block.\n\n3. Invoke the [getapplicationlog](https://docs.neo.org/docs/zh-cn/reference/rpc/latest-version/api/getapplicationlog.html) API to get the details of each transaction and analyze the transaction content to check the user deposit.\n\n### Invoking getapplicationlog\n\nAfter correctly installing the  [ApplicationLogs plugin](https://github.com/neo-project/neo-modules/releases/download/v3.0.0-rc2/ApplicationLogs.zip) and starting the neo-cli node, you can find a folder \"ApplicationLogs\" is generated under the neo-cli root path. The complete contract log is recorded in this directory, and each NEP-17 transaction is recorded in a leveldb file.\n\nHere is an example of the API", "doc_id": "d5f66be2-dde2-471e-91ed-909c20161fd7", "embedding": null, "doc_hash": "d2b65ec6347a6504ec8d4ffd91590df78f0fad6353afe0953f452ffd38b240e6", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}, "node_info": {"start": 7033, "end": 10400, "_node_type": "1"}, "relationships": {"1": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7", "2": "1f36dd37-905f-4e2c-adcb-6b42438e815e", "3": "2c512662-60a7-4897-8d4d-565105a8b9df"}}, "__type__": "1"}, "2c512662-60a7-4897-8d4d-565105a8b9df": {"__data__": {"text": "is recorded in a leveldb file.\n\nHere is an example of the API invoking result.\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"txid\": \"0xd9aaa1243cae91e063a140239807a9de45f82850130ec36403f44770955dd2d7\",\n        \"trigger\": \"Application\",\n        \"vmstate\": \"HALT\",\n        \"gasconsumed\": \"11819770\",\n        \"stack\": [],\n        \"notifications\": [\n            {\n                \"contract\": \"0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\",\n                \"eventname\": \"Transfer\",\n                \"state\": {\n                    \"type\": \"Array\",\n                    \"value\": [\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\"\n                        },\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"7ztGBn8vR7L38EQqojcghdCHCO8=\"\n                        },\n                        {\n                            \"type\": \"Integer\",\n                            \"value\": \"800000000000\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n> [!Note]\n>\n> The failed NEP-17 transaction can also be recorded in the blockchain, so you need to determine whether the vm status parameter \"vmstate\" is correct (HALT).  If it contains \"FAULT\", that means the execution is failed and the transaction is invalid. \n\nThe parameters related to a transaction in the file are the following:\n\n- **contract**: the script hash of smart contract. For exchanges, it is the script hash of NEP17 assets type and the unique identity of the asset. For example, here \"0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\" is the NEP17 asset script hash.\n\n- **eventname**: the event", "doc_id": "2c512662-60a7-4897-8d4d-565105a8b9df", "embedding": null, "doc_hash": "5c70339d21ca9d372bcb188c733ccdc3d40445a3ee89ad9c23698f088e65af86", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}, "node_info": {"start": 10414, "end": 12184, "_node_type": "1"}, "relationships": {"1": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7", "2": "d5f66be2-dde2-471e-91ed-909c20161fd7", "3": "a3dd1699-78f9-4ba4-a15b-4ee3872031e8"}}, "__type__": "1"}, "a3dd1699-78f9-4ba4-a15b-4ee3872031e8": {"__data__": {"text": "is the NEP17 asset script hash.\n\n- **eventname**: the event identifier of smart contact. Exchanges only need to listen on \u201ctransfer\u201d transactions to find out users' transfer transactions. There may be more than one eventname in the Notifications array, and only those with the Transfer keyword are NEP17 Transfer data.\n\n- **state**: The objects included in the array are:\n\n  - from account: The first object in the array is the account address where the asset is transferred from. Its type \"bytearray\" and the value \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\u201c can be  decoded to \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\" with base64. \n\n    > [!Note]\n    >\n    > In Neo, hexadecimal strings are processed in big-endian order if they are preceded by 0x, or little-endian order if they are not.\n\n    ```json\n    {\n    \"type\": \"ByteString\",\n      \"value\": \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\"\n    }\n    ```\n\n  - to account: The second object in the array is the account address where the asset is transferred to.  Its type \"bytearray\" and the value \"7ztGBn8vR7L38EQqojcghdCHCO8=\u201c can be decoded to \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\" with base64. If the address is an exchange account address, it is a deposit transaction.\n\n    ```json\n    {\n    \"type\": \"ByteString\",\n      \"value\": \"7ztGBn8vR7L38EQqojcghdCHCO8=\"\n    }\n    ```\n\n  - amount: The last object in the array is the transfer amount, which value is 800000000000. Since the decimal is 8 bit the value is actually 8000.00000000.\n\n    ```\n    {\n      \"type\": \"Integer\",\n      \"value\": \"800000000000\"\n    }\n    ```\n\n> [!Note]\n>\n> Regarding the data format conversion of the transfer in the file, you can refer to [Neo3 data conversion](https://neo.org/converter/index).\n\n## See also\n\n- [Cross-chain Contract and Asset Contract Hashes](https://github.com/neo-ngd/CrossChainExample/blob/main/contracthash.md)\n- [Cross-chain Configuration Info](https://github.com/polynetwork/docs/blob/master/config/README.md)\n\n", "doc_id": "a3dd1699-78f9-4ba4-a15b-4ee3872031e8", "embedding": null, "doc_hash": "f4843b7e3341897b056c83d3bd32baf0107d49e98d30545fe44b73587a0ed550", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}, "node_info": {"start": 12175, "end": 14113, "_node_type": "1"}, "relationships": {"1": "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7", "2": "2c512662-60a7-4897-8d4d-565105a8b9df"}}, "__type__": "1"}, "d207951c-d99c-4d68-bec7-24d32d67f3df": {"__data__": {"text": "# Migration from Neo Legacy to Neo N3\n\nThis tutorial is intended to guide exchange developers in migrating the global assets NEO/GAS/nNEO/cGAS on the Neo Legacy chain to the Neo N3 chain via transfer transactions.\n\n## Migration process flow\n\n1. On Neo Legacy side, the user sends a transfer transaction (Invocation Transaction/Contracttransaction) to the specific address `ANeo2toNeo3MigrationAddressxwPB2Hz` (`AJ36ZCpMhiHYMdMAUaP7i1i9pJz4jMdiQV` for test net) placing the N3 standard address in `attribute` of the transaction using the key **Remark14**. \n\n   The code demos in multi-languages are provided for your reference: [Demos](https://github.com/neo-ngd/sdkDemo)\n\n   > [!Caution]\n   >\n   > Before sending the transaction, ensure that your transaction meets all the following requirements, otherwise it would not be processed and your assets sent out would be lost!\n   >\n   > - The N3 address in the transaction is valid and only one Remark14 in `attribute`.\n   > - For migration asset amount equal to or more than 10 NEO or 20 GAS it is free. If you are migrating less than that amount, you have to attach **1 GAS as network fee**. \n   > - One transaction can only include one kind of asset for migration except GAS for network fee payment. \n\n   > [!Note]\n   >\n   > Migrating the decimal part of nNEO is not supported. The migration amount will be rounded down when distributing nNEO on N3 blockchain. \n\n2. We will scan all the Neo legacy transactions sent to the specific address and sends the corresponding amount of NEO/GAS token to the N3 address at regular intervals (up to one business day) only if the transaction is valid.\n\n## See also\n\n- [Asset Contract Hashes](https://github.com/neo-ngd/sdkDemo/blob/master/contracthash.md)\n- [Guideline on Migration Page](migration-guide.md)\n", "doc_id": "d207951c-d99c-4d68-bec7-24d32d67f3df", "embedding": null, "doc_hash": "9699ec032511b8197a23c68bcf3ccf0d4721a80f579d7789c7fbc9f09267b581", "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationB.html"}, "node_info": {"start": 0, "end": 1795, "_node_type": "1"}, "relationships": {"1": "3cb9f040f2e1e748c4a4b617345c09b73bbd1b81"}}, "__type__": "1"}, "ed49bec7-7bf7-4b77-9936-7bdfcfd656b7": {"__data__": {"text": "---\nsidebar_label: 'General FAQ'\nsidebar_position: 0\n---\n# General\n\n## What is Neo?\n\nNeo is a distributed network which utilizes blockchain technology and digital identity to digitize assets and automate the management of digital assets using smart contracts. Neo network has two tokens, NEO, representing the right to manage Neo blockchain and GAS, representing the right to use the Neo Blockchain.\n\n## What developer communities does Neo have?\n\nNeo has a large number of worldwide developer communities that have been contributing to Neo development and ecosystem growth for several years. Following are some representative communities:\n\n\n- **COZ** (Global) - Main projects: [Neon Wallet](https://github.com/CityOfZion/neon-wallet), [Neon.js](https://github.com/CityOfZion/neon-js), [Dora](https://github.com/CityOfZion/dora), [Mamba](https://github.com/CityOfZion/neo-mamba), [Boa](https://github.com/CityOfZion/neo3-boa)\n- **NeoResearch** (Brazil) - Main projects: Core development, [NeoCompiler Eco](https://github.com/NeoResearch/neocompiler-eco), [neo-cpp-core](https://github.com/NeoResearch/neo-cpp-core)\n- **NSPCC** (Russia) - Main projects: [NeoFS](https://fs.neo.org/), [NeoGo](https://github.com/nspcc-dev/neo-go)\n- **AxLabs** (Switzerland) - Main projects: [neow3j](https://github.com/neow3j/neow3j), [GrantShares](https://grantshares.io/)\n- **NEXT** (China) - Main projects: [NeoLine](https://github.com/NeoNEXT/neoline), [NeoTube](https://neo3.neotube.io/)\n- **NEO Tracker** (US) - Main projects: [NEO Tracker](https://n3.neotracker.io/), [NEO\u00b7ONE](https://n3.neo-one.io/)\n- **Red4Sec** (Spain) - Main projects: Core development, cybersecurity/auditing (https://red4sec.com/en)\n- **Neo News Today** (Global) - Main projects: [Neo News](https://neonewstoday.com/), [nDapp](https://ndapp.org/), [GasBot](https://neonewstoday.com/gasbot/)\n\n## What is GAS\uff1fHow do I acquire GAS\uff1f\n\nGAS represents the right to use the Neo Blockchain. The Neo network charges GAS for all transactions, including smart contract deployment, contract invocations, Council candidate registration, and usage of NeoFS or the native oracle service.\n\nFees on Neo N3 are split into two types: system fees and network fees. System fees include native platform fees (e.g. contract deployment or council registration) alongside any costs related to smart contract execution. All GAS spent on system fees is burned, removing the GAS from the total token supply.\n\nNetwork fees consist of the cost of transaction verification plus the transaction size multiplied by the fee per byte (a value set by the Neo Council). Users can also provide extra GAS in the network fee portion to receive transaction processing priority. These fees are paid to consensus nodes as a reward for including transactions in blocks.\n\n52M GAS tokens were in circulation at the time of the N3 launch, matching the supply on Neo Legacy in order to allow asset migration to the new network. New GAS tokens are minted in each block; the number of tokens minted is controlled by the Neo Council, elected by NEO token holders.\n\nNEO holders receive a small amount of GAS for simply holding the token; no staking or lockup is required. A larger share of GAS can be received by", "doc_id": "ed49bec7-7bf7-4b77-9936-7bdfcfd656b7", "embedding": null, "doc_hash": "bfe240dcb8cd0a288277611af95a6881a3365c8ffa1654e836627811844f9d5d", "extra_info": {"file_path": "https://developers.neo.org/docs/faq/basic"}, "node_info": {"start": 0, "end": 3220, "_node_type": "1"}, "relationships": {"1": "b95730945569607203de0fc8b9a703fa4ead3b04", "3": "1d4db89d-2486-4abb-923b-526df39479bf"}}, "__type__": "1"}, "1d4db89d-2486-4abb-923b-526df39479bf": {"__data__": {"text": "no staking or lockup is required. A larger share of GAS can be received by voting for a Neo Council member. More information can be found [here](https://neo.org/neogas#tokens).\n\nGAS is claimed automatically whenever the native NEO token contract is invoked, for example when transferring/receiving NEO or performing a vote in Neo's governance mechanism.\n\nMore information can be found in the official [Neo docs](https://docs.neo.org/docs/).\n\n## What consensus algorithms does Neo use\uff1f\n\nNeo uses delegated Byzantine Fault Tolerance (dBFT) algorithm which provides a  \ud835\udc53 = \u230a (\ud835\udc5b\u22121) / 3 \u230b  fault tolerance to a consensus system that comprises n nodes.\n\nThere are several types of nodes in this mechanism, such as the ordinary nodes, the candidate nodes, the committee nodes, and the consensus nodes.\n\nProducing a block requires consensus; a speaker (primary) node is selected to lead the consensus round, proposing a new block, which other consensus nodes will validate and sign agreement to. In accordance with the dBFT algorithm, if more than 2/3 of nodes agree to the proposal, the consensus is reached and the block is committed to the network; otherwise, a new speaker is selected and the process is repeated.\n\nSince each new block is require to pass majority consensus, forks may not occur. This provides full finality to new blocks and transactions contained within, giving assurance to users that transactions will never be dropped or reversed.\n\n## How do I become a Neo council member or consensus node? Are there any incentives?\n\nNeo consensus nodes are elected by NEO holders. The network itself is permissionless; anyone may register as a candidate or cast a vote for a candidate. Candidates with a sufficient share of the total number of votes are elected as Neo Council members. The top 7 of these 21 Council members are the network's consensus (validator) nodes.\n\nFor more information, visit the following [link](https://docs.neo.org/docs/en-us/basic/consensus/vote_validator.html).\n\n## How do I check the status of my transaction?\n\nYou can check any confirmed transaction on any blockchain explorer that is compatible with Neo N3.\n\n## What browsers are available for Neo blockchain?\n\nA full list of explorers for Neo N3 can be found on the [Neo website](https://developers.neo.org/resources).\n\n## Is there an equivalent of the ERC-20 standard for Neo?\n\nYes. NEP-17, the replacement of the standard NEP-5, is the Neo N3 token standard which outlines the specifications to be followed by contracts deployed on the Neo blockchain. It strongly resembles ERC-20, however one key difference is that the `approve/transferFrom` flow is not used on Neo. Instead, smart contracts can react to incoming payments directly and execute custom logic using the `onNep17Payment` functionality.\n\n## Is there a transfer fee between Neo wallets?\n\nYes. On Neo N3, any transaction requires a small amount of GAS.\n\n## If I keep my NEO on an exchange, can I still get my GAS?\n\nThis depends on the exchange; some (such as [Binance](https://www.binance.com/)) have chosen to distribute users their GAS when leaving NEO on the exchange, while others (like [Bittrex](https://www.bittrex.com/)) keep the GAS for themselves. If you want to make sure you receive your GAS, you should move your NEO to a wallet that only you control.\n\n## I have transferred my NEO balance from the exchange and the exchange kept 0.9750 NEO. However, I cannot send this anywhere because you need at least 1 NEO to be able to send. Can this amount be topped up, held, or", "doc_id": "1d4db89d-2486-4abb-923b-526df39479bf", "embedding": null, "doc_hash": "a96e8c4a751cbc4bf00c8983d31426f7558befedb0288efe041d2ba1275c7299", "extra_info": {"file_path": "https://developers.neo.org/docs/faq/basic"}, "node_info": {"start": 3161, "end": 6691, "_node_type": "1"}, "relationships": {"1": "b95730945569607203de0fc8b9a703fa4ead3b04", "2": "ed49bec7-7bf7-4b77-9936-7bdfcfd656b7", "3": "2329cf91-f9fa-46eb-ba34-d04e7e774465"}}, "__type__": "1"}, "2329cf91-f9fa-46eb-ba34-d04e7e774465": {"__data__": {"text": "1 NEO to be able to send. Can this amount be topped up, held, or sold?\n\nYou can keep it there to be sold later, or you can buy additional NEO on the exchange so that your amount is more than 1 NEO. You can also exchange NEO to a divisible token, such as GAS.\n\nIf you already have NEO in your wallet and wish to trade less than 1 full NEO, the balance can be wrapped to bNEO using the NeoBurger service. bNEO is divisible to 8 decimal places, the same as GAS. Although this removes the ability for the user to vote in governance directly, however NeoBurger operates its own optimized voting strategy and allows the earned GAS to be claimed by bNEO holders. More information can be found on the [NeoBurger](https://neoburger.io/home) website.\n", "doc_id": "2329cf91-f9fa-46eb-ba34-d04e7e774465", "embedding": null, "doc_hash": "8a9208bfffa99cd4e9c56fb3a301377c81517fe88619bed683e7839575be023a", "extra_info": {"file_path": "https://developers.neo.org/docs/faq/basic"}, "node_info": {"start": 6687, "end": 7428, "_node_type": "1"}, "relationships": {"1": "b95730945569607203de0fc8b9a703fa4ead3b04", "2": "1d4db89d-2486-4abb-923b-526df39479bf"}}, "__type__": "1"}, "828a6858-7428-4988-93d7-b4ad5478f909": {"__data__": {"text": "---\nsidebar_label: 'NEO-CLI FAQ'\nsidebar_position: 1\n---\n\n# Neo-CLI\n\n## When I start the neo-cli after compiling it myself, it reports an error: System.Collections.Generic.KeyNotFoundException. The given key 'LevelDBStore' was not present in the dictionary.\n\nYou need to install the [LevelDBStore plugin](https://github.com/neo-project/neo-modules/releases), as it is defined in the Neo-CLI config file as the default for storing block data.\n\n## When I start the neo-cli and RpcServer after compiling it myself, they report an error: Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly  Microsoft.AspNetCore.ResponseCompression, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\n\nTo solve this issue, add the following reference to generate the Microsoft.AspNetCore.ResponseCompression.dll file before you compile neo-cli:\n\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.ResponseCompression\" />\n</ItemGroup>\n```\n\n## When I start the second node on the same computer, it reports an error: Unhandled exception. System.IO.IOException: Failed to bind to address xxx: address already in use. \n\nThis error indicates a port conflict. Check the config files of the two nodes and the config files of their respective RpcServer plugins and make sure they are using different ports.\n\n## When I invoke the RPC API openwallet method, it returns an error: Access denied\n\nThe openwallet method is disabled by default in the RpcServer config file for security reasons. If you need to invoke it remotely, remove the method from the DisableMethods field. Please exercise caution before allowing the wallet to be opened remotely on a node operating on MainNet by ensuring that access to the RPC service is restricted.\n\n## How to view NEP-17 asset balances in Neo-CLI\uff1f\n\nTo view NEP-17 asset balances for a given address, invoke the RPC API [getnep17balances](../n3/reference/rpc/latest-version/api/getnep17balances) or use the Neo-CLI command [balanceof](../n3/node/cli/cli#balanceof) .\n", "doc_id": "828a6858-7428-4988-93d7-b4ad5478f909", "embedding": null, "doc_hash": "10ed570fb97be004ae2357e559f69422b826a1ad59a400d22189df9beac9df2a", "extra_info": {"file_path": "https://developers.neo.org/docs/faq/cli"}, "node_info": {"start": 0, "end": 2040, "_node_type": "1"}, "relationships": {"1": "c417e614fdbde925837ff4b7d6b910147c9a917f"}}, "__type__": "1"}, "5f2bb50d-9dc6-4a99-8af3-4ede9d0ea8e5": {"__data__": {"text": "---\nsidebar_label: 'Development FAQ'\nsidebar_position: 1\n---\n\n# Development\n\n## How do I apply for TestNet tokens?\n\nUp to 50 NEO and GAS per day (per address & IP) can be requested via the [NGD faucet](https://neowish.ngd.network/neo3/). If you need more than that, go to https://neo.org/testcoin/apply and fill out the application form. If the application is accepted, you will be notified in three to five workdays. \n\nIf all else fails, you can request assets from other TestNet users via the official [Neo Discord](https://discord.gg/tpMW9Te2pY) server (use #dev-general).\n\n## How do I launch a private chain?\n\nThe easiest way to launch a private Neo N3 chain instance is to use [Neo Express](https://github.com/neo-project/neo-express#neoexpress-and-neotrace). You can run it directly from the command line, or use it as part of the [Neo Blockchain Toolkit for VSCode](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit).\n\nAlternatively, you can use the core client directly by following the instructions below:\n\n- Build a private chain with one node. See [here](../n3/develop/network/private-chain/solo.md).\n- Build a private chain on your local host. See [here](../n3/develop/network/private-chain/private-chain2.md).\n\n## What languages can I use to develop smart contracts?\n\nNeo supports a variety of mainstream programming languages and can be developed using C#, Python, Go, and Java. Compilers and other well-developed infrastructure can be found for each of these languages:\n\n- C# - [Neo Devpack Dotnet](https://github.com/neo-project/neo-devpack-dotnet)\n- Python - [Boa](https://github.com/CityOfZion/neo3-boa)\n- Go - [NeoGo](https://github.com/nspcc-dev/neo-go)\n- Java - [neow3j](https://github.com/neow3j/neow3j)\n\n## What SDKs are provided for developers?\n\nNeo developer communities have developed and maintained various SDKs for many mainstream languages including C#, JavaScript, Java, Python, and Go. You can check them out here:\n\n- C# SDK: [neo-devpack-dotnet](https://github.com/neo-project/neo-devpack-dotnet)\n- JavaScript SDK: [neon-js](https://github.com/CityOfZion/neon-js)\n- Java SDK: [neow3j](https://github.com/neow3j/neow3j)\n- Go: [neo-go](https://github.com/nspcc-dev/neo-go) / [neo-gogogo](https://github.com/neo-ngd/neo-gogogo)\n- Python: [neo-mamba](https://github.com/CityOfZion/neo-mamba)\n\n## How do I obtain the asset hash for NEP-17 tokens?\n\nThe asset hash of a given token is the contract's script hash. The most convenient method of obtaining an asset hash is by using a blockchain explorer which maintains a token list. A number of explorers offering this functionality can be found below:\n\n- [OneGate](https://explorer.onegate.space/tokens/Nep17/1)\n- [NeoTube](https://neo3.neotube.io/tokens)\n- [NeoTracker](https://n3.neotracker.io/browse/asset/1)\n\nKeep in mind that asset hashes will be different across different networks (excluding the NEO and GAS native token contracts).\n\n## Why do I receive a", "doc_id": "5f2bb50d-9dc6-4a99-8af3-4ede9d0ea8e5", "embedding": null, "doc_hash": "7668bc8c506b1b1808dfa89adefb6aa2ad1023cb753df5341b9b03791f57ca11", "extra_info": {"file_path": "https://developers.neo.org/docs/faq/dev"}, "node_info": {"start": 0, "end": 2973, "_node_type": "1"}, "relationships": {"1": "036a1879dcb7c2996f8247913ceef0e9d2d6ad6b", "3": "55ecf169-c0fa-40ad-80fd-e735932bfd21"}}, "__type__": "1"}, "55ecf169-c0fa-40ad-80fd-e735932bfd21": {"__data__": {"text": "the NEO and GAS native token contracts).\n\n## Why do I receive a prompt saying that the object has no private key in the wallet when withdrawing assets from a multi-party signature contract?\n\nAfter the private chain has been set up, you need to make the same configurations in all (n/2+1) wallets (n is the node number). In other words, add the multi-party signed address to each and then rebuild the wallet index.\n", "doc_id": "55ecf169-c0fa-40ad-80fd-e735932bfd21", "embedding": null, "doc_hash": "64af1d0c09ecd2737a87ac9e3b9f4d14de11e299c2ea48c29f4c27d659df6316", "extra_info": {"file_path": "https://developers.neo.org/docs/faq/dev"}, "node_info": {"start": 2910, "end": 3324, "_node_type": "1"}, "relationships": {"1": "036a1879dcb7c2996f8247913ceef0e9d2d6ad6b", "2": "5f2bb50d-9dc6-4a99-8af3-4ede9d0ea8e5"}}, "__type__": "1"}, "02942f42-6cf3-4b7a-bd2d-58e22badbb72": {"__data__": {"text": "# NeoVM Instructions\n\n## Built-in data types\n\nNeoVM has following built-in data types:\n\n| Type | Description |\n|------|------|\n| Array | Implemented as a `List<StackItem>`, the `StackItem` is an abstract class, and all the built-in data types are inherited from it. |\n| Boolean |  Implemented as two byte arrays, `TRUE` and `FALSE`.  |\n| Buffer        | Readonly byte array, implemented as a buffer array `byte[]`  |\n| ByteString        | Readonly byte array, implemented as a `ReadOnlyMemory<byte>` |\n| Integer | Implemented as a `BigInteger` value.  |\n| InteropInterface | Interoperable interface |\n| Map | Implemented as a key-value pair `Dictionary<StackItem, StackItem>`.  |\n| Null | Null type |\n| Pointer    | Implemented as a context `Script` and an instruction `Position` |\n| Struct |  Inherited from Array, a `Clone` method is added and `Equals` method is overridden. |\n\n- `CompoundType` : Compound type, which includes  `Array`, `Map` and `Struct`\u3002\n- `PrimitiveType`: Basic type which includes `Boolean`, `ByteString` and `Integer`\u3002\n\n```cs\n// boolean type\nprivate static readonly byte[] TRUE = { 1 };\nprivate static readonly byte[] FALSE = { 0 };\n\nprivate bool value;\n```\n\n## Instructions\n\nNeoVM has implemented 189 instructions. The categories are as follows:\n\n| Constant | Flow Control | Stack Operation | Slot Operation |String Operation | Logical Operation | Arithmetic Operation | Advanced Data Structure | Type Operation |\n| ---- | -------- | ------ | ------ | -------- | -------- | -------- | ---- | ---- |\n| 29 | 32 | 15 | 50 | 6 | 6 | 25 | 18 | 3|\n\nDetails of each instruction in each category are introduced as follows.\n\n### Constants\n\nThe constant instructions mainly complete the function of pushing constants or arrays into the `EvaluationStack`.\n\n#### PUSHINT\n\n| Instruction   | PUSHINT8, PUSHINT16, PUSHINT32, PUSHINT64, PUSHINT128, PUSHINT256                                   |\n|----------|---------------------------------------|\n| Bytecode | 0x00, 0x01, 0x02, 0x03, 0x04, 0x05                                                  |\n| Fee | 0.00000001 GAS, 0.00000001 GAS, 0.00000001 GAS, 0.00000001 GAS, 0.00000004 GAS, 0.00000004 GAS |\n| Function   | Push an integer onto the stack, the bit length of which is specified with the number 8\\16\\32\\64\\128\\256. |\n\n#### PUSHT/PUSHF\n\n| Instruction | PUSHT, PUSHF                                      |\n| ----------- | ------------------------------------------------- |\n| Bytecode    | 0x08, 0x09                                        |\n| Fee         | 0.00000001 GAS                                    |\n| Function    | Push the Boolean value True/False onto the stack. |\n\n#### PUSHA\n\n| Instruction   | PUSHA", "doc_id": "02942f42-6cf3-4b7a-bd2d-58e22badbb72", "embedding": null, "doc_hash": "512387c623d12a0ac8ffaa0ef7815cbb5077efaf8639e5407a15db3ae8696881", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 0, "end": 2679, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "3": "7c1a0ab5-5098-4b00-b121-e2199ccd23b5"}}, "__type__": "1"}, "7c1a0ab5-5098-4b00-b121-e2199ccd23b5": {"__data__": {"text": "stack. |\n\n#### PUSHA\n\n| Instruction   | PUSHA                                 |\n|----------|----------|\n| Bytecode | 0x0A                                  |\n| Fee | 0.00000004 GAS             |\n| Function | Convert the next four bytes to an address, and push the address onto the stack. |\n\n#### PUSHNULL\n\n| Instruction   | PUSHNULL                                   |\n|----------|------------------------------------------|\n| Bytecode | 0x0B                                     |\n| Fee | 0.00000001 GAS                 |\n| Function   | The item `null` is pushed onto the stack. |\n\n#### PUSHDATA\n\n| Instruction   | PUSHDATA1, PUSHDATA2, PUSHDATA4                                   |\n|----------|---------------------------------------|\n| Bytecode | 0x0C, 0x0D, 0x0E                                                  |\n| Fee | 0.00000008 GAS, 0.00000512 GAS, 0.00004096 GAS |\n| Function   | The next `n` bytes contain the number of bytes to be pushed onto the stack, where n is specified by 1\\|2\\|4. |\n\n#### PUSHM1\n\n| Instruction   | PUSHM1                                   |\n|----------|------------------------------------------|\n| Bytecode | 0x0F                                     |\n| Fee | 0.00000001 GAS               |\n| Function   | The number -1 is pushed onto the stack. |\n\n#### PUSHN\n\n| Instruction   | PUSH0\\~PUSH16                               |\n|----------|---------------------------------------------|\n| Bytecode | 0x10\\~0x20                                  |\n| Fee | 0.00000001 GAS                        |\n| Function   | The number `n` is pushed onto the stack\uff0cwhere n is specified by 0\\~16. |\n\n### Flow Control\n\nIt's used to control the running process of NeoVM, including jump, call and other instructions.\n\n#### NOP\n\n| Instruction   | NOP                                         |\n|----------|---------------------------------------------|\n| Bytecode | 0x21                                        |\n| Fee | 0.00000001 GAS         ", "doc_id": "7c1a0ab5-5098-4b00-b121-e2199ccd23b5", "embedding": null, "doc_hash": "d0199c224ff095cf36dea08b16bcb2aa3d38cd1cf0200539b49d74a74d13e4e4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 2642, "end": 4594, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "02942f42-6cf3-4b7a-bd2d-58e22badbb72", "3": "dfcb81de-b126-4b40-b419-4f69d9fcb623"}}, "__type__": "1"}, "dfcb81de-b126-4b40-b419-4f69d9fcb623": {"__data__": {"text": "Fee | 0.00000001 GAS                  |\n| Function   | The `NOP` operation does nothing. It is intended to fill in space if opcodes are patched. |\n\n#### JMP\n\n| Instruction   | JMP                                                     |\n|----------|---------------------------------------------------------|\n| Bytecode | 0x22                                                    |\n| Fee | 0.00000002 GAS                              |\n| Function   | Unconditionally transfers control to a target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMP_L\n\n| Instruction   | JMP_L                                                     |\n|----------|---------------------------------------------------------|\n| Bytecode | 0x23                                                    |\n| Fee | 0.00000002 GAS                              |\n| Function   | Unconditionally transfers control to a target instruction. The target instruction is represented as a 4-bytes signed offset from the beginning of the current instruction.|\n\n#### JMPIF\n\n| Instruction   | JMPIF                                                                                                                |\n|----------|----------------------------------------------------------------------------------------------------------------------|\n| Bytecode | 0x24                                                                                                                 |\n| Fee | 0.00000002 GAS                                                                                           |\n| Function   | Transfers control to a target instruction if the value is `true`, not `null`, or non-zero. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction.|\n\n#### JMPIF_L\n\n| Instruction   | JMPIF                                                               ", "doc_id": "dfcb81de-b126-4b40-b419-4f69d9fcb623", "embedding": null, "doc_hash": "8dab37db44295c39743a7822341380467a39082a60691347def9ffeca417fcdf", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 4616, "end": 6555, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "7c1a0ab5-5098-4b00-b121-e2199ccd23b5", "3": "c9d41d00-6881-445d-bc8a-bec726fb4bfb"}}, "__type__": "1"}, "c9d41d00-6881-445d-bc8a-bec726fb4bfb": {"__data__": {"text": "                                                                    |\n|----------|----------------------------------------------------------------------------------------------------------------------|\n| Bytecode | 0x25                                                                                                                 |\n| Fee | 0.00000002 GAS                                                                                           |\n| Function   | Transfers control to a target instruction if the value is `true`, not `null`, or non-zero. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPIFNOT\n\n| Instruction   | JMPIFNOT                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x26                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the value is `false`, a `null` reference, or zero. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPIFNOT_L\n\n| Instruction   | JMPIFNOT_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x27                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the value is `false`, a `null` reference, or zero. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPEQ\n\n| Instruction   | JMPEQ                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x28               ", "doc_id": "c9d41d00-6881-445d-bc8a-bec726fb4bfb", "embedding": null, "doc_hash": "2dca3e6e5898046f91a53cbd374fff347a6f1be494268b5696ab44961282e2ce", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 6573, "end": 8570, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "dfcb81de-b126-4b40-b419-4f69d9fcb623", "3": "245afa70-60f1-45ed-a23d-53a89e143f5b"}}, "__type__": "1"}, "245afa70-60f1-45ed-a23d-53a89e143f5b": {"__data__": {"text": "| 0x28                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if two values are equal. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPEQ_L\n\n| Instruction   | JMPEQ_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x29                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if two values are equal. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPNE\n\n| Instruction   | JMPNE                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2A                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction when two values are not equal. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPNE_L\n\n| Instruction   | JMPNE_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2B                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction when two values are not equal. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGT\n\n| Instruction   | JMPGT                                            ", "doc_id": "245afa70-60f1-45ed-a23d-53a89e143f5b", "embedding": null, "doc_hash": "2decbb70e46e52e4b374fc1aaf85e9d019c4363d420c8e2a3f6bbe23cf47df38", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 8566, "end": 10564, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "c9d41d00-6881-445d-bc8a-bec726fb4bfb", "3": "1540a81f-0fdc-4569-a96b-dd89b032882d"}}, "__type__": "1"}, "1540a81f-0fdc-4569-a96b-dd89b032882d": {"__data__": {"text": "                                  |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2C                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGT_L\n\n| Instruction   | JMPGT_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2D                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGE\n\n| Instruction   | JMPGE                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2E                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than or equal to the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPGE_L\n\n| Instruction   | JMPGE_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x2F                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is greater than or equal to the second value. The target instruction is represented as a 4-byte", "doc_id": "1540a81f-0fdc-4569-a96b-dd89b032882d", "embedding": null, "doc_hash": "60cdc3dce2c2465c7212449b65eb1de97450f003fc05a205630416048466d38b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 10570, "end": 12677, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "245afa70-60f1-45ed-a23d-53a89e143f5b", "3": "64150751-abf0-4a5f-8d09-be10aa21c512"}}, "__type__": "1"}, "64150751-abf0-4a5f-8d09-be10aa21c512": {"__data__": {"text": "than or equal to the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLT\n\n| Instruction   | JMPLT                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x30                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLT_L\n\n| Instruction   | JMPLT_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x31                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLE\n\n| Instruction   | JMPLE                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x32                                                               |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than or equal to the second value. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### JMPLE_L\n\n| Instruction   | JMPLE_L                                                           |\n|----------|--------------------------------------------------------------------|\n| Bytecode | 0x33                                                               |\n| Fee | 0.00000002 GAS                 ", "doc_id": "64150751-abf0-4a5f-8d09-be10aa21c512", "embedding": null, "doc_hash": "294974d9c09619e9209c8b2467fbe928c38a1f18c85ab7e379eeab889d9e555d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 12608, "end": 14717, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "1540a81f-0fdc-4569-a96b-dd89b032882d", "3": "04c26d69-4e05-4ecb-a2e1-831572f544b3"}}, "__type__": "1"}, "04c26d69-4e05-4ecb-a2e1-831572f544b3": {"__data__": {"text": "GAS                                          |\n| Function   | Transfers control to a target instruction if the first value is less than or equal to the second value. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### CALL\n\n| Instruction   | CALL                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x34                                                  |\n| Fee | 0.00000512 GAS             |\n| Function   | Calls the function at the target address which is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### CALL_L\n\n| Instruction   | CALL_L                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x35                                                  |\n| Fee | 0.00000512 GAS             |\n| Function   | Calls the function at the target address which is represented as a 4-bytes signed offset from the beginning of the current instruction. |\n\n#### CALLA\n\n| Instruction   | CALLA                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x36                                                  |\n| Fee | 0.00000512 GAS             |\n| Function   | Pops the address of a function from the stack, and call the function. |\n\n#### CALLT\n\n| Instruction | CALLT                                                        |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x37                                                         |\n| Fee         | 0.00032768 GAS                                               |\n| Function    | Pops the function Token from the stack, and call the function. |\n\n#### ABORT\n\n| Instruction   | ABORT                                                  |\n|----------|-------------------------------------------------------|\n| Bytecode | 0x38                   ", "doc_id": "04c26d69-4e05-4ecb-a2e1-831572f544b3", "embedding": null, "doc_hash": "1beb3091e88d278a087fd6de0b9177930962b4c36c84be0f49a68869e40db4aa", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 14785, "end": 16848, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "64150751-abf0-4a5f-8d09-be10aa21c512", "3": "c2f3730a-7e96-45d7-84c3-3f14cc629fb0"}}, "__type__": "1"}, "c2f3730a-7e96-45d7-84c3-3f14cc629fb0": {"__data__": {"text": "                                                 |\n| Fee | 0 GAS                           |\n| Function   | It turns the vm state to FAULT immediately, and the exception cannot be caught. |\n\n#### ASSERT\n\n| Instruction   | ASSERT                                                       |\n|----------|------------------------------------------------------------------|\n| Bytecode | 0x39                                                             |\n| Fee | 0.00000001 GAS                                          |\n| Function   | Pop the top value of the stack, if it is false, then exit vm execution and set vm state to FAULT. |\n\n#### THROW\n\n| Instruction   | THROW                 |\n|----------|-----------------------|\n| Bytecode | 0x3A                  |\n| Fee | 0.00000512 GAS                            |\n| Function   | Throws the exception of stack top |\n\n#### TRY\n\n| Instruction | TRY                                                          |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3B                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Enters the block of Try statement. The Catch and Finally address offset are represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### TRY_L\n\n| Instruction | TRY_L                                                        |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3C                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Enters the block of Try statement. The Catch and Finally address offset are represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### ENDTRY\n\n| Instruction | ENDTRY         ", "doc_id": "c2f3730a-7e96-45d7-84c3-3f14cc629fb0", "embedding": null, "doc_hash": "4c1dc8d7a0cb3b4e97fdf215786a40a573059586585c3ab443766ab96164bfcd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 16852, "end": 18769, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "04c26d69-4e05-4ecb-a2e1-831572f544b3", "3": "b4670df9-a98e-455d-95a9-422c40220432"}}, "__type__": "1"}, "b4670df9-a98e-455d-95a9-422c40220432": {"__data__": {"text": "ENDTRY\n\n| Instruction | ENDTRY                                                       |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3D                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Terminates the block Try and unconditionally transfers control to a target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the current instruction. |\n\n#### ENDTRY_L\n\n| Instruction | ENDTRY_L                                                     |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3E                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Terminates the block Try and unconditionally transfers control to a target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the current instruction. |\n\n#### ENDFINALLY\n\n| Instruction | ENDFINALLY                                                   |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0x3F                                                         |\n| Fee         | 0.00000004 GAS                                               |\n| Function    | Terminates the block Finally and goes to the target instruction ENDTRY/ENDTRY_L if there is no exception, or throw the exception to the  upper level again. |\n\n#### RET\n\n| Instruction   | RET                                                                                              |\n|----------|--------------------------------------------------------------------------------------------------|\n| Bytecode | 0x40                                                                                             |\n| Fee", "doc_id": "b4670df9-a98e-455d-95a9-422c40220432", "embedding": null, "doc_hash": "c574994d5b4c590a201dbd9799e770b3aa08ff2da3f63723184511863bca7090", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 18743, "end": 20698, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "c2f3730a-7e96-45d7-84c3-3f14cc629fb0", "3": "b5cc396c-02fb-420e-b87d-92446cd5cae7"}}, "__type__": "1"}, "b5cc396c-02fb-420e-b87d-92446cd5cae7": {"__data__": {"text": "               |\n| Fee | 0 GAS                                                        |\n| Function   | Returns from the current method. |\n\n#### SYSCALL\n\n| Instruction   | SYSCALL                                                |\n|----------|--------------------------------------------------------|\n| Bytecode | 0x41                                                   |\n| Fee | 0 GAS                                                        |\n| Function   | Calls to an interop service. |\n### Stack Operation\n\nCopy, remove and swap the elements of the stack.\n\n#### DEPTH\n| Instruction   | DEPTH                          |\n|----------|------------------------------------------|\n| Bytecode | 0x43                                     |\n| Fee | 0.00000002 GAS                                          |\n| Function | Puts the number of stack items onto the stack. |\n\n#### DROP\n\n| Instruction   | DROP                   |\n|----------|------------------------|\n| Bytecode | 0x45                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Removes the top stack item. |\n\n#### NIP\n\n| Instruction   | NIP                               |\n|----------|------------------------------------------|\n| Bytecode | 0x46                                     |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Removes the second-to-top stack item. |\n\n#### XDROP\n\n| Instruction   | XDROP                                              |\n|----------|----------------------------------------------------|\n| Bytecode | 0x48                                               |\n| Fee | 0.00000016 GAS                                          |\n| Function   | The item n back in the main stack is removed. |\n| Function | Gets the integer N from the top stack and", "doc_id": "b5cc396c-02fb-420e-b87d-92446cd5cae7", "embedding": null, "doc_hash": "6448137601acc8ddb19cb5be03e4df37b1a16b6f06e47faf4328d1faea5a308b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 20720, "end": 22517, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "b4670df9-a98e-455d-95a9-422c40220432", "3": "476d22bf-6250-449c-9c25-9504f84b06a5"}}, "__type__": "1"}, "476d22bf-6250-449c-9c25-9504f84b06a5": {"__data__": {"text": "stack is removed. |\n| Function | Gets the integer N from the top stack and removes elements indexed to N from the remaining elements of the stack. |\n\n#### CLEAR\n\n| Instruction   | CLEAR                             |\n|----------|------------------------------------------|\n| Bytecode | 0x49                                     |\n| Fee | 0.00000016 GAS                 |\n| Function   | Clear the stack |\n\n#### DUP\n\n| Instruction   | DUP                    |\n|----------|------------------------|\n| Bytecode | 0x4A                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Copies the top stack item to the top. |\n\n#### OVER\n\n| Instruction   | OVER                    |\n|----------|------------------------|\n| Bytecode | 0x4B                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Copies the second-to-top stack item to the top. |\n\n#### PICK\n\n| Instruction   | PICK                    |\n|----------|------------------------|\n| Bytecode | 0x4D                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Gets the integer N from the top stack and copies elements indexed to N from the remaining elements of the stack to the top. |\n\n#### TUCK\n\n| Instruction   | TUCK                    |\n|----------|------------------------|\n| Bytecode | 0x4E                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | The item at the top of the stack is copied and inserted before the second-to-top item. |\n\n#### SWAP\n\n| Instruction   | SWAP                    |\n|----------|------------------------|\n| Bytecode | 0x50                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | The top two items on the stack are swapped. |\n\n#### ROT\n\n| Instruction   | ROT                    |\n|----------|------------------------|\n| Bytecode | 0x51                   |\n| Fee | 0.00000002 GAS             ", "doc_id": "476d22bf-6250-449c-9c25-9504f84b06a5", "embedding": null, "doc_hash": "8ca7f3aed022ec85d82102263881221a16513b54055b5470ab2657e3c6e28c7f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 22464, "end": 24445, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "b5cc396c-02fb-420e-b87d-92446cd5cae7", "3": "227f3b72-5399-4570-874b-bf9fcbf92d4d"}}, "__type__": "1"}, "227f3b72-5399-4570-874b-bf9fcbf92d4d": {"__data__": {"text": "| 0.00000002 GAS                                          |\n| Function   | Moves the elements indexed to 2 to the top |\n\n#### ROLL\n\n| Instruction   | ROLL                    |\n|----------|------------------------|\n| Bytecode | 0x52                   |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Gets the integer N from the top stack and moves elements indexed to N from the remaining elements of the stack to the top. |\n\n#### REVERSE3\n\n| Instruction   | REVERSE3                    |\n|----------|------------------------|\n| Bytecode | 0x53                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Reverse the order of the top 3 items on the stack. |\n\n#### REVERSE4\n\n| Instruction   | REVERSE4                    |\n|----------|------------------------|\n| Bytecode | 0x54                   |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Reverse the order of the top 4 items on the stack. |\n\n#### REVERSEN\n\n| Instruction   | REVERSEN                    |\n|----------|------------------------|\n| Bytecode | 0x55                   |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Gets the integer N from the top stack, and reverse the order of the top N items on the stack. |\n\n### Slot\n\n#### INITSSLOT\n\n| Instruction   | INITSSLOT                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x56                                  |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Initialize the static field list for the current execution context. |\n\n#### INITSLOT\n\n| Instruction   | INITSLOT                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x57                                  |\n| Fee | 0.00000064 GAS                                ", "doc_id": "227f3b72-5399-4570-874b-bf9fcbf92d4d", "embedding": null, "doc_hash": "dfca7549d2b07c51752a14a07101826e8792a73ff29cda0c4e5ac83d8355c051", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 24492, "end": 26400, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "476d22bf-6250-449c-9c25-9504f84b06a5", "3": "c21812ef-557b-4057-9fb0-c29a839928e5"}}, "__type__": "1"}, "c21812ef-557b-4057-9fb0-c29a839928e5": {"__data__": {"text": "                             |\n| Function   | Initialize the argument slot and the local variable list for the current execution context. |\n\n#### LDSFLDN\n\n| Instruction   | LDSFLD0\\~LDSFLD6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x58\\~0x5E                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the static field at index `n` onto the evaluation stack, where the n is 0\\~6\u3002 |\n\n#### LDSFLD\n\n| Instruction   | LDSFLD                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x5F                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the static field at a specified index onto the evaluation stack. The index is represented as a 1-byte unsigned integer. |\n\n#### STSFLDN\n\n| Instruction   | STSFLD0\\~STSFLD6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x60\\~0x0x66                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the static field list at index `n`, where the n is 0\\~6\u3002 |\n\n#### STSFLD\n\n| Instruction   | STSFLD                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x67                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the static field list at a specified index. The index is represented as a 1-byte unsigned integer. |\n\n#### LDLOCN\n\n| Instruction   | LDLOC0\\~LDLOC6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x68\\~0x6E                                  |\n| Fee | 0.00000002 GAS                           ", "doc_id": "c21812ef-557b-4057-9fb0-c29a839928e5", "embedding": null, "doc_hash": "34fa7a9fd3b8b7cfd3b366753c02ff913fd8da51791106b850011e259da84a16", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 26415, "end": 28354, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "227f3b72-5399-4570-874b-bf9fcbf92d4d", "3": "086c90f4-d833-466f-aa3c-ffb8895792a5"}}, "__type__": "1"}, "086c90f4-d833-466f-aa3c-ffb8895792a5": {"__data__": {"text": "                                  |\n| Function   | Loads the local variable at index `n` onto the evaluation stack, where the n is 0\\~6\u3002 |\n\n#### LDLOC\n\n| Instruction   | LDLOC                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x6F                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the local variable at a specified index onto the evaluation stack. The index is represented as a 1-byte unsigned integer. |\n\n#### STLOCN\n\n| Instruction   | STLOC0\\~STLOC6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x70\\~0x76                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the local variable list at index `n`, where the n is 0\\~6\u3002 |\n\n#### STLOC\n\n| Instruction   | STLOC                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x77                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the local variable list at a specified index. The index is represented as a 1-byte unsigned integer. |\n\n#### LDARGN\n\n| Instruction   | LDARG0\\~LDARG6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x78\\~0x7E                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Loads the argument at index `n` onto the evaluation stack, where the n is 0\\~6. |\n\n#### LDARG\n\n| Instruction   | LDARG                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x7F                                  |\n| Fee | 0.00000002 GAS                                         ", "doc_id": "086c90f4-d833-466f-aa3c-ffb8895792a5", "embedding": null, "doc_hash": "698a34eeff42d3ea5381befe102d10e9ad857117e1ab682199e70df8826792ab", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 28355, "end": 30281, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "c21812ef-557b-4057-9fb0-c29a839928e5", "3": "34863f34-778f-47ca-94bd-56a685709bea"}}, "__type__": "1"}, "34863f34-778f-47ca-94bd-56a685709bea": {"__data__": {"text": "                    |\n| Function   | Loads the argument at a specified index onto the evaluation stack. The index is represented as a 1-byte unsigned integer. |\n\n#### STARGN\n\n| Instruction   | STARG0\\~STARG6                                  |\n|----------|---------------------------------------|\n| Bytecode | 0x80\\~0x86                                |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the argument slot at index `n`, where the n is 0\\~6. |\n\n#### STARG\n\n| Instruction   | STARG                                 |\n|----------|--------------------------------------|\n| Bytecode | 0x87                                  |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Stores the value on top of the evaluation stack in the argument slot at a specified index. The index is represented as a 1-byte unsigned integer. |\n\n### String Operation\n\n#### NEWBUFFER\n\n| Instruction   | NEWBUFFER                                              |\n|----------|--------------------------------------------------|\n| Bytecode | 0x88                                             |\n| Fee | 0.00000256  GAS                                         |\n| Function   | Create a new buffer |\n\n#### MEMCPY\n\n| Instruction   | MEMCPY                                              |\n|----------|--------------------------------------------------|\n| Bytecode | 0x89                                             |\n| Fee | 0.00002048  GAS                                         |\n| Function   | memory copy |\n\n#### CAT\n\n| Instruction   | CAT                                              |\n|----------|--------------------------------------------------|\n| Bytecode | 0x8B                                             |\n| Fee | 0.00002048  GAS                                        ", "doc_id": "34863f34-778f-47ca-94bd-56a685709bea", "embedding": null, "doc_hash": "66c7a0d1fe7fbfb355ba2a20da07265eec08da71496449d82afe0c5d49a02915", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 30282, "end": 32152, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "086c90f4-d833-466f-aa3c-ffb8895792a5", "3": "92a9fcd9-5f9d-4b88-abbd-620c5f6d772a"}}, "__type__": "1"}, "92a9fcd9-5f9d-4b88-abbd-620c5f6d772a": {"__data__": {"text": "                    |\n| Function   | Concatenates two strings. |\n\n#### SUBSTR\n\n| Instruction   | SUBSTR                                       |\n|----------|----------------------------------------------|\n| Bytecode | 0x8C                                         |\n| Fee | 0.00002048 GAS                                          |\n| Function   | Returns a section of a string. |\n\n#### LEFT\n\n| Instruction   | LEFT                                         |\n|----------|----------------------------------------------|\n| Bytecode | 0x8D                                         |\n| Fee | 0.00002048 GAS                                          |\n| Function   | Gets characters in the left of the specified point in a string. |\n\n#### RIGHT\n\n| Instruction   | RIGHT                                        |\n|----------|----------------------------------------------|\n| Bytecode | 0x8E                                         |\n| Fee | 0.00002048 GAS                                          |\n| Function   | Gets characters in the right of the specified point in a string. |\n\n### Logical Operation\n\n#### INVERT\n\n| Instruction   | INVERT                       |\n|----------|------------------------------|\n| Bytecode | 0x90                         |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Flips all of the bits in the input. |\n\n#### AND\n\n| Instruction   | AND                                    |\n|----------|----------------------------------------|\n| Bytecode | 0x91                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Boolean and between each bit in the inputs |\n\n#### OR\n\n| Instruction   | OR                                     |\n|----------|----------------------------------------|\n| Bytecode | 0x92               ", "doc_id": "92a9fcd9-5f9d-4b88-abbd-620c5f6d772a", "embedding": null, "doc_hash": "f018d7efe6f1e51bffde2e889db725093ec567045484042128f7186e570a09df", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 32153, "end": 33973, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "34863f34-778f-47ca-94bd-56a685709bea", "3": "9a00af15-9e6e-4b10-b3d3-3971d1ddd0ff"}}, "__type__": "1"}, "9a00af15-9e6e-4b10-b3d3-3971d1ddd0ff": {"__data__": {"text": "| 0x92                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Boolean or between each bit in the inputs. |\n\n#### XOR\n\n| Instruction   | XOR                                      |\n|----------|------------------------------------------|\n| Bytecode | 0x93                                     |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Boolean exclusive or between each bit in the inputs. |\n\n#### EQUAL\n\n| Instruction   | EQUAL                                        |\n|----------|----------------------------------------------|\n| Bytecode | 0x97                                         |\n| Fee | 0.00000032 GAS                                          |\n| Function   | Returns 1 if the inputs are exactly equal, 0 otherwise. |\n\n#### NOTEQUAL\n\n| Instruction   | NOTEQUAL                                        |\n|----------|----------------------------------------------|\n| Bytecode | 0x98                                         |\n| Fee | 0.00000032 GAS                                          |\n| Function   | Returns 1 if the inputs are not equal, 0 otherwise. |\n\n### Arithmetic Operation\n\n#### SIGN\n\n| Instruction   | SIGN                                         |\n|----------|----------------------------------------------|\n| Bytecode | 0x99                                         |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Puts the sign of top stack item on top of the main stack. If value is negative, put -1; if positive, put 1; if value is zero, put 0. |\n\n#### ABS\n\n| Instruction   | ABS                            |\n|----------|--------------------------------|\n| Bytecode | 0x9A                           |\n| Fee | 0.00000004 GAS                        ", "doc_id": "9a00af15-9e6e-4b10-b3d3-3971d1ddd0ff", "embedding": null, "doc_hash": "bd00a533e3af13359c50e71d6049e988eee6f4078729647ebbd4a38e61932a5e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 33969, "end": 35773, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "92a9fcd9-5f9d-4b88-abbd-620c5f6d772a", "3": "6999f292-4e22-4a84-b7d9-16c1671367b8"}}, "__type__": "1"}, "6999f292-4e22-4a84-b7d9-16c1671367b8": {"__data__": {"text": "                                     |\n| Function   | The input is made positive. |\n\n#### NEGATE\n\n| Instruction   | NEGATE                         |\n|----------|--------------------------------|\n| Bytecode | 0x9B                           |\n| Fee | 0.00000004 GAS                                          |\n| Function   | The sign of the input is flipped. |\n\n#### INC\n\n| Instruction   | INC                                |\n|----------|------------------------------------|\n| Bytecode | 0x9C                               |\n| Fee | 0.00000004 GAS                                          |\n| Function   | 1 is added to the input. |\n\n#### DEC\n\n| Instruction   | DEC                                |\n|----------|------------------------------------|\n| Bytecode | 0x9D                               |\n| Fee | 0.00000004 GAS                                          |\n| Function   | 1 is subtracted from the input. |\n\n#### ADD\n\n| Instruction   | ADD                                    |\n|----------|----------------------------------------|\n| Bytecode | 0x9E                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | a is added to b. |\n\n#### SUB\n\n| Instruction   | SUB                                    |\n|----------|----------------------------------------|\n| Bytecode | 0x9F                                  |\n| Fee | 0.00000008 GAS                                          |\n| Function   | b is subtracted from a. |\n\n#### MUL\n\n| Instruction   | MUL                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xA0                                   |\n| Fee | 0.00000008 GAS                        ", "doc_id": "6999f292-4e22-4a84-b7d9-16c1671367b8", "embedding": null, "doc_hash": "b58060b6ad4519cbf540d2ba44d13fed313212042c1e2eaef0838d810842f74e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 35779, "end": 37478, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "9a00af15-9e6e-4b10-b3d3-3971d1ddd0ff", "3": "99fa25e8-77d3-4365-955a-434459d2df5d"}}, "__type__": "1"}, "99fa25e8-77d3-4365-955a-434459d2df5d": {"__data__": {"text": "                                     |\n| Function   | a is multiplied by b. |\n\n#### DIV\n\n| Instruction   | DIV                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xA1                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | a is divided by b. |\n\n#### MOD\n\n| Instruction   | MOD                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xA2                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns the remainder after dividing a by b. |\n\n#### POW\n\n| Instruction | POW                                                |\n| ----------- | -------------------------------------------------- |\n| Bytecode    | 0xA3                                               |\n| Fee         | 0.00000064 GAS                                     |\n| Function    | The result of raising value to the exponent power. |\n\n#### SQRT\n\n| Instruction | SQRT                                           |\n| ----------- | ---------------------------------------------- |\n| Bytecode    | 0xA4                                           |\n| Fee         | 0.00000064 GAS                                 |\n| Function    | Returns the square root of a specified number. |\n\n#### SHL\n\n| Instruction   | SHL                              |\n|----------|----------------------------------|\n| Bytecode | 0xA8                             |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Gets the integer n from the top stack and performs a n-bit left shift operation on the remaining BigInteger on the stack. |\n\n#### SHR\n\n| Instruction   | SHR                   ", "doc_id": "99fa25e8-77d3-4365-955a-434459d2df5d", "embedding": null, "doc_hash": "c488e0ffe07fd3079433f65064f4a76efc7f8862445c7e1c670694760f7377b2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 37479, "end": 39252, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "6999f292-4e22-4a84-b7d9-16c1671367b8", "3": "62904ba0-84d9-4e4f-9f6d-bf5f83e75944"}}, "__type__": "1"}, "62904ba0-84d9-4e4f-9f6d-bf5f83e75944": {"__data__": {"text": "                             |\n|----------|----------------------------------|\n| Bytecode | 0xA9                             |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Gets the integer n from the top stack and performs a n-bit right shift operation on the remaining BigInteger on the stack. |\n\n#### NOT\n\n| Instruction   | NOT                                |\n|----------|------------------------------------|\n| Bytecode | 0xAA                               |\n| Fee | 0.00000004 GAS                                          |\n| Function   | If the input is 0 or 1, it is flipped. Otherwise the output will be 0. |\n\n#### BOOLAND\n\n| Instruction   | BOOLAND                                |\n|----------|----------------------------------------|\n| Bytecode | 0xAB                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | If both a and b are not 0, the output is 1. Otherwise 0. |\n\n#### BOOLOR\n\n| Instruction   | BOOLOR                                 |\n|----------|----------------------------------------|\n| Bytecode | 0xAC                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | If a or b is not 0, the output is 1. Otherwise 0. |\n\n#### NZ\n\n| Instruction   | NZ                                  |\n|----------|-------------------------------------|\n| Bytecode | 0xB1                                |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Returns 0 if the input is 0. 1 otherwise. |\n\n\n#### NUMEQUAL\n\n| Instruction   | NUMEQUAL                               |\n|----------|----------------------------------------|\n| Bytecode | 0xB3                                   |\n| Fee | 0.00000008 GAS                              ", "doc_id": "62904ba0-84d9-4e4f-9f6d-bf5f83e75944", "embedding": null, "doc_hash": "6f7f26ce76347f46662b31ea510ef3d18e0105bcfe16292c46b24bd2562cb3ba", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 39253, "end": 41071, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "99fa25e8-77d3-4365-955a-434459d2df5d", "3": "be728d38-4b42-4bbc-b801-1a3bf59dfdb6"}}, "__type__": "1"}, "be728d38-4b42-4bbc-b801-1a3bf59dfdb6": {"__data__": {"text": "                               |\n| Function   | Returns 1 if the numbers are equal, 0 otherwise. |\n\n#### NUMNOTEQUAL\n\n| Instruction   | NUMNOTEQUAL                              |\n|----------|------------------------------------------|\n| Bytecode | 0xB4                                     |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if the numbers are not equal, 0 otherwise.|\n\n#### LT \n\n| Instruction   | LT                                     |\n|----------|----------------------------------------|\n| Bytecode | 0xB5                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is less than b, 0 otherwise. |\n\n#### LE\n\n| Instruction   | LE                                        |\n|----------|--------------------------------------------|\n| Bytecode | 0xB6                                       |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is less than or equal to b, 0 otherwise. |\n\n#### GT\n\n| Instruction   | GT                                     |\n|----------|----------------------------------------|\n| Bytecode | 0xB7                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is greater than b, 0 otherwise. |\n\n#### GE\n\n| Instruction   | GE                                        |\n|----------|--------------------------------------------|\n| Bytecode | 0xB8                                       |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if a is greater than or equal to b, 0 otherwise. |\n\n#### MIN\n\n| Instruction   | MIN                                   ", "doc_id": "be728d38-4b42-4bbc-b801-1a3bf59dfdb6", "embedding": null, "doc_hash": "05c8709c15cee6a99e90ef44594ff1356c4e6d6faa7eaa734283f62adc250dcf", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 41072, "end": 42834, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "62904ba0-84d9-4e4f-9f6d-bf5f83e75944", "3": "3aab6b2e-e3b3-43c6-8cb4-fef5689837f3"}}, "__type__": "1"}, "3aab6b2e-e3b3-43c6-8cb4-fef5689837f3": {"__data__": {"text": "                    |\n|----------|----------------------------------------|\n| Bytecode | 0xB9                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns the smaller of a and b. |\n\n\n#### MAX\n\n| Instruction   | MAX                                    |\n|----------|----------------------------------------|\n| Bytecode | 0xBA                                   |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns the larger of a and b. |\n\n#### WITHIN\n\n| Instruction   | WITHIN                                       |\n|----------|----------------------------------------------|\n| Bytecode | 0xBB                                         |\n| Fee | 0.00000008 GAS                                          |\n| Function   | Returns 1 if x is within the specified range (left-inclusive), 0 otherwise. |\n\n### Advanced Data Structure\n\nIt has implemented common operations for array, map, struct, etc.\n\n#### PACKMAP\n\n| Instruction | PACKMAP                                                      |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0xBE                                                         |\n| Fee         | 0.00002048 GAS                                               |\n| Function    | A value n is taken from top of main stack. The next n*2 items on main stack are removed, put inside n-sized map and this map is put on top of the main stack. |\n\n#### PACKSTRUCT\n\n| Instruction | PACKSTRUCT                                                   |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0xBF                                                         |\n| Fee         | 0.00002048 GAS                                              ", "doc_id": "3aab6b2e-e3b3-43c6-8cb4-fef5689837f3", "embedding": null, "doc_hash": "b13aa8fe1710fd2bb7c691b5bf913b4a558062d4df409ff664627b01835f9872", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 42835, "end": 44665, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "be728d38-4b42-4bbc-b801-1a3bf59dfdb6", "3": "bbad9be1-79ac-427c-81a1-fda9624cc03c"}}, "__type__": "1"}, "bbad9be1-79ac-427c-81a1-fda9624cc03c": {"__data__": {"text": "                    |\n| Function    | A value n is taken from top of main stack. The next n items on main stack are removed, put inside n-sized struct and this struct is put on top of the main stack. |\n\n#### PACK\n\n| Instruction   | PACK                              |\n|----------|-----------------------------------|\n| Bytecode | 0xC0                              |\n| Fee | 0.00002048 GAS                                |\n| Function   | A value n is taken from top of main stack. The next n items on main stack are removed, put inside n-sized array and this array is put on top of the main stack. |\n\n#### UNPACK\n\n| Instruction   | UNPACK                             |\n|----------|------------------------------------|\n| Bytecode | 0xC1                               |\n| Fee | 0.00002048 GAS                                |\n| Function   | An array is removed from top of the main stack. Its elements are put on top of the main stack (in reverse order) and the array size is also put on main stack. |\n\n#### NEWARRAY0\n\n| Instruction   | NEWARRAY0                             |\n|----------|------------------------------------|\n| Bytecode | 0xC2                               |\n| Fee | 0.00000016 GAS                                          |\n| Function   | An array with size n is put on top of the main stack. |\n\n#### NEWARRAY\n\n| Instruction   | NEWARRAY                             |\n|----------|------------------------------------|\n| Bytecode | 0xC3                               |\n| Fee | 0.00000512 GAS                                          |\n| Function   | A value n is taken from top of main stack. A null-filled array with size n is put on top of the main stack. |\n\n#### NEWARRAY_T\n\n| Instruction   | NEWARRAY_T                           |\n|----------|------------------------------------|\n| Bytecode | 0xC4                               |\n| Fee | 0.00000512 GAS                                          |\n| Function   | An array of type T with size n is put on top of the main stack. |\n\n#### NEWSTRUCT0\n\n| Instruction   | NEWSTRUCT0                    ", "doc_id": "bbad9be1-79ac-427c-81a1-fda9624cc03c", "embedding": null, "doc_hash": "f85ea3eeaf98b420f7aafb4bcb508db3ac52f66f55af194677ea79d3c2489129", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 44666, "end": 46730, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "3aab6b2e-e3b3-43c6-8cb4-fef5689837f3", "3": "687ec66a-d036-459c-897c-97643680782b"}}, "__type__": "1"}, "687ec66a-d036-459c-897c-97643680782b": {"__data__": {"text": "                          |\n|----------|------------------------------------|\n| Bytecode | 0xC5                               |\n| Fee | 0.00000016 GAS                                          |\n| Function   | A structure with size n and all 0 elements is put on top of the main stack. |\n\n#### NEWSTRUCT\n\n| Instruction   | NEWSTRUCT                           |\n|----------|------------------------------------|\n| Bytecode | 0xC6                               |\n| Fee | 0.00000512 GAS                                          |\n| Function   | A value n is taken from top of main stack. A zero-filled struct with size n is put on top of the main stack. |\n\n#### NEWMAP\n\n| Instruction   | NEWMAP                  |\n|----------|-------------------------|\n| Bytecode | 0xC8                    |\n| Fee | 0.00000008 GAS                                          |\n| Function   | An empty Map is put on top of the main stack. |\n\n#### SIZE\n\n| Instruction   | SIZE                  |\n|----------|-------------------------|\n| Bytecode | 0xCA                    |\n| Fee | 0.00000004 GAS                                          |\n| Function   | Gets the size of elements on the top stack. |\n\n#### HASKEY\n\n| Instruction   | HASKEY                  |\n|----------|-------------------------|\n| Bytecode | 0xCB                    |\n| Fee | 0.00000064 GAS                                          |\n| Function   | An input index n (or key) and an array (Map\uff0cBuffer, ByteString) are returned from the top of the main stack. Puts True on top of main stack if n is in the length range of the array (Map\uff0cBuffer, ByteString), and False otherwise. |\n\n#### KEYS\n\n| Instruction   | KEYS                                |\n|----------|-------------------------------------|\n| Bytecode | 0xCC                                |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Gets all Keys of the map from top of the main stack and constructs a new array with all Key and puts it on top of the main stack. |\n\n####", "doc_id": "687ec66a-d036-459c-897c-97643680782b", "embedding": null, "doc_hash": "42924b1fc57afe292e4f2a1fb458d09e3ac67e71311174b4e5413c4a1c74f600", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 46731, "end": 48742, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "bbad9be1-79ac-427c-81a1-fda9624cc03c", "3": "fbcf3797-816d-481f-b169-50940707d572"}}, "__type__": "1"}, "fbcf3797-816d-481f-b169-50940707d572": {"__data__": {"text": "new array with all Key and puts it on top of the main stack. |\n\n#### VALUES\n\n| Instruction   | VALUES                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xCD                                    |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Gets all Values of the elements (Array or Map) from top of the main stack and constructs a new array with all Value and puts it on top of the main stack.|\n\n#### PICKITEM\n\n| Instruction   | PICKITEM                           |\n|----------|------------------------------------|\n| Bytecode | 0xCE                               |\n| Fee | 0.00000064 GAS                                          |\n| Function   | Gets the Nth element in the array of the top stack|\n\n#### APPEND\n\n| Instruction   | APPEND                |\n|----------|-----------------------|\n| Bytecode | 0xCF                  |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Adds a new item to the arry of the top stack |\n\n#### SETITEM\n\n| Instruction   | SETITEM                                  |\n|----------|------------------------------------------|\n| Bytecode | 0xD0                                     |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Assigns a value to the specified index of element \uff08Array\uff0cMap or Buffer\uff09in the top stack |\n\n#### REVERSEITEMS\n\n| Instruction   | REVERSEITEMS                                  |\n|----------|------------------------------------------|\n| Bytecode | 0xD1                                     |\n| Fee | 0.00008192 GAS                                          |\n| Function   | Reverses the elements in Array or Buffer from the top stack.|\n\n#### REMOVE\n\n| Instruction   | REMOVE                            |\n|----------|-----------------------------------|\n| Bytecode | 0xD2                              |\n| Fee | 0.00000016", "doc_id": "fbcf3797-816d-481f-b169-50940707d572", "embedding": null, "doc_hash": "32a7f639b94a411b7e0f6d227e8050b94c27a90d30045613aef8f53ed5a52c36", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 48689, "end": 50618, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "687ec66a-d036-459c-897c-97643680782b", "3": "9f50e0d4-a5df-4f78-b4d3-12687ca20236"}}, "__type__": "1"}, "9f50e0d4-a5df-4f78-b4d3-12687ca20236": {"__data__": {"text": "          |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Removes the specified index or Key elements from Array or Map        |\n\n#### CLEARITEMS\n\n| Instruction   | CLEARITEMS                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xD3                                    |\n| Fee | 0.00000016 GAS                                          |\n| Function   | Remove all the items from the compound-type. |\n\n#### POPITEM\n\n| Instruction | POPITEM                                                      |\n| ----------- | ------------------------------------------------------------ |\n| Bytecode    | 0xD4                                                         |\n| Fee         | 0.00000016 GAS                                               |\n| Function    | Pops the last element in Array from the stack top and push into the stack. |\n\n### Type \n\n#### ISNULL\n\n| Instruction   | ISNULL                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xD8                                    |\n| Fee | 0.00000002 GAS                            |\n| Function   | Returns true if the input is null. Returns false otherwise. |\n\n#### ISTYPE\n\n| Instruction   | ISTYPE                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xD9                                    |\n| Fee | 0.00000002 GAS                                          |\n| Function   | Returns true if the top item is of the specified type.|\n\n#### CONVERT\n\n| Instruction   | CONVERT                                  |\n|----------|-----------------------------------------|\n| Bytecode | 0xDB                                    |\n| Fee | 0.00002048 GAS                            |\n| Function   | Converts the top item to", "doc_id": "9f50e0d4-a5df-4f78-b4d3-12687ca20236", "embedding": null, "doc_hash": "a90e62065276fe1c6860ff29c15ba00c2819c28c313b37238361693ffbeebeba", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 50656, "end": 52486, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "fbcf3797-816d-481f-b169-50940707d572", "3": "475440e3-3664-48a5-b0c1-61989c3b00ec"}}, "__type__": "1"}, "475440e3-3664-48a5-b0c1-61989c3b00ec": {"__data__": {"text": "       |\n| Function   | Converts the top item to the specified type. |\n\n:::note\n\nThe operation code with \\* indicates that the result of the operation is not pushed back to the `EvaluationStack` using `PUSH()`.\n:::\n", "doc_id": "475440e3-3664-48a5-b0c1-61989c3b00ec", "embedding": null, "doc_hash": "70661a9ced5ab7c03ef6e3c5cfcf1410e4494d9f4db23a8f14e780cd6cf48760", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}, "node_info": {"start": 52455, "end": 52670, "_node_type": "1"}, "relationships": {"1": "61651c2945f267f8a94cb03344c6573bc0602691", "2": "9f50e0d4-a5df-4f78-b4d3-12687ca20236"}}, "__type__": "1"}, "88cf9b0e-d221-4f4c-9111-0fd69ece23a1": {"__data__": {"text": "# Neo Oracle Service\n\nOracle solves the problem that blockchain cannot obtain information from the external network. As a gateway for smart contracts to communicate with the outside world, Oracle opens a window to the outside world for blockchain. Oracle nodes jointly verify the data fetched from the network, then smart contracts query the result in the response transactions on the chain.\n\nNeo Oracle Service is an out-of-chain data access service built into Neo N3. It allows users to request the external data sources in smart contracts, and Oracle nodes designated by the committee will access the specified data source then pass the result in the callback function to continue executing the smart contract logic.\n\n![img](assets/oracle.png)\n\n## Key mechanisms\n\n### Commit-Reveal mechanism\n\nThe commit-reveal mechanism is a sequential protocol that prevents data plagiarism for multiple Oracle nodes.\n\n**Process**\n\n1. Oracle node submits ciphertext information (hash, signature, etc.) about data to other Oracle nodes and collects ciphertext information submitted by other Oracle nodes.\n\n   Neo Oracle Service adopts the multiple signatures on the Response transaction as the ciphertext information.\n\n2. After collecting enough ciphertext information, Oracle nodes reveal the data to other Oracle nodes to verify the data.\n\n   Accordingly, the revealed data in Neo Oracle Service is the Response transaction.\n\nIn this way, we can avoid data plagiarism since oracle nodes cannot predict the data to submit ciphertext information.\n\n![](assets/oracle_commit.png)\n\n### Request-Response pattern\n\nNeo Oracle Service adopts the request-response processing mechanism, which is an asynchronous pattern.\n\n![](assets/oralce_response.png)\n\n**Process**\n\n1. The user writes the smart contract to call the `Request` method of the Oracle contract.\n\n   Each successfully created Request is put in the Request cache list with an unique RequestId.\n\n2. Oracle node listens for the requests in the Request cache list in real time, and accesses data sources specified in the Request to obtain data.\n\n3. Oracle node processes the obtained data with the specified filter, and encapsulates the result into a `Response` transaction (including RequestId, data, fixedScript, multisig address, etc.).\n\n   The result data is stored in the `TransactionAttribute` field of the Response transaction. The `fixedScript` in the transaction is used to call the `finish` method of the Oracle contract, which will execute the callback function `CallbackMethod`.\n\n4. Oracle nodes independently sign the Response transaction through the commit-reveal mechanism.\n\n5. The Response transaction with enough signatures will be stored on the chain, and the callback function will be executed.\n\n## Protocol supports\n\nOracle service currently supports two URL schemes, `https` and `neofs`. `https` scheme follows [RFC 2818](https://tools.ietf.org/html/rfc2818) and [RFC 2616](https://tools.ietf.org/html/rfc2616) standards and allows to specify resource to request via HTTP GET method. `neofs` scheme is Neo-specific. Both types of requests are treated equal otherwise.\n\n## Fees and rewards\n\n- **Fees**\n\n  Neo Oracle Service charges the user by the number of requests, 0.5 GAS by default for each. Besides, the user has to pay additional fees for the callback function. All the fees will be paid when the Request is created.\n\n- **Rewards**\n\n  The fee paid by the user for the Request is distributed to the Oracle node in turn when executing the `PostPersist` logic.\n\n  Distribution order = RequestId % count of Oracle nodes\n\n## Example\n\nHere is a demo about using the Oracle service\uff1a\n\n```cs\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System.ComponentModel;\n\nnamespace", "doc_id": "88cf9b0e-d221-4f4c-9111-0fd69ece23a1", "embedding": null, "doc_hash": "2d6b39613e2acf879a8be19fadba2de34178d74963236486bcf67b1bd6e67fb2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}, "node_info": {"start": 0, "end": 3832, "_node_type": "1"}, "relationships": {"1": "348729896fd647c82169075ff223a72998d0d4b1", "3": "f0fb7c3f-26bc-4813-bd5f-b69ed119e464"}}, "__type__": "1"}, "f0fb7c3f-26bc-4813-bd5f-b69ed119e464": {"__data__": {"text": "System.ComponentModel;\n\nnamespace demo\n{\n    [DisplayName(\"Oracle Demo\")]\n    [ManifestExtra(\"Author\", \"Neo\")]\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a Oracle using template\")]\n    public class OracleDemo : SmartContract\n    {\n        static readonly string PreData = \"RequstData\";\n\n        public static string GetRequstData()\n        {\n            return Storage.Get(Storage.CurrentContext, PreData);\n        }\n\n        public static void CreateRequest(string url, string filter, string callback, byte[] userData, long gasForResponse)\n        {\n            Oracle.Request(url, filter, callback, userData, gasForResponse);\n        }\n\n        public static void Callback(string url, byte[] userData, int code, byte[] result)\n        {\n            if (Runtime.CallingScriptHash != Oracle.Hash) throw new Exception(\"Unauthorized!\");\n            Storage.Put(Storage.CurrentContext, PreData, result.ToByteString());\n        }\n    }\n}\n```\n\nAs shown above, there are two key functions in the contract:\n\n- `CreateRequest` function can create Oracle Request to request data\n\n- `Callback` function is used to execute contract logic after the Oracle node fetches data\n\n### Oracle request\n\nThe following fields are required for Oracle Request\uff1a\n\n| Fields           | Type    | Description                                                  |\n| -------------- | --------- | ------------------------------------------------------------ |\n| Url            | string    | The resource path, with a maximum length of 256 bytes                             |\n| Filter         | string    | Used to filter out useful information from the result returned from the data source. It is a JSONPath expression with a maximum length of 128 bytes. For the filters supported by Oracle, see the explanation below. |\n| CallbackMethod | string    | method name of the callback function (cannot begin with \"_\"), with a maximum length of 32 bytes|\n| UserData       | var bytes | The custom data                                              |\n| GasForResponse | long      | The fee paid in advance for the callback function to pay for executing the script in the Response transaction. The fee should not be less than 0.1 GAS and will be charged when creating the Oracle request transaction |\n\n#### Url\n\nIt is expected that URL requested will provide data in JSON format, for HTTP requests it means that server must answer with `Content-Type: application/json` header for request to be successful.\n\n##### NeoFS URLs\n\nNeoFS URLs use the following scheme:\n\n```\nneofs://<Container-ID>/<Object-ID/<Command>/<Params>\n```\n\nWhere `Container-ID` and `Object-ID` are mandatory components, `Command` and `Params` are optional.\n\nAbsent any command oracle subsystem will get an object and return its payload, example:", "doc_id": "f0fb7c3f-26bc-4813-bd5f-b69ed119e464", "embedding": null, "doc_hash": "4d813e76c3b3c6ada896cf7dd1f4d66df6a58eead29bee18ef44f6f9bd4cd9d9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}, "node_info": {"start": 3800, "end": 6614, "_node_type": "1"}, "relationships": {"1": "348729896fd647c82169075ff223a72998d0d4b1", "2": "88cf9b0e-d221-4f4c-9111-0fd69ece23a1", "3": "d7115d3b-28bc-4d94-befd-2baae615745a"}}, "__type__": "1"}, "d7115d3b-28bc-4d94-befd-2baae615745a": {"__data__": {"text": "any command oracle subsystem will get an object and return its payload, example: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk.\n\nCommand `range` can be used to get a part of object's payload, it has a mandatory range parameter specified as `offset|length`, where `offset` is a number of bytes to skip from the beginning on payload and `length` is a number of bytes to return to the caller, they're separated by vertical bar. Example request: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk/range/42|128.\n\nCommand `header` can be used to get header of an object, it doesn't have any parameters. Example: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk/header.\n\nCommand `hash` can be used to get SHA256 hash of an object or part of it, it has an optional range parameter with the same syntax as for `range` command. Example: Example: neofs://C3swfg8MiMJ9bXbeFG6dWJTCoHp9hAEZkHezvbSwK1Cc/3nQH1L8u3eM9jt2mZCs6MyjzdjerdSzBkXCYYj4M4Znk/hash.\n\n#### Filter\n\nGiven the following Json example, the Oracle supported filters are illustrated in the table below.\n\n```json\n{\n    \"store\": {\n        \"book\": [\n            {\n                \"category\": \"reference\",\n                \"author\": \"Nigel Rees\",\n                \"title\": \"Sayings of the Century\",\n                \"price\": 8.95\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Evelyn Waugh\",\n                \"title\": \"Sword of Honour\",\n                \"price\": 12.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Herman Melville\",\n                \"title\": \"Moby Dick\",\n                \"isbn\": \"0-553-21311-3\",\n                \"price\": 8.99\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"J. R.", "doc_id": "d7115d3b-28bc-4d94-befd-2baae615745a", "embedding": null, "doc_hash": "780d280b5f0bd81a31121d4b9862cabc7a1b80b8ada6ed5d1eb945f6899f56db", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}, "node_info": {"start": 6580, "end": 8508, "_node_type": "1"}, "relationships": {"1": "348729896fd647c82169075ff223a72998d0d4b1", "2": "f0fb7c3f-26bc-4813-bd5f-b69ed119e464", "3": "27de7f94-5541-4183-ab74-c6922f36b707"}}, "__type__": "1"}, "27de7f94-5541-4183-ab74-c6922f36b707": {"__data__": {"text": "            \"author\": \"J. R. R. Tolkien\",\n                \"title\": \"The Lord of the Rings\",\n                \"isbn\": \"0-395-19395-8\",\n                \"price\": 22.99\n            }\n        ],\n        \"bicycle\": {\n            \"color\": \"red\",\n            \"price\": 19.95\n        }\n    },\n    \"expensive\": 10,\n    \"data\": null\n}\n```\n\n| Filter                                | Result                                                       |\n| ------------------------------------- | ------------------------------------------------------------ |\n| $.store.book[*].author                | The authors of all books                                     |\n| $..author                             | All authors                                                  |\n| $.store.*                             | All things, both books and bicycles                          |\n| $.store..price                        | The price of everything                                      |\n| $..book[2]                            | The third book                                               |\n| $..book[-2]                           | The second to last book                                      |\n| $..book[0,1]                          | The first two books                                          |\n| $..book[:2]                           | All books from index 0 (inclusive) until index 2 (exclusive) |\n| $..book[1:2]                          | All books from index 1 (inclusive) until index 2 (exclusive) |\n| $..book[-2:]                          | Last two books   ", "doc_id": "27de7f94-5541-4183-ab74-c6922f36b707", "embedding": null, "doc_hash": "ad195488f2cc48f97e8f3d8be78a2d77f1c75f4c9cf7142534503e17dcda8829", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}, "node_info": {"start": 8563, "end": 10104, "_node_type": "1"}, "relationships": {"1": "348729896fd647c82169075ff223a72998d0d4b1", "2": "d7115d3b-28bc-4d94-befd-2baae615745a", "3": "98730fca-cf4a-4c32-8706-5a191fcb3b51"}}, "__type__": "1"}, "98730fca-cf4a-4c32-8706-5a191fcb3b51": {"__data__": {"text": "             | Last two books                                               |\n| $..book[2:]                           | Book number two from tail                                    |\n| $..book[?(@.isbn)]                    | Invalid Filter                                               |\n| $.store.book[?(@.price < 10)]         | Invalid Filter                                               |\n| $..book[?(@.price <= $['expensive'])] | Invalid Filter                                               |\n| $..book[?(@.author =~ /.*REES/i)]     | Invalid Filter                                               |\n| $..book[(@.length-1)]                 | Invalid Filter                                               |\n| $..*                                  | Invalid Filter                                               |\n| $..                                   | Invalid Filter                                               |\n| $.*                                   | All store value and expensive,data value                     |\n| empty string                          | Give me the original result                                  |\n\nThe returned result can be found at https://github.com/json-path/JsonPath.\n\n### Callback function\n\nThe type and order of the parameters of the callback function should exactly be the same as below:\n\n| Field     | Type    | Desc                                      |\n| -------- | --------- | ----------------------------------------- |\n| Url      | string    | the resource path                                |\n| UserData | var", "doc_id": "98730fca-cf4a-4c32-8706-5a191fcb3b51", "embedding": null, "doc_hash": "108e51398615e6db67f89be480cce151c26cb20c26279ec8d34c59704531dcb7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}, "node_info": {"start": 10106, "end": 11663, "_node_type": "1"}, "relationships": {"1": "348729896fd647c82169075ff223a72998d0d4b1", "2": "27de7f94-5541-4183-ab74-c6922f36b707", "3": "009ff9ae-4781-4bbe-a5d6-483baa59df06"}}, "__type__": "1"}, "009ff9ae-4781-4bbe-a5d6-483baa59df06": {"__data__": {"text": "             |\n| UserData | var bytes | the custom data                            |\n| Code     | byte      | status Code of the Oracle response, see the Code table for details. |\n| Result   | var bytes | the result                                  |\n\n### Code\n\nThe Code field defines the status Code for Oracle responses, including the following types:\n\n| Value     | Status                   | Desc             | Type   |\n| ------ | ---------------------- | ---------------- | ------ |\n| `0x00` | `Success`              | execute successfully         | `byte` |\n| `0x10` | `ProtocolNotSupported` | Unsupported protocol     | `byte` |\n| `0x12` | `ConsensusUnreachable` | Oracle nodes did not reach a consensus | `byte` |\n| `0x14` | `NotFound`             | requested information does not exist | `byte` |\n| `0x16` | `Timeout`              | timeout         | `byte` |\n| `0x18` | `Forbidden`            | no permission to query the data source       | `byte` |\n| `0x1a` | `ResponseTooLarge`     | result size is out of limit | `byte` |\n| `0x1c` | `InsufficientFunds`    | the fee is insufficient   | `byte` |\n| `0xff` | `Error`                | error occurs in the execution         | `byte` |\n", "doc_id": "009ff9ae-4781-4bbe-a5d6-483baa59df06", "embedding": null, "doc_hash": "1951fd7b361db4df66384b833986d0cdd366b086f83a919e32921c4fb9c3773c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}, "node_info": {"start": 11645, "end": 12839, "_node_type": "1"}, "relationships": {"1": "348729896fd647c82169075ff223a72998d0d4b1", "2": "98730fca-cf4a-4c32-8706-5a191fcb3b51"}}, "__type__": "1"}, "42d710aa-c391-488b-86dc-b2c509eef237": {"__data__": {"text": "---\ntitle: 'Neo FS Go SDK Documentation'\ndescription: \"This section covers the elements of NeoFS and the NeoFS SDK written in Go\"\nauthor: ngdenterprise\ntags: [ \"NEOFS\"]\nskill: intermediate\nsidebar: true\n---\n## Neo Community Documentation\n\nPlease join us on the Neo discord server if you would like any support and please contribute back if you have something to add!\n\nWith time there will be an easy to use 'get things done' API for Go, and a starter app for Javascript developers to build on top of.\n\n:::note\nBest place to get started is probably in the [overview](/neo-docs/introduction/overview) area, or if you want to get cracking, head over the [creating a wallet!](/neo-docs/tutorials/wallets)\n:::\n", "doc_id": "42d710aa-c391-488b-86dc-b2c509eef237", "embedding": null, "doc_hash": "a63c8087fbe3c81e7fe313798634e144fbf0b46b1ff374094e931be5b99f66ef", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neofs/_index"}, "node_info": {"start": 0, "end": 705, "_node_type": "1"}, "relationships": {"1": "19d8e51d8db8df35a2560ef8775b8f6537ced626"}}, "__type__": "1"}, "6a11d844-7a15-4a4e-8feb-17c5c29ee84e": {"__data__": {"text": "# addRoot\n\nRegisters the top-level domain, which can be added by the Neo Committee only. You need to input the committee multi-signature address signature to generate a new transaction.\n\n:::note\nCurrently only \".neo\" is supported. \n:::\n\n\n### Parameters\n\n| Name | Type   | Description                | Required |\n| :--- | ------ | -------------------------- | -------- |\n| root | String | The top-level domain name. | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"addRoot\",\n                         [{\"type\":\"String\",\"value\":\"test\"}],\n    [\n      {\n        \"account\": \"Nfm8y1ZQMmiMwBQhzYqS9cfu3sX4ESAT5g\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAR0ZXN0EcAfDAdhZGRSb290DBQaidSNifjBpm09PQ70gyzrzqkvFUFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"524180\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n", "doc_id": "6a11d844-7a15-4a4e-8feb-17c5c29ee84e", "embedding": null, "doc_hash": "552f085b251b48388528b2e5a349fd8fbe4e421c9317495a28cb2391785c41eb", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/addRoot"}, "node_info": {"start": 0, "end": 1251, "_node_type": "1"}, "relationships": {"1": "44ae1f8f53881ebb20d6240a9eeb8d7f3e5c143e"}}, "__type__": "1"}, "d34fdcb2-ff7e-4917-9de4-f68360c04dbd": {"__data__": {"text": "# balanceOf\n\nGets the number of second-level domain names of the given address. \n\nIf the domain has expired, it counts still.\n\n\n\n### Parameters\n\n| Name  | Type    | Description                      | Required |\n| ----- | ------- | -------------------------------- | -------- |\n| owner | Address | The address of the domain owner. | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"balanceOf\",\n                         [\n                             {\n                                 \"type\":\"Hash160\",\"value\":\"0x713c5666c9710bf6933572cf134a2a8f518f1a30\"\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NMzaUBM56iumJ8pHfjjCuKsAepKxENkUqN\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBQwGo9RjypKE89yNZP2C3HJZlY8cRHAHwwJYmFsYW5jZU9mDBQaidSNifjBpm09PQ70gyzrzqkvFUFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"265986\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"4\"\n            }\n        ]\n    }\n}\n```\n", "doc_id": "d34fdcb2-ff7e-4917-9de4-f68360c04dbd", "embedding": null, "doc_hash": "e847f382129c288ec7f0ed2fce7864f24671da5f1539094af8c18c71799916c9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/balanceOf"}, "node_info": {"start": 0, "end": 1385, "_node_type": "1"}, "relationships": {"1": "4ba10927bf21ca28895376082c87fdda82c8876a"}}, "__type__": "1"}, "feb7dfb9-5e39-4ea5-b2c3-fff756907661": {"__data__": {"text": "# deleteRecord\n\nDeletes the record of a second-level domain or its subdomains with specific type. \n\n\n\n### Parameters\n\n| Name | Type    | Description                                                  | Required |\n| :--- | ------- | ------------------------------------------------------------ | -------- |\n| name | String  | The second-level domain name,  \"test.neo\"                    | Required |\n| type | Integer | Available types are:<br/>1 - IPV4 address record<br/>5 - Canonical name record<br/>16 - Text record<br/>28 - IPV6 address record |          |\n\n### Example\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"deleteRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"sub1.flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"1\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"EQwTc3ViMS5mbGFtaW5jb21lLm5lbxLAHwwMZGVsZXRlUmVjb3JkDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1611960\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\nRequest body #2\n\nDeletes all records of the expired domain:\n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"deleteRecord\",\n                         [\n  ", "doc_id": "feb7dfb9-5e39-4ea5-b2c3-fff756907661", "embedding": null, "doc_hash": "8f87a00e24f610ef5921414dad8104307a2785fb7207bbe3de67a3bb21079250", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/deleteRecord"}, "node_info": {"start": 0, "end": 1921, "_node_type": "1"}, "relationships": {"1": "42bf07445998152f727da4fc3912ad3271fdc01c", "3": "65513ec7-f49b-4c7b-b472-8ca17e08427b"}}, "__type__": "1"}, "65513ec7-f49b-4c7b-b472-8ca17e08427b": {"__data__": {"text": "                [\n                             {\n                                 \"type\":\"String\",\"value\":\"expired.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"1\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAtleHBpcmVkLm5lbxHAHwwNZ2V0QWxsUmVjb3JkcwwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"622077\",\n        \"exception\": \"An unhandled exception was thrown. The name has expired.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "65513ec7-f49b-4c7b-b472-8ca17e08427b", "embedding": null, "doc_hash": "c9f550ca3b41cca242674b396a587c0cf95ae980611b4029514d3ac90a56aa67", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/deleteRecord"}, "node_info": {"start": 1901, "end": 2606, "_node_type": "1"}, "relationships": {"1": "42bf07445998152f727da4fc3912ad3271fdc01c", "2": "feb7dfb9-5e39-4ea5-b2c3-fff756907661"}}, "__type__": "1"}, "a491d3fb-19a4-4424-ad40-2cb842bbde72": {"__data__": {"text": "# getAllRecords\n\nGets all records of the second-level domain and its subdomains. \n\n\n\n### Parameters\n\n| Name | Type   | Description                                   | Required |\n| :--- | ------ | --------------------------------------------- | -------- |\n| name | String | The second-level domain name, e.g. \"test.neo\" | Required |\n\n### Example\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getAllRecords\",\n\t\t\t\t\t\t [\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t \"type\":\"String\",\"value\":\"flamincome.neo\"\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t ],\n\t[]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n\t\"jsonrpc\": \"2.0\",\n\t\"id\": 1,\n\t\"result\": {\n\t\t\"script\": \"DA5mbGFtaW5jb21lLm5lbxHAHwwNZ2V0QWxsUmVjb3JkcwwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n\t\t\"state\": \"HALT\",\n\t\t\"gasconsumed\": \"725394\",\n\t\t\"exception\": null,\n\t\t\"stack\": [\n\t\t\t{\n\t\t\t\t\"type\": \"InteropInterface\",\n\t\t\t\t\"iterator\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"Array\",\n\t\t\t\t\t\t\"value\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"c3ViMS5mbGFtaW5jb21lLm5lbw==\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Integer\",\n\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"MTY1LjIzLjM0LjU0\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"Array\",\n\t\t\t\t\t\t\"value\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"ZmxhbWluY29tZS5uZW8=\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Integer\",\n\t\t\t\t\t\t\t\t\"value\": \"5\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"YWxpYXMubmVv\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"Array\",\n\t\t\t\t\t\t\"value\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\":", "doc_id": "a491d3fb-19a4-4424-ad40-2cb842bbde72", "embedding": null, "doc_hash": "0c86be18251aa39c5cc88dabc9675472201089963cc6090a1e60fe728f1221e2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getAllRecords"}, "node_info": {"start": 0, "end": 1721, "_node_type": "1"}, "relationships": {"1": "7a6029eb6686d6201bf42d46dbbfb0924db2a6c9", "3": "e21f8ae1-24b6-4339-aef7-673f94945195"}}, "__type__": "1"}, "e21f8ae1-24b6-4339-aef7-673f94945195": {"__data__": {"text": "\"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"ZmxhbWluY29tZS5uZW8=\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Integer\",\n\t\t\t\t\t\t\t\t\"value\": \"16\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"TlpIZjFOSnZ6MXR2RUxHTFdaamhwYjNOcVpKRkZVWXB4VA==\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"Array\",\n\t\t\t\t\t\t\"value\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"ZmxhbWluY29tZS5uZW8=\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Integer\",\n\t\t\t\t\t\t\t\t\"value\": \"28\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\t\t\"value\": \"MjAwMToxZGI4OjA6Og==\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"truncated\": false\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\nRequest body #2\n\nGets all records of the expired domain:\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getAllRecords\",\n\t\t\t\t\t\t [\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t\t \"type\":\"String\",\"value\":\"expired.neo\"\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t ],\n\t[]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n\t\"jsonrpc\": \"2.0\",\n\t\"id\": 1,\n\t\"result\": {\n\t\t\"script\": \"DAtleHBpcmVkLm5lbxHAHwwNZ2V0QWxsUmVjb3JkcwwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n\t\t\"state\": \"FAULT\",\n\t\t\"gasconsumed\": \"622077\",\n\t\t\"exception\": \"An unhandled exception was thrown. The name has expired.\",\n\t\t\"stack\": []\n\t}\n}\n```\n", "doc_id": "e21f8ae1-24b6-4339-aef7-673f94945195", "embedding": null, "doc_hash": "834aff8c22367f2655b21ee8994a54de7ee19e83ec729765f33d51fb2e0b39bb", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getAllRecords"}, "node_info": {"start": 1722, "end": 3080, "_node_type": "1"}, "relationships": {"1": "7a6029eb6686d6201bf42d46dbbfb0924db2a6c9", "2": "a491d3fb-19a4-4424-ad40-2cb842bbde72"}}, "__type__": "1"}, "318426d4-bd65-4cd1-a5c9-bf79d53c8fdd": {"__data__": {"text": "# getPrice\n\nGets the register price for each second-level domain length. \n\n\n\n### Parameters\n\n| Name   | Type    | Description                    | Required |\n| :----- | ------- | ------------------------------ | -------- |\n| length | Integer | The second-level domain length | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"invokefunction\",\n    \"params\": [\n        \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\",\n        \"getPrice\",\n        [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"3\"\n            }\n        ],\n        []\n    ],\n    \"id\": 1\n}'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"ExHAHwwIZ2V0UHJpY2UMFBqJ1I2J+MGmbT09DvSDLOvOqS8VQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"375489\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"20000000000\"\n            }\n        ]\n    }\n}\n```\n", "doc_id": "318426d4-bd65-4cd1-a5c9-bf79d53c8fdd", "embedding": null, "doc_hash": "5e4568a468fe4231ce5f35cb71e286f18a9170171689fac7b1961d1265cae5b3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getPrice"}, "node_info": {"start": 0, "end": 1123, "_node_type": "1"}, "relationships": {"1": "52b7bb3361034dc6540bad22299b083e10a3447d"}}, "__type__": "1"}, "df61f529-f2ad-4128-9e91-f248d016c65c": {"__data__": {"text": "# getRecord\n\nGets the record of a second-level domain or its subdomains with the specific type. \n\n\n\n### Parameters\n\n| Name | Type   | Description                                                  | Required |\n| :--- | ------ | ------------------------------------------------------------ | -------- |\n| name | String | The second-level domain name, e.g. \"test.neo\", or the subdomain \"pay.test.neo\" | Required |\n| type | Byte   | Available types are:<br/>1 - IPV4 address record<br/>5 - Canonical name record<br/>16 - Text record<br/>28 - IPV6 address record | Required |\n\n### Example\n\n##### Example #1 Get the IPV4 address record\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"sub1.flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"1\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"EQwTc3ViMS5mbGFtaW5jb21lLm5lbxLAHwwJZ2V0UmVjb3JkDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1756494\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"MTY1LjIzLjM0LjU0\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #2 Get the Canonical name record\n\nRequest body #2\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [", "doc_id": "df61f529-f2ad-4128-9e91-f248d016c65c", "embedding": null, "doc_hash": "d7bbd5c95a68cf9f1bdc608b9d5f4fb4d6cb225f9c04cd5d335743fdfe68bca1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getRecord"}, "node_info": {"start": 0, "end": 1948, "_node_type": "1"}, "relationships": {"1": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302", "3": "b5fd5945-30a1-4101-964f-7602e1ca3701"}}, "__type__": "1"}, "b5fd5945-30a1-4101-964f-7602e1ca3701": {"__data__": {"text": "\"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"5\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"FQwOZmxhbWluY29tZS5uZW8SwB8MCWdldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1654128\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"YWxpYXMubmVv\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #3 Get the Text record\n\nRequest body #3\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"16\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body", "doc_id": "b5fd5945-30a1-4101-964f-7602e1ca3701", "embedding": null, "doc_hash": "79c97c781c3f537a210f4f70975c91fdb77171435f3ccca2ace80d8a5c908d34", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getRecord"}, "node_info": {"start": 1905, "end": 3478, "_node_type": "1"}, "relationships": {"1": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302", "2": "df61f529-f2ad-4128-9e91-f248d016c65c", "3": "0b6e628d-e3fe-4cd8-a066-1ffa7e7f8670"}}, "__type__": "1"}, "0b6e628d-e3fe-4cd8-a066-1ffa7e7f8670": {"__data__": {"text": "]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #3\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"IAwOZmxhbWluY29tZS5uZW8SwB8MCWdldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1654128\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"TlFKS1NOZFRnTlgzd25vOVFQWXB3TmhmVVRnNERuRXM2UA==\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #4 Get the IPV6 record\n\nRequest body #4\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"28\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #4\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"ABwMDmZsYW1pbmNvbWUubmVvEsAfDAlnZXRSZWNvcmQMFLbLwLkAmZsTjKCyoF2KU3a3VYNTQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1654128\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"MjAwMToxZGI4OjA6Og==\"\n            }\n        ]\n", "doc_id": "0b6e628d-e3fe-4cd8-a066-1ffa7e7f8670", "embedding": null, "doc_hash": "f3f322183693937c78d7bfde369fd0e56234f50f2115770d0ac356eb9bd868b9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getRecord"}, "node_info": {"start": 3490, "end": 5048, "_node_type": "1"}, "relationships": {"1": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302", "2": "b5fd5945-30a1-4101-964f-7602e1ca3701", "3": "a80621e9-2ddb-47fa-8e4f-a985d44c8826"}}, "__type__": "1"}, "a80621e9-2ddb-47fa-8e4f-a985d44c8826": {"__data__": {"text": "         }\n        ]\n    }\n}\n```\n\n##### Example #5 Get the record of expired domains\n\nRequest body #5 \n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"getRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"expired.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"16\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #5\n\n```json5\n{\n\t\"jsonrpc\": \"2.0\",\n\t\"id\": 1,\n\t\"result\": {\n\t\t\"script\": \"IAwLZXhwaXJlZC5uZW8SwB8MCWdldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n\t\t\"state\": \"FAULT\",\n\t\t\"gasconsumed\": \"1083138\",\n\t\t\"exception\": \"An unhandled exception was thrown. The name has expired.\",\n\t\t\"stack\": []\n\t}\n}\n```\n", "doc_id": "a80621e9-2ddb-47fa-8e4f-a985d44c8826", "embedding": null, "doc_hash": "3c3549d8423cb764f7ba8cc2d60e1599456a84f02355cdcede4ae72b1cbe34fe", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getRecord"}, "node_info": {"start": 5060, "end": 6080, "_node_type": "1"}, "relationships": {"1": "c286b043311a7af9f7d1f8b7da621eb7d0fe5302", "2": "0b6e628d-e3fe-4cd8-a066-1ffa7e7f8670"}}, "__type__": "1"}, "b40447da-a4c3-46e6-9cf8-d5774c5a7013": {"__data__": {"text": "# isAvailable\n\nCheck if the second-level domain is available. The expired domain names can be re-registered.  If the root does not exist, an error message is thrown.\n\n\n\n### Parameters\n\n| Name | Type   | Description                              | Required |\n| :--- | ------ | ---------------------------------------- | -------- |\n| name | String | The second-level domain, e.g. \"test.neo\" | Required |\n\n### Example\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"isAvailable\",\n                         [{\"type\":\"String\",\"value\":\"t5.neo\"}]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAZ0NS5uZW8RwB8MC2lzQXZhaWxhYmxlDBQaidSNifjBpm09PQ70gyzrzqkvFUFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"875181\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": false\n            }\n        ]\n    }\n}\n```\n\nRequest body #2\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"isAvailable\",\n                         [{\"type\":\"String\",\"value\":\"test.neo\"}]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAh0ZXN0Lm5lbxHAHwwLaXNBdmFpbGFibGUMFBqJ1I2J+MGmbT09DvSDLOvOqS8VQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1228476\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": true\n            }\n        ]\n   ", "doc_id": "b40447da-a4c3-46e6-9cf8-d5774c5a7013", "embedding": null, "doc_hash": "2222f3a82c35494bf5e3d3165e210db345cc706f9f24be9964c3e8d27f09135c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/isAvailable"}, "node_info": {"start": 0, "end": 1903, "_node_type": "1"}, "relationships": {"1": "b8210cf275aeaa0e8e9a178abd45874b107048c1", "3": "93d82944-0f44-4268-9668-60e21444d435"}}, "__type__": "1"}, "93d82944-0f44-4268-9668-60e21444d435": {"__data__": {"text": "      }\n        ]\n    }\n}\n```\n\nRequest body #3\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"isAvailable\",\n                         [{\"type\":\"String\",\"value\":\"neo.test\"}]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #3\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAhuZW8udGVzdBHAHwwLaXNBdmFpbGFibGUMFBqJ1I2J+MGmbT09DvSDLOvOqS8VQWJ9W1I=\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"629298\",\n        \"exception\": \"An unhandled exception was thrown. The root does not exist.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "93d82944-0f44-4268-9668-60e21444d435", "embedding": null, "doc_hash": "4a93540b93fe697ee553e87fa10b3394dad9b30e77fa567d06dee6a8de9cd8ab", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/isAvailable"}, "node_info": {"start": 1882, "end": 2619, "_node_type": "1"}, "relationships": {"1": "b8210cf275aeaa0e8e9a178abd45874b107048c1", "2": "b40447da-a4c3-46e6-9cf8-d5774c5a7013"}}, "__type__": "1"}, "29d09ea5-418b-449f-a345-38f08aec4ac1": {"__data__": {"text": "# ownerOf\n\nGets the domain owner. If the domain has expired, an error message is returned instead of the owner.\n\n\n\n### Parameters\n\n| Name        | Type   | Description                    | Required |\n| ----------- | ------ | ------------------------------ | -------- |\n| domain name | String | A domain name, e.g. \"edge.neo\" | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"ownerOf\",\n                         [\n                             {\n                                 \"type\":\"ByteArray\",\"value\":\"ZWRnZS5uZW8=\"\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NMzaUBM56iumJ8pHfjjCuKsAepKxENkUqN\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAhlZGdlLm5lbxHAHwwHb3duZXJPZgwUGonUjYn4waZtPT0O9IMs686pLxVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"589170\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"3f9BbV5KcZwWd8ismxMpFmvXJ+g=\"\n            }\n        ]\n    }\n}\n```\n", "doc_id": "29d09ea5-418b-449f-a345-38f08aec4ac1", "embedding": null, "doc_hash": "75f6dedca4634d32c1d698adcc12344e22c59821db5cb5df8e19dcd0f81afe34", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/ownerOf"}, "node_info": {"start": 0, "end": 1364, "_node_type": "1"}, "relationships": {"1": "0d5661294bf4989f5890d3abe7844ffc01ba9074"}}, "__type__": "1"}, "e3195419-9c93-41e5-a55b-c987f6ff0198": {"__data__": {"text": "# properties\n\nGets the properties of a domain such as name, expiration, and admin. \n\n\n\n### Parameters\n\n| Name        | Type   | Description                      | Required |\n| ----------- | ------ | -------------------------------- | -------- |\n| domain name | String | A domain string, e.g. \"edge.neo\" | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"properties\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"edge.neo\"\n                             }\n                         ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAhlZGdlLm5lbxHAHwwKcHJvcGVydGllcwwUGonUjYn4waZtPT0O9IMs686pLxVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"663480\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Map\",\n                \"value\": [\n                    {\n                        \"key\": {\n                            \"type\": \"ByteString\",\n                            \"value\": \"bmFtZQ==\"\n                        },\n                        \"value\": {\n                            \"type\": \"ByteString\",\n                            \"value\": \"ZWRnZS5uZW8=\"\n                        }\n                    },\n                    {\n                        \"key\": {\n                          ", "doc_id": "e3195419-9c93-41e5-a55b-c987f6ff0198", "embedding": null, "doc_hash": "c3acaed3bf229596a4c7b8f5041815a453a7c3238f2e76dfe9215cad5d1dc735", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/properties"}, "node_info": {"start": 0, "end": 1597, "_node_type": "1"}, "relationships": {"1": "edde24794c57e87c10b5cfa33353ef5661a5071d", "3": "04680199-412d-4c08-8293-5912b7d76f63"}}, "__type__": "1"}, "04680199-412d-4c08-8293-5912b7d76f63": {"__data__": {"text": "                     \"type\": \"ByteString\",\n                            \"value\": \"ZXhwaXJhdGlvbg==\"\n                        },\n                        \"value\": {\n                            \"type\": \"Integer\",\n                            \"value\": \"1731267713921\"\n                        }\n                    },\n                    {\n                        \"key\": {\n                            \"type\": \"ByteString\",\n                            \"value\": \"YWRtaW4=\"\n                        },\n                        \"value\": {\n                            \"type\": \"Any\"\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\nIf the domain has expired, an error message is returned instead of the properties.\n\nThe expiration is set in milliseconds. If no admin is set, a null is returned.\n", "doc_id": "04680199-412d-4c08-8293-5912b7d76f63", "embedding": null, "doc_hash": "5d347a4ef5a4ede5b3a4fad7c7a32667d83150260823b332fc8682670ed7b3e2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/properties"}, "node_info": {"start": 1578, "end": 2411, "_node_type": "1"}, "relationships": {"1": "edde24794c57e87c10b5cfa33353ef5661a5071d", "2": "e3195419-9c93-41e5-a55b-c987f6ff0198"}}, "__type__": "1"}, "6c6a7a63-93de-429b-ad55-bfd0ea71fe11": {"__data__": {"text": "# register\n\nRegisters a second-level domain. It requires the owner's signature. By default it registers a domain for one year.\n\n\n\n### Parameters\n\n| Name  | Type    | Description                                   | Required |\n| :---- | ------- | --------------------------------------------- | -------- |\n| name  | String  | The second-level domain name, e.g. \"test.neo\" | Required |\n| owner | Address | The owner to register the second-level domain | Required |\n\n### Example\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"register\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"aa1a3.neo\"\n                             },{\"type\":\"Hash160\",\"value\":\"0x713c5666c9710bf6933572cf134a2a8f518f1a30\"}\n                         ],\n    [\n      {\n        \"account\": \"NQJKSNdTgNX3wno9QPYpwNhfUTg4DnEs6P\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBQwGo9RjypKE89yNZP2C3HJZlY8cQwJYWExYTMubmVvEsAfDAhyZWdpc3RlcgwUGonUjYn4waZtPT0O9IMs686pLxVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"803798261\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": true\n            }\n        ]\n    }\n}\n```\n\nRequest body #2\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"register\",\n                         [\n    ", "doc_id": "6c6a7a63-93de-429b-ad55-bfd0ea71fe11", "embedding": null, "doc_hash": "25fb527ab6f2be4fd93bb884ac39696b96a1c195d117181a13e0e9875d974137", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/register"}, "node_info": {"start": 0, "end": 1867, "_node_type": "1"}, "relationships": {"1": "68146ad8405a821f13929453ca0543967ee99fba", "3": "10913d0f-e8aa-43d6-9dbb-2eee5feae5eb"}}, "__type__": "1"}, "10913d0f-e8aa-43d6-9dbb-2eee5feae5eb": {"__data__": {"text": "              [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },\n{\"type\":\"Hash160\",\"value\":\"0x713c5666c9710bf6933572cf134a2a8f518f1a30\"}\n                         ],\n    [\n      {\n        \"account\": \"NQJKSNdTgNX3wno9QPYpwNhfUTg4DnEs6P\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBRjyd6XR7EomMVu9h9fAkJJigfqxQwOZmxhbWluY29tZS5uZW8SwB8MCHJlZ2lzdGVyDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"801592460\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": false\n            }\n        ]\n    }\n}\n```\n\nRequest body #3\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"register\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"pay.test\"\n                             },\n{\"type\":\"Hash160\",\"value\":\"0x713c5666c9710bf6933572cf134a2a8f518f1a30\"}\n                         ],\n    [\n      {\n        \"account\": \"NQJKSNdTgNX3wno9QPYpwNhfUTg4DnEs6P\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body", "doc_id": "10913d0f-e8aa-43d6-9dbb-2eee5feae5eb", "embedding": null, "doc_hash": "34c0c8b8a733fab189dfa8b7fe3b80dac0e5131e6d50b127874297abe449e8f7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/register"}, "node_info": {"start": 1866, "end": 3370, "_node_type": "1"}, "relationships": {"1": "68146ad8405a821f13929453ca0543967ee99fba", "2": "6c6a7a63-93de-429b-ad55-bfd0ea71fe11", "3": "99aea70c-e548-43ef-a3bf-c270e5d68f9c"}}, "__type__": "1"}, "99aea70c-e548-43ef-a3bf-c270e5d68f9c": {"__data__": {"text": "]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #3\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBQwGo9RjypKE89yNZP2C3HJZlY8cQwIcGF5LnRlc3QSwB8MCHJlZ2lzdGVyDBQaidSNifjBpm09PQ70gyzrzqkvFUFifVtS\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"692382\",\n        \"exception\": \"An unhandled exception was thrown. The root does not exist.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "99aea70c-e548-43ef-a3bf-c270e5d68f9c", "embedding": null, "doc_hash": "9f2b970581714bd2f7ded5b99c2746d1b3e3d198983e9e9ef2899e1840cc181b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/register"}, "node_info": {"start": 3335, "end": 3732, "_node_type": "1"}, "relationships": {"1": "68146ad8405a821f13929453ca0543967ee99fba", "2": "10913d0f-e8aa-43d6-9dbb-2eee5feae5eb"}}, "__type__": "1"}, "f88a4049-ff72-4722-a9f4-867eda5a2fe3": {"__data__": {"text": "# renew\n\nExtends the validity period of the second-level domain names. Anyone can renew other users' domains. The default renewal period is one year, or you can specify the years.\n\n:::note\nRenewal for over 10 years from the current date is not allowed.  \n\nRenewal for expired domains is not allowed.\n:::\n\nThis API returns the new expiration date.\n\n\n\n### Parameters\n\n| Name  | Type   | Description                                   | Required |\n| :---- | ------ | --------------------------------------------- | -------- |\n| name  | String | The second-level domain name, e.g. \"test.neo\" | Required |\n| years | Byte   | Years to renew                                | Required |\n\n### Example\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"renew\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DA5mbGFtaW5jb21lLm5lbxHAHwwFcmVuZXcMFLbLwLkAmZsTjKCyoF2KU3a3VYNTQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"801739239\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"1655369469752\"\n            }\n        ]\n    }\n}\n```\n\nRequest body #2\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [", "doc_id": "f88a4049-ff72-4722-a9f4-867eda5a2fe3", "embedding": null, "doc_hash": "c8cf09b8fc7eb975d170d013be6d28757b8f2d954df419cf39c2ba26eb115348", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/renew"}, "node_info": {"start": 0, "end": 1906, "_node_type": "1"}, "relationships": {"1": "18051023a4884da734cec67165692de9cbccbbfe", "3": "95d97e0a-f65b-4d61-bb12-cbd04515c1cb"}}, "__type__": "1"}, "95d97e0a-f65b-4d61-bb12-cbd04515c1cb": {"__data__": {"text": "\"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"renew\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },\n                             {\n                                 \"type\":\"Integer\",\"value\":\"2\"\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"EgwOZmxhbWluY29tZS5uZW8SwB8MBXJlbmV3DBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1601737499\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"1655370669752\"\n            }\n        ]\n    }\n}\n```\n\nRequest body #3\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"renew\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"crosschain1.neo\"\n                             }\n                         ],\n    [\n      {\n        \"account\":", "doc_id": "95d97e0a-f65b-4d61-bb12-cbd04515c1cb", "embedding": null, "doc_hash": "264cf288dfb8aa9eb462c07cb90d0fff3814ac982fd07f4f37d4ccd90141da38", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/renew"}, "node_info": {"start": 1863, "end": 3324, "_node_type": "1"}, "relationships": {"1": "18051023a4884da734cec67165692de9cbccbbfe", "2": "f88a4049-ff72-4722-a9f4-867eda5a2fe3", "3": "0bc93e9a-c376-4590-bb5f-09bd1b095de3"}}, "__type__": "1"}, "0bc93e9a-c376-4590-bb5f-09bd1b095de3": {"__data__": {"text": " [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #3\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DA9jcm9zc2NoYWluMS5uZW8RwB8MBXJlbmV3DBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"801394985\",\n        \"exception\": \"An unhandled exception was thrown. The name has expired.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "0bc93e9a-c376-4590-bb5f-09bd1b095de3", "embedding": null, "doc_hash": "0bdc839c4b818ac71ddc7a4003640b88ef59823107f6b881086368a8a523c7fb", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/renew"}, "node_info": {"start": 3339, "end": 3826, "_node_type": "1"}, "relationships": {"1": "18051023a4884da734cec67165692de9cbccbbfe", "2": "95d97e0a-f65b-4d61-bb12-cbd04515c1cb"}}, "__type__": "1"}, "356f7146-17af-44ea-827d-8b2722f28036": {"__data__": {"text": "# resolve\n\nResolves the record of a second-level domain with the specific type. The maximum resolving depth is 2. \n\nFor example, when you resolve a domain \"test.neo\" with the IPV4 type:\n\n- if the domain has a IPV4 record, then the record is returned directly \n- if the domain has a canonical name record \"alias.neo\", which involves a IPV4 record, then the IPV4 record is returned. \n\n\n\n### Parameters\n\n| Name | Type    | Description                                                  | Required |\n| :--- | ------- | ------------------------------------------------------------ | -------- |\n| name | String  | The second-level domain, e.g. \"test.neo\"                     | Required |\n| type | Integer | Available types are:<br/>1 - IPV4 address record<br/>5 - Canonical name record<br/>16 - Text record<br/>28 - IPV6 address record |          |\n\n### Example\n\nRequest body #1\n\nIn this example, suppose \"test1.neo\" has no text record, but it has the cname record \"test2.neo\"; \"test2.neo\" has no text record, but it has the cname record \"test3.neo\"; \"test3.neo\" has a text record \"test3\". Then resolving \"test1.neo\" with the text record will return test3.\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"resolve\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"test1.neo\"\n                             },\n                             {\n                                 \"type\":\"Integer\",\"value\":\"16\"\n                             }\n                         ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"IAwJdGVzdDEubmVvEsAfDAdyZXNvbHZlDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"4410468\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\":", "doc_id": "356f7146-17af-44ea-827d-8b2722f28036", "embedding": null, "doc_hash": "028338a648c81f7e28d0bd0b8267f08ad5a1bc6a44d38e8002e928ebdb0ac29a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/resolve"}, "node_info": {"start": 0, "end": 2045, "_node_type": "1"}, "relationships": {"1": "b8a2b21f2aed109cb7ed00fb45742e6c4c846113", "3": "f82a2f74-be56-42aa-a0ad-cbc03cee8f61"}}, "__type__": "1"}, "f82a2f74-be56-42aa-a0ad-cbc03cee8f61": {"__data__": {"text": "{\n                \"type\": \"ByteString\",\n                \"value\": \"dGVzdDM=\"\n            }\n        ]\n    }\n}\n```\n\nRequest body #2\n\nIn this example, the depth is greater than 2 and no record is found.\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"resolve\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"test1.neo\"\n                             },\n                             {\n                                 \"type\":\"Integer\",\"value\":\"16\"\n                             }\n                         ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"IAwJdGVzdDEubmVvEsAfDAdyZXNvbHZlDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"4512384\",\n        \"exception\": \"An unhandled exception was thrown. Too many redirections.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "f82a2f74-be56-42aa-a0ad-cbc03cee8f61", "embedding": null, "doc_hash": "c83d2473a97e5df928e562aef35e6aee83e92bf79c3c570144f85180eedc2f4b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/resolve"}, "node_info": {"start": 2020, "end": 3147, "_node_type": "1"}, "relationships": {"1": "b8a2b21f2aed109cb7ed00fb45742e6c4c846113", "2": "356f7146-17af-44ea-827d-8b2722f28036"}}, "__type__": "1"}, "dc239a7e-0804-40a1-a03c-0d4fa0ebc983": {"__data__": {"text": "# roots\n\nReturns all the top-level domains.\n\n\n\n### Parameters\n\nN/A \n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"roots\",\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n\t\"jsonrpc\": \"2.0\",\n\t\"id\": 1,\n\t\"result\": {\n\t\t\"script\": \"wh8MBXJvb3RzDBQaidSNifjBpm09PQ70gyzrzqkvFUFifVtS\",\n\t\t\"state\": \"HALT\",\n\t\t\"gasconsumed\": \"228888\",\n\t\t\"exception\": null,\n\t\t\"stack\": [\n\t\t\t{\n\t\t\t\t\"type\": \"InteropInterface\",\n\t\t\t\t\"iterator\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"ByteString\",\n\t\t\t\t\t\t\"value\": \"bmVv\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"truncated\": false\n\t\t\t}\n\t\t]\n\t}\n}\n```\n", "doc_id": "dc239a7e-0804-40a1-a03c-0d4fa0ebc983", "embedding": null, "doc_hash": "3917e1757dae76a2bfc167bad90ffd00704be21743b591b7578948f77a6a4d2b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/roots"}, "node_info": {"start": 0, "end": 745, "_node_type": "1"}, "relationships": {"1": "38d538baf3e04475b6dae62e5b06245fcf1d8d2c"}}, "__type__": "1"}, "aec492a1-839a-414f-b0ba-8d11dbf305c5": {"__data__": {"text": "# setAdmin\n\nSets the administrator for a second-level domain. Owners and administrators control the domains and subdomains. A second-level domain owner can specify an administrator to manage domains. Invoking this  API emits the setAdmin event. \n\nThis API requires both the owner and administrator's signatures. If the admin is not specified, the admin record will be cleaned. If the domain has expired, it's not allowed to set admin.\n\n\n\n### Parameters\n\n| Name  | Type    | Description                                | Required |\n| :---- | ------- | ------------------------------------------ | -------- |\n| name  | String  | The second-level domain, e.g. \"test.neo\"   | Required |\n| admin | Address | The administrator that the owner specifies | Required |\n\n### Example\n\n##### Example #1 Set the admin record\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setAdmin\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },\n                             {\n                                 \"type\":\"Hash160\",\"value\":\"0xc6b7765ce19d382b1af0894c226eee133713fa96\"\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      },\n      {\n        \"account\": \"NZgG83sFer1ciTy2LCjft4A4fiDuWg4XaB\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBSW+hM3E+5uIkyJ8BorOJ3hXHa3xgwOZmxhbWluY29tZS5uZW8SwB8MCHNldEFkbWluDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1348018\",\n        \"exception\": null,\n    ", "doc_id": "aec492a1-839a-414f-b0ba-8d11dbf305c5", "embedding": null, "doc_hash": "966cdf990d9a65423518b4e2192265ca7337421a46117b83807ed162b9e435aa", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setAdmin"}, "node_info": {"start": 0, "end": 1981, "_node_type": "1"}, "relationships": {"1": "838e6337b4338c1b85ddd4e7e78ce7e82b04810c", "3": "b3928af4-fc04-487b-8162-d341cb2bec1c"}}, "__type__": "1"}, "b3928af4-fc04-487b-8162-d341cb2bec1c": {"__data__": {"text": "       \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #2 Clear the admin record\n\nRequest body #2\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setAdmin\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },\n                             {\n                                 \"type\":\"Hash160\",\"value\":null\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      },\n        {\n              \"account\": \"NZgG83sFer1ciTy2LCjft4A4fiDuWg4XaB\",\n        \"scopes\": \"CalledByEntry\"\n        }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"CwwOZmxhbWluY29tZS5uZW8SwB8MCHNldEFkbWluDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1159492\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #3 Set admin for expired domain\n\nRequest body #3 \n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\":", "doc_id": "b3928af4-fc04-487b-8162-d341cb2bec1c", "embedding": null, "doc_hash": "c60c6c6d9d0d614aabc264dd8792ec18c2349efa3c5c826cb9cbdec6b0a83fc9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setAdmin"}, "node_info": {"start": 1964, "end": 3564, "_node_type": "1"}, "relationships": {"1": "838e6337b4338c1b85ddd4e7e78ce7e82b04810c", "2": "aec492a1-839a-414f-b0ba-8d11dbf305c5", "3": "43f68820-b10c-4c15-97eb-b87976b692ec"}}, "__type__": "1"}, "43f68820-b10c-4c15-97eb-b87976b692ec": {"__data__": {"text": "'{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setAdmin\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"expired.neo\"\n                             },\n                             {\n                                 \"type\":\"Hash160\",\"value\":\"0xc6b7765ce19d382b1af0894c226eee133713fa96\"\n                             }\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      },\n        {\n              \"account\": \"NZgG83sFer1ciTy2LCjft4A4fiDuWg4XaB\",\n        \"scopes\": \"CalledByEntry\"\n        }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #3\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBSW+hM3E+5uIkyJ8BorOJ3hXHa3xgwLZXhwaXJlZC5uZW8SwB8MCHNldEFkbWluDBS2y8C5AJmbE4ygsqBdilN2t1WDU0FifVtS\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"593841\",\n        \"exception\": \"An unhandled exception was thrown. The name has expired.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "43f68820-b10c-4c15-97eb-b87976b692ec", "embedding": null, "doc_hash": "7507cc34e60e93cc764203fa0ed35721ba5d62db575b61bf2c2e55323e4e87c3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setAdmin"}, "node_info": {"start": 3548, "end": 4660, "_node_type": "1"}, "relationships": {"1": "838e6337b4338c1b85ddd4e7e78ce7e82b04810c", "2": "b3928af4-fc04-487b-8162-d341cb2bec1c"}}, "__type__": "1"}, "4323e630-025c-4043-ab95-3766df0bf1c9": {"__data__": {"text": "# setPrice\n\nSets the registration price for each second-level domain length (for Neo Committee only). \n\nThe committee multi-signature address is required to generate a new transaction. \n\n\n\n### Parameters\n\n| Name      | Type       | Description                           | Required |\n| :-------- | ---------- | ------------------------------------- | -------- |\n| priceList | Long Array | The price list for each domain length | Required |\n\n:::note\n\n- The first value of the array stands for the default price. \n- The price should not be greater than 10000 GAS. \n:::\n\n### Example\n\nIn this example, the price for each domain length is set as follows:\n\n- 1 or 2-length domains: unavailable\n- 3-length domains: 200 GAS\n- 4-length domains: 60 GAS\n- 5+ length domains: 8 GAS\n\nTherefore, the domain name \"alice.neo\" costs 8 GAS, \"test.neo\" costs 60 GAS, and \"pay.neo\" costs 200GAS.\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"invokefunction\",\n    \"params\": [\n        \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\",\n        \"setPrice\",\n        [\n            {\n                \"type\": \"Array\",\n                \"value\": [\n                    {\n                        \"type\": \"Integer\",\n                        \"value\": \"800000000\"\n                    },\n                    {\n                        \"type\": \"Integer\",\n                        \"value\": \"-1\"\n                    },\n                    {\n                        \"type\": \"Integer\",\n                        \"value\": \"-1\"\n                    },\n                    {\n                        \"type\": \"Integer\",\n                        \"value\": \"20000000000\"\n                    },\n                    {\n                        \"type\": \"Integer\",\n                        \"value\": \"6000000000\"\n               ", "doc_id": "4323e630-025c-4043-ab95-3766df0bf1c9", "embedding": null, "doc_hash": "454bca8171205cae60ffaf34b61c8a92506457272ccdcf70edad83cf53f20176", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setPrice"}, "node_info": {"start": 0, "end": 1893, "_node_type": "1"}, "relationships": {"1": "7b78ec193886b111cf56d8f5576f033269d4fdfb", "3": "d9d29936-7352-46a4-8b40-3e0320144e22"}}, "__type__": "1"}, "d9d29936-7352-46a4-8b40-3e0320144e22": {"__data__": {"text": "                   }\n                ]\n            }\n        ],\n        [\n            {\n                \"account\": \"NbbBtdAbiCdvCaAhdT5dCgrZsAn1ZaUdot\",\n                \"scopes\": \"Global\"\n            }\n        ]\n    ],\n    \"id\": 1\n}'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"AwC8oGUBAAAAAwDIF6gEAAAADw8CAAivLxXAEcAfDAhzZXRQcmljZQwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"418093\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n", "doc_id": "d9d29936-7352-46a4-8b40-3e0320144e22", "embedding": null, "doc_hash": "9331b0cd38c30075730496cbfd0b161e75ac98c84e477468471221efd803fc89", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setPrice"}, "node_info": {"start": 1879, "end": 2493, "_node_type": "1"}, "relationships": {"1": "7b78ec193886b111cf56d8f5576f033269d4fdfb", "2": "4323e630-025c-4043-ab95-3766df0bf1c9"}}, "__type__": "1"}, "edc90ea0-d8b3-4182-8336-7f84c2160e41": {"__data__": {"text": "# setRecord\n\nSets record for the second-level domain or its subdomains. Both the owner and administrator can set record. \n\nThis requires the owner or the administrator's signature, if the domain is expired, it's not allowed to set record.\n\n\n\n### Parameters\n\n| Name | Type    | Description                                                  | Required |\n| :--- | ------- | ------------------------------------------------------------ | -------- |\n| name | String  | The second-level domain, e.g. \"test.neo\", or subdomains, \"pay.test.neo\" | Required |\n| type | Integer | Available types are:<br/>1 - IPV4 address record<br/>5 - Canonical name record<br/>16 - Text record<br/>28 - IPV6 address record | Required |\n| data | String  | The corresponding data                                       | Required |\n\n### Example\n\n##### Example #1 Set IPV4 address record\n\nThe following ipv4 addresses will be rejected:\n\n- 0.x.x.x;  10.x.x.x; 127.x.x.x; >=224.x.x.x\n\n- 169.254.x.x\n\n- 172.(16~31).x.x\n\n- 192.168.x.x\n\n- x.x.0.x; x.x.255.x\n\nRequest body #1\n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"1\"},{\"type\":\"String\",\"value\":\"40.122.161.90\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #1\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DA00MC4xMjIuMTYxLjkwEQwOZmxhbWluY29tZS5uZW8TwB8MCXNldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"3230715\",\n        \"exception\": null,\n        \"stack\": [\n       ", "doc_id": "edc90ea0-d8b3-4182-8336-7f84c2160e41", "embedding": null, "doc_hash": "5f7a55380c5eae10fd6dbd1025377dba195d0bfcbd14c68d428d9a76ec5ae6c5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setRecord"}, "node_info": {"start": 0, "end": 2005, "_node_type": "1"}, "relationships": {"1": "ece9661aaa275ba7b6e067d84151a8901406e9d2", "3": "1f856dac-1c81-4821-bb58-dfa8190340dd"}}, "__type__": "1"}, "1f856dac-1c81-4821-bb58-dfa8190340dd": {"__data__": {"text": "       \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #2 Set CNAME record\n\nThe cname string must meet the following requirements:\n\n- The length is greater than 3, and smaller than 255\n- Its format is x.x.x\n- Characters are combinations of numbers and Alphabet characters.\n\nRequest body #2\n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"5\"},{\"type\":\"String\",\"value\":\"alias2.neo\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #2\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAphbGlhczIubmVvFQwOZmxhbWluY29tZS5uZW8TwB8MCXNldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"2858562\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #3 Set Text record\n\nIt is random text string with the length limited to 255. Normally you can set it as N3 address.\n\nRequest body #3\n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setRecord\",\n                         [\n                             {\n", "doc_id": "1f856dac-1c81-4821-bb58-dfa8190340dd", "embedding": null, "doc_hash": "cdb5a6401eda0cdd9d1e715aaa4309f3f7600d1333c19ea120543a8c310cec91", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setRecord"}, "node_info": {"start": 1996, "end": 3829, "_node_type": "1"}, "relationships": {"1": "ece9661aaa275ba7b6e067d84151a8901406e9d2", "2": "edc90ea0-d8b3-4182-8336-7f84c2160e41", "3": "74821dd8-e18b-45a3-83f2-259b2bbeeb76"}}, "__type__": "1"}, "74821dd8-e18b-45a3-83f2-259b2bbeeb76": {"__data__": {"text": "                  {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"16\"},{\"type\":\"String\",\"value\":\"NZgG83sFer1ciTy2LCjft4A4fiDuWg4XaB\"}\n                         ],\n    [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #3\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DCJOWmdHODNzRmVyMWNpVHkyTENqZnQ0QTRmaUR1V2c0WGFCIAwOZmxhbWluY29tZS5uZW8TwB8MCXNldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"2694027\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #5 Set IPV6 record\n\nThe compressed IPV6 address is supported, such as 2001:1db8:0:: The following IPV6 addresses will be rejected:\n\n- Start with (<0x2000)\n- Start with 0x2002 or 0x3ffe\n- Start with (>0x3fff)\n- 0x2001:(<0x200 or 0xdb8)\n\nRequest body #4\n\n```json5\ncurl --request POST \\\n  --url http://localhost:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"flamincome.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"28\"},{\"type\":\"String\",\"value\":\"2001:1db8:3333:4444:5555:6666:7777:8888\"}\n                         ],\n    [\n      {\n        \"account\":", "doc_id": "74821dd8-e18b-45a3-83f2-259b2bbeeb76", "embedding": null, "doc_hash": "b9cd62b142ea3bf408a672be5956d6b882bc5febaead221199e3f6a46d316287", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setRecord"}, "node_info": {"start": 3838, "end": 5479, "_node_type": "1"}, "relationships": {"1": "ece9661aaa275ba7b6e067d84151a8901406e9d2", "2": "1f856dac-1c81-4821-bb58-dfa8190340dd", "3": "f6b140f8-1b35-4519-b0bc-609e447d0a11"}}, "__type__": "1"}, "f6b140f8-1b35-4519-b0bc-609e447d0a11": {"__data__": {"text": " [\n      {\n        \"account\": \"NV1butKWMZSpWhBGU7PyP5Qe81Wq3zDkHP\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #4\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DCcyMDAxOjFkYjg6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4ODgAHAwOZmxhbWluY29tZS5uZW8TwB8MCXNldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"3910838\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Any\"\n            }\n        ]\n    }\n}\n```\n\n##### Example #5 Set record for expired domains\n\nRequest body #5 \n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x538355b776538a5da0b2a08c139b9900b9c0cbb6\", \"setRecord\",\n                         [\n                             {\n                                 \"type\":\"String\",\"value\":\"expired.neo\"\n                             },{\"type\":\"Integer\",\"value\":\"1\"},{\"type\":\"String\",\"value\":\"40.122.161.90\"}\n                         ],\n    [\n      {\n        \"account\": \"NMzaUBM56iumJ8pHfjjCuKsAepKxENkUqN\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body #5\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DA00MC4xMjIuMTYxLjkwEQwLZXhwaXJlZC5uZW8TwB8MCXNldFJlY29yZAwUtsvAuQCZmxOMoLKgXYpTdrdVg1NBYn1bUg==\",\n        \"state\": \"FAULT\",\n        \"gasconsumed\": \"1830252\",\n        \"exception\": \"An unhandled exception was thrown. The name has expired.\",\n", "doc_id": "f6b140f8-1b35-4519-b0bc-609e447d0a11", "embedding": null, "doc_hash": "066611be7406e77ad756d9aaf3d929904d88999da76a2cda0698ca1e88fdbef5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setRecord"}, "node_info": {"start": 5468, "end": 7090, "_node_type": "1"}, "relationships": {"1": "ece9661aaa275ba7b6e067d84151a8901406e9d2", "2": "74821dd8-e18b-45a3-83f2-259b2bbeeb76", "3": "89c414f5-35a2-4053-bb81-1223cf0c9204"}}, "__type__": "1"}, "89c414f5-35a2-4053-bb81-1223cf0c9204": {"__data__": {"text": "\"An unhandled exception was thrown. The name has expired.\",\n        \"stack\": []\n    }\n}\n```\n", "doc_id": "89c414f5-35a2-4053-bb81-1223cf0c9204", "embedding": null, "doc_hash": "06c005921a3f65e34e9dab02be23fd9b1444a7f4ada923b8c4593896d16bad0f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setRecord"}, "node_info": {"start": 7044, "end": 7136, "_node_type": "1"}, "relationships": {"1": "ece9661aaa275ba7b6e067d84151a8901406e9d2", "2": "f6b140f8-1b35-4519-b0bc-609e447d0a11"}}, "__type__": "1"}, "41ca87d1-9cb9-4793-8c33-d881a4e322b1": {"__data__": {"text": "# tokens\n\nGets all second-level domain names including expired ones. \n\n\n\n### Parameters\n\nN/A \n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"tokens\",[],\n    []\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"wh8MBnRva2VucwwUGonUjYn4waZtPT0O9IMs686pLxVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"228888\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"InteropInterface\",\n                \"iterator\": [\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Y3Jvc3NjaGFpbi5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZGlkLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"d2FuZy5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dDMubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZnVuLm5lbw==\"\n                    },\n                    {\n                       ", "doc_id": "41ca87d1-9cb9-4793-8c33-d881a4e322b1", "embedding": null, "doc_hash": "996d6ebaa2bf2b680a52f0da1c697c881d7033caca8ec79382c433c5c855fec5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 0, "end": 1490, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "3": "3f1d264f-15bf-458b-aa61-3eb8a5b4a1dd"}}, "__type__": "1"}, "3f1d264f-15bf-458b-aa61-3eb8a5b4a1dd": {"__data__": {"text": "                    \"type\": \"ByteString\",\n                        \"value\": \"YXZlLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZmxhbWluZ28ubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"a2trLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"cmV0Lm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZHlsYW4ubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZGVkZWJ1Zy5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"b2tyLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Y2xvdWQubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"b2tqLm5lbw==\"\n                    },\n     ", "doc_id": "3f1d264f-15bf-458b-aa61-3eb8a5b4a1dd", "embedding": null, "doc_hash": "c35e8ac87347bcb0d1de6d99b07354875b665dbbc045f07b9cfa62c49a7f8386", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 1491, "end": 2729, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "2": "41ca87d1-9cb9-4793-8c33-d881a4e322b1", "3": "1cad20bc-36ea-4d88-8630-3c1d161dd359"}}, "__type__": "1"}, "1cad20bc-36ea-4d88-8630-3c1d161dd359": {"__data__": {"text": "             },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"aGhoLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"d3FlZWFzd3d3d3d4eHh3d2FzZGFzZGFzYXNkYXNkc2Fkc2Fhc3NhZHNhZHNhc2FzYWFzYXNkc2FkYXMubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bm5zLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bmVvLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZWRnZS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dDQubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dGVzbGEubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dGVzdDIubmVv\"\n                    },\n                    {\n  ", "doc_id": "1cad20bc-36ea-4d88-8630-3c1d161dd359", "embedding": null, "doc_hash": "bcd99ef2342f431d3ad4ef5eaae700633adf4d46641b3829d4a57199fc8988bd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 2727, "end": 3947, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "2": "3f1d264f-15bf-458b-aa61-3eb8a5b4a1dd", "3": "bfcb77c4-0af9-4db7-8c62-55bc5de428ac"}}, "__type__": "1"}, "bfcb77c4-0af9-4db7-8c62-55bc5de428ac": {"__data__": {"text": "                {\n                        \"type\": \"ByteString\",\n                        \"value\": \"b25lZ2F0ZS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"c3cubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"YXBwLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"MTIubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"YXByaWwubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bXkubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"YS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"d210Lm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"MTIzNC5uZW8=\"\n                    },\n", "doc_id": "bfcb77c4-0af9-4db7-8c62-55bc5de428ac", "embedding": null, "doc_hash": "8fb93da0ce7b17a9ac7ec1906f4f7e022e32dde64c5ea8300af12602f5c10eb2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 3949, "end": 5184, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "2": "1cad20bc-36ea-4d88-8630-3c1d161dd359", "3": "bf939024-95e5-4465-8c25-90070b43448b"}}, "__type__": "1"}, "bf939024-95e5-4465-8c25-90070b43448b": {"__data__": {"text": "                  },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"amQubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"amFuZS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"c3d4Lm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"cXdlLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"YWFuZy5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"YXNkc2RhZC5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"b2thLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"YWxpYmFiYS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                       ", "doc_id": "bf939024-95e5-4465-8c25-90070b43448b", "embedding": null, "doc_hash": "62d86292fd04f9aeecb8a6271c85e567af7d62ccfc4e53d95714b8cf7acbf10a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 5184, "end": 6412, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "2": "bfcb77c4-0af9-4db7-8c62-55bc5de428ac", "3": "47626194-b9e3-418c-b31e-81832be7eb20"}}, "__type__": "1"}, "47626194-b9e3-418c-b31e-81832be7eb20": {"__data__": {"text": "                    \"value\": \"c2FtLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"b2submVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZmxhbWluY29tZS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dDUubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dnVlLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dDIubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZXJyci5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dDEubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bm55by5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n", "doc_id": "47626194-b9e3-418c-b31e-81832be7eb20", "embedding": null, "doc_hash": "7cba9b95cbab8043462c1a760c373f0b13e8e08bce50c26aaa62da0b5c90ef1c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 6416, "end": 7655, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "2": "bf939024-95e5-4465-8c25-90070b43448b", "3": "e5eddce0-d9e2-439c-8879-30f40d688358"}}, "__type__": "1"}, "e5eddce0-d9e2-439c-8879-30f40d688358": {"__data__": {"text": "            \"type\": \"ByteString\",\n                        \"value\": \"d293Lm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"ZGVhZHBvb2wubmVv\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"cHJpY2VzLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bmdkLm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"amVzc2ljYS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bm50Lm5lbw==\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"bWF5Lm5lbw==\"\n                    }\n                ],\n                \"truncated\": false\n            }\n        ]\n    }\n}\n```\n", "doc_id": "e5eddce0-d9e2-439c-8879-30f40d688358", "embedding": null, "doc_hash": "68471552339ddd87cab5911bb3cf443d44daf2c59f61aeef90da9607c6606ac2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}, "node_info": {"start": 7621, "end": 8661, "_node_type": "1"}, "relationships": {"1": "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8", "2": "47626194-b9e3-418c-b31e-81832be7eb20"}}, "__type__": "1"}, "c1ee3b53-688e-4aa8-bbf0-84d49bc497a1": {"__data__": {"text": "# tokensOf\n\nGets all second-level domains owned by the given address including expired ones. \n\n\n\n### Parameters\n\n| Name  | Type    | Description          | Required |\n| :---- | ------- | -------------------- | -------- |\n| owner | Address | The owner of domains | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"tokensOf\",\n                         [\n                             {\n                                 \"type\":\"Hash160\",\"value\":\"0x713c5666c9710bf6933572cf134a2a8f518f1a30\"\n                             }\n                         ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DBQwGo9RjypKE89yNZP2C3HJZlY8cRHAHwwIdG9rZW5zT2YMFBqJ1I2J+MGmbT09DvSDLOvOqS8VQWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"241395\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"InteropInterface\",\n                \"iterator\": [\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"MTIzNC5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"amFuZS5uZW8=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"b2submVv\"\n                    },\n                   ", "doc_id": "c1ee3b53-688e-4aa8-bbf0-84d49bc497a1", "embedding": null, "doc_hash": "1b829718be1511cdc5d11026e7cb1af21017771c6a70fb203341176cacb9a930", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokensOf"}, "node_info": {"start": 0, "end": 1602, "_node_type": "1"}, "relationships": {"1": "a8723774c1de839dd80038feb9f2a622c24f524b", "3": "dd849719-e41d-4390-8294-59066d76e820"}}, "__type__": "1"}, "dd849719-e41d-4390-8294-59066d76e820": {"__data__": {"text": "                   {\n                        \"type\": \"ByteString\",\n                        \"value\": \"dDEubmVv\"\n                    }\n                ],\n                \"truncated\": false\n            }\n        ]\n    }\n}\n```\n", "doc_id": "dd849719-e41d-4390-8294-59066d76e820", "embedding": null, "doc_hash": "18d9832a82ad5db84dce8b4baedc59dac72859fa703bb7ddd316c9a84d8421b7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokensOf"}, "node_info": {"start": 1584, "end": 1807, "_node_type": "1"}, "relationships": {"1": "a8723774c1de839dd80038feb9f2a622c24f524b", "2": "c1ee3b53-688e-4aa8-bbf0-84d49bc497a1"}}, "__type__": "1"}, "c0a73f07-da8c-4b0f-bbca-55f750aa48db": {"__data__": {"text": "# transfer\n\nTransfers a domain from the owner's address to another address. The signature of the owner is required. The expired domains cannot be transferred. \n\nAfter transfered, all subdomains and records are reserved, and the admin is re-set as null. \n\n\n\n### Parameters\n\n| Name   | Type    | Description                              | Required |\n| :----- | ------- | ---------------------------------------- | -------- |\n| to     | Address | The target address to transfer to        | Required |\n| domain | String  | The domain to be transferred             | Required |\n| data   | objec   | The data information used after transfer | Required |\n\n### Example\n\nRequest body\n\n```json5\ncurl --request POST \\\n  --url http://seed1t4.neo.org:20332/ \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [ \"0x152fa9ceeb2c83f40e3d3d6da6c1f8898dd4891a\", \"transfer\",\n                         [ {\"type\":\"Hash160\",\"value\":\"0x713c5666c9710bf6933572cf134a2a8f518f1a30\"},\n                             {\n                                 \"type\":\"String\",\"value\":\"t1.neo\"\n                             },\n                            {\"type\":\"String\",\"value\":\"test\"}\n                         ],\n    [\n      {\n        \"account\": \"NQJKSNdTgNX3wno9QPYpwNhfUTg4DnEs6P\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ]\n],\n  \"id\": 1\n}\n'\n```\n\nResponse body\n\n```json5\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAR0ZXN0DAZ0MS5uZW8MFDAaj1GPKkoTz3I1k/YLcclmVjxxE8AfDAh0cmFuc2ZlcgwUGonUjYn4waZtPT0O9IMs686pLxVBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"1075683\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": true\n            }\n        ]\n    }\n}\n```\n", "doc_id": "c0a73f07-da8c-4b0f-bbca-55f750aa48db", "embedding": null, "doc_hash": "1f086b70caa2311d2b59c0935b2b95231bde1f4516115773edc88b5af2224225", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/transfer"}, "node_info": {"start": 0, "end": 1809, "_node_type": "1"}, "relationships": {"1": "c14ec2146b768a8e7bb8feaf09f791f29152dda9"}}, "__type__": "1"}, "7542d531-39d6-4ea8-929e-63ff4be85249": {"__data__": {"text": "---\nsidebar_label: 'NeoNS'\nsidebar_position: 1\n---\n\n# Welcome to NeoNS Documentation\n\n### What is NeoNS\n\nThe Neo Name Service (NeoNS) is a distributed open naming system based on Neo blockchain. The main goal of NeoNS is to map names like \"alice.neo\" to other source identifiers such as N3 addresses, NeoFS shared link, IPV4 addresses, IPV6 addresses, and other metadata. \n\nNNS also has dot-separated hierarchical names called domains. The owner of a domain has full control of all its subdomains. \n\nTop-level domains, like `.neo`, are owned by the Neo Committee. Users can only register domains with the registered top-level domains, such as `alice.neo` instead of `alice.eth` if the top-level domain `.eth` is not registered yet. Once the domain `alice.neo` registered users can register any subdomains ended with it, for example, `hello.alice.neo`, and configure it with records.\n\n### Quick Start\n\nNeoNS Mainnet Contract Hash:  `0x50ac1c37690cc2cfc594472833cf57505d5f46de`\n\nNeoNS Magnet testnet Hash:  `0xd4dbd72c8965b8f12c14d37ad57ddd91ee1d98cb`\n\nThe source code can be found at [https://github.com/neo-project/non-native-contracts/tree/master/src/NameService](https://github.com/neo-project/non-native-contracts/tree/master/src/NameService).\n", "doc_id": "7542d531-39d6-4ea8-929e-63ff4be85249", "embedding": null, "doc_hash": "87b76b3a59ff7e0c2a37507461e282e98144b429930061b7f7409eb39d4bb945", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/index"}, "node_info": {"start": 0, "end": 1247, "_node_type": "1"}, "relationships": {"1": "2edf88f2d0024be43b844b3fd3298846b2bf7317"}}, "__type__": "1"}, "da77cb73-3557-468e-8c0b-2b1d331a0df3": {"__data__": {"text": "# Deploying Smart Contracts\n\nWhen a smart contract is deployed on the blockchain, it can be used by other users or invoked by other contracts. This section describes how to deploy and invoke the smart contract in the Neo blockchain using Neo-CLI or Neo-GUI. The instructions in this section are generic and applicable to all contract types including NEP-17 assets. \n\n## What contracts need to be deployed?\n\nWhen a smart contract needs to store data or to be invoked by another smart contract  through syscall `System.Contract.Call` on the blockchain, it needs to be deployed. Contracts triggered only by the verification trigger, such as the lock contract and multi-signature contract, do not need to be deployed as they will not be invoked by other contracts. Contracts such as  `return 1+1`  do not need to be deployed as they do not require any input parameters.\n\nFrom the programming language perspective, only when a smart contract will be used as a class library, it needs to be deployed. For example: \n\n- When a smart contract has variable incoming parameters, it must serve as a storage. The caller or other smart contracts provide the parameters.\n- When a smart contract uses storage it must serve as a class library.\n- When a smart contract implements NEP-17 standard assets, the contract needs to be deployed on the blockchain.\n\n### How to deploy?\n\nSmart contracts are deployed by invoking APIs. Usually we use Neo-CLI or Neo-GUI to deploy smart contracts. \n\nDeploying and invoking smart contracts cost fees. For more information, refer to [Fees](../../reference/fees.md).\n\n## Before you start\nMake sure you have done the following:\n\n- Confirmed that your contract should be deployed. \n- Compiled a contract file (\\*.nef) and a descriptive file of contract (\\*.manifest.json).\n- Installed Neo-CLI or Neo-GUI and completed block synchronization. For more information, refer to  [Neo-CLI](../../node/cli/setup.md) and [Neo-GUI](../../node/gui/install.md)\n\n## Deploying contract with Neo-CLI\n\nIn Neo-CLI run the following command to deploy your contract:\n\n `deploy <nefFilePath> [manifestFile]`\n\n-  `<nefFilePath>` : mandatory. The contract file\n- `[manifestFile]` : optional. The descriptive file of contract\n\n### Example\n\n```\ndeploy NEP17.nef\n```\n\nor\n\n```\ndeploy NEP17.nef NEP17.manifest.json\n```\n\nAfter the command is executed, the program deploys the smart contract and pays the fee automatically.\n\n```\nneo> deploy NEP17.nef\nContract hash: 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26\nGas consumed: 10.0107577\nNetwork fee: 0.0345352\nTotal fee: 10.0452929 GAS\nRelay tx? (no|yes): yes\n\nSigned and relayed transaction with hash=0xe03aade81fb96c44e115a1cc9cfe984a9df4a283bd10aa0aefa7ebf3e296f757\n```\n\n### The contract scripthash\n\nWhen a contract has been deployed a scripthash is generated as a unified identifier of the contract. The contract scripthash can be converted into the standard 20-byte address for receiving assets from transfer transactions. In that case the contract scripthash is used in big endian format. For example:\n\n- Contract ScriptHash (big endian): 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26 \n\n- Corresponding address: NPRCE9me1CdXBA6StQ7kff52p61rHQqnS7\n\n### Common", "doc_id": "da77cb73-3557-468e-8c0b-2b1d331a0df3", "embedding": null, "doc_hash": "5c23a41956ca31a529b3b6aff751f5f2b6bb3d675802a486a7533fd867d8219f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/deploy"}, "node_info": {"start": 0, "end": 3194, "_node_type": "1"}, "relationships": {"1": "12fbcca8bee0c06e3445ee65e8529f3108cecb19", "3": "878aa855-6663-4607-9d93-98f76a1b1735"}}, "__type__": "1"}, "878aa855-6663-4607-9d93-98f76a1b1735": {"__data__": {"text": "Common errors\n\n`Engine faulted`\n\n- Contract already exists\n- .nef  is not matched with .manifest\n- either .nef or .manifest is wrong\n- Insufficient fee\n\n## Deploying contracts with Neo-GUI\n\n1. In Neo-GUI click `Contract` -> `Deploy Contract`\u3002\n2. Select the desired *.nef and *.manifest.json files.\n3. Click `Deploy`.\n\n", "doc_id": "878aa855-6663-4607-9d93-98f76a1b1735", "embedding": null, "doc_hash": "b88ba5e83c7aabebbd57cc283e2a9ead1823ab1e8f1f6d898c1c1d5cbe1313f1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/deploy"}, "node_info": {"start": 3188, "end": 3506, "_node_type": "1"}, "relationships": {"1": "12fbcca8bee0c06e3445ee65e8529f3108cecb19", "2": "da77cb73-3557-468e-8c0b-2b1d331a0df3"}}, "__type__": "1"}, "dd97c9a9-85ee-4fd6-b953-e4cddc206d28": {"__data__": {"text": "# Invoking Smart Contracts\n\nAfter you deployed a smart contract on the blockchain, you can then invoke it by its script hash, which is the unique identity of a smart contract. Any script changes in the contract will result in a different script hash.\n\n## Querying the contract details\n\nYou can query a contract details using Neo-CLI or Neo-GUI, such as the contract general information, methods, notifications, etc. \n\n### Querying using Neo-CLI\n\nUse the RPC API [getcontractstate method](../../reference/rpc/latest-version/api/getcontractstate.md) to query the contract information.\n\n### Querying using Neo-GUI\n\n1. In Neo-GUI click `Contract` ->`Search Contract`\n2. Enter the contract script hash, click  `Search`.\n\nThe detailed contract information is displayed in Neo-GUI. You can also view the manifest and nef files.\n\n## Invoking a contract\n\n### Invoking a contract using Neo-CLI\n\nYou can choose one of the following ways to invoke the contract using Neo-CLI:\n\n- Use the command invoke, which syntax is:\n\n   ```\n   invoke <scriptHash> <operation> [contractParameters=null] [sender=null] [signerAccounts=null] [maxGas=20]\n   ```\n\n   For more information refer to [invoke](../../node/cli/cli.md#invoke).\n\n- Use the RPC API [invokefunction](../../reference/rpc/latest-version/api/invokefunction.md) or [invokescript](../../reference/rpc/latest-version/api/invokescript.md). The former is recommended. \n\n### Invoking a contract using Neo-GUI\n\n1. In Neo-GUI click `Contract `->`Invoke Contract`\u3002\n\n2. Enter the contract script hash and click `Search`.\n\n   The methods and parameter list in the current contract are displayed.\n\n3. Select the desired method, fill in the parameters and click `trial test`.\n\n   The trial run at this step does not affect the blockchain as it is just create a NeoVM on your local computer to simulate the invocation.\n\n4.  If the trial run goes smoothly and you want to invoke it on the blockchain, click `Invoke`.\n\n## Cosignature\n\nSome contracts require multiple signatures when invoked, one of which is the signature of the transaction initiator to support the fee, and the rest are cosignatures.\n\nWhen writing a contract, we usually use `Runtime.CheckWitness (owner)` to authenticate the caller  address, where `owner` is the address allowed to be invoked, and the parameter type is `ByteArray`. Invoking the contract with an unspecified address will fail. For example, when updating a contract, the owner here is the contract administrator. When transferring assets, the owner here is the sender (payer).\n\nWhen `Runtime.CheckWitness (owner)` is written in the contract, the owner's signature must be passed in as a cosignature when you invoke the contract. \n\nIn Neo-CLI, you can attach a signature using the invoke command.\n\n```\ninvoke <scriptHash> <operation> [contractParameters=null] [sender=null]  [signerAccounts=null] [maxGas=20]\n```\n\nWhen invoking a contract in Neo-GUI, you can click `Cosignature` at the bottom of the page, choose `Public key`, and then click `Sign` to add the signature.  \n\n:::note\n When you invoke the transfer method of the NEP-17 contract using the transfer command, the wallet will automatically appends the signature to the from field. You don't need to add it manually.\n:::\n\n## Invoking between contracts\n\nIn Neo N3, all contracts can be invoked dynamically, and writing a contract is much easier.\n\n```cs\npublic class Contract1 : SmartContract\n    {\n        delegate object Dyncall(string method, object[] args);\n\n        //Use ByteArray for little endian\n", "doc_id": "dd97c9a9-85ee-4fd6-b953-e4cddc206d28", "embedding": null, "doc_hash": "5ee81df64cef5875d1eb91a6fd1a87da08535ebb7d6d24a994760608c2b0b670", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/invoke"}, "node_info": {"start": 0, "end": 3519, "_node_type": "1"}, "relationships": {"1": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c", "3": "52fe3848-693a-4586-a004-b829ffd0bf8f"}}, "__type__": "1"}, "52fe3848-693a-4586-a004-b829ffd0bf8f": {"__data__": {"text": "args);\n\n        //Use ByteArray for little endian\n        //[InitialValue(\"694425c17f1ebb7c65de3026c831eb4c49d6d7be\", ContractParameterType.ByteArray)]\n        //private static readonly UInt160 ScriptHash;\n\n        //Use Hash160 for big endian\n        [InitialValue(\"0xbed7d6494ceb31c82630de657cbb1e7fc1254469\", ContractParameterType.Hash160)]\n        public static UInt160 ScriptHash;\n\n        public static object Main(string operation, object[] args)\n        {\n            if (operation == \"name\")\n            {\n                return Contract.Call(ScriptHash, \"name\", CallFlags.ReadOnly, new object[0]);\n            }\n            if (operation == \"totalSupply\")\n            {\n                return Contract.Call(ScriptHash, \"totalSupply\", CallFlags.ReadOnly, new object[0]);\n            }\n            return true;\n        }\n    }\n```\n\nThe key statement is `Contract.Call(scriptHash, method, flags, params)`, where:\n\n- `scriptHash` is the script hash of the contract invoked. It is ByteArray type and little endian.\n- `method` is the method of the contract invoked, such as  `name`, `balanceOf`, or `transfer`. String type.\n- `flags` defines special behaviors allowed when invoking smart contracts. See [CallFlags Enumerator](https://docs.neo.org/docs/zh-cn/reference/scapi/framework/services/CallFlags.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E) for details.\n- `params` is the parameter list of the method of the invoked contract. Array type.\n\n### Invocation permission\n\nThree fields related to the contract invocation permission are defined in the contract manifest file, as shown in the following table. The wallet decides whether to give a security warning to the user based on the setting in the Groups and Trusts fields. Permissions and signature scopes determine whether contracts can be called by each other. For more information about signature scopes, refer to parameters description in [invokefunction method](../../reference/rpc/latest-version/api/invokefunction.md).\n\n| Fields        | Type                          | Description                                                  |\n| ------------- | ----------------------------- | ------------------------------------------------------------ |\n| `Groups`      | `ContractGroup[]`             | Defines a group of trusted contracts, consisting of a public key and a signature of contract hash. |\n| `Permissions` | `ContractPermission[]`        | This field is an array containing a permission object, which defines other contracts and methods that the contract wants to call. The contract can be ScriptHash, Group, or wildcard *. The method is the method name or wildcard *. Contracts or methods not declared in the manifest cannot be called by the contract. |\n| `Trusts`      | `WildcardContainer<UInt160>` | Defines other contracts trusted by the contract. The contract can be", "doc_id": "52fe3848-693a-4586-a004-b829ffd0bf8f", "embedding": null, "doc_hash": "362e3171a8e37f2e75ff1c70990a8fc41c1e4b75ada86408451108da838891b7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/invoke"}, "node_info": {"start": 3482, "end": 6325, "_node_type": "1"}, "relationships": {"1": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c", "2": "dd97c9a9-85ee-4fd6-b953-e4cddc206d28", "3": "f5d1ae8b-42bf-44b2-8817-83e27260846e"}}, "__type__": "1"}, "f5d1ae8b-42bf-44b2-8817-83e27260846e": {"__data__": {"text": "| Defines other contracts trusted by the contract. The contract can be ScriptHash, Group, or wildcard *. If a contract is trusted, the user will not receive any warning message when the contract is called. |\n\nAssuming that the contract A calls the contract B, the following table details the invoking behavior and wallet behavior of the contract in various setting scenarios.\n\n| Scenario                                                     | Wallet Prompt                                                | Wallet sets signature scope to...                            | Can contract B  be invoked? |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | --------------------------- |\n| Permissions of contract A do not include contract B          | None                                                         | Default                                                      | No                          |\n| Permissions of contract A include contract B<br/>Contract A and contract B are in the same groups and the groups signature is verified. | None                                                         | Default and adds CustomGroups                                | Yes                         |\n| Permissions of contract A  include contract B<br/>Trusts of contract B include contract A | None                                                         | Default and adds CustomContract                              | Yes                         |\n| Permissions of contract A  include contract B<br/>Trusts of contract B do not include contract A | Prompts that contract A will call contract B, and asks whether to authorize the signature to contract B. | Default and adds CustomContract        according to the user's decision | Determined by the user      |\n| Permissions of contract A include a Groups B                 | Prompts that contract A will call any contract in group B and asks whether to authorize the signature to group B. | Default and adds CustomGroups according to the user's decision | Determined by the user      |\n| The contract defined in the Permissions of contract A is wildcard * and the method is m<br/>{\"contract\":\"\\*\", \"method\": \"m\"} | Prompts that contract A will call the method m of any contract and asks whether to authorize the signature to contract B. | Default or Global according to the user's decision           | Determined by the user      |\n| The contract defined in the Permissions of contract A is wildcard * and the method is wildcard", "doc_id": "f5d1ae8b-42bf-44b2-8817-83e27260846e", "embedding": null, "doc_hash": "29a25da679b4c0895d5136fb75e9fbf81ba2e33d24154b5aa42433daeda2583b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/invoke"}, "node_info": {"start": 6305, "end": 8921, "_node_type": "1"}, "relationships": {"1": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c", "2": "52fe3848-693a-4586-a004-b829ffd0bf8f", "3": "19ababb6-d6dd-4bb1-adc7-ca1a897378d5"}}, "__type__": "1"}, "19ababb6-d6dd-4bb1-adc7-ca1a897378d5": {"__data__": {"text": "The contract defined in the Permissions of contract A is wildcard * and the method is wildcard \\*<br/>{\"contract\":\"\\*\", \"method\": \"\\*\"} | Prompts that contract A will call any method of any contract and asks whether to set the signature to Global. | Default or Global according to the user's decision           | Determined by the user      |\n\n", "doc_id": "19ababb6-d6dd-4bb1-adc7-ca1a897378d5", "embedding": null, "doc_hash": "8194612d58f52a18199528d26ff6dfa69c9a9867f0a6eba69a8b4beae7948015", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/invoke"}, "node_info": {"start": 8886, "end": 9230, "_node_type": "1"}, "relationships": {"1": "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c", "2": "f5d1ae8b-42bf-44b2-8817-83e27260846e"}}, "__type__": "1"}, "414fd629-f6ef-428b-b5f1-304ca9194a96": {"__data__": {"text": "# Development in Python/Java/Go\n\nNeo supports a variety of mainstream programming languages for development. In addition to C#,  the Neo ecosystem currently also has a well-established infrastructure for Python, Java and Go development, with a wide range of compilers available to developers.\n\n- For development in Python, go to https://www.coz.io/neopython-suite\n- For development in Java, go to https://neow3j.io/\n- For development in Go, go to https://github.com/nspcc-dev/neo-go-sc-wrkshp\n\n\n\n", "doc_id": "414fd629-f6ef-428b-b5f1-304ca9194a96", "embedding": null, "doc_hash": "e8740ad1cd8be920eac1856c34db65e2147d7bb09d538d313f2433196fe2d0b5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/language"}, "node_info": {"start": 0, "end": 496, "_node_type": "1"}, "relationships": {"1": "cfaf5de88d573d775dda261f5c5441484302d961"}}, "__type__": "1"}, "34ca6ffd-38a2-42cd-9235-c968803f93ab": {"__data__": {"text": "# Build a private chain on local host\n\nIn this document we will introduce a simple way to build a private chain on a windows system computer.\n\n## Installing Neo node\n\nInstall Neo-CLI and make four copies of the node folder with the name of c1, c2, c3, and c4, successively.\n\nFor more information refer to [Installation of Neo-CLI](../../../node/cli/setup.md). \n\n## Creating wallet files\n\nFrom Neo-CLI or Neo-GUI create four wallets, 1.json, 2.json, 3.json, and 4.json, and place each in the folder of four nodes. \n\n## Modifying config.json\n\nMake the following configurations in config.json of each node:\n\n- Specify the ports so that each port is not duplicated and is not occupied by other applications.\n- In \"UnlockWallet\" specify the wallet path and wallet password.\n- Set `StartConsensus` and `IsActive` as `true`.\n- The private chain ID, which can be any integer in the range of [0 - 4294967295].\n- `StandbyCommittee` is the public keys of committee members. The top 4 nodes with the most votes will become consensus nodes. Here enter the public keys of four wallets.\n- In the `SeedList` field, set the IP address to localhost and the port to four wallet ports.\n\n\nYou can refer to the following example\uff1a\n\n**c1/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 21333,\n      \"WsPort\": 21334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"1.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 7,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n      \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n**c2/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n    ", "doc_id": "34ca6ffd-38a2-42cd-9235-c968803f93ab", "embedding": null, "doc_hash": "413a6ba65e0ef3f41c811973f754f63349aa0c7c4c6c0b0309d1eda74994079f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/private-chain2"}, "node_info": {"start": 0, "end": 2467, "_node_type": "1"}, "relationships": {"1": "9ec2f719665f805d8a851c5b0562239b6adeb373", "3": "6ef21938-62fa-4086-944b-ffc277641e9d"}}, "__type__": "1"}, "6ef21938-62fa-4086-944b-ffc277641e9d": {"__data__": {"text": "     \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 22333,\n      \"WsPort\": 22334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"2.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 7,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n      \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n**node3/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 23333,\n      \"WsPort\": 23334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"3.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 7,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n     ", "doc_id": "6ef21938-62fa-4086-944b-ffc277641e9d", "embedding": null, "doc_hash": "f41a14f1a837cb3bded9ab0fe13b610cdca9acf1f1da435616c292f8e5248d0f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/private-chain2"}, "node_info": {"start": 2446, "end": 4311, "_node_type": "1"}, "relationships": {"1": "9ec2f719665f805d8a851c5b0562239b6adeb373", "2": "34ca6ffd-38a2-42cd-9235-c968803f93ab", "3": "0e8a58d6-6b71-45b6-95b9-997890f2b6ab"}}, "__type__": "1"}, "0e8a58d6-6b71-45b6-95b9-997890f2b6ab": {"__data__": {"text": "     \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n**node4/config.json**\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 24333,\n      \"WsPort\": 24334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"4.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5943216,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 7,\n    \"StandbyCommittee\": [\n      \"03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625\",\n      \"02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7\",\n      \"02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec\",\n      \"03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\"\n    ],\n    \"SeedList\": [\n      \"localhost:21333\",\n      \"localhost:22333\",\n      \"localhost:23333\",\n      \"localhost:24333\"\n    ]\n  }\n}\n```\n\n:::note\n If the plugin RpcServer is installed, you also need to modify the port numbers in the plugin config.json file to make them different from each other and from the ports in config.json of the node.\n:::\n\n## Installing consensus plugin\n\nDownload [DBFTPlugin](\"https://github.com/neo-project/neo-modules/releases/download/v3.1.0/DBFTPlugin.zip\") and place four copies to the `Plugins` folder under each node CLI root path. Modify the file `config.json` as follows\uff1a\n\n- Set `Network` the same value as `Network` in `config.json`.\n- Set `AutoStart` to `true` so as to automatically start consensus as running CLI.\n\nRefer to the following example:\n\n**Plugins/DBFTPlugin/config.json**\n\n```json\n{\n  \"PluginConfiguration\": {\n    \"RecoveryLogs\": \"ConsensusState\",\n ", "doc_id": "0e8a58d6-6b71-45b6-95b9-997890f2b6ab", "embedding": null, "doc_hash": "9a91711e04af6bcc1e223df2f487d84b3302549b96a58de2d524010354578f6a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/private-chain2"}, "node_info": {"start": 4334, "end": 6514, "_node_type": "1"}, "relationships": {"1": "9ec2f719665f805d8a851c5b0562239b6adeb373", "2": "6ef21938-62fa-4086-944b-ffc277641e9d", "3": "7d73f044-9daf-463c-85e8-0965bff6c909"}}, "__type__": "1"}, "7d73f044-9daf-463c-85e8-0965bff6c909": {"__data__": {"text": "{\n    \"RecoveryLogs\": \"ConsensusState\",\n    \"IgnoreRecoveryLogs\": false,\n    \"AutoStart\": true,\n    \"Network\": 5943216,\n    \"MaxBlockSize\": 262144,\n    \"MaxBlockSystemFee\": 900000000000\n  }\n}\n```\n\n## Creating a shortcut to start\n\nCreate a notepad file for ease of starting the private chain. In the file, enter the following:\n\n```\nstart cmd /k \"cd c1 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\nstart cmd /k \"cd c2 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\nstart cmd /k \"cd c3 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\nstart cmd /k \"cd c4 &&ping localhost -n 3 > nul&& dotnet neo-cli.dll\"\n```\n\nRename it as Run.cmd, and then place four copies under the same level directories outside each node directory.\n\nAt this point the private chain has been set up. All the files  we modified are as follows:\n\n```\n\u251c\u2500Run.cmd\n|\n\u251c\u2500c1\n\u2502      1.json\n\u2502      config.json\n\u2502\n\u251c\u2500c2\n\u2502      2.json\n\u2502      config.json\n\u2502\n\u251c\u2500c3\n\u2502      3.json\n\u2502      config.json\n\u2502\n\u2514\u2500c4\n|      4.json\n|      config.json\n```\n\n## Starting the private chain\n\nEnter each node directory and double-click `Run.cmd`. When the screen shows consensus information and block height is increasing as shown below, the private chain is set up successfully.\n\n![](../../assets/privatechain_demo.png)\n\nThe private chain is terminated if you close all the windows. \n\n## Withdrawing NEO and GAS\n\nIn the genesis block of the NEO network, 100 million NEO and 30 million GAS are generated. When the private chain is set up, you can withdraw those NEO and GAS from a multi-party address with Neo-CLI for internal development and testing.\n\n### Using Neo-CLI to withdraw\n\n#### Creating multi-party signature addresses\n\n1. Start your private chain.\n\n2. For ease of operation, copy one of consensus nodes directory as an external node. Then put four consensus wallet copies into the external node root directory and disable or remove DBFTPlugin.\n\n3. Create an admin wallet and then create a multi-signature address using the command `import multisigaddress m pubkeys`:\n\n   - `m`: the minimal number of signatures needed to complete the transaction. \n   - `pubkeys`: the public keys in StandbyCommittee in all consensus node wallets.\n\n   For example:\n\n   ```\n   import multisigaddress 3 03bf333ec238acd25f22d533748426a72f6c266bd2681000ac2bf3061fc79c6625 02c2a4c3598467125522ff25995bce99c8bc898c3dc23381642586d0f172957ba7 02577e88f8b1b9b5bfb355c76ac258f1fdf9f51e5312c542dff507e967cc7078ec 03a40348cd681c79ff2f88ea632fa89945cffa70dd960edd8f897e4f41cb20896c\n   ```\n\n4. Open the wallet `1.json`, `2.json`, `3.json` respectively and repeat the last step to create the multi-signature address.\n\n5. Enter the command `list asset` and you can see 100 million NEO and 30 million GAS displayed.\n\n  ", "doc_id": "7d73f044-9daf-463c-85e8-0965bff6c909", "embedding": null, "doc_hash": "7a10846085a18e2e18ef56dc90382f61cd8d79540d08da12a8fd983814052baa", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/private-chain2"}, "node_info": {"start": 6480, "end": 9215, "_node_type": "1"}, "relationships": {"1": "9ec2f719665f805d8a851c5b0562239b6adeb373", "2": "0e8a58d6-6b71-45b6-95b9-997890f2b6ab", "3": "1c0c6c42-864a-4570-82f7-a03288840d9d"}}, "__type__": "1"}, "1c0c6c42-864a-4570-82f7-a03288840d9d": {"__data__": {"text": "and you can see 100 million NEO and 30 million GAS displayed.\n\n   ![](../assets/initial-balance.png)\n\n:::note\n You must create multi-party signature address in at least three wallets so as to sign the transfer transaction successfully.\n:::\n\n#### Transferring NEO to a normal address\n\nHere we want to send NEO from the contract address to the normal address.\n\n1. Open the wallet 1.json and transfer NEO to the admin wallet using the command `send <id|alias> <address> <value>` \n\n2. Copy the SignatureContext and close the wallet.\n\n   ![image](../assets/private_multi_tx1.png)\n\n3. Open another wallet (2.json) listed on the multi-signature\n\n4. Use the command `sign <jsonObjectToSign>` with the object copied in step 2\n\n5. Copy the object in Signed Output.\n\n   ![image](../assets/private_multi_tx2.png)\n\n6. Repeat the previous steps in the third wallet 3.json. Then you can use `relay <jsonObjectToSign>` and your wallet is ready.\n\n   ![image](../assets/private_multi_tx3.png)\n\n7. Use `list asset` to check the wallet balance:\n\n   ![image](../assets/balance.png)\n\nSimilarly, you can refer to the preceding steps to withdraw GAS from the multi-party signature address.", "doc_id": "1c0c6c42-864a-4570-82f7-a03288840d9d", "embedding": null, "doc_hash": "196744466ea506f05a8c9ce6bf9fd6bd070a0ef78b3a3c89d9caf207238be94d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/private-chain2"}, "node_info": {"start": 9185, "end": 10350, "_node_type": "1"}, "relationships": {"1": "9ec2f719665f805d8a851c5b0562239b6adeb373", "2": "7d73f044-9daf-463c-85e8-0965bff6c909"}}, "__type__": "1"}, "87045a79-9271-499e-b91d-5a1e6ba59bef": {"__data__": {"text": "# Build a private chain with one node\n\nNeo-CLI supports generating blocks without consensus nodes, which means you can set up a private chain with one node. To simplify the process, you can directly download the project [neo-express](https://github.com/neo-project/neo-express) to run the private chain quickly.  \n\nAlternatively, you can build a private chain with one node from scratch, which will be elaborated in the following sections.\n\n## Prerequisites\n\n1. Refer to [Installation of NEO-CLI](../../../node/cli/setup.md) to install Neo-CLI. (Make sure you install the [DBFTPlugin](https://github.com/neo-project/neo-modules/releases/download/v3.1.0/DBFTPlugin.zip)\n2. Run Neo-CLI and enter the command `create wallet <path>` to create a wallet, e.g. `create wallet consensus.json`\n\n3. Specify the wallet password and confirm.\n4. Record the wallet pubkey. This will be used in later steps.\n\n## Modifying the node configuration files\n\n### Modifying config.json\n\nIn config.json under the Neo-cli directory, make the following configurations:\n\n- In `UnlockWallet` specify the wallet path and wallet password.\n- Set `IsActive` as true.\n- Set `ConsoleOutput` and `Active` as true.\n- Set `ValidatorsCount` as 1.\n- In `StandbyCommittee`, enter the public key of the `consensus.json` wallet (Only one public key in `StandbyCommittee` represents the solo mode).\n\nHere is an example\uff1a\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": true,\n      \"Active\": true\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 21333,\n      \"WsPort\": 21334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"consensus.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 5309138,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"ValidatorsCount\": 1,\n    \"StandbyCommittee\": [\n      \"02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\"\n    ],\n    \"SeedList\": []\n  }\n}\n```\n\nIn the config.json under the `Plugins\\DBFTPlugin` directory make the following change:\n\n- Set `AutoStart` as true, and set `Network` same as the `Network` in config.json under the Neo-cli directory.\n\nHere is an example:\n\n```json\n{\n  \"PluginConfiguration\": {\n    \"RecoveryLogs\": \"ConsensusState\",\n    \"IgnoreRecoveryLogs\": false,\n    \"AutoStart\": true,\n    \"Network\": 5309138,\n    \"MaxBlockSize\": 262144,\n    \"MaxBlockSystemFee\": 900000000000\n  }\n}\n```\n\n## Starting the private chain\n\n:::note\n If the node has downloaded Neo test net block files, you need to delete the Data folder before running Neo-CLI, otherwise", "doc_id": "87045a79-9271-499e-b91d-5a1e6ba59bef", "embedding": null, "doc_hash": "47b48c7178d985da6ec845b35300a01c1541d0012a5085e5f70f2ac2204cc253", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/solo"}, "node_info": {"start": 0, "end": 2773, "_node_type": "1"}, "relationships": {"1": "40d0380af07aa18321fc672ba753e4e7ff312e02", "3": "4cdd373e-b356-48bf-967b-e9c0e1ce59f1"}}, "__type__": "1"}, "4cdd373e-b356-48bf-967b-e9c0e1ce59f1": {"__data__": {"text": "block files, you need to delete the Data folder before running Neo-CLI, otherwise the private chain will not be able to properly generate blocks.\n:::\n\nTo start the private chain, enter the neo-cli directory and run neo-cli.exe, or run the command line and enter  `dotnet neo-cli.dll`. The private chain is set up successfully when it goes as shown below:\n\n![](../assets/solo.png)\n\nThe private chain is terminated if you close the window.\n\n## Withdrawing NEO and GAS\n\n### Using Neo-CLI to withdraw\n\nIn the genesis block of the Neo network, 100 million NEO and 30 million GAS are generated. When the private chain is set up, you can withdraw those NEO and GAS from a multi-party address with Neo-CLI, to facilitate your blockchain development and testing.\n\n1. Copy another Neo-CLI directory as an external node.\n\n2. Add the consensus node tcp address (localhost:21333) to the `seedlist` field in the external node config.json.\n\n3. Modify the port in the external node config.json to avoid conflicting with other consensus node ports:\n\n   ```json\n   {\n     \"ApplicationConfiguration\": {\n       \"Logger\": {\n         \"Path\": \"Logs\",\n         \"ConsoleOutput\": false,\n         \"Active\": false\n       },\n       \"Storage\": {\n         \"Engine\": \"LevelDBStore\",\n         \"Path\": \"Data_LevelDB_{0}\"\n       },\n       \"P2P\": {\n         \"Port\": 23333,\n         \"WsPort\": 23334\n       },\n       \"UnlockWallet\": {\n         \"Path\": \"\",\n         \"Password\": \"\",\n         \"IsActive\": false\n       },\n       \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n     },\n     \"ProtocolConfiguration\": {\n       \"Network\": 5309138,\n       \"MillisecondsPerBlock\": 15000,\n       \"MaxTraceableBlocks\": 2102400,\n       \"ValidatorsCount\": 1,\n       \"StandbyCommittee\": [\n         \"02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\"\n       ],\n       \"SeedList\": [\n       \"localhost:21333\"\n       ]\n     }\n   }\n   ```\n   \n4. Start the private chain and the external node\n\n5. From the external node command line, open the wallet consensus.json and enter `import multisigaddress m pubkeys` to create a multi-part signed address, where:\n\n   `m` is 1 as the minimal signature number and `pubkeys` is the public key of `consensus.json`\n   \n\n   ```\n   import multisigaddress 1 02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\n   ```\n   \n6. Enter `list asset`\uff0cthen you should see 100 million NEO and 30 million GAS displayed.\n\n7. Create a new wallet using the command `create wallet ` and copy the wallet address.\n\n8. Open the wallet", "doc_id": "4cdd373e-b356-48bf-967b-e9c0e1ce59f1", "embedding": null, "doc_hash": "4c96e23eb2779a2e24721d64cf6b19e87831d529debd6a2ec8b6dd330a25d160", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/solo"}, "node_info": {"start": 2705, "end": 5270, "_node_type": "1"}, "relationships": {"1": "40d0380af07aa18321fc672ba753e4e7ff312e02", "2": "87045a79-9271-499e-b91d-5a1e6ba59bef", "3": "21e28e57-b442-453f-9eae-a355af486736"}}, "__type__": "1"}, "21e28e57-b442-453f-9eae-a355af486736": {"__data__": {"text": "using the command `create wallet ` and copy the wallet address.\n\n8. Open the wallet `consensus.json` again and transfer NEO and GAS to the new created wallet with the `send` command. For example, `send neo NWu2gb7PzhZb4ci9LvW4gBYAQFMGb1s1o7 100000000`, `send gas NWu2gb7PzhZb4ci9LvW4gBYAQFMGb1s1o7 10000000`.\n\n:::note\nThe wallet that sends tokens should have enough GAS as a few fee (usually no more than 0.02 GAS) will be charged at the time of transfer.\n:::\n\n   For more Neo-CLI commands refer to [CLI command reference](../../../node/cli/cli.md).\n\n", "doc_id": "21e28e57-b442-453f-9eae-a355af486736", "embedding": null, "doc_hash": "59ce970a21b0181032a0a6022d7bf9b98d9f0af8daf0bcf1327d6f1a662a64c9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/solo"}, "node_info": {"start": 5256, "end": 5807, "_node_type": "1"}, "relationships": {"1": "40d0380af07aa18321fc672ba753e4e7ff312e02", "2": "4cdd373e-b356-48bf-967b-e9c0e1ce59f1"}}, "__type__": "1"}, "d65a684a-9113-4413-9842-f04f934cd1b9": {"__data__": {"text": "# Main Net and Test Net\n\nThe Neo node runs on the main net by default. The Main net is a block chain network that has been officially launched and operates independently.  \n\nNeo also provides the Test net where developers can develop, debug, and test their programs. Testing programs on the testnet incurs the network fee of test GAS (not real GAS). Test net NEO and GAS can be applied free of charge on the official website (see detailed instructions below).\n\nAll the block data of the test net are independent of the main net. If you want to develop some simple smart contracts or try to register assets, test net is sufficient. After the testing is complete, the development can be moved into the Neo mainnet.\n\n## Test net features\n\n- Asset registration, asset distribution, contract execution, etc. (Does not consume real money)\n- Globalized network that is deployed on Internet.\n- Blocks, transactions, and other information in the test net can be easily viewed in the blockchain browser.\n- Smart contracts deployed in the test net can be invoked by anyone in the world.\n- Test net can not be used as a real environment for commercial applications.\n\n## Connecting to test net\n\nFor Neo-GUI, go to any page and click **Settings** in the lower left corner. Then check **Testnet** in the popped-up page.\n\nFor Neo-CLI, replace the `config.json` file with the content of `config.testnet.json` under CLI directory.\n\n![image](../../assets/testnet_2_v2.png)\n\n## Applying for Test GAS and Test NEO\n\nIf you are a developer, you can ask for Neo and GAS on the TestNet. You will need a certain amount of test GAS to deploy or invoke a contract in the TestNet.  \n\n### Obtaining test coin automatically\n\nYou can request up to 500 GAS per day via [NGD faucet](https://neowish.ngd.network/neo3/). \n\n### Applying for test coin from Neo website\n\nIf you need more than that, you'll have to request it from Neo website manually.\n\n#### Step 1 - Look up your public key\nIn Neo the address and PUBLIC key are different. \n\nThe PUBLIC KEY is shown when you view the PRIVATE KEY. (Never share your PRIVATE key.)  \n\n#### Step 2 - Fill in the request\nComplete the form here: https://neo.org/testcoin/apply. Note that you need to change `Neo Version` to Neo N3.\n\nAfter a day or so you will be sent an email containing a \"Multi-party signed address\" and the PUBLIC key of the sender. See [Signature](../../node/gui/advanced.md).\n\n#### Step 3 - Create a multi-party signed address\nTo access the assets, in your Neo-gui you will create a \"Multi-party signed address\" in your wallet using \n\n- The \"Multi-party signed address\" (from the email) \n- The PUBLIC KEY of the sender (from the email)\n- Your PUBLIC KEY (from STEP 1 above) \n\n1. From Neo-CLI command line, enter the command  `import multisigaddress m pubkeys` to create a multi-party signed address, where:\n\n   `m` is 1 as the minimal signature number and `pubkeys` are the public key used for signing (PUB Key of sender and your PUB key) \n\n2. Enter `list asset`\uff0cthen you should see the quantity of Neo and/or GAS shown\n\n3. Enter `send gas <address> <amount>` to send a certain amount of GAS to the desired account address.\n\n## Alternatives to the TestNet\n\nTesting your Smart Contract on the TestNet is a good idea before publishing it on the live network but earlier in your development cycle you should consider using other methods to test your Smart Contacts such as running you own private chain, for more information, refer to [Setting up private chain](private-chain/solo.md).", "doc_id": "d65a684a-9113-4413-9842-f04f934cd1b9", "embedding": null, "doc_hash": "f5e2dfea3ae7e33b5905ccb8f73207c66ba3c4ba74b67ea236cd0a5e427bad86", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/testnet"}, "node_info": {"start": 0, "end": 3509, "_node_type": "1"}, "relationships": {"1": "7559b131bf41790c8f93ec1f26268d3e7db187a5"}}, "__type__": "1"}, "4e592c6e-c866-4d1f-9dc9-f7d65efbb6c4": {"__data__": {"text": "# Deploying and Invoking Contracts\n\nIn Neo N3 most of the functions are provided by contracts. ScriptHash is the unique identifier of the contract, and it is usually a necessary parameter for invoking contracts.\n\nThis document introduces the following SDK features:\n\n- The construction method of contract deployment transaction\n- Invoking methods in the contract under read-only mode\n- `Nep17API` class that encapsulates the methods for invoking NEP17 contracts\n\n## Contract deployment\n\n`ContractClient` provides the method, `CreateDeployContractTxAsync`, to construct deployment transactions of the contract. The parameters are contract scripts, manifests, and account key pairs for payment of system and network fees, where contract scripts and manifests are available from the compilation. There must be sufficient GAS in the sender account.\n\nRead the nef and manifest.json files of the contract:\n\n```cs\n// read nefFile & manifestFile\nNefFile nefFile;\nusing (var stream = new BinaryReader(File.OpenRead(nefFilePath), Encoding.UTF8, false))\n{\n    nefFile = stream.ReadSerializable<NefFile>();\n}\n\nContractManifest manifest = ContractManifest.Parse(File.ReadAllBytes(manifestFilePath));\n```\n\nConstruct a contract deployment transaction:\n\n```cs\n// create the deploy contract transaction\nTransaction transaction = await contractClient.CreateDeployContractTxAsync(nefFile.ToArray(), manifest, senderKeyPair);\n```\n\nAfter the transaction is constructed, you need to broadcast it on the blockchain:\n\n```cs\n// Broadcast the transaction over the Neo network\nawait client.SendRawTransactionAsync(transaction);\nConsole.WriteLine($\"Transaction {transaction.Hash.ToString()} is broadcasted!\");\n```\n\nAfter the transaction is added to the blockchain you can get the transaction execution status to check if the contract is deployed successfully:\n\n```cs\n// print a message after the transaction is on chain\nWalletAPI neoAPI = new WalletAPI(client);\nawait neoAPI.WaitTransactionAsync(transaction)\n    .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n```\n\nHere is the complete code:\n\n```cs\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Manifest;\nusing Neo.Wallets;\nusing System;\nusing Neo.IO;\nusing System.IO;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Test().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task Test()\n        {\n            // choose a neo node with rpc opened, here we use the localhost\n            RpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n            ContractClient contractClient = new ContractClient(client);\n\n            string nefFilePath = \"sc/Contract1.nef\";\n            string manifestFilePath = \"sc/Contract1.manifest.json\";\n\n            // read nefFile & manifestFile\n            NefFile nefFile;\n            using (var stream = new", "doc_id": "4e592c6e-c866-4d1f-9dc9-f7d65efbb6c4", "embedding": null, "doc_hash": "f0cb06f2c986c134a8a4446d8ddc1a50b7fcfe5791a62a1df72218b71509b714", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/contract"}, "node_info": {"start": 0, "end": 3041, "_node_type": "1"}, "relationships": {"1": "a6fc55168b362386a1393977a8fe31b513578467", "3": "3ade914e-a729-40f0-aa73-0ddad1fefd6b"}}, "__type__": "1"}, "3ade914e-a729-40f0-aa73-0ddad1fefd6b": {"__data__": {"text": "           using (var stream = new BinaryReader(File.OpenRead(nefFilePath), Encoding.UTF8, false))\n            {\n                nefFile = stream.ReadSerializable<NefFile>();\n            }\n\n            ContractManifest manifest = ContractManifest.Parse(File.ReadAllBytes(manifestFilePath));\n\n            // deploying contract needs sender to pay the system fee\n            KeyPair senderKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n\n            // create the deploy transaction\n            Transaction transaction = await contractClient.CreateDeployContractTxAsync(nefFile.ToArray(), manifest, senderKey).ConfigureAwait(false);\n\n            // Broadcast the transaction over the NEO network\n            await client.SendRawTransactionAsync(transaction).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {transaction.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(transaction)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n## Contract invocation simulation\n\n`ContractClient` provides the method `TestInvokeAsync` to simulate the contract invocation, which does not affect the data on the chain after execution. You can directly invoke the contract method that reads the data. For example, the following example invokes the name method in the NEO native contract.\n\n```cs\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\nContractClient contractClient = new ContractClient(client);\n\n// get the contract hash\nUInt160 scriptHash = NativeContract.NEO.Hash;\n\n// test invoking the method provided by the contract \nRpcInvokeResult invokeResult = await contractClient.TestInvokeAsync(scriptHash, \"name\").ConfigureAwait(false);\nConsole.WriteLine($\"The name is {invokeResult.Stack.Single().GetString()}\");\n```\n\nOr you can use `MakeScript` to construct the script you want to execute and then invoke the method `InvokeScriptAsync` in `RpcClient`to get the execution result.\n\n```cs\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n\n// get the contract hash\nUInt160 scriptHash = NativeContract.NEO.Hash;\n\nbyte[] script = scriptHash.MakeScript(\"name\");\n// call invoke script\nRpcInvokeResult invokeResult = await client.InvokeScriptAsync(script).ConfigureAwait(false);\nConsole.WriteLine($\"The name is {invokeResult.Stack.Single().GetString()}\");\n```\n\n## Contract invocation (on-chain transactions)\n\nGenerally invoking a deployed contract on the blockchain contains the following steps:\n\n1. Construct the script to invoke\n\n    Take the `transfer` method of native contract Neo as an example:\n\n    ```cs\n    // construct the script, in this", "doc_id": "3ade914e-a729-40f0-aa73-0ddad1fefd6b", "embedding": null, "doc_hash": "c89aecbfbfcbb8e686c1b234f3f43b1179f17f95ded066f9ca65ce19855dc216", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/contract"}, "node_info": {"start": 3023, "end": 5936, "_node_type": "1"}, "relationships": {"1": "a6fc55168b362386a1393977a8fe31b513578467", "2": "4e592c6e-c866-4d1f-9dc9-f7d65efbb6c4", "3": "a011212e-2cd3-4a28-8297-6f5ed2958ad1"}}, "__type__": "1"}, "a011212e-2cd3-4a28-8297-6f5ed2958ad1": {"__data__": {"text": "example:\n\n    ```cs\n    // construct the script, in this example, we will transfer 1024 NEO to receiver\n    UInt160 scriptHash = NativeContract.NEO.Hash;\n    byte[] script = scriptHash.MakeScript(\"transfer\", sender, receiver, 1024);\n    ```\n\n2. Construct the transaction\uff1a\n\n    ```cs\n    // initialize the TransactionManagerFactory with rpc client and magic\n    // fill the script and cosigners\n    TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n        .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n    // add signature and sign transaction with the added signature\n    Transaction tx = await txManager.AddSignature(sendKey).SignAsync().ConfigureAwait(false);\n    ```\n    \n3. Broadcast the transaction on the blockchain:\n\n    ```cs\n    // broadcasts the transaction over the Neo network\n    await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n    ```\n\n4. Wait until the transaction is added to the blockchain and then get the transaction execution status to make sure the contract is invoked successfully:\n\n    ```cs\n    // print a message after the transaction is on chain\n    WalletAPI neoAPI = new WalletAPI(client);\n    await neoAPI.WaitTransactionAsync(tx)\n        .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n    ```\n\nFor complete code refer to [Transaction Construction](transaction.md).\n\n## NEP-17 Contracts\n\n`Nep17API` encapsulates the method that generates transfer transactions. The above transaction process can be simplified to:\n\n```cs\nNep17API nep17API = new Nep17API(client);\nTransaction tx = await nep17API.CreateTransferTxAsync(scriptHash, sendKey, receiver, 1).ConfigureAwait(false);\n```\n\nAdditionally, `Nep17API` also provides a set of simple methods to get data:\n\n```cs\n// get nep17 name\nstring name = await nep17API.NameAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get nep17 symbol\nstring symbol = await nep17API.SymbolAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get nep17 token decimals\nbyte decimals = await nep17API.DecimalsAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get nep17 token total supply\nBigInteger totalSupply = await nep17API.TotalSupplyAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n\n// get the balance of nep17 token\nUInt160 account = Utility.GetScriptHash(\"NXjtqYERuvSWGawjVux8UerNejvwdYg7eE\");\nBigInteger balance = await nep17API.BalanceOfAsync(NativeContract.NEO.Hash, account).ConfigureAwait(false);\n\n// get token information\nRpcNep17TokenInfo tokenInfo = await nep17API.GetTokenInfoAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n```\n\n", "doc_id": "a011212e-2cd3-4a28-8297-6f5ed2958ad1", "embedding": null, "doc_hash": "38391cc8c94ae4f956faa0df2cd09521d94c1bf5b575cf8b06eb0ea61d8bab5b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/contract"}, "node_info": {"start": 5899, "end": 8548, "_node_type": "1"}, "relationships": {"1": "a6fc55168b362386a1393977a8fe31b513578467", "2": "3ade914e-a729-40f0-aa73-0ddad1fefd6b"}}, "__type__": "1"}, "28f0ad28-f1a5-4630-a769-d384d3389224": {"__data__": {"text": "# About RpcClient\n\n`RpcClient` is a C# dependency library that can be used to develop various applications on Neo, such as wallet clients, games, etc. This project can help you easily invoke Neo RPC interfaces, construct transactions, and invoke contracts.\n\nThis document is applicable to Neo N3. It is recommended you use NEO SDK in conjunction with Visual Studio 2019.  \n\n## Main features\n\n- Built-in RPC invocation methods.\n\n- Transaction construction, serialization and deserialization\n\n- Script construction for smart contracts\n\n- Easy-to-use wallet functions: transfer, balance inquiry, and GAS Claim method\n\n## Adding reference\n\n1. In Visual Studio 2019, create a new .NET project\n\n:::note\nThe .NET version of the project cannot be earlier than the .NET version used by the Neo SDK.\n:::\n\n2. Right-click the project and select `Manage NuGet Packages`.\n\n3. Search for `Neo.Network.RPC.RpcClient` in the search box and install the plugin that appears.\n\n4. Add the following code to the desired project file header:\n\n   ```cs\n   using Neo.Network.RPC;\n   ```\n\n:::note\n If you use SDK to construct a transaction that requires a signature, you need to ensure that the RpcClient obeject and the network it is connected to are configured the same way, or the transaction constructed by the SDK will not be validated in the blockchain. To do so, load Neo-CLI config.json when constructing the RpcClient object, for example:\n:::\n>\n> RpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"))\n\n## Exception handing\n\n`RpcClient` mainly interacts with Neo nodes through RPC requests. When the message returned by the RPC request contains an Error the system throws an exception. The most common exception type is  `RpcException`, which includes:\n\n- -100, \"Unknown transaction/blockhash\"\n- -300, \"Insufficient funds\"\n- -301, \"The necessary fee is more than the Max_fee, this transaction is failed. Please increase your Max_fee value.\"\n- -400, \"Access denied\"\n- -500, Relay does not succeed, the detailed reasons contain \"AlreadyExists, OutOfMemory, UnableToVerify, Invalid, Expired, InsufficientFunds, PolicyFail, Unknown\"\n- -32600, \"Invalid Request\"\n- -32601, \"Method not found\"\n- -32602, \"Invalid params\"\n- -32700, \"Parse error\"\n\nAdditionally, you may encounter other exceptions built in the .NET platform, such as  `ArgumentNullException` and `FormatException` when the parameters passed in are null or incorrectly formatted. Therefore, reasonable exception capture and prompts are required when using the SDK.\n\n## Project repository\n\nThe `RpcClient` is a functional subset of the neo-modules project. For complete open source projects refer to:\n\nNeo-modules\uff1ahttps://github.com/neo-project/neo-modules\n\nWelcome to raise any problems you encountered in practice in the project issue list:\n\nhttps://github.com/neo-project/neo-modules/issues\n", "doc_id": "28f0ad28-f1a5-4630-a769-d384d3389224", "embedding": null, "doc_hash": "66a17f02793ec8289a1558fa2c62a69bcf2de172022cb4e7c056321a8bce723e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/introduction"}, "node_info": {"start": 0, "end": 2894, "_node_type": "1"}, "relationships": {"1": "a38d68a556bb0d42da12c28f7ffeefca895a651b"}}, "__type__": "1"}, "6240cdf2-c257-4872-b29d-30ef35a8f895": {"__data__": {"text": "# Getting Blockchain Information\n\nThe `RPC` module provides methods to get basic information of blockchain data and status, such as block height, block content, transaction details, and contracts. \n\nFor some specific information of contracts, such as the block maximum transaction number, system fee per byte, NEP-17 contract details, you need to invoke specific contract methods, which will be introduced in this document.\n\n\n## Getting blockchain data from RPC interfaces\n\nGets the latest block height or hash:\n\n```cs\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n\n// get the hash of the tallest block in the main chain\nstring hash = await client.GetBestBlockHashAsync().ConfigureAwait(false);\n\n// get the number of blocks in the main chain\nuint count = await client.GetBlockCountAsync().ConfigureAwait(false);\n```\n\nGets the specific data inside a block, including transaction list, etc.\n\n```cs\n// get the Base64 string of the block with block height\nstring blockHex = await client.GetBlockHexAsync(\"166396\").ConfigureAwait(false);\n\n// get the Base64 string of the block with block hash\nstring blockHex = await client.GetBlockHexAsync(\"0x4e61cd9d76e30e9147ee0f5b9c92f4447decbe52c6c8b412d0382a14d3a0b408\").ConfigureAwait(false);\n\n// get block data with block height\nRpcBlock block = await client.GetBlockAsync(\"166396\").ConfigureAwait(false);\n\n// get block data with block hash\nRpcBlock block = await client.GetBlockAsync(\"0x4e61cd9d76e30e9147ee0f5b9c92f4447decbe52c6c8b412d0382a14d3a0b408\").ConfigureAwait(false);\n```\n\nGets the contract script, hash, and manifest through `RpcClient`:\n\n```cs\n// get NEO contract state\nContractState contractState = await client.GetContractStateAsync(NativeContract.NEO.Hash.ToString()).ConfigureAwait(false);\n```\n\nFor more information refer to [RPC invocation methods](rpc.md).\n\n## Getting policy information\n\nInvokes the method  `policyAPI` in the native contract `PolicyContract` to get the Policy related information:\n\n```cs\n// choose a neo node with rpc opened\nPolicyAPI policyAPI = new PolicyAPI(new RpcClient(new Uri(\"http://localhost:20332\"), null,null, ProtocolSettings.Load(\"config.json\")));\n\n// get the system fee per byte\nlong feePerByte = await policyAPI.GetFeePerByteAsync().ConfigureAwait(false); // 1000, 0.00001000 GAS per byte\n\n// get the max size of one block\nuint maxBlockSize = await policyAPI.GetMaxBlockSizeAsync().ConfigureAwait(false); // 262144, (1024 * 256) bytes one block\n\n// get the max transaction count per block\nuint maxTransactionsPerBlock = await policyAPI.GetMaxTransactionsPerBlockAsync().ConfigureAwait(false); // 512, max 512 transactions one block\n\n// check if the account is blocked\nUInt160 account = Utility.GetScriptHash(\"NirHUAteaMr6CqWuAAMaEUScPcS3FDKebM\");\nbool isBlocked = await policyAPI.IsBlockedAsync(account).ConfigureAwait(false);\n```\n\n## Getting NEP-17 contract information\n\nNEP17 is an asset standard for Neo N3, such as NEO and GAS, both of which are assets based on NEP17 native contract. You can invoke  `Nep17API`  to get the name, mark, decimal place, and amount of the NEP17 contract.\n\n```cs\n// get nep17 token info\nNep17API nep17API", "doc_id": "6240cdf2-c257-4872-b29d-30ef35a8f895", "embedding": null, "doc_hash": "ae3b7859fc81c054b19ebf0e8b10b0a4b0052b2a027569db638fbfc3fc223db6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/monitor"}, "node_info": {"start": 0, "end": 3236, "_node_type": "1"}, "relationships": {"1": "daee96a8c111b0b324e4f1c463768b1d26af8c69", "3": "c9ec58ce-01e2-4fac-aeea-70aa1831bee1"}}, "__type__": "1"}, "c9ec58ce-01e2-4fac-aeea-70aa1831bee1": {"__data__": {"text": "get nep17 token info\nNep17API nep17API = new Nep17API(new RpcClient(new Uri(\"http://localhost:20332\"), null,null, ProtocolSettings.Load(\"config.json\")));\nRpcNep17TokenInfo tokenInfo = await nep17API.GetTokenInfoAsync(NativeContract.NEO.Hash).ConfigureAwait(false);\n```\n\n", "doc_id": "c9ec58ce-01e2-4fac-aeea-70aa1831bee1", "embedding": null, "doc_hash": "6ebe2ffd330fbcdaf2638d4ba30534f316498dd432759c3b33a7d1a11cab45f9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/monitor"}, "node_info": {"start": 3198, "end": 3468, "_node_type": "1"}, "relationships": {"1": "daee96a8c111b0b324e4f1c463768b1d26af8c69", "2": "6240cdf2-c257-4872-b29d-30ef35a8f895"}}, "__type__": "1"}, "316bf954-bc11-4f0d-a47f-b06cce02978f": {"__data__": {"text": "# RPC Invocation Methods\n\nThe `RpcClient` encapsulates all the interfaces provided by RpcServer. You can send RPC requests in your code through the standard methods provided in this module. You only need to pass in the corresponding parameters, the SDK will construct the corresponding JSON-RPC requests and then get the data returned by the node.\n\n\n## Initializing RpcClient\nBefore you can send RPC requests you need to initialize  `RpcClient` first. Choose the RPC server port of a Neo node according to your own needs. Here is an example:\n\nTest net node\uff1a\n\n```cs\n// TestNet Node\nRpcClient client = new RpcClient(new Uri(\"http://seed1.neo.org:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n```\n\nLocal node (the local Neo-CLI that can be connected to main net, test net, or private net according to configuration):\n\n```cs\n// Local Node\nRpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\n```\n\n:::note\n Typically, only one RpcClient instance needs to be initialized in an application, not needing in each method.\n:::\n\n## Blockchain data\n\n### GetBestBlockHashAsync\nGets the hash of the highest block in the blockchain:\n\n```cs\nstring hexString = await client.GetBestBlockHashAsync().ConfigureAwait(false);\nbyte[] hashBytes = hexString.HexToBytes();\nUInt256 hash256 = UInt256.Parse(hexString);\n```\n\n### GetBlockAsync\nGets the detailed block information by the block hash or block index.\n\n```cs\nRpcBlock rpcBlock = await client.GetBlockAsync(\"773dd2dae4a9c9275290f89b56e67d7363ea4826dfd4fc13cc01cf73a44b0d0e\").ConfigureAwait(false);\nBlock block = rpcBlock.Block;\n```\n\nor \n\n```cs\nRpcBlock rpcBlock = await client.GetBlockAsync(\"1024\").ConfigureAwait(false);\nBlock block = rpcBlock.Block;\n```\n\nYou can also get the serialized block information through the block hash value or block index:\n\n```cs\nstring serializedBlock = await client.GetBlockHexAsync(\"773dd2dae4a9c9275290f89b56e67d7363ea4826dfd4fc13cc01cf73a44b0d0e\").ConfigureAwait(false);\n```\n\n### GetBlockCountAsync\n\nGets the current block quantity.\n\nBlock index\uff08Index\uff09 = Block height\uff08Height\uff09 = Block count\uff08Count\uff09 - 1\n\n```cs\nuint blockCount = await client.GetBlockCountAsync().ConfigureAwait(false);\n```\n\n### GetBlockHashAsync\n\nGets the block hash by the block index.\n\n```cs\nstring hexString = await client.GetBlockHashAsync(10000).ConfigureAwait(false);\nbyte[] hashBytes = hexString.HexToBytes();\nUInt256 hash256 = UInt256.Parse(hexString);\n```\n\n### Get the block header information\nGet the specific block header information by the block hash or block index:\n\n```cs\nRpcBlockHeader blockHeader = await client.GetBlockHeaderAsync(\"a5508c9b6ed0fc09a531a62bc0b3efcb6b8a9250abaf72ab8e9591294c1f6957\").ConfigureAwait(false);\nHeader header = blockHeader.Header;\n```\n\nor\n\n```cs\nRpcBlockHeader blockHeader = await client.GetBlockHeaderAsync(\"10000\").ConfigureAwait(false);\nHeader header = blockHeader.Header;\n```\n\nGet the serialized block header information from the block hash or block index:\n\n```cs\nstring serializedBlockHeader = await", "doc_id": "316bf954-bc11-4f0d-a47f-b06cce02978f", "embedding": null, "doc_hash": "7abfa1c77d4443d1050a71073f3ed6a89125fc24a195f2035edcbb523ba00b2c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 0, "end": 3056, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "3": "21083ed0-4e2a-4422-9f44-b4dc0ed89cca"}}, "__type__": "1"}, "21083ed0-4e2a-4422-9f44-b4dc0ed89cca": {"__data__": {"text": "block hash or block index:\n\n```cs\nstring serializedBlockHeader = await client.GetBlockHeaderHexAsync(\"a5508c9b6ed0fc09a531a62bc0b3efcb6b8a9250abaf72ab8e9591294c1f6957\").ConfigureAwait(false);\n```\n\nor\n\n```\nstring serializedBlockHeader = await client.GetBlockHeaderHexAsync(\"10000\").ConfigureAwait(false);\n```\n\n### GetContractStateAsync\nGets the contract information from the contract hash or contract ID\n\n```cs\nContractState contractState = await client.GetContractStateAsync(\"dc675afc61a7c0f7b3d2682bf6e1d8ed865a0e5f\").ConfigureAwait(false);\n```\n\n```cs\nContractState contractState = client.GetContractState(-1);\n```\n\n### GetRawMempoolAsync\nGets hash list of the confirmed transactions in the memory.\n\n```cs\nstring[] verifiedTransactions = await client.GetRawMempoolAsync().ConfigureAwait(false);\n```\n\n### GetRawMempoolBothAsync\n\nGets both confirmed and unconfirmed transaction hashes in memory:\n\n```cs\nRpcRawMemPool memPool = await client.GetRawMempoolBothAsync().ConfigureAwait(false);\nstring[] verifiedTransactions = memPool.Verified;\nstring[] unverifiedTransactions = memPool.UnVerified;\n```\n\n### GetRawTransactionAsync\n\nGets the transaction information by transaction ID.\n\n```cs\nRpcTransaction rpcTransaction = await client.GetRawTransactionAsync(\"f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657\").ConfigureAwait(false);\nTransaction transaction = rpcTransaction.Transaction;\n```\n\n### GetRawTransactionHexAsync\n\nGets the serialized transaction by transaction ID.\n\n```cs\nstring serializedTransaction = await client.GetRawTransactionHexAsync(\"f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657\").ConfigureAwait(false);\n```\n\n### CalculateNetworkFeeAsync\n\nCalculates network fee of the specified transaction.\n\n```\nlong networkFee = await rpcClient.CalculateNetworkFeeAsync(transaction).ConfigureAwait(false);\n```\n\n### GetStorageAsync\n\nGets the stored value through the contract script hash and stored key (which needs to be converted into a hex string):\n\n```cs\nstring value = await client.GetStorageAsync(\"03febccf81ac85e3d795bc5cbd4e84e907812aa3\", \"5065746572\").ConfigureAwait(false);\n```\n\n### GetTransactionHeightAsync\nGets the block height of the specified transaction by transaction ID:\n\n```cs\nuint height = await client.GetTransactionHeightAsync(\"f4250dab094c38d8265acc15c366dc508d2e14bf5699e12d9df26577ed74d657\").ConfigureAwait(false);\n```\n\n### GetNextBlockValidatorsAsync\nGets the consensus nodes information and voting status in the current network.\n\n```cs\nRpcValidator[] rpcValidators = await client.GetNextBlockValidatorsAsync().ConfigureAwait(false);\nforeach (var validator in rpcValidators)\n{\n    string publicKey = validator.PublicKey;\n    BigInteger voteCount = validator.Votes;\n    bool isActive = validator.Active;\n}\n```\n\n### GetCommitteeAsync\n\nGets the public key list of the current committee members.\n\n```cs\nstring[] committees = await client.GetCommitteeAsync().ConfigureAwait(false);\n```\n\n## Node\n\n### GetConnectionCount\nGets the number of nodes connected", "doc_id": "21083ed0-4e2a-4422-9f44-b4dc0ed89cca", "embedding": null, "doc_hash": "8a365114a103322afc830bc1312bfc0920b452f3e46e4cadacdd88317d59b275", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 2994, "end": 6000, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "2": "316bf954-bc11-4f0d-a47f-b06cce02978f", "3": "3ce40184-0f42-4c4f-b964-fcf52d8d73b7"}}, "__type__": "1"}, "3ce40184-0f42-4c4f-b964-fcf52d8d73b7": {"__data__": {"text": "Node\n\n### GetConnectionCount\nGets the number of nodes connected to this node.\n\n```cs\nint connectionCount = await client.GetConnectionCountAsync().ConfigureAwait(false);\n```\n\n### GetPeersAsync\nGets a list of currently connected / unconnected nodes for this node, including IP address and port.\n\n```cs\nRpcPeers rpcPeers = await client.GetPeersAsync().ConfigureAwait(false);;\nRpcPeer[] connected = rpcPeers.Connected;\nRpcPeer[] unconnected = rpcPeers.Unconnected;\nif (connected.Length > 0)\n{\n    RpcPeer peer = connected[1];\n    string address = peer.Address;\n    int port = peer.Port;\n}\n```\n\n### GetVersionAsync\nGets the version of the node receiving the RPC request:\n\n```cs\nRpcVersion rpcVersion = await client.GetVersionAsync().ConfigureAwait(false);\nstring version = rpcVersion.UserAgent;\n```\n\n### SendRawTransactionAsync\nSends and broadcasts the serialized transaction.\n\n```cs\nUInt256 txHash = await client.SendRawTransactionAsync(\"80000001195876cb34364dc38b730077156c6bc3a7fc570044a66fbfeeea56f71327e8ab0000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c65eaf440000000f9a23e06f74cf86b8827a9108ec2e0f89ad956c9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50092e14b5e00000030aab52ad93f6ce17ca07fa88fc191828c58cb71014140915467ecd359684b2dc358024ca750609591aa731a0b309c7fb3cab5cd0836ad3992aa0a24da431f43b68883ea5651d548feb6bd3c8e16376e6e426f91f84c58232103322f35c7819267e721335948d385fae5be66e7ba8c748ac15467dcca0693692dac\").HexToBytes()).ConfigureAwait(false);\n```\n\nOr broadcasts the transaction (tx) over the blockchain:\n\n```cs\nUInt256 txHash = await client.SendRawTransactionAsync(transaction).ConfigureAwait(false);\n```\n\n### SubmitBlockAsync\nSends and broadcasts the serialized block\uff1a\n\n```cs\nUInt256 blockHash = await", "doc_id": "3ce40184-0f42-4c4f-b964-fcf52d8d73b7", "embedding": null, "doc_hash": "ac80653605ea0947130af79c31e1ebbaf07facfb2e0b7e19003d0d1b185acda6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 6007, "end": 7764, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "2": "21083ed0-4e2a-4422-9f44-b4dc0ed89cca", "3": "aa2d44ce-48b3-4eaf-986e-3f667cff31b8"}}, "__type__": "1"}, "aa2d44ce-48b3-4eaf-986e-3f667cff31b8": {"__data__": {"text": "serialized block\uff1a\n\n```cs\nUInt256 blockHash = await client.SubmitBlockAsync(\"000000000000000000000000000000000000000000000000000000000000000000000000845c34e7c1aed302b1718e914da0c42bf47c476ac4d89671f278d8ab6d27aa3d65fc8857000000001dac2b7c00000000be48d3a3f5d10013ab9ffee489706078714f1ea2010001510400001dac2b7c00000000400000455b7b226c616e67223a227a682d434e222c226e616d65223a22e5b08fe89a81e882a1227d2c7b226c616e67223a22656e222c226e616d65223a22416e745368617265227d5d0000c16ff28623000000da1745e9b549bd0bfa1a569971c77eba30cd5a4b00000000400001445b7b226c616e67223a227a682d434e222c226e616d65223a22e5b08fe89a81e5b881227d2c7b226c616e67223a22656e222c226e616d65223a22416e74436f696e227d5d0000c16ff286230008009f7fd096d37ed2c0e3f7f0cfc924beef4ffceb680000000001000000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50000c16ff2862300be48d3a3f5d10013ab9ffee489706078714f1ea201000151\").HexToBytes()).ConfigureAwait(false);\n```\n\n## Smart contract\n\n### InvokeFunctionAsync\nInvokes the specific method of the smart contract through the specified smart contract script hash, method name, and parameters, and returns the result after running in the virtual machine.\n\n```cs\nstring contractHash = \"0xd2a4cff31913016155e38e474a2c06d08be276cf\";\nstring method = \"transfer\";\nRpcStack from = new RpcStack()\n{\n    Type = \"Hash160\",\n    Value = \"0x262678399f390ee9f0cfd9ac8c65df8c149b4e9c\"\n};\nRpcStack to = new RpcStack()\n{\n    Type = \"Hash160\",\n    Value = \"0x753b9b069ef88dea7323a0f1ba6cb24486584f05\"\n};\nRpcStack amount = new RpcStack()\n{\n    Type = \"Integer\",\n    Value = \"120000000\"\n};\nRpcStack data = new RpcStack()\n{\n    Type = \"String\",\n    Value = \"my data\"\n};\n\nSigner signer0 = new Signer()\n{\n    Account = UInt160.Parse(\"0x262678399f390ee9f0cfd9ac8c65df8c149b4e9c\")\n};\n\nRpcInvokeResult rpcInvokeResult = await _rpcClient.InvokeFunctionAsync(contractHash, method, new RpcStack[] { from, to, amount, data }, signer0).ConfigureAwait(false);\n\nstring script = rpcInvokeResult.Script;\nvar engineState = rpcInvokeResult.State;\nlong gasConsumed = rpcInvokeResult.GasConsumed;\n```\n\n### InvokeScriptAsync\nReturns the result after running the specified script in the virtual machine.\n\n```cs\nbyte[] script = \"00046e616d656724058e5e1b6008847cd662728549088a9ee82191\".HexToBytes();\nRpcInvokeResult rpcInvokeResult = await client.InvokeScriptAsync(script).ConfigureAwait(false);\n```\n\n### GetUnclaimedGasAsync\n\nGets amount of", "doc_id": "aa2d44ce-48b3-4eaf-986e-3f667cff31b8", "embedding": null, "doc_hash": "bb0475b79526236b017e6d89cad1b600980fc079d4fa99f1d25ec853575487b7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 7776, "end": 10175, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "2": "3ce40184-0f42-4c4f-b964-fcf52d8d73b7", "3": "dcde3de1-045f-4865-9430-2ba4487be4ad"}}, "__type__": "1"}, "dcde3de1-045f-4865-9430-2ba4487be4ad": {"__data__": {"text": "GetUnclaimedGasAsync\n\nGets amount of unclaimed GAS at the specified address.\n\n```cs\nRpcUnclaimedGas unclaimedGas = await client.GetUnclaimedGasAsync(\"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\").ConfigureAwait(false);\nBigInteger unclaimed = unclaimedGas.Unclaimed;\nstring address = unclaimedGas.Address;\n```\n\n## Tools\n\n### ListPluginsAsync\nLists all the plugins loaded in the node.\n\n```cs\nRpcPlugin[] rpcPlugins = await client.ListPluginsAsync().ConfigureAwait(false);\nforeach (var item in rpcPlugins)\n{\n    string name = item.Name;\n    string version = item.Version;\n}\n```\n\n### ValidateAddressAsync\nValidates if the specified address is a valid Neo address.\n\n```cs\nRpcValidateAddressResult result = await client.ValidateAddressAsync(\"AQVh2pG732YvtNaxEGkQUei3YA4cvo7d2i\").ConfigureAwait(false);\nstring address = result.Address;\nbool isValid = result.IsValid;\n```\n\n## Wallets\nThe node local wallet interface contains the function of accessing the local wallet file. Before using the methods described in this section, you need to open the wallet using the openwallet method.\n\nThis method is disabled by default in the node configuration file for preventing high security risks.\n\n### OpenWalletAsync\n\nOpens the wallet file in the machine running the node.\n\n```cs\nstring path = \"D:/temp/123.json\";\nstring password = \"Password***\";\nbool result = await client.OpenWalletAsync(path, password).ConfigureAwait(false);\n```\n\n### CloseWalletAsync\nCloses the wallet and clears the wallet information in memory.\n\n```cs\nbool result = await client.CloseWalletAsync().ConfigureAwait(false);\n```\n\n### DumpPrivKeyAsync\nExports the private key of the specified address.\n\n```cs\nstring wif = await client.DumpPrivKeyAsync(\"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\").ConfigureAwait(false);\n```\n\n### GetBalanceAsync\nReturns balance of the specified asset in the wallet by the asset id. This method is applicable to the native contract assets and NEP-17 compliant assets.\n\n```cs\nBigDecimal balance = await client.GetWalletBalanceAsync(NativeContract.NEO.Hash.ToString()).ConfigureAwait(false);\n```\n\n### GetNewAddressAsync\nCreates a new account in the wallet and returns the corresponding address.\n\n```cs\nstring address = await client.GetNewAddressAsync().ConfigureAwait(false);\n```\n\n### GetUnclaimedGasAsync\nDisplays amount of the unclaimed GAS in the wallet.\n\n```cs\nBigInteger amount = await client.GetWalletUnclaimedGasAsync().ConfigureAwait(false);\n```\n\n### ImportPrivKeyAsync\nImports the private key into the wallet.\n\n```cs\nstring wif = \"KyoYyZpoccbR6KZ25eLzhMTUxREwCpJzDsnuodGTKXSG8fDW9t7x\";\nRpcAccount account = await client.ImportPrivKeyAsync(wif).ConfigureAwait(false);\n```\n\n### ListAddressAsync\nLists all the addresses in the wallet.\n\n```cs\nList<RpcAccount> acoounts = await client.ListAddressAsync().ConfigureAwait(false);\n```\n\n### SendFromAsync\nTransfers asset from a specified address to another address.\n\n```cs\nstring assetId = NativeContract.NEO.Hash.ToString();\nstring fromAddress = \"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\";\nstring toAddress=", "doc_id": "dcde3de1-045f-4865-9430-2ba4487be4ad", "embedding": null, "doc_hash": "a5ec0159354327a88c59d327f276458253865a2e531bca2f88239c1b134ee418", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 10188, "end": 13203, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "2": "aa2d44ce-48b3-4eaf-986e-3f667cff31b8", "3": "f9b0ca2d-b072-48bc-a286-1c78106d5223"}}, "__type__": "1"}, "f9b0ca2d-b072-48bc-a286-1c78106d5223": {"__data__": {"text": "toAddress= \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\nstring amount = \"100\";\nJObject result = await client.SendFromAsync(assetId, fromAddress, toAddress, amount).ConfigureAwait(false);\n```\nIf the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent.\n\nIf the signature is incomplete transaction to be signed is returned.\n\nIf the balance is insufficient an error is returned.\n\n### SendManyAsync\nTransfers assets to multiple addresses. You can specify the sending address.\n\n```cs\nList<RpcTransferOut> outs = new List<RpcTransferOut>();\nouts.Add(new RpcTransferOut\n{\n    Asset = NativeContract.NEO.Hash,\n    ScriptHash = Utility.GetScriptHash(\"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\"),\n    Value = \"100\"\n});\nouts.Add(new RpcTransferOut\n{\n    Asset = NativeContract.GAS.Hash,\n    ScriptHash = Utility.GetScriptHash(\"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\"),\n    Value = \"100.12345678\"\n});\nJObject result = await client.SendManyAsync(\"\", outs).ConfigureAwait(false);\n```\nIf the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent.\n\nIf the signature is incomplete transaction to be signed is returned.\n\nIf the balance is insufficient an error is returned.\n\n### SendToAddressAsync\nTransfers asset to the specified address.\n\n```cs\nstring assetId = NativeContract.NEO.Hash.ToString();\nstring toAddress = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\nstring amount = \"100\";\nJObject result = await client.SendToAddressAsync(assetId, toAddress, amount).ConfigureAwait(false);\n```\nIf the JSON transaction information is returned the transaction was sent successfully, or the transaction failed to be sent.\n\nIf the signature is incomplete transaction to be signed is returned.\n\nIf the balance is insufficient an error is returned.\n\n## Plugins\n\n### GetApplicationLogAsync\nGets the contract log by the specific transaction ID. The plugin ApplicationLogs is required for invoking this method. \n\n```cs\nstring txHash = \"0x23bf33766d00b4bb3314185f1ff0c2c85182d4d5e4e96f7c2df7506e7f99098b\";\nRpcApplicationLog log = await client.GetApplicationLogAsync(txHash).ConfigureAwait(false);\n```\n\nOr gets the contract log based on the specified transaction ID and trigger type\n\n```cs\nstring txHash = \"0x23bf33766d00b4bb3314185f1ff0c2c85182d4d5e4e96f7c2df7506e7f99098b\";\nRpcApplicationLog log = await client.GetApplicationLogAsync(txHash, TriggerType.Application).ConfigureAwait(false);\n```\n\n### GetNep17BalancesAsync\n\nReturns all NEP-17 assets balance at the specified address. The plugin TokensTracker is required for invoking this method.\n\n```cs\nstring address = \"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\";\nRpcNep17Balances balances = await client.GetNep17BalancesAsync(address).ConfigureAwait(false);\n```\n\n### GetNep17TransfersAsync\nReturns all NEP-17 transaction records at the specific address. The plugin TokensTracker is required for invoking this method.\n\nIf start and end timestamps are specified, transactions", "doc_id": "f9b0ca2d-b072-48bc-a286-1c78106d5223", "embedding": null, "doc_hash": "9b6313d26569b6d0888338d62f62cab668f392e84ee89314c6ddfc4c5e5a43d5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 13228, "end": 16217, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "2": "dcde3de1-045f-4865-9430-2ba4487be4ad", "3": "291399e4-2fb5-45a5-a75c-1c465be3fec7"}}, "__type__": "1"}, "291399e4-2fb5-45a5-a75c-1c465be3fec7": {"__data__": {"text": "for invoking this method.\n\nIf start and end timestamps are specified, transactions occurred in the time range is returned.\n\nIf no parameter is specified transactions in the past seven days are returned.\n\n```cs\nstring address = \"NVVwFw6XyhtRCFQ8SpUTMdPyYt4Vd9A1XQ\";\nRpcNep17Transfers transfers = await client.GetNep17TransfersAsync(address, 0).ConfigureAwait(false);\n```\n", "doc_id": "291399e4-2fb5-45a5-a75c-1c465be3fec7", "embedding": null, "doc_hash": "149825593f1fee5a965c6688c9fecae2c1d650c50e22b5d2426029b4900ed327", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}, "node_info": {"start": 16145, "end": 16515, "_node_type": "1"}, "relationships": {"1": "0db36e5103c9af18ce58985f51eae85575c8ae2f", "2": "f9b0ca2d-b072-48bc-a286-1c78106d5223"}}, "__type__": "1"}, "de12847c-cdd4-463a-8e42-30ebc7941de9": {"__data__": {"text": "# Transaction Construction\n\n`RpcClient` encapsulates the transaction construction module, which allows you to construct transactions in Neo N3 with specific parameters and methods to personalize your functions. This document introduces the relevant methods.\n\n:::note\n If you use SDK to construct a transaction that requires a signature, you need to ensure that the RpcClient obeject and the network it is connected to are configured the same way, or the transaction constructed by the SDK will not be validated in the blockchain. To do so, load Neo-CLI config.json when constructing the RpcClient object, for example:\n:::\n>\n> RpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"))\n\n## Transaction construction process\n\n1. Construct a transaction script to determine what functions the transaction will perform, such as a transfer transaction:\n\n    ```cs\n    // construct the script, in this example, we will transfer 1 NEO to the receiver\n    UInt160 scriptHash = NativeContract.NEO.Hash;\n    byte[] script = scriptHash.MakeScript(\"transfer\", sender, receiver, 1\uff0c\"data\");\n    ```\n\n2. Construct `TransactionManagerFactory` with the parameter `RpcClient `; Construct `TransactionManager` with the parameters `Script` and`Signers`:\n\n    ```cs\n    TransactionManager txManager = await new TransactionManagerFactory(client)\n            .MakeTransactionAsync(script, signers).ConfigureAwait(false);\n    ```\n\n3. Add signature (single or multiple signatures) and use `KeyPair` of the account as the parameter.\n\n    - single signature\n\n    ```cs\n    // add signature for the transaction with sendKey\n    txManager.AddSignature(sendKey);\n    ```\n    - multiple signatures\n    \n    ```cs\n    // add multi-signatures for the transaction with sendKey\n    txManager.AddMultiSig(key1, 2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey);\n    txManager.AddMultiSig(key2, 2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey);\n    ```\n    - multi-signature contract\n    \n      The nature of multi-signature comes from multi-signature contracts. You need to construct a multi-signature contract before you can obtain the multi-signature address and transfer assets. The following example uses 3 accounts to create a multi-signature contract which requires at least 2 account signatures for signing.\n\n    ```cs\n    // create a multi-signature contract, which needs at least 2 of 3 KeyPairs to sign\n    Contract multiContract = Contract.CreateMultiSigContract(2, sendKey.PublicKey, key2.PublicKey, key3.PublicKey);\n    // get the scripthash of the multi-signature contract\n    UInt160 multiAccount = multiContract.Script.ToScriptHash();\n    ```\n    \n5. Verify signatures and add `Witness` to the transaction body.\n\n    If there are not enough signatures or fees an exception will be thrown.\n\n    ```cs\n    // sign the transaction with the added signatures\n    Transaction tx = await txManager.SignAsync().ConfigureAwait(false);\n    ```\n\n## Transaction Construction Examples\n\n### Constructing an NEP17 transfer transaction\n\nThe following example implements a function that transfers 1024 NEO from the sender account to the receiver account. You need to pay attention to the difference between the script and the signature in a transaction for constructing different transactions.\n\n```cs\nusing Neo;\nusing", "doc_id": "de12847c-cdd4-463a-8e42-30ebc7941de9", "embedding": null, "doc_hash": "226ad91d5b2f5faaea939eaf747c45e13605e21b4b50cdacb6be683335b313ba", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}, "node_info": {"start": 0, "end": 3355, "_node_type": "1"}, "relationships": {"1": "4b55a68cfe2712f7b58501b1723005c4d42281b6", "3": "21c5e0f5-c88e-429f-bd89-cdddfbe3f637"}}, "__type__": "1"}, "21c5e0f5-c88e-429f-bd89-cdddfbe3f637": {"__data__": {"text": "for constructing different transactions.\n\n```cs\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestNep17Transfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestNep17Transfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n            // get the KeyPair of your account, which will pay the system and network fee\n            KeyPair sendKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n            UInt160 sender = Contract.CreateSignatureContract(sendKey.PublicKey).ScriptHash;\n\n            // add Signers, which is a collection of scripthashs that need to be signed\n            Signer[] cosigners = new[] { new Signer { Scopes = WitnessScope.CalledByEntry, Account = sender } };\n\n            // get the scripthash of the account you want to transfer to\n            UInt160 receiver = Utility.GetScriptHash(\"NirHUAteaMr6CqWuAAMaEUScPcS3FDKebM\");\n\n            // construct the script, in this example, we will transfer 1024 NEO to receiver\n            UInt160 scriptHash = NativeContract.NEO.Hash;\n            byte[] script = scriptHash.MakeScript(\"transfer\", sender, receiver, 1024);\n\n            // initialize the TransactionManagerFactory with rpc client and magic\n            // fill in the TransactionManager with the script and cosigners\n            TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n                .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n            // add signature and sign transaction with the added signature\n            Transaction tx = await txManager.AddSignature(sendKey).SignAsync().ConfigureAwait(false);\n\n            // broadcasts the transaction over the Neo network.\n            await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {tx.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) =>", "doc_id": "21c5e0f5-c88e-429f-bd89-cdddfbe3f637", "embedding": null, "doc_hash": "3569ace936c515d1552a6ae963d5352cde815a0b42765eb78dac0dfaa1558999", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}, "node_info": {"start": 3296, "end": 5738, "_node_type": "1"}, "relationships": {"1": "4b55a68cfe2712f7b58501b1723005c4d42281b6", "2": "de12847c-cdd4-463a-8e42-30ebc7941de9", "3": "eb0ff044-e257-4a84-b42a-9f11098888c2"}}, "__type__": "1"}, "eb0ff044-e257-4a84-b42a-9f11098888c2": {"__data__": {"text": "          .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n`WalletAPI` encapsulates the above process, so you can simplify the NEP17 transfer as follows:\n\n```cs\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestNep17Transfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestNep17Transfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n            // get the KeyPair of your account, which will pay the system and network fee\n            KeyPair sendKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n\n            // get the scripthash of the account you want to transfer to\n            UInt160 receiver = Utility.GetScriptHash(\"NirHUAteaMr6CqWuAAMaEUScPcS3FDKebM\");\n\n            // use WalletAPI to create and send the transfer transaction\n            WalletAPI walletAPI = new WalletAPI(client);\n            Transaction tx = await walletAPI.TransferAsync(NativeContract.NEO.Hash, sendKey, receiver, 1024).ConfigureAwait(false);\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n### Constructing a transaction to transfer to multi-signature account\n\nThe following example implements a function that transfers 10 GAS to a multi-signature account. The scripthash of a multi-signature account is obtained from the scripthash of the multi-signature contract. As the sender is a normal account, the process of adding a signature is the same as last example.\n\n```cs\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\nusing Utility = Neo.Network.RPC.Utility;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestToMultiTransfer().GetAwaiter().GetResult();\n", "doc_id": "eb0ff044-e257-4a84-b42a-9f11098888c2", "embedding": null, "doc_hash": "e77dd7f8e9fc31501e3007fe1b0a3013c3e2eab9756bf640ba979b49e481a3f4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}, "node_info": {"start": 5775, "end": 8235, "_node_type": "1"}, "relationships": {"1": "4b55a68cfe2712f7b58501b1723005c4d42281b6", "2": "21c5e0f5-c88e-429f-bd89-cdddfbe3f637", "3": "f8be1e4e-cf21-4183-98a3-dadcc6e05913"}}, "__type__": "1"}, "f8be1e4e-cf21-4183-98a3-dadcc6e05913": {"__data__": {"text": "      TestToMultiTransfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestToMultiTransfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n            // get the KeyPair of your account, which will pay the system and network fee\n            KeyPair sendKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n            UInt160 sender = Contract.CreateSignatureContract(sendKey.PublicKey).ScriptHash;\n\n            // get the KeyPair of your accounts\n            KeyPair key2 = Utility.GetKeyPair(\"L1bQBbZWnKbPkpHM3jXWD3E5NwK7nui2eWHYXVZPy3t8jSFF1Qj3\");\n            KeyPair key3 = Utility.GetKeyPair(\"KwrJfYyc7KWfZG5h97SYfcCQyW4jRw1njmHo48kZhZmuQWeTtUHM\");\n\n            // create multi-signatures contract, this contract needs at least 2 of 3 KeyPairs to sign\n            Contract multiContract = Contract.CreateMultiSigContract(2, sendKey.PublicKey, key2.PublicKey, key3.PublicKey);\n            // get the scripthash of the multi-signature Contract\n            UInt160 multiAccount = multiContract.Script.ToScriptHash();\n\n            // construct the script, in this example, we will transfer 1024 GAS to multi-sign account\n            // in contract parameter, the amount type is BigInteger, so we need to muliply the contract factor\n            UInt160 scriptHash = NativeContract.GAS.Hash;\n            byte[] script = scriptHash.MakeScript(\"transfer\", sender, multiAccount, 1024 * NativeContract.GAS.Factor);\n\n            // add Signers, which is a collection of scripthashs that need to be signed\n            Signer[] cosigners = new[] { new Signer { Scopes = WitnessScope.CalledByEntry, Account = sender } };\n\n            // initialize the TransactionManager with rpc client and magic\n            // fill the script and cosigners\n            TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n                .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n            // add signature and sign transaction with the added signature\n            Transaction tx = await txManager.AddSignature(sendKey).SignAsync().ConfigureAwait(false);\n\n            // broadcasts the transaction over the Neo network.\n            await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n         ", "doc_id": "f8be1e4e-cf21-4183-98a3-dadcc6e05913", "embedding": null, "doc_hash": "797a8ccb7bf6f36b9e8927a254308710ffe1945c18c0153f1505c5e2028328ec", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}, "node_info": {"start": 8212, "end": 10618, "_node_type": "1"}, "relationships": {"1": "4b55a68cfe2712f7b58501b1723005c4d42281b6", "2": "eb0ff044-e257-4a84-b42a-9f11098888c2", "3": "125fb7f7-d22d-4a18-9d3f-88662292e97d"}}, "__type__": "1"}, "125fb7f7-d22d-4a18-9d3f-88662292e97d": {"__data__": {"text": "           Console.WriteLine($\"Transaction {tx.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n### Constructing a transaction to transfer from multi-signature account\n\nThe following example implements a function that transfers 1024 GAS from a multi-signature account. The scripthash of the multi-signature account is obtained from the scripthash of the multi-signature contract. To transfer assets from a multi-signature account, you need to add signatures required by the multi-signature contract.\n\n```cs\nusing Neo;\nusing Neo.Network.P2P.Payloads;\nusing Neo.Network.RPC;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Native;\nusing Neo.VM;\nusing Neo.Wallets;\nusing System;\nusing Utility = Neo.Network.RPC.Utility;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            TestFromMultiTransfer().GetAwaiter().GetResult();\n            Console.Read();\n        }\n\n        private static async Task TestFromMultiTransfer()\n        {\n            // choose a neo node with rpc opened\n            RpcClient client = new RpcClient(\"http://127.0.0.1:10332\");\n\n            // get the KeyPair of your account\n            KeyPair receiverKey = Utility.GetKeyPair(\"L53tg72Az8QhYUAyyqTQ3LaXMXBE3S9mJGGZVKHBryZxya7prwhZ\");\n            KeyPair key2 = Utility.GetKeyPair(\"L1bQBbZWnKbPkpHM3jXWD3E5NwK7nui2eWHYXVZPy3t8jSFF1Qj3\");\n            KeyPair key3 = Utility.GetKeyPair(\"KwrJfYyc7KWfZG5h97SYfcCQyW4jRw1njmHo48kZhZmuQWeTtUHM\");\n\n            // create multi-signature contract, this contract needs at least 2 of 3 KeyPairs to sign\n            Contract multiContract = Contract.CreateMultiSigContract(2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey);\n            // get the scripthash of the multi-signature Contract\n            UInt160 multiAccount = multiContract.Script.ToScriptHash();\n\n            UInt160 receiver = Contract.CreateSignatureContract(receiverKey.PublicKey).ScriptHash;\n\n            // construct the script, in this example, we will transfer 1024 GAS to multi-sign account\n            // in contract parameter, the amount type is BigInteger, so we need to muliply the contract", "doc_id": "125fb7f7-d22d-4a18-9d3f-88662292e97d", "embedding": null, "doc_hash": "de88b8990b0346209a5b599a6a84b22a0d4ebb26b9d2c3775017ba537512a885", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}, "node_info": {"start": 10667, "end": 13102, "_node_type": "1"}, "relationships": {"1": "4b55a68cfe2712f7b58501b1723005c4d42281b6", "2": "f8be1e4e-cf21-4183-98a3-dadcc6e05913", "3": "3aabd586-cb82-4baa-95fc-59278cd1eb64"}}, "__type__": "1"}, "3aabd586-cb82-4baa-95fc-59278cd1eb64": {"__data__": {"text": "parameter, the amount type is BigInteger, so we need to muliply the contract factor\n            UInt160 scriptHash = NativeContract.GAS.Hash;\n            byte[] script = scriptHash.MakeScript(\"transfer\", multiAccount, receiver, 1024 * NativeContract.GAS.Factor);\n\n            // add Signers, which is a collection of scripthashs that need to be signed\n            Signer[] cosigners = new[] { new Signer { Scopes = WitnessScope.CalledByEntry, Account = multiAccount } };\n\n            // initialize the TransactionManager with rpc client and magic\n            // fill the script and cosigners\n            TransactionManager txManager = await new TransactionManagerFactory(client, 5195086)\n                .MakeTransactionAsync(script, cosigners).ConfigureAwait(false);\n            // add signature and sign transaction with the added signature\n            Transaction tx = await txManager.AddMultiSig(new KeyPair[]{receiverKey, key2}, 2, receiverKey.PublicKey, key2.PublicKey, key3.PublicKey)\n                .SignAsync().ConfigureAwait(false);\n\n            // broadcasts the transaction over the Neo network.\n            await client.SendRawTransactionAsync(tx).ConfigureAwait(false);\n            Console.WriteLine($\"Transaction {tx.Hash.ToString()} is broadcasted!\");\n\n            // print a message after the transaction is on chain\n            WalletAPI neoAPI = new WalletAPI(client);\n            await neoAPI.WaitTransactionAsync(tx)\n               .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is {(await p).VMState}\"));\n        }\n    }\n}\n```\n\n", "doc_id": "3aabd586-cb82-4baa-95fc-59278cd1eb64", "embedding": null, "doc_hash": "d3711d5d14dc76d562907592318f9dccd2636300864d2deae70455aa59448ebf", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}, "node_info": {"start": 13026, "end": 14598, "_node_type": "1"}, "relationships": {"1": "4b55a68cfe2712f7b58501b1723005c4d42281b6", "2": "125fb7f7-d22d-4a18-9d3f-88662292e97d"}}, "__type__": "1"}, "5e48e36d-4c85-4a7b-bbfd-9ab04af91302": {"__data__": {"text": "# Wallet Interfaces\n\nMost operations in Neo blockchain are related to accounts. A wallet is the collection of accounts that includes one or multiple accounts. This document contains the following topics\uff1a\n\n- The basic concepts and operations of accounts and wallets\n- The method `WalletAPI`\uff0cwhich encapsulates wallet-related interfaces to provide the functions of balance inquiry, GAS claim, and transfer.\n\n## Account and Wallet\n\n### Account\n\nAn account is the user identity in Neo, which is essentially a private and public key pair ( `KeyPair` ) .\n\n```cs \n// create a new KeyPair\nbyte[] privateKey = new byte[32];\nusing (RandomNumberGenerator rng = RandomNumberGenerator.Create())\n{\n    rng.GetBytes(privateKey);\n}\nKeyPair keyPair = new KeyPair(privateKey);\n```\n\n### Private Key\n\nPrivate key is an authorization tool used to sign transactions. Having a private key means you own an account that you can handle all the assets in it. The private key is essentially a 32-bit byte array that can be represented as a hexadecimal string, for example:\n\n`\"0x450d6c2a04b5b470339a745427bae6828400cf048400837d73c415063835e005\"`\n\n```cs \n  // export private key to hex string\n  string privateHex = keyPair.PrivateKey.ToHexString();\n\n  // get KeyPair from private hex string\n  keyPair = Utility.GetKeyPair(privateHex);\n```\n\n### WIF\n\nWIF is another string representation of the private key, which is equivalent to the private key. For example, the above private key is represented as the following WIF:\n\n`\"KyXwTh1hB76RRMquSvnxZrJzQx7h9nQP2PCRL38v6VDb5ip3nf1p\"`\n\n```cs \n  // export KeyPair as WIF\n  string wif = keyPair.Export();\n\n  // get KeyPair from WIF\n  KeyPair keyPair1 = Utility.GetKeyPair(wif);\n```\n\n### Public Key\n\nThe public key verifies the signature of the private key. It corresponds to the ECPoint type in Neo. The public key can be calculated with the private key. Typically it is a 66-digit hexadecimal string:\n\n`\"02f9ec1fd0a98796cf75b586772a4ddd41a0af07a1dbdf86a7238f74fb72503575\"`\n\n```cs \n  // export public key hex string\n  string publicHex = keyPair.PublicKey.ToString();\n\n  // get public key from hex string\n  Neo.Cryptography.ECC.ECPoint publicKey = Neo.Cryptography.ECC.ECPoint.Parse(publicHex, Neo.Cryptography.ECC.ECCurve.Secp256r1);\n```\n\n### Account ScriptHash\n\nScriptHash, corresponding to `UInt160` in Neo, is essentially a 20-bit byte array generated from the public key by script construction and hash algorithm. Since the hash algorithm is not reversible, the public key cannot be calculated backwards from the script hash. ScriptHash is usually expressed as a reversed hexadecimal string in big-endian order\uff1a\n`\"0xb0a31817c80ad5f87b6ed390ecb3f9d312f7ceb8\"`\n\n```cs \n  // get ScriptHash of KeyPair account\n  UInt160 scriptHash = Contract.CreateSignatureContract(keyPair.PublicKey).ScriptHash;\n  string strScriptHash = scriptHash.ToString();\n```\n\n### Address\n\nAddress is another string form of ScriptHash and can be transformed to or from ScriptHash. As the unique identifier of the account, address is the most commonly used account form. It is similar to the account number for a traditional account, when you transfer money", "doc_id": "5e48e36d-4c85-4a7b-bbfd-9ab04af91302", "embedding": null, "doc_hash": "038061ddb45bd8ab5be567b79d06bd96660ac4ba9e35349fd797a4efee70425f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/wallet"}, "node_info": {"start": 0, "end": 3139, "_node_type": "1"}, "relationships": {"1": "f13f83f36ca1358286929077aabeb8a745b6d64d", "3": "d582b564-fcef-4094-a416-d9ac54848cec"}}, "__type__": "1"}, "d582b564-fcef-4094-a416-d9ac54848cec": {"__data__": {"text": "used account form. It is similar to the account number for a traditional account, when you transfer money you transfer it to a specified address. A common address format is: `\"Ncm9TEzrp8SSer6Wa3UCSLTRnqzwVhCfuE\"`\n\n```cs \nusing Neo.Wallets;\n\n// ScriptHash to address\nstring adddress = scriptHash.ToAddress();\n// address to ScriptHash\nscriptHash = adddress.ToScriptHash();\n```\n\n### Wallet\n\nWallet is a collection of accounts. NEP6 is the most commonly used wallet standard in Neo. A NEP6 wallet can be serialized into a JSON file, in which the encrypted account private key is saved. The corresponding password is required to decrypt the private key.\n\nHere is an example:\n\nCreate a new NEP6 wallet with an account and save as JSON file:\n\n```cs \n// create wallet\nstring path = \"wallet_new.json\";\nstring password = \"MyPass\";\nNEP6Wallet wallet_new = new NEP6Wallet(path);\nusing (wallet_new.Unlock(password))\n{\n    wallet_new.CreateAccount(keyPair.PrivateKey);\n}\nwallet_new.Save();\n```\n\nRead the NEP6 wallet from the JSON file and decrypt the account:\n\n```cs \n// load wallet from nep6 wallet\nNEP6Wallet wallet = new NEP6Wallet(path);\nKeyPair keyPair2;\nusing (wallet.Unlock(password))\n{\n    keyPair2 = wallet.GetAccounts().First().GetKey();\n}\n```\n\n## Using WalletAPI\n\n### Initialization\nInitializing `WalletAPI`\uff1a\n\n```cs\n// choose a neo node with rpc opened\nRpcClient client = new RpcClient(new Uri(\"http://localhost:20332\"), null, null, ProtocolSettings.Load(\"config.json\"));\nWalletAPI walletAPI = new WalletAPI(client);\n```\n\n### Inquiring balance\n\n:::note\n The type of account balance is usually BigInteger, which is a representation after rounding the decimal part. It needs to be divided by Factor to get the actual Token amount.\n:::\n\nInquiry NEP-17 asset balance using the string parameter:\n\n```cs\n// get the neo balance of account\nstring tokenHash = NativeContract.NEO.Hash.ToString();\nstring address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\nBigInteger balance = await walletAPI.GetTokenBalanceAsync(tokenHash, address).ConfigureAwait(false);\n```\n\nor using the parameter of ScriptHash type:\n\n```cs\n// Get the NEO balance of account\nUInt160 tokenScriptHash = Utility.GetScriptHash(tokenHash, ProtocolSettings.Default);\nUInt160 accountHash = Utility.GetScriptHash(address, ProtocolSettings.Default);\nNep17API nep17API = new Nep17API(client);\nBigInteger balance = await nep17API.BalanceOfAsync(tokenScriptHash, accountHash).ConfigureAwait(false);\n```\n\nIn Neo N3 NEO and GAS are both NEP17 assets with the fixed scripthash. Here we provide a simpler interface:\n\n```cs\n// Get the NEO balance\nuint neoBalance = await walletAPI.GetNeoBalanceAsync(address).ConfigureAwait(false);\n\n// Get the GAS balance\ndecimal gasBalance = await walletAPI.GetGasBalanceAsync(address).ConfigureAwait(false);\n```\n\n## Claiming GAS\n\nIn Neo N3 GAS is automatically claimed when NEO is transferred. You can construct a transaction transferring to yourself to claim GAS.\n\n1. First check the claimable GAS amount at current address:\n\n    ```cs\n    // Get the claimable GAS of one address\n    string address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n", "doc_id": "d582b564-fcef-4094-a416-d9ac54848cec", "embedding": null, "doc_hash": "4693a0fae1da2bc1fcfbcda12a704fb83ccec9f5eb6ec06e732bf35d96471ee5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/wallet"}, "node_info": {"start": 3052, "end": 6165, "_node_type": "1"}, "relationships": {"1": "f13f83f36ca1358286929077aabeb8a745b6d64d", "2": "5e48e36d-4c85-4a7b-bbfd-9ab04af91302", "3": "9e36b1d0-231b-4282-80a3-0106c097396a"}}, "__type__": "1"}, "9e36b1d0-231b-4282-80a3-0106c097396a": {"__data__": {"text": "   decimal gasAmount = await walletAPI.GetUnclaimedGasAsync(address).ConfigureAwait(false);\n    ```\n    or use ScriptHash of the account to check:\n\n    ```cs\n    string address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n    UInt160 accountHash = Utility.GetScriptHash(address);\n    decimal gasAmount = await walletAPI.GetUnclaimedGasAsync(accountHash).ConfigureAwait(false);\n    ```\n\n2. Construct a transaction sending NEO to yourself:\n\n    ```cs\n    // Claiming GAS needs the KeyPair of account. You can also use wif or private key hex string\n    string wif = \"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\";\n    Transaction transaction = await walletAPI.ClaimGasAsync(wif).ConfigureAwait(false);\n    ```\n    or use `KeyPair`:\n    \n    ```cs\n    KeyPair keyPair = Utility.GetKeyPair(wif);\n    Transaction transaction = await walletAPI.ClaimGasAsync(keyPair).ConfigureAwait(false);\n    ```\n\n## Asset Transfer\n\n`WalletAPI` encapsulates transfer methods of NEP-17 assets.\n\nUse string parameters: \n\n```cs\nstring tokenHash = NativeContract.NEO.Hash.ToString();\nstring wif = \"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\";\nstring address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n\n// Transfer 10 NEO from wif to address\nawait walletAPI.TransferAsync(tokenHash, wif, address, 10).ConfigureAwait(false);\n\n// Print a message after the transaction is on chain\nWalletAPI neoAPI = new WalletAPI(client);\nawait neoAPI.WaitTransactionAsync(transaction)\n  .ContinueWith(async (p) => Console.WriteLine($\"Transaction vm state is  {(await p).VMState}\"));\n```\nor use `KeyPair` and  `UInt160` (ScriptHash):\n\n```cs\nstring wif = \"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\";\nstring address = \"NZs2zXSPuuv9ZF6TDGSWT1RBmE8rfGj7UW\";\n\nKeyPair sender = Utility.GetKeyPair(wif);\nUInt160 receiver = Utility.GetScriptHash(address, ProtocolSettings.Default);\n\n// Transfer 10 NEO from wif to address\nawait walletAPI.TransferAsync(NativeContract.NEO.Hash, sender, receiver, 10).ConfigureAwait(false);\n```\n\nNEP17 transfer from multi-signature account:\n\n```\nKeyPair receiverKey = Utility.GetKeyPair(\"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\");\nKeyPair keyPair1 = Utility.GetKeyPair(\"L1rFMTamZj85ENnqNLwmhXKAprHuqr1MxMHmCWCGiXGsAdQ2dnhb\");\nKeyPair keyPair2 = Utility.GetKeyPair(\"L2ynA5aq6KPJjpisXb8pGXnRvgDqYVkgC2Rw85GM51B9W33YcdiZ\");\nKeyPair keyPair3 =", "doc_id": "9e36b1d0-231b-4282-80a3-0106c097396a", "embedding": null, "doc_hash": "7dfa81ba22b543fbe4e495e1da2e2409c5a42e84a7a089dba78057421145a5e5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/wallet"}, "node_info": {"start": 6254, "end": 8604, "_node_type": "1"}, "relationships": {"1": "f13f83f36ca1358286929077aabeb8a745b6d64d", "2": "d582b564-fcef-4094-a416-d9ac54848cec", "3": "631f0528-a1f2-4ef1-80dc-2abe23b289e5"}}, "__type__": "1"}, "631f0528-a1f2-4ef1-80dc-2abe23b289e5": {"__data__": {"text": "keyPair3 = Utility.GetKeyPair(\"L3TbPZ3Gtqh3TTk2CWn44m9iiuUhBGZWoDJQuvVw5Zbx5NAjPbdb\");\nKeyPair keyPair4 = Utility.GetKeyPair(\"L3Ke1RSBycXmRukv27L6o7sQWzDwDbFcbfR9oBBwXbCKHdBvb4ZM\");\n\n//make transaction \nTransaction tx = await walletAPI.TransferAsync(NativeContract.GAS.Hash, 3, new ECPoint[] { keyPair1.PublicKey, keyPair2.PublicKey, keyPair3.PublicKey, keyPair4.PublicKey }, new KeyPair[] { keyPair1, keyPair2, keyPair3 }, Contract.CreateSignatureContract(receiverKey.PublicKey).ScriptHash, 10 * NativeContract.GAS.Factor).ConfigureAwait(false);\n```\n\n\n\n", "doc_id": "631f0528-a1f2-4ef1-80dc-2abe23b289e5", "embedding": null, "doc_hash": "0ebdd803634356fc76568c7448cef6159108d17fd1e73c444615c6159e9694d3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/wallet"}, "node_info": {"start": 8594, "end": 9148, "_node_type": "1"}, "relationships": {"1": "f13f83f36ca1358286929077aabeb8a745b6d64d", "2": "9e36b1d0-231b-4282-80a3-0106c097396a"}}, "__type__": "1"}, "3c80b030-9166-4250-83b4-4ae19767f50e": {"__data__": {"text": "# Smart Contract Writing Basics\n\nIn this tutorial, you will learn the basics of developing a smart contract. \n\nLet's have a look at our basic hello world contract.\n\n```cs\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n\nnamespace Helloworld\n{\n    [ManifestExtra(\"Author\", \"Neo\")]\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a contract example\")]\n    public class Contract1 : SmartContract\n    {\n        //TODO: Replace it with your own address.\n        [InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\n        static readonly UInt160 Owner = default;\n\n        private static bool IsOwner() => Runtime.CheckWitness(Owner);\n\n        // When this contract address is included in the transaction signature,\n        // this method will be triggered as a VerificationTrigger to verify that the signature is correct.\n        // For example, this method needs to be called when withdrawing token from the contract.\n        public static bool Verify() => IsOwner();\n\n        // TODO: Replace it with your methods.\n        public static string MyMethod()\n        {\n            return Storage.Get(Storage.CurrentContext, \"Hello\");\n        }\n\n        public static void _deploy(object data, bool update)\n        {\n            if (update) return;\n\n            // It will be executed during deploy\n            Storage.Put(Storage.CurrentContext, \"Hello\", \"World\");\n        }\n\n        public static void Update(ByteString nefFile, string manifest)\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            ContractManagement.Update(nefFile, manifest, null);\n        }\n\n        public static void Destroy()\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            ContractManagement.Destroy();\n        }\n    }\n}\n```\n\n## Contract property\n\nInside the contract class, the property defined with `static readonly` or `const` is the contract property which can be used as constants and can not be changed. For instance, when we want to define a Owner of that contract or the factor number which will be used in the later asset transfer, we can define these constants in this way:\n\n```cs\n// Represents onwner of this contract, which is a fixed address. Usually should be the contract creator\n[InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\nstatic readonly UInt160 Owner = default;\n\n// A constant number\nprivate const ulong factor = 100000000;\n```\n\nThese properties defined in contract property are usually constants that can be used inside the methods of smart contract and every time the smart contract is running on any instance, these properties keep the same value.\n\nIn addition, developer can define static method  in contract and return a constant, which is exposing the method  out of", "doc_id": "3c80b030-9166-4250-83b4-4ae19767f50e", "embedding": null, "doc_hash": "f608300726eecef24de7940d5f7ea158fc59469c0d17432149dbd2d77d54f7dd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/basics"}, "node_info": {"start": 0, "end": 2975, "_node_type": "1"}, "relationships": {"1": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9", "3": "7de89a99-6b2b-4d4e-a183-4e58a5346b10"}}, "__type__": "1"}, "7de89a99-6b2b-4d4e-a183-4e58a5346b10": {"__data__": {"text": "static method  in contract and return a constant, which is exposing the method  out of the contract and let end-user can call the method to get the fixed value when they try to query the smart contract. For instance, when you create you own token, you have to define a name which you may want everyone use you contract can check he name with this method.\n\n```cs\npublic static string Name() => \"name of the token\";\n```\n\n## Storage property\n\nWhen you develop the smart contract, you have to store your application data on the blockchain. When a Smart Contract is created or when a transaction awakens it, the Contract\u2019s code can read and write to its storage space. All data stored in the storage of the smart contract are automatically persisted between invocations of the smart contract. Full nodes in the blockchain store the state of every smart contract on the chain.\n\nNeo has provided data access interface based on key-value pairs. Data records may be read or deleted from or written to the smart contracts using keys. Besides, smart contracts may retrieve and send their storage contexts to other contracts, thereby entrusting other contracts to manage their storage areas. In C# development, smart contract can use the `Storage` Class to read/write the persistent storage  The `Storage` class is a static class and does not require a constructor. The methods of `Storage` class can be viewed in this [API References](../../reference/scapi/framework/services/Storage.md)\n\nFor instance, if you want to store the total supply of your token into storage:\n\n```cs\n// Key is totalSupply and value is 100000000\nStorage.Put(Storage.CurrentContext, \"totalSupply\", 100000000);\n```\n\nHere `CurrentContext` Returns the current store context. After obtaining the store context, the object can be passed as an argument to other contracts (as a way of authorization), allowing other contracts to perform read/write operations on the persistent store of the current contract.\n\n`Storage` work well for storing primitive values and while you can use an `StorageMap`  which can be used for storing structured data, this will store the entire container in a single key in smart contract storage.\n\n```cs\n//Get the totalSupply in the storageMap. The Map is used an entire container with key name \"contract\"\nStorageMap contract = new(Storage.CurrentContext, nameof(contract))\nvar value = contract.Get(\"totalSupply\");\nreturn value is null ? 0 : (BigInteger)value;;\n```\n\n## Data type\n\nWhen using C# to develop smart contracts, you cannot use the full set of C# features due to the difference between NeoVM and Dotnet IL.\n\nBecause NeoVM is more compact, we can only compile limited C# / dotnet features into an NEF file.\n\nNeoVM provides the following basic types\uff1a\n\n- `Pointer`\n- `Boolean`\n- `Integer`\n- `ByteString`\n- `Buffer`\n- `Array`\n- `Struct`\n- `Map`\n- `InteropInterface`\n\nThe basic types of C# are:\n\n- `Int8 int16 int32 int64 uint8 uint16 uint32 uint64`\n- `float double`\n- `Boolean`\n- `Char String`\n\n## Your first Neo contract\n\nAfter analyzing the basic hello world contract, let us move to your first real-world smart contract. Here we provide a very simple DNS system which was written in C#. The main function of the DNS is store the domain for users. It contains all the points above except the events. We can investigate this smart contract to learn how to make a basic smart contract. The source code is here:\n\n```cs\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System.ComponentModel;\n\nnamespace Domain\n{\n    public class Contract1 : SmartContract\n    {\n\n        [DisplayName(\"query\")]\n        public static byte[] Query(string domain)\n        {\n", "doc_id": "7de89a99-6b2b-4d4e-a183-4e58a5346b10", "embedding": null, "doc_hash": "ea4bd56b79e3c6b1fa6b9f0c15eb003c073ae32da81d9bcb9cd18ebca7da5988", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/basics"}, "node_info": {"start": 2906, "end": 6650, "_node_type": "1"}, "relationships": {"1": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9", "2": "3c80b030-9166-4250-83b4-4ae19767f50e", "3": "256e76f3-413c-463f-9446-301215621b65"}}, "__type__": "1"}, "256e76f3-413c-463f-9446-301215621b65": {"__data__": {"text": " public static byte[] Query(string domain)\n        {\n            return Storage.Get(Storage.CurrentContext, domain);\n        }\n\n        [DisplayName(\"register\")]\n        publilc static bool Register(string domain, byte[] owner)\n        {\n            // Check if the contract owner is the same as the one who invokes the contract\n            if (!Runtime.CheckWitness(owner)) return false;\n            byte[] value = Storage.Get(Storage.CurrentContext, domain);\n            if (value != null) return false;\n            Storage.Put(Storage.CurrentContext, domain, owner);\n            return true;\n        }\n\n        [DisplayName(\"delete\")]\n        public static bool Delete(string domain)\n        {\n            // To do\n        }\n    }\n}\n```\n\nLet's slice it and learn it step by step.\n\n### Contract Features\n\nYou can declare more features:\n\n```cs\n[ManifestExtra(\"Author\", \"Neo\")]\n[ManifestExtra(\"Email\", \"dev@neo.org\")]\n[ManifestExtra(\"Description\", \"This is a contract example\")]\n[SupportedStandards(\"NEP-17\")]\n[ContractPermission(\"*\", \"onNEP17Payment\")]\n[ContractTrust(\"0x0a0b00ff00ff00ff00ff00ff00ff00ff00ff00a4\")]\npublic class Contract1 : SmartContract\n{\n    public static bool Main(string operation, object[] args)\n    {\n        // other code\n    }\n}\n```\n\n`ManifestExtra` represents the extra fields in the Manifest file, where you can add `Author`, `Email`,  `Description` and etc.\n\n`SupportedStandards` represents the NEP standards the contract conform to, such as NEP-17, a token standard on Neo. \n\n`ContractPermission` indicates the permission requested by the contract, and `ContractTrust` indicates which contracts trust the contract to call itself.  See [invocation-permission](... /deploy/invoke.html#invocation-permission).\n\nYou can also add other fields, such as:\n\n```cs\n[ManifestExtra(\"Name\", \"sample contract\")]\n[ManifestExtra(\"Version\", \"1.0.0\")]\n```\n\n### Entry function\n\nTheoretically, smart contracts can have any entry points. Methods of the public static type in the contract can be used as an entry function to be invoked externally, for example:\n\n```cs\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\n\nnamespace Neo.Compiler.MSIL.UnitTests.TestClasses\n{\n    class Contract_a : SmartContract.Framework.SmartContract\n    {\n        public static object First(string method, object[] args)\n        {\n            return 'a';\n        }\n        public static object Second(string method, object[] args)\n        {\n            return 'b';\n        }\n    }\n}\n```\n\nThe compiler marks the offset of `First` and `Second` in ABI. When invoking the contract, it assigns the value to initialPosition, finds and executes the matching method according to the offset recorded in the ABI.\n\n### Trigger\n\nA smart contract trigger is a mechanism that", "doc_id": "256e76f3-413c-463f-9446-301215621b65", "embedding": null, "doc_hash": "17cef33579f2cb09b6474aa1875b40c0c40bde12b1013f08e39f54ee5dc7f0cf", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/basics"}, "node_info": {"start": 6681, "end": 9441, "_node_type": "1"}, "relationships": {"1": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9", "2": "7de89a99-6b2b-4d4e-a183-4e58a5346b10", "3": "b3c1d2a8-6381-4768-a3dc-5d9832cbac80"}}, "__type__": "1"}, "b3c1d2a8-6381-4768-a3dc-5d9832cbac80": {"__data__": {"text": "the ABI.\n\n### Trigger\n\nA smart contract trigger is a mechanism that triggers the execution of smart contracts. There are three triggers introduced in the Neo smart contract\uff0c`Verification`,   `Application`, and `System`. However, for most smart contract development, you only need to implement the Verify method to provide the signature verification logic, without having to decide the trigger. \n\n#### Verification trigger\n\nA Verification trigger is used to call the contract as a verification function, which can accept multiple parameters and should return a valid Boolean value, indicating the validity of the transaction or block.\n\n```cs\npublic static bool Verify()\n{\n    return Runtime.CheckWitness(Owner);\n}\n```\n\n### CheckWitness\n\nIn many, if not all cases, you will probably be wanting to validate whether the address invoking your contract code is really who they say they are.\n\nThe `Runtime.CheckWitness` method accepts a single parameter which represents the address that you would like to validate against the address used to invoke the contract code. In more deeper detail, it verifies that the transactions / block of the calling contract has validated the required script hashes.\n\nUsually this method is used to check whether an specified address is the the contract caller,  and then the address can be used to do store change or something else.\n\nInside our `DNS smart contract`, the `Register` function is firstly check if the owner is the same as the one who invoke the contract. Here we use the `Runtime.CheckWitness` function. Then we try to fetch the domain owner first to see if the domain is already exists in the storage. If not, we can store our domain->owner pair using the `Storage.Put`method.\n\n```cs\nprivate static bool Register(string domain, byte[] owner)\n{\n    if (!Runtime.CheckWitness(owner)) return false;\n    byte[] value = Storage.Get(Storage.CurrentContext, domain);\n    if (value != null) return false;\n    Storage.Put(Storage.CurrentContext, domain, owner);\n    return true;\n}\n```\n\nSimilar to the Register method, the Delete function check the owner first and if it exists and it is the same as the one who invoke the contract, delete the pair using the `Storage.Delete`method. \n\n### Events\n\nIn Smart contract, events are a way  to communicate that something happened on the blockchain to your app front-end (or back-end), which can be 'listening' for certain events and take action when they happen. You might use this to update an external database, do analytics, or update a UI. In some specified contract standard,  it defined some events should be posted. It is not cover in this page, but is very useful for the other smart contracts. For instance, in the NEP-17 Token, the events `transfer` should be fired when user invoke the transfer function.\n\n```cs\n//Should be called when caller transfer NEP-17 asset.\n[DisplayName(\"Transfer\")]\npublic static event Action<byte[], byte[], BigInteger> OnTransfer;\n```\n\nTransfer is the event name.\n\n### Json serialization\n\nIn Neo N3 smart contract, the Json serialization/deserialization feature is added:\n\n```cs\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\n\nnamespace Neo.Compiler.MSIL.TestClasses\n{\n    public class Contract_Json : SmartContract.Framework.SmartContract\n    {\n        public static string Serialize(object obj)\n        {\n            return Json.Serialize(obj);\n        }\n\n        public static object Deserialize(string json)\n        {\n            return Json.Deserialize(json);\n        }\n    }\n}\n```\n\n", "doc_id": "b3c1d2a8-6381-4768-a3dc-5d9832cbac80", "embedding": null, "doc_hash": "2381b61ba878e66636319057ed4a98c9e43490ac9f7103852a32940b5cb82a31", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/basics"}, "node_info": {"start": 9414, "end": 12955, "_node_type": "1"}, "relationships": {"1": "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9", "2": "256e76f3-413c-463f-9446-301215621b65"}}, "__type__": "1"}, "196cf7e0-ac78-4fe2-ae98-3e784614ab87": {"__data__": {"text": "# Differences between Neo N3 and Neo Legacy\n\nThis document describes the main differences in writing smart contracts between Neo N3 and Neo Legacy. Developers who want to migrate Neo Legacy contracts to Neo N3 need to be aware of these changes. Since Neo N3 is still being updated, here we only list significant changes and the document will be updated continuously.\n\n## Development Environment\n\n### .NET Core\n\nIn Neo N3, .NET Core version has been upgraded from 3.0 to 5.0. You need to update SDK.\n\n### Visual Studio Extension\n\nIn Neo N3, the Visual Studio extensions are updated. You need to uninstall the old NeoContractPlugin plugin, compile, and install the latest NeoContractPlugin.\n\nThe new contract templates have major updates. For more information refer to <a href=\"#\u5408\u7ea6\u6a21\u677f\">Contract\u00a0Template</a>.\n\n### Compiler\n\nIn Neo N3, the old neon (Neo.Compiler.MSIL) has been deprecated. You need to use the latest nccs (Neo.Compiler.CSharp) compiler, which has major changes as follows:\n\n* Not support for the language Visual Basic.\n* Ability to directly compile the  C# code to smart contracts without the intermediate language IL. \n* Ability to directly compile solutions, projects, and C# files.\n* Support for more C# features.\n* Deterministic compilation. If the code and compiler are deterministic, the compiled contract is deterministic.\n* abi files upgraded to manifest files.\n* nvm files upgraded to nef files.\n* Compile directory changed from `bin/debug` to `bin/sc`.\n\n## Contract Template\n\n### Namespace\n\nNeo Legacy\uff1a\n\n```cs\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Services.Neo;\nusing System;\n```\nNeo N3\uff1a\n\n```cs\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n```\n\n### Contract Feature\n\n|                         | Neo Legacy                                                   | Neo N3                                                       |\n| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Contract info           | You need to fill in contract information such as the name, author, email, etc. when deploying the contract. | Add the contract features to the contract file, written as [C# Features](https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/attributes/), for example\uff1a<br/>[ManifestExtra(\"Author\", \"Neo\")]<br/>[ManifestExtra(\"Email\", \"dev@neo.org\")]<br/>[ContractTrust(\"\\*\")]<br/>[ContractPermission(\"\\*\", \"\\*\")]<br/>[SupportedStandards(\"NEP-17\")]<br/>[ManifestExtra(\"Description\", \"This is a contract example\")]<br/>public class Contract1 : SmartContract |\n| Contract function       | When deploying a contract, you need to declare contract features such as whether to use storage, whether it can be called dynamically, and whether to accept NEP-5 assets. | All contracts can use the storage and dynamic calls by default. You can implement the OnNEP17Payment method to accept NEP-17 assets and implement the OnNEP11Payment method to accept", "doc_id": "196cf7e0-ac78-4fe2-ae98-3e784614ab87", "embedding": null, "doc_hash": "b32383bca2e59455dead26a0d9abc65cb1f76b58939f9ccc5b02238f5c5e25b7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/difference"}, "node_info": {"start": 0, "end": 3138, "_node_type": "1"}, "relationships": {"1": "d5261f6c4a29285160718e85e0dbbec44c10d983", "3": "bc2ff351-0713-47c1-9585-a2f58a327fb5"}}, "__type__": "1"}, "bc2ff351-0713-47c1-9585-a2f58a327fb5": {"__data__": {"text": "to accept NEP-17 assets and implement the OnNEP11Payment method to accept NEP-11 (NFT standard) assets. |\n| Declare support for NEP | Code example:<br/>public static string[] SupportedStandards()<br/>{<br/>    string[] result = { \"NEP-5\", \"NEP-7\", \"NEP-10\" };<br/>    return result;<br/>} | Directly add the feature to the contract class name `[SupportedStandards(\"NEP-17\")]` |\n\n### Declaration of static variables\n\nNeo Legacy\n\n```cs\nprivate static readonly byte[] InitialOwnerScriptHash = \"AJhZmdHxW44FWMiMxD5bTiF7UgHcp3g2Fr\".ToScriptHash();\n```\n\nNeo N3\n\n```cs\n[InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\nstatic readonly UInt160 Owner = default;\n```\n\n### Methods and Events\n\n|                     | Neo Legacy                                                   | Neo N3                                                       |\n| ------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| main                |                                                              | Removed. Developers no longer need to write the redundant main method for contract method jumping |\n| Verify              | Determined in the Main method, for example\uff1a<br/>public static object Main(string method, object[] args)<br/>{<br/>    if (Runtime.Trigger == TriggerType.Verification)<br/>    {<br/>    \treturn IsOwner();<br/>    )<br/>} | Independent method\uff1a<br/> `public static bool Verify() => IsOwner();` |\n| Method Name         | To make the method name conform to the smart contract naming rules, the method is declared like this: <br/>[DisplayName(\"balanceOf\")]<br/>public static BigInteger BalanceOf(byte[] account) | The first letter of the method name is automatically compiled to lowercase, so developers no longer have to use DisplayName, but DisplayName is still acceptable. |\n| Deployment          | Initialization variables are placed into a separate method that is called manually after deployment. | The method `_deploy` is added, which is executed automatically after deployment. |\n| Update and destroy  | You need to write the Update and Destroy methods by yourself. | Update and Destroy methods are built in the contract template |\n| transfer event name | `transfer`                                                   | `Transfer`                                                   |\n\n### Permission\n\n#### User's signature\n\nIn Neo Legacy all contracts in the call chain can use user signatures by default.\n\nNeo N3 adds the concept of WitnessScope, which by default allows only the entry", "doc_id": "bc2ff351-0713-47c1-9585-a2f58a327fb5", "embedding": null, "doc_hash": "a3bb074acc6dcf04189c80c093d907a9e9c5fb5f80ce5d3014d64afa33ae04f6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/difference"}, "node_info": {"start": 3076, "end": 5689, "_node_type": "1"}, "relationships": {"1": "d5261f6c4a29285160718e85e0dbbec44c10d983", "2": "196cf7e0-ac78-4fe2-ae98-3e784614ab87", "3": "5d8c0e2e-06c2-4e39-808c-f459db4d4722"}}, "__type__": "1"}, "5d8c0e2e-06c2-4e39-808c-f459db4d4722": {"__data__": {"text": "N3 adds the concept of WitnessScope, which by default allows only the entry contract to use the user signature and allows the user to modify it.\n\n#### Permission and trust\n\nIn Neo Legacy, contracts can call each other via dynamic invoking function. You need to set invoking permission in the code, but this way has limited effect.\n\nNeo N3\uff1a\n\n- Added restrictions on contract invoking permission. You need to declare Permission first and then invoke.\n- Added the concept of contract Groups and Trusts to enable wallets to give security warnings.\n\n- Added the concept of CallFlag to restrict the behavior of the called contract.\n\n\n#### Security method\n\nNeo N3 adds a new security method. You can execute the contract in a read-only manner by adding the [Safe] feature to the method.\n\n## Contract Framework\n\n### Native contracts\n\nNeo N3 introduces a large number of native contracts, moving massive interoperable services from Neo Legacy to native contracts. The major changes are as follows.\n\n- Upgraded the Blockchain class to a Ledger native contract, e.g. `Blockchain.GetBlock()` changed to `Ledger.GetBlock()`.\n- Added the ContractManagement native contract to query contracts and manage their updating and destruction.\n\n- Moved the contract part of the Blockchain class to the ContractManagement native contract, e.g. `Blockchain.GetContract()` changed to `ContractManagement .GetContract()`.\n\n- Added the CryptoLib native contract and moved Sha256, ripemd160, VerifyWithECDsa and other methods to this contract.\n\n- Added the StdLib native contract and moved serialization, deserialization, data conversion and other methods from Helper class to this contract.\n\n- Added native contracts such as NEO, GAS, Oracle, Policy, and RoleManagement.\n\n- Moved the functions election, voting, and GAS extraction from specific transactions to the NEO native contract.\n\n\n### Class\n\n- The Runtime class has been extensively updated. More runtime states are added.\n- The Transaction class has been extensively updated to fit the data structure of Neo N3 transactions.\n- Added a new Crypto class and moved some of the methods provided by the SmartContract class to this class.\n- Moved a number of classes:\n  -  Account\n  -  Asset\n  - Header\n  - InvocationTransaction\n  - TransactionAttribute\n  - TransactionInput\n  - TransactionOutput\n\n\n### Storage\n\n|                 | Neo Legacy                                                   | Neo N3                                                       |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| StorageMap      | StorageMap cannot be used as static variable. It should be written to each method. | Support for declaration of static StorageMap.                |\n| Storage search  | Returns byte[] if no corresponding key is found.             | Returns null if no corresponding key is found. You need to determine whether it is empty, otherwise a null reference exception may occur. |\n| Data conversion | Data is converted via the method `ToBigInteger`              | Data is compulsively converted via the method `(BigInteger)` |\n|                 | The `Storage.CurrentContext.CreateMap(string name)` method   | Changed to the construction method of StorageMap             |\n\nNeo Legacy \uff1a\n\n```cs\npublic static readonly string mapName = \"asset\";\n\npublic static void", "doc_id": "5d8c0e2e-06c2-4e39-808c-f459db4d4722", "embedding": null, "doc_hash": "ad027a0a1825fe7f70353f04bb82a448dc675765bff289519179537e8e49f596", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/difference"}, "node_info": {"start": 5690, "end": 9090, "_node_type": "1"}, "relationships": {"1": "d5261f6c4a29285160718e85e0dbbec44c10d983", "2": "bc2ff351-0713-47c1-9585-a2f58a327fb5", "3": "0759c14a-764b-4987-8b74-652d9379d72b"}}, "__type__": "1"}, "0759c14a-764b-4987-8b74-652d9379d72b": {"__data__": {"text": "static readonly string mapName = \"asset\";\n\npublic static void Put(byte[] key, BigInteger value) => Storage.CurrentContext.CreateMap(mapName).Put(key, value);\n\npublic static BigInteger Get(byte[] key) => Storage.CurrentContext.CreateMap(mapName).Get(key).ToBigInteger();\n```\n\nNeo N3\uff1a\n\n```cs\npublic static readonly string mapName = \"asset\";\n\npublic static void Put(UInt160 key, BigInteger value) => assetMap.Put(key, value);\n\npublic static BigInteger Get(UInt160 key)\n{\n    var value = assetMap.Get(key);\n    return value is null ? 0 : (BigInteger)value;\n}\n```\n\n### TokenSale Operations\n\n#### Contract writing\n\nNeo Legacy\uff1a\n\nIt is very complicated to do Token Sale due to the deference between UTXO assets and contract assets. Generally, you have to write the mintTokens method, get the transaction that invokes the contract, then analyze the sender from the transaction input, analyze the transfer amount and asset name from the transaction output, and finally transfer the contract asset to the sender.\n\nNeo N3\uff1a\n\nTokenSale can be implemented via OnNEP17Payment. The sender and transfer amount no longer need to be analyzed from the transaction one by one and then summed up, but can be directly obtained from the parameters. Here is an example:\n\n```cs\npublic static void OnNEP17Payment(UInt160 from, BigInteger amount, object data)\n{\n    if (Runtime.CallingScriptHash == NEO.Hash)\n    {\n        Mint(amount * TokensPerNEO);\n    }\n    else if (Runtime.CallingScriptHash == GAS.Hash)\n    {\n        if (from != null) Mint(amount * TokensPerGAS);\n    }\n}\n```\n\n#### User operations\n\nNeo Legacy\uff1a\n\nThe user initiates InvocationTransaction, constructs the transaction input and output, transfers the NEO/GAS to the contract address, and calls the mintTokens method of the contract address to complete TokenSale.\n\nNeo N3 \uff1a\n\nThe user just need to send NEO/GAS to the contract address, which triggers the OnNEP17Payment method of the contract to complete TokenSale.\n\n### Exception\n\nNeo Legacy\uff1a\n\nWhen invoking a contract, if the contract execution encounters an exception, the exception message is not printed.\n\nNeo N3\uff1a\n\nWhen invoking a contract, the exception message is printed as the result of the call.\n\n### Static call\n\nNeo Legacy \uff1a\n\n```cs\n[Appcall(\"XXXXXXXXXX\")]//ScriptHash\npublic static extern int AnotherContract(string arg);\n\npublic static void Main()\n{\n    AnotherContract(\"Hello\");    \n}\n```\n\nNeo N3 \uff1a\n\n```cs\n[Contract(\"0102030405060708090A0102030405060708090A\")]\npublic class Contract1\n{\n    public static extern void MyMethod();\n}\n\npublic static void Call()\n{\n    Contract1.MyMethod();\n}\n```\n\n### Dynamic call\n\nNeo Legacy\uff1a\n\n```cs\ndelegate object Dyncall(string method, object[] args);\npublic static object Main(string operation, object[] args)\n{\n    var dyncall = (Dyncall)target.ToDelegate();\n    var newArgs = new object[1];\n    var method = (string)args[0];\n    newArgs[0] = args[1];\n    dyncall(method, newArgs);\n}\n```\n\nNeo N3\uff1a\n\nYou can invoke `Contract.Call()` to complete the dynamic call of the", "doc_id": "0759c14a-764b-4987-8b74-652d9379d72b", "embedding": null, "doc_hash": "dd03d2c6618ab40557f683b003f23eb0dcb36932e1fe770da6f26ec4f1174850", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/difference"}, "node_info": {"start": 9100, "end": 12102, "_node_type": "1"}, "relationships": {"1": "d5261f6c4a29285160718e85e0dbbec44c10d983", "2": "5d8c0e2e-06c2-4e39-808c-f459db4d4722", "3": "5a3dd5a0-28f0-4045-b294-f027f106f2f3"}}, "__type__": "1"}, "5a3dd5a0-28f0-4045-b294-f027f106f2f3": {"__data__": {"text": "can invoke `Contract.Call()` to complete the dynamic call of the contract.\n\n```cs\npublic static bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data)\n{\n    Contract.Call(to, \"onNEP17Payment\", CallFlags.All, new object[] { from, amount, data });\n}\n```\n\n", "doc_id": "5a3dd5a0-28f0-4045-b294-f027f106f2f3", "embedding": null, "doc_hash": "2d67ad38b19eb5515d897b43fafb2795b1a5a79d785288c22ee52416b2e8439c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/difference"}, "node_info": {"start": 12092, "end": 12362, "_node_type": "1"}, "relationships": {"1": "d5261f6c4a29285160718e85e0dbbec44c10d983", "2": "0759c14a-764b-4987-8b74-652d9379d72b"}}, "__type__": "1"}, "8a247c6e-e6e2-4070-b422-d9f81189348d": {"__data__": {"text": "# Smart Contract Framework (C#)\n\nThe .NET framework is an encapsulation of the Smart Contract API, which helps .NET programmers obtain the blockchain data, persistent storage data, and NeoVM execution status easily using the classes, methods, and properties of the core Neo module.\n\nNeo.SmartContract.Framework mainly provides the following API methods\uff1a\n\n- A series of native contract methods that can be invoked in the smart contract\uff0csee [Neo.SmartContract.Framework.Native](https://developers.neo.org/docs/n3/reference/scapi/framework/native). \n- Interoperability services layer methods, see [Neo.SmartContract.Framework.Service](https://developers.neo.org/docs/n3/reference/scapi/framework/services).\n- Methods provided by the framework\uff0csee [Neo.SmartContract.Framework](https://developers.neo.org/docs/n3/reference/scapi/framework/framework).\n\n", "doc_id": "8a247c6e-e6e2-4070-b422-d9f81189348d", "embedding": null, "doc_hash": "6f5c8bf5dcf9c8625ee1d013e666653178e73146ffb255f45cde54d42a7d8175", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/framework"}, "node_info": {"start": 0, "end": 848, "_node_type": "1"}, "relationships": {"1": "debb614241befe9e6d2944d69549425081eaef96"}}, "__type__": "1"}, "c69dfaf3-382c-4f10-a069-a2131a662d88": {"__data__": {"text": "# NEF and Manifest Files\n\nNeo N3 uses the NEF (NEO Executable Format) and Manifest files as a replacement of the AVM and ABI files in Neo Legacy.\n\nWhen a contract is compiled successfully, the compiler generates both the NEF file and Manifest file. These two files are also needed when you deploy a contract or upgrade a contract.\n\n## NEF\n\nThe NEF file includes the following fields.\n\n\n| Field    | Type          | Comment                                                 |\n| -------- | ------------- | ------------------------------------------------------- |\n| Magic    | uint32        | The Magic value of the blockchain.                      |\n| Compiler | byte[64]      | Compiler name and version                               |\n| Source   | byte[64]      | The source code address of the contract                 |\n| Reserve  | byte[2]       | The field reserved for future extensions. It must be 0. |\n| Tokens   | MethodToken[] | Method tokens.                                          |\n| Reserve  | byte[2]       | The field reserved for future extensions. It must be 0. |\n| Script   | Byte[]        | The contract script                                     |\n| Checksum | uint32        | The first four bytes after two-time SHA256 hashed       |\n\n## Manifest\n\nBefore deploying the contract, you need to explicitly declare the contract functions and permissions in the manifest file, which affects the contract behavior when running.\n\nThe Manifest file includes the following fields.\n\n| Field              | Type                                                         | Comment                                                      |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Name               | string                                                       | Contract name                                                |\n| Groups             | ContractGroup[] Consisting of a public key and a signature on the contract hash | Defines a group of trusted contracts. Contracts in a group trusts each other and can be invoked by each other,  without prompting the user any warnings. For example, a series of contracts that call each other for a DeFi project. A group is identified by a public key and must has a signature for the contract hash to prove that the contract is included in the group. |\n| SupportedStandards | string[]       ", "doc_id": "c69dfaf3-382c-4f10-a069-a2131a662d88", "embedding": null, "doc_hash": "485b1f5635a16f6a9ee0c37ece2151d01d7236f08e4c73940b3af12448d5f83e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/manifest"}, "node_info": {"start": 0, "end": 2453, "_node_type": "1"}, "relationships": {"1": "3355f0881b7369c3e3465a9e02e23b5eacc2f9c2", "3": "60bcea0b-6fb9-435e-85e7-3bdc3aa511f9"}}, "__type__": "1"}, "60bcea0b-6fb9-435e-85e7-3bdc3aa511f9": {"__data__": {"text": "in the group. |\n| SupportedStandards | string[]                                                     | Supported NEP standard, equivalent to NEP-10 in Neo Legacy.x      |\n| Abi                | ContractAbi                                                  | NEP-14 (NeoContract ABI) Description of smart contract methods (name, parameters, return value, offset, safe or not), events (name, parameters) |\n| Permissions        | ContractPermission[] Consisting of the contract and its method names | This field is an array containing a permission object, which defines other contracts and methods that the contract wants to call. The contract can be ScriptHash, Group, or wildcard *. The method is the method name or wildcard *. Contracts or methods not declared in the manifest cannot be called by the contract. |\n| Trusts             | WildcardContainer<UInt160\\>                                  | Defines other contracts trusted by the contract. The contract can be ScriptHash, Group, or wildcard *. If a contract is trusted, the user will not receive any warning message when the contract is called. |\n| Extra              | object                                                       | Other user-defined data, such as developer, email, URL, contract profile, etc. |\n\n", "doc_id": "60bcea0b-6fb9-435e-85e7-3bdc3aa511f9", "embedding": null, "doc_hash": "28c8292fb0406313ee73ee692e17d2c16d662ff41c43645b3fe74c2ca55b44ce", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/manifest"}, "node_info": {"start": 2399, "end": 3670, "_node_type": "1"}, "relationships": {"1": "3355f0881b7369c3e3465a9e02e23b5eacc2f9c2", "2": "c69dfaf3-382c-4f10-a069-a2131a662d88"}}, "__type__": "1"}, "b6a927ad-00d2-4154-838f-018d09c98cf1": {"__data__": {"text": "# NEP-11 \n\nThe NEP-11 proposal outlines the standard for writing NFT (Non-fungible token) contracts. This document will explain how to write a simple NFT contract using C#.\n\n## Defining NFT attributes\n\nA shortcut for developers to develop NFT contracts is inheriting directly from the class  `Nep11Token<Nep11TokenState>`, where `Nep11TokenState` is the class accommodating all the NFT attributes. In addition to the default `Name` and `Owner` fields, you can add customized attributes, such as images, videos, categories, URLs, attack power, defense power, etc.\n\n| Fields | Example                                    | Description                 |\n| ------ | ------------------------------------------ | --------------------------- |\n| Name   | HarryPotter #001                           | NFT name                    |\n| Owner  | 0x4578060c29f4c03f1e16c84312429d991952c94c | NFT owner                   |\n| Type   | 0                                          | Type\uff08customized\uff09          |\n| Image  | https://neo.org/images/HarryPotter.jpg     | Image\uff08customized\uff09         |\n| ATK    | 3000                                       | Attack power\uff08customized\uff09  |\n| DEF    | 3000                                       | Defense power\uff08customized\uff09 |\n\nAn NFT asset requires a unique identifier. If your contract includes NFT assets with different names, you can use the `Name` field in `Nep11TokenState` as TokenID. If there are NFT assets with duplicate name, you need to add a new field like ID or TokenID.\n\nParticularly, it is recommended that developers name the image field `Image` in order for the wallet to display the NFT image properly. Wallet developers can also capture NFT images based on the NFT Image attribute.  \n\nThe `TokenState`  code example is as follows\uff1a\n\n```cs\npublic class MyTokenState : Nep11TokenState\n{\n    public string Image { get; set; }\n    \n    public MyTokenState(string name)\n    {\n        //TODO: Replace it with your own URL.\n        Image = \"https://neo.org/images/\" + name + \".jpg\";\n    }\n}\n```\n\nAfter inheriting `Nep11Token<Nep11TokenState>` you need to rewrite the Symbol method, as follows:\n\n```cs\npublic override string Symbol() => \"MNFT\";\n```\n\n## Distribution Method\n\nThe base class `Nep11Token` doesn't include the method for NFT distribution. Developers can write it on demand. In this example we create a method `Airdrop`, which functions airdrop of NFT to the specified address, to enable the contract owner to issue NFT assets.\n\n```cs\npublic static bool Airdrop(UInt160 to, string name)\n{\n    if (!IsOwner()) throw new Exception(\"No authorization.\");\n  ", "doc_id": "b6a927ad-00d2-4154-838f-018d09c98cf1", "embedding": null, "doc_hash": "573c1aa96186190ba135970ea6ee4e18837557a576b8d3d3ced3e52a6bf7916a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep11"}, "node_info": {"start": 0, "end": 2592, "_node_type": "1"}, "relationships": {"1": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932", "3": "2b8aef81-d2f9-4c72-af35-2f885d093fd3"}}, "__type__": "1"}, "2b8aef81-d2f9-4c72-af35-2f885d093fd3": {"__data__": {"text": "  if (!IsOwner()) throw new Exception(\"No authorization.\");\n    if (!to.IsValid) throw new Exception(\"Amount is invalid.\");\n\n    Mint(name, new MyTokenState(name));\n    return true;\n}\n```\n\nIn the above code segment, the `Mint` method is inherited from `Nep11Token`. To invoke it, you just need to pass in TokenID and the `TokenState` object of NFT.\n\n## Example\n\nThe complete code is as follows:\n\n```cs\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Attributes;\nusing Neo.SmartContract.Framework.Services;\nusing System;\n\nnamespace Contract1\n{\n    [SupportedStandards(\"NEP-11\")]\n    public class Contract1 : Nep11Token<MyTokenState>\n    {\n        //TODO: Replace it with your own address.\n        [InitialValue(\"NiNmXL8FjEUEs1nfX9uHFBNaenxDHJtmuB\", ContractParameterType.Hash160)]\n        static readonly UInt160 Owner = default;\n\n        private static bool IsOwner() => Runtime.CheckWitness(Owner);\n\n        public override string Symbol() => \"MNFT\";\n\n        public static bool Airdrop(UInt160 to, string name)\n        {\n            if (!IsOwner()) throw new Exception(\"No authorization.\");\n            if (!to.IsValid) throw new Exception(\"Amount is invalid.\");\n\n            Mint(name, new MyTokenState(name));\n            return true;\n        }\n    }\n\n    public class MyTokenState : Nep11TokenState\n    {\n        public string Image { get; set; }\n\n        public MyTokenState(string name)\n        {\n            //TODO: Replace it with your own URL.\n            Image = \"https://neo.org/images/\" + name + \".jpg\";\n        }\n    }\n}\n\n```\n\nTo enable the user to purchase NFT with GAS, you can add the following method:\n\n```cs\npublic static void OnNEP17Payment(UInt160 from, BigInteger amount, object _)\n{\n    \n    if (Runtime.CallingScriptHash != GAS.Hash)\n        throw new Exception(\"Please pay with GAS\");\n    amount /= 100000000;\n    for (int i = 0; i < amount; i++)\n    {\n        //TODO: Please replace with your own naming logic. TokenId is not allowed to be the same\n        var name = \"HarryPotter #001\";\n        Mint(name, new MyTokenState(name));\n    }\n}\n```\n\nBy now we have completed a simple NFT contract.\n\n## Methods and events in base class\n\nThe base class `Nep11Token` also provides the following methods and events:\n\n#### NEP-11 methods\n\n| Name        | Parameters                                     | Returns          | Description                                  ", "doc_id": "2b8aef81-d2f9-4c72-af35-2f885d093fd3", "embedding": null, "doc_hash": "610cf9e7152e58bf53d0bbd84836885f99d1d2eae65ecd78fde424a7b2badc95", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep11"}, "node_info": {"start": 2540, "end": 4981, "_node_type": "1"}, "relationships": {"1": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932", "2": "b6a927ad-00d2-4154-838f-018d09c98cf1", "3": "f95d4717-73a8-48c8-9386-91be0aa00483"}}, "__type__": "1"}, "f95d4717-73a8-48c8-9386-91be0aa00483": {"__data__": {"text": "                                   |\n| ----------- | ---------------------------------------------- | ---------------- | ------------------------------------------------------------ |\n| symbol      | --                                             | String           | Returns the contract symbol, e.g. \"MNFT\"                     |\n| decimals    | --                                             | Integer          | Returns the integer 0                                        |\n| totalSupply | --                                             | Integer          | NFT total supply. Total supply= Amount of minted tokens - Amount of burned tokens |\n| balanceOf   | Hash160\uff08owner\uff09                               | Integer          | The total amount of NFT owned by the user                    |\n| ownerOf     | ByteArray\uff08tokenId\uff09                           | Hash160          | Returns the owner of the specified NFT.                      |\n| properties  | ByteArray\uff08tokenId\uff09                           | Map              | Returns the properties of the given NFT.                     |\n| tokens      |                                                | InteropInterface | Returns all of the tokens minted by the contract.            |\n| tokensOf    | Hash160\uff08owner\uff09                               | InteropInterface | Returns all of the token ids owned by the specified address  |\n| transfer    | Hash160\uff08to\uff09 ByteArray\uff08tokenId\uff09 Any\uff08data\uff09 | Boolean          | It transfers an amount of NFT with  TokenId. This method requires the signature of NFT owner. |\n\n#### Events\n\n| Name     | Parameters                                                   | Returns         | Description                                                  |\n| -------- | ------------------------------------------------------------ | --------------- | ------------------------------------------------------------ |\n| transfer | Hash160\uff08from\uff09", "doc_id": "f95d4717-73a8-48c8-9386-91be0aa00483", "embedding": null, "doc_hash": "6a7233faa2ea7de1803e61687ee602f54f97f87a4f8c70731ad68b85e6b9a1cb", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep11"}, "node_info": {"start": 5035, "end": 6936, "_node_type": "1"}, "relationships": {"1": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932", "2": "2b8aef81-d2f9-4c72-af35-2f885d093fd3", "3": "8a2ad227-cd2d-40fc-a3e9-9612770984b0"}}, "__type__": "1"}, "8a2ad227-cd2d-40fc-a3e9-9612770984b0": {"__data__": {"text": "| --------------- | ------------------------------------------------------------ |\n| transfer | Hash160\uff08from\uff09 Hash160\uff08to\uff09 Integer\uff08amount\uff09 ByteArray\uff08tokenId\uff09 | Transfer  event | When the `from` address is set to `null` tokens are created; When the `to` address set to `null`tokens are burned. |\n\n## See also\n\n[NEP-11 Proposal](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki)\n\n[Nep11TokenState Source Code](https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11TokenState.cs)\n\n[Nep11Token Source Code](https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11Token.cs)\n\n[NeoVerse Document](https://github.com/chenzhitong/neoverse-readme)\n\n", "doc_id": "8a2ad227-cd2d-40fc-a3e9-9612770984b0", "embedding": null, "doc_hash": "aa450bb7e7ade40cb65b4375d274d5eb4019d3d8c98f8945c97334a7b1ee512f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep11"}, "node_info": {"start": 6827, "end": 7574, "_node_type": "1"}, "relationships": {"1": "087cba88d2bd09ac5aac93b7bdbb854dfcff4932", "2": "f95d4717-73a8-48c8-9386-91be0aa00483"}}, "__type__": "1"}, "43a2f4ed-2185-48e5-9e37-0a15911d022f": {"__data__": {"text": "# NEP-17\n\nThe NEP-17 proposal is a replacement of the original NEP5 proposal, which outlines a token standard for the Neo blockchain that will provide systems with a generalized interaction mechanism for tokenized Smart Contracts. \n\nNEP17 assets are recorded in the contract storage area, through updating account balance in the storage area, to complete the transaction.\n\nIn the method definitions below, we provide both the definitions of the functions as they are defined in the contract as well as the invoke parameters.\n\n**totalSupply**\n\n    {\n      \"name\": \"totalSupply\",\n      \"parameters\": [],\n      \"returntype\": \"Integer\"\n    }\n\nReturns the total token supply deployed in the system.\n\n**symbol**\n\n    {\n      \"name\": \"symbol\",\n      \"parameters\": [],\n      \"returntype\": \"String\"\n    }\n\nReturns a short string symbol of the token managed in this contract. e.g. \"MYT\". \n\nThis string MUST be valid ASCII, MUST NOT contain whitespace or control characters, SHOULD be limited to uppercase Latin alphabet (i.e. the 26 letters used in English) and SHOULD be short (3-8 characters is recommended). \n\nThis method MUST always return the same value every time it is invoked.\n\n**decimals**\n\n    {\n      \"name\": \"decimals\",\n      \"parameters\": [],\n      \"returntype\": \"Integer\"\n    }\n\nReturns the number of decimals used by the token - e.g. `8`, means to divide the token amount by `100,000,000` to get its user representation.\n\nThis method MUST always return the same value every time it is invoked.\n\n**balanceOf**\n\n    {\n      \"name\": \"balanceOf\",\n      \"parameters\": [\n        {\n          \"name\": \"account\",\n          \"type\": \"Hash160\"\n        }\n      ],\n      \"returntype\": \"Integer\"\n    }\n\nReturns the token balance of the `account`.\n\nThe parameter `account` MUST be a 20-byte address. If not, this method SHOULD `throw` an exception.\n\nIf the `account` is an unused address, this method MUST return `0`.\n\n**transfer**\n\n    {\n      \"name\": \"transfer\",\n      \"parameters\": [\n        {\n          \"name\": \"from\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"to\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"Integer\"\n        },\n        {\n          \"name\": \"data\",\n          \"type\": \"Any\"\n        }\n      ],\n      \"returntype\": \"Boolean\"\n    }\n\nTransfers an `amount` of tokens from the `from` account to the `to` account. \n\nThe parameters `from` and `to` MUST be 20-byte addresses. If not, this method SHOULD `throw` an exception.<br/>\n\nThe parameter `amount` MUST be greater than or", "doc_id": "43a2f4ed-2185-48e5-9e37-0a15911d022f", "embedding": null, "doc_hash": "6fcf464cc975b722ba310a54b1ee9a9d67c5999de16b709beebd04f8b7f3bbe3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep17"}, "node_info": {"start": 0, "end": 2555, "_node_type": "1"}, "relationships": {"1": "1d1b056f2f84976b57bb1a1f70428b3494d13c45", "3": "fefab0fe-4e71-47f5-af3f-76aeaf4b09d3"}}, "__type__": "1"}, "fefab0fe-4e71-47f5-af3f-76aeaf4b09d3": {"__data__": {"text": "exception.<br/>\n\nThe parameter `amount` MUST be greater than or equal to `0`. If not, this method SHOULD `throw` an exception.<br/>\n\nThe function MUST return `false` if the `from` account balance does not have enough tokens to spend.<br/>\n\nIf the method succeeds, it MUST fire the `Transfer` event, and MUST return `true`, even if the `amount` is `0`, or `from` and `to` are the same address.<br/>\n\nThe function SHOULD check whether the `from` address equals the caller contract hash. If so, the transfer SHOULD be processed; If not, the function SHOULD use the SYSCALL `Neo.Runtime.CheckWitness` to verify the transfer.<br/>\n\nIf the transfer is not processed, the function MUST return `false`.\n\nIf the receiver is a deployed contract, the function MUST call `onNEP17Payment` method on receiver contract with the `data` parameter from `transfer` AFTER firing the `Transfer` event. If the receiver doesn't want to receive this transfer it MUST call `ABORT`. \n\n**Transfer Event**\n\n    {\n      \"name\": \"Transfer\",\n      \"parameters\": [\n        {\n          \"name\": \"from\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"to\",\n          \"type\": \"Hash160\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"Integer\"\n        }\n      ]\n    }\n\nMUST trigger when tokens are transferred, including zero value transfers and self-transfers. <br/>\n\nA token contract which creates new tokens MUST trigger a `Transfer` event with the `from` address set to `null` when tokens are created.<br/>\n\nA token contract which burns tokens MUST trigger a `Transfer` event with the `to` address set to `null` when tokens are burned.\n\nNEP17 methods are as follows. For the complete code refer to [NEP-17 contract code](https://github.com/neo-project/examples/tree/master/csharp/NEP17).\n\n```cs\nusing Neo;\nusing Neo.SmartContract;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\nusing System;\nusing System.Numerics;\n\nnamespace Template.NEP17.CSharp\n{\n    public partial class NEP17 : SmartContract\n    {\n        public static BigInteger TotalSupply() => TotalSupplyStorage.Get();\n\n        public static BigInteger BalanceOf(UInt160 account)\n        {\n            if (!ValidateAddress(account)) throw new Exception(\"The parameters account SHOULD be a 20-byte non-zero address.\");\n            return AssetStorage.Get(account);\n        }\n\n        public static bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data)\n        {\n            if (!ValidateAddress(from) || !ValidateAddress(to)) throw new Exception(\"The parameters from and to SHOULD be 20-byte non-zero addresses.\");\n            if (amount <= 0) throw new Exception(\"The parameter amount MUST be greater than 0.\");\n            if", "doc_id": "fefab0fe-4e71-47f5-af3f-76aeaf4b09d3", "embedding": null, "doc_hash": "378cc3d599be146f2b2f2a76d5ff90068a2eec1bc69c39708c64b7ef37ce0633", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep17"}, "node_info": {"start": 2500, "end": 5285, "_node_type": "1"}, "relationships": {"1": "1d1b056f2f84976b57bb1a1f70428b3494d13c45", "2": "43a2f4ed-2185-48e5-9e37-0a15911d022f", "3": "d012161b-6378-44ae-b7e8-094eedd82479"}}, "__type__": "1"}, "d012161b-6378-44ae-b7e8-094eedd82479": {"__data__": {"text": "be greater than 0.\");\n            if (!Runtime.CheckWitness(from) && !from.Equals(ExecutionEngine.CallingScriptHash)) throw new Exception(\"No authorization.\");\n            if (AssetStorage.Get(from) < amount) throw new Exception(\"Insufficient balance.\");\n            if (from == to) return true;\n\n            AssetStorage.Reduce(from, amount);\n            AssetStorage.Increase(to, amount);\n\n            OnTransfer(from, to, amount);\n\n            // Validate payable\n            if (IsDeployed(to)) Contract.Call(to, \"onNEP17Payment\", new object[] { from, amount, data });\n            return true;\n        }\n    }\n}\n```\n\n## NEP-17 changes\n\nThis section summaries NEP-17 changes compared to the previous NEP-5 protocol.  \n\n### onNEP17Payment\n\n- The Transfer method should determine if the recipient is the deployed contract, and if so, call its `onNEP17Payment` method.\n\n- The FungibleToken (NeoToken, GasToken) of the native contract calls the `onNEP17Tokens` method when transferring assets. The NonfungibleToken calls the `onNEP11Tokens` method when transferring assets.\n\n- The TokenSale contract should implement the `onNEP17Payment` method to receive assets and modify the Manifest file to trust the received asset contract.\n\n\n### name method\n\nThe name method is moved to the manifest file, and you need to add `[DisplayName(\"Token Name\")]` when writing the contract.\n\n```cs\n[DisplayName(\"Token Name\")]\n[ManifestExtra(\"Author\", \"Neo\")]\n[ManifestExtra(\"Email\", \"dev@neo.org\")]\n[ManifestExtra(\"Description\", \"This is a NEP17 example\")]\n[SupportedStandards(\"NEP-17\")]\npublic partial class NEP17 : SmartContract\n{\n    [DisplayName(\"Transfer\")]\n    public static event Action<UInt160, UInt160, BigInteger> OnTransfer;\n\n    public static string Symbol() => \"TokenSymbol\";\n\n    public static ulong Decimals() => 8;\n    \n    //\u2026\u2026\n}\n```\n\n### Transfer event\n\nThe transfer event is changed to Transfer event (first letter capitalized).\n\n### IsPayable\n\nIn Neo Legacy, you should check the IsPayable checkbox when deploying contracts to receive NEP-5 assets.\n\nIn Neo N3.x, the payable check has been removed and the corresponding logic has been placed in the `onNEP17Payment` method.\n\nThe ability of the contract to receive assets has been changed from a fixed constant to the code logic within the contract.", "doc_id": "d012161b-6378-44ae-b7e8-094eedd82479", "embedding": null, "doc_hash": "12294023bfb7853bcf441482f8d0f39695651ad2d992e4607861481ce6e25f22", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep17"}, "node_info": {"start": 5305, "end": 7604, "_node_type": "1"}, "relationships": {"1": "1d1b056f2f84976b57bb1a1f70428b3494d13c45", "2": "fefab0fe-4e71-47f5-af3f-76aeaf4b09d3"}}, "__type__": "1"}, "964aaee7-176e-42cf-af16-3df016fbc9d8": {"__data__": {"text": "# Contract Update and Destroy\n\nSmart contracts support to be updated or destroyed after release. Before you can do that you need to implement the Update and Destroy interfaces in the old contracts.\n\n## Contract Update\n\nIn some cases you want to upgrade the smart contracts deployed on the blockchain or migrate the storage of a contract into another new contract, you need to update smart contracts. Neither the contract hash nor the storage is changed when the contract is upgraded.\n\n### Implementing the Update interface\nTo enable the update function, you need to implement the `Update` method in the contract. In the contract template this method has been implemented by default, as follows:\n\n```cs\npublic static bool Verify() => IsOwner();\n\npublic static void Update(ByteString nefFile, string manifest)\n{\n    if (!IsOwner()) throw new Exception(\"No authorization.\");\n    ContractManagement.Update(nefFile, manifest, null);\n}\n```\n\nIf you want to update the contract later, you must implement the `update` method in the contract prior to deployment. For more information, refer to [Deploying and Invoking Smart Contracts](../deploy/deploy.md).\n\n### Updating the contract\n1. Get the compiled NEF file and Manifest file of the new contract ready\n\n2. Base64-encode the NEF file with the tool like [File to Base64 online](https://www.hitoy.org/tool/file_base64.php)\n\n3. Compress and escape the Manifest file with the tool like [JSON compressed and escaped online](http://www.bejson.com/zhuanyi/)\n\n4. Use the invoke command to call the update method of the contract\n\n\nFor information about invoking the contract, refer to [Invoking contracts](../deploy/invoke.md).\n\n![](../assets/update.png)\n\nAfter the `update` method is executed, the contract is upgraded and neither the contract hash nor the storage area is changed.\n\n## Contract Destruction\n\nTo destroy a contract, you need to reserve the destruction method in the contract.\n\nTo use the contract destroy feature, you need to implement the destroy method in the original contract. The `destroy` method has been implemented by default in the contract template as follows.\n\n```cs\npublic static bool Verify() => IsOwner();\n\npublic static void Destroy()\n{\n    if (!IsOwner()) throw new Exception(\"No authorization.\");\n    ContractManagement.Destroy();\n}\n```\n\nThe Destroy method takes no arguments. When it is invoked, the contract and its storage, if any, are deleted. Then the contract is no longer available.\n\n\n\n", "doc_id": "964aaee7-176e-42cf-af16-3df016fbc9d8", "embedding": null, "doc_hash": "240d7f6d7ea833e27e4a2f1956f05cd577161042c36c6bd333d85d4418e3f33a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/update"}, "node_info": {"start": 0, "end": 2461, "_node_type": "1"}, "relationships": {"1": "5dcd04b94ed7f9869aaca5969d56dc46ce93826b"}}, "__type__": "1"}, "3dc7dd2a-0043-454a-b5e5-6749935979cb": {"__data__": {"text": "---\nsidebar_label: 'Using Neo-CLI'\nsidebar_position: 2\n---\n\n## Using Neo-CLI\n\nThe Neo-CLI client works as a node in the P2P network and meanwhile a cross-platform wallet handling various assets transactions. \n\n### Neo-CLI Security Policies\n\n:::caution\n\nThe exchange must use a white list or firewall to block external server requests; otherwise there will be a significant security risk.\n:::\n\nNeo-CLI does not provide the function to remotely switching on/off the wallet, and it does not verify the process when opening a wallet. Therefore, exchanges should set their own security policies. The wallet must be kept open all the time to respond to the withdrawal requests of users. For security reasons, the wallets should be run in an independent server on which the firewall is configured properly, as shown below. \n\n|                    | Mainnet | Testnet |\n| ------------------ | ------- | ------- |\n| JSON-RPC via HTTPS | 10331   | 20331   |\n| JSON-RPC via HTTP  | 10332   | 20332   |\n| P2P                | 10333   | 20333   |\n| websocket          | 10334   | 20334   |\n\n### About Neo-CLI\n\nNeo-CLI is a command-line client (wallet) for developers. Developers have two ways to interact with it\uff1a \n\n- Using the CLI (command-line interface) commands. For example, you can create a wallet, generate an address, etc.\n- Using the Remote Procedure Call (RPC). For example, you can transfer to the designated address, acquire the block information of the designated height, acquire the information of the designated trade, etc.\n\nNeo-CLI provides the following features\uff1a \n\n- As a wallet, manages assets through the command-line.\n\n  To enable the wallet\uff0center the following command under the Neo-CLI directory\uff1a\n\n\n  ```\n  dotnet neo-cli.dll\n  ```\n\n  To check all the available commands, enter the following command\uff1a\n\n  ```\n  help\n  ```\n\n  For more information, refer to [CLI Command Reference](../node/cli/cli).\n\n- Provides a set of RPC APIs in conjunction with the RpcServer plugin to retrieve blockchain data from nodes. The interfaces are provided through  [JSON-RPC](http://www.jsonrpc.org/specification)\uff0cand the underlying communications use HTTP/HTTPS protocols.\n\n  Before you can start a node which provides RPC service, you must has the plugin RpcServer installed with Neo-CLI installation.\n\n  For more API information, refer to [API Reference](../reference/rpc/latest-version/api).\n\n\n- Provides transaction information of NEP-17 assets.\n\n\n### Creating a Wallet\n\nThe exchange needs to create an online wallet to manage the deposit addresses of users. A wallet is used to store the information of the accounts (both public keys and private keys) and the contracts. It is the most important proof that the user holds. Users must keep the wallet files and the wallet passwords secure. They must not lose or disclose these data. Exchanges do not have to create a wallet for every address. An online wallet usually keeps all deposit addresses of users. A cold wallet (offline wallet) is another storage option which provides better security.\n\n:::note\n\nNeo-CLI supports wallets in two formats: the sqlite wallet (.db3) and the new [NEP6 standard](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki) wallet (.json). For exchanges the sqlite wallet is recommended.\n:::\n\nTo create a wallet, do the following\uff1a\n\n1. enter  `create wallet", "doc_id": "3dc7dd2a-0043-454a-b5e5-6749935979cb", "embedding": null, "doc_hash": "6182dec5a370b9038bc0ab8f67892b908f2f099a1e7f18c5ba5b98e467e10243", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/client"}, "node_info": {"start": 0, "end": 3345, "_node_type": "1"}, "relationships": {"1": "48356fe565bbd932fde769ce559c32191360ce94", "3": "f5d1543a-c420-4838-9f56-d96226c5db24"}}, "__type__": "1"}, "f5d1543a-c420-4838-9f56-d96226c5db24": {"__data__": {"text": "create a wallet, do the following\uff1a\n\n1. enter  `create wallet <path>`.\n\n   `path` is the wallet path and wallet file name. The file extension can be .db3 or .json, depending on the wallet type you are using, for example,  `create wallet /home/mywallet.db3`. If the file extension is not specified, the NEP6 format (.json) is used by default. \n\n2. Set a password for the wallet. \n\n### Generating Deposit Addresses\n\nA wallet can store multiple addresses. The exchange needs to generate a deposit address for each user. \n\nThere are two methods to generate deposit addresses: \n\n- When the user deposit (NEO/GAS) for the first time, the program dynamically generates a NEO address. The advantage is that there is no need to generate addresses at fixed time intervals, while the disadvantage is that it's not convenient for backup.\n\n  To develop the program to dynamically generate addresses, use the RpcServer API  [getnewaddress Method](../reference/rpc/latest-version/api/getnewaddress). The created address is returned.\n\n- The exchange creates a batch of NEO addresses in advance. When the user charges (NEO/GAS) for the first time, the exchange assigns a NEO address to him or her. The advantage is the convenience to backup the wallet, while the disadvantage is the need to generate NEO addresses manually.\n  To generate addresses in batch, run the NEO- CLI command `create address [n]`. The  addresses are exported automatically to the address.txt file.\n  [n] is optional. Its default value is 1. For example, to generate 100 addresses at a time, enter `create address 100`.\n\n\n:::note\n\nEither way, the exchange must import the addresses into the database and distribute them to users. It is generally recommend the exchange use the second way, so as to reduce the external controls and run the wallet more stably.\n:::", "doc_id": "f5d1543a-c420-4838-9f56-d96226c5db24", "embedding": null, "doc_hash": "207894e57cf363e202863d30756c316bc05bdb0afd4bdc3de79d127139a34666", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/client"}, "node_info": {"start": 3285, "end": 5102, "_node_type": "1"}, "relationships": {"1": "48356fe565bbd932fde769ce559c32191360ce94", "2": "3dc7dd2a-0043-454a-b5e5-6749935979cb"}}, "__type__": "1"}, "3f11ef0b-7f38-484e-9c52-5c7c2cbb07c8": {"__data__": {"text": "---\nsidebar_label: 'Deploying Neo Nodes'\nsidebar_position: 1\n---\n\n# Deploying Neo Nodes on Server\n\n## Install Neo client\n\n1. Install [.NET Core Runtime](https://www.microsoft.com/net/download/core#/runtime) on the server, 5.0 and the later version.\n2. From GitHub, download the [Neo-CLI](https://github.com/neo-project/neo-node/releases) program and enable the Neo node.\n\n## Install plugins\n\nSome additional functionalities are individually encapsulated in plug-ins for the purpose of improving node security, stability, and flexibility. For more information, refer to [Installing plugins](../node/cli/config#installing-plugins).\n\nGo to [here](https://github.com/neo-project/neo-modules/releases/) to download plugins. Exchanges need to install the following plugins to get the complete functionality of transaction log API and automatic synchronization with the offline package:\n\n- ApplicationLogs (Mandatory)\n- LevelDBStore (Preloaded)\n- RpcServer (Mandatory)\n- RpcNep17Tracker (Recommended)\n\nUnzip the plugin packages under the Neo-CLI root directory, as shown below, all the plugin files are extracted into the Plugins folder automatically. \n\n![PluginsForExchange.png](assets/PluginsForExchange.png)\n\nYou can also install plugins using CLI commands\uff1a\n\n```\ninstall ApplicationLogs\ninstall LevelDBStore\ninstall RpcServer\ninstall RpcNep17Tracker\n```\n\n:::note\n\n- The RpcServer plug-in must be installed before you can use the RpcNep17Tracker plug-in.\n- You must install the plugins ApplicationLogs and RpcNep17Tracker before synchronizing the Neo client, otherwise the log in the blocks synchronized before will be lost.\n:::\n\n## Modifying configuration files\n\nBefore running Neo-CLI, you need to make necessary configurations in the Neo-CLI configuration files. For more information, refer to [Configuring and Starting Neo-CLI](../node/cli/config.md).\n\n:::caution\n\nBe cautious to enable automatic opening of wallet. Before you do that, make sure your firewall is open and safe as Password specified in the file is in clear text.\n:::", "doc_id": "3f11ef0b-7f38-484e-9c52-5c7c2cbb07c8", "embedding": null, "doc_hash": "ac1bb412db302eead43eedffd0a193a2e551feb131e796efe5340bbfece78932", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/deploynode"}, "node_info": {"start": 0, "end": 2031, "_node_type": "1"}, "relationships": {"1": "954d2e2e6b9aa28c74e58588f4d02652894873eb"}}, "__type__": "1"}, "4f44b75c-a0a5-4a9f-b82f-014c45fd2709": {"__data__": {"text": "---\nsidebar_label: 'Distributing GAS to Users'\nsidebar_position: 4\n---\n\n# Distributing GAS to Users\n\nThe exchange can determine whether to distribute GAS to users. GAS is used to pay to the NEO blockchain for recording and additional services. \n\n## What is GAS ?\n\nGAS represents the right to use the Neo Blockchain. Once NEO is acquired, GAS will be generated in the system following the algorithms.\n\nIn Neo N3 every time a NEO transfer transaction occurs in the address, GASs generated since last time NEO transfer transaction are claimed automatically.\n\n## Calculating the claimed GAS amount\n\nClaimed *GAS = f(neo_amount, \u0394t_const)*\n\n\u0394t_const = t_end - t_start\n-  t_end = the current time that Neo is transferred into or out of the address. \n-  t_start = the last time that Neo was transferred into or out of the address. \n\n\u0394t_const is fixed, thus the claimed Gas is of a fixed amount too. And this amount depends on the amount of Neo held by the user and the duration between the moments that the user transferred this amount of Neo into and out of his or her address. \n\n## Distributing GAS to Users\n\nSuppose all the exchange addresses are stored in one wallet, the following chart demonstrates the procedure and computational formula how the exchange distributes GAS to the user A.\n\n\n![gasflow_en](assets/gasflow_en.png)\n\nThe shorter the snapshot interval, the more precise the calculation is. If the snapshot interval is not uniform, use the weighted average calculation method.\n\n:::note\n\nIn NEO N3, since exchange users cannot participate in voting, the fixed income is 10% of the total amount of GAS to be claimed. For details refer to [GAS distribution rule](../foundation/governance#gas-distribution-rule).\n:::\n\n## RPC methods\n\nThe following RPC method can be used to help exchanges query users' GAS information. For details, click the desired method link in the table below. \n\n| Method                                                       | Description                                             |\n| ------------------------------------------------------------ | ------------------------------------------------------- |\n| [getunclaimedgas](../reference/rpc/latest-version/api/getunclaimedgas.md) | Returns the unclaimed GAS amount in the current wallet. |\n\n## Claiming GAS\n\nGAS is claimed automatically after the user transfers NEO in or out of the address. For example, suppose you have NEO in address A without claiming GAS, when you transfer NEO to yourself (i.e. address A) then GAS is claimed automatically.\n\nThe following table lists the GAS claiming steps and corresponding commands.\n\n| #    | Steps                                                        | Command                                         |\n| ---- | :----------------------------------------------------------- | ----------------------------------------------- |\n| 1    | Run Neo-CLI                                                  | `dotnet neo-cli.dll`                 ", "doc_id": "4f44b75c-a0a5-4a9f-b82f-014c45fd2709", "embedding": null, "doc_hash": "31ca03445803dd595e74ab4c8734d44ddc4887d423c9ce34ea4a5ba9cc311e60", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/gas"}, "node_info": {"start": 0, "end": 2958, "_node_type": "1"}, "relationships": {"1": "cd0160a2d14c34413af91ee4424de68ca7f47c80", "3": "35bf0e91-edeb-48f9-9240-ee865cb17f3c"}}, "__type__": "1"}, "35bf0e91-edeb-48f9-9240-ee865cb17f3c": {"__data__": {"text": "                           |\n| 2    | Check the client version                                     | `version`                                       |\n| 3    | Check the synchronized height of the client ( Height: height/header height, Nodes: amount of connected nodes). | `show state`                                    |\n| 4    | Open a wallet                                                | `open wallet /home/NeoNode/test.json`           |\n| 5    | Check the addresses and assets in the wallet                 | `list asset`                                    |\n| 6    | Check the GAS balance in the wallet                          | `show gas`                                      |\n| 7    | Transfer NEO to your address\uff08e.g. NTdzVdQ8SmFobD1XWCA1fR9tQr7gFv1SXf\uff09 to claim the GAS automatically. | `send neo NTdzVdQ8SmFobD1XWCA1fR9tQr7gFv1SXf 1` |\n| 8    | Check the asset balance again.                               | `list asset`                                    |\n\n", "doc_id": "35bf0e91-edeb-48f9-9240-ee865cb17f3c", "embedding": null, "doc_hash": "05916847b7178ded7960b7281177bcb848f5186b59efb86cf37f94a456f9b66c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/gas"}, "node_info": {"start": 2942, "end": 3917, "_node_type": "1"}, "relationships": {"1": "cd0160a2d14c34413af91ee4424de68ca7f47c80", "2": "4f44b75c-a0a5-4a9f-b82f-014c45fd2709"}}, "__type__": "1"}, "f95841f2-c72d-4fc9-87b5-0c1534fc6d02": {"__data__": {"text": "---\nsidebar_label: 'Overview'\nsidebar_position: 0\n---\n\n# Introduction\n\nThis document is intended to guide exchange developers to set up Neo nodes on the exchange server and complete necessary programing tasks for Neo assets transactions. \n\nThis document contains the following topics\uff1a\n\n- [Deploying Neo nodes on server](deploynode.md)\n- [Using Neo-CLI to create wallets and deposit addresses](client.md)\n- [Dealing with asset transactions](transaction.md)\n- [Distributing GAS to users](gas.md)\n\n:::note\nDifferent versions of Neo-CLI are different in ways of interfacing with exchanges. Please note the version behavior differences before upgrading your client version.\n:::", "doc_id": "f95841f2-c72d-4fc9-87b5-0c1534fc6d02", "embedding": null, "doc_hash": "dce347c84f7bedaa91d9812ae0fe09456e90aa292cda66b22668f05ce222806f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/general"}, "node_info": {"start": 0, "end": 672, "_node_type": "1"}, "relationships": {"1": "34fb592983ffd82c7fc01a8e626cd98cb4d1ed2d"}}, "__type__": "1"}, "086656b4-ed8d-4443-840f-00054cf44388": {"__data__": {"text": "# Dealing with Asset Transactions\n\n## Overview\n\nNeo N3 has only one type of digital assets, i.e. NEP-17 assets, which are managed by BALANCE. The exchanges mainly deal with user balance queries,  deposits, withdrawals, and other operations of this type assets.\n\nFollowing flow charts show the work processes of these operations:\n\n![](assets/query.png)\n\n![](assets/deposit.png)\n\n![](assets/withdraw.png)\n\n## Network fee\n\nThe network fee, as a reward for the consensus nodes generating blocks, is charged when the user submits a transactions to Neo blockchain. There is a  base fee for each transaction and the calculation formula is shown below. The transaction is only executed if the fee paid by the user is greater than or equal to the base fee; otherwise, the transaction will be treated as invalid.  \n\n```\nNetworkFee = VerificationCost + tx.size * FeePerByte\n```\n\n- VerficationCost: Fees for instructions executed by NeoVM to verify transaction signatures.\n- tx.size: The transaction data byte length\n- FeePerByte: Transaction fee per byte, currently defined as 0.00001 GAS in PolicyContract.\n\n## System fee\n\nThe system fee is charged for the instructions executed by NeoVM. For each instruction fee refer to [System Fee](../fees.md). The total system fee you need to pay depends on the number and type of the instructions executed by your smart contract. The following figure shows the calculation formula:\n\n```\nSystemFee = InvocationCost = The sum of all executed opcode fee\n```\n\n### **Instructions fee**\n\nIn Neo N3, NeoVM instructions fee has decreased to 1/1000 of the original fee in Neo Legacy, which significantly reduces the development cost. \n\nIn comparison with Neo Legacy: \n\n![netfee](assets/feecomparewith2x.png)\n\n## Dealing with query transactions\n\nThe way for a exchange itself to query balance of the user deposit address is different than the way it deal with the user's request of balance querying. \n\n### Querying the user deposit address balance\n\nThe exchange needs to do the following:\n\n1. Construct JSON files to invoke either of the following RPC methods:\n   - getnep17balances (Plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases/) is required)\n   - invokefunction (Plugin [RpcServer](https://github.com/neo-project/neo-modules/releases/) is required)\n2. Send a `getnep17balances` request to the Neo RPC server to get the asset hash and amount.\n3. Send the invokefunction requests twice to the Neo RPC server to get the corresponding asset symbol and decimals, respectively.\n4. Calculate the user balance according to the returned values.\n\nTo query the balance of an asset for a particular user, use `invokefunction` to call the `balanceOf` method of asset.\n\n#### Invoking getnep17balances to query\n\nIn JSON, a general getnep17balances request body is in the following form: \n\n```json\n{\n\"jsonrpc\": \"2.0\",\n\"method\": \"getnep17balances\",\n\"params\": [\"NVfJmhP28Q9qva9Tdtpt3af4H1a3cp7Lih\"],\n\"id\": 1\n}\n```\n\nAfter sending the request you will get the following response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"balance\": [\n            {\n                \"asset_hash\":", "doc_id": "086656b4-ed8d-4443-840f-00054cf44388", "embedding": null, "doc_hash": "95783f8ddb7d6f407cf6fe14fc278cfe96bf43291fec89283e229fcf4c1109f5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 0, "end": 3138, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "3": "010f58d3-07bb-4439-ab8c-027ef41e2ac1"}}, "__type__": "1"}, "010f58d3-07bb-4439-ab8c-027ef41e2ac1": {"__data__": {"text": "              \"asset_hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n                \"amount\": \"2\",\n                \"last_updated_block\": 52675\n            },\n            {\n                \"asset_hash\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n                \"amount\": \"700000000\",\n                \"last_updated_block\": 52675\n            }\n        ],\n        \"address\": \"NVfJmhP28Q9qva9Tdtpt3af4H1a3cp7Lih\"\n    }\n}\n```\n\nAs we can see in the request above, there are two kinds of assets which hashes are \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\" and \"0xd2a4cff31913016155e38e474a2c06d08be276cf\". Now we need to call invokefunction to get symbol and decimals of the asset, which will be elaborated below.\n\nIn the example above the asset A symbol is NEO, decimals is 0, and the user A balance is 2 NEO.  For the asset B, its symbol is GAS, decimals is 8, and the balance is 700000000/10\u2078 GAS (7 GAS).\n\n#### Invoking invokefunction to query\n\nIn JSON, a general invokefunction request body is in the following form: \n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"script hash\",\n    \"method name\",\n    [\n      {\n        \"optional arguments\"\n      }\n    ]\n  ],\n  \"id\": 1\n}\n```\n\nYou need to replace these strings when querying the user's balance:\n\n- script hash\n\n  The script hash of the NEP-17 asset you are querying. For example:\n  \n  - NEO is *0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5*\n  - GAS is *0xd2a4cff31913016155e38e474a2c06d08be276cf*\n\n\n- method name\n\n  The name of the method you are invoking. To query the user's balance, you need to invoke these three methods:\n\n  **balanceOf**\n\n  - Syntax: `public static BigInteger balanceOf(byte[] account)`\n  - Remarks: \"balanceOf\" returns the token balance of the '''account'''.\n\n  **decimals**\n\n  - Syntax: `public static byte decimals()`\n  - Remarks: \"decimals\" returns the number of decimals used by the token.\n\n  **symbol**\n\n  - Syntax: `public static string symbol()`\n  - Remarks: \"symbol\" returns the token symbol.\n\n\n- optional arguments\n\n  Optional. If the method you are invoking requires arguments, you can pass them by constructing these parameters into an array. For example, \"balanceOf\" in NEP-17 returns the token balance of the \"account\":\n\n  `public static BigInteger balanceOf(byte[] account)`\n\n  So you need to pass the account as an argument in the \"balanceOf\" method.\n\n##### Example\n\n##### **Invoking balanceOf**\n\nSuppose the account address is", "doc_id": "010f58d3-07bb-4439-ab8c-027ef41e2ac1", "embedding": null, "doc_hash": "d3473db5ccc2e8d62b7c4365f5df3d57eb058482bca59131085f0c8a56c99ed3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 3126, "end": 5580, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "086656b4-ed8d-4443-840f-00054cf44388", "3": "9666ed64-6350-44dc-bcf5-c9004e769eb1"}}, "__type__": "1"}, "9666ed64-6350-44dc-bcf5-c9004e769eb1": {"__data__": {"text": "Example\n\n##### **Invoking balanceOf**\n\nSuppose the account address is NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag, you need to convert it into Hash160 type and construct this parameter as a JSON object:\n\n```json\n{\n    \"type\": \"Hash160\",\n    \"value\": \"0x762f8a2bf0e8673c64cc608ba69b9c2a946a188f\"\n}\n```\n\nThen you can construct the JSON message as the following:\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n    \"balanceOf\",\n    [\n      {\n        \"type\": \"Hash160\",\n        \"value\": \"0x762f8a2bf0e8673c64cc608ba69b9c2a946a188f\"\n      }\n    ]\n  ],\n  \"id\": 3\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"DBSPGGqUKpybpotgzGQ8Z+jwK4ovdhHAHwwJYmFsYW5jZU9mDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"2028330\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"1938845793634190\"\n            }\n        ]\n    }\n}\n```\n\nTo get the balance divide the returned value by decimals, without needing of data conversion.\n\n##### **Invoking decimals**\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n    \"decimals\",\n    []\n    ],\n  \"id\": 2\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"wh8MCGRlY2ltYWxzDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"984060\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Integer\",\n                \"value\": \"8\"\n            }\n        ]\n    }\n}\n```\n\nIt returns integer", "doc_id": "9666ed64-6350-44dc-bcf5-c9004e769eb1", "embedding": null, "doc_hash": "133c0559434e51e876de6a7e883fb150301ff5688c985bd9e9e4ffa3d4fc92dc", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 5531, "end": 7392, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "010f58d3-07bb-4439-ab8c-027ef41e2ac1", "3": "5f438397-3ebd-4e7a-b92f-10e758e5d515"}}, "__type__": "1"}, "5f438397-3ebd-4e7a-b92f-10e758e5d515": {"__data__": {"text": "   ]\n    }\n}\n```\n\nIt returns integer 8.\n\n##### **Invoking symbol**\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokefunction\",\n  \"params\": [\n    \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n    \"symbol\",\n    []\n  ],\n  \"id\": 3\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"wh8MBnN5bWJvbAwUz3bii9AGLEpHjuNVYQETGfPPpNJBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"984060\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"ByteString\",\n                \"value\": \"R0FT\"\n            }\n        ]\n    }\n}\n```\n\nIt returns \"R0FT\" which can be decoded to \"GAS\".\n\n##### **Calculating the User Balance**\n\nAccording to all the returned values,  we can calculate the user balance as follows:\nThe balance = return / 10<sup>decimals</sup>\n\n### Dealing with users' queries\n\nThe actual user balance in the exchange is recorded in the exchange database. The exchange needs to write programs to monitor each transaction of each block, record all deposits and withdrawals transactions in the database, and modify the user balance in the database accordingly.\n\n## Dealing with User Deposits\n\nTo get the user deposits information the exchange needs to do the following:\n\n1. Get each block details using the `getblock` API, including details of all the transactions in the block.\n2. Invoke the `getapplicationlog` API to get the details of each \"InvocationTransaction\" transaction and analyze the transaction content to complete the user deposit.\n\n### Invoking getapplicationlog\n\nThis API is used to get transaction information.\n\nAfter correctly installing the ApplicationLogs plug-in and starting the neo-cli node, you can find a folder \"ApplicationLogs\" is generated under the root path. The complete contract log is recorded in this directory, and each NEP-17 transaction is recorded in a leveldb file.\n\nThe following shows an example of the API invoking result. \n\n```JSON\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"txid\": \"0xd9aaa1243cae91e063a140239807a9de45f82850130ec36403f44770955dd2d7\",\n        \"trigger\": \"Application\",\n        \"vmstate\": \"HALT\",\n        \"gasconsumed\": \"11819770\",\n        \"stack\": [],\n        \"notifications\": [\n            {\n                \"contract\": \"0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\",\n                \"eventname\": \"Transfer\",\n               ", "doc_id": "5f438397-3ebd-4e7a-b92f-10e758e5d515", "embedding": null, "doc_hash": "f820f01d1c8bab385a62791f4e0d2589d7654fc1fcaf468f7fb9477764cc20b6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 7429, "end": 9880, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "9666ed64-6350-44dc-bcf5-c9004e769eb1", "3": "14474659-aaf5-4e5d-8b82-982327072a73"}}, "__type__": "1"}, "14474659-aaf5-4e5d-8b82-982327072a73": {"__data__": {"text": "\"Transfer\",\n                \"state\": {\n                    \"type\": \"Array\",\n                    \"value\": [\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\"\n                        },\n                        {\n                            \"type\": \"ByteString\",\n                            \"value\": \"7ztGBn8vR7L38EQqojcghdCHCO8=\"\n                        },\n                        {\n                            \"type\": \"Integer\",\n                            \"value\": \"800000000000\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n:::note\n\nThis example shows the log of a successful token transfer, however, in case of a failed transfer or NeoVM exception, the outcomes can be:\n\n- Failed transfer: no Transfer notification event is returned, execution ends in a `HALT` state with a stack value of `False`.\n- NeoVM exception: a Transfer notification event may or may not be returned, but execution ends in a `FAULT` state.\n\n:::\n\nThe parameters related to a transaction in the file are the following:\n\n- **contract**: the script hash of smart contract. For exchanges, it is the script hash of NEP17 assets type and the unique identity of the asset. For example, here \"0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\" is the NEP17 asset script hash.\n\n- **eventname**: the event identifier of smart contact. Exchanges only need to listen on \u201ctransfer\u201d transactions to find out users' transfer transactions. There may be more than one eventname in the Notifications array, and only those with the Transfer keyword are NEP17 Transfer data.\n\n- **state**: The objects included in the array are:\n\n  - from account: The first object in the array is the account address where the asset is transferred from. Its type \"bytearray\" and the value \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\u201c can be  decoded to \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\" with base64. \n\n    :::note\n    \n    In Neo, hexadecimal strings are processed in big-endian order if they are preceded by 0x, or little-endian order if they are not.\n  ", "doc_id": "14474659-aaf5-4e5d-8b82-982327072a73", "embedding": null, "doc_hash": "f5ffbf61ce5e9ccd0958606c8f257c6858720efb0615486dbd0516107eb6b066", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 9896, "end": 12023, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "5f438397-3ebd-4e7a-b92f-10e758e5d515", "3": "4b8cb1e1-e5d3-42ff-8517-e44c6b353412"}}, "__type__": "1"}, "4b8cb1e1-e5d3-42ff-8517-e44c6b353412": {"__data__": {"text": "by 0x, or little-endian order if they are not.\n    :::\n    \n    ```json\n    {\n    \"type\": \"ByteString\",\n      \"value\": \"uXtKzX+CD2HS1NT5rqXrUEmN31U=\"\n    }\n    ```\n\n  - to account: The second object in the array is the account address where the asset is transferred to.  Its type \"bytearray\" and the value \"7ztGBn8vR7L38EQqojcghdCHCO8=\u201c can be decoded to \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\" with base64. If the address is an exchange account address, it is a deposit transaction.\n  \n    ```json\n    {\n    \"type\": \"ByteString\",\n      \"value\": \"7ztGBn8vR7L38EQqojcghdCHCO8=\"\n    }\n    ```\n  \n  - amount: The last object in the array is the transfer amount, which value is 800000000000. Since the decimal is 8 bit the value is actually 8000.00000000.\n  \n    ```\n    {\n      \"type\": \"Integer\",\n      \"value\": \"800000000000\"\n    }\n    ```\n    \n\n:::note\n\nRegarding the data format conversion of the transfer in the file, you can refer to [Neo3 data conversion](https://neo.org/converter/index).\n:::\n\n## Dealing with User Withdrawals\n\nThe exchange can choose one of the following way to send assets to users: \n\n- Neo-CLI command: `send`\n- RPC method: `sendfrom`\n- RPC method: `sendtoaddress`\n- RPC method: `sendmany`\n\n### Neo-CLI Command: send\n\n##### Syntax\n\n`send <id|alias> <address> <amount>|all [from=null] [signerAccounts=null]`\n\n##### Parameters\n\n- `id|alias`: asset ID or asset abbreviations, e.g. neo, gas\n- `address`: address to transfer assets to\n- `amount|all`: transfer amount\n- `from`: address to transfer assets from\n- `signerAccounts`: signer's address\n\n\nThis command verifies the wallet password. \n\n##### Example\n\nTransfer 100 Neo to the address NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag: \n\n```\nneo> send a1760976db5fcdfab2a9930e8f6ce875b2d18225 NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag 100\npassword: ********\nTXID: 0x8f831d8de723093316c05749a053a226514bc06338b2bceb50db690610e0b92f\n```\n\nIf you are not sure of the asset ID, you can enter `list asset` to view all assets in the wallet.\n\nIn above example, we can also replace the asset ID with asset abbreviation, as shown below:\n\n```\nneo> send gas NYxb4fSZVKAz8YsgaPK2WkT3KcAE9b3Vag 100\npassword: ********\nTXID: 0xae0675797c2d738dcadb21cec3f1809ff453ac291046a05ac679cbd95b79c856\n```\n\n### RPC Method: openwallet\n\n:::note\n\nBefore you can invoke any of the wallet-related RPC methods you must invoke the method `openwallet` first.\n:::\n\nThe key \"params\" includes an array of two parameters.\n\n`\"params\":[path\uff0c", "doc_id": "4b8cb1e1-e5d3-42ff-8517-e44c6b353412", "embedding": null, "doc_hash": "44e9428d184a88923ad75e9ba5b5509a8961bb11aaf51173bad05dcfc5c68aa3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 11997, "end": 14448, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "14474659-aaf5-4e5d-8b82-982327072a73", "3": "28f3966b-4344-4e4d-89b7-592398f83560"}}, "__type__": "1"}, "28f3966b-4344-4e4d-89b7-592398f83560": {"__data__": {"text": "includes an array of two parameters.\n\n`\"params\":[path\uff0c password]`\n\nFor example, to open the wallet `a.json` with a password `111111`, you can construct a JSON file as follows and send it to RPC server.\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"openwallet\",\n  \"params\": [\"a.json\", \"111111\"],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}\n\n```\n\n### RPC Method: sendfrom\n\nThe key \"params\" includes an array of four parameters.\n\n`\"params\":[script hash, address from, address to, amount]`\n\nFor example, to send 10 NEO from NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o to  Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z, construct a JSON file as follows and send it to RPC server.\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendfrom\",\n  \"params\": [\"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\", 10],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x2dad82755c3b3e3233c10a49402bea9b8bb3f43b079102bbc3c5a50c3b522137\",\n        \"size\": 264,\n        \"version\": 0,\n        \"nonce\": 1073258915,\n        \"sender\": \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        \"sysfee\": \"9007990\",\n        \"netfee\": \"1264390\",\n        \"validuntilblock\": 2107189,\n        \"attributes\": [\n            {\n                \"type\": \"Cosigner\",\n                \"account\": \"0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"script\": \"GgwU7ztGBn8vR7L38EQqojcghdCHCO8MFLl7Ss1/gg9h0tTU+a6l61BJjd9VE8AMCHRyYW5zZmVyDBQlBZ7LSHjTqHX5HFHO3tMw1Fdf3kFifVtSOA==\",\n        \"witnesses\": [\n            {\n                \"invocation\":", "doc_id": "28f3966b-4344-4e4d-89b7-592398f83560", "embedding": null, "doc_hash": "a67fb73f0ee066cb8a6e74806d83f0f924fc87f56a56e2172d031e4849c8c5f3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 14439, "end": 16288, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "4b8cb1e1-e5d3-42ff-8517-e44c6b353412", "3": "01520c43-86e8-4eb3-b5f2-d9ca4da2ba4e"}}, "__type__": "1"}, "01520c43-86e8-4eb3-b5f2-d9ca4da2ba4e": {"__data__": {"text": "               \"invocation\": \"DEBL7Fxz2ZyIgtz+kESSs8YjbJd5dcc13gpxOwrLjU+WiIa0fuFQSgHXM75S1Z21wDMvEirUHpU1rIYylfnQH6Ul\",\n                \"verification\": \"DCECTLb+CYh0tAkrQbRliAmdLaB5NLR0FqIWxgiCPlnz/B4LQZVEDXg=\"\n            }\n        ]\n    }\n}\n```\n\n### RPC Method: sendtoaddress\n\nThe key \"params\" includes an array of three parameters. \n\n`\"params\":[script hash, address, amount]`\n\nFor example, to send 1000 GAS to Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z , construct a JSON file as follows and send it to RPC server.\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendtoaddress\",\n  \"params\": [\"0x70e2301955bf1e74cbb31d18c2f96972abadb328\", \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\", 1000],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xda4de7d6fc3bcd0eba51a3dcba01eaba7d59467acf91525c5f3f0b56df06aec8\",\n        \"size\": 272,\n        \"version\": 0,\n        \"nonce\": 1325103139,\n        \"sender\": \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        \"sysfee\": \"9007990\",\n        \"netfee\": \"1272390\",\n        \"validuntilblock\": 2107253,\n        \"attributes\": [\n            {\n                \"type\": \"Cosigner\",\n                \"account\": \"0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"script\": \"AwDodkgXAAAADBTvO0YGfy9HsvfwRCqiNyCF0IcI7wwUuXtKzX+CD2HS1NT5rqXrUEmN31UTwAwIdHJhbnNmZXIMFLyvQdaEx9StbuDZnalwe50fDI5mQWJ9W1I4\",\n        \"witnesses\": [\n            {\n                \"invocation\":", "doc_id": "01520c43-86e8-4eb3-b5f2-d9ca4da2ba4e", "embedding": null, "doc_hash": "0f27771e5c9d7ae2d3adf6a4f5dea0db5157379b50fc9ca7e87149af71f8de1b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 16325, "end": 17892, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "28f3966b-4344-4e4d-89b7-592398f83560", "3": "61169db3-1c07-48bc-89d2-9fd777d20f96"}}, "__type__": "1"}, "61169db3-1c07-48bc-89d2-9fd777d20f96": {"__data__": {"text": "               \"invocation\": \"DEBd+BDi7LWMQ5zzWxmzvH9zsO9fRZpdqn9SqnyEfSzazVnFsUlDJG7ik79epcqpF+IWGQJM1lS1oDeI4Eh/Yq04\",\n                \"verification\": \"DCECTLb+CYh0tAkrQbRliAmdLaB5NLR0FqIWxgiCPlnz/B4LQZVEDXg=\"\n            }\n        ]\n    }\n}\n```\n\n### RPC Method: sendmany\n\nThe key \"params\" includes an array of at least two parameter:\n\n`\"params\":[address from(optional), []]`\n\nFor example, to send 100 NEO and 1000 GAS to Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z  from NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o, you can construct a JSON file as follows and send it to RPC server.\n\nRequest Body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"sendmany\",\n    \"params\": [\n    \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        [\n            {\n                \"asset\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"value\": 100,\n                \"address\": \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\"\n            },\n            {\n                \"asset\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"value\": 1000,\n                \"address\": \"Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z\"\n            }\n        ]\n    ],\n    \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xea4564840441713481363ffc0b3e2df95e5319af4d5da4189603c2333d6702f5\",\n        \"size\": 358,\n        \"version\": 0,\n        \"nonce\": 93745276,\n        \"sender\": \"NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\",\n        \"sysfee\": \"18015980\",\n        \"netfee\": \"1358390\",\n        \"validuntilblock\": 2107284,\n        \"attributes\": [\n            {\n          ", "doc_id": "61169db3-1c07-48bc-89d2-9fd777d20f96", "embedding": null, "doc_hash": "eaf041a0f41e77fb817d030f8fd33c98f24346f875f8a49ebff42f6852e75352", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 17893, "end": 19509, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "01520c43-86e8-4eb3-b5f2-d9ca4da2ba4e", "3": "495b7d15-c728-465b-8d22-b06559d50056"}}, "__type__": "1"}, "495b7d15-c728-465b-8d22-b06559d50056": {"__data__": {"text": "        {\n                \"type\": \"Cosigner\",\n                \"account\": \"0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"script\": \"AGQMFO87RgZ/L0ey9/BEKqI3IIXQhwjvDBS5e0rNf4IPYdLU1PmupetQSY3fVRPADAh0cmFuc2ZlcgwUJQWey0h406h1+RxRzt7TMNRXX95BYn1bUjgDAOh2SBcAAAAMFO87RgZ/L0ey9/BEKqI3IIXQhwjvDBS5e0rNf4IPYdLU1PmupetQSY3fVRPADAh0cmFuc2ZlcgwUvK9B1oTH1K1u4NmdqXB7nR8MjmZBYn1bUjg=\",\n        \"witnesses\": [\n            {\n                \"invocation\": \"DEA1J31Wq9CS6s7Zyzv71jS/LXbJroKgzMhTk176KaCNDBIas5kqBgsv0hHVxetxdwnapXU7Cui/9PlHr3fZNPf3\",\n                \"verification\": \"DCECTLb+CYh0tAkrQbRliAmdLaB5NLR0FqIWxgiCPlnz/B4LQZVEDXg=\"\n            }\n        ]\n    }\n}\n```\n\n## See Also\n\n[NEP17 Token Standard](https://github.com/neo-project/proposals/blob/nep-17/nep-17.mediawiki)\n\n[Neo3 Data Conversion](https://neo.org/converter/index)\n", "doc_id": "495b7d15-c728-465b-8d22-b06559d50056", "embedding": null, "doc_hash": "a7bb3dbdc7dbe490d9c355a841109b184f41f0067f9f8816456d0e46f6103c52", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}, "node_info": {"start": 19502, "end": 20401, "_node_type": "1"}, "relationships": {"1": "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631", "2": "61169db3-1c07-48bc-89d2-9fd777d20f96"}}, "__type__": "1"}, "3984b0cc-271b-4b99-9714-ad68d3800388": {"__data__": {"text": "---\nsidebar_label: 'Fees'\n---\n\n# Fees\n\nParticipants in Neo ecosystem need to pay network fees and system fees with GAS when using the Neo network.\n\nSystem fees are the cost of resources consumed by the transaction execution in NeoVM. The execution of smart contracts, including the execution of its own scripts and the invocation of other contracts, requires system fees.\n\nNetwork fee is the fee to pack transactions into a block. Transactions that deploy and invoke smart contracts on the blockchain and execute the Verify method requires network fees. \n\nTherefore, a smart contract invocation transaction requires both system fee and network fee. The sysfee is burned for each transaction and the netfee is rewarded to the consensus address that packed the current block.\n\nFees in Neo3 can be dynamically changed. In this document we only introduce the basic fees. \n\n## System fees\n\nSystem fees include:\n\n- Instruction fee (OpCode)\n- SysCall fee\n- CPU processing fee for native contracts\n- Storage fee\n\n\n### Instruction fee\n\n| Fee\uff08GAS\uff09 | OpCode                                                       |\n| ---------- | ------------------------------------------------------------ |\n| 0.00032768 | CALLT                                                        |\n| 0.00008192 | APPEND, REVERSEITEMS, SETITEM, VALUES                        |\n| 0.00004096 | PUSHDATA4                                                    |\n| 0.00002048 | CAT, CONVERT, LEFT, MEMCPY, RIGHT, SUBSTR                    |\n| 0.00000512 | CALL, CALL_L, CALLA, NEWARRAY, NEWARRAY_T, NEWSTRUCT, PACK, PUSHDATA2, THROW, UNPACK |\n| 0.00000256 | NEWBUFFER                                                    |\n| 0.00000064 | HASKEY, INITSLOT, PICKITEM                                   |\n| 0.00000032 | EQUAL, NOTEQUAL                                              |\n| 0.00000016 | CLEAR, CLEARITEMS, INITSSLOT, KEYS, NEWARRAY0, NEWSTRUCT0, POPITEM, REMOVE, REVERSEN, ROLL, XDROP |\n| 0.00000008 | ADD, AND, BOOLAND, BOOLOR, DIV, GE, GT, LE, LT, MAX, MIN, MOD, MUL, NEWMAP, NUMEQUAL, NUMNOTEQUAL, OR, PUSHDATA1, SHL, SHR, SUB, WITHIN, XOR |\n| 0.00000004 | ABS, DEC, ENDFINALLY, ENDTRY, ENDTRY_L, INC, INVERT, NEGATE, NOT, NZ, PUSHA, PUSHINT128, PUSHINT256, SIGN, SIZE, TRY, TRY_L |\n| 0.00000002 | DEPTH, DROP, DUP,", "doc_id": "3984b0cc-271b-4b99-9714-ad68d3800388", "embedding": null, "doc_hash": "0836792065fd5d06f5e6e7583400eca2135ad68bea1c1a03041d3ad45541d518", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 0, "end": 2275, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "3": "3827e5cd-1f1a-4dee-8afe-79c069f9c45e"}}, "__type__": "1"}, "3827e5cd-1f1a-4dee-8afe-79c069f9c45e": {"__data__": {"text": "TRY_L |\n| 0.00000002 | DEPTH, DROP, DUP, ISNULL, ISTYPE, JMP, JMP_L, JMPEQ, JMPEQ_L, JMPGE, JMPGE_L, JMPGT, JMPGT_L, JMPIF, JMPIF_L, JMPIFNOT, JMPIFNOT_L, JMPLE, JMPLE_L, JMPLT, JMPLT_L, JMPNE, JMPNE_L, LDARG, LDARG0, LDARG1, LDARG2, LDARG3, LDARG4, LDARG5, LDARG6, LDLOC, LDLOC0, LDLOC1, LDLOC2, LDLOC3, LDLOC4, LDLOC5, LDLOC6, LDSFLD, LDSFLD0, LDSFLD1, LDSFLD2, LDSFLD3, LDSFLD4, LDSFLD5, LDSFLD6, NIP, OVER, PICK, REVERSE3, REVERSE4, ROT, STARG, STARG0, STARG1, STARG2, STARG3, STARG4, STARG5, STARG6, STLOC, STLOC0, STLOC1, STLOC2, STLOC3, STLOC4, STLOC5, STLOC6, STSFLD, STSFLD0, STSFLD1, STSFLD2, STSFLD3, STSFLD4, STSFLD5, STSFLD6, SWAP, TUCK |\n| 0.00000001 | ASSERT, NOP, PUSH0, PUSH1, PUSH10, PUSH11, PUSH12, PUSH13, PUSH14, PUSH15, PUSH16, PUSH2, PUSH3, PUSH4, PUSH5, PUSH6, PUSH7, PUSH8, PUSH9, PUSHINT16, PUSHINT32, PUSHINT64, PUSHINT8, PUSHM1, PUSHNULL, PUSHT, PUSHF |\n| 0          | ABORT, RET, SYSCALL                                          |\n\nReference: [ApplicationEngine.OpCodePrices.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.OpCodePrices.cs)\n\n### System call fee\n\n| **Interop Service**                   | Fee\uff08GAS\uff09                                               |\n| ------------------------------------- | -------------------------------------------------------- |\n| System.Contract.Call                  | 0.00032768                                               |\n| System.Contract.CallNative            | Refer to native contract fee                             |\n| System.Contract.IsStandard            | 0.00001024                                               |\n| System.Contract.GetCallFlags          | 0.00001024                                               |\n| System.Contract.CreateStandardAccount | 0.00000256             ", "doc_id": "3827e5cd-1f1a-4dee-8afe-79c069f9c45e", "embedding": null, "doc_hash": "0126637ad0e195fc004bf4bfc32773465338ea308c345ef0df068e8733643917", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 2242, "end": 4045, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "2": "3984b0cc-271b-4b99-9714-ad68d3800388", "3": "dcf7b495-ba31-4759-b620-93897dfda7d6"}}, "__type__": "1"}, "dcf7b495-ba31-4759-b620-93897dfda7d6": {"__data__": {"text": "| 0.00000256                                               |\n| System.Contract.CreateMultisigAccount | 0.00000256                                               |\n| Neo.Crypto.CheckSig                   | 0.00032768                                               |\n| Neo.Crypto.CheckMultisig              | Dynamically calculated based on the number of signatures |\n| System.Iterator.Create                | 0.00000016                                               |\n| System.Iterator.Next                  | 0.00032768                                               |\n| System.Iterator.Value                 | 0.00000016                                               |\n| System.Runtime.Platform               | 0.00000008                                               |\n| System.Runtime.GetTrigger             | 0.00000008                                               |\n| System.Runtime.GetTime                | 0.00000008                                               |\n| System.Runtime.GetScriptContainer     | 0.00000008                                               |\n| System.Runtime.GetExecutingScriptHash | 0.00000016                                               |\n| System.Runtime.GetCallingScriptHash   | 0.00000016                                               |\n| System.Runtime.GetEntryScriptHash     | 0.00000016                                               |\n| System.Runtime.CheckWitness           | 0.00001024                                      ", "doc_id": "dcf7b495-ba31-4759-b620-93897dfda7d6", "embedding": null, "doc_hash": "7f14eb08f58aa5240f03ddced8bd8969921d3a898579146f41a3e4fd916b6846", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 4069, "end": 5533, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "2": "3827e5cd-1f1a-4dee-8afe-79c069f9c45e", "3": "d7cafc5b-344e-428f-bcc8-070856a69c31"}}, "__type__": "1"}, "d7cafc5b-344e-428f-bcc8-070856a69c31": {"__data__": {"text": "                            |\n| System.Runtime.GetInvocationCounter   | 0.00000016                                               |\n| System.Runtime.Log                    | 0.00032768                                               |\n| System.Runtime.Notify                 | 0.00032768                                               |\n| System.Runtime.GetNotifications       | 0.00000256                                               |\n| System.Runtime.GasLeft                | 0.00000016                                               |\n\nReference:\n\n[ApplicationEngine.Contract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Contract.cs)\n\n[ApplicationEngine.Crypto.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Crypto.cs)\n\n[ApplicationEngine.Contract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Contract.cs)\n\n[ApplicationEngine.Iterator.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Iterator.cs)\n\n[ApplicationEngine.Runtime.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Runtime.cs)\n\n[ApplicationEngine.Storage.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Storage.cs)\n\n### Native contract execution fee\n\n| Native Contract    | Method                  | Fee\uff08GAS\uff09                                                   |\n| ------------------ | ----------------------- | ------------------------------------------------------------ |\n| ContractManagement | Deploy                  | Refer to storage fee. Minimum is  10 GAS.                    |\n| ContractManagement | Update                  | Refer to storage fee                                         |\n| LedgerContract     | GetTransactionFromBlock | 0.00065536                                                   |\n| NeoToken           | UnclaimedGas            |", "doc_id": "d7cafc5b-344e-428f-bcc8-070856a69c31", "embedding": null, "doc_hash": "9e49dd5be0c3db8a55a3c06f9fb01664777a384ec5838958746fc067c173a0b4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 5545, "end": 7524, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "2": "dcf7b495-ba31-4759-b620-93897dfda7d6", "3": "54dd3c43-df98-4776-a98e-b4b538197101"}}, "__type__": "1"}, "54dd3c43-df98-4776-a98e-b4b538197101": {"__data__": {"text": "    | UnclaimedGas            | 0.00131072                                                   |\n| NeoToken           | RegisterCandidate       | Calculated dynamically. Default is 1000 GAS                  |\n| NeoToken           | UnregisterCandidate     | 0.00065536                                                   |\n| NeoToken           | Vote                    | 0.00065536                                                   |\n| NeoToken           | GetCandidates           | 0.04194304                                                   |\n| NeoToken           | GetCommittee            | 0.04194304                                                   |\n| NeoToken           | GetNextBlockValidators  | 0.04194304                                                   |\n| NeoToken\u3001GasToken | Transfer                | 0.00131072                                                   |\n| OracleContract     | Request                 | Calculated dynamically. The user specifies the fee when invoking. |\n| StdLib             | Deserialize             | 0.00008192                                                   |\n| StdLib             | JsonDeserialize         | 0.00008192                                                   |\n| StdLib             | Other                   | 0.00002048                                                   |\n\nThe fee for other native contract methods not listed is 0.00032768 GAS.\n\nReference:", "doc_id": "54dd3c43-df98-4776-a98e-b4b538197101", "embedding": null, "doc_hash": "2a5ac02454838952faac5a73aa6a26005e3cb13f222a7a157787f39e3974e00e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 7511, "end": 8926, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "2": "d7cafc5b-344e-428f-bcc8-070856a69c31", "3": "e24526b5-d36b-458d-941b-b8ec0e3a78e8"}}, "__type__": "1"}, "e24526b5-d36b-458d-941b-b8ec0e3a78e8": {"__data__": {"text": "other native contract methods not listed is 0.00032768 GAS.\n\nReference: [neo/SmartContract/Native](https://github.com/neo-project/neo/tree/master/src/neo/SmartContract/Native)\n\n### Storage fee\n\nThe storage fee is charged according to the written byte. The default unit price is 0.001 GAS / Byte. Committee members can dynamically adjust the fee, and the upper limit is 1 GAS / Byte.\n\nFor the key data written to the storage, the fee charged for the first time write-in and the subsequent write-in are different. See the following table for details.\n\n| Scenarios                                          | Charging Rule                                                | Example                                                      | Fee<br/>(Based on unit price 0.001)   |\n| -------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------- |\n| First-time write in                                | (key.Length + value.Length) \u00d7 unit price                     | key = `key`, value= `hello world`, totally 14 bytes          | **0.014** GAS                         |\n| Subsequent write in. New data size \u2264 Old data size | No fee for key. The first byte of the value is normally charged, and the remaining bytes are charged at a 75% discount | The value modified as `hello neo3`, totally 10 bytes         | (1+(10-1)/4 )\u00d70.001 = **0.003** GAS   |\n| Subsequent write in. New data size > Old data size | The previous fee plus the new data byte fee (i.e. new data byte \u00d7 unit price) | The value modified as `hello neo3.0`, totally 12 bytes       | 0.003 + (12-10)\u00d70.001 = **0.005** GAS |\n| Subsequent write in. New data size > Old data size | The same as above line                                       | The value modified as `hello neo3.0 preview5`, totally 21 bytes | 0.005 + (21-12)\u00d70.001 = **0.014** GAS |\n| The value removed                                  | 0                                                            | The value removed                                            | **0** GAS                             |\n\nReference: [ApplicationEngine.Storage.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ApplicationEngine.Storage.cs)\n\n## Network fee\n\nThe network fee includes:\n\n- Network byte fee\n- Script verification fee\n\n### Network byte", "doc_id": "e24526b5-d36b-458d-941b-b8ec0e3a78e8", "embedding": null, "doc_hash": "d42ea3c791e5a4b2b4636f8c69c3b03c08097522664c45b397440d167408efcd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 8878, "end": 11301, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "2": "54dd3c43-df98-4776-a98e-b4b538197101", "3": "ae30916f-f634-452b-a615-1b3f839e8b60"}}, "__type__": "1"}, "ae30916f-f634-452b-a615-1b3f839e8b60": {"__data__": {"text": "fee includes:\n\n- Network byte fee\n- Script verification fee\n\n### Network byte fee\n\nBy default the network byte fee is 0.00001 GAS / Byte. Committee members can dynamically adjust the fee.\n\nReference: \n\n[PolicyContract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/Native/PolicyContract.cs)\n\n[Transaction.cs#L302](https://github.com/neo-project/neo/blob/ee898bf41667cdbe3b836b3bd08c2d3199046c2e/src/neo/Network/P2P/Payloads/Transaction.cs#L302)\n\n### Script verification fee\n\nThe script verification fee is limit to 0.5 GAS. Its formula is:\n\n`Script verification fee`= `Execution fee of script verification` * `multiple`\n\nWhere,\n\n`Execution fee of script verification` = `OpCode execution fee` + `SysCall fee` + `CPU processing fee for native contracts` + `Storage fee`\n\nThe multiple for script verification fee defaults to 30, which can be dynamically adjusted by committee with the upper limit of 1000.\n\nDevelopers can use the API `InvokeContractVerify` to evaluate the fee for script verification.\n\nFor example:\n\nThe script verification fee for a standard address is (OpCode.PUSHDATA1 + OpCode.PUSHDATA1 + OpCode.SYSCALL + Neo.Crypto.CheckSig) \u00d730 = **0.0098352** GAS.\n\nReference: \n\n[PolicyContract.cs](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/Native/PolicyContract.cs)\n\n[Transaction.cs#L302](https://github.com/neo-project/neo/blob/ee898bf41667cdbe3b836b3bd08c2d3199046c2e/src/neo/Network/P2P/Payloads/Transaction.cs#L302)\n\n", "doc_id": "ae30916f-f634-452b-a615-1b3f839e8b60", "embedding": null, "doc_hash": "aff0cd5c589dea034a3f1b1afabb5c789dff2a292441f9777ccc14adc4217f02", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}, "node_info": {"start": 11287, "end": 12768, "_node_type": "1"}, "relationships": {"1": "c2312a3cf01c34580ee92070459af970bf1c3109", "2": "e24526b5-d36b-458d-941b-b8ec0e3a78e8"}}, "__type__": "1"}, "42bd696f-ca7f-4210-8023-88ce4373e6bc": {"__data__": {"text": "---\nsidebar_label: 'Blocks'\nsidebar_position: 4\n---\n\n# Block\n\nThe Blockchain is a data structure. The block is composed of block header and block body. As each block has a crpytographic hash of the previous block (refer to `PrevHash` in the block header), and a chain structure is formed. \n\n## Block Header\n\nThe data structure of block as following:\n\n| Size | Field         | Name                                | Type    | Description                                                  |\n| ---- | ------------- | ----------------------------------- | ------- | ------------------------------------------------------------ |\n| 4    | Version       | Block Version                       | uint    | Block version, current is `0`                                |\n| 32   | PrevHash      | Previous Hash                       | UInt256 | The previous block's hash                                    |\n| 32   | MerkleRoot    | Merkle Tree    Root                 | Uint256 | The merkle tree root of the block's transactions             |\n| 8    | Timestamp     | Block Timestamp                     | ulong   | The time when this block is generated                        |\n| 8    | Nonce         | Random number                       | ulong   | The random number of the block                               |\n| 4    | Index         | Block Index                         | uint    | Block height, and the Genesis Block's index is 0             |\n| 1    | PrimaryIndex  | Speaker index                       | byte    | Index of the proposal validator in the current round         |\n| 20   | NextConsensus | Address of the next round validator | UInt160 | The script hash of more than two-thirds of validator's signatures for the next round |\n| ?    | Witness       | Witness                             | Witness | The executable verification scripts                          |\n\nThe block header contains the basic information of a block and provides verification of a block. \n\nBlock `hash` and `index` can be used to identify a block. The hash value is obtained by concatenating the first seven attributes of the block header and performing SHA256 operation twice. Normally, Neo has only one chain, and each block is confirmed by more than two-thirds of the consensus nodes, before added to the blockchain. Therefore, the height of each block is unique. Block height must be equal to the previous block height plus 1, and the", "doc_id": "42bd696f-ca7f-4210-8023-88ce4373e6bc", "embedding": null, "doc_hash": "5c0afce8277131921d74fff6bee91c4fc7b51fac3041db1ddf653965b61d71a9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Blocks"}, "node_info": {"start": 0, "end": 2419, "_node_type": "1"}, "relationships": {"1": "01475bc02aae5d24f15884f934fb987ebc59283b", "3": "d868a581-12c5-40dd-b625-8bb5b288fcc9"}}, "__type__": "1"}, "d868a581-12c5-40dd-b625-8bb5b288fcc9": {"__data__": {"text": "block is unique. Block height must be equal to the previous block height plus 1, and the Genesis Block height is 0. \n\n`Timestamp` is the block's time stamp, must be bigger than the previous one. The internal between two blocks is about 15 seconds, and is set by the variable `MillisecondsPerBlock` in the configuration file `config.json`.\n\n`NextConsensus` is the hash of multi-signature contract, which needs the signatures of more than two-thirds of the consensus nodes as parameters. The example script is shown as below. Each block, with the `NextConsensus` field, locks the nodes participating in the next round of consensus activity. In the previous round of consensus activity, the Speaker calculated the consensus nodes of the next round based on the voting at that time, generated the multi-signature contract, and assigned the hash value of the contract to the block's `NextConsensus` field. \n\n`Witness` is the verification script of the block, it contains `InvocationScript` and `VerificationScript`. The `InvocationScript` provides the parameters for the `VerificationScript` to execute. \n\n![](images/blockchain/nextconsensus_script.jpg)\n\n## Block\n\nThe block data structure is as follows:\n\n\n| Size | Field        | Name             | Type          | Description              |\n| ---- | ------------ | ---------------- | ------------- | ------------------------ |\n| \uff1f   | Header       | block header     | Header        | block header             |\n| ?\\*? | Transactions | Transaction List | Transaction[] | The payload of the block |\n\nThe block body is a transaction list, which essentially starts with the transaction list length, followed by a list of transactions. In one round of consensus activity, the Speaker selects a series of verified transactions from its memory pool, put the transaction hash into a consensus message (`PrePareRequest`) and then broadcast it to the blockchain network. For more details about consensus, refer to [Consensus Mechanism](./consensus/dbft).\n\nAt present, there can be up to 512 transactions per block.\n\n:::note\n\nWhen a block persistent, it stores a hash list of the block's transaction, and the transaction data is stored separately to facilitate queries.\n:::", "doc_id": "d868a581-12c5-40dd-b625-8bb5b288fcc9", "embedding": null, "doc_hash": "7c251bbac8e05e0a93d2d15fa2db3c47e23df01251eaf3e4c05702e0411fd64e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Blocks"}, "node_info": {"start": 2331, "end": 4541, "_node_type": "1"}, "relationships": {"1": "01475bc02aae5d24f15884f934fb987ebc59283b", "2": "42bd696f-ca7f-4210-8023-88ce4373e6bc"}}, "__type__": "1"}, "d6919f3e-da0e-42d6-ac8b-86d77c1a4ba8": {"__data__": {"text": "# Merkle Tree\n\nA Merkle tree is a kind of binary tree: It's able to quickly check and induce massive data and verify the completeness of block transaction records. Neo uses Merkle tree to construct block model. Neo's block head stores the Merkle root of all transactions within the block. The block data area stores transaction array.  \n\n![](../images/blockchain/MerkleTree01.png)\n\nAttribute of Merkle tree\uff1a\n\n1. Merkle tree is basicly a binary tree, with all features of tree structure.\n2. Merkle tree's leaf nodes' value is unit data of data set, or unit data HASH.\n3. The value of a non-leaf node is based on all the leaf node values below it, and then calculated with hash method.\n\nTransaction verification principle:\n\nTransaction001's validity can be verified by comparing original Top Hash value with the value computed from Transaction001, Transaction002 and Hash1(The direct child of Top Hash on the right side).\n\n## Usage Scenarios\n\n- Builds a Merkle tree root when constructing a block header\n- Verifies the block data using SPV wallets.\n- As a data structure, generates a stateRoot for Neo blocks. This is used in cross-chain and light node scenarios for quickly verifying the validity of blocks.", "doc_id": "d6919f3e-da0e-42d6-ac8b-86d77c1a4ba8", "embedding": null, "doc_hash": "4f420c2918985b5474411810cf265772a7b2f37f8b5e20edfaf995b3cd012655", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/MerkleTree"}, "node_info": {"start": 0, "end": 1206, "_node_type": "1"}, "relationships": {"1": "2e793c0c7a679f2ed4b59593787823581a749c91"}}, "__type__": "1"}, "6b2dd714-c7a0-431b-95bb-62d0d13eaa50": {"__data__": {"text": "# Encoding Algorithm\n\n##  Base58\n\nBase58 is a group of encoding/decoding schemes used to switch data between binary format (hexdecimal) and alphanumeric text format (ASCII). Base58 enables data compressing, is easy to identify, and is suitable for constructing encoding mechanism of transmission system that is anti-auto-monitoring. However, lack of verification makes it not able to detect error during transmission. Thus for Base58Check, an improved scheme is required.  \n\nThe Base58's alphabet includes numbers (From 1 to 9), and English letters except O (uppercase o) / I (uppercase i) / l (lowercase L). These letters are omitted to avoid confusion.\n\nNeo's Base58 alphabet: **123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz**\n\nInterface definition\uff1a\n\n1. Encoding method: Encoding byte[] format data into Base58 string format\n\n   ```cs\n   string Encode(byte[] input)\n   ```\n   \n2. Decoding Method: Decoding Base58 string format data into byte[] format\n\n   ```cs\n   byte[] Decode(string input)\n   ```\n\n**Encoding Steps**\uff1a\n\n1.  Add 0x00 before byte[] data to generate a new byte array, and then reverse its order (little endian)\n\n2.  Convert array data to a BigInteger object\n\n3.  Convert the BigInteger format number to 58-based number according to Base58 alphabet\n\n4.  Count the number of 0x00 in original byte array format data. At the head of the Base58 format data generated in step 3, for each 0x00, add a letter '1', which is the first character in Base58 alphabet\n\n**Decoding Steps**\uff1a\n\n1.  Convert the input string into BigInteger format according to Base58 alphabet.\n\n2.  Convert from BigInteger format to byte[] format and then reverse the order to big endian.\n\n3.  If byte[] format data's length is more than 1 & byte[0] = 0 & byte[1] >= 0x80, start from byte[1], otherwise start from byte[0] to get the decoded result.\n\n4.  Count the number of the first letter of Base58 alphabet in original input data as count and remove leading zeros from the decoded data.\n\nExample:\n\n| String Content | byte[] |\n| --- | --- |\n| NTRAJ9EEjHFHhHZvMKEKfkceg5V9ppx5ZP | [0x35, 0x52, 0x4e, 0x37, 0xb7, 0x01, 0x39, 0xc8, 0x96, 0xeb, 0xd5, 0x4a, 0x86, 0x48, 0xd3, 0xfa, 0x78, 0x6b, 0x26, 0x48, 0x76, 0xea, 0xc5, 0x26, 0xce] |\n\nScenarios\uff1a\n\nServes for Base58Check encoding / decoding method.\n\n## Base58Check\n\nBase58Check is an improved encoding / decoding method base on Base58. Base58Check solved the lack of checking mechanism in Base58, by adding hash value to original data as salt.\n\n\nInterface definition:\n\n1. Encoding method: encode byte array data into checkable Base58 string format\n\n   ```cs\n   string Base58CheckEncode(byte[] input)\n   ```\n\n2. Decoding method\uff1adecode checkable Base58 string data into byte array format\n\n   ```cs\n   byte[] Base58CheckDecode(string input)\n   ```\n\n**Encoding Steps**:\n\n1.  Encode input byte array twice with Sha256 to get a hashed byte array. Take the first 4 bytes of the hash as checksum and append it to the end of original byte array.\n\n2.  Use Base58 to encode the byte array including checksum to get", "doc_id": "6b2dd714-c7a0-431b-95bb-62d0d13eaa50", "embedding": null, "doc_hash": "2843476898259e6d63ccb7695cd194abc999af391861befbb7a722424468b258", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encode_algorithm"}, "node_info": {"start": 0, "end": 3047, "_node_type": "1"}, "relationships": {"1": "2b80d8d8f8f2c4854344e74929561c75de3b0565", "3": "f6fd3b73-d138-463c-9ea5-4d4fb9a95ced"}}, "__type__": "1"}, "f6fd3b73-d138-463c-9ea5-4d4fb9a95ced": {"__data__": {"text": " Use Base58 to encode the byte array including checksum to get corresponding encoded result.\n\n**Decoding Steps**:\n\n1. Use Base58 to decode input string to get byte array format decoded result.\n\n2. Take the content of byte array except the last 4 bytes as data.\n\n3. Encode data twice with SHA256 to get a hashed byte array. Check whether the first 4 bytes of the hashed value are identical with the last 4 bytes in byte array of step 1. If so, the decoded data is correct. Otherwise the data is corrupted.\n\n   \n\n   ![](../images/blockchain_paradigm/Base58CheckEncodeAndDecode.png)\n\nExample:\n\n| String content | byte[] |\n| --- | --- |\n| NTRAJ9EEjHFHhHZvMKEKfkceg5V9ppx5ZP | [0x35, 0x52, 0x4e, 0x37, 0xb7, 0x01, 0x39, 0xc8, 0x96, 0xeb, 0xd5, 0x4a, 0x86, 0x48, 0xd3, 0xfa, 0x78, 0x6b, 0x26, 0x48, 0x76] |\n\nScenarios\uff1a\n\n- Import / export WIF format secret key\n\n- Switch between contract script hash and address\n\n- Import / export NEP2 format secret key", "doc_id": "f6fd3b73-d138-463c-9ea5-4d4fb9a95ced", "embedding": null, "doc_hash": "48fb81fb2dd6094110e717a1f85b5fb77b78a6452891f82a47729fa5369a96b8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encode_algorithm"}, "node_info": {"start": 2985, "end": 3931, "_node_type": "1"}, "relationships": {"1": "2b80d8d8f8f2c4854344e74929561c75de3b0565", "2": "6b2dd714-c7a0-431b-95bb-62d0d13eaa50"}}, "__type__": "1"}, "97fdcebe-bc4c-4be9-8643-67c21fffb86a": {"__data__": {"text": "# Encryption Algorithm\n\n## ECC Algorithm\n\nElliptic Curve Cryptography (ECC) algorithm is a kind of asymmetric encryption algorithm. With the irreversible feature of K=k\\*G process (K: public key, G: base point (constant)), it can prevent solving private key from public key by brutal force. With the same length of secret key, ECC has higher security level and saves computing resource compared to other encryption algorithms such as RSA. ECC combined with other algorithms, is widely used in signing fields, i.e. ECDSA digital signature.\n\nSame as Bitcoin, Neo adopts ECC as public key generating algorithm. Neo defines a special secp256r1-standard elliptic curve with parameters:\n\nPrime Q: 00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\n\nParameter A: 00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\n\nParameter B: 005AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\n\nOrder N: 00FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\n\nBase Point G: (0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,\u3000\u30000x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5)\n\nIn addition, to support the cross-chain transaction verification, Neo introduces the SECP256K1 curve with parameters\uff1a\n\nPrime Q: 00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n\nParameter A: 0\n\nParameter B: 7\n\nOrder N: 00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n\nBase Point G: (\"04\" + \"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\" + \"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8\")\n\nExample:\n\n| Name | Value |\n| --- | --- |\n| private key |  c7134d6fd8e73d819e82755c64c93788d8db0961929e025a53363c4cc02a6962 |\n| public key (compressed) |  035a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a |\n| public key (uncompressed) | 045a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a 35dfabcb79ac492a2a88588d2f2e73f045cd8af58059282e09d693dc340e113f |\n\n:::note\n\nUncompressed public key above is in single line.\n\n:::\n\nScenarios:\n\n- Generating public key with private key\n\n- Signing and signature verification\n\nFor more information, refer to [A relatively easy to understand primer on elliptic curve cryptography](https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/).\n\n\n## ECDSA signing\n\nElliptic Curve Digital Signature Algorithm (ECDSA) is a simulation of Digital Signature Algorithm (DSA) by ECC algorithm. Its advantage includes fast speed, reliable strength and short signature.\n\nBrief steps are as", "doc_id": "97fdcebe-bc4c-4be9-8643-67c21fffb86a", "embedding": null, "doc_hash": "6b36f29cbd2d00b55db73c7d280c8f36b7ce18be9afcd8651eef387d86ca3807", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encryption_algorithm"}, "node_info": {"start": 0, "end": 2626, "_node_type": "1"}, "relationships": {"1": "1e88155794ce85f3297cdf937f4e39f520f103b5", "3": "39293e26-6c37-4d9f-bab8-b46778615a4f"}}, "__type__": "1"}, "39293e26-6c37-4d9f-bab8-b46778615a4f": {"__data__": {"text": "includes fast speed, reliable strength and short signature.\n\nBrief steps are as follows:\n\nAssume private key, public key and base point as k, K and G, respectively. We know that K = k\\*G according to ECC algorithm.\n\nSigning procedure:\n\n   1. Select random number r and compute point r\u00b7G(x, y).\n\n   2. Compute s = (h + k\u00b7x)/r according to random number r, message M's hash value h, private key k.\n    \n   3. Send message M and signature {r\u00b7G, s} to receiver.\n\nVerification procedure:\n\n   1. Receiver receives message M and signature {r\u00b7G=(x,y), s}.\n\n   2. Compute hash h according to received message.\n   \n   3. Compute h\u00b7G/s + x\u00b7K/s with sender public key K and compare with r\u00b7G. Verification succeeds if both are the same.\n\nDeduction is as follows:\n\n[![formula_ecdsa](../images/blockchain_paradigm/formula_ecdsa.jpg)](../images/blockchain_paradigm/formula_ecdsa.jpg)\n\nExample:\n\n| Name | Value                                                         |\n| ---- | ------------------------------------------------------------ |\n| Message | Hello World                                                  |\n| Private Key | f9be359876aac462df9ec642e5d063140daedb83aefc0f8657b08132d3da62d2 |\n| Public Key | 04ed08d3bc46390a54350d841c8110ca02f9e357f8ba08702078de2d7041727<br/>5956e94045d041a2bf89be25d5a56ddcf15c4f629d5a1db32657d0da13ebde64b29 |\n| Signature | 54a6faec9159e98d45f5868e5799762de290c3e7e67e013c1bd6a2a6f8a2e500<br/>a4d29567359bd171ddebc547dcddd670fb6b367e3e19298d7672f0422b5a2c52 |\n\n:::note\n\npublic key and signature above are both in a single line.\n\n:::\n\nScenarios\uff1a\n\n- Transaction signature.\n\n- Consensus.\n\n## AES Encryption\n\nAdvanced Encryption Standard (AES) is a kind of block cipher algorithm in symmetric encryption algorithms. Its block size can be 128, 192, 256. AES has the following advantages: (1) fast processing speed, (2) whole process can be described in math, (3) currently no effective cracking method.\n\nNeo uses 256-bit AES encryption algorithm, where encryption mode is ECB and filling method is NoPadding.\n\nExample\uff1a\n\n  1. msg,key----->passphrase-protected msg\n\n\u3000\u3000(Message: 256-bit hash of \"Hello World\") + (password: 256-bit hash of \"l love", "doc_id": "39293e26-6c37-4d9f-bab8-b46778615a4f", "embedding": null, "doc_hash": "ac9d1523f189272e24952ca33a5e42c4f64c1c8f984a7da6cff9831ccfadc921", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encryption_algorithm"}, "node_info": {"start": 2558, "end": 4721, "_node_type": "1"}, "relationships": {"1": "1e88155794ce85f3297cdf937f4e39f520f103b5", "2": "97fdcebe-bc4c-4be9-8643-67c21fffb86a", "3": "bc15ef1f-d994-4426-834a-ae741c75e165"}}, "__type__": "1"}, "bc15ef1f-d994-4426-834a-ae741c75e165": {"__data__": {"text": "hash of \"Hello World\") + (password: 256-bit hash of \"l love coding\")\n\n\u3000\u3000=\"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"\n\n\u3000\u3000\u3000+\"da04fe4405fc021e4ca5ca956b263828e99d4ce2a342b2cbdc919baddbe178ae\"\n\n\u3000\u3000---->\"a8158a64c1e9d776e12582d8c63553ee0c7687bd8e374f79c766e7459577f547\"\n\n  2. passphrase-protected msg,key----->msg\n\n\u3000\u3000Ciphertext + (password: 256-bit hash of \"l love coding\")\n\n\u3000\u3000=\"a8158a64c1e9d776e12582d8c63553ee0c7687bd8e374f79c766e7459577f547\"\n\n\u3000\u3000\u3000+\"da04fe4405fc021e4ca5ca956b263828e99d4ce2a342b2cbdc919baddbe178ae\"\n\n\u3000\u3000---->\"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"\n\nScenarios\uff1a\n\nStorage and verification of DB3 wallet account password\n", "doc_id": "bc15ef1f-d994-4426-834a-ae741c75e165", "embedding": null, "doc_hash": "4d2e1bc83e4235363a82e88bc46b84a415360ab9695b23fcefe1bc9c8768a108", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encryption_algorithm"}, "node_info": {"start": 4731, "end": 5409, "_node_type": "1"}, "relationships": {"1": "1e88155794ce85f3297cdf937f4e39f520f103b5", "2": "39293e26-6c37-4d9f-bab8-b46778615a4f"}}, "__type__": "1"}, "69589414-4617-4522-9fad-f6cc2cb189f4": {"__data__": {"text": "# Hash Algorithm\n\nHash function, or hash algorithm, is a method creating digital finger print from any kind of data. Hash function compresses message or data into a digested version to shrink the data into a fixed data size. This function disorganizes and remixes data, rebuilding a data fingerprint as a hash value. Hash value is always represented by a short string consisting of random letters and digits.\n\nTwo different hash functions are used widely in the Neo system: SHA256 and RIPEMD160. The former is used to generate a longer hash value (32 bytes) and the latter is used to generate a shorter hash value (20 bytes). Usually when a hash value of an object is generated, hash functions are used twice. For example, when a hash of a block or transaction is generated, SHA256 is calculated twice; when a contract address is generated, the SHA256 hash of the script is calculated, then the NSPEMD160 hash of the previous hash is calculated. \n\nIn addition, the block will also use a hash structure called a Merkle Tree. It computes the hash of each transaction and combines one with the next and then hashes again, repeating this process until there is only one root hash (Merkle Root). \n\n### RIPEMD160 \n\nRIPEMD is a cryptographic hash function published by Hans Dobbertin, Antoon Bosselaers Bart Prenee from COSIC research team, University of Leuven in 1996.\n\nRIPEMD160 is a 160-bit improvement based on RIPEMD. This algorithm produces a 160-bit hash, which can be presented in hexadecimal format. One feature of this algorithm is avalanche effect, i.e. any slight changes can result in a totally different hash value.\n\nNeo generates 160-bit hash of contract script with RIPEMD160.\n\nExample:\n\n| String value | Hash value                              |\n| ----------- | ---------------------------------------- |\n| hello world | 98c615784ccb5fe5936fbc0cbe9dfdb408d92f0f |\n\nScenarios\uff1a\n\nTo generate contract hash.\n\n### SHA256 \n\nSHA256 is a kind of SHA-2 algorithm. SHA-2 is a cryptographic hash function algorithm standard produced by NSA. It belongs to SHA family. It is a successor of SHA-1. SHA-2 has 6 different algorithm standards, including SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256.\n\nFor any length of message, SHA256 will generate a 256-bit hash value (can be represented by a hexdecimal string)\n\nExample:\n\n| String value | Hash value                                                       |\n| ----------- | ------------------------------------------------------------ |\n| Hello World | a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e |\n\nScenarios:\n\n- Compute contract hash.\n\n- Signing & Signature validation.\n\n- Base58Check encoding / decoding.\n\n- db3\u3001NEP6 wallet secret key storage, export & validation.\n\n### Murmur32 \n\nMurmur is kind of non-cryptographic hash algorithm and suits for general hash indexing. It is proposed by Austin Appleby in 2008. Later several derived versions are released. Compared with other popular hash functions, Murmur's random distribution performance is better for keys with high regularity.\n\nFeatures\uff1a\n\n   1. Low collision probability.\n   \n   2. Fast computing rate.\n\n   3. Good peformance for large files.\n\nExample:\n\n| String | Hash value |\n| ---|---|\n| Hello World |ce837619 |\n\nScenarios\uff1a\n\n- Bloom filter\n\n- leveldb storage\n\n### Scrypt\n\nScrypt", "doc_id": "69589414-4617-4522-9fad-f6cc2cb189f4", "embedding": null, "doc_hash": "21a0b6a11e0618e34ac14069f8763f637409be3557ade638cde87e45828db2c9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/hash_algorithm"}, "node_info": {"start": 0, "end": 3324, "_node_type": "1"}, "relationships": {"1": "409fb91ce613f9b2b1898cc01c9845ea00c22313", "3": "571b45e7-90af-4213-92a3-b7ef5dc2909a"}}, "__type__": "1"}, "571b45e7-90af-4213-92a3-b7ef5dc2909a": {"__data__": {"text": "Bloom filter\n\n- leveldb storage\n\n### Scrypt\n\nScrypt is a kind of secure-cryptographic algorithm based on PBKDF2-HMAC-SHA-256 algorithm. It's developed by Colin Percival, a famous FreeBSD hacker, for his backup service Tarsnap. The original design was to reduce CPU load, minimize CPU reliance, and use CPU idle time for calculations. Therefore, scrypt not only takes a long time to calculate, but also consumes a lot of memory, making it difficult to calculate multiple digests in parallel. So it is more difficult to use the rainbow table for brute-force-attacks.\n\nNeo mainly uses Scrypt algorithm to generate encrypted secret keys complying with NEP-2 standard. Parameters are defined as follows:\n\n- N: CPU/RAM cost. Generally it is a power of 2. Default value is 16384.\n\n- p: Parallelization parameter, a positive integer that ranges from 1 to 255. Bigger value represents a heavier reliance upon concurrent computation. Default value is 8.\n\n- r: Block size\uff0ctheoretically ranges from 1 to 255. Bigger value represents a heavier reliance upon RAM & bandwidth. Default value is 8.\n\nExample:\n\n| Data | Parameters  | Hash value  |\n|---|---|---|\n| Hello World | key:\"I love code\"<br/>N:16384<br/>p:8<br/>r:8 | 17b94895fab004e035b3630a718b498f6<br/>647458351f04b84b4a2c0bf1db963630fa<br/>7bfd1c29663c7bf3556fd7ba6131e5ddfd6<br/>40b9f6a2a9ad75d3d59b65f932 |\n\n:::note\n\nThe hash value above is in single line.\n\n:::\n\nScenarios\uff1a\n\n- NEP2 format secret key export.\n\n- Password verification for NEP6 wallet.\n\nFor more information, refer to <https://en.wikipedia.org/wiki/Scrypt>.\n", "doc_id": "571b45e7-90af-4213-92a3-b7ef5dc2909a", "embedding": null, "doc_hash": "95b98094b365bbf67c835f2f76b0fce818038554ef0864f80d9cb6e3fe9c5fef", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/hash_algorithm"}, "node_info": {"start": 3273, "end": 4842, "_node_type": "1"}, "relationships": {"1": "409fb91ce613f9b2b1898cc01c9845ea00c22313", "2": "69589414-4617-4522-9fad-f6cc2cb189f4"}}, "__type__": "1"}, "7a006921-e375-486b-ae70-109cb59dab8c": {"__data__": {"text": "---\nsidebar_label: 'Native tokens'\nsidebar_position: 2\n---\n\n# NEO Token Models\n\n### Native Token\n\nThere are 2 kinds of native tokens defined in the Neo system: NEO and NeoGas (GAS).\n\nNEO is the Governing Token. Neo holders can participate in Neo network management, including voting for consensus nodes, network parameter modification, etc. The total amount of NEO is 100 million. Its minimum unit is 1 and can not be divided. It's registered in Genesis block, and stored in standby validators' muti-signature addresses.\n\nGAS is the fuel token for the realization of Neo network resource control, with a smallest unit of 0.00000001. Users can obtain GAS either through a claim or purchase. When using the Neo network, they need to pay a certain amount of GAS as network fees, such as transfer, registering assets, publishing assets, running DApps, etc.\n\nThe Neo N3 Genesis block will mint the exact amount of GAS token needed to account for all GAS token circulating on the NEO Legacy chain at the time of Genesis block.\n\nTo read more about GAS generation rate and distribution refer to the [Governance and Incentives](./governance).\n\n\n### NEP17 Assets (Tokens)\n\nNEP17 tokens need to be issued and managed through smart contract. Their information is stored in a smart contract's storage. Account model is used. For detailed information, refer to [NEP-17](/docs/n3/develop/write/nep17).\n\n\n", "doc_id": "7a006921-e375-486b-ae70-109cb59dab8c", "embedding": null, "doc_hash": "898d8fdbf2e04987854f2c27eb0ff36cd30a8cb0ae5047ad8d70846589fb4fb4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Native tokens"}, "node_info": {"start": 0, "end": 1389, "_node_type": "1"}, "relationships": {"1": "e4ef25f1a683734e5f3b50a3eab6c46cdd02e17d"}}, "__type__": "1"}, "f2799773-922b-4587-a7c3-e88f85812e17": {"__data__": {"text": "---\nsidebar_label: 'Transactions'\nsidebar_position: 5\n---\n\n# Transaction\n\nTransaction is the basic operation model of the whole Neo network. Wallets, smart contracts and accounts interact with Neo network through transactions. In Neo's P2P network, information is packed as `InvPayload` for transferring (Inv is abbreviation of Inventory). Different payloads have their special data. `InventoryType.Tx` indicates transaction data is packed into `InvPayload`. \n\n## Structure\n\nOn Neo blockchain the transaction data structure is as follows:\n\n| Size | Field | Description |\n|--------------|---------|------------------------------------------|\n| `version`    | byte   | Transaction version, currently 0            |\n| `nonce`    | uint   | Random number      |\n| `sysfee`    | long   | System fee paid for network resource |\n| `netfee`    | long   | Network fee paid for the validator packaging transactions |\n| `validUntilBlock`    | uint   |  Transaction validity period  |\n| `signers`         | Signer[] | Sender and the effective scope of signature |\n| `attributes` | TransactionAttribute[]   | Transaction attributes                                    |\n| `script`     | byte[]   | Script executed on the NeoVM |\n| `witnesses`  | Witness[]   | List of scripts used to validate the transaction    |\n\n### version\n\nThe version allows the transaction structure to be updated to make it backward compatible. The current version is 0.\n\n### signers\n\nThe first field is the script hash of the transaction sender account. Since the UTXO model has been deprecated in Neo N3 and the native assets NEO and GAS turned into NEP-17 assets, the input and outputs fields are no longer recorded in the transaction structure. Instead, the `sender` is used to track the sender of the transaction.   \n\nThe rest fields are used to define the effective scope of signature. When checkwitness is used for transaction verification, cosigners except the transaction sender need to define the scope of their signature. See [Signature Scope](#signature-scope) for details.\n\n| Field              | Description                                      | Type           |\n| ------------------ | ------------------------------------------------ | -------------- |\n| `Account`          | Script hash of the account                       | `UInt160`      |\n| `Scopes`           | Effective range of the signature                 | `WitnessScope` |\n| `AllowedContracts` | Signs array of the allowed contract scripts      | `UInt160[]`    |\n| `AllowedGroups`    | Signs public keys of the allowed contract groups | `ECPoint[]`    |\n\n### sysfee\n\nThe system fee depends on the transaction's script, i.e., its size, number and type of NeoVM instructions. The 10 GAS free system fee is canceled in Neo N3. The calculation formula is as follows:\n\n![](images/transaction/system_fee.png)\n\nwhere *OpcodeSet* is opcode set, *OpcodePrice<sub>i</sub>* is the cost of opcode i, *n<sub>i</sub>* is the execution times of instruction i in the contract script. For each opcode fee refer to [Fees for", "doc_id": "f2799773-922b-4587-a7c3-e88f85812e17", "embedding": null, "doc_hash": "52bf0f991c02dde4ea4f9b49a92234d546928f290c3d59dd6805c60bd72bd0b9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 0, "end": 3045, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "3": "d8f52df6-92dc-4045-8068-6e6456db267b"}}, "__type__": "1"}, "d8f52df6-92dc-4045-8068-6e6456db267b": {"__data__": {"text": "instruction i in the contract script. For each opcode fee refer to [Fees for Instructions](../../reference/fees.md#fees-for-instructions).\n\n### netfee\n\nThe network fee is charged when the user submits a transactions to Neo blockchain as a reward for consensus nodes generating blocks. There is a  base fee for each transaction. The transaction is only executed if the fee paid by the user is greater than or equal to the base fee; otherwise, the transaction will be treated as invalid. The calculation formula is as follows:\n\n![network fee](images/transaction/network_fee.png)\n\nwhere *VerificationCost* is the fee for instructions executed by NeoVM to verify transaction signatures, *tx.Length* is the transaction data byte length, and *FeePerByte* is transaction fee per byte, currently 0.00001 GAS.\n\n### attributes\n\nAdditional attributes are allowed to be added to transactions of specific types. You need to define the usage type, internal and external data size for each attribute.\n\nUp to 16 attributes can be added to one transaction.\n\n\n### script\n\nThe script that is executed on the NeoVM and determines the effects of the transaction.\n\n### witnesses\n\nwitnesses verifies the validity and integrity of a transaction. It includes two attributes.\n\n| Field                | Description                                                  |\n| -------------------- | ------------------------------------------------------------ |\n| `InvocationScript`   | Executes the script and passes parameters to the verification script |\n| `VerificationScript` | Verification script                                          |\n\nYou can add multiple witnesses to each transaction, or use witnesses with multiple signatures.\n\n#### Invocation Script\n\nConstruct an invocation script to add signature:\n\n`0x0C` (PUSHDATA1) + `0x40` ( 64-byte ) + signature\n\nBy repeating this step, the invocation script can push multiple signatures for the multi-signature contract.\n\n#### Verification Script\n\nVerification script, commonly known as address script, includes normal address script and multi-signature address script. The address script can be directly obtained from the wallet account. For information about the construction refer to [Wallets](wallets.md#address).\n\nIt can also be used as a custom authentication contract script.\n\n## Transaction serialization\n\nIn Neo all variable-length integer types except IP addresses and port numbers are stored in little-endian order. When the transaction is serialized, it is executed in the following field order:\n\n| Field             | Description                                                  |\n| ----------------- | ------------------------------------------------------------ |\n| `version`         | -                                                            |\n| `nonce`           | -                                                            |\n| `systemFee`       | -                                     ", "doc_id": "d8f52df6-92dc-4045-8068-6e6456db267b", "embedding": null, "doc_hash": "188700c08c36633c9b0cb667444e3b8b4868af0e583a05f5e19ad20a27b3ee78", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 2983, "end": 5915, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "f2799773-922b-4587-a7c3-e88f85812e17", "3": "7241bee8-b439-41a2-b676-15d8dd30c0c4"}}, "__type__": "1"}, "7241bee8-b439-41a2-b676-15d8dd30c0c4": {"__data__": {"text": "                                          |\n| `networkFee`      | -                                                            |\n| `validUntilBlock` | -                                                            |\n| `signers`         | Need to serializes `WriteVarInt(length) `first and then other elements of the array |\n| `attributes`      | Need to serializes `WriteVarInt(length)` first and then other elements of the array |\n| `script`          | Need to serializes `WriteVarInt(length) `first and then the byte array |\n| `witnesses`       | Need to serializes `WriteVarInt(length) `first and then other elements of the array |\n\n\n:::note\n\nWriteVarInt (value)  stores a non-fixed-length type based on the value of value, and determines the storage size according to the range of values.\n:::\n\n| Value Range         | Storage Type         |\n| ------------------- | -------------------- |\n| value < 0xFD        | byte(value)          |\n| value <= 0xFFFF     | 0xFD + ushort(value) |\n| value <= 0xFFFFFFFF | 0xFE + uint(value)   |\n| value > 0xFFFFFFFF  | 0xFF + value         |\n\n## Transaction Signature\n\nThe transaction signature is to sign the data of the transaction itself by ECDSA method (not including the signature data, i.e. the witnesses part) and then fill in the witnesses in the transaction body.\n\nHere is an example of a JSON-format transaction, where the script and witnesses fields use Base64 instead of the original Hexstring encoding:\n\n```Json\n{\n  \"hash\": \"0xd2b24b57ea05821766877241a51e17eae06ed66a6c72adb5727f8ba701d995be\",\n  \"size\": 265,\n  \"version\": 0,\n  \"nonce\": 739807055,\n  \"sender\": \"NMDf1XCbioM7ZrPZAdQKQt8nnx3fWr1wdr\",\n  \"sys_fee\": \"9007810\",\n  \"net_fee\": \"1264390\",\n  \"valid_until_block\": 2102402,\n  \"signers\": [{\n    \"account\": \"0xdf93ea5a0283c01e8cdfae891ff700faad70500e\",\n    \"scopes\": \"FeeOnly\"\n  },\n  {\n    \"account\": \"0xdf93ea5a0283c01e8cdfae891ff700faad70500e\",\n    \"scopes\": \"CalledByEntry\"\n  }],\n  \"attributes\": [],\n  \"script\": \"EQwUDlBwrfoA9x+Jrt+MHsCDAlrqk98MFA5QcK36APcfia7fjB7AgwJa6pPfE8AMCHRyYW5zZmVyDBSJdyDYzXb08Aq/o3wO3YicII/em0FifVtSOA==\",\n  \"witnesses\": [{\n    \"invocation\":", "doc_id": "7241bee8-b439-41a2-b676-15d8dd30c0c4", "embedding": null, "doc_hash": "86125782dc0b6c0f0d59b2eb676958de7995dc486ca5da2854d30d408451d357", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 5979, "end": 8099, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "d8f52df6-92dc-4045-8068-6e6456db267b", "3": "d432052f-112c-48d2-bf8b-8deeb3c1a6a1"}}, "__type__": "1"}, "d432052f-112c-48d2-bf8b-8deeb3c1a6a1": {"__data__": {"text": " \"witnesses\": [{\n    \"invocation\": \"DEDy/g4Lt+FTMBHHF84TSVXG9aSNODOjj0aPaJq8uOc6eMzqr8rARqpB4gWGXNfzLyh9qKvE++6f6XoZeaEoUPeH\",\n    \"verification\": \"DCECCJr46zTvjDE0jA5v5jrry4Wi8Wm7Agjf6zGH/7/1EVELQQqQatQ=\"\n  }]\n}\n```\n\n## Signature Scope\n\nIn Neo Legacy transaction signature is globally effective. In order to allow users to control the signature scope at a finer level of granularity, WitnessScope is added to  Neo N3 and the signers field in the transaction structure is changed, so that the signature can be used only for verifying the specified contract, preventing unauthorized contracts from using the user signature.\n\n### Scopes\n\nWhen constructing a transaction, you need to specify the field `scopes` in `signers`, which defines the effective range of the signature, including these types:\n\n| **Field** | **Name**          | **Description**                                              |\n| --------- | ----------------- | ------------------------------------------------------------ |\n| 0x00      | `None`            | The signature is used for transactions only, and is disabled in contracts |\n| 0x01      | `CalledByEntry`   | The signature is only effective to the contract script called by Entry. |\n| 0x10      | `CustomContracts` | The signature is only effective to the specified contract script. It can be used in conjunction with CalledByEntry. |\n| 0x20      | `CustomGroups`    | The signature is effective to contracts in the group. It can be used in conjunction with CalledByEntry. |\n| 0x80      | `Global`          | The signature is globally effective. The risk is extremely high because the contract may transfer all assets in the address. Only choose it when the contract is extremely trusted. |\n| 0x40      | `WitnessRules`    | You need to specify the rule and scope. See [WitnessRule](#witnessrule) |\n\nFor better understanding, suppose there is a contract invocation chain: **[entry]->[Contract A]->[Contract B]->[Contract C]...->[Target]**\n\nAnd the Target contract invokes CheckWitness to verify the signature. The verification result varies when `scopes` is set to different value. \n\n- `None` - The verification is not passed no matter where the **Target** contract is.\n- `Global` - The verification is passed no matter where the **Target** contract is.\n- `CallByEntry` - The verification is passed only when the **Target** contract is **entry** or **Contract A**.\n- `CustomContracts` - The verification is passed only when the **Target** contract belongs to **CustomContracts**, a contract list you need to customize.\n- `CustomGroups` - The verification is passed only when the **Target** contract is authenticated by any public key in **CustomGroups**, a public key group you need to customize.\n\n### WitnessRule\n\nAction(Allow|Deny) and Condition\n\nThe execution logic is to execute the condition and, if is met, return Action, where Allow represents a successful check and Deny represents a failed check.\n\n#### WitnessCondition\n\n- Boolean: true|false\n\n  \u201cexpression\u201d =\\<bool\\>\n\n  ```\n  //Equals to WitnessScope.Global\n  {\n      \"account\":", "doc_id": "d432052f-112c-48d2-bf8b-8deeb3c1a6a1", "embedding": null, "doc_hash": "4a5a9d775ecc64b0a12cabeada2b72eeb44a5c5db09daa54a041e23fd1808a74", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 8072, "end": 11138, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "7241bee8-b439-41a2-b676-15d8dd30c0c4", "3": "2bba35c7-3c57-4672-a73e-471dcf86de11"}}, "__type__": "1"}, "2bba35c7-3c57-4672-a73e-471dcf86de11": {"__data__": {"text": "//Equals to WitnessScope.Global\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Boolean\",\n                  \"expression\": true\n              }\n          }\n      ]\n  }\n  ```\n\n- Not: Logical NOT. It reverses other conditions.\n\n  \u201cexpression\u201d=\\<Condition\\>\n\n  ```\n  // The signature is allowed only when the contract is not 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Not\",\n                  \"expression\": {\n                      \"type\": \"ScriptHash\",\n                      \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                  }\n              }\n          }\n      ]\n  }\n  \n  ```\n\n- And: Logical conjunction\n\n  \u201cexpressions\u201d=\\<Condition[]\\>\n\n  ```\n  // The signature is allowed only when the contract is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 and is invoked at entry\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"And\",\n                  \"expressions\": [{\n                          \"type\": \"ScriptHash\",\n                          \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                      }, {\n                          \"type\": \"CalledByEntry\"\n                      }\n                  ]\n         ", "doc_id": "2bba35c7-3c57-4672-a73e-471dcf86de11", "embedding": null, "doc_hash": "3d54554d3b092e9e6526ec58fd602ecc18e0162aa5c52d92fd4832fc5b52db1e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 11125, "end": 12753, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "d432052f-112c-48d2-bf8b-8deeb3c1a6a1", "3": "9bac438e-5dee-4936-8e53-51051990eb66"}}, "__type__": "1"}, "9bac438e-5dee-4936-8e53-51051990eb66": {"__data__": {"text": "         ]\n              }\n          }\n      ]\n  }\n  ```\n\n- Or: Logical OR\n\n  \u201cexpressions\u201d=\\<Condition[]\\>\n\n  ```\n  // The signature is allowed only when the contract is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 or is invoked at entry\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Or\",\n                  \"expressions\": [{\n                          \"type\": \"ScriptHash\",\n                          \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                      }, {\n                          \"type\": \"CalledByEntry\"\n                      }\n                  ]\n              }\n          }\n      ]\n  }\n  ```\n\n- ScriptHash: verifies that the current contract matches. It equals to CustomContracts\n\n  \u201chash\u201d=\\<UInt160\\>\n\n  ```\n  // Only the contract 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 is allowd to use the signature\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"ScriptHash\",\n                  \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n              }\n          }\n      ]\n  }\n  ```\n\n- Group: verifies that the current contract public key matches. It equals to CustomGroups\n\n  \u201cgroup\u201d=\\<ECPoint\\>\n\n  ```\n  // Only the contract authorized by 021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231 is allowed to use the signature\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n       ", "doc_id": "9bac438e-5dee-4936-8e53-51051990eb66", "embedding": null, "doc_hash": "506b4fd90182554b7be518c18f0b2b4ee45c521ac192bbe86dcfa8deb0eeaa44", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 12794, "end": 14512, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "2bba35c7-3c57-4672-a73e-471dcf86de11", "3": "070ee0d4-db64-476f-8b81-34fc7cadb2a9"}}, "__type__": "1"}, "070ee0d4-db64-476f-8b81-34fc7cadb2a9": {"__data__": {"text": "      \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"Group\",\n                  \"group\": \"021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231\"\n              }\n          }\n      ]\n  }\n  ```\n\n- CalledByEntry: Verifies if the current contract is an entry invocation. It equals to CallByEntry\n\n  ```\n  // Equals to WitnessScope.CallByEntry\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"CalledByEntry\"\n              }\n          }\n      ]\n  }\n  ```\n\n- CalledByContract: verifies that the previous level contract hash matches.\n\n  \u201chash\u201d=\\<UInt160\\>\n\n  ```\n  // The signature is allowed only when the previous level contract is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"CalledByContract\",\n                  \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n              }\n          }\n      ]\n  }\n  ```\n\n- CalledByGroup: verifies that the previous level contract public key matches.\n\n  \u201cgroup\u201d=\\<UInt160\\>\n\n  ```\n  // The signature is allowed only when the previous level contract is authorized by the public key 021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231\n  {\n      \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n      \"scopes\": \"WitnessRules\",\n      \"rules\": [{\n              \"action\": \"Allow\",\n              \"condition\": {\n                  \"type\": \"CalledByGroup\",\n                  \"group\": \"021821807f923a3da004fb73871509d7635bcc05f41edef2a3ca5c941d8bbc1231\"\n              }\n          }\n   ", "doc_id": "070ee0d4-db64-476f-8b81-34fc7cadb2a9", "embedding": null, "doc_hash": "16a7dfc0cef954be19880b7f0540925867a7db95a9f34e720a9043346f0479fc", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 14497, "end": 16306, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "9bac438e-5dee-4936-8e53-51051990eb66", "3": "f9ec9932-36a1-4850-a8d4-c37ebe4d3fd4"}}, "__type__": "1"}, "f9ec9932-36a1-4850-a8d4-c37ebe4d3fd4": {"__data__": {"text": "    }\n          }\n      ]\n  } \n  ```\n\n### Example\n\nCurrently you can only define this field when constructing the transaction with SDK. For better understanding you can refer to the following code example in the JSON format. \n\n```json\n{\n    \"account\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n    \"scopes\": \"WitnessRules\",\n    \"rules\": [{\n            \"action\": \"Allow\",\n            \"condition\": {\n                \"type\": \"Not\",\n                \"expression\": {\n                    \"type\": \"And\",\n                    \"expressions\": [{\n                            \"type\": \"ScriptHash\",\n                            \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n                        }, {\n                            \"type\": \"CalledByEntry\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n```\n", "doc_id": "f9ec9932-36a1-4850-a8d4-c37ebe4d3fd4", "embedding": null, "doc_hash": "baafd3a27cea54c9d3be6a537e2faa078ad9f9ec5d33edc905f6bf4c3b959880", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}, "node_info": {"start": 16303, "end": 17147, "_node_type": "1"}, "relationships": {"1": "a62825e262d5fa81144e76327d854a4bc5b6306d", "2": "070ee0d4-db64-476f-8b81-34fc7cadb2a9"}}, "__type__": "1"}, "92fb7a46-c4ae-42f9-a7d2-15c66eb0ab1b": {"__data__": {"text": "---\nsidebar_label: 'Wallets'\nsidebar_position: 3\n---\n\n# Wallets\n\nWallets are basic components of Neo and the bridges for users to access the Neo network. They are responsible for transaction operations such as transfer, contract deployment, asset registration, etc.\n\nYou can redesign and modify Neo wallets following your own thoughts, but the below rules and patterns must be followed.\n\n## Accounts\n\nIn Neo, the account is the smart contract and the address represents a contract script. The below flow diagram shows how to derive the public key from the private key and then to the address:\n\n![](images/wallets/privatekey-2-publickey-address.png)\n\n### Private Key\n\nA private key is a random value generated between 1 and n (n is a constant, less than 2^256 slightly), and is represented by a 256 bit (32 bytes) number generally.\n\nThere are two main encoding formats for private keys in Neo:\n\n- Hexstring Format\n\n   The hexstring format is a string that uses hexadecimal characters to represent byte array.\n\n- WIF Format\n\n   The wif format is to add prefix `0x80` and suffix `0x01` in the original 32-byte data, and get the string after Base58Check encoding.\n\n![](images/wallets/wif_format.png)\n\n Example: \n\n| Format | Value |\n|---|---|\n| byte[] | [0xc7,0x13,0x4d,0x6f,0xd8,0xe7,0x3d,0x81,0x9e,0x82,0x75,<br/>0x5c,0x64,0xc9,0x37,0x88,0xd8,0xdb,0x09,0x61,0x92,0x9e,<br/>0x02,0x5a,0x53,0x36,0x3c,0x4c,0xc0,0x2a,0x69,0x62] |\n| hexstring | c7134d6fd8e73d819e82755c64c93788d8db0961929e025a53363c4cc02a6962 |\n| wif | L3tgppXLgdaeqSGSFw1Go3skBiy8vQAM7YMXvTHsKQtE16PBncSU |\n\n### Public Key\n\nThe public key is a point (X, Y) calculated through the ECC algorithm with the private key. The X, Y coordinates can be represented by 32-byte data. Different from Bitcoin, Neo chooses secp256r1 as the curve of the ECC algorithm. There are two public key formats in Neo:\n\n- Uncompressed Public Key\n\n    0x04 + X (32 bytes) +  Y (32 bytes) \n\n- Compressed Public Key\n\n    0x02/0x03 + X (32 bytes)\n\nExample:\n\n| Format | Value |\n|----------|:-------------:|\n| Private Key | c7134d6fd8e73d819e82755c64c93788d8db0961929e025a53363c4cc02a6962|\n| Public Key (Compressed) | 035a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a |\n| Public Key (Uncompressed)  | 045a928f201639204e06b4368b1a93365462a8ebbff0b8818151b74faab3a2b61a35dfabcb79ac492a2a88588d2f2e73f045cd8af58059282e09d693dc340e113f  |\n\n### Address\n\nAddress is a string of numbers and letters after a series of transformations of the public key. This section will describes the steps of conversion from a public key to an address in Neo.\n\n:::note\n\nThe address script in Neo N3 has changed not using the", "doc_id": "92fb7a46-c4ae-42f9-a7d2-15c66eb0ab1b", "embedding": null, "doc_hash": "6723ecaddff7854cb3d2e514969831b785a479d10fd191cdddcd5a0717133945", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 0, "end": 2648, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "3": "551ef7a2-6c74-414f-a8d1-25da76b159fe"}}, "__type__": "1"}, "551ef7a2-6c74-414f-a8d1-25da76b159fe": {"__data__": {"text": "address script in Neo N3 has changed not using the Opcode.CheckSig and OpCode.CheckMultiSig but the interoperable service call `SysCall \"Neo.Crypto.CheckSig\".hash2uint`, `SysCall \"Neo.Crypto.CheckMultisig\".hash2unit` instead.\n:::\n\n#### Ordinary Address\n\n1. Build a `CheckSig` script with the public key, and the format is as follows:  \n\n\n```0x0C + 0x21 + Public Key (Compressed 33 bytes) + 0x41 + 0x56e7b327```\n\n\n![Account Address](images/wallets/account_address_script_checksign.png)\n\n2. Calculate script hash of the contract (20 bytes, make once SHA256 and RIPEMD160 of the script). \n\n3. Add the version prefix in the hash (Currently, the Neo protocol version is 53 and the corresponding byte is  `0x35`).\n\n4. Make Base58Check encoding for the above byte data.\n\nExample\uff1a\n\n| Format | Value |\n|----------|:-------------:|\n| Private Key | 087780053c374394a48d685aacf021804fa9fab19537d16194ee215e825942a0 |\n| Public Key (Compressed) | 03cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c |\n| Script | 0c2103cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c4156e7b327 |\n| Address | NNLi44dJNXtDNSBkofB48aTVYtb1zZrNEs |\n\n#### Multi-Signature Address\n\n1. Construct an N-of-M `CheckMultiSig` script with multiple addresses. The script format is as follows: \n\n   ```\n   emitPush(N) + 0x0C + 0x21 + Public Key 1 (Compressed 33 bytes)  + .... + 0x0C + 0x21 + Public Key m (Compressed 33 bytes)  + emitPush(M) + 0x41 + 0x9ed0dc3a\n   ```\n\n   ![](images/wallets/account_address_script_multi_checksign.png)\n\n2. Calculate script hash of the contract (20 bytes, make once SHA256 and RIPEMD160 of the script).\n\n3. Add the version prefix in the hash. (Currently, the Neo protocol version is 53 and the corresponding byte is  `0x35`)\n\n4. Make Base58Check encoding for the above byte data.\n\nExample:\n\n| Format                  | Value                                                        |\n| ----------------------- | ------------------------------------------------------------ |\n| Private Key             | 087780053c374394a48d685aacf021804fa9fab19537d16194ee215e825942a0<br/>9a973a470b5fd7a2c12753a1ef55db5a8c8dde42421406a28c2a994e1a1dcc8a |\n| Public Key (Compressed) | 03cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c<br/>036c8431cc78b33177a60b4bcc02baf60d05fee5038e7339d3a688e394c2cbd843 |\n| Script                  |", "doc_id": "551ef7a2-6c74-414f-a8d1-25da76b159fe", "embedding": null, "doc_hash": "5b902fa4bfda2516ea6833c0bfcfc19f4569350e4e50e68fae559f35e1e27e9c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 2608, "end": 4960, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "92fb7a46-c4ae-42f9-a7d2-15c66eb0ab1b", "3": "94a79420-1ac0-40df-879c-63b5307ccfd6"}}, "__type__": "1"}, "94a79420-1ac0-40df-879c-63b5307ccfd6": {"__data__": {"text": "Script                  | 110c21036c8431cc78b33177a60b4bcc02baf60d05fee5038e7339d3a688e394c2cbd8430c2103cdb067d930fd5adaa6c68545016044aaddec64ba39e548250eaea551172e535c12419ed0dc3a |\n| Address                 | NZ3pqnc1hMN8EHW55ZnCnu8B2wooXJHCyr                           |\n\n:::note\n\nPlease pay attention to the interval of the number for the usage of `emitPush(number)`. Here is an example in the case of the number being BigInteger, where data = number.ToByteArray():\n:::\n\n| Number           | Emit OpCode                        | Value            |\n| ---------------- | ---------------------------------- | ---------------- |\n| -1 <= number <= 16  | OpCode.PUSH0 + (byte)(int)number | 0x10 + number   |\n| data.Length == 1  | OpCode.PUSHINT8 + data | 0x00 + data   |\n| data.Length == 2  | OpCode.PUSHINT16 + data | 0x01 + data   |\n| data.Length <= 4  | OpCode.PUSHINT32 + data | 0x02 + PadRight(data, 4)   |\n| data.Length <= 8  | OpCode.PUSHINT64 + data | 0x03 + PadRight(data, 8)   |\n| data.Length <= 16  | OpCode.PUSHINT128 + data | 0x04 + PadRight(data, 16) |\n| data.Length <= 32  | OpCode.PUSHINT256 + data | 0x05 + PadRight(data, 32) |\n\n### The wallet address scripthash\n\nWhen creating a wallet in Neo blockchain, the private key, public key, wallet address, and related scripthash are generated. \n\nLet's look at a standard wallet address and corresponding scripthash strings in big and little endian formats beneath. \n\n| Format                   |                   String                   |\n| ------------------------ | :----------------------------------------: |\n| Adress                   |     NUnLWXALK2G6gYa7RadPLRiQYunZHnncxg     |\n| Big-endian Scripthash    | 0xed7cc6f5f2dd842d384f254bc0c2d58fb69a4761 |\n| Little-endian Scripthash |  61479ab68fd5c2c04b254f382d84ddf2f5c67ced  |\n| Base64 Scripthash        |        YUeato/VwsBLJU84LYTd8vXGfO0=        |\n\nTo convert between the wallet address and scripthash, or between big endian and little endian byte order, use the tool [Data Convertor](https://neo.org/converter).\n\n## Wallet Files\n\n### db3 files\n\nThe db3 wallet is commonly used in wallets of the exchange to facilitate a large amount of account information storage and the retrieval queries.\n\nA db3 wallet file uses SQLite to store data, and the file name extension is `.db3`. There are four tables created in a db3 file\uff1a\n\n- Account\n\n  | Field    ", "doc_id": "94a79420-1ac0-40df-879c-63b5307ccfd6", "embedding": null, "doc_hash": "6a041158090665a75be995af699e64de9829da2466a2c477c0b6ce4baae9b17a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 4995, "end": 7365, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "551ef7a2-6c74-414f-a8d1-25da76b159fe", "3": "edc00528-bcf3-4616-a609-f16528bd56ed"}}, "__type__": "1"}, "edc00528-bcf3-4616-a609-f16528bd56ed": {"__data__": {"text": "in a db3 file\uff1a\n\n- Account\n\n  | Field               | Type          | isRequired | Note             |\n  | ------------------- | ------------- | ---------- | ---------------- |\n  | PrivateKeyEncrypted | VarBinary(96) | Yes        | AES256 encrypted |\n  | PublicKeyHash       | Binary(20)    | Yes        | Primary Key      |\n\n- Address\n\n  | Field      | Type       | isRequired | Note        |\n  | ---------- | ---------- | ---------- | ----------- |\n  | ScriptHash | Binary(20) | Yes        | Primary Key |\n\n- Contract\n\n  | Field         | Type       | isRequired | Note                                               |\n  | ------------- | ---------- | ---------- | -------------------------------------------------- |\n  | RawData       | VarBinary  | Yes        |                                                    |\n  | ScriptHash    | Binary(20) | Yes        | Primary Key\uff0cForeign Key\uff0cassociated Address table |\n  | PublicKeyHash | Binary(20) | Yes        | Index\uff0cForeign Key\uff0cassociated Account table       |\n\n- Key\n\n  | Field | Type        | isRequired | Note        |\n  | ----- | ----------- | ---------- | ----------- |\n  | Name  | VarChar(20) | Yes        | Primary Key |\n  | Value | VarBinary   | Yes        |             |\n\nIn `Key` table\uff0cit mainly stores the AES256 attributes:\n\n- `PasswordHash`: the hash of the passowrd, by using SHA256 hash operation.\n\n- `IV`: an initial vector of AES, randomly generated.\n\n- `MasterKey`: an encrypted ciphertext, obtained by encrypting the private key using AES256 algorithm with `PasswordKey`, `IV` parameters.\n\n- `Version`: the version of the wallet\n\nThe db3 wallet uses the AES (symmetrical encryption) as its encryption and decryption method.\n\n### NEP6 files\n\nAn NEP6 wallet file complies with the NEP6 standard, and the file name extension is `.json`. The JSON format is as follows:\n\n```json\n{\n\t\"name\": null,\n\t\"version\": \"3.0\",\n\t\"scrypt\": {\n\t\t\"n\": 16384,\n\t\t\"r\": 8,\n\t\t\"p\": 8\n\t},\n\t\"accounts\": [\n\t\t{\n\t\t\t\"address\": \"Nf8iN8CABre87oDaDrHSnMAyVoU9jYa2FR\",\n\t\t\t\"label\": null,\n\t\t\t\"isdefault\": false,\n\t\t\t\"lock\": false,\n\t\t\t\"key\": \"6PYM9DxRY8RMhKHp512xExRVLeB9DSkW2cCKCe65oXgL4tD2kaJX2yb9vD\",\n\t\t\t\"contract\": {\n\t\t\t\t\"script\": \"DCEDYgBftumtbwC64LbngHbZPDVrSMrEuHXNP0tJzPlOdL5BdHR2qg==\",\n\t\t\t\t\"parameters\":", "doc_id": "edc00528-bcf3-4616-a609-f16528bd56ed", "embedding": null, "doc_hash": "9ce7232305c6a528600b06ae2b94fa6d97c955f6f868eb8567219f8de6db23e6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 7344, "end": 9583, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "94a79420-1ac0-40df-879c-63b5307ccfd6", "3": "0639b5c9-0f10-4180-91e2-7784bae7850a"}}, "__type__": "1"}, "0639b5c9-0f10-4180-91e2-7784bae7850a": {"__data__": {"text": "[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"signature\",\n\t\t\t\t\t\t\"type\": \"Signature\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"deployed\": false\n\t\t\t},\n\t\t\t\"extra\": null\n\t\t}\n\t],\n\t\"extra\": null\n}\n```\nIn this example the password is 1\n\n| Field                           | Description                                                  |\n| ------------------------------- | ------------------------------------------------------------ |\n| name                            | a label that the user attaches to the wallet file            |\n| version                         | currently it is 3.0                                          |\n| scrypt\uff08n/r/p\uff09                 | (n/r/p) are parameters for scrypt algorithm used for encrypting and decrypting the private keys in the wallet |\n| accounts                        | an array of Account objects which describe the details of each account in the wallet |\n| account.address                 | account address                                              |\n| account.label                   | account label, null by default                               |\n| account.isDefault               | whether is the default account of wallet                     |\n| account.lock                    | whether the account is locked                                |\n| account.key                     | export nep2key of the privatekey                             |\n| account.contract                | the contract of the script                                   |\n| account.contract.script         | address script                                               |\n| account.contract.parameters     | parameter list for the address script contract               |\n| account.contract.parameter.name | parameter name for the address script contract               |\n| account.contract.parameter.type | parameter name for the address script contract               |\n| account.contract.deployed       | whether is deployed               ", "doc_id": "0639b5c9-0f10-4180-91e2-7784bae7850a", "embedding": null, "doc_hash": "eb5c1c494298298cb40da0b8a40649dc4f2d3c75c02e88a93e4fb4718abc37b9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 9613, "end": 11523, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "edc00528-bcf3-4616-a609-f16528bd56ed", "3": "2c275eb9-4024-437f-a381-6e7057785234"}}, "__type__": "1"}, "2c275eb9-4024-437f-a381-6e7057785234": {"__data__": {"text": "whether is deployed                                          |\n| account.extra                   | additional attributes of the account, null by default        |\n| extra                           | additional attributes of the wallet, null by default         |\n\nAn NEP6 wallet uses scrypt algorithm as the core method of wallet encryption and decryption.\n\n#### Encryption steps\n\n![](images/wallets/nep2key.png)\n\n1. The address is derived from the public key, and the address hash is the first four bytes of `SHA256(SHA256(Address))`\n\n2. Calculate a `derivedkey` by the scrypt algorithm, and divide the 64-byte data into two halves as `derivedhalf1` and `derivedhalf2` Scrypt uses the following parameters:\n\n    - ciphertext: The entered password (UTF-8 format)\n\t- salt: address hash\n\t- n: 16384\n\t- r: 8\n\t- p: 8\n\t- length: 64\n\n3. Do xor operation on the private key and `derivedhalf1`, and then get `encryptedkey` by using AES256 to encrypt it with `derivedhalf2`\n\n4. Concatenate data according to the following format and obtain `NEP2Key` by using Base58Check encoding of it\n\n\t`0x01` + `0x42` + `0xe0` + address hash + `encryptedkey`\n\n**Decryption steps**\uff1a\n\n1. Decode NEP2Key by using Base58Check decoding\n\n2. Check whether the length of decoded data is 39 bytes, and the first three bytes (data[0-2]) are `0x01`, `0x42` and `0xe0`\n\n3. Take data[3-6] as `addresshash`\n\n4. Put the password and addresshash into the Scrypt algorithm. Specify the result length to 64. Then get the `derivedkey`\n\n5. Take Derivedkey[0-31] as `Derivedhalf1`, and Derivedkey[32-63] as `Derivedhalf2`\n\n6. Take data[7-38] as `Encryptedkey` (32 bytes), and decrypt it using AES256 with `derivedhalf2` as the initial vector\n\n7. Do xor operation on the decrypted data and `derivedhalf1` to obtain the private key\n\n8. Get the public key from the private key with ECC algorithm, and then get the address. Check whether the first four bytes of the result of `SHA256(SHA256(Address))` is equal to the `addresshash`. If it's the same, then you get the correct private key\n\nMore details about NEP2 and NEP6 proposals are in the Neo document.\n\nNEP2 proposal: https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki\n\nNEP6 proposal\uff1ahttps://github.com/neo-project/proposals/blob/master/nep-6.mediawiki\n\n## Signature\n\nNeo employs the `ECDSA` algorithm to sign the transaction through the wallet component and take the `nistP256` or `Secp256r1` as the ECC curve and SHA256 as the hash algorithm.\n\nC# code\uff1a\n\n```cs\n        public static byte[] Sign(byte[] message, byte[] prikey, byte[] pubkey)\n        {\n            using (var ecdsa = ECDsa.Create(new ECParameters\n            {\n                Curve = ECCurve.NamedCurves.nistP256,\n             ", "doc_id": "2c275eb9-4024-437f-a381-6e7057785234", "embedding": null, "doc_hash": "5aa9df238aff7a488f1618c920e2671cf82fb987ba69f64e325423538c9aa33f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 11507, "end": 14224, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "0639b5c9-0f10-4180-91e2-7784bae7850a", "3": "5037b691-cb85-46ae-bcb4-aeb41a211d4a"}}, "__type__": "1"}, "5037b691-cb85-46ae-bcb4-aeb41a211d4a": {"__data__": {"text": "               D = prikey,\n                Q = new ECPoint\n                {\n                    X = pubkey[..32],\n                    Y = pubkey[32..]\n                }\n            }))\n            {\n                return ecdsa.SignData(message, HashAlgorithmName.SHA256);\n            }\n        }\n```\n\nExample:\n\n| Format     | Value                                                        |\n| ---------- | ------------------------------------------------------------ |\n| data       | hello world                                                  |\n| PrivateKey | f72b8fab85fdcc1bdd20b107e5da1ab4713487bc88fc53b5b134f5eddeaa1a19 |\n| PublicKey  | 031f64da8a38e6c1e5423a72ddd6d4fc4a777abe537e5cb5aa0425685cda8e063b |\n| signature  | b1855cec16b6ebb372895d44c7be3832b81334394d80bec7c4f00a9c1d9c3237541834638d11ad9c62792ed548c9602c1d8cd0ca92fdd5e68ceea40e7bcfbeb2 |\n\n## Wallet Function\n\n| Function Name   |  Description                                                  |\n| ---------------- | ------------------------------------------------------------ |\n| Import wallet file     |  Import the account information from the specified wallet file   |\n| Export wallet file     |  Store the account information (including private key, password, address, etc.) in the specified wallet file such as db3 wallet file, nep6 json file.  \t\t\t  |\n| Unlock wallet         | Verify user password to prevent leaks                   |\n| Create private key         | Recommend safe random generator\t\t\t     \t  |\n| Import private key         | Add new private key to the wallet with wif format or digital certificate   |\n| Export private key         | Export accounts' private key         \t\t\t  |\n| Generate public key         | Obtain public key by ECC algorithm with private key |\n| Generate address         |  Generate address based on private key               |\n| Import address         | Add new address to the wallet  \t\t\t\t\t\t  |\n| Export address         | Export accounts' address                               |\n| Import offline data |  Load block data in `chain.acc` file to reduce synchronization time    |\n| Export offline data | Export block data in", "doc_id": "5037b691-cb85-46ae-bcb4-aeb41a211d4a", "embedding": null, "doc_hash": "c9a0b101b26e39ef3542d01f6b69628f4cc57200df245aeb607087b49827d0e0", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 14242, "end": 16374, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "2c275eb9-4024-437f-a381-6e7057785234", "3": "c83ceb0d-ff6a-49d1-bfa5-249d8047d78c"}}, "__type__": "1"}, "c83ceb0d-ff6a-49d1-bfa5-249d8047d78c": {"__data__": {"text": "synchronization time    |\n| Export offline data | Export block data in `chain.acc` file \t\t\t\t  |\n| Synchronize block data     |                                        \t\t      |\n| Transfer             | Transfer to other addresses                              |\n| Sign             | Sign data, such as transactions                              |\n| Claim Gas          | Claim the newly allocated gas from the neo held by the account |\n| Get balance         | Show the balance of current wallet  |\n| Get transaction         | Show transaction history of current wallet |\n| Construct multi-signature contract | Construct multi-signature contract  |\n| Extend         |                                                                |\n| Deploy smart contract     |  Deploy smart contract |\n| Test smart contract     | Test smart contract |\n\n## Wallet software\n\n### Full-node wallet\n\nThe full-node wallet is a complete backup of blockchain data, which saves all the onchain data and participates in p2p network, therefore it needs a large storage space.\n\nNeo-CLI and Neo-GUI are all full-node wallet. For more information refer to [Neo node](../../node/introduction.md).\n\n### SPV wallet\n\nThe SPV (Simplified Payment Verification) wallet is different from a full-node wallet. It doesn't store all block data, only block header data, and verifies the data by using bloom filter and merkle tree algorithm. It's mostly used in mobile app or light client, as it can save storage space effectively.\n\nFor developing SPV wallet, refer to the NEO network protocol interface.\n\nUsage:\n\n   1. The SPV wallet sends a bloom filter to the full node, and the full node loads the bloom filter.\n\n   2. The SPV wallet sends the bloom filter's parameters to the full node, and the full node load the parameters. (Optional)\n\n   3. The SPV wallet queries transactions from the full node, and the full node returns the transaction data after filtering with the bloom filter and the constructed merkle tree path.\n\n   4. The SPV wallet uses the merkle tree path to verify the transaction data.\n\n   5. The SPV wallet sends `clear the bloom filter` instruction to the full node, and the full node clear it.\n", "doc_id": "c83ceb0d-ff6a-49d1-bfa5-249d8047d78c", "embedding": null, "doc_hash": "b071f50c924274e79183dd19e281842bd5d6717f05eca0957c4ada959d503d12", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}, "node_info": {"start": 16304, "end": 18476, "_node_type": "1"}, "relationships": {"1": "3cd61107c8874a4e23c0c0eb9989cbd2251eb959", "2": "5037b691-cb85-46ae-bcb4-aeb41a211d4a"}}, "__type__": "1"}, "1df4d47d-8263-4a57-b375-252033c805f4": {"__data__": {"text": "# dBFT 2.0 Algorithm\n\n## Terms\n\n| **Term**  | **Definition**                                               |\n| --------- | ------------------------------------------------------------ |\n| Consensus Node | Nodes that can propose a new block and vote for the proposed block      |\n| Normal Node | Nodes that can transfer and create transactions, are also ledges, but can neither propose new blocks nor vote  |\n| Speaker   | Validator in charge of creating and broadcasting a proposal block to the network |\n| Delegate  | Validator responsible for voting on the block proposal       |\n| Candidate | Account nominated for validator election                     |\n| Validator | Account elected from candidates to take part in consensus    |\n| View      | Referred to the dataset used during a round of consensus. View number *v* starts from 0 in each round and increases progressively upon consensus failure until the approval of the block proposal, and then is reset to 0. |\n\n## Consensus Message\n\nSix types of consensus messages are defined in dBFT2.0:\n\n| **Message**           | **Definition**                                               |\n| --------------------- | ------------------------------------------------------------ |\n| Prepare Request     | Message for starting a new round of consensus                    |\n| Prepare Response    | Message informing other validators that all necessary transactions have been collected for block creation |\n| Commit              | Message informing other validators that enough Prepare Response messages have been collected |\n| Change View Request | Message of view changing attempt                           |\n| Recovery Request    | Request for consensus data synchronization                 |\n| Recovery Message    | Response to Recovery Request message                         |\n\n## Consensus Flow\n\n### 3-Stage Consensus Flow\n\n![](../images/consensus/1.png)\n\nA round of consensus consists of 4 steps, as shown in the Figure above:\n\n1. Speaker starts consensus by broadcasting a Prepare Request message\n\n2. Delegates broadcast Prepare Response after receiving the Prepare Request message\n\n3. Validators broadcast Commit after receiving enough Prepare Response messages\n\n4. Validators produce & broadcast a new block after receiving enough Commit messages\n\nHere we introduce two variables as follows:\n\n![](../images/consensus/2.png)       \n\nwhere *N* is the number of validators.\n\nA normal algorithm flow is shown below.\n\n![](../images/consensus/3.png)\n\n##### 1)  Initialize local consensus information\n\n1. Initialize consensus context\n\n2. Set the validator whose index equals  *(h - v) mod N*  as the speaker. Here h is current block height, v is the current view, and N is the number of validators\n\n3. Set timeout period. For speaker, if it's handling RecoveryMessage from other nodes, timeout is set to 2<sup>v+1</sup> *T<sub>block</sub>, where *T<sub>block</sub>* is Block time and currently 15s. Otherwise, if the speaker has not participated in block generation in last consensus, timeout is set to *T<sub>block</sub>*.", "doc_id": "1df4d47d-8263-4a57-b375-252033c805f4", "embedding": null, "doc_hash": "787000c0aa8c7511d5baed4ed9663c606d2ed9dd990414d1eb0adc757da91e79", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_algorithm"}, "node_info": {"start": 0, "end": 3072, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "3": "12d9fa3a-00e1-4850-af8e-12473b6e2e9f"}}, "__type__": "1"}, "12d9fa3a-00e1-4850-af8e-12473b6e2e9f": {"__data__": {"text": "generation in last consensus, timeout is set to *T<sub>block</sub>*. If the speaker has participated, calculate D = current time - time of last block's generation. Set timeout to T<sub>block</sub> - D if D < T<sub>block</sub>, or to 0. \n\n4. Broadcast the Recovery Request message to acquire the current consensus context if consensus is newly started.\n\n##### 2)  Validators listen to the network and collect transactions until timeout\n\n##### 3)  Start consensus\n\n- For speaker:\n\n  1. Select transactions from memory pool according to consensus policy after timeout, create and broadcast Prepare Request message with these transactions' hashes to start a new round of consensus\n\n  2. Package and broadcast each 500 selected transactions\n\n  3. Set timeout to (2<sup>v+1</sup> - k(v))*T<sub>block</sub>, where ![](../images/consensus/4.png)   \n\n- For delegates:\n\n   - In case of receiving Prepare Request from the speaker before timeout:\n   \n     1. Verify the validity of the message and whether it conforms to the local consensus context\n\n     2. Prolong local timeout by ![](../images/consensus/5.png)\n\n     3. Update local consensus context\n\n     4. For each hash contained in the message, attempt to acquire corresponding transactions from memory pool or unverified transaction pool, and add these transactions to consensus context\n\n     5. Ask for transactions not found in step 4 from other nodes\n\n    - Otherwise, attempt to change view\n\n##### 4)  Broadcast Prepare Response\n\n- If a delegate collects all transactions required in Prepare Request before timeout:\n\n  1. For each transaction received, in case of transaction verification failure or against consensus policy, attempt to change view, otherwise add the transaction to consensus context\n\n  2. Broadcast Prepare Response message\n\n  3. Prolong local timeout by ![](../images/consensus/5.png)\n\n- Otherwise, attempt to change view\n\n##### 5)  Collect Prepare Response and broadcast Commit\n\n- For the speaker and delegates who have received Prepare Request, if Prepare Response messages from M different delegates are received before timeout:\n\n   - For each Prepare Response message received:\n\n     1. Verify the validity of the message and whether it conforms to the local consensus context\n\n     2. Prolong local timeout by ![](../images/consensus/5.png)\n\n   - Broadcast Commit message\n\n- Otherwise, attempt to change view\n\n##### 6) Collect Commit message and create new block\n\n- For each validator already having all transactions required in Prepare Request message, in case of Commit messages from M different validators received:\n\n   - For each Commit message received:\n\n     1. Verify the validity of the message and whether it conforms to the local consensus context\n\n     2. Prolong local timeout by ![](../images/consensus/6.png)\n\n   - Create and broadcast the new block\n\n- Otherwise, broadcast the Recovery Message, and set the timeout to 2*T<sub>block</sub>\n\n##### 7)  Go back to step 1 to start a new round of consensus.\n\n### Change View Request\n\n#### Triggering conditions\n\n- If the transaction verification fails, the delegate will broadcast Change View Request attempting to replace speaker\n\n- In case of timeout while waiting for Prepare Request or Prepare Response, the delegate will broadcast Change View Request, attempting to replace the speaker\n\n#### Flow\n\n![](../images/consensus/8.png)\n\n1. Set the timeout to 2<sup>v+2</sup> * T<sub>block</sub> \n\n2. If the sum of nodes with Commit sent and fault nodes (referring to the validators from which no other validator receives messages during a block time) is greater than", "doc_id": "12d9fa3a-00e1-4850-af8e-12473b6e2e9f", "embedding": null, "doc_hash": "ff6414a73518883e5ddad3bcb64bd1ab59001211467ff8ccc16b1319918002a6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_algorithm"}, "node_info": {"start": 3013, "end": 6611, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "2": "1df4d47d-8263-4a57-b375-252033c805f4", "3": "761a539f-d00f-4329-b4bb-7ba87c20558a"}}, "__type__": "1"}, "761a539f-d00f-4329-b4bb-7ba87c20558a": {"__data__": {"text": "from which no other validator receives messages during a block time) is greater than F, broadcast Recovery Request message\n\n3. Otherwise, broadcast Change View Request message, and check the amount of Change View Request received. If not less than M validators reach consensus upon view changing, change local view, initialize local consensus context, and determine the next round's speaker according to new view.\n\n#### Process logic\n\nWhen a validator receives Change View Request message:\n\n1. If the message's view is not greater than the local view, this message will be handled as Recovery Request\n\n2. Verify the validity of the message\n\n3. Check the amount of Change View Request received. If not less than M validators reach consensus upon view changing, change the local view, initialize local consensus context, and determine next round's speaker according to new view\n\n![](../images/consensus/9.png)\n\n### Recovery Request Message\n\n#### Triggering conditions\n\n- Broadcast Recovery Request message upon enabling the consensus policy to update local consensus context\n\n- Upon creating Change View Request, if there are not enough active validators (sum of nodes with Commit sent and fault nodes is greater than F), broadcast Recovery Request message to update the local consensus context\n\n#### Process logic\n\nUpon receiving Recovery Request, a validator will generate and broadcast Recovery Message only if the following conditions are met:\n\n- This node has already broadcast Commit message\n\n- This node's index belongs to the given interval: ![](../images/consensus/7.png) , where j is the index of Recovery Request sender\n\n![](../images/consensus/10.png)\n\n### Recovery Message\n\n#### Content\n\n- Change View Request messages from no more than M delegates\n\n- Prepare Request/Response messages\n\n- Commit messages\n\n#### Triggering conditions\n\n- Upon receiving Recovery Request message, if this node has already broadcast Commit message or its index belongs to the given interval:![](../images/consensus/7.png) , where j is the index of Recovery Request sender\n\n- Upon receiving Change View Request message, if the message's view is not greater than the local view, this message is handled as Recovery Request\n\n- In case of a timeout while waiting for Commit message, broadcast Recovery Message to resend Commit message (common in network issues)\n\n#### Process flow\n\n1. Verify the validity of the message and the local consensus context. If the message's view is greater than the local view, and this node has already sent Commit message, ignore this message \n\n2. Otherwise, if the message's view is greater than the local view, handle Change View Request messages inside\n\n3. If the message's view equals local view:\n\n   - Handle Prepare Request message inside\n\n     1. If this node has neither sent nor received Prepare Request message, handle Prepare Request message inside\n\n     2. Otherwise if this node is the speaker, broadcast Prepare Request message\n\n   - Handle Prepare Response messages inside\n\n4. If the message view is not greater than the local view, handle Commit messages inside\n\n![](../images/consensus/11.png)\n\nThe mechanism with Change View Request, Recovery Request and Recovery Message can keep consensus safe from timeout caused by the network, abnormal nodes (malicious nodes, fault nodes, etc.) and other issues.\n\n## Consensus Policy\n\nConsensus policy is used in the following scenarios:\n\n- Upon receiving transactions from other nodes, nodes will perform verification to filter out transactions against consensus policy\n\n- Upon receiving transactions, the consensus module needs to verify whether these transactions satisfy the consensus policy, if not, it will attempt to change the view\n\n- The Validator needs to filter transactions in its context upon enabling the consensus policy, only confirmed transactions can be added into the memory pool\n\n- The speaker needs to select transactions from memory pool according to the consensus policy for new Prepare Request\n", "doc_id": "761a539f-d00f-4329-b4bb-7ba87c20558a", "embedding": null, "doc_hash": "a095a1409231e45fdce783aa564da57b207957e1a7b6d458c652dbf7ac6d850b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_algorithm"}, "node_info": {"start": 6587, "end": 10579, "_node_type": "1"}, "relationships": {"1": "40e6988df92f95cc6e47ac5ad74396c709d80fbf", "2": "12d9fa3a-00e1-4850-af8e-12473b6e2e9f"}}, "__type__": "1"}, "9f896f18-b3d7-49bd-9736-e54caa8f3134": {"__data__": {"text": "# Consensus Protocol\n\n## Consensus Message Format\n\n### ExtensiblePayload\n\n| Size | Field | Type  | Description |\n|----|------|-------|------|\n| ? | Category | String | Message category, currently is `dBFT` |\n| 4 | ValidBlockStart | uint | Starting height where message is valid |\n| 4 | ValidBlockEnd | uint | Ending height where message is valid |\n| 20 | Sender | UInt160 | The address hash of the current consensus node |\n| ?  |  Data | byte[] | The data includes `ChangeView`, `PrepareRequest`, `PrepareResponse`, `Commit`, `RecoveryMessage`, `RecoveryRequest` |\n| ? | Witness | Witness | Witness contains invocation script and verification script |\n\n### ConsensusMessage\n\nConsensusMessage is the basic abstract type of all consensus message types. Other consensus message types are all inherited from this type.\n\n| Size | Field | Type  | Description |\n|----|------|-----|-------|\n| 1 | Type | ConsensusMessageType | Includes `ChangeView`, `PrepareRequest`, `PrepareResponse`, `Commit`, `RecoveryMessage`, `RecoveryRequest` |\n| 4 | BlockIndex | uint | Height where message is created |\n| 1 | ValidatorIndex | byte | The index of the sender in validators array |\n| 1 | ViewNumber | byte | View number where message is created |\n\n### ChangeView\n\n| Size | Field | Type  | Description |\n|----|------|-----|-------|\n| 8 | Timestamp | ulong | Timestamp when the ChangeView message is created |\n| 1 | Reason | ChangeViewReason |  Reason for the view change |\n\n### Commit\n\n| Size| Field | Type | Description |\n|----|------|-----|-------|\n| ? | Signature | byte[] | Message signature |\n\n### PrepareRequest\n\n| Size | Field | Type  | Description |\n|----|------|-----|-------|\n| 4 | Version | uint | Default value is 0 |\n| 32 | PrevHash | UInt256 | Previous block's hash |\n| 8 | Timestamp | ulong | Timestamp when the PrepareRequest message is created |\n| ? | TransactionHashes | UInt256[] |  The transaction hashes in the block |\n\n### PrepareResponse\n\n| Size | Field | Type | Description |\n|----|------|-----|-------|\n| 32 | PreparationHash | UInt256 | Hash of corresponding prepare request |\n\n### RecoveryMessage\n\n| Size | Field | Type | Description |\n|----|------|-----|-------|\n|  ?  | ChangeViewMessages | Dictionary<int, ChangeViewPayloadCompact> | ChangeView messages |\n|  ?  | PrepareRequestMessage | PrepareRequest | The current PrepareRequest message |\n|  32  | PreparationHash | UInt256 | Hash of prepare request |\n|  ?  | PreparationMessages | Dictionary<int, PreparationPayloadCompact> | Preparation messages that have been collected |\n|  ?  | CommitMessages | Dictionary<int, CommitPayloadCompact> | Commit messages that have been collected |\n\n### RecoveryRequest\n\n| Size | Field | Type | Description |\n|----|------|-----|-------|\n|  8  | Timestamp | ulong | Timestamp when the message is created |\n\n## Transport Protocol\n\nWhen a consensus message enters the P2P network, it's broadcasted and transmitted like other messages. That is because consensus nodes do not have IP address of other consensus nodes. Consensus nodes are not directly connected. That is to say, ordinary nodes can also receive consensus message. The broadcast flow of consensus messages is as follows.\n\n[![consensus_msg_seq](../images/consensus/consensus_msg_seq.jpg)](../../images/consensus/consensus_msg_seq.jpg)\n\n  1. Consensus node A will directly broadcast 'consensus' message to connected nodes(e.g. node B).\n\n  2. After receiving the `consensus` message, node B firstly process the received consensus", "doc_id": "9f896f18-b3d7-49bd-9736-e54caa8f3134", "embedding": null, "doc_hash": "3c362bae93ce28c70ad285d8387bc5b0173bd810b233e447091591bae9b2836f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_protocol"}, "node_info": {"start": 0, "end": 3483, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "3": "92a565b7-50ed-433d-b1b7-19d5cf42e48b"}}, "__type__": "1"}, "92a565b7-50ed-433d-b1b7-19d5cf42e48b": {"__data__": {"text": "After receiving the `consensus` message, node B firstly process the received consensus message and then forwards it. Before forwarding the consensus message, it sends an `inv` message which carries the hash data of the `payload` of the `consensus` message (to node C).\n\n  3. If the node C has already known the data corresponding to the hash, it does not process the inv message. Otherwise, it proceeds to step 4.\n\n  4. Node C sends a `getdata` message to node B, with the hash data in the `inv` message.\n\n  5. After receiving the `getdata` message, node B sends a `consensus` message to node C.\n\n  6. After receiving the `consensus` message, the node C triggers the consensus module to process the message, and forwards the consensus message, and then returns to step 2.\n\nBoth inv and getdata messages use InvPayload as the message carrier, which is defined as follows:\n\n### InvPayload\n\n| Size | Field | Type  | Description |\n|------|------|-------|------|\n| 1 | Type | InventoryType | Message type |\n| ? | Hashes | UInt256[] | Hashes broadcasted / requested |\n\nThere are 3 kinds of  `InventoryType`:\n\n- `0x2b`: Transaction. `Hashes` is assigned to the transaction.\n- `0x2c`: Block. `Hashes` is assigned to the block.\n- `0x2e`: Consensus. `Hashes` is assigned to the `ConsensusPayload` message.\n\n## Consensus Message Process\n\n###  Verification\n\n1. Ignore the message if `ValidBlockStart` is lower than `ValidBlockEnd`.\n\n2. Ignore the message if current block height is out of `[ValidBlockStart, ValidBlockEnd)`.\n\n3. Ignore the message if sender is not listed in the consensus white list.\n\n4. Ignore the message if the verification script failed or `Category` is not \"dBFT\".\n\n5. Ignore the message if the node has sent out the new block.\n\n6. Ignore the message if the consensus message data is in a wrong format.\n\n7. Ignore the message if the `message.BlockIndex` is lower than the current block height.\n\n8. Ignore the message if the `ConsensusPayload.ValidatorIndex` is out of index of the current consensus nodes array, or `payload.Sender` is different from the correct hash.\n\n### Process\n\n1. On receiving a `PrepareRequest` sent by speaker, attached with proposal block data.\n\n    1. Ignore if the `PrepareRequest` has already been received or the node is trying to change the view.\n\n    2. Ignore if the `message.ValidatorIndex` is not the index of the current round speaker or the `PrepareRequest.ViewNumber` is not equal to the current view number.\n\n    3. Ignore if `message.Version` or `message.PrevHash` is different from the local context.\n\n    4. Ignore if transactions' amount is over `MaxTransactionsPerBlock`.\n\n    5. Ignore if the `message.Timestamp` is not more than the timestamp of the previous block, or is more than 8 blocks above current time.\n\n    6. Ignore if any proposed transaction has already been included in the blockchain\n\n    7. Renew consensus context and clear invalid signatures that have been received (Prepare-Reponse may arrive first)\n\n    8. Save the signature of the speaker into current context.\n\n    9. If there's no transaction in this request, directly check the local collection of `PrepareResponse`, and broadcast the `Commit` message in case of enough `PrepareResponse` collected.\n\n    10. Collect and verify transactions in the proposal block from memory pool.\n\n        1. Ignore if the transaction failed to pass verification or the transaction did not meet strategic requirements.\n        \n      ", "doc_id": "92a565b7-50ed-433d-b1b7-19d5cf42e48b", "embedding": null, "doc_hash": "ebc92c83902f2ecd95c4f1083890b48cde663eaf37ca1a2ca8bfee3e47852547", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_protocol"}, "node_info": {"start": 3409, "end": 6854, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "2": "9f896f18-b3d7-49bd-9736-e54caa8f3134", "3": "20b6cc4f-47b7-4394-9024-796758eef2b5"}}, "__type__": "1"}, "20b6cc4f-47b7-4394-9024-796758eef2b5": {"__data__": {"text": "strategic requirements.\n        \n        2. Otherwise the transaction will be saved into current consensus context.\n    \n    11. Verify the transactions required by blocks in the unconfirmed transaction pool and add them into current context.\n\n    12. Broadcast a `getdata` message with a list of transaction hashes if they were missed in the block.\n\n2. On receiving a `PrepareResponse` sent by consensus nodes with their signature.\n\n    1. Ignore it if the message view is not the same as the current view\n\n    2. Ignore it if current node has already saved the sender's signature or the current node is trying to change the view.\n\n    3. Save it temporarily if current node has not received PrepareResponse yet (Clear it after receiving PrepareResponse), or go to next step.\n\n    4. Verify the signature. Save the signature if it pass the verification. Ignore it if not.\n\n    5. Ignore it if the node has already sent `Commit`.\n\n    6. Verify the signature number if the node has already sent or received `PrepareRequest`. If there are at least `N-f` signatures, broadcast `Commit` and generate the block if there are `N-f` `Commit` messages have been received.\n\n3. On receiving a `Changeview` sent by consensus nodes.\n\n    1. Send `RecoveryMessage` if the new view number in the message is less than or equal to the view number in current context.\n\n    2. Ignore it if the node has sent `Commit`.\n\n    3. If current node received at least `N-f` `ChangeView` messages with the same new view number, then ViewChange will happen. The current node reset the consensus process with the new view number.\n\n4. On receiving a `Commit` send by consensus nodes after receiving `N-f` `PrepareResponse`.\n\n    1. Ignore it if it has been received from the same node before.\n\n    2. Save the message into the consensus context if the signature passed verification,  generate a block and broadcast if `N-f` Commit messages has been received.\n\n5. On receiving a `RecoveryRequest` sent by consensus nodes when initiating a consensus or the sum of committed and failed nodes is greater than `f`.\n\n    1. Ignore it if it has been received before.\n\n    2. Response it if the node has sent the `Commit` message before or the node index is no more than f numbers later than the sender index\n\n    3. Send `RecoveryMessage` if the node is obligated to response.\n\n6. On receiving a `RecoveryMessage` broadcast by consensus nodes when receiving an accessible `RecoveryRequest` or time out after a Commit message has been sent.\n\n    1. Receive and handle `ChangeView` inside if the message view number is greater than the node view number. \n\n    2. Then receive and handle `PrepareRequest` and `PrepareResponse` inside if the message  view number is equal to the node view number, and the node is not in the process of changing view or has not sent `Commit` before.\n\n    3. Then receive and handle `Commit` inside if the message view number is not greater than the node view number. \n\n7. On receiving an `OnTimer`\n\n    1. Ignore if timer's height or view number is different from local context.\n\n    2. If the speaker timeout, the consensus node will broadcast `PrepareRequest` for the first timeout. For subsequent timeouts, it will broadcast `RecoveryMessage` if `Commit` message has been sent, otherwise `ChangeView`.\n\n    3. If the delegate timeout, the consensus node will broadcast `RecoveryMessage` if `Commit` message has been sent, otherwise `ChangeView`.\n\n8. On receiving a `PersistCompleted`\n\n   ", "doc_id": "20b6cc4f-47b7-4394-9024-796758eef2b5", "embedding": null, "doc_hash": "3e35bff61ae195d66a927582ac2be1a05b30e1bfe024b0efa08340db12db6019", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_protocol"}, "node_info": {"start": 6906, "end": 10388, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "2": "92a565b7-50ed-433d-b1b7-19d5cf42e48b", "3": "82f5e5fa-f196-4dbf-976f-690320eb14e1"}}, "__type__": "1"}, "82f5e5fa-f196-4dbf-976f-690320eb14e1": {"__data__": {"text": "On receiving a `PersistCompleted`\n\n    Resetting consensus process\n\n9. On receiving a `New Transaction` for consensus\n\n    1. Ignore if the current node has sent `PrepareRequest` or `PrepareResponse` message, or in process of change view, or has sent new block in this round\n\n    2. Ignore if the transaction has been received before.\n\n    3. Ignore if the received transaction isn't in the proposal block.\n\n    4. Broadcast `ChangeView` if the transaction verification fails.\n\n    5. Save the transaction into the proposal block.\n\n    6. Handle the corresponding logic if this is an Oracle transaction.\n\n    7. If the receiver is a delegate, broadcast the `ChangeView` message if the new block doesn't accord with `MaxBlockSize` or `MaxBlockSystemFee`. It also checks local collection of `PrepareResponse`, and broadcasts the `Commit` message in case of enough `PrepareResponse` collected.\n", "doc_id": "82f5e5fa-f196-4dbf-976f-690320eb14e1", "embedding": null, "doc_hash": "0c7118439facb50bffc24e2a4ef7b9b2855728e253bcfba51baa7f11c7abd931", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/consensus_protocol"}, "node_info": {"start": 10374, "end": 11265, "_node_type": "1"}, "relationships": {"1": "c5934a0545fd0134853929cf387d1285c0fd4eb8", "2": "20b6cc4f-47b7-4394-9024-796758eef2b5"}}, "__type__": "1"}, "58a03b85-eab1-489c-affa-9127b75b855a": {"__data__": {"text": "# Consensus Mechanism\n\n## Overview \n\nA blockchain is a decentralized distributed ledger system. It could be used for registration and issuance of digitalized assets, property right certificates, credit points and so on. It enables transfer, payment, and transactions in a peer-to-peer way. The blockchain technology was originally proposed by Satoshi Nakamoto in a cryptography mailing list, i.e. the Bitcoin. Since then, numerous applications based on the blockchain emerged, such as e-cash systems, stock equity exchanges and Smart Contract systems.\n\nA blockchain system is advantageous over a traditional centralized ledger system for its full-openness, immutability and anti-multiple-spend characters, and it does not rely on any kind of trusted third-party.\n\nHowever, like all distributed systems, blockchain systems are challenged with network latency, transmission errors, software bugs, security loopholes and black-hat hacker threats. Moreover, its decentralized nature suggests that no participant of the system cannot be trusted. Malicious nodes may emerge, so does data difference due to conflicting interests.\n\nTo counter these potential errors, a blockchain system is in need of an efficient consensus mechanism to ensure that every node has a copy of a recognized version of the total ledger. Traditional fault tolerance mechanisms concerning certain problems may not be completely capable of tackling the issue that distributed and blockchain systems are faced with. A universal cure-to-all fault tolerance solution is in need.\n\nProof-of-Work mechanism, employed by the Bitcoin, addresses this issue rather brilliantly. But it comes with an obvious price, i.e. significant electricity cost and energy consumption. Further, with Bitcoin\u2019s existence, new blockchains must find different hashing algorithms, so as to prevent computational attacks from it. For example, Litecoin adopts SCRYPT, rather than Bitcoin\u2019s SHA256.\n\nByzantine Fault Tolerance mechanism is a universal solution for distributed systems. NEO proposes dBFT (delegated Byzantine Fault Tolerance) consensus algorithm based on PBFT   (Practical Byzantine Fault Tolerance) algorithm. Algorithm dBFT determines validator set according to real-time blockchain voting, which effectively enhances the effectiveness of the algorithm, bringing block time and transaction confirmation time savings. dBFT2.0 as an upgraded version was released in Mar. 2019, which improves robustness and safety by introducing 3-stage consensus as well as a recovery mechanism.\n\n## System Model \n\nA blockchain is a distributed ledger system in which participants connect with each other via a peer-to-peer network. All messages within it will be sent by broadcasting. Two types of roles exist: Ordinary nodes and Bookkeeping nodes. Ordinary nodes use the system to transfer and exchange, accepting ledger data; while bookkeeping nodes provide accounting service for the entire network and maintain the ledger. \n\nHypothetically, in this system, messages may subject to loss, damage, latency and repetition. Also, the sending order may not necessarily be consistent with the receiving order of messages. The activities of nodes could be arbitrary, they may join and quit the network at any time; they may also dump and falsify information or simply stop working. Artificial or non-artificial glitches may occur as well.\n\nIntegrity and Authenticity of information transmission are ensured with cryptography while senders must attach signatures to the hash value of the message sent. \n\n## The Algorithm \n\nOur algorithm ensures security as well as usability. With erroneous nodes in the consensus making no more than \u230a (N\u22121) / 3 \u230b , the functionality and stability of the system is guaranteed. In it, N = |\ud835\udc45| suggests the total number of nodes joined in the consensus making while R stands for the set of consensus nodes. Given F = \u230a (N\u22121) / 3 \u230b , f stands for the maximum number", "doc_id": "58a03b85-eab1-489c-affa-9127b75b855a", "embedding": null, "doc_hash": "0a5fdcd9839030a27099b3615aae545bc1d182e4784279781d5f8e2895531ecd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/dbft"}, "node_info": {"start": 0, "end": 3928, "_node_type": "1"}, "relationships": {"1": "788ef6bbf0ac63a5af9401c87bcd6edb034e48cd", "3": "8256203d-0439-4c8e-ba04-b2874d9ab9c7"}}, "__type__": "1"}, "8256203d-0439-4c8e-ba04-b2874d9ab9c7": {"__data__": {"text": "(N\u22121) / 3 \u230b , f stands for the maximum number of erroneous nodes allowed in the system. In fact, the total ledger is maintained by bookkeeping nodes while ordinary nodes do not participate in the consensus making. This is to show the entire consensus making procedures.\n\nAll consensus nodes are required to maintain a state table to record current consensus status. The data set used for a consensus from its beginning to its end is called a View. If consensus cannot be reached within the current View, a View Change will be required. We identify each View with a number v, starting from 0 and it may increase till achieving the consensus.\n\nWe identify each consensus node with a number, starting from 0, the last node is numbered N \u2212 1. For each round of consensus making, a node will play speaker of the house while other nodes play congressmen. The speaker\u2019s number p will be determined by the following algorithm: Hypothetically the current block height is h, then \ud835\udc5d = (\u210e \u2212 \ud835\udc63) \ud835\udc5a\ud835\udc5c\ud835\udc51 N, p\u2019s value range will be  0 \u2264 \ud835\udc5d < N .\n\nA new block will be generated with each round of consensus, with at least N \u2212 F signatures from bookkeeping nodes. Upon the generation of a block, a new round of consensus making shall begin, resetting v=0.\n\n###  General Procedures \n\n![](../images/consensus/1.png)\n\nA round of consensus consists of 4 steps, as shown in the Figure above.\n\n1. Speaker starts consensus by broadcasting a Prepare Request message,\n2. Delegates broadcast Prepare Response after receiving the Prepare Request message,\n3. Validators broadcast Commit after receiving enough Prepare Response messages,\n4. Validators produce & broadcast a new block after receiving enough Commit messages.\n\n\n### View Change \n\nIn case of the following scenarios, the Change View Request will be broadcasted attempting to replace speaker:\n\n- The transaction verification fails\n- Time is out while waiting for Prepare Request or Prepare Response\n\n### Recovery Mechanism\n\nWhen creating Change View Request, if there are not enough active consensus nodes (sum of nodes with Commit sent and fault nodes is greater than F), consensus nodes will broadcast Recovery Request message to update the local consensus context. Upon receiving Recovery Request, if certain conditions are met, a consensus node will generate and broadcast Recovery Message.\n\n## Fault Tolerance of dBFT2.0\n\nA dBFT2.0 consensus system with *N* validators can tolerate at most *F* abnormal nodes. Each consensus phase (Commit, Change View, block generation, etc.) requires at least *M* nodes to reach consensus. As long as the amount of normal validators is not less than *M*, the consensus process will go on smoothly. For example, just 4 \u2212 \u230a (4\u22121) / 3 \u230b =3  normal validators required can keep alive a consensus system where *N* = 4.\n\n## Single Block Finality of dBFT2.0\n\nNeo's dBFT 1.0 algorithm was susceptible to a single block fork in rare cases of network latency. dBFT2.0 fixes this problem, hence there is no possibility of forking since then. The mechanism is described as follows:\n\n- To generate a new block, it is required to collect Commit messages from at least M different validators for corresponding block proposal.\n- A validator will never change its view after broadcasting Commit message.\n\nHence the success of block generation means:\n\n- There are already at least M validators having signed the block proposal and broadcast Commit messages. Moreover, these validators won't change the view in current consensus round.\n- The rest of the validators are insufficient to produce another different block.\n\nTherefore, the finality of the new block can be guaranteed at a given height.\n", "doc_id": "8256203d-0439-4c8e-ba04-b2874d9ab9c7", "embedding": null, "doc_hash": "f218db4714ee8830442f6197a5107e67bc465a6b5353d17d8f098265cb6685a1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/dbft"}, "node_info": {"start": 3883, "end": 7528, "_node_type": "1"}, "relationships": {"1": "788ef6bbf0ac63a5af9401c87bcd6edb034e48cd", "2": "58a03b85-eab1-489c-affa-9127b75b855a"}}, "__type__": "1"}, "12783d61-7092-4178-9b69-85f6d8d6e456": {"__data__": {"text": "# Consensus Nodes Election\n\nNeo is an open and transparent blockchain network where anyone can either initiate a transaction to apply for being a validator candidate or vote to decide which validator candidate can become a consensus node. The committee members and validators are elected based on the voting result.\n\n:::note\n\nCommittee members have the privilege to modify the configuration of Neo network by voting, currently including fee per byte for network transmission, execution fee factor, storage price, blocking / unblocking account, etc.\n:::\n\nThere is no duty assigned to candidates. However, committee members and validators are elected from certain number of candidates with most votes. Their relationship can be described in the following picture. There is no explicit relationship between committee members and validators but, as default committee member amount (21) is more than that of validators, generally speaking validators are a subset of committee members. \n\n![](../images/consensus/vote_candidate.png)\n\nEvery address has the right to vote to only one address (whether or not it's a candidate). A candidate's received votes are defined as the sum of NEO held by its voter. \n\nVoting is a dynamic and continuous process. If the NEO asset of a voter is changed, the number of votes at the previous voting address will also change, and the list of consensus nodes and committee members will change accordingly every 21 blocks.\n\n:::note\n\nGenesis Block is the first block\uff0cits `NextConsensus` is set to the script hash of standby consensus nodes' multi-signature contract.\n:::\n\n## From Delegate to Speaker\n\nA speaker is a consensus node who creates the next proposal block. The list of consensus nodes is obtained by the method above, and the speaker is determined by the formula `p = (h - v) mod N` in the dBFT algorithm. `h` is the height of the proposal block. `v` is view number, start from 0. `N` is the number of consensus nodes.\n\nDuring the consensus phase, a speaker will send `PrepareRequest` message with `NextConsensus`, which determines the next block consensus nodes. The Speaker gets the next round of consensus nodes by combining the transactions in the proposal block with the previous votes in blockchain, and assign the script hash of 2/3 multi-signature contract to `NextConsensus`. \n", "doc_id": "12783d61-7092-4178-9b69-85f6d8d6e456", "embedding": null, "doc_hash": "95d0f3942ee146a87188454853d2dc1668f8fe99fecf4cd0ae36af3f9627efb6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/vote_validator"}, "node_info": {"start": 0, "end": 2319, "_node_type": "1"}, "relationships": {"1": "a001268bbd43a5fdb5cbae1e57f3eff5888c105b"}}, "__type__": "1"}, "00222303-974c-4160-b480-7d270af15804": {"__data__": {"text": "---\nsidebar_label: 'Governance and Incentives'\nsidebar_position: 1\n---\n# Governance and Incentives\n\nAs a community-driven open platform, Neo N3's on-chain governance model introduces new, essential roles along with an incentive model to ensure that all participants are rewarded accordingly. \n\n## Governance Strategy\n\nThe new governance model consists of candidates, committee members, and consensus nodes. Among them, the committee is responsible for parameter adjustment of the main net and maintenance of the on-chain environment; consensus nodes are responsible for packaging transactions and generating blocks. Committee members and consensus nodes are elected from certain number of candidates with most votes. Their relationship can be described in the following picture. There is no explicit relationship between committee members and consensus nodes but, as default committee member amount (21) is more than that of consensus nodes (7), generally speaking consensus nodes are a subset of committee members.\n\n![](images/candidateRelationship.png)\n\n\n\n### Candidates\n\nAny and all individuals or organizations can register to become a candidate and seek votes from voters to become a committee member. After the registration transaction has been recorded on-chain, NEO holders can vote for the candidates they believe are best equipped to make the right decisions for Neo. The votes received by a candidate are calculated every 21 blocks as the sum of NEO tokens on all wallet addresses that have voted for that candidate over the past epoch. \n\nTo ensure that committee members are truly supported by the community, elections are only effective when more than 20% of NEO tokens are used to vote. Afterwards, a certain number of candidates with most votes automatically become committee members and consensus nodes.\n\n### Committee\n\nThe committee members are elected from candidates with the top 21 most votes. The votes received by a candidate are calculated every 21 blocks, so voters can adjust their voting strategies flexibly according to the performance of the committee.\n\nFor any proposal to be approved, over 50% of committee members must reach an agreement before signing a transaction to update blockchain params on-chain.  \n\nMoreover, the committee can appoint a number of node roles, including:\n\n- Oracle nodes\n- StateRoot consensus nodes\n- NeoFS Inner Ring nodes\n\n### Consensus Nodes \n\nAmongst the 21 committee members, the top voted seven committee members also serve as consensus nodes to promote transaction activity and optimize the Neo blockchain\u2019s security. They have the authority to initiate new block proposals and generate blocks. \n\nSimilar to committee members, consensus nodes are refreshed every 21 blocks.\n\n## Incentives\n\nInheriting from Neo Legacy, Neo N3 employs the dual-token mechanism, where NEO is used for governance and GAS is used for payment.\n\n### NEO\n\nNEO has a max supply of 100 million tokens and the smallest unit of 1, or in other words, is not divisible. NEO holders are the owners and managers of the Neo network. By constructing voting transactions on the Neo network, they can exercise management power, such as electing consensus nodes, adjusting consensus strategy, adjusting pricing model, etc., and can also claim the corresponding GAS based on the amount of NEO they hold.\n\n### GAS\n\nGAS is the fuel token for the realization of Neo network resource control, with a smallest unit of 0.00000001. Users can obtain GAS either through a claim or purchase. When using the Neo network, they need to pay a certain amount of GAS as network fees, such as transfer, registering assets, publishing assets, running DApps, etc.\n\nUnlike the Neo Legacy, there is no supply limit for Neo N3 GAS, and the system fee for transactions will be burned off.\n\n### GAS Distribution Rule  \n\nIn the initial configuration, 5 GAS tokens will be generated per block\u2014this in turn will be distributed to the Neo Committee (consisting of consensus nodes and candidate nodes), NEO", "doc_id": "00222303-974c-4160-b480-7d270af15804", "embedding": null, "doc_hash": "991daad8c56d0dfe0ddd34824a10cb590491dc229b0d11fdfe4ed955527a3545", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/governance"}, "node_info": {"start": 0, "end": 4000, "_node_type": "1"}, "relationships": {"1": "9fba62de8df2dbecab3ab5ffca830f8b04c58de4", "3": "71e7e907-3c01-4e6e-911e-3f8d9a190ddc"}}, "__type__": "1"}, "71e7e907-3c01-4e6e-911e-3f8d9a190ddc": {"__data__": {"text": "Neo Committee (consisting of consensus nodes and candidate nodes), NEO voters, and all NEO holders. The generated GAS will be distributed according to certain rules shown as down below:\n\n**NEO holders \u2013 10%**\n\nAs with Neo Legacy, this portion of GAS is not distributed voluntarily to NEO holders. It is calculated and distributed to NEO holder\u2019s wallet according to the NEO holding period only after NEO holder has completed a transfer or voting of NEO. \n\n**Committee & consensus nodes \u2013 10%** \n\nThe remaining 10% is used to reward 21 committee members for their contributions towards managing and governing the Neo blockchain. Every 21 blocks (known as an Epoch) votes for committee members are recalculated and the incentive shares are redistributed in turn to new members. In addition, the speaker receives network fees for the transactions contained in the current block.\n\n**Voters \u2013 80%**\n\nThe vast majority of GAS generated will be used to incentivize NEO holders to vote for committee members. Only those who successfully votes for the elected committee members can receive this part of reward, which is calculated and distributed during each epoch (21 blocks). In other words, this portion is divided by 28 (21 for committee members, and 7 for consensus nodes). NEO holders who vote for any elected consensus nodes is rewarded with 2/28 of this portion; NEO holders which voted for any elected committee member which is not a consensus node receive 1/28 of this portion.\n\n## See Also\n\n[Governance API](../reference/governance_api/index)\n\n[Neo Governance Page](https://neo.org/gov)\n\n", "doc_id": "71e7e907-3c01-4e6e-911e-3f8d9a190ddc", "embedding": null, "doc_hash": "c0f534c769c6e1d76b452f990c71c4b9060951e709e9c8b207548eb02fc6cf88", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/governance"}, "node_info": {"start": 3930, "end": 5520, "_node_type": "1"}, "relationships": {"1": "9fba62de8df2dbecab3ab5ffca830f8b04c58de4", "2": "00222303-974c-4160-b480-7d270af15804"}}, "__type__": "1"}, "8f472fde-3ce5-4c0c-b7a9-3ff6e0956822": {"__data__": {"text": "---\nsidebar_label: 'Introduction to Neo'\nsidebar_position: 0\n---\n\n# Introduction to Neo\n\n\n## Neo is an open-source community driven blockchain platform.\n\nNeo is the most feature-complete blockchain platform for building decentralized applications. Neo enables developers to digitize and automate the management of assets through smart contracts. Multi-language support (including C#, Python, Go, TypeScript, and Java) makes it easy for developers to build on the platform in the language they are most comfortable with. Neo also provides powerful native infrastructures such as decentralized storage, oracles, and domain name service, creating a solid foundation for the Next-Gen Internet.  \n\n[Read more about Neo](https://neo.org/about)", "doc_id": "8f472fde-3ce5-4c0c-b7a9-3ff6e0956822", "embedding": null, "doc_hash": "6f8429430fff0bc15557022408f85727cfa4bcd2709544f1fbcecd5a7279ee74", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/introduction"}, "node_info": {"start": 0, "end": 737, "_node_type": "1"}, "relationships": {"1": "1b6c2d484eea5dc6baabe27fbf40fe78e53180bb"}}, "__type__": "1"}, "a7dfdf73-a5a7-4c28-8707-4eea758ac160": {"__data__": {"text": "---\nsidebar_label: 'Neo Virtual Machine (NVM)'\nsidebar_position: 8\n---\n# NeoVM\n\n## Introduction \n\nNeoVM is a lightweight virtual machine for executing NEO smart contracts. As the core component of NEO, NeoVM has Turing completeness and high consistency, which can implement arbitrary execution logic and ensure consistent execution results of any node in distributed network, providing strong support for decentralized applications. \n\nWith the help of NeoCompiler, source code written in Java, C# or other high-level languages can be compiled into a unified NeoVM instruction set, thus achieving cross-platform. Also, it lowers the development threshold for enabling smart contract developers to participate in the application development in Neo ecosystem without learning a new development language. \n\nIn addition, NeoVM is highly decoupled from the upper-level code and customizable by using techniques such as interop services. NeoVM can be used by simply creating an instance, incredibly easy to use, and can be applied to various blockchain and non-blockchain scenarios.  \n\n##  Infrastructure and Execution Process  \n\n### Infrastructure \n\nThe NeoVM architecture is mainly composed of the execution engine, stack, and interoperation service layer. \n\n![](../assets/neovm.png)\n\n#### ExecutionEngine\n\nExecutionEngine is the core of NeoVM, mainly responsible for loading scripts and executing corresponding instructions, such as flow control, stack operation, bit operation, arithmetic operation, logical operation, cryptography, etc. It can also interact with external data by interoperable service layer through system call. \n\n#### Stack  \n\nNeoVM is a stack-based virtual machine. NeoVM has three types of stack: InvocationStack, EvaluationStack,  and ResultStack.  \n\n-  InvocationStack is used to store all execution contexts of current NeoVM, which are isolated from each other in the stack. Context switching is performed based on the current context and entry context. The current context points to the top element of invocation stack, which is ExecutionContext0 in the architecture figure. And the entry context points to the tail element of invocation stack, which is ExecutionContextN in the architecture figure.\n- EvaluationStack is for storing the data used by the instruction in execution process. Each execution context has its own evaluation stack.\n- ResultStack is used to store execution result after all scripts are executed. \n\n#### Interoperation Service Layer \n\nInteroperation service layer is a bridge between VM and external data. By invoking interoperation interfaces, NeoVM can access the block information, transaction information, contract information, asset information and other data required for the execution of smart contracts. \n\nEach Neo smart contract can choose whether to enable a private storage area, which stores data in key-value format. With the help of interoperation service layer, NeoVM can dynamically modify the corresponding data in storage area when executing the smart contract. \n\nBesides, interoperation service layer provides encryption algorithms, zero-knowledge proof, network resource access, etc., to meet the needs of developers to build advanced applications. \n\nIn addition, the interoperation service layer also supports custom extensions and modifications to meet the customization needs of developers.  \n\n### Execution Process \n\nNEO supports multi-language smart contract development. NeoCompiler compiles multi-language smart contracts into unified nvm bytecode files, which are then decoded and executed by NeoVM. Cross-platform compatibility are achieved with multi-language compliers and virtual machines. \n\nA complete execution process is as follows: \n\n1. Compiling the source code of smart contracts into unified bytecode files by corresponding compilers.\n2. Execution engine of NeoVM loads the bytecode file, and then constructs the bytecodes together with the related parameters in the file as an execution context and finally pushes it into invocation stack.\n3. Each time execution engine takes an instruction from current context, and then executes corresponding operations according to the instruction. The data generated in execution process will be", "doc_id": "a7dfdf73-a5a7-4c28-8707-4eea758ac160", "embedding": null, "doc_hash": "db550063e75ffa29f76cfd24f1e5c96822a07e58c3f80cfe3fcef4bea6f5b1b3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/neovm"}, "node_info": {"start": 0, "end": 4219, "_node_type": "1"}, "relationships": {"1": "a8c83603847d3d10d8e91d3a7e169c72da97691c", "3": "030997dc-ecb9-473e-9145-f19a479bfcff"}}, "__type__": "1"}, "030997dc-ecb9-473e-9145-f19a479bfcff": {"__data__": {"text": "corresponding operations according to the instruction. The data generated in execution process will be stored in the evaluation stack and alt stack of current context. \n4. For accessing external data, encrypting data, zero-knowledge proof and other operations, the interoperation interfaces will be invoked.\n5. After all scripts are executed, the result will be stored in the result stack.", "doc_id": "030997dc-ecb9-473e-9145-f19a479bfcff", "embedding": null, "doc_hash": "488e2ca4f4e74b57026da9eb7ff4958cf85ff2fd4211ef06cd5793854eb826e1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/neovm"}, "node_info": {"start": 4117, "end": 4506, "_node_type": "1"}, "relationships": {"1": "a8c83603847d3d10d8e91d3a7e169c72da97691c", "2": "a7dfdf73-a5a7-4c28-8707-4eea758ac160"}}, "__type__": "1"}, "6e35f0a6-8c50-448a-80b7-ceddf14029fc": {"__data__": {"text": "---\nsidebar_label: 'Glossary'\n---\n\n# Glossary\n\n#### Block\n\nA block in a Blockchain contains a number of transaction records.  Blocks are paired up with the previous block according to the timestamp and the cryptographic hash of the previous block contained in each block header, thereby creating a chain of blocks, or a blockchain.\n\n#### Wallet\n\nA wallet is a cryptographic public/private key pair which is used to sign and authenticate database transactions that occur on the Neo network.\n\n#### Account (Address)\n\nSimilar to your bank account, a blockchain account is used to transfer or receive assets in a transaction. The address is generated by the script hash through some operations, and can be converted back to the script hash. In Neo Legacy, the address starts with A, and in Neo N3, the address starts with N.\n\n#### Private Key/Public Key\n\nThe private key is a 256-bit random number that is kept by users themselves, without disclosing to others. It is a proof of the user's right to use the account and ownership of assets in the account. Each private key has a public key paired with it.\n\n#### Transaction\n\nA Neo transaction is a signed data package with an instruction for the network, for example a user indicating that he wants to transfer assets to another address. Each Neo block in the blockchain ledger contains one or more transactions, making each block a transaction batch. \n\n#### Script\n\nA script is a piece of code that consists of opcodes and operands. Each account is a contract with a script. A standard account script is composed of the public key and the OpCode that verifies the signature. The format is as follows\n\n```\nPUSHDATA1 03ac765294075da6f7927c96bfe3d3f64ae3680c5eb50f82f55170a9f1bea59dad\nSYSCALL Neo.Crypto.VerifyWithECDsaSecp256r1\n```\n\n#### Script Hash\n\nThe script hash is generated from the smart contract script with the RIPEMD-160 algorithm. Each script has a unique script hash. Any change made in the script of the contract will cause the script hash to change. The script hash length is 20 bytes (160 bits). The script hash is generated unidirectionally by the script, and cannot be reversed to the script. The script hash and address can be converted to each other.\n\n#### Opcode\n\nOpcodes are similar to instructions in assembly language. For all OpCode, refer to [OpCode source](https://github.com/neo-project/neo-vm/blob/master/src/neo-vm/OpCode.cs).\n\n#### Cryptographic private key\n\nCryptographic private key refers to the encryption of the private key through the wallet password, which is more secure than the plaintext private key. In this way, you can write the cryptographic private key on paper and keep the password in your mind.\n\n#### Smart Contract\n\nFrom the blockchain perspective, a smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises.\n\n#### NEP-17\n\nThe NEP-17 proposal outlines a token standard for the Neo blockchain that will provide systems with a generalized interaction mechanism for tokenized smart contracts.\n\n#### SysCall\n\nThe system call is a special operation code, through which you can call the interoperable service layer interface. By calling the interoperable service layer interface, NeoVM can access data such as block, transaction , contract, and asset information that are required for running smart contracts. For more information refer to the files in  [Neo smart contract module](https://github.com/neo-project/neo/tree/master/src/neo/SmartContract) starting with  `ApplicationEngine.` , such as  `ApplicationEngine.Contract.cs`, `ApplicationEngine.Blockchain.cs`.\n\n#### Dynamic Call\n\nA special system call that invokes another contract within a contract. It can be wrote as `Contract.Call(scriptHash, method, params)`. For more information refer to [Invoking Smart Contracts](develop/deploy/invoke).\n\n####", "doc_id": "6e35f0a6-8c50-448a-80b7-ceddf14029fc", "embedding": null, "doc_hash": "0b35f7089a37bd603342bb9337ba194eac05e111ac6fe8ddf496a4c900607b8a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/glossary"}, "node_info": {"start": 0, "end": 3873, "_node_type": "1"}, "relationships": {"1": "1a06333957e3af39916b4e955b257c8aa0da3412", "3": "43b67a0c-0d76-45ac-8aa7-8196ffca7ae8"}}, "__type__": "1"}, "43b67a0c-0d76-45ac-8aa7-8196ffca7ae8": {"__data__": {"text": "refer to [Invoking Smart Contracts](develop/deploy/invoke).\n\n#### Storage\n\nEach smart contract deployed on the Neo blockchain has a private storage area for storing application data. When creating a smart contract or transaction to use this contract, the contract code needs to read and write its storage. Each contract can declare a storage area. For more information refer to [Storage](../reference/scapi/framework/services/storage).\n\n#### NEF\n\nNEF is short for Neo Executable Format. The smart contract compiler compiles the source code and eventually generate NEF files and Manifest files (see below).\n\n| Magic      | 4 bytes   | Magic header                                    |\n| ---------- | --------- | ----------------------------------------------- |\n| Field      | Length    | Comment                                         |\n| Compiler   | 32 bytes  | Compiler used                                   |\n| Version    | 16 bytes  | Compiler version (Mayor, Minor, Build, Version) |\n| ScriptHash | 20 bytes  | ScriptHash for the script                       |\n| Checksum   | 4 bytes   | Sha256 of the header (CRC)                      |\n| Script     | Var bytes | Var bytes for the payload                       |\n\n", "doc_id": "43b67a0c-0d76-45ac-8aa7-8196ffca7ae8", "embedding": null, "doc_hash": "d15d72b94f98921167781743fa29e5f6579028ea5f79caf24015e38fa4a54c1d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/glossary"}, "node_info": {"start": 3808, "end": 5032, "_node_type": "1"}, "relationships": {"1": "1a06333957e3af39916b4e955b257c8aa0da3412", "2": "6e35f0a6-8c50-448a-80b7-ceddf14029fc"}}, "__type__": "1"}, "eecb216e-695f-413f-bdec-5d013f3b942b": {"__data__": {"text": "# Neo Node Introduction\nNodes that store all of the blockchain are called \u201cfull-nodes\u201d. They are connected to the blockchain through a P2P network. All the nodes in the blockchain network are equal, they act both as a client interface and as a server.\n\nThere are two full-node programs:\n\n- Neo-CLI, which provides a command-line interface and a set of RPC API for developers. It also helps other nodes achieve consensus with the network and is involved in generating new blocks.\n- Neo-GUI, which provides a graphical interface for ordinary users and developers, with most functions except consensus.\n\n## Download links\n\n|      | Neo-GUI                        | Neo-CLI                        |\n| ---- | ---------------------------------------- | ---------------------------------------- |\n| Releases | [Download](https://github.com/neo-ngd/Neo3-GUI/releases) | [Download](https://github.com/neo-project/neo-cli/releases) |\n| Source code | [Github](https://github.com/neo-ngd/Neo3-GUI) | [Github](https://github.com/neo-project/neo-cli) |\n\n## Neo-GUI and Neo-CLI comparison\n\n|           | Neo-GUI  | Neo-CLI  |\n| --------- | :--: | :--: |\n| **General** |  |  |\n| Graphic interface | \u2714   |      |\n| Command line interface | \u00a0 \u00a0  | \u2714 \u00a0 |\n| Query blocks/transactions/assets | \u2714   |      |\n| **Wallet** |  |  |\n| Create wallet | \u2714   | \u2714   |\n| Open wallet | \u2714 \u00a0 | \u2714\u00a0|\n| Import/Export key pair | \u2714 \u00a0 | \u2714 \u00a0 |\n| Import mnemonics into wallet | \u2714 \u00a0 |  \u00a0 |\n| Upgrade wallet file |  \u00a0 | \u2714 \u00a0 |\n| Show all key pairs | \u2714   | \u2714   |\n| Show all addresses | \u2714   | \u2714   |\n| Show all assets | \u2714   | \u2714   |\n| Transfer | \u2714   | \u2714   |\n| Claim GAS | \u2714   | \u2714 |\n| Create address | \u2714   | \u2714   |\n| Create multi-party signed address | \u2714 \u00a0 | \u2714 |\n| Generate multiple addresses |      | \u2714   |\n| Change wallet password | \u2714   | \u2714    |\n| Delete address | \u2714   | \u2714 |\n| **Contract** |  |  |\n| Query contract | \u2714   |    |\n| Deploy contract | \u2714   | \u2714   |\n| Invoke contract | \u2714   | \u2714   |\n| **Advanced** |  |  |\n| Register to candidate | \u2714 \u00a0 | \u2714 |\n| Voting | \u2714 \u00a0 | \u2714 |\n| Custom transaction construction | \u2714   |  |\n| Signature | \u2714   | \u2714 |\n| Data conversion | \u2714   |  |\n| JSON-RPC |      | \u2714   |\n| Participate in blockchain consensus |      | \u2714   |\n\n## NEO-CLI security policy\n\nTo enable an external program to access the node API, you need to open the firewall port. \n\n:::caution\n\nTo avoid the significant security risk, a whitelist or firewall must be used to block external server requests.\n:::\n\nNeo-CLI does not provide the function to remotely switching on/off the wallet, and it does not verify the process when opening a wallet. Therefore, you should set your own security policies. The wallet must be kept open all the time to respond to the withdrawal", "doc_id": "eecb216e-695f-413f-bdec-5d013f3b942b", "embedding": null, "doc_hash": "ed448484aaa62052fee29ff31e18501807df827a29fdaacab2b057a1e370c3e9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/Introduction"}, "node_info": {"start": 0, "end": 2710, "_node_type": "1"}, "relationships": {"1": "33fd8fef9283f6039ecba3060a37c8cd0f0bb78c", "3": "2738dac1-7676-4a11-a0a2-32f029be74eb"}}, "__type__": "1"}, "2738dac1-7676-4a11-a0a2-32f029be74eb": {"__data__": {"text": "policies. The wallet must be kept open all the time to respond to the withdrawal requests of users. For security reasons, the wallets should be run in an independent server on which the firewall is configured properly, as shown below. \n\n|                    | Main Net | Test Net |\n| ------------------ | ------------ | ------------- |\n| JSON-RPC via HTTPS | 10331        | 20331         |\n| JSON-RPC via HTTP  | 10332        | 20332         |\n| P2P via TCP        | 10333        | 20333         |\n| P2P via WebSocket  | 10334        | 20334         |\n\n\n\n", "doc_id": "2738dac1-7676-4a11-a0a2-32f029be74eb", "embedding": null, "doc_hash": "0af701a5c1e0147a4a9fb17ebb1fb8a369ba8cf872d793f87baef105a520eda6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/Introduction"}, "node_info": {"start": 2630, "end": 3185, "_node_type": "1"}, "relationships": {"1": "33fd8fef9283f6039ecba3060a37c8cd0f0bb78c", "2": "eecb216e-695f-413f-bdec-5d013f3b942b"}}, "__type__": "1"}, "6efae4e0-798e-4ec1-8cf2-85587554fbef": {"__data__": {"text": "# CLI Command Reference\n\nOpen the command line, navigate to the directory where Neo-CLI is located, and enter the following code to start the command line Neo node.\n\n`dotnet neo-cli.dll`\n\nThis section will introduce all the commands in the command line node. You can manipulate your node with commands for creating a wallet, importing and exporting of private key, transferring, starting consensus, etc.\n\n## Overview\n\nThe following tables list all the commands. You can also enter `help` in the command line to view them all.\n\nAll the commands described in this document conform with these conventions:\n\n- `<>` indicate a parameter.\n- `[]` is for optional parameters.\n- `|` separates multiple parameters where any one of them can be used at your choice.\n- `=` indicates the default value of the optional parameter without an input.\n\n#### Console commands\n\n| Command      | Description      |\n| ------- | --------- |\n| version | Shows the current Neo-CLI version |\n| help [plugin-name] | Help menu, which can also show plugin related commands. |\n| [parse](#parse) `<value>` | Convert the input string into various supported data format |\n| clear   | Clear screen      |\n| exit    | Exit program      |\n\n#### Wallet commands\n\n| Command                                           | Parameters                             | Description                                                  |\n| ------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [create wallet](#create-wallet)                   | `<path>`                                | Creates a wallet file.                                       |\n| [open wallet](#open-wallet)                       | `<path>`                                | Opens a wallet file.                                         |\n| close wallet                                      |                                        | Closes the current wallet.                                   |\n| [upgrade wallet](#upgrade-wallet)                 | `<path>`                                | Upgrades old wallet files.                                   |\n\nThe commands listed in the table below requires you to open the wallet before invoking.\n\n| Command                           ", "doc_id": "6efae4e0-798e-4ec1-8cf2-85587554fbef", "embedding": null, "doc_hash": "398ed967e7cbdf34672f65735bf73f9bef0b17811e4ae5b6536177e07785bd32", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 0, "end": 2301, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "3": "4f5b0ee4-d525-449f-894b-b76ae682e2f6"}}, "__type__": "1"}, "4f5b0ee4-d525-449f-894b-b76ae682e2f6": {"__data__": {"text": "                                   | Parameters                    | Description                                          |\n| ------------------------------------------------- | ----------------------------- | ---------------------------------------------------- |\n| [change password](#change-password)               |                        | Changes the wallet password                          |\n| list address                                      |                               | lists all the accounts in the wallet.                |\n| list asset                                        |                               | Lists all assets in the wallet.                      |\n| list key                                          |                               | Lists all public keys in your wallet.                |\n| [show gas](#show-gas)                             |                               | Lists all the GAS in your wallet.                    |\n| [create address](#create-address)                 | [count=1]                     | Creates address / batch create address               |\n| [import key](#import-key)                         | `<wifOrFile>`          | Imports a private key / bulk import of private keys. |\n| [export key](#export-key)                         | \\[path=null] \\[scriptHash=null] | Exports private keys.                                |\n| [import multisigaddress](#import-multisigaddress) | `<m>` `<publicKeys>`                                           | Creates a multi-signature contract.                  |\n| [import watchonly](#import-watchonly) | `<addressOrFile>` | Imports the watch-only address (e.g. contract address)|\n| [send](#send)                         ", "doc_id": "4f5b0ee4-d525-449f-894b-b76ae682e2f6", "embedding": null, "doc_hash": "1d2e49ec18b79208c28a406694feaae61b7b926f9cd4047031d7c397761ba5a2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 2302, "end": 4015, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "6efae4e0-798e-4ec1-8cf2-85587554fbef", "3": "6e1b845c-ff49-4c32-8635-e8daba522ef3"}}, "__type__": "1"}, "6e1b845c-ff49-4c32-8635-e8daba522ef3": {"__data__": {"text": "                            | `<id `\\|alias> `<address>` `<amount>` \\[from=null] \\[data=null] \\[signerAccounts=null] | Sends assets to the specified address.                       |\n| [sign](#sign)                                     | `<jsonObjectToSign>`                    | Signs the transaction. The parameter is the json string that records the transaction information. |\n\n#### Contract commands\n\n| Command           | Parameters                                                   | Description        |\n| ----------------- | ------------------------------------------------------------ | ------------------ |\n| [deploy](#deploy) | `<nefFilePath>` [manifestFile]                                | Deploys a contract |\n| [invoke](#invoke) | `<scripthash>` `<operation>` \\[contractParameters=null] \\[sender=null] \\[signerAccounts=null] \\[maxGas=20] | Invokes a contract |\n| [update](#update) | `<scriptHash>` `<filePath>` `<manifestPath>` `<sender>` \\[signerAccounts=null] | Upgrade a contract |\n\n\n#### Node commands\n\n| Command    | Parameters      | Description                                                  |\n| ---------- | --------------- | ------------------------------------------------------------ |\n| show state |                 | Displays the current status of blockchain synchronization.   |\n| show pool  | [verbose=False] | Displays the transactions in the memory pool (These transactions are in the state of zero confirmation). |\n\n#### Nep17 commands\n\n| Command                 | Parameters                                                   | Description                                                  |\n| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [balanceof](#balanceof) | `<tokenHash>` `<address>`                                      | Queries the balance of specified token at the specified address |\n| [decimals](#decimals)   | `<tokenHash>`                                                 | Queries the precision of specified token                     |\n| [name](#name)           | `<tokenHash>`                                                 |", "doc_id": "6e1b845c-ff49-4c32-8635-e8daba522ef3", "embedding": null, "doc_hash": "989f30d671f6001c4430f61e2ee278b4bbcda7cb469474c246fd6c53cfc4e686", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 4016, "end": 6199, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "4f5b0ee4-d525-449f-894b-b76ae682e2f6", "3": "7b1e32aa-f53f-4030-8292-05b14601eb0d"}}, "__type__": "1"}, "7b1e32aa-f53f-4030-8292-05b14601eb0d": {"__data__": {"text": "                   | Queries the specified token name                             |\n| [transfer](#transfer)   | `<tokenHash>` `<to>` `<amount>`  \\[from=null] \\[data=null] \\[signersAccounts=null] | Invokes the transfer method to transfer the specified token  |\n\n#### Native contract commands\n\n| Command                                     | Parameters | Description                                        |\n| ------------------------------------------- | ---------- | -------------------------------------------------- |\n| [list nativecontract](#list-nativecontract) |            | Lists all the native contract names and scripthash |\n\n#### Network commands\n\n| Command         | Parameters          | Description                                                  |\n| --------------- | ------------------- | ------------------------------------------------------------ |\n| [relay](#relay) | `<jsonObjectToSign>` | Broadcasts the transaction. The parameter is the json string that records the transaction information. |\n| [broadcast addr](#broadcast-addr) |  `<payload IP address>` `<port>`   | Broadcasts the IP address of the node |\n| [broadcast block](#broadcast-block) |  `<block hash \\| block height>`  | Broadcasts a block |\n| [broadcast getblocks](#broadcast-getblocks) |  `<block hash>`  | Broadcasts the getblocks request |\n| [broadcast getdata](#broadcast-getdata) |  `<inventory type>` `<payload>`  | Broadcasts the getdata request |\n| [broadcast getheaders](#broadcast-getheaders) |  `<block index>`  | Broadcasts the getheaders request |\n| [broadcast inv](#broadcast-inv) |  `<inventory type>` `<payload>`  | Broadcasts the inventory data |\n| [broadcast transaction](#broadcast-transaction) |  `<transaction `hash>  | Broadcasts a transaction |\n\n#### Plugin commands\n\n| Command                       | Parameters    | Description                              |\n| ----------------------------- | ------------- | ---------------------------------------- |\n| [plugins](#plugins)           |               | Lists loaded plugins                     |\n| [install](#install)           | [Plugin name] | Installs the specified plugin            |\n| uninstall                   | [Plugin name] | Uninstalls the specified plugin          |\n| [dump storage](#dump-storage) | `<key>`        | Exports all or the specified state data. This command requires installation of the StatesDumper plugin. |\n| [start consensus](#start-consensus) |  | Starts consensus. This command requires installation of the DBFTPlugin plugin. |\n| [start oracle](#start-oracle) | | Starts Oracle. This command requires installation of the OracleService plugin. |\n| [stop oracle](#stop-oracle) | | Stops Oracle. This command requires installation of the OracleService plugin.", "doc_id": "7b1e32aa-f53f-4030-8292-05b14601eb0d", "embedding": null, "doc_hash": "185c594fdf0fb8992c2f6503937965fdd2da7247953445bcc9740cff148a8f1a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 6199, "end": 8948, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "6e1b845c-ff49-4c32-8635-e8daba522ef3", "3": "6079904c-ac40-447f-8525-91b8912ae76d"}}, "__type__": "1"}, "6079904c-ac40-447f-8525-91b8912ae76d": {"__data__": {"text": "| | Stops Oracle. This command requires installation of the OracleService plugin. |\n| [state root](#state-root) | `<index>` | Queries the state root with index. This command requires installation of the StateService plugin. |\n| state height | | Queries the state height. This command requires installation of the StateService plugin. |\n| [get proof](#get-proof) | `<rootHash>` `<scriptHash>` `<key>` | Gets proof with root hash, contract hash, and storage key. |\n| [verify proof](#verify-proof) | `<rootHash>` `<proof>` | Verifies with root hash and proof. |\n\n#### Voting commands\n\n| Command                                       | Parameters                    | Description                                                 |\n| --------------------------------------------- | ----------------------------- | ----------------------------------------------------------- |\n| [get accountstate](#get-accountstate)         | `<address>`                    | Gets the latest voting information of the specified account |\n| [get candidates](#get-candidates)             |                               | Gets candidates' public keys and votes                      |\n| [get committee](#get-committee)               |                               | Gets the committee member's public key                      |\n| [get next validators](#get-next-validators)   |                               | Gets the next validator's  public key                       |\n| [register candidate](#register-candidate)     | `<account>` [maxGas=1010]      | Registers the candidate                                     |\n| [unregister candidate](#unregister-candidate) | `<account>`                    | Unregisters the candidate                                   |\n| [vote](#vote)                                 | `<senderAccount>` `<publicKey>` | Votes for candidates                                        |\n| [unvote](#unvote)                             | `<senderAccount>`              | Cancel the voting                                           |\n\n#### Block Commands\n\n| Command           ", "doc_id": "6079904c-ac40-447f-8525-91b8912ae76d", "embedding": null, "doc_hash": "cefa3c6f7cb4ba7cfe351f834789cf4a8b007db6ed0a9483e74fd90f37c322d9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 8880, "end": 10950, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "7b1e32aa-f53f-4030-8292-05b14601eb0d", "3": "261f200c-29af-46af-9404-da804ad2f3aa"}}, "__type__": "1"}, "261f200c-29af-46af-9404-da804ad2f3aa": {"__data__": {"text": "Block Commands\n\n| Command                         | Parameters                             | Description                                                  |\n| ------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [export blocks](#export-blocks) | `<start>` \\[block count] \\[export path] | Exports the blockchain data from the specified block height. The exported data  can be used for offline synchronization. |\n\n## Command Description\n\n### parse\n\nConverts the input string into various supported data formats.\n\n##### Syntax\n\n `parse <value>`\n\n##### Example\n\n```\nneo> parse NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\nAddress to ScriptHash           0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\nAddress to Base64               uXtKzX+CD2HS1NT5rqXrUEmN31U=\nString to Hex String            4e637068746a675479653363335a4c354a356e445a68736633554a4d47416a64376f\nString to Base64                TmNwaHRqZ1R5ZTNjM1pMNUo1bkRaaHNmM1VKTUdBamQ3bw==\nneo> parse AHVYXVTcKw==\nBase64 to Big Integer           12345678900000000\nString to Hex String            41485659585654634b773d3d\nString to Base64                QUhWWVhWVGNLdz09\nneo> parse 0x55df8d4950eba5aef9d4d4d2610f827fcd4a7bb9\nScriptHash to Address           NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\nHex String to Big Integer       490249589479789641828817600658206854216357149625\nString to Hex String            307835356466386434393530656261356165663964346434643236313066383237666364346137626239\nString to Base64                MHg1NWRmOGQ0OTUwZWJhNWFlZjlkNGQ0ZDI2MTBmODI3ZmNkNGE3YmI5\n```\n\nIf you see messy codes that is because some data types cannot be converted. \n\n### create wallet\n\nCreates a wallet file in the .db3 or .json format. A wallet password is required to be specified during the process. \n\n##### Syntax\n\n `create wallet <path>` \n\n##### Example\n\n```\nneo> create wallet test.json\npassword: *\npassword: *\n   Address: NRq91uUULStNMBmsgFQpQVe18YUcwo1rTK\n    Pubkey: 02e7ada69ebe8f730c871ea999185a5238c80ab91abe86bfb26fdac5ebb8ae6613\nScriptHash: 0x19d69593a368ba01b2aac8dc0a67d7b675e1e640\n```\n\nThe wallet file is generated under", "doc_id": "261f200c-29af-46af-9404-da804ad2f3aa", "embedding": null, "doc_hash": "06cb26f2b355ebbd14c2b5144ea5670416d95a4d4ee8afa16247221555819a3c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 10998, "end": 13151, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "6079904c-ac40-447f-8525-91b8912ae76d", "3": "941bfcc0-665a-41bf-8991-55099c802258"}}, "__type__": "1"}, "941bfcc0-665a-41bf-8991-55099c802258": {"__data__": {"text": "wallet file is generated under the neo-cli root directory. If you want to set other path, you need to create the folder in advance.\n\n### open wallet\n\nOpens the wallet file at the specified path. The wallet password is required to be entered when opening the wallet.\n\n##### Syntax\n\n `open wallet <path>` \n\n##### Example\n\n```\nneo> open wallet test.json\npassword: *\n```\n\n### change password\n\nChanges the wallet password.\n\n##### Syntax\n\n `change password` \n\n##### Example\n\n```\nneo> change password\npassword: ***\nNew password: ***\nRe-Enter Password: ***\nPassword changed successfully\n```\n\n### upgrade wallet\n\nUpgrades the old .db3 wallet file into the .json format.\n\n##### Syntax\n\n `upgrade wallet <path>` \n\n##### Example\n\n```\nneo> upgrade wallet test.db3\nWallet file upgrade complete. New wallet file has been auto-saved at: test.json\n```\n\n### show gas\n\nlists all the unclaimed GAS in the current wallet.\n\n##### Syntax\n\n`show gas` \n\n##### Example\n\n```\nneo> show gas\nunclaimed gas: 16.7367406\n```\n\n:::note\n This command does not show the GAS that has been claimed. Use `list asset` instead.\n:::\n\nOn Neo N3, The GAS in an account is claimed automatically every time when the number of Neo in the account changes.  \n\n### create address\n\nCreates a new address. One can also enter `create address 100` to create 100 new addresses in batches; Addresses are automatically exported to the address.txt file.\n\n##### Syntax\n\n`create address [n]` \n\n##### Parameters\n\n`n`: Number of addresses to create. n is an integer and defaults to 1.\n\n##### Example\n\n```\nneo> create address 3\nThe file 'address.txt' already exists, do you want to overwrite it? (yes|no): yes\n[3/3]\nExport addresses to address.txt\n```\n\n### balanceof\n\nQueries the balance of specified token at the specified address\n\n##### Syntax\n\n `balanceof <tokenHash> <address>`\n\n##### Parameters\n\n- `tokenHash`: The token hash\n\n- `address`: The address to query\n\n##### Example\n\n```\nneo> balanceof 0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec NcphtjgTye3c3ZL5J5nDZhsf3UJMGAjd7o\nInvoking script with: '0c14b97b4acd7f820f61d2d4d4f9aea5eb50498ddf5511c00c0962616c616e63654f660c14ec99f691c0f7dfa41400473edd1c2afceb70c2d241627d5b52'\nVM State: HALT\nGas Consumed: 0.0373876\nResult Stack: [{\"type\":\"Integer\",\"value\":\"1998380000000000\"}]\n\n{{$Token Name}} balance: 19983800\n```\n\n### decimals\n\nQueries the precision of specified token\n\n##### Syntax\n\n `decimals <tokenHash>`\n\n##### Parameters\n\n`tokenHash`: The token hash\n\n##### Example\n\n```\nneo> decimals 0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec\nInvoking script with: '10c00c08646563696d616c730c14ec99f691c0f7dfa41400473edd1c2afceb70c2d241627d5b52'\nVM State: HALT\nGas Consumed: 0.0125075\nResult Stack: [{\"type\":\"Integer\",\"value\":\"8\"}]\nResult : 8\n```\n\n### transfer\n\nInvokes the transfer method to transfer the specified token.\n\n##### Syntax\n\n `transfer", "doc_id": "941bfcc0-665a-41bf-8991-55099c802258", "embedding": null, "doc_hash": "fdc8163766a2d0ec347d11fbd90fdebdf139df2f43ebae34723980ac240c43e8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 13149, "end": 15977, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "261f200c-29af-46af-9404-da804ad2f3aa", "3": "b1c3cd92-ce9a-43a8-8045-c85f401fe590"}}, "__type__": "1"}, "b1c3cd92-ce9a-43a8-8045-c85f401fe590": {"__data__": {"text": "the transfer method to transfer the specified token.\n\n##### Syntax\n\n `transfer <tokenHash> <to> <amount> [from=null] [data=null] [signersAccounts=null]`\n\n##### Parameters\n\n- `tokenHash`: The token hash\n- `to`: The address you transfer the token to\n- `amount`: The amount to transfer\n- `from`: The address you transfer the token from\n- `data`\uff1aThe additional parameter. The default value is null.\n- `signersAccounts`: The signer's address\n\n##### Example\n\n```\nneo> transfer 0xd2c270ebfc2a1cdd3e470014a4dff7c091f699ec Nhe4mzfQRoKojkXhqxJHjANvBMT7BYAXDv 6000 NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y transferdata NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y\nRelay tx(no|yes): y\nSigned and relayed transaction with hash=0x0d82a59ca2106c93e6383893d86a098d1a9fbf950c091772c61790880acc78c5\n```\n\n### list nativecontract\n\nLists all the native contract names and scripthash.\n\n\n##### Syntax\n\n `list nativecontract`\n\n\n##### Example\n\n```\nneo> list nativecontract\n        ContractManagement  0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\n        StdLib              0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\n        CryptoLib           0x726cb6e0cd8628a1350a611384688911ab75f51b\n        LedgerContract      0xda65b600f7124ce6c79950c1772a36403104f2be\n        NeoToken            0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n        GasToken            0xd2a4cff31913016155e38e474a2c06d08be276cf\n        PolicyContract      0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b\n        RoleManagement      0x49cf4e5378ffcd4dec034fd98a174c5491e395e2\n        OracleContract      0xfe924b7cfe89ddd271abaf7210a80a7e11178758\n        NameService         0x7a8fcf0392cd625647907afa8e45cc66872b596b\n```\n\n### get accountstate\n\nGets the latest voting information of the specific account, including the address it voted, the amount of votes cast and the block height at the time of voting.\n\n##### Syntax\n\n `get accountstate <address>` \n\n##### Parameter\n\n`address`\uff1aThe address you want to query the voting information.\n\n##### Example\n\n```\nneo> get accountstate NNz4ppADL3mke7HT8RvRr5nX8zTAbNdWjv\nInvoking script with:", "doc_id": "b1c3cd92-ce9a-43a8-8045-c85f401fe590", "embedding": null, "doc_hash": "5f28fbb86f99ec84459e1653459c4e8ca0a1e6acfa5cd691e4392341f1b70cf9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 15935, "end": 17991, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "941bfcc0-665a-41bf-8991-55099c802258", "3": "4d05fa5f-7948-44ac-8587-dc047f15fed5"}}, "__type__": "1"}, "4d05fa5f-7948-44ac-8587-dc047f15fed5": {"__data__": {"text": "script with: 'DBQhrr+TO5ru/CWrG+m3Gq80Ff3tORHAHwwPZ2V0QWNjb3VudFN0YXRlDBT1Y+pAvCg9TQ4FxI6jBbPyoHNA70FifVtS'\nVM State: HALT\nGas Consumed: 0.0202833\nResult Stack: [{\"type\":\"Struct\",\"value\":[{\"type\":\"Integer\",\"value\":\"900\"},{\"type\":\"Integer\",\"value\":\"9774\"},{\"type\":\"ByteString\",\"value\":\"AsNeyvySxknpefBTobcD9O\\u002BQiieFUIdCtmzAWZvxQPA4\"}]}]\n\nVoted: NNuEErrm2qpLyoWUxtEy7Sgxh1cm71Ngb6\nAmount: 900\nBlock: 9774\n```\n\n### get candidates\n\nGets candidates' public keys and votes\n\n##### Syntax\n\n `get candidates`\n\n##### Example\n\n```\nneo> get candidates\nInvoking script with: '10c00c0d67657443616e646964617465730c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 1.0100757\n\nCandidates:\n02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d      49900000\n```\n\n### get committee\n\nGets the committee member's public key\n\n##### Syntax\n\n `get committee`\n\n##### Example\n\n```\nneo> get committee\nInvoking script with: '10c00c0c676574436f6d6d69747465650c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 1.0100757\n\nCommittee:\n02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d\n```\n\n### get next validators\n\nGets the next validator's public key\n\n##### Syntax\n\n `get next validators`\n\n##### Example\n\n```\nneo> get next validators\nInvoking script with: '10c00c166765744e657874426c6f636b56616c696461746f72730c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 1.0100757\n\nNext validators:\n02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d\n```\n\n### register candidate\n\nRegisters the candidate\n\n##### Syntax\n\n `register candidate <account> [maxGas=1010]`\n\n##### Parameters\n\n`account`: The account to register candidate\n\n`maxGas`: The maximum GAS can be consumed. Default is 1010, where the registration fee is 1000 GAS.\n\n##### Example\n\n```\nneo> register candidate NUNtEBBbJkmPrmhiVSPN6JuM7AcE8FJ5sE\nInvoking script with: 'DCECSVwDcw3pu71X7c2DqNv8jNiqsw75XuAGjy+ko6bkt/YRwB8MEXJlZ2lzdGVyQ2FuZGlkYXRlDBT1Y+pAvCg9TQ4FxI6jBbPyoHNA70FifVtS'\nVM State: HALT\nGas Consumed: 1000.0104529\nResult Stack: [{\"type\":\"Boolean\",\"value\":true}]\nrelay tx(no|yes): y\nSigned and relayed transaction with", "doc_id": "4d05fa5f-7948-44ac-8587-dc047f15fed5", "embedding": null, "doc_hash": "8dafc0b467a8243168b99b2dd49ca787e4350d3e038eedff8a71ca29226af908", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 18050, "end": 20248, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "b1c3cd92-ce9a-43a8-8045-c85f401fe590", "3": "54e6042b-fe42-44e9-a4e3-3243ce2a2b01"}}, "__type__": "1"}, "54e6042b-fe42-44e9-a4e3-3243ce2a2b01": {"__data__": {"text": "tx(no|yes): y\nSigned and relayed transaction with hash=0xc30ecd2e30d2d3347e389dbdb205c6a38a663819ff8b473ad11b03e035c67bb5\n```\n\n### unregister candidate\n\nUnregisters the candidate\n\n##### Syntax\n\n `unregister candidate <account>`\n\n##### Parameters\n\n`account`: The account to unregister candidate\n\n##### Example\n\n```\nneo> unregister candidate NUNtEBBbJkmPrmhiVSPN6JuM7AcE8FJ5sE\nInvoking script with: 'DCECSVwDcw3pu71X7c2DqNv8jNiqsw75XuAGjy+ko6bkt/YRwB8ME3VucmVnaXN0ZXJDYW5kaWRhdGUMFPVj6kC8KD1NDgXEjqMFs/Kgc0DvQWJ9W1I='\nVM State: HALT\nGas Consumed: 0.0301137\nResult Stack: [{\"type\":\"Boolean\",\"value\":true}]\nRelay tx(no|yes): yes\nSigned and relayed transaction with hash=0xa799e315956e120a51bf5b5804d9518754a844bbe4dadef3efd37ac3d15a6305\n```\n\n### vote\n\nVotes for candidates\n\n##### Syntax\n\n `vote <senderAccount> <publicKey>`\n\n##### Parameters\n\n- `senderAccount`: The account used to vote\n- `publickey`: The public key of the account you vote for\n\n##### Example\n\n```\nneo> vote Nhiuh11SHF4n9FE6G5LuFHHYc7Lgws9U1z 02344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d\nInvoking script with: '0c2102344389a36dfc3e95e05ea2adc28cf212c0651418cfcf39e69d19d18b567b221d0c14ef3b46067f2f47b2f7f0442aa2372085d08708ef12c00c04766f74650c1425059ecb4878d3a875f91c51ceded330d4575fde41627d5b52'\nVM State: HALT\nGas Consumed: 5.0100793\nEvaluation Stack: [{\"type\":\"Boolean\",\"value\":true}]\n\nrelay tx(no|yes): y\nSigned and relayed transaction with hash=0x8083633ecc4827b7967ba8b0a30f02992dc524e4a5356accebdf080e9cd26df2\n```\n\n### unvote\n\nCancel the voting\n\n##### Syntax\n\n `unvote <senderAccount>`\n\n##### Parameter\n\n`senderAccount`: The account to unvote\n\n##### Example\n\n```\nneo> unvote 0x39edfd1534af1ab7e91bab25fcee9a3b93bfae21\nInvoking script with: 'CwwUIa6/kzua7vwlqxvptxqvNBX97TkSwB8MBHZvdGUMFPVj6kC8KD1NDgXEjqMFs/Kgc0DvQWJ9W1I='\nVM State: HALT\nGas Consumed: 0.030114\nResult Stack: [{\"type\":\"Boolean\",\"value\":true}]\nRelay tx(no|yes): y\nSigned and relayed transaction with hash=0x78f83fd1e0607f078fa0964a97b9972d3f4844191f6702c1750ff6d532cd5019\n```\n\n### export key\n\nExports private key of the address to the specified file. The command also requires the verification of the wallet password.\n\n##### Syntax\n\n", "doc_id": "54e6042b-fe42-44e9-a4e3-3243ce2a2b01", "embedding": null, "doc_hash": "9a3db9d4dcf42c8b814715428ff57f444f4b4b0dd9f312ee0014815d827f0099", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 20216, "end": 22406, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "4d05fa5f-7948-44ac-8587-dc047f15fed5", "3": "3caec479-c8e5-42b4-985f-07269566b001"}}, "__type__": "1"}, "3caec479-c8e5-42b4-985f-07269566b001": {"__data__": {"text": "The command also requires the verification of the wallet password.\n\n##### Syntax\n\n `export key [address] [path]`\n\n##### Parameters\n\n- `address`: Address to export private key.\n- `path`: Path to the file used to store the private key.\n\n##### Example\n\nExports the key to the console:\n\n```\nneo> export key\npassword: ********\nL4HoTTfKfzjV8tdWv6vRaMY1cBQbsVc4euGqhPW9Mf8z6993fgMH\nL3raEwVsJHzovTXfgVG1HWxzmH4Zm3vMia8byszhVrvbJ38YnsXv\nKywrMAnBWRXUAb4Aq76ZoCCqDvGNL9nidjVwWwDr3DbMPwg1RPBL\nKwhNLC9rULxJmevqwYbQzJhYNvaCDPyAUAm7EkHrW5kQwLYfxTFG\n```\n\nExports the key to the specified file:\n\n```\nneo> export key key1.txt\npassword: ********\n```\n\n```\nneo> export key key2.txt NPpH6FxNaVXZCrsecNWEHGLwMe87UkPdm5\npassword: ********\n```\n\n### import key\n\nImports a private key, or  a file with a number of private keys.\n\n##### Syntax\n\n `import key <wif | path>`\n\n##### Parameters\n\n`wif | path`: The key to import or the file path.\n\n##### Example\n\n```\nneo> import key L4q37aCJzjEXhAUJ6npdxbjGGbyTXuWhpgYxkb2NWPmzXv4DdxiD\nAddress: NPpH6FxNaVXZCrsecNWEHGLwMe87UkPdm5\n Pubkey: 02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\n```\n\n```\nneo> import key key1.txt\n```\n\nIf there is a specified file, the file is in the private key format. Refer to export key key.txt output.\n\n### import multisigaddress\n\nCreates a multi-party signed address. \n\n##### Syntax\n\n`import multisigaddress m pubkeys...`\n\n##### Parameters\n\n- `m`: m is the minimal number of signatures. For example, creating a multi-party signed address with two public keys, m can be 1 or 2.\n- `pubkeys`: Public keys of multiple parties involved.\n\n##### Example\n\n```\nneo> import multisigaddress 2 03fadbc9b25d1b6827124665c50801e602240c9d8ebdda2bae49de6683f8f86af9 02ff249d06faaf0b5ba865e1531bfabe07f89aef39ab59082e3bc140be0318055d\nMultisig. Addr.: NN58k4Ei4nUzWxrgksHZPantyuDxWgouod\n```\n\n### import watchonly\n\nImports the watch-only address, e.g contract account.\n\n##### Syntax\n\n`import watchonly scriptHash`\n\n##### Parameters\n\n`addressOrFile`\uff1aaccount address, hash, contract hash, or files storing these data\n\n##### Example\n\n```\nneo> import watchonly 0xbfe215933f29b29dacf0e8383722a62974ac8aa6\nAddress: Nb6ZUp9h5aCKkNADpdUD5TbuJGP6wyRvE8\n```\n\n### send\n\nTransfers the asset to the specified address. The command requires the verification of the wallet password.\n\n##### Syntax\n\n`send <id | alias> <address> <amount> [from=null] [data=null]", "doc_id": "3caec479-c8e5-42b4-985f-07269566b001", "embedding": null, "doc_hash": "3432ce4f2eaec5afb06341d6842e0dda0c0dc7631f885e10b484c04f86fd30f4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 22379, "end": 24766, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "54e6042b-fe42-44e9-a4e3-3243ce2a2b01", "3": "e0bd85aa-9cc7-401d-b7cf-844e393f281c"}}, "__type__": "1"}, "e0bd85aa-9cc7-401d-b7cf-844e393f281c": {"__data__": {"text": "| alias> <address> <amount> [from=null] [data=null] [signerAccounts=null]`\n\n##### Parameters\n\n- `id | alias`: asset ID or asset abbreviations, e.g. neo, gas\n- `address`: address to transfer assets to\n- `amount`: transfer amount\n- `from`: address to transfer assets from\n- `data`: the additional transaction information, which defaults to null.\n- `signerAccounts`: signer's address\n\n##### Example\n\nTransfer 100 Neo to the address Ni5iS2XHazKZtXfzLJbdyDk8UUcGBZGePR: \n\n```\nneo> send 0xd2a4cff31913016155e38e474a2c06d08be276cf Ni5iS2XHazKZtXfzLJbdyDk8UUcGBZGePR 100\npassword: *\nTXID: 0xf8b9824808c037893525a60f2f8d4ec034dffe8ac17d4142ff889e2e712d8df1\n```\n\nIf you are not sure of the asset ID, you can enter `list asset` to view all assets in the wallet.\n\nIn above example, we can also replace the asset ID with asset abbreviation, as shown below:\n\n```\nneo> send gas Ni5iS2XHazKZtXfzLJbdyDk8UUcGBZGePR 100\npassword: *\nTXID: 0xea2454d0210aefff406097e03abd2137dc416617adac6f23842ca1914d001419\n```\n\nWhen withdrawing assets from a multi-signed address, multiple signatures are required. A json string is returned requiring signatures, as shown below:\n\n```\nneo> send neo NdJ5Nbs7gvmjDmqraVCJy8nPQxue1e5LK1 10\npassword:", "doc_id": "e0bd85aa-9cc7-401d-b7cf-844e393f281c", "embedding": null, "doc_hash": "a68c993a206e862193a88b6e4e95536484e4f7862f04cf906ef10c11e34cb5b8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 24793, "end": 26002, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "3caec479-c8e5-42b4-985f-07269566b001", "3": "addcf7ee-366b-4c00-bb1f-ec9a99e06158"}}, "__type__": "1"}, "addcf7ee-366b-4c00-bb1f-ec9a99e06158": {"__data__": {"text": "10\npassword: *\nSignatureContext:\n{\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"}}}}\n```\n\nWhen withdrawing assets from a contract, `from` is the contract hash and the signer account must contain the contract hash and verify account, for example:\n\n```\nneo> send", "doc_id": "addcf7ee-366b-4c00-bb1f-ec9a99e06158", "embedding": null, "doc_hash": "edbcf03a893aa97f86d42382f95959d1cf3af4a48b3158b24971dcc5ab54315c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 26037, "end": 27719, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "e0bd85aa-9cc7-401d-b7cf-844e393f281c", "3": "bbf7a51b-982e-46ca-91e2-ba1e339b9bb1"}}, "__type__": "1"}, "bbf7a51b-982e-46ca-91e2-ba1e339b9bb1": {"__data__": {"text": "the contract hash and verify account, for example:\n\n```\nneo> send 0x70e2301955bf1e74cbb31d18c2f96972abadb328 NZttvm9tAhMjyxZATvqN9WFYkHYMNaXD6C 0.000002 0x436b18e7b624c0323b090141a89e79a3ab588b6a transferdata 0x436b18e7b624c0323b090141a89e79a3ab588b6a NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y\npassword: *\nTXID: 0x174bab85eb004a07ae5b411f23cb6d3128346f9249305a768c286707938b4727\n```\n\n### sign\n\nThis command is used to sign ContractParametersContext. The translation can be broadcasted only after signing is completed.\n\n##### Syntax\n\n`sign <jsonObjectToSign>` \n\n##### Parameters\n\n`jsonObjectToSign`: The json string that records the transaction information. \n\n##### Example\n\n```\nneo> sign", "doc_id": "bbf7a51b-982e-46ca-91e2-ba1e339b9bb1", "embedding": null, "doc_hash": "43b070bc7188d0b7013fbdec7c1a867d030f72fcb109f5a6a87d7cdec91f8f25", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 27675, "end": 28355, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "addcf7ee-366b-4c00-bb1f-ec9a99e06158", "3": "943269c2-e5f1-4c5b-bfd7-29f33c8d46ce"}}, "__type__": "1"}, "943269c2-e5f1-4c5b-bfd7-29f33c8d46ce": {"__data__": {"text": "the transaction information. \n\n##### Example\n\n```\nneo> sign {\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"},{\"type\":\"Signature\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"}}}}\nSigned Output:", "doc_id": "943269c2-e5f1-4c5b-bfd7-29f33c8d46ce", "embedding": null, "doc_hash": "c0ca572ddb837a83202b5c590772018cb524a1e568c58b0ea844acdc706c4924", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 28359, "end": 29907, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "bbf7a51b-982e-46ca-91e2-ba1e339b9bb1", "3": "244bd799-59c8-4720-b85c-5fab07a171ae"}}, "__type__": "1"}, "244bd799-59c8-4720-b85c-5fab07a171ae": {"__data__": {"text": "Output: {\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"},{\"type\":\"Signature\",\"value\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\"},{\"type\":\"Signature\",\"value\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJW", "doc_id": "244bd799-59c8-4720-b85c-5fab07a171ae", "embedding": null, "doc_hash": "b395ef8ed27ec5d0c3a795494ce7158a5d77a531ce91984b5ceffe6eec538a66", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 29955, "end": 31481, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "943269c2-e5f1-4c5b-bfd7-29f33c8d46ce", "3": "edad010d-873a-4f20-a175-1f0c2e9d2766"}}, "__type__": "1"}, "edad010d-873a-4f20-a175-1f0c2e9d2766": {"__data__": {"text": "x2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"},{\"type\":\"Signature\",\"value\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\"},{\"type\":\"Signature\",\"value\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\",\"0302242b1dced63e1bf7eb14876f7ef026b79567f9c5be83de1943dd185ec28e68\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\",\"020df8858b66ff4d7b0a6a68d11ddedcc7d90d2a64ffa2cd087c4c5dabf4150b40\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\",\"025e8494903b93dc369f08a2bd7e221f574c75d9675591f04907cba9daeeb83d10\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\",\"038415d0be8dc12b61d3e3b76b98f464dfab7fddee74271c35e2de624bb51023a6\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"}}}} ```  The signed json string is returned. If the signature is complete, you can broadcast the transaction using the command `relay`.\n\n### deploy\n\nDeploys a contract on the blockchain.\n\n##### Syntax\n\n`deploy <nefFilePath> [manifestFile]` \n\n##### Parameters\n\n- `nefFilePath`: Path to the executable file (.nef) of NeoVM.\n- `manifestFile`: Path to the file manifest.json, which records each interface information and configuration content of the contract.\n\n##### Example\n\n```\nneo> deploy Template.nef Template.manifest.json  \nScript hash: 0x1e5ce27b9af630aed82bc94695fa8d424cdbe5c6\nGas Consumed: 100000000\n\nSigned and relayed transaction with", "doc_id": "edad010d-873a-4f20-a175-1f0c2e9d2766", "embedding": null, "doc_hash": "2ac657acebe906e5ce1ac0c180c493cbdd06ab37f7ce6c4db1932aceadd852f8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 31489, "end": 33278, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "244bd799-59c8-4720-b85c-5fab07a171ae", "3": "77e2d87b-5406-461d-b625-62c4d9505a2a"}}, "__type__": "1"}, "77e2d87b-5406-461d-b625-62c4d9505a2a": {"__data__": {"text": "Consumed: 100000000\n\nSigned and relayed transaction with hash=0xab6dd63ea36a7c95580b241f34ba756e62c767813be5d53e02a983f4e561d284\n```\n\n### invoke\n\nInvokes a contract. \n\n##### Syntax\n\n`invoke <scriptHash> <operation> [contractParameters=null] [sender=null] [signerAccounts=null][maxGas]` \n\n##### Parameters\n\n- `scripthash`: Contract hash to invoke.\n\n- `command`: Method name in the contract, which can be followed by input parameters separated by space. \n\n- `contractParameters`: Parameters to invoke. You need to pass in JSON-formatted string. For ByteArray type, encode it with Base64 in advance. \n\n  For example, the address `NfKA6zAixybBHHpmaPYPDywoqDaKzfMPf9` can be converted to the hexadecimal big-endian script hash  `0xe4b0b6fa65a399d7233827502b178ece1912cdd4` or the Base64-encoded script hash `1M0SGc6OFytQJzgj15mjZfq2sOQ=`. The JSON-formatted parameters are:\n\n  ```\n  [{\"type\":\"ByteArray\",\"value\":\"1M0SGc6OFytQJzgj15mjZfq2sOQ=\"}]\n  [{\"type\":\"Hash160\",\"value\":\"0xe4b0b6fa65a399d7233827502b178ece1912cdd4\"}]\n  ```\n\n- `sender` : Transaction sender, i.e. the GAS payment account.\n\n- `signerAccounts` : An array of co-signed addresses and only supports standard accounts (single address). After filling in Neo-CLI will append signatures of all addresses in the array to the invocation transaction.\n\n- `maxGas`: The maximum GAS can be consumed.\n\n##### Example 1\n\nInput:\n\n```\ninvoke 0xb7f4d011241ec13db16c0e3484bdd5dd9a536f26 symbol\n```\nOutput:\n\n```\nInvoking script with: '10c00c046e616d650c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0103609\nEvaluation Stack: [{\"type\":\"ByteArray\",\"value\":\"VG9rZW5TeW1ib2w=\"}]\n\nrelay tx(no|yes):\n```\n\n- `VM State`: there are two states:\n  -  `HALT` : the virtual machine executes successfully.\n  -  `FAULT` : the virtual machine exits during execution due to an exception. \n- `Gas Consumed`: the system fees consumed for smart contract invocation.\n- `Evaluation Stack`: shows the result of contract execution, where the value is encoded with Base64.\n\nInput:\n\n```\ninvoke 0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 balanceOf [{\"type\":\"ByteArray\",\"value\":\"1M0SGc6OFytQJzgj15mjZfq2sOQ=\"}]\n```\n\nOutput:\n\n```\nInvoking script with: '0c14d4cd1219ce8e172b50273823d799a365fab6b0e411c00c0962616c616e63654f660c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0355309\nEvaluation Stack: [{\"type\":\"Integer\",\"value\":\"9999999900000000\"}]\n\nrelay tx(no|yes): no\n```\n\nOutput:\n\n```\ninvoke", "doc_id": "77e2d87b-5406-461d-b625-62c4d9505a2a", "embedding": null, "doc_hash": "bc3cb702c16d36be7d720f327d371688bb9c5d9ce0f0254317249feafb8ff298", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 33228, "end": 35709, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "edad010d-873a-4f20-a175-1f0c2e9d2766", "3": "ea0f654c-4c4a-4a35-9307-3185f1fe64b3"}}, "__type__": "1"}, "ea0f654c-4c4a-4a35-9307-3185f1fe64b3": {"__data__": {"text": "tx(no|yes): no\n```\n\nOutput:\n\n```\ninvoke 0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 balanceOf [{\"type\":\"Hash160\",\"value\":\"0xe4b0b6fa65a399d7233827502b178ece1912cdd4\"}]\n```\n\nor\n\n```\ninvoke 0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 balanceOf [{\"type\":\"Hash160\",\"value\":\"d4cd1219ce8e172b50273823d799a365fab6b0e4\"}]\n```\n\nOutput:\n\n```\nInvoking script with: '0c14d4cd1219ce8e172b50273823d799a365fab6b0e411c00c0962616c616e63654f660c14f9f81497c3f9b62ba93f73c711d41b1eeff50c2341627d5b52'\nVM State: HALT\nGas Consumed: 0.0355309\nEvaluation Stack: [{\"type\":\"Integer\",\"value\":\"9999999900000000\"}]\n\nrelay tx(no|yes): no\n```\n##### Example 3\n\nInput:\n\n    neo> invoke 0x70e2301955bf1e74cbb31d18c2f96972abadb328 transfer [{\"type\":\"Hash160\",\"value\":\"0x436b18e7b624c0323b090141a89e79a3ab588b6a\"},{\"type\":\"Hash160\",\"value\":\"0xb4ba98beea38621dd96a9804384db24451b1cff2\"},{\"type\":\"Integer\",\"value\":\"1\"}] 0x436b18e7b624c0323b090141a89e79a3ab588b6a 0x436b18e7b624c0323b090141a89e79a3ab588b6a NNU67Fvdy3LEQTM374EJ9iMbCRxVExgM8Y\n\nOutput:\n\n    Invoking script with: '110c14f2cfb15144b24d3804986ad91d6238eabe98bab40c146a8b58aba3799ea84101093b32c024b6e7186b4313c00c087472616e736665720c14bcaf41d684c7d4ad6ee0d99da9707b9d1f0c8e6641627d5b52'\n    VM State: HALT\n    Gas Consumed: 0.0900796\n    Result Stack: [{\"type\":\"Boolean\",\"value\":true}]\n    Relay tx(no|yes): no\n\n\n:::note\n After entering the invoke command, the node invokes the `operation` method, and passes `operation` and `contractParameters` as arguments. If `operation` and `contractParameters` are not processed in the contract, the expected result will not be returned.\n:::\n\n###  update\n\nUpgrades a contract.\n\n##### Syntax\n\n`update <scriptHash> <filePath> <manifestPath> <sender> [signerAccounts=null]` \n\n##### Parameters\n\n- `scriptHash`: hash of the contract to update\n\n- `nefFilePath`: File path to the NeoVM executable file nef.\n- `manifestFile`: Path of the manifest.json file which records all the contract interfaces and configuration. If not specified, the manifest.json with the same name as nef will be automatically matched.  \n- `sender`: The transaction sender that pays for GAS\n- `signerAccounts`: An array of co-signed addresses and only supports standard accounts (single address). After filling in Neo-CLI will append signatures of all addresses in the array to the invocation transaction.\n\n##### Example\n\n```\nupdate", "doc_id": "ea0f654c-4c4a-4a35-9307-3185f1fe64b3", "embedding": null, "doc_hash": "4b7a2ee10bacf62b3c78d0b7e8b6826bc4500b600ede11cf2bf46b504f88aa68", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 35723, "end": 38082, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "77e2d87b-5406-461d-b625-62c4d9505a2a", "3": "fbd396fd-7841-43dd-aee6-7493abc80418"}}, "__type__": "1"}, "fbd396fd-7841-43dd-aee6-7493abc80418": {"__data__": {"text": "the array to the invocation transaction.\n\n##### Example\n\n```\nupdate 0x3096fb5cd0a2a95b29e8e92692f0be77c4cce06f NEP17.nef NEP17.manifest.json 0xf6a3f0fda46abdeacac9eda4600a354d0687c420\nContract hash: 0x3096fb5cd0a2a95b29e8e92692f0be77c4cce06f\nUpdated times: 0\nGas consumed: 3.3317182\nNetwork fee: 0.0448052\nTotal fee: 3.3765234 GAS\nRelay tx? (no|yes): y\nSigned and relayed transaction with hash=0x4587846a2cbc8574e16ce04e95e8c73d76b88250581d81291c23f05c215273ba\n```\n\n### relay\n\nAfter signing completed, this command can be used to broadcast the transaction information.  \n\n##### Syntax\n\n`relay <jsonObjectToSign>` \n\n##### Parameters\n\n`jsonObjectToSign`: The json string that records the transaction information.\n\n##### Example\n\n```\nneo> relay", "doc_id": "fbd396fd-7841-43dd-aee6-7493abc80418", "embedding": null, "doc_hash": "06b2024befbca765b59524f5942d8c60d61e301bb4f0cd02485d14c8fb2897ae", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 38060, "end": 38801, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "ea0f654c-4c4a-4a35-9307-3185f1fe64b3", "3": "062e830b-866c-459c-a866-2c9a212e2a71"}}, "__type__": "1"}, "062e830b-866c-459c-a866-2c9a212e2a71": {"__data__": {"text": "the transaction information.\n\n##### Example\n\n```\nneo> relay {\"type\":\"Neo.Network.P2P.Payloads.Transaction\",\"hex\":\"AFhJmTC0i5cAAAAAAHwNhQAAAAAA12oAAAK\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAD4JGXeIikja1DoxoxIKrkYu6bW7AEAVwsaDBS\\u002BqHRB6GdCJbuT4Xv76Od/eEbFVAwU\\u002BCRl3iIpI2tQ6MaMSCq5GLum1uwUwB8MCHRyYW5zZmVyDBT1Y\\u002BpAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQ==\",\"items\":{\"0x54c546787fe7e8fb7be193bb254267e84174a8be\":{\"script\":\"DCECF5VDAAGEeB5UR7Pw\\u002B6zmZOqSt\\u002BMSJ8jnG8Tnza/M245BdHR2qg==\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"gyzhpmI0KRkAJmd8cWtv7PdFLRlS\\u002BHqykL0oH/S84Te4DGwRd9ja/TfKW2\\u002BHTSrdfUdnN/K8CF0kf0UywcTKCw==\"}},\"0xecd6a6bb18b92a488cc6e8506b232922de6524f8\":{\"script\":\"FQwhAwIkKx3O1j4b9\\u002BsUh29\\u002B8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA\\u002BirUYbh3qvNEOwOUJ3tT/\\u002Bt5v3fU0rD4FBiaLrj/USmF0F7zmyl\",\"parameters\":[{\"type\":\"Signature\",\"value\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"},{\"type\":\"Signature\",\"value\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\"},{\"type\":\"Signature\",\"value\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJW", "doc_id": "062e830b-866c-459c-a866-2c9a212e2a71", "embedding": null, "doc_hash": "60bc3d89eeae7395247941459360f16aec11c6f62afe37e88413c6f66c25fa8f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 38808, "end": 40386, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "fbd396fd-7841-43dd-aee6-7493abc80418", "3": "adea64fc-c224-4d02-ad35-c07551b1b4a2"}}, "__type__": "1"}, "adea64fc-c224-4d02-ad35-c07551b1b4a2": {"__data__": {"text": "x2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\"},{\"type\":\"Signature\",\"value\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\"},{\"type\":\"Signature\",\"value\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\"}],\"signatures\":{\"02179543000184781e5447b3f0fbace664ea92b7e31227c8e71bc4e7cdafccdb8e\":\"/3oqPLUuFig8B66JNnlyVsA9klLm10LLA5sV/oDr9uzCAPh\\u002BDL0yJWx2PfEd\\u002BIWijBk/re90CHyJ3w1WkB71eQ==\",\"0302242b1dced63e1bf7eb14876f7ef026b79567f9c5be83de1943dd185ec28e68\":\"T0PQ9vQNDtDnpa3f9UtN3\\u002B22SOFbVG8NBwvu3tq6YchsMbF4OmlBFtNa\\u002BZuqT3fxP0r/naAYgnwHMDG8DXAeSQ==\",\"020df8858b66ff4d7b0a6a68d11ddedcc7d90d2a64ffa2cd087c4c5dabf4150b40\":\"cUmlfjxdWmPTSpHsJHqr8lLllclJNGroOmStMLXzOI4fcO3D5/JKru/rU/OC029il\\u002B8sVteUmL0rEaLnldKMrQ==\",\"025e8494903b93dc369f08a2bd7e221f574c75d9675591f04907cba9daeeb83d10\":\"DhhX8mwnLRVVU9hRjdGJ/Pdq10ytpn8xJUOXWqy3I8cE/Midc6s3dvzMt1QH\\u002BPn2xDGjkzNNcczI34reE\\u002BaCpA==\",\"038415d0be8dc12b61d3e3b76b98f464dfab7fddee74271c35e2de624bb51023a6\":\"QYZ4LuSpqSWZ8RzowvPZ8U0o3HjwhPlDf2jmOV3Rglq4Rm4KvMpIqfmuLdrEkecHe1MSP1AcEvE/c2FhdZ98UQ==\"}}}} Data relay success, the hash is shown as follows:\n0xc65c3b3618823238b2b5589dba54c665f86310c85a3460f901cfb0030d4dbf28\n```\n\n### broadcast addr\n\nBroadcasts the IP address of a block.\n\n##### Syntax\n\n`broadcast addr <IPAddress> <port>`\n\n##### Example\n\n```\nneo> broadcast addr 127.0.0.1 10332\nneo> \n```\n\n### broadcast block\n\nBroadcasts a block.\n\n##### Syntax\n\n`broadcast block <block-hash> `\n\n`broadcast block <block-height> `\n\n##### Example\n\n```\nneo> broadcast block 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \nneo> broadcast block", "doc_id": "adea64fc-c224-4d02-ad35-c07551b1b4a2", "embedding": null, "doc_hash": "7fc8ea61da873bf317b779e34b1161806c03e811bd4e375ffaeff8547abbcdd3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 40442, "end": 42148, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "062e830b-866c-459c-a866-2c9a212e2a71", "3": "df0ef819-5d3c-4228-bf3d-d7eb46c0f465"}}, "__type__": "1"}, "df0ef819-5d3c-4228-bf3d-d7eb46c0f465": {"__data__": {"text": "\nneo> broadcast block 537\nneo> \n```\n\n### broadcast getblocks\n\nBroadcasts the getblocks request.\n\n##### Syntax\n\n`broadcast getblocks <block-hash> `\n\n##### Example\n\n```\nneo> broadcast getblocks 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \n```\n\n### broadcast getheaders\n\nBroadcasts the getheaders request.\n\n##### Syntax\n\n`broadcast getheaders <block-hash> `\n\n##### Example\n\n```\nneo> broadcast getheaders 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \n```\n\n### broadcast getdata\n\nBroadcasts the getdata request.\n\n##### Syntax\n\n`broadcast getdata <inventory type> <payload> `\n\n##### Example\n\n```\nneo> broadcast getdata Block 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \nneo> broadcast getdata TX 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\nneo> broadcast getdata Consensus 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\n```\n\n### broadcast inv\n\nBroadcasts inventory data.\n\n##### Syntax\n\n`broadcast inv <inventory type> <payload> `\n\n##### Example\n\n```\nneo> broadcast inv Block 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \nneo> broadcast inv TX 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\nneo> broadcast inv Consensus 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo>\n```\n\n### broadcast transaction\n\nBroadcasts a transaction.\n\n##### Syntax\n\n`broadcast transaction <transaction hash> `\n\n##### Example\n\n```\nneo> broadcast transaction 0xd57bbbadee0b8ff283961f886cdc6d455ab8b5301ccdf5359d7316f209064052\nneo> \n```\n\n### plugins\n\nShows all the loaded plugins.\n\n##### Syntax\n\n`plugins`\n\n##### Example\n\n```\nneo> plugins\nLoaded plugins:\n        ApplicationLogs     Synchronizes the smart contract log with the NativeContract log (Notify)\n        DBFTPlugin          Consensus plugin with dBFT algorithm.\n        LevelDBStore        Uses LevelDB to store the blockchain data\n        OracleService       Built-in oracle plugin\n        TokensTracker     Enquiries NEP-17 balances and transaction history of accounts through RPC\n        RpcServer           Enables RPC for the node\n        StatesDumper        Exports Neo-CLI status data\n        StateService        Enables MPT for the node\n```\n\n### install\n\nInstalls plugins.\n\n`install [Plugin name]` \n\nTo install a", "doc_id": "df0ef819-5d3c-4228-bf3d-d7eb46c0f465", "embedding": null, "doc_hash": "416c39fed4efe68b233b3c170dee07321722adb04158f0f5efffd8b9eabee381", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 42130, "end": 44487, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "adea64fc-c224-4d02-ad35-c07551b1b4a2", "3": "1a5c1a6b-d601-4e71-b8f0-994c9a4bfd3e"}}, "__type__": "1"}, "1a5c1a6b-d601-4e71-b8f0-994c9a4bfd3e": {"__data__": {"text": "plugins.\n\n`install [Plugin name]` \n\nTo install a plugin, enter the command as follows:\n\n```\nneo> install RpcServer\nDownloading from https://github.com/neo-project/neo-modules/releases/download/v3.1.0/RpcServer.zip\nInstall successful, please restart neo-cli.\n```\n\nFor information about all plugins refer to [Install Plug-ins](config.md).\n\n### dump storage\n\nExports all or the specified state data.\n\n##### Syntax\n\n`dump storage <key>`\n\n### export blocks\n\nExports the block data from the specified block height. The output can be used for offline synchronization. \n\n##### Syntax\n\n`export blocks <index>`\n\n##### Parameters\n\n`<index> `: The height of the starting block from which the data is exported.\n\n### start consensus\n\nStarts the consensus on the premise that the wallet has a consensus authority, allows consensus authority to be obtained on the main net through voting. This command requires  installation of the DBFTPlugin. If a private chain is deployed, public key of the consensus can be set up in the `protocol.json`. For more information refer to [Setting up Private Chain](../../develop/network/private-chain/private-chain2.md).\n\n### start oracle\n\nStarts Oracle. This command requires installation of the OracleService plugin. The Oracle service is enabled only if the public key of the current wallet address has been assigned the Oracle role by the committee.\n\n### stop oracle\n\nStops Oracle. This command requires installation of the OracleService plugin.\n\n### state root\n\nQueries the state root with index. This command requires installation of the StateService plugin.\n\n##### Syntax\n\n`state root <index>`\n\n##### Parameters\n\n`<index> `: The block index\n\n```\nneo> state root", "doc_id": "1a5c1a6b-d601-4e71-b8f0-994c9a4bfd3e", "embedding": null, "doc_hash": "238a1880ca9ee7f4e47986bc451ccebd35cb21fffed2db87493e555972607657", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 44464, "end": 46150, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "df0ef819-5d3c-4228-bf3d-d7eb46c0f465", "3": "036fe86b-258a-49c1-b1ac-5b5c3ba2ba16"}}, "__type__": "1"}, "036fe86b-258a-49c1-b1ac-5b5c3ba2ba16": {"__data__": {"text": "`: The block index\n\n```\nneo> state root 20000\n{\"version\":0,\"index\":20000,\"roothash\":\"0x0121262f9833b21eae7b8d375c1c334fdd4d4500f1d3fad2da669d5b83e94157\",\"witness\":{\"invocation\":\"DECny9LhRZpH61UNC/sXG9WEBFMl7cf1rZPT7U0tCvZa\\u002BHs6rG/fz2gKTfvLBUp5lcmGDlrMlKCCfKoougYGt7s4DEAuhkhPROcr2FM5SSHCl5LFWSTrcvxa6rvmLc1NGXwpgcRHV9LY5/H6q5SnwdAW3DSspap93FjvSHqU48Mn41nGDEDI5G6bGhGvyLl8rZbT0LzAHRbQUZ2OWIcnFi/Jo/QtwZoCGrK6L3g2miCXsgkckzUsJ1DoruMzKgVEFb4t/KYBDEAWC2fagW\\u002BOt6iUGyo\\u002BNu0zC1jl105uLyv5bY4tE03vBjbJDTm1T3o17jC8b3HMaeYMro2IGZTSOGt3b9YF6ntiDEBaMGwM/\\u002Bd\\u002BkTHmBb9c\\u002BuCfMkEHOez8XuyoSZotQdDCtaVMCT4wHwIHspxeGGp1iVIEtEYFhJl0EfPEObcO0YfGDEBCC3/hBNLGmusDpr4gDfD6asqjyNCGPNerYIHunu2gsOr6kr3uQJBFqaXSYp\\u002BCkz9HBrc6Cq2fNz4HPn/tIo5S\",\"verification\":\"FgwhAwAqLhjDnN7Qb8Yd2UoHuOnz\\u002BgNqcFvu\\u002BHZCUpVOgtDXDCECAM1gQDlYokm5qzKbbAjI/955zDMJc2eji/a1GIEJU2EMIQIhkM6Z1WxnvBcDTCedOLpwWTZHFtEduMhLpf3Z/AJgEQwhAzU7wXKtEGB62apHDocfRKJil\\u002ByBAIP6J8aLnJSjTL/5DCECNxinjeXEq5HT3NK2m0dPLTUIuN3EeHiMupRY6Sj\\u002B/qYMIQKXhyDsbFxYdeA0d\\u002BFsbZj5AQhamA13R64ysGgh19j6UwwhAqPXy4P0JIWNvpx5c9df/ut8OUCIRJ9onGacn09vEIVODCEDySUJ5CjN1/ek/dSpfGeJELQPFGXd3k8En3MlrzOAeSkYC0ETje\\u002Bv\"}}\n```\n\n### get proof\n\nGets proof with root hash, contract hash, and storage key.\n\n##### Syntax\n\n`get proof <root hash> <script hash> <key>`\n\n##### Parameters\n\n* `<root hash>`: hash of the state root.\n* `<script hash>`: Contract hash\n* `<key>`: key of the storage; Base64-encoded.\n\n```\nneo> get proof 0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca 0x79bcd398505eb779df6e67e4be6c14cded08e2f2", "doc_id": "036fe86b-258a-49c1-b1ac-5b5c3ba2ba16", "embedding": null, "doc_hash": "647bc2e6d3fc495c2a9089f297dd1651d90282938cc9fe5c002e7ce6d8c9ddf2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 46160, "end": 47744, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "1a5c1a6b-d601-4e71-b8f0-994c9a4bfd3e", "3": "64fb1759-c317-47a0-8028-0ef01c553e77"}}, "__type__": "1"}, "64fb1759-c317-47a0-8028-0ef01c553e77": {"__data__": {"text": "Fw==\nBfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\n```\n\n### verify proof\n\nVerifies with root hash and proof.\n\n##### Syntax\n\n`verify proof <root hash> <proof>`\n\n##### Parameters\n\n* `<root hash>`: hash of the state root.\n* `<proof>`: proof of the state root; Base64-encoded.\n\n```\nneo> verify proof 0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca", "doc_id": "64fb1759-c317-47a0-8028-0ef01c553e77", "embedding": null, "doc_hash": "03bf5e3e1668c4b8f8fa7ff5e348cd3f39921ce4862705c6705d481698844f66", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 47779, "end": 48852, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "036fe86b-258a-49c1-b1ac-5b5c3ba2ba16", "3": "5987a3d4-ec18-49cc-9f95-59d495c5de64"}}, "__type__": "1"}, "5987a3d4-ec18-49cc-9f95-59d495c5de64": {"__data__": {"text": "Bfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\nAAI=\n```\n\n", "doc_id": "5987a3d4-ec18-49cc-9f95-59d495c5de64", "embedding": null, "doc_hash": "0a2dab0279dcff1f4677cb6348642a688f90ae099d47823384db0f8ac11fc216", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}, "node_info": {"start": 48853, "end": 49620, "_node_type": "1"}, "relationships": {"1": "efa680fd18a152c20af376666071ba484cb87d75", "2": "64fb1759-c317-47a0-8028-0ef01c553e77"}}, "__type__": "1"}, "be3a27cf-d400-43d8-b3c8-2677ff716f3a": {"__data__": {"text": "# Configuring and Starting Neo-CLI \n\nAfter installation of Neo-CLI, this section we will walk you through the necessary configurations before running Neo-CLI and the steps to start Neo-CLI using commands. \n\n## Modifying configuration files\n\nNeo-CLI accesses the configuration file `config.json`  during execution. You need to make necessary configurations in the file before starting Neo-CLI.\n\n### Configuring a wallet\n\nTo make Neo-CLI automatically open a wallet when running, you can configure the wallet in  `config.json`  beforehand, as follows:\n\n- `Path`: the wallet path\n- `Password`: the wallet password. Note that the password configured here is displayed in plaintext!\n- `IsActive`: Set to `true` to allow Neo-CLI to open the wallet automatically.\n\nHere is an example:\n\n```json\n{\n  \"ApplicationConfiguration\": {\n    \"Logger\": {\n      \"Path\": \"Logs\",\n      \"ConsoleOutput\": false,\n      \"Active\": false\n    },\n    \"Storage\": {\n      \"Engine\": \"LevelDBStore\",\n      \"Path\": \"Data_LevelDB_{0}\"\n    },\n    \"P2P\": {\n      \"Port\": 10333,\n      \"WsPort\": 10334\n    },\n    \"UnlockWallet\": {\n      \"Path\": \"wallet.json\",\n      \"Password\": \"1\",\n      \"IsActive\": true\n    },\n    \"PluginURL\": \"https://github.com/neo-project/neo-modules/releases/download/v{1}/{0}.zip\"\n  },\n  \"ProtocolConfiguration\": {\n    \"Network\": 860833102,\n    \"AddressVersion\": 53,\n    \"MillisecondsPerBlock\": 15000,\n    \"MaxTransactionsPerBlock\": 512,\n    \"MemoryPoolMaxTransactions\": 50000,\n    \"MaxTraceableBlocks\": 2102400,\n    \"InitialGasDistribution\": 5200000000000000,\n    \"ValidatorsCount\": 7,\n    \"StandbyCommittee\": [\n      \"03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c\",\n      \"02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093\",\n      \"03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a\",\n      \"02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554\",\n      \"024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d\",\n      \"02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e\",\n      \"02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70\",\n      \"023a36c72844610b4d34d1968662424011bf783ca9d984efa19a20babf5582f3fe\",\n     ", "doc_id": "be3a27cf-d400-43d8-b3c8-2677ff716f3a", "embedding": null, "doc_hash": "4ff3771a5cac27280db349ed711e8c4d4a73e74bad1c853b10ab5d6d6f47fb37", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/config"}, "node_info": {"start": 0, "end": 2212, "_node_type": "1"}, "relationships": {"1": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6", "3": "25ce4341-f9fb-44ce-8995-018a66f1c502"}}, "__type__": "1"}, "25ce4341-f9fb-44ce-8995-018a66f1c502": {"__data__": {"text": "     \"03708b860c1de5d87f5b151a12c2a99feebd2e8b315ee8e7cf8aa19692a9e18379\",\n      \"03c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a050\",\n      \"03204223f8c86b8cd5c89ef12e4f0dbb314172e9241e30c9ef2293790793537cf0\",\n      \"02a62c915cf19c7f19a50ec217e79fac2439bbaad658493de0c7d8ffa92ab0aa62\",\n      \"03409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd0\",\n      \"0288342b141c30dc8ffcde0204929bb46aed5756b41ef4a56778d15ada8f0c6654\",\n      \"020f2887f41474cfeb11fd262e982051c1541418137c02a0f4961af911045de639\",\n      \"0222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c30\",\n      \"03d281b42002647f0113f36c7b8efb30db66078dfaaa9ab3ff76d043a98d512fde\",\n      \"02504acbc1f4b3bdad1d86d6e1a08603771db135a73e61c9d565ae06a1938cd2ad\",\n      \"0226933336f1b75baa42d42b71d9091508b638046d19abd67f4e119bf64a7cfb4d\",\n      \"03cdcea66032b82f5c30450e381e5295cae85c5e6943af716cc6b646352a6067dc\",\n      \"02cd5a5547119e24feaa7c2a0f37b8c9366216bab7054de0065c9be42084003c8a\"\n    ],\n    \"SeedList\": [\n      \"seed1.neo.org:10333\",\n      \"seed2.neo.org:10333\",\n      \"seed3.neo.org:10333\",\n      \"seed4.neo.org:10333\",\n      \"seed5.neo.org:10333\"\n    ]\n  }\n}\n```\n\nWhere:\n\n- `ConsoleOutput`: Whether to print log information on console. `true` means foreground and background printing, while `false` means background logging.\n- `Active`: Whether to enable Log\n- `Engine`: It defaults to LevelDBStore, which means the engine used by the blockchain to store data.\n- `PluginURL`: The downloading URL of the plugin, which will be used when using the CLI install command.\n\n### Connecting the node to network\n\nNeo-CLI connects to N3 main net by default. To connect the node to test net, replace the content of `config.json` with the content of  `config.testnet.json`. \n\nTo connect the node to your private net, refer to [Setting up Private Chain](../../develop/network/private-chain/solo.md).\n\n## Installing plugins\n\nSome additional functionalities are individually encapsulated in plug-ins for the purpose of improving node security, stability, and flexibility. The user can select the desired extension functionality instead of invoking it with additional parameters every time starting neo-cli, thus avoiding many human errors and some tedious", "doc_id": "25ce4341-f9fb-44ce-8995-018a66f1c502", "embedding": null, "doc_hash": "5474f36fceb0e7194344e32962412e190e391342dbdcce3af50b1fa7d937b62f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/config"}, "node_info": {"start": 2213, "end": 4460, "_node_type": "1"}, "relationships": {"1": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6", "2": "be3a27cf-d400-43d8-b3c8-2677ff716f3a", "3": "79085973-df4d-427d-9911-c551b7bb9657"}}, "__type__": "1"}, "79085973-df4d-427d-9911-c551b7bb9657": {"__data__": {"text": "parameters every time starting neo-cli, thus avoiding many human errors and some tedious instructions such as opening a wallet and calling APIs. \n\nThe following table lists all the plugins:\n\n|Plugin|Description|API Included||\n|--- |--- |--- |--- |\n|ApplicationLogs|Synchronizes the smart contract log with the NativeContract log (Notify)|[getapplicationlog](../../reference/rpc/latest-version/api/getapplicationlog)|Recommended|\n|DBFTPlugin|dBFT consensus plugin||Mandatory when served as a consensus node|\n|LevelDBStore|Uses LevelDB to store the blockchain data||Mandatory|\n|MPTTrie|Uses LevelDB to store the MPT data||Mandatory when served as a StateRoot consensus node|\n|OracleService|Oracle service plugin||Mandatory when served as an Oracle node|\n|RocksDBStore|Uses RocksDBStore to store the blockchain data||An alternative to LevelDBStore|\n|RpcServer|Enables RPC for the node|[RPC API](../../reference/rpc/latest-version/api)|Mandatory|\n|SQLiteWallet|A SQLite-based wallet provider that supports wallet files with .db3 suffix||Optional|\n|StatesDumper|Exports Neo-CLI status data.||Optional|\n|StateService|StateRoot consensus service plugin|[getstateroot](../../reference/rpc/latest-version/api/getstateroot) [getproof](../../reference/rpc/latest-version/api/getproof.html) [verifyproof](../../reference/rpc/latest-version/api/verifyproof.html) [getstateheight](../../reference/rpc/latest-version/api/getstateheight.html)  |Mandatory when served as a StateRoot consensus node|\n|TokensTracker|Enquiries NEP-11 and NEP-17 assets balance and transactions history of accounts through RPC|[getnep11balances](../../reference/rpc/latest-version/api/getnep11balances)  [getnep11properties](../../reference/rpc/latest-version/api/getnep11properties)  [getnep11transfers](../../reference/rpc/latest-version/api/getnep11transfers)  [getnep17balances](../../reference/rpc/latest-version/api/getnep17balances)  [getnep17transfers](../../reference/rpc/latest-version/api/getnep17transfers)  |Recommended|\n\nYou can choose one of the following ways to install plugins:\n\n- (Recommended) Use the CLI command install/uninstall to install or uninstall plugins automatically.\n\n  For example:\n\n  ```\n  neo> install StatesDumper\n  Downloading from https://github.com/neo-project/neo-modules/releases/download/v3.1.0/StatesDumper.zip\n  Install successful, please restart neo-cli.\n  ```\n\n  ```\n  neo> uninstall StatesDumper\n  Uninstall successful, please restart neo-cli.\n  ```\n\n  After installation, restart Neo-CLI for the plugin to take effect.\n\n- Download the plugin package from GitHub\n\n  Download the latest version plugin you need from [here](https://github.com/neo-project/neo-modules/releases) and then unzip the package under the neo-cli root directory.\n\n## Starting the NEO node\n\nOpen the command line, navigate to the Neo-CLI directory, and enter the following command to start the Neo node:\n\nOn **Windows 10**:\n\n```\ndotnet neo-cli.dll\n```\n\nor \n\n```\nneo-cli.exe\n```\n\nOn **Linux (ubuntu 16.04/18.04)**:\n\n```\n./neo-cli\n```\n\nor\n\n```\ndotnet neo-cli.dll\n```\n\n:::note\n\nIf you  use dotnet install .net core in advance.\n:::\n\nIf you want the external program to access the", "doc_id": "79085973-df4d-427d-9911-c551b7bb9657", "embedding": null, "doc_hash": "a8a7656da6fc08defa2e46e53cb6430ea8035031e87ae5b11cacccd29869045e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/config"}, "node_info": {"start": 4385, "end": 7540, "_node_type": "1"}, "relationships": {"1": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6", "2": "25ce4341-f9fb-44ce-8995-018a66f1c502", "3": "221af4ed-2a70-42df-a51a-2c45b1ab4b1f"}}, "__type__": "1"}, "221af4ed-2a70-42df-a51a-2c45b1ab4b1f": {"__data__": {"text": "core in advance.\n:::\n\nIf you want the external program to access the node API need to open the firewall port: 10331-10334, 20331-20334\n\n:::warning\n\nIf you open the API service and the wallet in Neo-CLI, you need to set up your firewall policy. For example, set a whitelist for the firewall to only allow access to these ports by whitelisted IP addresses. If completely opening the service to external network, others may be able to export the private key or transfer assets using API.\n:::", "doc_id": "221af4ed-2a70-42df-a51a-2c45b1ab4b1f", "embedding": null, "doc_hash": "0b8c0a70436f440a3039c76699c3e8303ed4f19afb00d3bd5f707df7b427f7b8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/config"}, "node_info": {"start": 7548, "end": 8036, "_node_type": "1"}, "relationships": {"1": "0d998f1964df8496b6512bf39dbdcb406ee9ebb6", "2": "79085973-df4d-427d-9911-c551b7bb9657"}}, "__type__": "1"}, "427ef00e-1f35-4bff-8b6d-bb2ee4d66792": {"__data__": {"text": "# Installing Neo-CLI\n\nYou can choose one of the following ways to install Neo-CLI:\n\n- Install the official Neo-CLI released package\n- or publish Neo-CLI source code from GitHub into an executable file. If you use macOS, this way is highly recommended.\n\nThis document will describe both ways.\n\n## Hardware requirements\n\nThe following table lists the minimum and recommended hardware requirements for the computer running Neo-CLI.\n\n|           | Minimum                                              | Recommended                                          |\n| --------- | ---------------------------------------------------- | ---------------------------------------------------- |\n| System    | Windows 10<br/>Ubuntu 16.04/18.04<br/>CentOS 7.4/7.6 | Windows 10<br/>Ubuntu 16.04/18.04<br/>CentOS 7.4/7.6 |\n| CPU       | Dual core                                            | Quad core                                            |\n| Memory    | 8G                                                   | 16G                                                  |\n| Hard Disk | 50G SSD hard drive                                   | 100G SSD hard drive                                  |\n\n## Installing Neo-CLI package\n\n1. Download the latest [Neo-CLI](https://github.com/neo-project/neo-cli/releases) package according to your operating system on Github and unzip it.\n\n2. On Linux, install the LevelDB and SQLite3 dev packages. \n\n  **Ubuntu:**\n\n  ```\n  sudo apt-get install libleveldb-dev sqlite3 libsqlite3-dev libunwind8-dev\n  ```\n\n  **CentOS:**\n\n  ```\n  sudo wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n  sudo yum -y install epel-release-latest-7.noarch.rpm\n  sudo yum  -y install leveldb-devel libunwind-devel libsqlite3x-devel sqlite3*\n  ```\n\n  If you use RocksDB as the storage, modify config.json, as shown below\uff1a\n\n  ```\n  \"Storage\": {\n     \"Engine\": \"RocksDBStore\"\n   },\n  ```\n\n  and then enter the following command on ubuntu 18.04\uff1a\n\n  ```\n  sudo apt-get install librocksdb-dev\n  ```\n\n  If using Windows, you can skip this step as those files are already included in the installation package.\n\n## Publishing from Neo-CLI source code\n\nYou can download and compile the Neo-CLI source directly from Github.\n\n### Installing required files\n\n1. Git clone Neo-CLI source code from", "doc_id": "427ef00e-1f35-4bff-8b6d-bb2ee4d66792", "embedding": null, "doc_hash": "10bf0662b641f26dd9f2c53c9d6be89dc5cf056ee0b7cd2aa29533c90ed5681e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/setup"}, "node_info": {"start": 0, "end": 2300, "_node_type": "1"}, "relationships": {"1": "f8a2bda5a57d11b5128b0df687492a2c1b93d051", "3": "5ffd12c2-701c-4596-bd30-8a9430187a6f"}}, "__type__": "1"}, "5ffd12c2-701c-4596-bd30-8a9430187a6f": {"__data__": {"text": "Installing required files\n\n1. Git clone Neo-CLI source code from [Github](https://github.com/neo-project/neo-node) or using the following command:\n\n  ```\n $ git clone https://github.com/neo-project/neo-node.git\n  ```\n\n2. Download [LevelDB](https://github.com/neo-ngd/leveldb/releases) and unzip the package for later use.\n\n3. Install the latest version of  [.NET Core Runtime](https://dotnet.microsoft.com/download/dotnet-core/current/runtime)\n\n### Publishing using Visual Studio (Windows)\n\nIf you has Visual Studio 2019 installed on your Windows system, this way is recommended:\n\n1. In Visual Studio, open the project file neo-node.sln.\n2. In the Solution panel, right click `neo-cli` and select `Publish`.\n3. Go to the directory where the compiled files are outputted and copy the libleveldb.dll downloaded before to here.\n\n### Publishing using command line (Windows/Linux/macOS)\n\nYou can also use .NET Core CLI to pubish the project. For more information refer to [dotnet publish](https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-publish).\n\n1. Run the following command in the command line:\n  \n   ```\n   cd neo-node\\neo-cli\n   dotnet restore\n   dotnet publish -c release -r <RUNTIME_IDENTIFIER>\n   ```\n   Where `<RUNTIME_IDENTIFIER>` should be replaced by the related [system platform RID](https://docs.microsoft.com/zh-cn/dotnet/core/rid-catalog), e.g.  `win-x64`, `linux-x64`, or `osx-x64`.\n\n2. Go to the directory where the compiled files are outputted and copy the libleveldb.dll downloaded before to here.\n\n", "doc_id": "5ffd12c2-701c-4596-bd30-8a9430187a6f", "embedding": null, "doc_hash": "f803edb1e5157a3a23b665a1e912e44e2902bf28d3382b450ad8b8bed5a54a71", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/setup"}, "node_info": {"start": 2236, "end": 3760, "_node_type": "1"}, "relationships": {"1": "f8a2bda5a57d11b5128b0df687492a2c1b93d051", "2": "427ef00e-1f35-4bff-8b6d-bb2ee4d66792"}}, "__type__": "1"}, "c216103f-87f1-41a5-94fa-4695a01f468b": {"__data__": {"text": "---\nsidebar_position: 4\n---\n# Advanced Functions\n\n## Election and Voting\n\nUsing Neo-GUI you can elect candidates and vote for Neo consensus nodes. After all the Neo consensus nodes reach a consensus through the DBFT algorithm, new blocks are generated. Voting for consensus nodes is conducted constantly in real time in the Neo blockchain. The main process is:\n\n1. Neo nodes register as candidates\n2. NEO token holders vote for candidates\n3. Neo blockchain determines the consensus nodes based on the number of candidates and their votes cast.\n\n### Election\n\nAfter the candidates are registered, the NEO token holders can vote for consensus nodes. Before you participate in the election make sure:\n\n- You open the wallet\n- There are enough GAS in your wallet (approximately 1000.12 GAS) for payment of  candidate registration.\n\nTo register as a candidate:\n\n1. In Neo-GUI home page click `Advanced` -> `Election`\n\n2. Select the public key of the account in the list and click `OK`. \n\n:::note\nThe multi-signature address is not displayed in the list as it cannot be registered to a candidate.\n:::\n\nAfter the transaction is sent successfully, you can do the following to check if the candidate has been registered:\n\nClick `Advanced` -> `Vote` to enter the **Vote** page. The candidate's public key should be displayed in the candidate list:\n\n![](../assets/guiValidators.png)\n\n### Voting\n\nEach Neo node can vote for the candidates. The number of NEO in the current voting account will be automatically calculated as the number of the candidate's votes. For example, if you vote for a candidate from an account that has 100 NEO, the candidate receives 100 votes. If NEO in the account is spent after the vote, the candidate' votes will simultaneously be decreased to the current NEO balance.\n\nTo vote:  \n\n1. In Neo-GUI open a wallet and then click `Advanced` -> `Vote`\n2. Choose the account to vote\n3. In the Candidates field, enter the public key of the candidate to vote. \n4. Click `OK`. \n\nAfter voting you can check the votes in the candidates list after the block data has been updated.\n\n## Signature\n\nWhen initiating any transaction from a multi-signature address, e.g. transferring assets, invoking a contract, or voting, the transaction needs to obtain the minimum number of signatures to carry out the transaction.\n\n1. When GUI prompts there is insufficient signature after you send a transaction from a multi-signature address, copy the transaction information displayed in the pop-up window. \n\n2. In Neo-GUI, click `Advanced`-> `Signature`.\n\n3. Paste the transaction information copied before into the Transaction Json box, and then click `Signature`.\n\n   ![](../assets/sign_2.png)\n\n4. Copy the output data, enter the next wallet participating in the signature, and repeat that same operation until the signature is completed.\n\n   ![](../assets/sign_3.png)\n\n5. Click `Broadcast`.\n\n   ![](../assets/sign_4.png)\n\n", "doc_id": "c216103f-87f1-41a5-94fa-4695a01f468b", "embedding": null, "doc_hash": "d8a84298d6ad7cd115e589b0a4c69bc286955e51c2da808a645ba5b0082db635", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/advanced"}, "node_info": {"start": 0, "end": 2916, "_node_type": "1"}, "relationships": {"1": "43924154f68e189724acdd3a354bf12b0c0449b3"}}, "__type__": "1"}, "10fa8027-7237-4a63-8796-d04ade4d9e56": {"__data__": {"text": "---\nsidebar_position: 1\n---\n# Viewing Blockchain Information\n\nYou can click `Block` on the Neo-GUI main page to enter the blockchain page to view detailed information of blocks, transactions, and assets on the Neo blockchain.\n\n## Block\n\nThe block is a logical structure and the most basic unit of the blockchain. Data is permanently recorded on the blockchain via blocks. For information about the basic concept of the block refer to [Block](../../foundation/Blocks).\n\n### Viewing block list\n\nThe Block List page shows the newly generated blocks. You can view each block information such as block height, generation time, block hash, the number of transactions included, and etc.\n\nYou can search a specific block by entering the block index in the search box of the page.\n\nTo view more detailed information of the block, click the block entry in the list.\n\n![](../assets/guiBlocks.png)\n\n### Block Information\n\nThe Block Info page displays the following information:\n\n- Block header: basic data of the block, such as block height, generation time, block size, block hash, random number, witness, etc.\n- Transaction list: all transactions packaged in this block. Click any of transaction items to view details.\n\n\n## Transaction\n\nA block can have one or more transactions. A transaction may be a collection of one or more transfers, or an invocation of a smart contract.\n\nYou can view the transactions of two states in the Transaction page:\n\n- Transactions: all transactions packaged on the blockchain.\n- Pending: transactions in the memory pool of the node, waiting to be packaged on the blockchain.\n\n### Transaction List\n\nThe transaction list shows the confirmed transactions on the current blockchain.  You can enter the transaction details page by clicking any of transaction entries.\n\n![](../assets/guiTransaction.png)\n\nYou can view the following information by switching tabs in this page:\n\n- **Transaction**: Displays the basic information of the transaction, such as the block, size, time stamp, as well as the transaction transfer record and the witness of the transaction.\n- **Notifications**: Displays the execution log of the smart contract in the transaction, including information such as whether the NEP-17 transfer was successful.\n\nFor information about the basic concept of transactions refer to [Transaction](../../basic/concept/transaction.md).\n\n## Assets\n\nAll digital assets in Neo N3 are contract assets, including NEO and GAS.\n\n### Asset list\n\nThe Asset list shows all assets on the blockchain, including information such as the asset script hash, precision, and etc.\n\nClick on the specific asset entry to enter the asset details page. Here you can view all transaction records related to the asset.\n", "doc_id": "10fa8027-7237-4a63-8796-d04ade4d9e56", "embedding": null, "doc_hash": "5eef7ad37ef3df5ca6c88025cd000148446ceb6e5c53ac1d8182d2cbc553f5ba", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/blockchain"}, "node_info": {"start": 0, "end": 2719, "_node_type": "1"}, "relationships": {"1": "2cc37aded389f249743904d810d32c3b6deb7e5e"}}, "__type__": "1"}, "a2257ee4-aa08-4ac4-8113-dba0987a5b95": {"__data__": {"text": "---\nsidebar_position: 3\n---\n# Contract\n\nIn the Neo-GUI homepage click **Contract** to enter the contract page, where you can quickly search, deploy, or invoke a contract.\n\n## Searching a contract\n\nIn the search box, you can search for a contract by its contract hash.\n\n![](../assets/guiSearchContract.png)\n\nUpon searching the contract details page is displayed, where you can view the following information:\n\n-  `Contract Hash`: The hash generated by the contract script using the RIPEMD-160 algorithm.\n-  `ID`\uff1aThe serial number of the contract, where negative numbers represent native contracts and positive numbers represent ordinary smart contracts.\n- Contract methods & notifications: methods and events/notifications included in the contract, including the method name, parameter, and returned value details.\n\n## Deploying a contract\n\nTo deploy a contract on the blockchain, open a wallet first and then do the following:\n\n1. Go to the **Deploy Contract** page.\n\n2. Select the nef and manifest files compiled along with the contract previously.\n\n   ![](../assets/guiDeployContract.png)\n\n3. Click `Trial Run` to test running and check the result.\n\n   If something goes wrong, there may be these reasons:\n\n   - The contract already exists\n   - nef file and manifest file do not match\n   - Nef file or manifest error\n   - Insufficient handling fee\n\n4. If the trial run goes successfully, click `Deploy` to confirm the deployment.\n\nAfter the contract is deployed on the blockchain successfully, you can search and invoke the contract with the contract hash.\n\nFor more information refer to [Deploying Smart Contracts](../../develop/deploy/deploy.md).\n\n## Invoking a contract\n\nAfter the contract deployed on the blockchain you can enter the **Invoke** page to invoke the contract.\n\n1. Enter the contract script hash in the search box and click `Search` .\n\n   The methods and parameters included in the current contract are displayed. These information was obtained from the contract manifest file on the blockchain.\n\n2. Select the desired method and fill in the parameters. Suppose we invoke a transfer method in the nep17 standard, fill in the following\uff1a\n\n   + `from`/`to`: Addresses you transfer assets from and to. You can select one of the following data types and enter corresponding string:\n\n     + Address - standard address\n     + Hash160 - endian hash of the address\n     + ByteArray - little endian hash (Base64-encoding) of the address\n\n     You can use the Data Transform tool built in Neo-GUI to convert the wallet address into required string.\n\n     ![](../assets/datatransf_1.png)\n\n   + `amount`\uff1a1*10000 (accuracy)\n\n     When invoking the tranfer method in the nep17 standard, the amount filled in needs to be multiplied by the nep17 accuracy.\n\n   ![](../assets/guiInvokeContract.png)\n\n   + `Cosigners`: (Optional) In case that cosigners are required by some methods when invoked, you need to add one or multiple standard accounts in the Cosigners field.\n\n4. Click `Test Invoke` to test running and check the result.\n\n   A trial run just creates a NeoVM locally and simulates execution. It does not affect the blockchain.\n\n5. If the trial run goes successfully, click `Invoke`.\n\nFor more information refer to [Invoking Smart Contracts](../../develop/deploy/invoke.md).\n\n", "doc_id": "a2257ee4-aa08-4ac4-8113-dba0987a5b95", "embedding": null, "doc_hash": "66e507a363f5264a0a486eab8b3a8403f5abd313dbf2a2850f7eadc88feb57c2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/contract"}, "node_info": {"start": 0, "end": 3284, "_node_type": "1"}, "relationships": {"1": "eb044475b66808a60f7c8c6cf2c5c68b69198c11"}}, "__type__": "1"}, "91c3c885-e725-4097-9673-6417ed76bcd5": {"__data__": {"text": "---\nsidebar_position: 0\n---\n# Installing Neo-GUI\n\nNeo-GUI is a full-node application on the Neo blockchain. It uses Electron cross-platform technology and currently can run on Windows 10 and macOS systems.\n\nIt has these main functions:\n\n- Viewing and searching blockchain information\n- Basic wallet operations, including creating wallets, importing wallets, transferring transactions, etc.\n- Deploying and invoking smart contracts\n- Election and voting consensus nodes\n\n## Downloading the client\n\nNeo-GUI is an open source project, thus you can download the installation package of the corresponding system version on [GitHub](https://github.com/neo-ngd/Neo3-GUI/releases) , and complete the installation according to the prompts.\n\n:::note\n - Make sure your Windows / macOS system has [.NET Core 5.0](https://dotnet.microsoft.com/download/dotnet-core/current/runtime) installed.\n:::\n>\n> - When installing on the Windows system, do not install Neo-GUI under the default path C:\\Program Files, or you have to run the client with the administrator privileges to connect the client to the network and download the blockchain data.\n\n## Connecting to the network\n\nAfter installation Neo-GUI connects to the N3 main net automatically. \n\nTo connect the node to test net, go to any page and click **Settings** in the lower left corner. Then check **Testnet**.\n\nIf you have already built a private chain (see [Setting up private chain](../../develop/network/private-chain/solo.md)), you can also connect Neo-GUI to it.\n\n1. Find the `config.json` file of your private chain.\n\n   Make sure that the address port configured in `config.json` SeedList can be accessed from this machine.\n\n2. Go to the path `resources\\build-neo-node` under Neo-GUI installation directory and find the file `config.private.json`  \n\n3. Replace the content of `config.private.json` with the content of config.json you found in Step 1\n\n4. Run Neo-GUI and go to any page.\n\n5. Click `Settings` in the lower left corner.\n\n6. Under **Network** check `Privatenet`.\n\n   ![](../../assets/guinetwork.png)\n\nAfter a while, when you see the block synchronization data displayed at the top of the main page is increasing, that indicates your client has connected to the network successfully. ", "doc_id": "91c3c885-e725-4097-9673-6417ed76bcd5", "embedding": null, "doc_hash": "0b0d57ea9b05b7749434dd7cff8809d4424a8a596878d025096b454a74fda247", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/install"}, "node_info": {"start": 0, "end": 2243, "_node_type": "1"}, "relationships": {"1": "797c7d2d1d65a5a58d593a0c413a6ce2aae491e1"}}, "__type__": "1"}, "91fb1f8d-da26-4b06-b32a-5866898ea56b": {"__data__": {"text": "---\nsidebar_position: 2\n---\n# Wallet\n\nThe wallet is a database file of Neo-GUI used to store Neo account and asset information in the account. This file is very important and must be properly kept and safely backed up.\n\n:::caution\n\nDo not open or create a wallet on an insecure computer. Once the wallet file or wallet password is lost, it will cause the loss of your assets. So back up your wallet file securely, keep it safe, and remember your wallet password.\n:::\n\n## Creating a wallet\n\n1. In Neo-GUI main page click `Wallet` -> `New Wallet Database`.\n\n2. Select the wallet file storage path, set the file name, and then click `Save`.\n\n3. Enter `Password` and `Re-Password` and save your own password.\n\n4. Click `OK` and the wallet is successfully created, which by default comes with a standard account.\n\n:::warning\n\nAfter the wallet is created, please back up the wallet file safely;\n\nIt is not recommended to save your wallet files directly under the neo-gui root directory, or you may lose your wallet files when upgrading the software.\n:::\n\n## Opening a wallet\n\n1. In Neo-GUI main page click `Wallet` -> `Open Wallet Database`.\n2. Select the wallet and enter the password. Click `OK` to open the wallet.\n\n:::note\n\nThe wallets created in Neo Legacy cannot be opened in Neo3-GUI. To work around this issue you can import the wallet to Neo3-GUI through the private key.\n:::\n\n## Importing a wallet\n\nNeo-GUI supports importing wallets through the private key and encrypted private key. Importing  mnemonics will be supported in the future.\n\n## Account operations\n\n### Viewing account list\n\n![](../assets/guiWallet.png)\n\nAfter creating or opening the wallet, you will go to the account list page, which displays the following information:\n\n- Account list: all account addresses in the wallet, and the number of NEO and GAS in each account.\n\n- Asset list: all asset types and balance in the wallet, including NEO, GAS and other NEP-17 assets, etc.\n\n  The GAS balance shows the amount of GAS claimed, and the Claim GAS button at the bottom of the page shows the amount of unclaimed GAS. To withdraw the GAS into the account, click the button.\n\nClicking on the account address you can enter a new page to view the private key or delete the address.\n\n\n:::caution\n\nAt no point should the private key be disclosed to others. Once the private key is disclosed, it may result in the loss of your assets.\n:::\n\n### Creating addresses\n\nYou can create both standard addresses and multi-signature addresses in a wallet account. A multi-signature address is a contract address composed of multiple public keys, requiring one or more parties to sign to transfer assets. For example, after building a private chain, you need to create a multi-signature address to claim NEO and GAS from the genesis block.\n\nTo create a standard address\uff1a\n\nClick the `+` button beside Accounts and select `Create new address`.\n\nTo create a multi-signature address\uff1a\n\n1. Click the `+` button beside Accounts and select `Create multi-signature address`.\n2. In `Multi-signature pubkeys` field, select public keys or enter multiple public keys directly, and set `Minimum number of signatures`.\n3. Click `Confirm`.\n\n:::note\n\nIf you set multiple signature public keys, you must create the same multi-party signature address in all corresponding wallet accounts so that to successfully complete the signature of the transaction. For more information refer to [Signature](advanced.md).\n:::\n\nThe newly created address is displayed in the account list.\n\n### Importing private key\n\nYou can import the account address corresponding to the private key into the current wallet. To do so, click the `+` button beside Accounts and select `Import private`.\n\n## Viewing transaction list\n\nYou can view all transaction records related to the wallet by clicking the transaction list. This", "doc_id": "91fb1f8d-da26-4b06-b32a-5866898ea56b", "embedding": null, "doc_hash": "20cf726774f0c1099a4381e8afa2edf74a13b62e7b783c478da45d5dcaa18e97", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/wallet"}, "node_info": {"start": 0, "end": 3833, "_node_type": "1"}, "relationships": {"1": "11eac09eb22a2547e33c8d02b9d3d36351543b59", "3": "efaab331-d7e0-4ec9-9aeb-b0ca2347cb86"}}, "__type__": "1"}, "efaab331-d7e0-4ec9-9aeb-b0ca2347cb86": {"__data__": {"text": "can view all transaction records related to the wallet by clicking the transaction list. This includes the confirmed transactions and the transactions that have just been initiated but have not yet been confirmed.\n\n+ **Latest transaction**: Transactions already packaged on the blockchain by consensus nodes\n+ **Unconfirmed transaction**: Transactions waiting to be packaged on the blockchain\n\n## Transfer\n\nIn Neo-GUI, you can do multiple transfers at one time, or bulk transfers from a single address to multiple addresses.\n\n1. In Neo-GUI click `Wallet` -> `Transfer`.\n2. Do one of the following:\n   - Single transfer: enter necessary transfer parameters.\n   - Multiple transfers: click `Add transfer` to add transfer parameters for multiple addresses.\n   - Bulk transfers: Click the `Bulk transfer` tab and then enter necessary parameters.\n3. Click `Send`.\n\nIf the transfer transaction is initiated from a multi-signature address, you will receive a message prompting the signatures are not enough. Copy the information and proceed with the signature procedure to complete the transaction. For more information refer to  [Signature](advanced.md).\n\n![](../assets/sign_1.png)\n\n## Address book\n\nThe address book shows all the addresses in the current wallet.", "doc_id": "efaab331-d7e0-4ec9-9aeb-b0ca2347cb86", "embedding": null, "doc_hash": "c69158e1c531951aa97b631d765403397eba02c28fbf7c28a84398a0e53eb223", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/wallet"}, "node_info": {"start": 3740, "end": 4997, "_node_type": "1"}, "relationships": {"1": "11eac09eb22a2547e33c8d02b9d3d36351543b59", "2": "91fb1f8d-da26-4b06-b32a-5866898ea56b"}}, "__type__": "1"}, "666ff33d-fe65-4159-8bd6-d8b5aa156f88": {"__data__": {"text": "---\nsidebar_label: 'Synchronizing the blockchain faster'\nsidebar_position: 4\n---\n# Synchronizing the blockchain faster\n\nThe client must be fully synchronized before use. In order to speed up network synchronization you can download an offline package of the blockchain data up to a certain block height. This means the client will only need to sync the additional blocks from the Neo network rather than the entire blockchain.\n\n## Step 1 - Download the offline package\n\n1. Close the Neo client and go to [offline synchronized package](https://sync.ngd.network/) downloading page.\n\n2. From the offline package downloading page, click **N3 Mainnet** or **N3 Testnet** according to your network and then download one of the following packages (no need to unzip the package):\n\n   - **Full offline package**: contains the most complete blockchain data. It is applicable to the client running for the first time. The download file is chain.0.acc.zip.\n   - **Increment offline package**: contains data in the range from starting height to ending height of the package. It is applicable to the client which has been synchronized up to the block height within the increment offline package coverage. The download file is chain.xxx.acc.zip, where xxx is the package starting height, e.g. chain.378997.acc.zip.\n\n   ![](./assets/sync_01.png)\n\n## Step 2 - Place the offline package\n\n::warning\n\nYou must not change the default offline package file name (chain.acc.zip or chain.xxx.acc.zip) , otherwise it will not work for synchronization.\n:::\n\nFor Neo-CLI:\n\nPlace the downloaded package (chain.0.acc.zip or chain.xxx.acc.zip) under the Neo-CLI root folder, as shown below:\n\n![](./assets/sync_02.png)\n\nFor Neo-GUI:\n\nPlace the downloaded package (chain.0.acc.zip or chain.xxx.acc.zip) under the Neo-GUI\\resources\\build-neo-node folder, as shown below:\n\n![](./assets/sync_05.png)\n\n## Step 3 - Check the client synchronization status\n\nRun the client again and check the blocks downloading status\uff1a\n\n- For Neo-CLI\uff0center `open wallet <path>` to open a wallet, and then enter `show state` to check the blocks downloading status. When you see the connected nodes is 0 and the synchronizing speed is greatly accelerated, that means the offline package is working. When the connected nodes appear, it indicates the synchronization is completed.\n\n  ![](./assets/sync_03.png)\n\n  ![](./assets/sync_04.png)\n\n- For Neo-GUI, you can see the client is now synchronized faster. \n\n  ![](./assets/sync_06.png)\n\n:::note\n\n- The client cannot be reached during the process when it is synchronizing with the offline package, thus the connected nodes is 0 and you cannot invoke APIs from the client until it has completed synchronization.\n- You can also use the Neo-CLI command `export blocks`, to export the entire blockchain data to a package or export the specified number of block data from the specified block height . For more information, see [CLI Command Line](cli/cli.md).\n:::", "doc_id": "666ff33d-fe65-4159-8bd6-d8b5aa156f88", "embedding": null, "doc_hash": "f078b8ef54c0017f266c1198fe17b41f7836269c9ec991eecddaa592f18e007b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/syncblocks"}, "node_info": {"start": 0, "end": 2946, "_node_type": "1"}, "relationships": {"1": "d1ef957bc11e290dac3716fe4e964b7bda17bafd"}}, "__type__": "1"}, "4060dc18-520b-4e00-a1d8-3506d24ddc3e": {"__data__": {"text": "---\nsidebar_label: 'Overview'\nsidebar_position: 0\nslug: /\n---\n\n# Overview\n\nHere you\u2019ll find documentation to help you build with Neo. Explore these documents to learn about the Neo blockchain at a conceptual level, understand the basics of the Neo technology stack, and drill down further into advanced topics that cover more complex applications and use cases.\nNeo has been an open-source community effort from the beginning. We invite you to contribute your own ideas and knowledge to help Neo continue to improve and evolve. Wherever you see a need, you are welcome to suggest new topics, add your own content, or provide examples. All documentation can be edited via [GitHub.](https://github.com/neo-project/neo-dev-portal)", "doc_id": "4060dc18-520b-4e00-a1d8-3506d24ddc3e", "embedding": null, "doc_hash": "70d5a71d431dce6936f54f15a8a3814c17553194149dff249374bbd72d32ecc3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/overview"}, "node_info": {"start": 0, "end": 727, "_node_type": "1"}, "relationships": {"1": "889b9619c77162b8492f18fbd3bde9bc7002c9a3"}}, "__type__": "1"}, "02206d20-db4a-4f16-802c-0314cf04e817": {"__data__": {"text": "# decimals Method\n\nReturns token decimals.\n\n## Contract\n\n\tNep17Token\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nep17Hash, \"decimals\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"0\"\n}\n```\n\nRespond description:\n\n- Integer type: Token balance is obtained.\n\n- Others: failed.\n", "doc_id": "02206d20-db4a-4f16-802c-0314cf04e817", "embedding": null, "doc_hash": "ffd9404b404a3dbee6525cb391f81743a18d493116263ec3bc21e74ecf41258f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/decimals"}, "node_info": {"start": 0, "end": 333, "_node_type": "1"}, "relationships": {"1": "9ffa64d23dbbcfc718c2e076ea4841d265ca072c"}}, "__type__": "1"}, "de4ce390-ad8f-404e-8343-5b6f6be9f5a2": {"__data__": {"text": "# getBlockedAccounts Method\n\nReturns the blocked accounts.\n\n## Contract\n\n\tPolicyContract\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(policyHash, \"getBlockedAccounts\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"Struct\",\n\t\t\"value\": [{\n\t\t\t\"type\": \"ByteString\",\n\t\t\t\"value\": \"AkuBfvN/L8PUoz/jZoflktnzD\\u002BJLPigYfcjxKzs7K4Oe\"\n\t\t}, {\n\t\t\t\"type\": \"Integer\",\n\t\t\t\"value\": \"0\"\n\t\t}]\n\t}]\n}\n```\n\nRespond description:\n\n- Array type: account address is successfully requested.\n\n- Others: failed.\n", "doc_id": "de4ce390-ad8f-404e-8343-5b6f6be9f5a2", "embedding": null, "doc_hash": "a05230aee2e9ee5f83179f529db8d1daa27b5d2dd9ca5f54f70366557dfba796", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/getBlockedAccounts"}, "node_info": {"start": 0, "end": 554, "_node_type": "1"}, "relationships": {"1": "16b9c5c0493f8bfe727e4e139343a6a4a7aa8da2"}}, "__type__": "1"}, "f306dd82-585f-46cb-aed8-72f5fbaa9fb8": {"__data__": {"text": "# getValidators Method\n\nReturns current validators.\n\n## Contract\n\n\tNeoToken\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(neoHash, \"getValidators\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"Struct\",\n\t\t\"value\": [{\n\t\t\t\"type\": \"ByteString\",\n\t\t\t\"value\": \"AkuBfvN/L8PUoz/jZoflktnzD\\u002BJLPigYfcjxKzs7K4Oe\"\n\t\t}, {\n\t\t\t\"type\": \"Integer\",\n\t\t\t\"value\": \"0\"\n\t\t}]\n\t}]\n}\n```\n\nRespond description:\n\n- Array type: current validators are successfully requested.\n\n- Others: failed.\n", "doc_id": "f306dd82-585f-46cb-aed8-72f5fbaa9fb8", "embedding": null, "doc_hash": "9d952c04722d417329d3759d9ac3aa594a9bdf67c25009b5ca64d075e7599997", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/getValidators"}, "node_info": {"start": 0, "end": 537, "_node_type": "1"}, "relationships": {"1": "46a4ba4c245feecd6aa2ad2a02f14b35aa203ce7"}}, "__type__": "1"}, "77d77d2d-6637-4beb-a4c6-b0db26fedc66": {"__data__": {"text": "---\nsidebar_label: 'Governance API'\nsidebar_position: 0\n---\n\n# Governance API\n\n## Candidates\n\nThere is no duty assigned to candidates. However, committee members and consensus nodes are elected from certain number of candidates with most votes. \n\n#### How to Become a Candidate\n\nAn address can be registered as candidate or unregistered afterwards. Corresponding contract methods are as follows:\n\n| Method | Parameters | Fee in GAS |\n| ---- | ------------------------------------ | ---- |\n| [`RegisterCandidate`](../smart_contract_api/framework/native/Neo/RegisterCandidate) | ECPoint publicKey | Adjustable, initially 0.00001 |\n| [`UnregisterCandidate`](../smart_contract_api/framework/native/Neo/UnregisterCandidate) | ECPoint publicKey | 0.00065536 (CpuFee) |\n\n:::note\nRegistering / unregistering candidate requires signature. It means candidate registering / unregistering is only self-determined. \n:::\n\n#### Candidate Voting \n\nEvery address has the right to vote to only one address (whether or not it's a candidate). Candidate's received votes are defined as the sum of NEO held by its voter. Every standby committee member will vote to itself in genesis block. \n\nVoting contract method is as follows. Please not that voter's signature will be checked. \n\n| Method | Parameters | Fee in GAS |\n| ---- | ------------------------------------ | ---- |\n| [`Vote`](../smart_contract_api/framework/native/Neo/Vote) | UInt160 account, byte[] voteTo | 0.00065536 (CpuFee) |\n\nAs voters' votes & held NEO, as well as registered candidates keep changing, candidate set and their votes are re-calculated in every block.\n\n| Method | Parameters | Fee in GAS |\n| ---- | ------------------------------------ | ---- |\n| [`GetCandidates`](../smart_contract_api/framework/native/Neo/GetCandidates) | null | 0 |\n\n## Committee\n\n#### Function & Scope\n\nCommittee members have the privilege to modify the configuration of Neo network by voting, including:\n\n* Role designation\n* Set fee per byte for network transmission\n* Set execution fee (CpuFee) factor\n* Set storage price\n* Block / unblock account\n* Set Oracle service price\n* Set gas released per block\n* Set fee to register a candidate\n* Add NNS root\n* Set the NNS registration/renewal fee\n* Update the NNS contract\n* Set minimum fee for contract deployment\n\nMethod definition and corresponding fee are defined in PolicyContract as shown below:\n\n| Method | Parameters | Fee in GAS | Contract |\n| ---- | ------------------------------------ | ---- | ---- |\n| DesignateAsRole | Role role, ECPoint[] nodes | 0.00032768 (CpuFee) | RoleManagement |\n| SetFeePerByte | long value | 0.00032768 (CpuFee) | PolicyContract |\n| SetExecFeeFactor | uint value | 0.00032768 (CpuFee) | PolicyContract |\n| SetStoragePrice | uint value | 0.00032768 (CpuFee) | PolicyContract |\n| SetPrice | long price | 0.00032768 (CpuFee) | OracleContract |\n| SetGasPerBlock | BigInteger gasPerBlock | 0.00032768 (CpuFee) | NeoToken |\n| SetRegisterPrice | long registerPrice | 0.00032768 (CpuFee) | NeoToken |\n| AddRoot | string root | 0.00032768 (CpuFee) | NameService |\n| SetPrice | long price | 0.00032768 (CpuFee) | NameService |\n| Update | ByteString nef, string manifest | StoragePrice * (nefFile.Length + manifest.Length) | NameService |\n| SetMinimumDeploymentFee | BigInteger value | 0.00032768 (CpuFee) | ContractManagement |\n\nTo bring such modification into effect, committee members should send a transaction which calls corresponding method & includes enough", "doc_id": "77d77d2d-6637-4beb-a4c6-b0db26fedc66", "embedding": null, "doc_hash": "3237cb58d194af89390f7f51e86aeabb16f208229abd019549018b206a4fb3bb", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/index"}, "node_info": {"start": 0, "end": 3472, "_node_type": "1"}, "relationships": {"1": "750b85fd97a0685bc3c20ecc254941239e7bbabe", "3": "0793f403-f6c3-43d3-8a2b-015377a8fb47"}}, "__type__": "1"}, "0793f403-f6c3-43d3-8a2b-015377a8fb47": {"__data__": {"text": "into effect, committee members should send a transaction which calls corresponding method & includes enough signatures on chain. This transaction is executed as long as it's signed by more than half of the committee members.\n\nFurthermore, corresponding reading methods are also supported:\n\n| Method | Parameters | Fee in GAS | Contract |\n| ---- | ------------------------------------ | ---- | ---- |\n| [`GetDesignatedByRole`](../smart_contract_api/framework/native/RoleManagement/GetDesignatedByRole) | Role role, uint index | 0.00032768 (CpuFee) | RoleManagement |\n| [`GetFeePerByte`](../smart_contract_api/framework/native/Policy/GetFeePerByte) | null | 0.00032768 (CpuFee) | PolicyContract |\n| GetExecFeeFactor | null | 0.00032768 (CpuFee) | PolicyContract |\n| GetStoragePrice | null | 0.00032768 (CpuFee) | PolicyContract |\n| [`IsBlocked`](../smart_contract_api/framework/native/Policy/IsBlocked) | UInt160 account | 0.00032768 (CpuFee) | PolicyContract |\n| GetPrice | null | 0.00032768 (CpuFee) | OracleContract |\n| [`GetGasPerBlock`](../smart_contract_api/framework/native/Neo/GetGasPerBlock) | null | 0.00032768 (CpuFee) | NeoToken |\n| GetRegisterPrice | null | 0.00032768 (CpuFee) | NeoToken |\n| GetMinimumDeploymentFee | null | 0.00032768 (CpuFee) | ContractManagement |\n\n#### How are committee members elected\n\n1. Sort the registered candidates by votes\n2. Take certain numbers of candidates (21 by default) with the most votes as committee members.\nCommittee members are refreshed every 21 blocks.\n\n#### Corresponding contract method\n\n| Method | Parameters | Fee in GAS | Return value |\n| ---- | ------------------------------------ | ---- | ---- |\n| [`GetCommittee`](../smart_contract_api/framework/native/Neo/GetCommittee) | null | 0.04194304 (CpuFee) | Current committee members in format of ECPoint[] |\n\n## Consensus Nodes\n\n#### Function & Scope\n\nConsensus nodes are nodes which are able to start or vote to new block proposals. \n\n#### How are consensus nodes elected\n\n1. Sort the registered candidates by votes\n2. Take certain numbers of candidates (7 by default) with the most votes as consensus nodes.\nSimilar to committee members, consensus nodes are refreshed every 21 blocks.\n\n#### Corresponding contract method\n\n| Method | Parameters | Fee in GAS | Return value |\n| ---- | ------------------------------------ | ---- | ---- |\n|  [`GetNextBlockValidators`](../smart_contract_api/framework/native/Neo/GetNextBlockValidators)  | null | 0.04194304 (CpuFee) | Consensus nodes by persisting block in format of ECPoint[] |\n\n## Token Distribution\n\nTotal NEO amount, or 100 million tokens are distributed in genesis block to standby consensus nodes' multi-signature address.\n\nAll interactions in Neo are performed through transactions. Sending a transaction on chain requires paying GAS tokens as fee, including system fee and network fee. System fee will be burnt as resource consumption for transaction execution, while network fee will be distributed to the speaker (the consensus node who starts a new-block proposal) of the block where corresponding transaction is included.\n\n## Nep17 Contract Method\n\nNEO and GAS are [Nep17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) contracts. Nep17 contract methods are as follows:\n\n| Method | Parameters | Fee in GAS | Result |\n| ---- | ---- | ---- | ---- |\n| [`symbol`](symbol)  | null | 0 | Token symbol in String |\n| ", "doc_id": "0793f403-f6c3-43d3-8a2b-015377a8fb47", "embedding": null, "doc_hash": "20f6c21889e8dcc6f9b18c0015baecd11fea3bd99735600b77ee2bebbacfcb12", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/index"}, "node_info": {"start": 3380, "end": 6784, "_node_type": "1"}, "relationships": {"1": "750b85fd97a0685bc3c20ecc254941239e7bbabe", "2": "77d77d2d-6637-4beb-a4c6-b0db26fedc66", "3": "767602ac-a341-4692-9e46-becd5d9d8855"}}, "__type__": "1"}, "767602ac-a341-4692-9e46-becd5d9d8855": {"__data__": {"text": " | null | 0 | Token symbol in String |\n|  [`decimals`](decimals)  | null | 0 | Token decimals in UInt |\n| [`TotalSupply`](../smart_contract_api/framework/native/Neo/TotalSupply) | null | 0.00032768 (CpuFee) | Token total supply in BigInteger |\n| [`BalanceOf`](../smart_contract_api/framework/native/Neo/BalanceOf) | UInt160 account | 0.00032768 (CpuFee) | account balance in BigInteger |\n| [`Transfer`](../smart_contract_api/framework/native/Neo/Transfer) | UInt160 from, UInt160 to, BigInteger amount | 0.00131072 (CpuFee) + 0.0000005 (StorageFee) | Send specified amount of token from Address *from* to Address *to*. Please note that it will check *from*'s signature, whether caller is *from*, whether *to* is payable, whether *from*'s balance is enough |\n\nContract methods by NEO:\n\n| Method | Parameters | Fee in GAS | Return value |\n| ---- | ------------------------------------ | ---- | ---- |\n| [`UnclaimedGas`](../smart_contract_api/framework/native/Neo/UnclaimedGas) | UInt160 account | 0.00131072 (CpuFee) | unclaimed GAS amount of this address in uint |", "doc_id": "767602ac-a341-4692-9e46-becd5d9d8855", "embedding": null, "doc_hash": "73189de50e9a4238eedb5590c876655f6ee44e438319cdce731a4eb098a31a33", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/index"}, "node_info": {"start": 6836, "end": 7899, "_node_type": "1"}, "relationships": {"1": "750b85fd97a0685bc3c20ecc254941239e7bbabe", "2": "0793f403-f6c3-43d3-8a2b-015377a8fb47"}}, "__type__": "1"}, "2d18d82b-d42e-46c2-b5ac-4feb800a7244": {"__data__": {"text": "# name Method\n\nReturns contract name.\n\n## Contract\n\n\tNativeContract\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nativeHash, \"name\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"ByteString\",\n\t\"value\":\"NEO\"\n}\n```\n\nRespond description:\n\n- ByteString type: contract name is successfully requested.\n\n- Others: failed.\n", "doc_id": "2d18d82b-d42e-46c2-b5ac-4feb800a7244", "embedding": null, "doc_hash": "42e1fd0f61cf89c336c3b20ae51e6767b093b1acf3e9c65ed31fc99e7c24c472", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/name"}, "node_info": {"start": 0, "end": 351, "_node_type": "1"}, "relationships": {"1": "42423117fffa4424452f942f8c1ae359fa66b585"}}, "__type__": "1"}, "a1c7a293-dff1-45e3-a7e4-28a99c282800": {"__data__": {"text": "# onPersist Method\n\nManually performs actions the Nep17 contract will do upon block persisting.\n\n## Contract\n\n\tNativeContract\n\n## Parameters\n\nRequest content:\n\n```json\nvar result = Contract.Call(nativeHash, \"onPersist\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"Void\",\n\t\"value\":\"NULL\"\n}\n```\n\nRespond description:\n\n- Void type: The method is successfully performed.\n\n- Others: failed.\n", "doc_id": "a1c7a293-dff1-45e3-a7e4-28a99c282800", "embedding": null, "doc_hash": "471067d260b58592a4d08cfb2fdc3cc7c093a51e2561783e5cd4ebf8f157547c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/onPersist"}, "node_info": {"start": 0, "end": 403, "_node_type": "1"}, "relationships": {"1": "07dabe8745e40a791294aae16fe02e8a326e90ac"}}, "__type__": "1"}, "a928ffe0-3e66-4008-9d15-02e1ba13f2e5": {"__data__": {"text": "# supportedStandards Method\n\nReturns supported NEP standards.\n\n## Contract\n\n\tNativeContract\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nativeHash, \"supportedStandards\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"NEP-5\"\n\t}, {\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"NEP-10\"\n\t}]\n}\n```\n\nRespond description:\n\n- Array type: supported NEP standards successfully requested.\n\n- Others: failed.\n", "doc_id": "a928ffe0-3e66-4008-9d15-02e1ba13f2e5", "embedding": null, "doc_hash": "33eecfa5a0f05f06ea1e7f973a954b8edde698d322e783d19848f26b4b63aa3c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/supportedStandards"}, "node_info": {"start": 0, "end": 482, "_node_type": "1"}, "relationships": {"1": "1038dbd099dc82010c7137a160e6ac18060a48d4"}}, "__type__": "1"}, "6cf79918-2e6a-4381-8cbe-2b7adb0bce36": {"__data__": {"text": "# symbol Method\n\nReturns token symbol.\n\n## Contract\n\n\tNep17Token\n\n## Example\n\nRequest content:\n\n```json\nvar result = Contract.Call(nep17Hash, \"symbol\", new object[] { });\n```\n\nRespond content:\n\n```json\n{\n\t\"Type\":\"ByteString\",\n\t\"value\":\"neo\"\n}\n```\n\nRespond description:\n\n- ByteString type: token symbol is successfully requested.\n\n- Others: failed.\n", "doc_id": "6cf79918-2e6a-4381-8cbe-2b7adb0bce36", "embedding": null, "doc_hash": "ebfa77faa84e620db37741fe5d64944123fd528fe73552ec16ba3ba2e9ca3092", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/symbol"}, "node_info": {"start": 0, "end": 348, "_node_type": "1"}, "relationships": {"1": "4cd0931c2ded02ae30ac96be7562e43523167826"}}, "__type__": "1"}, "85f34045-2191-492d-b849-85c5b96e8adb": {"__data__": {"text": "# API Reference\n\nEach NEO-CLI node provides an API interface for obtaining blockchain data from it, making it easy to develop blockchain applications. The interface is provided via [JSON-RPC](http://wiki.geekdream.com/Specification/json-rpc_2.0.html), and the underlying protocol uses HTTP/HTTPS for communication. \n\nTo start a node that provides an RPC service, you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases). Refer to [Installing plugins](../../../node/cli/config.html#installing-plugins) for instructions. No need to add an argument when starting Neo-CLI.\n\n:::note\n\nIf the desired version of file is not found during installation, it is because the corresponding version of RpcServer plug-in has not been released yet. In that case, you can compile the project [neo-modules](https://github.com/neo-project/neo-modules) by yourself:\n\n1. Create the folder Plugins under the directory where neo-cli.dll locates.\n2. Put the RpcServer file you has complied in the Plugins folder and then restart Neo-CLI.\n:::\n## Listening ports\n\nAfter the JSON-RPC server is started, it will listen to the TCP port. By default it is the port 10332 of the local address (127.0.0.1), which is\n\n```\nhttp://127.0.0.1:10332/\n```\n\nYou can modify the port in config.json in the RpcServer folder.\n\n## Command Lists\n\n### Blockchain\n\n| Method                                        | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getbestblockhash](api/getbestblockhash.md) |                                          | Gets the hash of the latest block in the blockchain. |\n| [getblock](api/getblock.md)              | <hash \\| index\\> [verbose=0]                  | Returns the block information with the specified hash value or index. |\n| [getblockcount](api/getblockcount.md)    |                                          | Gets the block count of the blockchain. |\n| [getblockhash](api/getblockhash.md)      | <index\\>                                 | Returns the block hash with the specified index. |\n| [getblockheader](api/getblockheader.md) | <hash \\| index\\> [verbose=0] | Returns the information of the block header with the specified script hash or index. |\n| [getcommittee](api/getcommittee.md) | | Gets the public key list of current Neo committee members. |\n| [getnativecontracts](api/getnativecontracts.md)         |                              | Gets the list of native contracts.    |\n| [getnextblockvalidators](api/getnextblockvalidators.md) |    ", "doc_id": "85f34045-2191-492d-b849-85c5b96e8adb", "embedding": null, "doc_hash": "5e473a11e5b5362572282bc873731facbe292f49e3facb56096f66a3af5514e4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api"}, "node_info": {"start": 0, "end": 2704, "_node_type": "1"}, "relationships": {"1": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60", "3": "5f1206f1-c8c2-4b99-88f7-1790d5de3b50"}}, "__type__": "1"}, "5f1206f1-c8c2-4b99-88f7-1790d5de3b50": {"__data__": {"text": "|                              | Gets the validators list of the next block. |\n| [getcontractstate](api/getcontractstate.md) | <script_hash\\>                           | Returns information of the contract with the specified script hash. |\n| [getrawmempool](api/getrawmempool.md)    | [shouldGetUnverified=0]         | Gets a list of confirmed transactions in memory. If the value is 1 it gets all the transactions including both confirmed and unconfirmed transactions. |\n| [getrawtransaction](api/getrawtransaction.md) | <txid\\> [verbose=0]                      | Returns the transaction information with the specified hash value. |\n| [getstorage](api/getstorage.md)          | <script_hash\\>  <key\\>                   | Returns the value with the contract script hash and the key. |\n| [gettransactionheight](api/gettransactionheight.md) | <txid\\> | Returns the transaction height with the specified transaction hash. |\n\n\n### Node\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getconnectioncount](api/getconnectioncount.md) |                                          | Gets the current connection count of the node. |\n| [getpeers](api/getpeers.md)              |                                          | Gets a list of nodes that are currently connected/disconnected by this node. |\n| [getversion](api/getversion.md)          |                                          | Gets the version information of the node. |\n| [sendrawtransaction](api/sendrawtransaction.md) | <hex\\> | Broadcasts a transaction over the network. |\n| [submitblock](api/submitblock.md) | <hex\\> | Submits a new block to the network.<br/\\>**Note**: Need to be a validator |\n\n### Smart Contract\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getunclaimedgas](api/getunclaimedgas.md) | <address\\> | Get unclaimed gas of the specified address. |\n| [invokefunction](api/invokefunction.md) | <script_hash\\>  <operation\\> ", "doc_id": "5f1206f1-c8c2-4b99-88f7-1790d5de3b50", "embedding": null, "doc_hash": "7e80bcf07b8e94d1d40fc0219596040ac3da65f2a68463b3c6ce0b5f056d77df", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api"}, "node_info": {"start": 2704, "end": 5134, "_node_type": "1"}, "relationships": {"1": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60", "2": "85f34045-2191-492d-b849-85c5b96e8adb", "3": "ed6e52a8-80db-4f56-9dda-7283ba8b143a"}}, "__type__": "1"}, "ed6e52a8-80db-4f56-9dda-7283ba8b143a": {"__data__": {"text": "| <script_hash\\>  <operation\\>  \\[params] \\[sender] \\[signers] | Invokes a smart contract with the specified script hash, passing in the method name and its params. |\n| [invokescript](api/invokescript.md) | <script\\> \\[sender] \\[signers] | Runs a script through the virtual machine and returns the results. |\n\n### Tool\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [listplugins](api/listplugins.md) | | Returns a list of plugins loaded by the node. |\n| [validateaddress](api/validateaddress.md) | <address\\>                              | Verifies whether the address is a valid NEO address. |\n\n### Wallet\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [calculatenetworkfee](api/calculatenetworkfee.md) | <tx\\> | Calculates network fee for the specified transaction. |\n| [closewallet](api/closewallet.md) |  | Closes the current wallet. |\n| [dumpprivkey](api/dumpprivkey.md) | <address\\>                              | Exports the private key of the specified address. |\n| [getnewaddress](api/getnewaddress.md) |  | Creates a new address. |\n| [getwalletbalance](api/getwalletbalance.md) | <asset_id\\> | Returns the balance of the corresponding asset in the wallet. |\n| [getwalletunclaimedgas](api/getwalletunclaimedgas.md) |  | Gets the amount of unclaimed GAS in the wallet. |\n| [importprivkey](api/importprivkey.md) | <key\\> | Imports the private key to the wallet. |\n| [invokecontractverify](api/invokecontractverify.md) | <script_hash\\>   \\[params] \\[signers] | Invokes the verification method of contract. |\n| [listaddress](api/listaddress.md) |  | Lists all the addresses in the current wallet. |\n| [openwallet](api/openwallet.md) | <path\\> <password\\> | Opens the specified wallet. |\n| [sendfrom](api/sendfrom.md) | <asset_id\\><from\\><to\\><value\\> | Transfers from the specified address to the destination address. |\n| [sendmany](api/sendmany.md) | <outputs_array\\> \\[signers] | Initiates multiple transfers to multiple addresses in a transaction. |\n| [sendtoaddress](api/sendtoaddress.md) | <asset_id\\><address\\><value\\> \\[signers] | Transfers to the specified address. |\n\n### ApplicationLogs plugin\n\n| Method                    ", "doc_id": "ed6e52a8-80db-4f56-9dda-7283ba8b143a", "embedding": null, "doc_hash": "a77a0bbb8965880e81525bf3ddea9d35c105a21e7f16a8a82150214828318827", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api"}, "node_info": {"start": 5109, "end": 7785, "_node_type": "1"}, "relationships": {"1": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60", "2": "5f1206f1-c8c2-4b99-88f7-1790d5de3b50", "3": "f1c15372-95ec-4343-b1ca-72b01d045b53"}}, "__type__": "1"}, "f1c15372-95ec-4343-b1ca-72b01d045b53": {"__data__": {"text": "                                      | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getapplicationlog](api/getapplicationlog.md) | <txid\\> | Returns the contract event information based on the specified txid. |\n\n### TokensTracker plugin\n\n| Method                                       | Parameter                              | Description                                                  |\n| --------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |\n| [getnep11balances](api/getnep11balances.md) | <address\\> | Returns the balance of all NEP11 assets in the specified address. |\n| [getnep11properties](api/getnep11properties.md) | <contract_hash\\><tokenId\\> | Returns the customized properties of NEP-11 assets. |\n| [getnep11transfers](api/getnep17transfers.md) | <address\\>[timestamp] | Returns all the NEP11 transaction information occurred in the specified address. |\n| [getnep17balances](api/getnep17balances.md) | <address\\> | Returns the balance of all NEP17 assets in the specified address. |\n| [getnep17transfers](api/getnep17transfers.md) | <address\\>[timestamp] | Returns all the NEP17 transaction information occurred in the specified address. |\n\n### StateService plugin\n\n| Method                                  | Parameter                                       | Description                                                  |\n| --------------------------------------- | ----------------------------------------------- | ------------------------------------------------------------ |\n| [getstateroot](api/getstateroot.md)     | <index\\>                                        | Queries the state root by the block height.                  |\n| [getproof](api/getproof.md)             | <roothash\\><scripthash\\><key\\>                  | Gets proof by querying root hash, contract hash, and storage key. |\n| [verifyproof](api/verifyproof.md)       | <roothash\\><proof\\>                             | Verifies using the root hash and proof, and gets the value of the storage corresponding to the key. |\n| [getstateheight](api/getstateheight.md) |                                          ", "doc_id": "f1c15372-95ec-4343-b1ca-72b01d045b53", "embedding": null, "doc_hash": "4c80cf6a990d2ea7a0fb77ce0e7e351bbf7a76c8f8af29c939580d86878c49f8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api"}, "node_info": {"start": 7813, "end": 10234, "_node_type": "1"}, "relationships": {"1": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60", "2": "ed6e52a8-80db-4f56-9dda-7283ba8b143a", "3": "b201d89e-c80b-42dc-8799-4623bbaae95e"}}, "__type__": "1"}, "b201d89e-c80b-42dc-8799-4623bbaae95e": {"__data__": {"text": "                          | Queries the stateroot height.                                |\n| [getstate](api/getstate.md)             | <roothash\\><scripthash\\><key\\>                  | Queries `state` with the `root hash`, `contract hash` and `storage key`. |\n| [findstates](api/findstates.md)         | <roothash\\><scripthash\\><prefix\\> [key] [count] | Queries `state` with the prefix of `root hash`, `contract hash` and `storage key`. |\n\n:::note\n\nFor RPC API, all the return values related to the amount such as fees, NEP-17 asset balance, wallet balance, transfer amount, etc. are unsigned integer, which are automatically converted according to the asset decimal when requested by [RpcClient](https://github.com/neo-project/neo-modules/tree/master/src/RpcClient) (C# light node SDK). If you write the request by yourselves, you need to convert the amount manually. For example, if the return value is 1234560 and the asset decimal is 8, the  actual amount is 0.0123456.\n:::\n## GET request example\n\nThe format of a typical JSON-RPC GET request is as follows:\n\nHere is an example of how to get the number of blocks in the block chain.\n\nRequest URL:\n\n```\nhttp://127.0.0.1:10332?jsonrpc=2.0&method=getblockcount&params=[]&id=1\n```\n\nAfter sending the request, you will get the following response:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": 909129\n}\n```\n\n## POST request example\n\nThe format of a typical JSON-RPC Post request is as follows:\n\nHere is an example of how to get the number of blocks in the block chain.\n\nRequest URL:\n\n```\nhttp://127.0.0.1:10332\n```\n\nRequest Body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockcount\",\n  \"params\":[],\n  \"id\": 1\n}\n```\n\nAfter sending the request, you will get the following response\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": 909122\n}\n```\n\n:::note\nTo make sure you get the latest result synchronize your client to the latest block height before you use the API.\n:::\n## Test tools\n\nYou can use the Chrome extension in Postman to facilitate the test (Installation of the Chrome extension requires Internet connection). A test screenshot is shown below:\n\n![image](../../../assets/api_3.jpg)\n\n## See also\n\n[C# JSON-RPC Command List](https://github.com/chenzhitong/CSharp-JSON-RPC/blob/master/json_rpc/Program.cs)\n", "doc_id": "b201d89e-c80b-42dc-8799-4623bbaae95e", "embedding": null, "doc_hash": "bb6bd310ead3a39f5f9810278640b4f19e038f8b77aa65129d0122346ea5409f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api"}, "node_info": {"start": 10215, "end": 12494, "_node_type": "1"}, "relationships": {"1": "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60", "2": "f1c15372-95ec-4343-b1ca-72b01d045b53"}}, "__type__": "1"}, "ba0cb4c3-f875-42c5-84ef-732a232ce0be": {"__data__": {"text": "# calculatenetworkfee Method\n\nCalculates network fee for the specified transaction.\n\n:::note\n Before you can invoke this method you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases).\n:::\n\n## Parameter Description\n\ntx: Base64-encoded string of transaction information.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"calculatenetworkfee\",\n  \"params\": [\"AAzUzgl2c4kAAAAAAMhjJAAAAAAAmRQgAAKDHlc9J/rM4KzhpixYX/fRkt2q8ACBubhEJKzaXrq9mt5PesW40qC01AEAXQMA6HZIFwAAAAwUgx5XPSf6zOCs4aYsWF/30ZLdqvAMFIG5uEQkrNpeur2a3k96xbjSoLTUE8AMCHRyYW5zZmVyDBS8r0HWhMfUrW7g2Z2pcHudHwyOZkFifVtSOAJCDED0lByRy1/NfBDdKCFLA3RKAY+LLVeXAvut42izfO6PPsKX0JeaL959L0aucqcxBJfWNF3b+93mt9ItCxRoDnChKQwhAuj/F8Vn1i8nT+JHzIhKKmzTuP0Nd5qMWFYomlYKzKy0C0GVRA14QgxAMbiEtF4zjCUjGAzanxLckFiCY3DeREMGIxyerx5GCG/Ki0LGvNzbvPUAWeVGvbL5TVGlK55VfZECmy8voO1LsisRDCEC6P8XxWfWLydP4kfMiEoqbNO4/Q13moxYViiaVgrMrLQRC0ETje+v\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"networkfee\": \"23848400\"\n    }\n}\n\n```\n", "doc_id": "ba0cb4c3-f875-42c5-84ef-732a232ce0be", "embedding": null, "doc_hash": "07858c317292d6db431c96a35809cb9c270625ded35eab7b6ef06bbf8d3cb6bd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/calculatenetworkfee"}, "node_info": {"start": 0, "end": 1070, "_node_type": "1"}, "relationships": {"1": "f02f959a7b56582f83e37d09f74ad8ddbe001b1f"}}, "__type__": "1"}, "d9f03a72-d0fc-489e-9f40-b7f41d13473e": {"__data__": {"text": "# closewallet Method\n\nCloses the current wallet.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"closewallet\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}\n```\n\nResponse Description:\n\ntrue: The wallet is closed successfully.\nOthers: failure", "doc_id": "d9f03a72-d0fc-489e-9f40-b7f41d13473e", "embedding": null, "doc_hash": "a9671b9f4e6a7a823f4c772c806c02a16dde298d4f54a7c43b54219c077ed402", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/closewallet"}, "node_info": {"start": 0, "end": 547, "_node_type": "1"}, "relationships": {"1": "03aa45d702a3216e47305791ed69e661667f4654"}}, "__type__": "1"}, "17236dee-c74c-4d22-bcc6-5ce8ef5b480b": {"__data__": {"text": "\ufeff# dumpprivkey Method\n\nExports the private key of the specified address.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n### Parameter Description\n\naddress: To export the addresses of the private key. The address is required as a standard address.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"dumpprivkey\",\n  \"params\": [\"NepVckSSgHJf1szQ6LEibd5NU7Ap67yJrJ\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"L5LEfSAAbVAk5vxmkBpWQqJ2e1hyh3nEqgWaosB35XpBAkZdizj4\"\n}\n```\n\nResponse Description:\n\nReturns the private key of the standard address.", "doc_id": "17236dee-c74c-4d22-bcc6-5ce8ef5b480b", "embedding": null, "doc_hash": "14b32807ab6201de79b655dedbd194082ab678248d7bc5318fb789e8c8c926b3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/dumpprivkey"}, "node_info": {"start": 0, "end": 777, "_node_type": "1"}, "relationships": {"1": "df13a00bd30c2471a31a32e8f7039d3b4a381f49"}}, "__type__": "1"}, "152768d7-52e0-4040-8232-8b2d7c637fe8": {"__data__": {"text": "# findstates Method\n\nQueries the desired state by the root hash, contract hash and storage key prefix.\n\n:::note\n You must install the plugin  [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameters\n\n- roothash: The root hash of state root.\n\n- scripthash: The contract hash\u3002\n\n- prefix: The prefix of storage key, Base64-encoded.\n\n- key: Optional. Returns the Base64-encoded key at the start of the result, with no information about the key in the result, but the result after the key.\n\n- count: Optional. The count of returned items. \n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"findstates\",\n  \"params\": [\"0xec31cdb14da4143e2ab471a8b5812d895b88fc1c12d54e112791491feca9b5f4\",\"0xb1fbb6b0096919071769906bb23b2ca2ec51eea7\",\"AQE=\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"firstProof\": \"GgEAAAABAUzxBIiQG4dVg53aSJGZBdc4jzffBlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJwwPAQAECAgJAAELCAcFBQgDCQ0NCgQICQEJCQAFDQcDCAgPAwcNDwPqBPR7WXK0bOm5grD7JqZG1o8ymVny67eCX22yIybAzAYCBJzCeAE=\",\n        \"lastProof\":", "doc_id": "152768d7-52e0-4040-8232-8b2d7c637fe8", "embedding": null, "doc_hash": "645b2627279a0b1854694bebb67d39db4fc949b07cae6531ea8459e1c992fb4c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/findstates"}, "node_info": {"start": 0, "end": 1612, "_node_type": "1"}, "relationships": {"1": "7fdc2d78b7087b57a0b5d18019bede1a4e777967", "3": "38856902-9c3b-40ce-8f47-7d1bf85f7a74"}}, "__type__": "1"}, "38856902-9c3b-40ce-8f47-7d1bf85f7a74": {"__data__": {"text": "       \"lastProof\": \"GgEAAAABAe7wFiVtSpzngy2v5Lv6LQCPkn8uBlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJw4PAAEGAgUGDQQKCQwOBwgDAg0KDw4ECwsPCgINAAAIDwkCBw8CDgOpMv0n0GGU2BoUUydwQJcc1bzfrOCWmTdbjX56GFcBagcCBZzq4+8A\",\n        \"truncated\": false,\n        \"results\": [\n            {\n                \"key\": \"AQFM8QSIkBuHVYOd2kiRmQXXOI833w==\",\n                \"value\": \"nMJ4AQ==\"\n            },\n            {\n                \"key\": \"AQFmmdXxSKUGNq3wQcppLAdAe8sD+g==\",\n                \"value\": \"yGJI4+cA\"\n            },\n            {\n                \"key\": \"AQHu8BYlbUqc54Mtr+S7+i0Aj5J/Lg==\",\n                \"value\": \"nOrj7wA=\"\n            }\n        ]\n    }\n}\n```\n\nRequest body:\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"findstates\",\n  \"params\": [\"0xec31cdb14da4143e2ab471a8b5812d895b88fc1c12d54e112791491feca9b5f4\",\"0xb1fbb6b0096919071769906bb23b2ca2ec51eea7\",\"AQE=\",\"AQFM8QSIkBuHVYOd2kiRmQXXOI833w==\",2],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n  ", "doc_id": "38856902-9c3b-40ce-8f47-7d1bf85f7a74", "embedding": null, "doc_hash": "67f8532dfd5e24bd0a8c3384705d1562514618e46bf4924b85f309c9ca59c9db", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/findstates"}, "node_info": {"start": 1601, "end": 2991, "_node_type": "1"}, "relationships": {"1": "7fdc2d78b7087b57a0b5d18019bede1a4e777967", "2": "152768d7-52e0-4040-8232-8b2d7c637fe8", "3": "2b11150e-c93b-446e-a865-f3500f6c9aaf"}}, "__type__": "1"}, "2b11150e-c93b-446e-a865-f3500f6c9aaf": {"__data__": {"text": "   \"id\": 1,\n    \"result\": {\n        \"firstProof\": \"GgEAAAABAWaZ1fFIpQY2rfBBymksB0B7ywP6BlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJwYJCQ0FDwEECAoFAAYDBgoNDwAEAQwKBgkCDAAHBAAHCwwLAAMPCgOdJYDatk7lvSUyTBhr0mRtcpdMQNr3JtRyjRD2dEjxpwgCBshiSOPnAA==\",\n        \"lastProof\": \"GgEAAAABAe7wFiVtSpzngy2v5Lv6LQCPkn8uBlIAA1GZMg/ZG96bUUsFRwyZwD2mw/kkKd2sO8mj7AKs5yqSBAQEBAQEBAQEBAQEBAQD7/elUnvysLKgzT96xy6wwZj/emziL98I1kf1UZgNIsYELQEKAQAAAAAAAAABAAO32triSNLXJubm+sBN+lbYosN3ykl8iVUmREj0hO1Nz1IABAPvApR7HUrwQUO/FoEXpWnHnHz2vpsMk8DT2doV1Nwh4APoOjR3pJ5Jj/b9thBymJT96iVJNfZdb96z4YvP/3ZEuQQEBAQEBAQEBAQEBAQEcgAEBAQEAwAYKOMRzay9vdMnNqVdYCCprUSQAEgueNtFRhLxHcJeBAPKdsd3M5d1JSsULlc92k9tg9XpPUcGYzHY+jSRwlM+RwQEBAQEBAQDb3OGKsDYwWrvEw3gfTb9UipoBFZ9I8pYS8ntV4wAM6oEBEoBJw4PAAEGAgUGDQQKCQwOBwgDAg0KDw4ECwsPCgINAAAIDwkCBw8CDgOpMv0n0GGU2BoUUydwQJcc1bzfrOCWmTdbjX56GFcBagcCBZzq4+8A\",\n        \"truncated\": false,\n        \"results\": [\n            {\n                \"key\":", "doc_id": "2b11150e-c93b-446e-a865-f3500f6c9aaf", "embedding": null, "doc_hash": "4eb144a6ad650715d1ab53eadfd0dd368b26490c58ac87fb410af1d9c2d595c6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/findstates"}, "node_info": {"start": 2985, "end": 4321, "_node_type": "1"}, "relationships": {"1": "7fdc2d78b7087b57a0b5d18019bede1a4e777967", "2": "38856902-9c3b-40ce-8f47-7d1bf85f7a74", "3": "8590754f-b587-4152-ad91-b38baaa2d046"}}, "__type__": "1"}, "8590754f-b587-4152-ad91-b38baaa2d046": {"__data__": {"text": "{\n                \"key\": \"AQFmmdXxSKUGNq3wQcppLAdAe8sD+g==\",\n                \"value\": \"yGJI4+cA\"\n            },\n            {\n                \"key\": \"AQHu8BYlbUqc54Mtr+S7+i0Aj5J/Lg==\",\n                \"value\": \"nOrj7wA=\"\n            }\n        ]\n    }\n}\n```", "doc_id": "8590754f-b587-4152-ad91-b38baaa2d046", "embedding": null, "doc_hash": "ba297ee71dfe527fae5c0680fbb29b8a6e12b462d1ea79b8ffb76665ca6b0a35", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/findstates"}, "node_info": {"start": 4316, "end": 4572, "_node_type": "1"}, "relationships": {"1": "7fdc2d78b7087b57a0b5d18019bede1a4e777967", "2": "2b11150e-c93b-446e-a865-f3500f6c9aaf"}}, "__type__": "1"}, "8149251d-1643-4124-86fe-d42e175d3bdb": {"__data__": {"text": "# getapplicationlog method\n\nReturns the contract event information based on the specified txid. The contract event information is stored under the ApplicationLogs directory.\n\n:::note\n You must install the plugins [ApplicationLogs](https://github.com/neo-project/neo-modules/releases) and [LevelDBStore](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- txid: Transaction ID\n\n- trigger type:  Optional. It has the following options:\n\n  - OnPersist\n  - PostPersist\n  - Application\n  - Verification\n  - System: OnPersist | PostPersist\n  - All: OnPersist | PostPersist | Verification | Application\n\n  It defaults to All. You can specify a trigger type.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getapplicationlog\",\n  \"params\": [\n    \"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\"\n  ]\n}\n```\n\nThis transaction transfers 100 GAS from NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF to NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ.\n\nResponse body 1:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"txid\": \"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\",\n        \"executions\": [\n            {\n                \"trigger\": \"Application\",\n                \"vmstate\": \"HALT\",\n                \"exception\": null,\n                \"gasconsumed\": \"9999540\",\n                \"stack\": [],\n                \"notifications\": [\n                    {\n                        \"contract\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                        \"eventname\": \"Transfer\",\n                        \"state\": {\n                            \"type\": \"Array\",\n                            \"value\": [\n                                {\n                                    \"type\": \"ByteString\",\n                                    \"value\": \"4rZTInKT6ZxPKQbVNVOrtKZy34Y=\"\n           ", "doc_id": "8149251d-1643-4124-86fe-d42e175d3bdb", "embedding": null, "doc_hash": "dac9071dae8fcd182e92336c38de8f3eb834913bc6f3f47b95576469a8304390", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getapplicationlog"}, "node_info": {"start": 0, "end": 1906, "_node_type": "1"}, "relationships": {"1": "bb98ba9ed71e532bb75bb8be7d414a315c6bef8b", "3": "55f2d4cc-1054-4b98-a550-00d2a4655138"}}, "__type__": "1"}, "55f2d4cc-1054-4b98-a550-00d2a4655138": {"__data__": {"text": "                               },\n                                {\n                                    \"type\": \"ByteString\",\n                                    \"value\": \"+on7LBTfD1nd3wT25WUX8rNKrus=\"\n                                },\n                                {\n                                    \"type\": \"Integer\",\n                                    \"value\": \"10000000000\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\nResponse description:\n\n- txid: Transaction ID.\n\n- trigger: Triggers.\n\n- vmstate: VM execution state. HALT represents success, and FAULT represents failure.\n- gasconsumed: The transaction fee, which means the GAS consumed in the transaction execution. \n- notifications: The notification sent by the smart contract. If no notifications is returned it indicates the transfer is not successful. See the Note below.\n\n- contract: The contract sending the notification. Here is GasToken.\n\n- eventname: Event name of the notification.\n\n- state: Notification content, where ByteString is Base64-encoded wallet address and can be converted at https://neo.org/converter/index.\n\n:::note\n This example shows the log of a successful token transfer, however, in case of a failed transfer or NeoVM exception, the outcomes can be:\n:::\n>\n> - Failed transfer: no Transfer notification event is returned, execution ends in a `HALT` state with a stack value of `False`.\n> - NeoVM exception: a Transfer notification event may or may not be returned, but execution ends in a `FAULT` state.\n", "doc_id": "55f2d4cc-1054-4b98-a550-00d2a4655138", "embedding": null, "doc_hash": "ea2691ae562a83760677c6cbdf220ca0a75a65f10a6365cac2b8d443ee6613af", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getapplicationlog"}, "node_info": {"start": 1896, "end": 3515, "_node_type": "1"}, "relationships": {"1": "bb98ba9ed71e532bb75bb8be7d414a315c6bef8b", "2": "8149251d-1643-4124-86fe-d42e175d3bdb"}}, "__type__": "1"}, "80f2b708-f38b-4570-8299-5b8f2732787b": {"__data__": {"text": "\ufeff# getbestblockhash Method\n\nReturns the latest block hash of the block chain.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\n##### Request body\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getbestblockhash\",\n   \"params\":[],\n   \"id\": 1\n}\n```\n\n##### Response body\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": \"0xbee7a65279d6b31cc45445a7579d4c4a4e52d1edc13cc7ec7a41f7b1affdf0ab\"\n}\n```\n\n##### Response Description\n\nResult: The latest block hash of the block chain.", "doc_id": "80f2b708-f38b-4570-8299-5b8f2732787b", "embedding": null, "doc_hash": "701b4a56a030394be9625e1c1642df50b87a1f79fab7576acf51ff3c7ea7c7b8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getbestblockhash"}, "node_info": {"start": 0, "end": 580, "_node_type": "1"}, "relationships": {"1": "67437ae8ce1c96f552d4fb00035c2bfe8968b3d2"}}, "__type__": "1"}, "4393e996-a537-48bc-8ae7-bb0d4a17bf85": {"__data__": {"text": "\ufeff# getblock Method\n\nReturns the corresponding block information according to the specified hash or index.\n\nThe usage of this method is as same as `getblockheader`. The only difference is that `getblockeader` gets the block header and `getblock` gets the complete block.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n* hash | index: Block hash string or block index (i.e. block height = number of blocks - 1).\n\n* verbose: Optional. The default value is false. \n  * When verbose is false, serialized information of the block is returned in a Base64-encoded string. If you need the detailed information, use SDK for deserialization. \n  * When verbose is true or 1, detailed information of the block is returned in Json format.\n\n## Example\n\n**Example 1 - Get serialized information of the block**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblock\",\n  \"params\": [26536],\n  \"id\": 1\n}\n```\n\nor\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getblock\",\n  \"params\": [\"0xd373a9afdbe57d79ad788196aa4ef37dbfb28c7d8f22ffa1ccbc236d56268bca\"]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\":", "doc_id": "4393e996-a537-48bc-8ae7-bb0d4a17bf85", "embedding": null, "doc_hash": "5fe60292162ab072bf3acfe23518f4efaaa3543354a3a34bb84690f2402fdbb9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 0, "end": 1256, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "3": "a79fc686-f90f-4bb7-9658-700dde389191"}}, "__type__": "1"}, "a79fc686-f90f-4bb7-9658-700dde389191": {"__data__": {"text": "   \"id\": 1,\n    \"result\": \"AAAAAM5doa+yo+aKrc8RO/Pfo96BYyedF2ed+jODYAzESzgvm458FX3T6b9rYw2KSBTWfttaeiA9McxN1LiWuQwI1O/6eEAaeAEAAKhnAAAG+CRl3iIpI2tQ6MaMSCq5GLum1uwB/UoBDEA2ZR0uduwN/5tFVCKoHJtAnSJINfqlRDcNXnYl0H0Jcb3YBy1M0G4Z1LB3PQMIb6J4kOtFm7TBL0B6vfPuDpigDEBLHKna+SPlL9vn755blCr3vxvc2HLP5dUch0isPARVDbg24QwVuvx3mbQ6awn0cQ/h+Jym/9xFo0MR0ddKXKzCDEAIcXyoqzFq4+3N9JtyK46LLeyx9ikidPLiXg9HWQk9Ps5wx9+XIe8zziS9dRAOqT4od7tW1SA6cRU3U8ZCexJ1DECxN+nyE15RaIvwpJ0JK3/RJvAM++YKou/ljVef5atDx9pce5nkuibfZzvzrjcoJF53qnP8ZSXBKThjrN2kGCxlDEBSVfUQAFNm4j4KihACjt5Kx1A9hN8RIDQkLw7udpcFm7Nf4PtDtucw7pS7WGEkmu3c+yt2BV3KeCzNBAreypb7/BUMIQMCJCsdztY+G/frFIdvfvAmt5Vn+cW+g94ZQ90YXsKOaAwhAg34hYtm/017Cmpo0R3e3MfZDSpk/6LNCHxMXav0FQtADCECF5VDAAGEeB5UR7Pw+6zmZOqSt+MSJ8jnG8Tnza/M244MIQJehJSQO5PcNp8Ior1+Ih9XTHXZZ1WR8EkHy6na7rg9EAwhA4QV0L6NwSth0+O3a5j0ZN+rf93udCccNeLeYku1ECOmDCEDybHInG4tSr1imi24t9A6ztUYpWeTvJD0mF737T8bSBoMIQPoq1GG4d6rzRDsDlCd7U//reb931NKw+BQYmi64/1EphdBe85spQEAKihGP0BY1TwAAAAAAKBVAAAAAAAnfgAAAW78pd5nDtnbpGznfCdo9+vKgwVMAAD9dBENSgh7Im5hbWUiOiJUb2tlbiBOYW1lIiwiZ3JvdXBzIjpbXSwic3VwcG9ydGVkc3RhbmRhcmRzIjpbIk5FUDE3IiwiTkVQMTAiXSwiYWJpIjp7Im1ldGhvZHMiOlt7Im5hbWUiOiJfZGVwbG95IiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImRhdGEiLCJ0eXBlIjoiQW55In0seyJuYW1lIjoidXBkYXRlIiwidHlwZSI6IkJvb2xlYW4ifV0sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0IjowLCJzYWZlIjpmYWxzZX0", "doc_id": "a79fc686-f90f-4bb7-9658-700dde389191", "embedding": null, "doc_hash": "6b8a4309c55c48308e16a91b381a2365079ea9908a19f9bfb85e3ff69c666490", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 1240, "end": 2566, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "4393e996-a537-48bc-8ae7-bb0d4a17bf85", "3": "acca3584-1d58-4b29-86fe-7ff64b7e46a0"}}, "__type__": "1"}, "acca3584-1d58-4b29-86fe-7ff64b7e46a0": {"__data__": {"text": "seyJuYW1lIjoiX2luaXRpYWxpemUiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjI3Miwic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImJhbGFuY2VPZiIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJhY2NvdW50IiwidHlwZSI6Ikhhc2gxNjAifV0sInJldHVybnR5cGUiOiJJbnRlZ2VyIiwib2Zmc2V0IjozNjgsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJkZWNpbWFscyIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiSW50ZWdlciIsIm9mZnNldCI6NTE1LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoiZGVzdHJveSIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6NTM3LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoiZGlzYWJsZVBheW1lbnQiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjYwNywic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImVuYWJsZVBheW1lbnQiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjY3OSwic2FmZSI6ZmFsc2V9LHsibmFtZSI6Im9uTkVQMTdQYXltZW50IiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImZyb20iLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6ImFtb3VudCIsInR5cGUiOiJJbnRlZ2VyIn0seyJuYW1lIjoiZGF0YSIsInR5cGUiOiJBbnkifV0sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0IjoxMjMwLCJzYWZlIjpmYWxzZX0seyJuYW1lIjoic3ltYm9sIiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJTdHJpbmciLCJvZmZzZXQiOjE2MDIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ0ZXN0Y29udHJhY3QiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlN0cmluZyIsIm9mZnNldCI6MTYzMywic2FmZSI6ZmFsc2V9LHsibmFtZSI6InRlc3RkeW5hbWljY2FsbCIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJoY", "doc_id": "acca3584-1d58-4b29-86fe-7ff64b7e46a0", "embedding": null, "doc_hash": "dec607543bcc507a48630ebc64fe48a2778483d0efd0343a45f9da88b5053204", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 2584, "end": 3858, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "a79fc686-f90f-4bb7-9658-700dde389191", "3": "bb58f53e-be0e-4f07-a845-d6009310358e"}}, "__type__": "1"}, "bb58f53e-be0e-4f07-a845-d6009310358e": {"__data__": {"text": "XNoIiwidHlwZSI6Ikhhc2gxNjAifSx7Im5hbWUiOiJtZXRob2QiLCJ0eXBlIjoiU3RyaW5nIn1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MTY0Miwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InRvdGFsU3VwcGx5IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJJbnRlZ2VyIiwib2Zmc2V0IjoxNjU4LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoidHJhbnNmZXIiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiZnJvbSIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoidG8iLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6ImFtb3VudCIsInR5cGUiOiJJbnRlZ2VyIn0seyJuYW1lIjoiZGF0YSIsInR5cGUiOiJBbnkifV0sInJldHVybnR5cGUiOiJCb29sZWFuIiwib2Zmc2V0IjoxNjY0LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoidXBkYXRlIiwicGFyYW1ldGVycyI6W3sibmFtZSI6Im5lZkZpbGUiLCJ0eXBlIjoiU3RyaW5nIn0seyJuYW1lIjoibWFuaWZlc3QiLCJ0eXBlIjoiU3RyaW5nIn1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MTk5Miwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InZlcmlmeSIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiQm9vbGVhbiIsIm9mZnNldCI6MjA1OCwic2FmZSI6ZmFsc2V9XSwiZXZlbnRzIjpbeyJuYW1lIjoiVHJhbnNmZXIiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiYXJnMSIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoiYXJnMiIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoiYXJnMyIsInR5cGUiOiJJbnRlZ2VyIn1dfV19LCJwZXJtaXNzaW9ucyI6W3siY29udHJhY3QiOiIqIiwibWV0aG9kcyI6IioifV0sInRydXN0cyI6W10sImV4dHJhIjp7IkF1dGhvciI6Ik5lbyIsIkVtYWlsIjoiZGV2QG5lby5vcmciLCJEZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSBORVAxNyBleGFtcGxlIn19Df4ITkVGM25lb24tMy4wLjAuMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXA7znO4OTpJcbCoGp54U", "doc_id": "bb58f53e-be0e-4f07-a845-d6009310358e", "embedding": null, "doc_hash": "02649ce639b3979718bb514689b92b815f356e742feb03b7a0cb98607e61681c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 3859, "end": 5224, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "acca3584-1d58-4b29-86fe-7ff64b7e46a0", "3": "4c3e8af3-d1f3-4e11-a23b-5d302443df92"}}, "__type__": "1"}, "4c3e8af3-d1f3-4e11-a23b-5d302443df92": {"__data__": {"text": "QN2G/OrARpdG9hAgABD/2j+kNG6lMqJY/El92t22Q3yf3/C2dldENvbnRyYWN0AQABD/2j+kNG6lMqJY/El92t22Q3yf3/BnVwZGF0ZQMAAA/9o/pDRupTKiWPxJfdrdtkN8n9/wdkZXN0cm95AAAAD0OkVyMwdLSq1p8g/WmykRNSvvAeBXRlc3QyAAABDwAA/RAIVwICeXBoJgcjBwEAACE1JgMAABC3cWkmIAwbQ29udHJhY3QgaGFzIGJlZW4gZGVwbG95ZWQuOgwcYWZ0ZXIgZ2V0IHRvdGFsU3VwcGx5U3RvcmFnZUHP50eWDAdBQpxJ/RoH2yE1aAMAAAwhYWZ0ZXIgaW5jcmVhc2UgdG90YWxTdXBwbHlzdG9yYWdlQc/nR5YMFG78pd5nDtnbpGznfCdo9+vKgwVMDAdBQpxJ/RoH2yFQNQYDAAAMG2FmdGVyIGluY3JlYXNlIGFzc2V0c3RvcmFnZUHP50eWCwwUbvyl3mcO2dukbOd8J2j368qDBUwMB0FCnEn9GgfbIVMTwAwIVHJhbnNmZXJBlQFvYUBWCAwIAACKXXhFYwHbIWAMB0FCnEn9GgfbIWEMFG78pd5nDtnbpGznfCdo9+vKgwVMYgwEAJQ1d9shYxFkDAVhc3NldGUMCGNvbnRyYWN0ZgwLdG90YWxTdXBwbHlnB0BXAgF4NX4GAAAQs3BoJkEMPFRoZSBwYXJhbWV0ZXJzIGFjY291bnQgU0hPVUxEIGJlIGEgMjAtYnl0ZSBub24temVybyBhZGRyZXNzLjoMFnZhbGlkIGFkZHJlc3MgY29tcGxldGVBz+dHlng18QAAAHFpQFcBAnh52zBQNAVwaEBXAQISw0p4EFDQSnkRUNBwaEAYQFcBAngRznmLcHgQzmhQQS9Yxe1AVwEANcsBAAAQs3BoJhYMEU5vIGF1dGhvcml6YXRpb24uOiE3AwBAQZv2Z84MBWFzc2V0UDSXDAZlbmFibGUQUzWMAwAAQFcBADWFAQAAELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjohNL5AQZv2Z84MBWFzc2V0UDVS////DAZlbmFibGURUzVEAwAAQFcBADU9AQAAELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjohNLtAVwMBQZv2Z84MBWFzc2V0UDUH////eFA1kAAAAHAMF2NoZWNrIGlmIHN0YXR1cyBpcyBudWxsQc/nR5Zo2HFpJgYQciIiIWhK2CYFEFBF2yEaUDcAAEHP50eWaErYJgUQUEXbIXJqQFcDAEGb9mfODAhjb250cmFjdFA1nf", "doc_id": "4c3e8af3-d1f3-4e11-a23b-5d302443df92", "embedding": null, "doc_hash": "26ca87322edb32b14dbd3b2e7a17083222a953e591bcc02ffa8b07d2c4ae0918", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 5225, "end": 6545, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "bb58f53e-be0e-4f07-a845-d6009310358e", "3": "72a573b5-d6e1-4948-a82f-9ea3b232f46f"}}, "__type__": "1"}, "72a573b5-d6e1-4948-a82f-9ea3b232f46f": {"__data__": {"text": "7//wwLdG90YWxTdXBwbHlQNBpwaNhxaSYGEHIiDWhK2CYFEFBF2yFyakBXAgJ4Ec55i3B4EM5oUEGSXegxcWlAVwIAQZv2Z84MBWFzc2V0UDVK/v//DAZlbmFibGVQNMxK2CYFEFBF2yFwaBGzcWlAVwACeHg1Dv///3meUDXZAQAAQFcAATVk////eJ415AEAAEBXAAF4NwEA2KpADBRu/KXeZw7Z26Rs53wnaPfryoMFTEH4J+yMQFcGATUu////cGgQtnNrJhsMFkNvbnRyYWN0IG5vdCBkZXBsb3llZC46DAgAAIpdeEVjAdshaJ9xeBC2dGwmGwwWQW1vdW50IGNhbm5vdCBiZSB6ZXJvLjp4abd1bSY/eBpQNwAAQc/nR5ZpGlA3AABBz+dHlgwkSW5zdWZmaWNpZW50IHN1cHBseSBmb3IgbWludCB0b2tlbnMuOiFBLVEIMHJqE854UDUP////eDUc////C2oTznhTE8AMCFRyYW5zZmVyQZUBb2FAVwQDNbn+//9waCefAAAAQTlTbjwMFPVj6kC8KD1NDgXEjqMFs/Kgc0Dvs3FpJikMD21pbnQgbmVvIHRva2Vuc0HP50eWeQwEAJQ1d9shoDXm/v//IlIhQTlTbjwMFM924ovQBixKR47jVWEBExnzz6TSs3JqJhR42KpzayYKeRGgNbT+//8hIh8hDBlXcm9uZyBjYWxsaW5nIHNjcmlwdCBoYXNoOiEiKiEMJFBheW1lbnQgaXMgZGlzYWJsZSBvbiB0aGlzIGNvbnRyYWN0ITpAVwACQZv2Z84MBWFzc2V0UDU0/P//eHlTNC1AVwABQZv2Z84MCGNvbnRyYWN0UDUW/P//DAt0b3RhbFN1cHBseXhTNANAVwEDeBHOeYtweBDOaHpTQeY/GIRAVwICeDXP/P//cGh5s3FpJgd4NBkiCXhoeZ9QNItAVwABNRn9//94nzSZQFcAAUGb9mfODAVhc3NldFA1r/v//3hQNcn7//9ADBxUZXN0Q29udHJhY3RNYW5hZ2VtZW50VXBkYXRlQFcBADcEAHBoQFcAAnh5HxDDVEFifVtSRUA1uvz//0BXBwR4NW4BAAAmDHk1ZgEAABCzIgMRcGgmRQxAVGhlIHBhcmFtZXRlcnMgZnJvbSBhbmQgdG8gU0hPVUxEIGJlIDIwLWJ5dGUgbm9uLXplcm8gYWRkcmVzc2VzLjp6ELZxaSYxDCxUaGUgcGFyYW1ldGVyIGFtb3VudCBNVVNUIGJlIGdyZWF0ZXIgdGhhbiAwLjp4Qfgn7IwkDXhBOVNuPJcQsyIDEHJqJhYMEU5vIGF1dGhvcml6", "doc_id": "72a573b5-d6e1-4948-a82f-9ea3b232f46f", "embedding": null, "doc_hash": "c444a3172113360770a820e1d46e247f75727087bfef1398254d16ca271d61b8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 6546, "end": 7888, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "4c3e8af3-d1f3-4e11-a23b-5d302443df92", "3": "3d65908e-e738-4cdb-996d-4b02fff73330"}}, "__type__": "1"}, "3d65908e-e738-4cdb-996d-4b02fff73330": {"__data__": {"text": "YXRpb24uOng1jfv//3q1c2smGgwVSW5zdWZmaWNpZW50IGJhbGFuY2UuOnh5s3RsJgYRdSJaeHpQNYn+//95elA1Qfz//3h5elMTwAwIVHJhbnNmZXJBlQFvYXk1Sfz//3ZuJil5DA5vbk5FUDE3UGF5bWVudB8Tw0oQeNBKEXrQShJ70FRBYn1bUkURdW1AVwECNRz8//8Qs3BoJhYMEU5vIGF1dGhvcml6YXRpb24uOnh5C1M3AgBAVwABeErZKFDKABSzqyYJeBCzELMiAxBANd37//9AtFz2MBLAHwwGZGVwbG95DBT9o/pDRupTKiWPxJfdrdtkN8n9/0FifVtSAUIMQHefw35eIZrwfE+JXNTEqoXbBmbMyxCK8j07RU26X+GWNle4ynNroOlNlniZ+mWprVE2lybXFAOjtw6hVHX2frooDCECVOanJ/RSNsd2Itpgwx8fHJooXf3zbTYO/4EAs9Oud+FBdHR2qg==\" } ```  **Example 2 - Get block information in Json**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblock\",\n  \"params\": [26536, true],\n  \"id\": 1\n}\n```\n\nor\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getblock\",\n  \"params\": [\"0xd373a9afdbe57d79ad788196aa4ef37dbfb28c7d8f22ffa1ccbc236d56268bca\", true]\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"hash\": \"0xd373a9afdbe57d79ad788196aa4ef37dbfb28c7d8f22ffa1ccbc236d56268bca\",\n    \"size\": 5317,\n    \"version\": 0,\n    \"previousblockhash\": \"0x2f384bc40c608333fa9d67179d276381dea3dff33b11cfad8ae6a3b2afa15dce\",\n    \"merkleroot\": \"0xefd4080cb996b8d44dcc313d207a5adb7ed614488a0d636bbfe9d37d157c8e9b\",\n    \"time\": 1615348136186,\n    \"index\": 26536,\n    \"primary\": 6,\n    \"nextconsensus\": \"NiY2NJTPFPyqjrGtdEhQnryJpJbxnQTvpR\",\n    \"witnesses\": [\n      {\n        \"invocation\":", "doc_id": "3d65908e-e738-4cdb-996d-4b02fff73330", "embedding": null, "doc_hash": "63977903125b28ad48994f99ec506b542b216afb93a537fe4bfe3707130a1b84", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 7889, "end": 9259, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "72a573b5-d6e1-4948-a82f-9ea3b232f46f", "3": "4d50e189-f9e8-4eef-92cb-6ead069f911c"}}, "__type__": "1"}, "4d50e189-f9e8-4eef-92cb-6ead069f911c": {"__data__": {"text": "[\n      {\n        \"invocation\": \"DEA2ZR0uduwN/5tFVCKoHJtAnSJINfqlRDcNXnYl0H0Jcb3YBy1M0G4Z1LB3PQMIb6J4kOtFm7TBL0B6vfPuDpigDEBLHKna+SPlL9vn755blCr3vxvc2HLP5dUch0isPARVDbg24QwVuvx3mbQ6awn0cQ/h+Jym/9xFo0MR0ddKXKzCDEAIcXyoqzFq4+3N9JtyK46LLeyx9ikidPLiXg9HWQk9Ps5wx9+XIe8zziS9dRAOqT4od7tW1SA6cRU3U8ZCexJ1DECxN+nyE15RaIvwpJ0JK3/RJvAM++YKou/ljVef5atDx9pce5nkuibfZzvzrjcoJF53qnP8ZSXBKThjrN2kGCxlDEBSVfUQAFNm4j4KihACjt5Kx1A9hN8RIDQkLw7udpcFm7Nf4PtDtucw7pS7WGEkmu3c+yt2BV3KeCzNBAreypb7\",\n        \"verification\": \"FQwhAwIkKx3O1j4b9+sUh29+8Ca3lWf5xb6D3hlD3Rhewo5oDCECDfiFi2b/TXsKamjRHd7cx9kNKmT/os0IfExdq/QVC0AMIQIXlUMAAYR4HlRHs/D7rOZk6pK34xInyOcbxOfNr8zbjgwhAl6ElJA7k9w2nwiivX4iH1dMddlnVZHwSQfLqdruuD0QDCEDhBXQvo3BK2HT47drmPRk36t/3e50Jxw14t5iS7UQI6YMIQPJscicbi1KvWKaLbi30DrO1RilZ5O8kPSYXvftPxtIGgwhA+irUYbh3qvNEOwOUJ3tT/+t5v3fU0rD4FBiaLrj/USmF0F7zmyl\"\n      }\n    ],\n    \"tx\": [\n      {\n        \"hash\": \"0xefd4080cb996b8d44dcc313d207a5adb7ed614488a0d636bbfe9d37d157c8e9b\",\n        \"size\": 4628,\n        \"version\": 0,\n        \"nonce\": 1061562410,\n        \"sender\": \"NW2pB9EqjHVnJ8M9W7oXS1LgdM6pwhvGyx\",\n        \"sysfee\": \"1020614720\",\n        \"netfee\": \"5611520\",\n        \"validuntilblock\": 32295,\n        \"signers\": [\n          {\n            \"account\": \"0x4c0583caebf768277ce76ca4dbd90e67dea5fc6e\",\n            \"scopes\": \"None\"\n          }\n        ],\n        \"attributes\": [],\n       ", "doc_id": "4d50e189-f9e8-4eef-92cb-6ead069f911c", "embedding": null, "doc_hash": "61afc40e0dbd5de04978e5f4a3b92f29a7542649bc9f0eb59a61f1f1df2a0924", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 9243, "end": 10614, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "3d65908e-e738-4cdb-996d-4b02fff73330", "3": "5a243d12-1f6d-4685-89b7-cb4ded884189"}}, "__type__": "1"}, "5a243d12-1f6d-4685-89b7-cb4ded884189": {"__data__": {"text": "      \"attributes\": [],\n        \"script\":", "doc_id": "5a243d12-1f6d-4685-89b7-cb4ded884189", "embedding": null, "doc_hash": "80b3371b1a20c7ff75c3b7403d410ca9be33b6739151aab1629a8c95103566f9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 10615, "end": 10656, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "4d50e189-f9e8-4eef-92cb-6ead069f911c", "3": "b960ce20-a39a-4497-ac28-ec7d2c01eae6"}}, "__type__": "1"}, "b960ce20-a39a-4497-ac28-ec7d2c01eae6": {"__data__": {"text": "   \"attributes\": [],\n        \"script\": \"DUoIeyJuYW1lIjoiVG9rZW4gTmFtZSIsImdyb3VwcyI6W10sInN1cHBvcnRlZHN0YW5kYXJkcyI6WyJORVAxNyIsIk5FUDEwIl0sImFiaSI6eyJtZXRob2RzIjpbeyJuYW1lIjoiX2RlcGxveSIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJkYXRhIiwidHlwZSI6IkFueSJ9LHsibmFtZSI6InVwZGF0ZSIsInR5cGUiOiJCb29sZWFuIn1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MCwic2FmZSI6ZmFsc2V9LHsibmFtZSI6Il9pbml0aWFsaXplIiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0IjoyNzIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJiYWxhbmNlT2YiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiYWNjb3VudCIsInR5cGUiOiJIYXNoMTYwIn1dLCJyZXR1cm50eXBlIjoiSW50ZWdlciIsIm9mZnNldCI6MzY4LCJzYWZlIjpmYWxzZX0seyJuYW1lIjoiZGVjaW1hbHMiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IkludGVnZXIiLCJvZmZzZXQiOjUxNSwic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImRlc3Ryb3kiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjUzNywic2FmZSI6ZmFsc2V9LHsibmFtZSI6ImRpc2FibGVQYXltZW50IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0Ijo2MDcsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJlbmFibGVQYXltZW50IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwib2Zmc2V0Ijo2NzksInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJvbk5FUDE3UGF5bWVudCIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJmcm9tIiwidHlwZSI6Ikhhc2gxNjAifSx7Im5hbWUiOiJhbW91bnQiLCJ0eXBlIjoiSW50ZWdlciJ9LHsibmFtZSI6ImRhdGEiLCJ0eXBlIjoiQW55In1dLCJyZXR1cm50eXBlIjoiVm9pZCIsIm9mZnNldCI6MTIzMCwic2", "doc_id": "b960ce20-a39a-4497-ac28-ec7d2c01eae6", "embedding": null, "doc_hash": "87ecddd6094f60f943cb7c023e421b9a32b6de19752834c5da369d8a01eaa193", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 10648, "end": 11962, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "5a243d12-1f6d-4685-89b7-cb4ded884189", "3": "3ff43444-a1de-4c51-872c-06a33670201f"}}, "__type__": "1"}, "3ff43444-a1de-4c51-872c-06a33670201f": {"__data__": {"text": "FmZSI6ZmFsc2V9LHsibmFtZSI6InN5bWJvbCIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiU3RyaW5nIiwib2Zmc2V0IjoxNjAyLCJzYWZlIjpmYWxzZX0seyJuYW1lIjoidGVzdGNvbnRyYWN0IiwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJTdHJpbmciLCJvZmZzZXQiOjE2MzMsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ0ZXN0ZHluYW1pY2NhbGwiLCJwYXJhbWV0ZXJzIjpbeyJuYW1lIjoiaGFzaCIsInR5cGUiOiJIYXNoMTYwIn0seyJuYW1lIjoibWV0aG9kIiwidHlwZSI6IlN0cmluZyJ9XSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjE2NDIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ0b3RhbFN1cHBseSIsInBhcmFtZXRlcnMiOltdLCJyZXR1cm50eXBlIjoiSW50ZWdlciIsIm9mZnNldCI6MTY1OCwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InRyYW5zZmVyIiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImZyb20iLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6InRvIiwidHlwZSI6Ikhhc2gxNjAifSx7Im5hbWUiOiJhbW91bnQiLCJ0eXBlIjoiSW50ZWdlciJ9LHsibmFtZSI6ImRhdGEiLCJ0eXBlIjoiQW55In1dLCJyZXR1cm50eXBlIjoiQm9vbGVhbiIsIm9mZnNldCI6MTY2NCwic2FmZSI6ZmFsc2V9LHsibmFtZSI6InVwZGF0ZSIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJuZWZGaWxlIiwidHlwZSI6IlN0cmluZyJ9LHsibmFtZSI6Im1hbmlmZXN0IiwidHlwZSI6IlN0cmluZyJ9XSwicmV0dXJudHlwZSI6IlZvaWQiLCJvZmZzZXQiOjE5OTIsInNhZmUiOmZhbHNlfSx7Im5hbWUiOiJ2ZXJpZnkiLCJwYXJhbWV0ZXJzIjpbXSwicmV0dXJudHlwZSI6IkJvb2xlYW4iLCJvZmZzZXQiOjIwNTgsInNhZmUiOmZhbHNlfV0sImV2ZW50cyI6W3sibmFtZSI6IlRyYW5zZmVyIiwicGFyYW1ldGVycyI6W3sibmFtZSI6ImFyZzEiLCJ0eXBlIjoiSGFzaDE2MCJ9LH", "doc_id": "3ff43444-a1de-4c51-872c-06a33670201f", "embedding": null, "doc_hash": "4cc8dec04d0f833f135e8cd8b4aabca1718aeec7875c09f3ebdbda0f9d7a9947", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 11989, "end": 13261, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "b960ce20-a39a-4497-ac28-ec7d2c01eae6", "3": "2be731a1-14f6-40cf-925a-0687fe2e5f1e"}}, "__type__": "1"}, "2be731a1-14f6-40cf-925a-0687fe2e5f1e": {"__data__": {"text": "sibmFtZSI6ImFyZzIiLCJ0eXBlIjoiSGFzaDE2MCJ9LHsibmFtZSI6ImFyZzMiLCJ0eXBlIjoiSW50ZWdlciJ9XX1dfSwicGVybWlzc2lvbnMiOlt7ImNvbnRyYWN0IjoiKiIsIm1ldGhvZHMiOiIqIn1dLCJ0cnVzdHMiOltdLCJleHRyYSI6eyJBdXRob3IiOiJOZW8iLCJFbWFpbCI6ImRldkBuZW8ub3JnIiwiRGVzY3JpcHRpb24iOiJUaGlzIGlzIGEgTkVQMTcgZXhhbXBsZSJ9fQ3+CE5FRjNuZW9uLTMuMC4wLjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwO85zuDk6SXGwqBqeeFEDdhvzqwEaXRvYQIAAQ/9o/pDRupTKiWPxJfdrdtkN8n9/wtnZXRDb250cmFjdAEAAQ/9o/pDRupTKiWPxJfdrdtkN8n9/wZ1cGRhdGUDAAAP/aP6Q0bqUyolj8SX3a3bZDfJ/f8HZGVzdHJveQAAAA9DpFcjMHS0qtafIP1pspETUr7wHgV0ZXN0MgAAAQ8AAP0QCFcCAnlwaCYHIwcBAAAhNSYDAAAQt3FpJiAMG0NvbnRyYWN0IGhhcyBiZWVuIGRlcGxveWVkLjoMHGFmdGVyIGdldCB0b3RhbFN1cHBseVN0b3JhZ2VBz+dHlgwHQUKcSf0aB9shNWgDAAAMIWFmdGVyIGluY3JlYXNlIHRvdGFsU3VwcGx5c3RvcmFnZUHP50eWDBRu/KXeZw7Z26Rs53wnaPfryoMFTAwHQUKcSf0aB9shUDUGAwAADBthZnRlciBpbmNyZWFzZSBhc3NldHN0b3JhZ2VBz+dHlgsMFG78pd5nDtnbpGznfCdo9+vKgwVMDAdBQpxJ/RoH2yFTE8AMCFRyYW5zZmVyQZUBb2FAVggMCAAAil14RWMB2yFgDAdBQpxJ/RoH2yFhDBRu/KXeZw7Z26Rs53wnaPfryoMFTGIMBACUNXfbIWMRZAwFYXNzZXRlDAhjb250cmFjdGYMC3RvdGFsU3VwcGx5ZwdAVwIBeDV+BgAAELNwaCZBDDxUaGUgcGFyYW1ldGVycyBhY2NvdW50IFNIT1VMRCBiZSBhIDIwLWJ5dGUgbm9uLXplcm8gYWRkcmVzcy46DBZ2YWxpZCBhZGRyZXNzIGNvbXBsZXRlQc/nR5Z4NfEAAABxaUBXAQJ4edswUDQFcGhAVwECEsNKeBBQ0Ep5EVDQcGhAGEBXAQJ4Ec55i3B4EM5oUEEvWMXtQFcBADXLAQAAELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjohNwMAQEGb9mfODAVhc3N", "doc_id": "2be731a1-14f6-40cf-925a-0687fe2e5f1e", "embedding": null, "doc_hash": "41782b59a781d9d9ac6c6c4adcefddf713ea93b3272291a47cdeccaccd11e0f5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 13262, "end": 14647, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "3ff43444-a1de-4c51-872c-06a33670201f", "3": "0699cfe7-8d39-49d1-b7f1-661896d251db"}}, "__type__": "1"}, "0699cfe7-8d39-49d1-b7f1-661896d251db": {"__data__": {"text": "ldFA0lwwGZW5hYmxlEFM1jAMAAEBXAQA1hQEAABCzcGgmFgwRTm8gYXV0aG9yaXphdGlvbi46ITS+QEGb9mfODAVhc3NldFA1Uv///wwGZW5hYmxlEVM1RAMAAEBXAQA1PQEAABCzcGgmFgwRTm8gYXV0aG9yaXphdGlvbi46ITS7QFcDAUGb9mfODAVhc3NldFA1B////3hQNZAAAABwDBdjaGVjayBpZiBzdGF0dXMgaXMgbnVsbEHP50eWaNhxaSYGEHIiIiFoStgmBRBQRdshGlA3AABBz+dHlmhK2CYFEFBF2yFyakBXAwBBm/ZnzgwIY29udHJhY3RQNZ3+//8MC3RvdGFsU3VwcGx5UDQacGjYcWkmBhByIg1oStgmBRBQRdshcmpAVwICeBHOeYtweBDOaFBBkl3oMXFpQFcCAEGb9mfODAVhc3NldFA1Sv7//wwGZW5hYmxlUDTMStgmBRBQRdshcGgRs3FpQFcAAnh4NQ7///95nlA12QEAAEBXAAE1ZP///3ieNeQBAABAVwABeDcBANiqQAwUbvyl3mcO2dukbOd8J2j368qDBUxB+CfsjEBXBgE1Lv///3BoELZzayYbDBZDb250cmFjdCBub3QgZGVwbG95ZWQuOgwIAACKXXhFYwHbIWifcXgQtnRsJhsMFkFtb3VudCBjYW5ub3QgYmUgemVyby46eGm3dW0mP3gaUDcAAEHP50eWaRpQNwAAQc/nR5YMJEluc3VmZmljaWVudCBzdXBwbHkgZm9yIG1pbnQgdG9rZW5zLjohQS1RCDByahPOeFA1D////3g1HP///wtqE854UxPADAhUcmFuc2ZlckGVAW9hQFcEAzW5/v//cGgnnwAAAEE5U248DBT1Y+pAvCg9TQ4FxI6jBbPyoHNA77NxaSYpDA9taW50IG5lbyB0b2tlbnNBz+dHlnkMBACUNXfbIaA15v7//yJSIUE5U248DBTPduKL0AYsSkeO41VhARMZ88+k0rNyaiYUeNiqc2smCnkRoDW0/v//ISIfIQwZV3JvbmcgY2FsbGluZyBzY3JpcHQgaGFzaDohIiohDCRQYXltZW50IGlzIGRpc2FibGUgb24gdGhpcyBjb250cmFjdCE6QFcAAkGb9mfODAVhc3NldFA1NPz//3h5UzQtQFcAAUGb9mfODAhjb250cmFjdFA1Fvz//wwLdG90YWxTdXBwbHl4UzQDQFcBA3gRznmLcHgQzmh6U0HmPxiEQFcCAng1z/z//3BoebNxaSYHeDQZIgl4aHmfUDSLQFcAATUZ/f//eJ80mUBXAAFBm/ZnzgwFYXNzZXRQNa/7//94UDXJ", "doc_id": "0699cfe7-8d39-49d1-b7f1-661896d251db", "embedding": null, "doc_hash": "6b3154ff56660b83e21969425edc32e755dc335656f9a21c084083d342c09e98", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 14648, "end": 15997, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "2be731a1-14f6-40cf-925a-0687fe2e5f1e", "3": "83d0f0f9-6db1-4dc5-b32e-20686268ae49"}}, "__type__": "1"}, "83d0f0f9-6db1-4dc5-b32e-20686268ae49": {"__data__": {"text": "+///QAwcVGVzdENvbnRyYWN0TWFuYWdlbWVudFVwZGF0ZUBXAQA3BABwaEBXAAJ4eR8Qw1RBYn1bUkVANbr8//9AVwcEeDVuAQAAJgx5NWYBAAAQsyIDEXBoJkUMQFRoZSBwYXJhbWV0ZXJzIGZyb20gYW5kIHRvIFNIT1VMRCBiZSAyMC1ieXRlIG5vbi16ZXJvIGFkZHJlc3Nlcy46ehC2cWkmMQwsVGhlIHBhcmFtZXRlciBhbW91bnQgTVVTVCBiZSBncmVhdGVyIHRoYW4gMC46eEH4J+yMJA14QTlTbjyXELMiAxByaiYWDBFObyBhdXRob3JpemF0aW9uLjp4NY37//96tXNrJhoMFUluc3VmZmljaWVudCBiYWxhbmNlLjp4ebN0bCYGEXUiWnh6UDWJ/v//eXpQNUH8//94eXpTE8AMCFRyYW5zZmVyQZUBb2F5NUn8//92biYpeQwOb25ORVAxN1BheW1lbnQfE8NKEHjQShF60EoSe9BUQWJ9W1JFEXVtQFcBAjUc/P//ELNwaCYWDBFObyBhdXRob3JpemF0aW9uLjp4eQtTNwIAQFcAAXhK2ShQygAUs6smCXgQsxCzIgMQQDXd+///QLRc9jASwB8MBmRlcGxveQwU/aP6Q0bqUyolj8SX3a3bZDfJ/f9BYn1bUg==\",         \"witnesses\": [\n          {\n            \"invocation\": \"DEB3n8N+XiGa8HxPiVzUxKqF2wZmzMsQivI9O0VNul/hljZXuMpza6DpTZZ4mfplqa1RNpcm1xQDo7cOoVR19n66\",\n            \"verification\": \"DCECVOanJ/RSNsd2Itpgwx8fHJooXf3zbTYO/4EAs9Oud+FBdHR2qg==\"\n          }\n        ]\n      }\n    ],\n    \"confirmations\": 50,\n    \"nextblockhash\": \"0x568b1d99c5abd460e4a05230d2a70bc7fd432b9f372354076eacd3b9f5cd399e\"\n  }\n}\n```\n\n", "doc_id": "83d0f0f9-6db1-4dc5-b32e-20686268ae49", "embedding": null, "doc_hash": "b3078ad0e2b5355100576369ecfe0e1c02925c0b17da9749a490553b9496c5e4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}, "node_info": {"start": 15998, "end": 17084, "_node_type": "1"}, "relationships": {"1": "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a", "2": "0699cfe7-8d39-49d1-b7f1-661896d251db"}}, "__type__": "1"}, "4146a496-cc9f-47f1-8f34-3ee12d75600c": {"__data__": {"text": "\ufeff# getblockcount Method\n\nGets the block count of the blockchain.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getblockcount\",\n   \"params\":[],\n   \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": 991991\n}\n```\n", "doc_id": "4146a496-cc9f-47f1-8f34-3ee12d75600c", "embedding": null, "doc_hash": "ec43d8bd3a305032dd58f70e0776e1532f7833c6414554b82b673bf3a095014f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockcount"}, "node_info": {"start": 0, "end": 414, "_node_type": "1"}, "relationships": {"1": "97fc7460589f71bf1ddb99579e33e1ca596768e7"}}, "__type__": "1"}, "cd29fe07-8767-498e-9ca5-6a0fb14142d6": {"__data__": {"text": "\ufeff# getblockhash Method\n\nReturns the hash value of the corresponding block based on the specified index.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n##  Parameter Description\n\nindex: Block index (block height)\n\n## Example\n\nRequest body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getblockhash\",\n   \"params\": [10000],\n   \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": \"0xdf17b40c5627a45e83d61b286a6d6d14859136621760d0a5b58dd59d18fd53d4\"\n}\n```", "doc_id": "cd29fe07-8767-498e-9ca5-6a0fb14142d6", "embedding": null, "doc_hash": "8067697c1e5380a32f9e7cf1f30f801f5a6d26121a2ae17fdcb708f76c1bc15e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockhash"}, "node_info": {"start": 0, "end": 581, "_node_type": "1"}, "relationships": {"1": "266fe126e4b859bb1bf752a139d87f7f561478cf"}}, "__type__": "1"}, "159fe277-1fea-4b7d-b4a0-a2b6dd4ba16f": {"__data__": {"text": "\ufeff# getblockheader Method\n\nReturns the corresponding block header information according to the specified script hash or index.\n\nThe usage of this method is as same as `getblock`. The only difference is that `getblockeader` gets the block header and `getblock` gets the complete block.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n* hash | index: The block script hash or index (i.e. block height=number of blocks - 1).\n\n* verbose: Optional, the default value is false. \n  * When verbose is false, serialized information of the block is returned in a hexadecimal string. If you need the detailed information, use the SDK for deserialization. \n  * When verbose is true or 1, detailed information of the block is returned in Json format. \n\n## Example\n\n**Example 1 - invoke with block hash**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockheader\",\n  \"params\": [140],\n  \"id\": 1\n}\n```\n\nor\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockheader\",\n  \"params\": [\"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"AAAAAFrf0tgylRv20FkZygEC2UDiMHJTukXJPQ/DFP5sezdzm3A7VffHxK0b4rwXh/xR/zV24Mj6+Vhq25qoN1WlxRIBIKp7dwEAAIwAAADitlMicpPpnE8pBtU1U6u0pnLfhgFCDEDGZIUihuWK6RLqloq6UiKxkoW0QFhqGhoQU3cK5IQRATFUY807W/hGmYqP80N8qjKQ/e4o8URTzgRUXJKXf1/sKxEMIQLO1DI5fdxE7boDHAvDuTPyj92Wd3kteyDmwDbdqqzx4hELQRON768A\"\n}\n```\n\n**Example 2 - \u83b7\u53d6 JSON \u683c\u5f0f\u7684\u533a\u5757\u4fe1\u606f**\n\n\u8bf7\u6c42\u6b63\u6587\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getblockheader\",\n  \"params\": [140, true],\n  \"id\": 1\n}\n```\n\n\u6216\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getblockheader\",\n  \"params\": [\"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\", true]\n}\n```\n\n\u54cd\u5e94\u6b63\u6587\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\",\n        \"size\": 213,\n        \"version\": 0,\n        \"previousblockhash\":", "doc_id": "159fe277-1fea-4b7d-b4a0-a2b6dd4ba16f", "embedding": null, "doc_hash": "0224f9388d4bf9feaed9db653bb01c9b34aac278a84b26ee3f7ff1a0c2865565", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockheader"}, "node_info": {"start": 0, "end": 2089, "_node_type": "1"}, "relationships": {"1": "35c92f551f6f4eaf77d14a1387e004951f1c1392", "3": "01e7a291-ff4b-4c37-952e-e678408ee25f"}}, "__type__": "1"}, "01e7a291-ff4b-4c37-952e-e678408ee25f": {"__data__": {"text": " \"version\": 0,\n        \"previousblockhash\": \"0x73377b6cfe14c30f3dc945ba537230e240d90201ca1959d0f61b9532d8d2df5a\",\n        \"merkleroot\": \"0x12c5a55537a89adb6a58f9fac8e07635ff51fc8717bce21badc4c7f7553b709b\",\n        \"time\": 1612687482881,\n        \"primary\": 0,\n        \"index\": 140,\n        \"nextconsensus\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n        \"witnesses\": [\n            {\n                \"invocation\": \"DEDGZIUihuWK6RLqloq6UiKxkoW0QFhqGhoQU3cK5IQRATFUY807W/hGmYqP80N8qjKQ/e4o8URTzgRUXJKXf1/s\",\n                \"verification\": \"EQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n            }\n        ],\n        \"confirmations\": 41,\n        \"nextblockhash\": \"0xd087785fc3cf5b59c6a4631bdbdd63ed3e44947c22eb69ba866ea9291473b2b5\"\n    }\n}\n```\n\n", "doc_id": "01e7a291-ff4b-4c37-952e-e678408ee25f", "embedding": null, "doc_hash": "5d13017a0efd379c191800a3052d082644227b572bb1da322566d5aa87e8cc68", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockheader"}, "node_info": {"start": 2046, "end": 2805, "_node_type": "1"}, "relationships": {"1": "35c92f551f6f4eaf77d14a1387e004951f1c1392", "2": "159fe277-1fea-4b7d-b4a0-a2b6dd4ba16f"}}, "__type__": "1"}, "a5409723-226f-45e6-a2fa-aeca4a69efec": {"__data__": {"text": "# getcommittee Method\n\nGets the public key list of current Neo committee members.\n:::note\n Before you can invoke this method you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases).\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getcommittee\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"020f2887f41474cfeb11fd262e982051c1541418137c02a0f4961af911045de639\",\n        \"03204223f8c86b8cd5c89ef12e4f0dbb314172e9241e30c9ef2293790793537cf0\",\n        \"0222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c30\",\n        \"0226933336f1b75baa42d42b71d9091508b638046d19abd67f4e119bf64a7cfb4d\",\n        \"023a36c72844610b4d34d1968662424011bf783ca9d984efa19a20babf5582f3fe\",\n        \"03409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd0\",\n        \"02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70\",\n        \"024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d\",\n        \"02504acbc1f4b3bdad1d86d6e1a08603771db135a73e61c9d565ae06a1938cd2ad\",\n        \"03708b860c1de5d87f5b151a12c2a99feebd2e8b315ee8e7cf8aa19692a9e18379\",\n        \"0288342b141c30dc8ffcde0204929bb46aed5756b41ef4a56778d15ada8f0c6654\",\n        \"02a62c915cf19c7f19a50ec217e79fac2439bbaad658493de0c7d8ffa92ab0aa62\",\n        \"02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e\",\n        \"03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c\",\n        \"03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a\",\n        \"03c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a050\",\n       ", "doc_id": "a5409723-226f-45e6-a2fa-aeca4a69efec", "embedding": null, "doc_hash": "a91760afc89aba05d9a32fd7aea674debaa50c55b1f78ae19ca9887bf7ca183e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcommittee"}, "node_info": {"start": 0, "end": 1674, "_node_type": "1"}, "relationships": {"1": "7330f6f7926be311fa994213f7dbe90364f9aa67", "3": "22f109b7-3d3d-48c9-9c6b-a8a5cd914e96"}}, "__type__": "1"}, "22f109b7-3d3d-48c9-9c6b-a8a5cd914e96": {"__data__": {"text": "       \"02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554\",\n        \"02cd5a5547119e24feaa7c2a0f37b8c9366216bab7054de0065c9be42084003c8a\",\n        \"03cdcea66032b82f5c30450e381e5295cae85c5e6943af716cc6b646352a6067dc\",\n        \"03d281b42002647f0113f36c7b8efb30db66078dfaaa9ab3ff76d043a98d512fde\",\n        \"02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093\"\n    ]\n}\n```", "doc_id": "22f109b7-3d3d-48c9-9c6b-a8a5cd914e96", "embedding": null, "doc_hash": "a27c987cbfe1536ef60f53aabe5713fc67bd26b9e445417e22ac6a0fa71603b2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcommittee"}, "node_info": {"start": 1668, "end": 2067, "_node_type": "1"}, "relationships": {"1": "7330f6f7926be311fa994213f7dbe90364f9aa67", "2": "a5409723-226f-45e6-a2fa-aeca4a69efec"}}, "__type__": "1"}, "b3e46934-f0ea-40c1-abfa-093a26f697e9": {"__data__": {"text": "\ufeff# getconnectioncount Method\n\nGets the current number of connections for the node.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"getconnectioncount\",\n   \"params\":[],\n   \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": 1,\n   \"result\": 10\n}\n```", "doc_id": "b3e46934-f0ea-40c1-abfa-093a26f697e9", "embedding": null, "doc_hash": "9b2963269eb0d86018a238b22c513b16691c583af41bad0dc4620c81c188f992", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getconnectioncount"}, "node_info": {"start": 0, "end": 432, "_node_type": "1"}, "relationships": {"1": "fff224d98b23673eedebb4f1a8e2df61896e97d1"}}, "__type__": "1"}, "d17e9882-b75a-46e5-9db4-83e173d675f8": {"__data__": {"text": "\ufeff# getcontractstate Method\n\nQueries the contract information with the contract script hash or native contract name. \n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\nscript_hash / name: Contract script hash or the native contract name.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getcontractstate\",\n  \"params\": [\"neotoken\"],\n  \"id\": 1\n}\n```\n\nor\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getcontractstate\",\n  \"params\": [\"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"id\": 383,\n        \"updatecounter\": 0,\n        \"hash\": \"0xe7f2e74b3498d3a0d80bcbd5925bca32e4acc4f7\",\n        \"nef\": {\n            \"magic\": 860243278,\n            \"compiler\": \"Neo.Compiler.CSharp 3.1.0\",\n            \"source\": \"https://github.com/neo-project/neo\",\n            \"tokens\": [\n                {\n                    \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"method\": \"update\",\n                    \"paramcount\": 3,\n                    \"hasreturnvalue\": false,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"method\": \"destroy\",\n                    \"paramcount\": 0,\n                    \"hasreturnvalue\": false,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xfe924b7cfe89ddd271abaf7210a80a7e11178758\",\n                    \"method\": \"request\",\n                    \"paramcount\": 5,\n                    \"hasreturnvalue\": false,\n            ", "doc_id": "d17e9882-b75a-46e5-9db4-83e173d675f8", "embedding": null, "doc_hash": "b7f9d91ff6c57019e898f8f33b6f58549004dc5a31e3fe0a082e528f95c80928", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 0, "end": 1775, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "3": "a606f230-2ffe-4143-b649-4f12f4b3d859"}}, "__type__": "1"}, "a606f230-2ffe-4143-b649-4f12f4b3d859": {"__data__": {"text": "\"hasreturnvalue\": false,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n                    \"method\": \"itoa\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n                    \"method\": \"jsonDeserialize\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"method\": \"getContract\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n                    \"method\": \"getTransaction\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                    \"callflags\": \"All\"\n                },\n                {\n                    \"hash\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n                    \"method\": \"getTransactionState\",\n                    \"paramcount\": 1,\n                    \"hasreturnvalue\": true,\n                  ", "doc_id": "a606f230-2ffe-4143-b649-4f12f4b3d859", "embedding": null, "doc_hash": "2fef1644e4ecab43ea3c5898bbacd4ab8e23ce1212ef04c655598003e1f4c3b2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 1752, "end": 3183, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "d17e9882-b75a-46e5-9db4-83e173d675f8", "3": "87cafe46-f1d8-4ddf-86d1-4323e5ec9be4"}}, "__type__": "1"}, "87cafe46-f1d8-4ddf-86d1-4323e5ec9be4": {"__data__": {"text": "                   \"callflags\": \"All\"\n                }\n            ],\n            \"script\":", "doc_id": "87cafe46-f1d8-4ddf-86d1-4323e5ec9be4", "embedding": null, "doc_hash": "43d3293570b290e826d2eec52783b1c6d7b3f5387bdd7da5c7aebf6fec6ae1fe", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 3208, "end": 3300, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "a606f230-2ffe-4143-b649-4f12f4b3d859", "3": "045a194f-f6bd-4ddc-b668-b21b3968b4a7"}}, "__type__": "1"}, "045a194f-f6bd-4ddc-b668-b21b3968b4a7": {"__data__": {"text": "    ],\n            \"script\": \"WEH4J+yMQEH4J+yMQDTzQFkMBmVuYWJsZUsRzlCLUBDOQZJd6DFK2CYERRDbIRGzQErYJgRFENshQEsRzlCLUBDOQZJd6DFANLiqJhYMEU5vIGF1dGhvcml6YXRpb24uOlkMBmVuYWJsZRESTRHOUYtREM5B5j8YhEASTRHOUYtREM5B5j8YhEA1d////6omFgwRTm8gYXV0aG9yaXphdGlvbi46WQwGZW5hYmxlEBJNEc5Ri1EQzkHmPxiEQFcAAzVP////JgYiKyIpDCRQYXltZW50IGlzIGRpc2FibGUgb24gdGhpcyBjb250cmFjdCE6QFcBAzUJ////qiYWDBFObyBhdXRob3JpemF0aW9uLjoLenlB2/6odBTAcGgfDAh0cmFuc2ZlcnhBYn1bUkXCSnjPSnnPSnrPDAtVbmxvY2tFdmVudEGVAW9hEdsgIgJAQdv+qHRAQWJ9W1JAVwIAEMBwaB8MCGlzUGF1c2VkWtsoStgkCUrKABQoAzpBYn1bUnHCSmnPDA1Jc1BhdXNlZEV2ZW50QZUBb2FpIgJA2yhK2CQJSsoAFCgDOkBXAAJ5JgQiGgwFV29ybGQMBUhlbGxvQZv2Z85B5j8YhEBB5j8YhEBBm/ZnzkBXAAI1If7//6omFgwRTm8gYXV0aG9yaXphdGlvbi46C3l4NwAAQDcAAEA1+v3//6omFgwRTm8gYXV0aG9yaXphdGlvbi46NwEAQDcBAEBXAgMMCGNhbGxiYWNrcAwIdXNlcmRhdGFxemloeHk3AgBANwIAQFcDBEE5U248DBRYhxcRfgqoEHKvq3HS3Yn+fEuS/pgmEgwNVW5hdXRob3JpemVkITp6EJgmLgwiT3JhY2xlIHJlc3BvbnNlIGZhaWx1cmUgd2l0aCBjb2RlIHo3AwCL2yg6ezcEAHBocWkQznIMCnVzZXJkYXRhOiB5i9soQc/nR5YMEHJlc3BvbnNlIHZhbHVlOiBqi9soQc/nR5ZAQTlTbjxADBRYhxcRfgqoEHKvq3HS3Yn+fEuS/kA3BABAQc/nR5ZAVwACeXhBm/ZnzkHmPxiEQFcBABFwIhtZaDcDAGgSTRHOUYtREM5B5j8YhGhKnHBFaAHoA7Uk4kBXAQBB2/6odDcFAHBoFM4VziICQDcFAEBXAQBB2/6odDcFAHBoFM4TziICQFcCAEEtUQgwcGgQznHCSmk3BgDPDBBUcmFuc2FjdGlvblN0YXRlQZUBb2FpNwcAIgJAQS1RCDBANwYAQDcHAEBWAwwUwJjkrPCyCQ3Rbss9WN5CaocVhRtgDBRC5UOC6G3", "doc_id": "045a194f-f6bd-4ddc-b668-b21b3968b4a7", "embedding": null, "doc_hash": "7c0f08539e7701cb767b1154228f84f858c0a406cd7b232254b36f7243e5cb8c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 3289, "end": 4634, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "87cafe46-f1d8-4ddf-86d1-4323e5ec9be4", "3": "95891c03-6d16-4d3d-8ef4-e83397fffd5f"}}, "__type__": "1"}, "95891c03-6d16-4d3d-8ef4-e83397fffd5f": {"__data__": {"text": "Nygng2ou2fi+sTUmHRGIMBWFzc2V0QZv2Z84SwGFAEsBA\",             \"checksum\": 1593448136\n        },\n        \"manifest\": {\n            \"name\": \"TestNetFee\",\n            \"groups\": [],\n            \"features\": {},\n            \"supportedstandards\": [\n                \"NEP-17\"\n            ],\n            \"abi\": {\n                \"methods\": [\n                    {\n                        \"name\": \"verify\",\n                        \"parameters\": [],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 13,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"getPaymentStatus\",\n                        \"parameters\": [],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 16,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"enablePayment\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 72,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"disablePayment\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 137,\n                        \"safe\": false\n         ", "doc_id": "95891c03-6d16-4d3d-8ef4-e83397fffd5f", "embedding": null, "doc_hash": "75c65855202541017b6a26eee4a879d32eeff89b54bd4a9845b5cef69fc8a94f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 4647, "end": 5999, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "045a194f-f6bd-4ddc-b668-b21b3968b4a7", "3": "16ee6768-2643-4d06-a9b3-88761721d629"}}, "__type__": "1"}, "16ee6768-2643-4d06-a9b3-88761721d629": {"__data__": {"text": "      \"safe\": false\n                    },\n                    {\n                        \"name\": \"onNEP17Payment\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"from\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"amount\",\n                                \"type\": \"Integer\"\n                            },\n                            {\n                                \"name\": \"data\",\n                                \"type\": \"Any\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 190,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"unlock\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"toAssetHash\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"toAddress\",\n                                \"type\": \"Hash160\"\n       ", "doc_id": "16ee6768-2643-4d06-a9b3-88761721d629", "embedding": null, "doc_hash": "225e66c7a4511af3b07452b197ec14098a9fb57e1c7b4a31879a6af356f6ff80", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 5987, "end": 7199, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "95891c03-6d16-4d3d-8ef4-e83397fffd5f", "3": "d420b00f-58ba-4faa-ab07-164c2e8f8577"}}, "__type__": "1"}, "d420b00f-58ba-4faa-ab07-164c2e8f8577": {"__data__": {"text": "     \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"amount\",\n                                \"type\": \"Integer\"\n                            }\n                        ],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 244,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"isPaused\",\n                        \"parameters\": [],\n                        \"returntype\": \"Boolean\",\n                        \"offset\": 351,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"_deploy\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"data\",\n                                \"type\": \"Any\"\n                            },\n                            {\n                                \"name\": \"update\",\n                                \"type\": \"Boolean\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 431,\n                        \"safe\": false\n              ", "doc_id": "d420b00f-58ba-4faa-ab07-164c2e8f8577", "embedding": null, "doc_hash": "9aacbd8dc8aaf65b13fd924448a988940830bc11fa1a462b1f0728c9d8f8404b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 7196, "end": 8427, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "16ee6768-2643-4d06-a9b3-88761721d629", "3": "2ef87355-599c-406e-9481-6de1747ffead"}}, "__type__": "1"}, "2ef87355-599c-406e-9481-6de1747ffead": {"__data__": {"text": " \"safe\": false\n                    },\n                    {\n                        \"name\": \"update\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"nefFile\",\n                                \"type\": \"ByteArray\"\n                            },\n                            {\n                                \"name\": \"manifest\",\n                                \"type\": \"String\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 476,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"destroy\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 518,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"doRequest\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"filter\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\":", "doc_id": "2ef87355-599c-406e-9481-6de1747ffead", "embedding": null, "doc_hash": "3ba80bb4628ea1f86e034115ed998ab52f119d78b07db5e2ba3fbfc4cee87982", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 8432, "end": 9661, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "d420b00f-58ba-4faa-ab07-164c2e8f8577", "3": "8c44cbd9-fee9-4cab-beda-cb9520635bba"}}, "__type__": "1"}, "8c44cbd9-fee9-4cab-beda-cb9520635bba": {"__data__": {"text": "                 \"name\": \"url\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"gasForResponse\",\n                                \"type\": \"Integer\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 554,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"callback\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"url\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"userdata\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"code\",\n                                \"type\": \"Integer\"\n                            },\n                            {\n                                \"name\": \"result\",\n                                \"type\": \"String\"\n                            }\n        ", "doc_id": "8c44cbd9-fee9-4cab-beda-cb9520635bba", "embedding": null, "doc_hash": "d7b398b3541a70fb78e268a783f95adeae794504adbe0987285bfc7a82c11e0d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 9668, "end": 10872, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "2ef87355-599c-406e-9481-6de1747ffead", "3": "c2a3ea98-7cbf-4ad1-959a-06864eb76073"}}, "__type__": "1"}, "c2a3ea98-7cbf-4ad1-959a-06864eb76073": {"__data__": {"text": "          }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 592,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"put\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"key\",\n                                \"type\": \"String\"\n                            },\n                            {\n                                \"name\": \"value\",\n                                \"type\": \"String\"\n                            }\n                        ],\n                        \"returntype\": \"Void\",\n                        \"offset\": 789,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"putMulti\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 805,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"testPermission\",\n                        \"parameters\": [],\n                        \"returntype\": \"Any\",\n                        \"offset\": 845,\n               ", "doc_id": "c2a3ea98-7cbf-4ad1-959a-06864eb76073", "embedding": null, "doc_hash": "6831391fa4e1ed9f354a44a0602bb5604f6894f1b31326394a3cb536fa34e9a3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 10878, "end": 12119, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "8c44cbd9-fee9-4cab-beda-cb9520635bba", "3": "bb3eeef8-7446-4c3c-9591-39e4b51f3e1f"}}, "__type__": "1"}, "bb3eeef8-7446-4c3c-9591-39e4b51f3e1f": {"__data__": {"text": "845,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"testSupportedStandards\",\n                        \"parameters\": [],\n                        \"returntype\": \"Any\",\n                        \"offset\": 869,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"getState\",\n                        \"parameters\": [],\n                        \"returntype\": \"Any\",\n                        \"offset\": 889,\n                        \"safe\": false\n                    },\n                    {\n                        \"name\": \"_initialize\",\n                        \"parameters\": [],\n                        \"returntype\": \"Void\",\n                        \"offset\": 953,\n                        \"safe\": false\n                    }\n                ],\n                \"events\": [\n                    {\n                        \"name\": \"UnlockEvent\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"arg1\",\n                                \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"arg2\",\n                             ", "doc_id": "bb3eeef8-7446-4c3c-9591-39e4b51f3e1f", "embedding": null, "doc_hash": "fccb0f436bc4c4c87ba1870dac3e0bdd44defd28429c6d158644c1b844810097", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 12117, "end": 13381, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "c2a3ea98-7cbf-4ad1-959a-06864eb76073", "3": "a7a8b652-7762-4129-ad82-c77150b5cc55"}}, "__type__": "1"}, "a7a8b652-7762-4129-ad82-c77150b5cc55": {"__data__": {"text": "                      \"type\": \"Hash160\"\n                            },\n                            {\n                                \"name\": \"arg3\",\n                                \"type\": \"Integer\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"IsPausedEvent\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"obj\",\n                                \"type\": \"Any\"\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"TransactionState\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"obj\",\n                                \"type\": \"Any\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"permissions\": [\n                {\n                    \"contract\": \"0x42e54382e86dcdca09e0da8bb67e2fac4d498744\",\n                    \"methods\": [\n                        \"test\"\n                    ]\n                },\n                {\n   ", "doc_id": "a7a8b652-7762-4129-ad82-c77150b5cc55", "embedding": null, "doc_hash": "af04e87ceeaa7d651021e577614a424aa5fa2822eff713b2fdfcf1fb5dbd40a0", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 13387, "end": 14577, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "bb3eeef8-7446-4c3c-9591-39e4b51f3e1f", "3": "10ed4bd5-4d61-47c2-ab93-56c400d5f8de"}}, "__type__": "1"}, "10ed4bd5-4d61-47c2-ab93-56c400d5f8de": {"__data__": {"text": "               {\n                    \"contract\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n                    \"methods\": [\n                        \"itoa\",\n                        \"jsonDeserialize\"\n                    ]\n                },\n                {\n                    \"contract\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n                    \"methods\": [\n                        \"getTransaction\",\n                        \"getTransactionState\"\n                    ]\n                },\n                {\n                    \"contract\": \"0xfe924b7cfe89ddd271abaf7210a80a7e11178758\",\n                    \"methods\": [\n                        \"request\"\n                    ]\n                },\n                {\n                    \"contract\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                    \"methods\": [\n                        \"destroy\",\n                        \"getContract\",\n                        \"update\"\n                    ]\n                }\n            ],\n            \"trusts\": [],\n            \"extra\": {\n                \"Author\": \"Neo\",\n                \"Email\": \"dev@neo.org\",\n                \"Description\": \"This is a contract example\"\n            }\n        }\n    }\n}\n```\n", "doc_id": "10ed4bd5-4d61-47c2-ab93-56c400d5f8de", "embedding": null, "doc_hash": "5aaca0872946e595d0d018c7889c693e8c4643347cbec51ebd3f97a476888983", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}, "node_info": {"start": 14557, "end": 15771, "_node_type": "1"}, "relationships": {"1": "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff", "2": "a7a8b652-7762-4129-ad82-c77150b5cc55"}}, "__type__": "1"}, "29d15c67-2e2b-4f79-9056-1a1ab8fd1d91": {"__data__": {"text": "# getnativecontracts Method\n\nGets the native contracts list, which includes the basic information of native contracts and the contract descriptive file manifest.json.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"getnativecontracts\",\n    \"params\": []\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"id\": -1,\n            \"hash\": \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 1110259869\n            },\n            \"manifest\": {\n                \"name\": \"ContractManagement\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"deploy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                            ", "doc_id": "29d15c67-2e2b-4f79-9056-1a1ab8fd1d91", "embedding": null, "doc_hash": "6bfb52f2e7d313e123dfff8a765d61a0963a6039195a772978093273706dc629", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 0, "end": 1586, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "3": "a4bd608a-9594-4a13-b34b-0c1f68911341"}}, "__type__": "1"}, "a4bd608a-9594-4a13-b34b-0c1f68911341": {"__data__": {"text": "                           \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"deploy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 7,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"destroy\",\n ", "doc_id": "a4bd608a-9594-4a13-b34b-0c1f68911341", "embedding": null, "doc_hash": "a905ec4f4ff1d90014bf116b172d8237ff9abb4292b5dda56fd508adc50f05b2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 1587, "end": 2773, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "29d15c67-2e2b-4f79-9056-1a1ab8fd1d91", "3": "45110e81-f434-47f0-8332-93bce319f229"}}, "__type__": "1"}, "45110e81-f434-47f0-8332-93bce319f229": {"__data__": {"text": "            \"name\": \"destroy\",\n                            \"parameters\": [],\n                            \"returntype\": \"Void\",\n                            \"offset\": 14,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getContract\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getMinimumDeploymentFee\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"setMinimumDeploymentFee\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n          ", "doc_id": "45110e81-f434-47f0-8332-93bce319f229", "embedding": null, "doc_hash": "3c2a2323fc1cbdcc05a9fe450a393b52f4577fd1da1b7d03551bc7fb4bd95c5c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 2756, "end": 4009, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "a4bd608a-9594-4a13-b34b-0c1f68911341", "3": "b6a8d84a-340f-4a3a-be5b-b8dcd2ff784a"}}, "__type__": "1"}, "b6a8d84a-340f-4a3a-be5b-b8dcd2ff784a": {"__data__": {"text": "   \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 35,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"update\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 42,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"update\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"nefFile\",\n                       ", "doc_id": "b6a8d84a-340f-4a3a-be5b-b8dcd2ff784a", "embedding": null, "doc_hash": "f9ca1b7d96e2a24822ad736537dab9a6e41daaceb55f345464a519515b7c6911", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 4012, "end": 5208, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "45110e81-f434-47f0-8332-93bce319f229", "3": "2b638439-6ef4-43bd-baf9-4b9fa377c290"}}, "__type__": "1"}, "2b638439-6ef4-43bd-baf9-4b9fa377c290": {"__data__": {"text": "                                \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"manifest\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 49,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Deploy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"Update\",\n                            \"parameters\": [\n                      ", "doc_id": "2b638439-6ef4-43bd-baf9-4b9fa377c290", "embedding": null, "doc_hash": "f32e4d256611dc00bf2572ec95ae415936b25374686369aede21b7d6e664b315", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 5225, "end": 6394, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "b6a8d84a-340f-4a3a-be5b-b8dcd2ff784a", "3": "3c12d068-c269-4f55-8111-74fe50a4d334"}}, "__type__": "1"}, "3c12d068-c269-4f55-8111-74fe50a4d334": {"__data__": {"text": "                             {\n                                    \"name\": \"Hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"Destroy\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Hash\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -2,\n            \"hash\": \"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n          ", "doc_id": "3c12d068-c269-4f55-8111-74fe50a4d334", "embedding": null, "doc_hash": "e87e718d5099ffb62498e33ce96bffe30edb1b878467d13de0b7b9095e0d48e4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 6395, "end": 7606, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "2b638439-6ef4-43bd-baf9-4b9fa377c290", "3": "c442b12f-a8ce-4edc-a9a5-ef7f65492baa"}}, "__type__": "1"}, "c442b12f-a8ce-4edc-a9a5-ef7f65492baa": {"__data__": {"text": "  \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 1325686241\n            },\n            \"manifest\": {\n                \"name\": \"StdLib\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"atoi\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"atoi\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"String\"\n                     ", "doc_id": "c442b12f-a8ce-4edc-a9a5-ef7f65492baa", "embedding": null, "doc_hash": "1e4c37738b3ab17ebf41eeae83fabd202808f89bb7fcc3f8931241c6e31c9121", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 7594, "end": 8860, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "3c12d068-c269-4f55-8111-74fe50a4d334", "3": "0687a625-8cb9-4c13-8b20-6a1be2dc396e"}}, "__type__": "1"}, "0687a625-8cb9-4c13-8b20-6a1be2dc396e": {"__data__": {"text": "                              },\n                                {\n                                    \"name\": \"base\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58CheckDecode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"s\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58CheckEncode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n", "doc_id": "0687a625-8cb9-4c13-8b20-6a1be2dc396e", "embedding": null, "doc_hash": "2d6ecbc68228506bf1a87a84a9fdb82f645c9ff42dc4b8f618e3ec39b5f87ce6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 8874, "end": 10070, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "c442b12f-a8ce-4edc-a9a5-ef7f65492baa", "3": "6f5cba5e-9e9e-400c-9ec2-e5ba076cf4ac"}}, "__type__": "1"}, "6f5cba5e-9e9e-400c-9ec2-e5ba076cf4ac": {"__data__": {"text": "                  }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58Decode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"s\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base58Encode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 35,\n                            \"safe\": true\n                        },\n        ", "doc_id": "6f5cba5e-9e9e-400c-9ec2-e5ba076cf4ac", "embedding": null, "doc_hash": "ef53ea5e9bd6d2beddf6fcabfcbfdd85d638e5acf32d6a04f622b5c3a2b49668", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 10069, "end": 11269, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "0687a625-8cb9-4c13-8b20-6a1be2dc396e", "3": "bd6b3dc8-928a-44de-b663-be4f7a2a3f77"}}, "__type__": "1"}, "bd6b3dc8-928a-44de-b663-be4f7a2a3f77": {"__data__": {"text": "          },\n                        {\n                            \"name\": \"base64Decode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"s\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 42,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"base64Encode\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 49,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"deserialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n   ", "doc_id": "bd6b3dc8-928a-44de-b663-be4f7a2a3f77", "embedding": null, "doc_hash": "fe767aea02f064eefb3cddc777044289c00a61dcedbd4c8bda062bbe426cb0b3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 11269, "end": 12471, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "6f5cba5e-9e9e-400c-9ec2-e5ba076cf4ac", "3": "32fc5cf8-dee1-4dd4-a0ed-365498b84361"}}, "__type__": "1"}, "32fc5cf8-dee1-4dd4-a0ed-365498b84361": {"__data__": {"text": "          \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Any\",\n                            \"offset\": 56,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"itoa\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 63,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"itoa\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"base\",\n                      ", "doc_id": "32fc5cf8-dee1-4dd4-a0ed-365498b84361", "embedding": null, "doc_hash": "a597a439e37726e756d848a42efad69af1b026692c63277c75290e2a45639cc2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 12460, "end": 13646, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "bd6b3dc8-928a-44de-b663-be4f7a2a3f77", "3": "199a6612-03df-4d21-ba85-2ee1f9d927b9"}}, "__type__": "1"}, "199a6612-03df-4d21-ba85-2ee1f9d927b9": {"__data__": {"text": "                                 \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"String\",\n                            \"offset\": 70,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"jsonDeserialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"json\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Any\",\n                            \"offset\": 77,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"jsonSerialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"item\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 84,\n             ", "doc_id": "199a6612-03df-4d21-ba85-2ee1f9d927b9", "embedding": null, "doc_hash": "9bd203e77f561e2a472cf5f07d2acbf5d8cde74c04bc76288bd2adc7818c25e0", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 13662, "end": 14865, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "32fc5cf8-dee1-4dd4-a0ed-365498b84361", "3": "2994cc03-b96d-41f6-9f2a-fb579b5bbc32"}}, "__type__": "1"}, "2994cc03-b96d-41f6-9f2a-fb579b5bbc32": {"__data__": {"text": " \"offset\": 84,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memoryCompare\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"str1\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"str2\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 91,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memorySearch\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"mem\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"ByteArray\"\n         ", "doc_id": "2994cc03-b96d-41f6-9f2a-fb579b5bbc32", "embedding": null, "doc_hash": "879962b820e3037b84a88ecf1e3d28f5428056cd58372e7943c4f756f0dc0824", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 14853, "end": 16056, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "199a6612-03df-4d21-ba85-2ee1f9d927b9", "3": "7e155318-daa8-468d-b8a3-e104c2d8c350"}}, "__type__": "1"}, "7e155318-daa8-468d-b8a3-e104c2d8c350": {"__data__": {"text": "   \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 98,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memorySearch\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"mem\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"start\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 105,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"memorySearch\",\n                           ", "doc_id": "7e155318-daa8-468d-b8a3-e104c2d8c350", "embedding": null, "doc_hash": "fc2376a192dc7b835e254111e64ec07721deeebfed60ed3e2f99f55c9b23f7a5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 16051, "end": 17253, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "2994cc03-b96d-41f6-9f2a-fb579b5bbc32", "3": "cee9c266-6899-4345-b818-d84e4f32a716"}}, "__type__": "1"}, "cee9c266-6899-4345-b818-d84e4f32a716": {"__data__": {"text": "                    \"parameters\": [\n                                {\n                                    \"name\": \"mem\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"start\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"backward\",\n                                    \"type\": \"Boolean\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 112,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"serialize\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"item\",\n                                  ", "doc_id": "cee9c266-6899-4345-b818-d84e4f32a716", "embedding": null, "doc_hash": "01d630ff76ae24126f4feac6b9659987c870c8c98482afa351f2a67445a9b119", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 17273, "end": 18451, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "7e155318-daa8-468d-b8a3-e104c2d8c350", "3": "a5e21047-a40f-4547-b8c5-448f9f5e7cb7"}}, "__type__": "1"}, "a5e21047-a40f-4547-b8c5-448f9f5e7cb7": {"__data__": {"text": "                     \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 119,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"stringSplit\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"str\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"separator\",\n                                    \"type\": \"String\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 126,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"stringSplit\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"str\",\n                                    \"type\": \"String\"\n          ", "doc_id": "a5e21047-a40f-4547-b8c5-448f9f5e7cb7", "embedding": null, "doc_hash": "aa820b3e832181e6bd551278cfa28600a484fbad24acca5a8b54084259fac3ab", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 18452, "end": 19652, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "cee9c266-6899-4345-b818-d84e4f32a716", "3": "5afb6fb0-87ab-4209-b6a2-8d02f6bcb1c5"}}, "__type__": "1"}, "5afb6fb0-87ab-4209-b6a2-8d02f6bcb1c5": {"__data__": {"text": "   \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"separator\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"removeEmptyEntries\",\n                                    \"type\": \"Boolean\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 133,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -3,\n            \"hash\": \"0x726cb6e0cd8628a1350a611384688911ab75f51b\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n        ", "doc_id": "5afb6fb0-87ab-4209-b6a2-8d02f6bcb1c5", "embedding": null, "doc_hash": "b37e8e071683d187ce67f0390f9125214d4d94a2a7e34179e539064d7a0bcee1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 19637, "end": 20889, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "a5e21047-a40f-4547-b8c5-448f9f5e7cb7", "3": "4475ccfb-e9a4-4987-9c47-7961c896379c"}}, "__type__": "1"}, "4475ccfb-e9a4-4987-9c47-7961c896379c": {"__data__": {"text": "      \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dA\",\n                \"checksum\": 1592866325\n            },\n            \"manifest\": {\n                \"name\": \"CryptoLib\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"ripemd160\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"sha256\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"ByteArray\",\n         ", "doc_id": "4475ccfb-e9a4-4987-9c47-7961c896379c", "embedding": null, "doc_hash": "27f25ae2396273d019a8f720ca2c413f76f35968d2f007c9ae58121e7c1102cb", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 20893, "end": 22157, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "5afb6fb0-87ab-4209-b6a2-8d02f6bcb1c5", "3": "f0151e78-cba1-4bed-9522-a751b8e22919"}}, "__type__": "1"}, "f0151e78-cba1-4bed-9522-a751b8e22919": {"__data__": {"text": "\"returntype\": \"ByteArray\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"verifyWithECDsa\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"message\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"pubkey\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"signature\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"curve\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        }\n                    ],\n       ", "doc_id": "f0151e78-cba1-4bed-9522-a751b8e22919", "embedding": null, "doc_hash": "fed7944736e941262b7f203f633824e106fde5d8b0b756e5afba3870e9708bfe", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 22145, "end": 23345, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "4475ccfb-e9a4-4987-9c47-7961c896379c", "3": "c7563bfd-c41d-4cf4-a4d4-13657cbffba3"}}, "__type__": "1"}, "c7563bfd-c41d-4cf4-a4d4-13657cbffba3": {"__data__": {"text": "           ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -4,\n            \"hash\": \"0xda65b600f7124ce6c79950c1772a36403104f2be\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dA\",\n                \"checksum\": 529571427\n            },\n            \"manifest\": {\n                \"name\": \"LedgerContract\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"currentHash\",\n                            \"parameters\": [],\n                            \"returntype\": \"Hash256\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n ", "doc_id": "c7563bfd-c41d-4cf4-a4d4-13657cbffba3", "embedding": null, "doc_hash": "275a367a44ad631d9793da50441f8bdc0aafaadb86b06abab86b5cd63d5f2a77", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 23369, "end": 24701, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "f0151e78-cba1-4bed-9522-a751b8e22919", "3": "169d38f8-7574-4918-881c-9e9a70b117ee"}}, "__type__": "1"}, "169d38f8-7574-4918-881c-9e9a70b117ee": {"__data__": {"text": "                 {\n                            \"name\": \"currentIndex\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getBlock\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"indexOrHash\",\n                                    \"type\": \"ByteArray\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getTransaction\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"hash\",\n                                    \"type\": \"Hash256\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 21,\n                           ", "doc_id": "169d38f8-7574-4918-881c-9e9a70b117ee", "embedding": null, "doc_hash": "94d972a2f737b8bc1e477d95883a6357246fd147c924482183957f3368b18078", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 24703, "end": 25924, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "c7563bfd-c41d-4cf4-a4d4-13657cbffba3", "3": "03164d30-f69c-42bc-a142-0be141e86f67"}}, "__type__": "1"}, "03164d30-f69c-42bc-a142-0be141e86f67": {"__data__": {"text": "                    \"safe\": true\n                        },\n                        {\n                            \"name\": \"getTransactionFromBlock\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"blockIndexOrHash\",\n                                    \"type\": \"ByteArray\"\n                                },\n                                {\n                                    \"name\": \"txIndex\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getTransactionHeight\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"hash\",\n                                    \"type\": \"Hash256\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 35,\n                            \"safe\": true\n      ", "doc_id": "03164d30-f69c-42bc-a142-0be141e86f67", "embedding": null, "doc_hash": "40380a7e236e1b389ae5405fd10d35ff933f39ddbbe41539bdbda723e1bec394", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 25927, "end": 27155, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "169d38f8-7574-4918-881c-9e9a70b117ee", "3": "df2119d7-4c81-4368-b804-307b264a0d3f"}}, "__type__": "1"}, "df2119d7-4c81-4368-b804-307b264a0d3f": {"__data__": {"text": "         \"safe\": true\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -5,\n            \"hash\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 588003825\n            },\n            \"manifest\": {\n                \"name\": \"NeoToken\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [\n                    \"NEP-17\"\n                ],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"balanceOf\",\n                   ", "doc_id": "df2119d7-4c81-4368-b804-307b264a0d3f", "embedding": null, "doc_hash": "34f4989eba0428cda48fbe9cb66228b13ae8b5641fda760f0e6bdfc60a996c92", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 27144, "end": 28459, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "03164d30-f69c-42bc-a142-0be141e86f67", "3": "09aa24ff-b96a-4b0e-ba6f-2fd3328b6b90"}}, "__type__": "1"}, "09aa24ff-b96a-4b0e-ba6f-2fd3328b6b90": {"__data__": {"text": "                           \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"decimals\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getAccountState\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n", "doc_id": "09aa24ff-b96a-4b0e-ba6f-2fd3328b6b90", "embedding": null, "doc_hash": "63ce601d8f19c7596de1cc943ed1846b90152af07350dbaadb0fb1c0eb2c0ca1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 28472, "end": 29687, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "df2119d7-4c81-4368-b804-307b264a0d3f", "3": "c989885d-1ab9-4405-be4f-15dd546f7f97"}}, "__type__": "1"}, "c989885d-1ab9-4405-be4f-15dd546f7f97": {"__data__": {"text": "                  {\n                            \"name\": \"getCandidates\",\n                            \"parameters\": [],\n                            \"returntype\": \"Array\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getCommittee\",\n                            \"parameters\": [],\n                            \"returntype\": \"Array\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getGasPerBlock\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 35,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getNextBlockValidators\",\n                            \"parameters\": [],\n                            \"returntype\": \"Array\",\n                            \"offset\": 42,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getRegisterPrice\",\n                            \"parameters\": [],\n       ", "doc_id": "c989885d-1ab9-4405-be4f-15dd546f7f97", "embedding": null, "doc_hash": "ab451dea8087fc72ab3749563dadf9fc1e3915893ce710ec1a7873411678e511", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 29686, "end": 30970, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "09aa24ff-b96a-4b0e-ba6f-2fd3328b6b90", "3": "a8e39ba5-de39-4822-8bd0-12a75208b685"}}, "__type__": "1"}, "a8e39ba5-de39-4822-8bd0-12a75208b685": {"__data__": {"text": "      \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 49,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"registerCandidate\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"pubkey\",\n                                    \"type\": \"PublicKey\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 56,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setGasPerBlock\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"gasPerBlock\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 63,\n                            \"safe\": false\n                        },\n                        {\n                ", "doc_id": "a8e39ba5-de39-4822-8bd0-12a75208b685", "embedding": null, "doc_hash": "bb2e8aa5b54b58e69d0914a0c521f39d0ecb42df9c8bb1382b12dad30b000325", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 30956, "end": 32182, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "c989885d-1ab9-4405-be4f-15dd546f7f97", "3": "4e09adab-8394-433a-bc5c-cddea62f441f"}}, "__type__": "1"}, "4e09adab-8394-433a-bc5c-cddea62f441f": {"__data__": {"text": "  {\n                            \"name\": \"setRegisterPrice\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"registerPrice\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 70,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"symbol\",\n                            \"parameters\": [],\n                            \"returntype\": \"String\",\n                            \"offset\": 77,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"totalSupply\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 84,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"transfer\",\n                            \"parameters\": [\n                                {\n                                    \"name\":", "doc_id": "4e09adab-8394-433a-bc5c-cddea62f441f", "embedding": null, "doc_hash": "4189b2fb5c53b94082ca10e8930a9db0c3e58eb8d238845b0ad7f88c1cc0989b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 32198, "end": 33438, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "a8e39ba5-de39-4822-8bd0-12a75208b685", "3": "39e0a9c0-9bc5-45cb-96e7-83b613c36e03"}}, "__type__": "1"}, "39e0a9c0-9bc5-45cb-96e7-83b613c36e03": {"__data__": {"text": "                 \"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 91,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"unclaimedGas\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n  ", "doc_id": "39e0a9c0-9bc5-45cb-96e7-83b613c36e03", "embedding": null, "doc_hash": "b4c59365d7ecd9e2fe1836d4e988fb06b921975e654db460b2f8918ce6c397ee", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 33434, "end": 34607, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "4e09adab-8394-433a-bc5c-cddea62f441f", "3": "afba4ac7-c1d6-49f5-a8cc-830d15bf2eaa"}}, "__type__": "1"}, "afba4ac7-c1d6-49f5-a8cc-830d15bf2eaa": {"__data__": {"text": "                {\n                                    \"name\": \"end\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 98,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"unregisterCandidate\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"pubkey\",\n                                    \"type\": \"PublicKey\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 105,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"vote\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                 ", "doc_id": "afba4ac7-c1d6-49f5-a8cc-830d15bf2eaa", "embedding": null, "doc_hash": "8e6c0cf6f9dfc3864f98d288ee2943d6c8c1fdf21352e5d6ff67670783a2d02a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 34613, "end": 35810, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "39e0a9c0-9bc5-45cb-96e7-83b613c36e03", "3": "58d171d1-37b3-4994-b48b-c267b1b1615a"}}, "__type__": "1"}, "58d171d1-37b3-4994-b48b-c267b1b1615a": {"__data__": {"text": " {\n                                    \"name\": \"voteTo\",\n                                    \"type\": \"PublicKey\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 112,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Transfer\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n       ", "doc_id": "58d171d1-37b3-4994-b48b-c267b1b1615a", "embedding": null, "doc_hash": "deb9af099e83eb769667770ecdea858ba3f8f3e44bea4b562ecc8333cadb4cac", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 35811, "end": 36987, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "afba4ac7-c1d6-49f5-a8cc-830d15bf2eaa", "3": "f4020f5f-61f1-44ed-8d0a-1427f9d8cc06"}}, "__type__": "1"}, "f4020f5f-61f1-44ed-8d0a-1427f9d8cc06": {"__data__": {"text": "       \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -6,\n            \"hash\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 2663858513\n            },\n            \"manifest\": {\n                \"name\": \"GasToken\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [\n                    \"NEP-17\"\n                ],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"balanceOf\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n    ", "doc_id": "f4020f5f-61f1-44ed-8d0a-1427f9d8cc06", "embedding": null, "doc_hash": "3ef1ec66eb975dc993781d77af2cba2556a9c2b5ce44f1a8c2d2867ada63828f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 36974, "end": 38283, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "58d171d1-37b3-4994-b48b-c267b1b1615a", "3": "dadf4026-ce43-4ec2-bd58-987afd5df530"}}, "__type__": "1"}, "dadf4026-ce43-4ec2-bd58-987afd5df530": {"__data__": {"text": "              ],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 0,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"decimals\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"symbol\",\n                            \"parameters\": [],\n                            \"returntype\": \"String\",\n                            \"offset\": 14,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"totalSupply\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"transfer\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"from\",\n             ", "doc_id": "dadf4026-ce43-4ec2-bd58-987afd5df530", "embedding": null, "doc_hash": "4988a3fb442c38b3ff60e7e9c8c5b7903bf518f153804b69163258a509fb7284", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 38297, "end": 39541, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "f4020f5f-61f1-44ed-8d0a-1427f9d8cc06", "3": "4f6ae139-1429-4750-ad00-4f6df2d847f9"}}, "__type__": "1"}, "4f6ae139-1429-4750-ad00-4f6df2d847f9": {"__data__": {"text": "\"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"data\",\n                                    \"type\": \"Any\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 28,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Transfer\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"from\",\n                                    \"type\": \"Hash160\"\n                                },\n         ", "doc_id": "4f6ae139-1429-4750-ad00-4f6df2d847f9", "embedding": null, "doc_hash": "0c503e44bdc9508cc93fe6bcdf55f3125428f4831f98a1eb11b496599f6800f3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 39530, "end": 40706, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "dadf4026-ce43-4ec2-bd58-987afd5df530", "3": "a1d4753c-295a-45c9-8cf3-e46267c4024f"}}, "__type__": "1"}, "a1d4753c-295a-45c9-8cf3-e46267c4024f": {"__data__": {"text": "         },\n                                {\n                                    \"name\": \"to\",\n                                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"amount\",\n                                    \"type\": \"Integer\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -7,\n            \"hash\": \"0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0AQQRr3e2dA\",\n                \"checksum\": 3443651689\n            },\n            \"manifest\": {\n     ", "doc_id": "a1d4753c-295a-45c9-8cf3-e46267c4024f", "embedding": null, "doc_hash": "c116e19570dd171c1b287069989ce2b04d8580f41e5abd63826962587bc8c51b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 40719, "end": 41961, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "4f6ae139-1429-4750-ad00-4f6df2d847f9", "3": "949c3d60-1a3c-4460-a19c-9a9ed46ee0e7"}}, "__type__": "1"}, "949c3d60-1a3c-4460-a19c-9a9ed46ee0e7": {"__data__": {"text": "         \"manifest\": {\n                \"name\": \"PolicyContract\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"blockAccount\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getExecFeeFactor\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"getFeePerByte\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 14,\n                            \"safe\": true\n                ", "doc_id": "949c3d60-1a3c-4460-a19c-9a9ed46ee0e7", "embedding": null, "doc_hash": "018559c8face35a0ae537f90d5af3183f93baeeb56eeba3677bc73fd7bd639b6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 41952, "end": 43239, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "a1d4753c-295a-45c9-8cf3-e46267c4024f", "3": "c4c91077-2ba2-4b61-8e4c-a64c3488fc38"}}, "__type__": "1"}, "c4c91077-2ba2-4b61-8e4c-a64c3488fc38": {"__data__": {"text": "true\n                        },\n                        {\n                            \"name\": \"getStoragePrice\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 21,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"isBlocked\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"setExecFeeFactor\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                        ", "doc_id": "c4c91077-2ba2-4b61-8e4c-a64c3488fc38", "embedding": null, "doc_hash": "a62e59c4567fb16b8b86d7aedbd5cd03d758deae318aab90725e9cf7f3f9a567", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 43248, "end": 44466, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "949c3d60-1a3c-4460-a19c-9a9ed46ee0e7", "3": "66ccc964-1328-4c6d-aadb-fd1fb703b4a7"}}, "__type__": "1"}, "66ccc964-1328-4c6d-aadb-fd1fb703b4a7": {"__data__": {"text": "                       \"offset\": 35,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setFeePerByte\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 42,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"setStoragePrice\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"value\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 49,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"unblockAccount\",\n                            \"parameters\": [\n    ", "doc_id": "66ccc964-1328-4c6d-aadb-fd1fb703b4a7", "embedding": null, "doc_hash": "55bc0f35dc5e813f6f2c0b9fba3a267adac333e22020da1d1a298b58959a11fe", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 44472, "end": 45688, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "c4c91077-2ba2-4b61-8e4c-a64c3488fc38", "3": "28054d84-28eb-43bb-bdd0-033762310173"}}, "__type__": "1"}, "28054d84-28eb-43bb-bdd0-033762310173": {"__data__": {"text": "          \"parameters\": [\n                                {\n                                    \"name\": \"account\",\n                                    \"type\": \"Hash160\"\n                                }\n                            ],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 56,\n                            \"safe\": false\n                        }\n                    ],\n                    \"events\": []\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        },\n        {\n            \"id\": -8,\n            \"hash\": \"0x49cf4e5378ffcd4dec034fd98a174c5491e395e2\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 983638438\n            },\n            \"manifest\": {\n                \"name\": \"RoleManagement\",\n                \"groups\": [],\n                \"features\": {},\n              ", "doc_id": "28054d84-28eb-43bb-bdd0-033762310173", "embedding": null, "doc_hash": "b6da168515c7d4e7d4aaaa79f3947dcd57c6106fe78bd307ad6a45ce17fb4f1f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 45674, "end": 46978, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "66ccc964-1328-4c6d-aadb-fd1fb703b4a7", "3": "1e152da7-61a9-4f62-9ef0-38a51bfe6187"}}, "__type__": "1"}, "1e152da7-61a9-4f62-9ef0-38a51bfe6187": {"__data__": {"text": "\"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"designateAsRole\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"role\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"nodes\",\n                                    \"type\": \"Array\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getDesignatedByRole\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"role\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"index\",\n                                    \"type\":", "doc_id": "1e152da7-61a9-4f62-9ef0-38a51bfe6187", "embedding": null, "doc_hash": "f488d82949800469bbeb7ec0f5a2ae0d5839ac4abf59cd3db837acb66cc0664d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 46979, "end": 48193, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "28054d84-28eb-43bb-bdd0-033762310173", "3": "9a3e4033-b9ab-46f1-b33c-420a35b82b0d"}}, "__type__": "1"}, "9a3e4033-b9ab-46f1-b33c-420a35b82b0d": {"__data__": {"text": "                 \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Array\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"Designation\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Role\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"BlockIndex\",\n                                    \"type\": \"Integer\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n ", "doc_id": "9a3e4033-b9ab-46f1-b33c-420a35b82b0d", "embedding": null, "doc_hash": "faa05523d2f1f2c4f82f609ed02904c3ec3fa9356204b76bb2c0e8e6b352e119", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 48202, "end": 49404, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "1e152da7-61a9-4f62-9ef0-38a51bfe6187", "3": "3adbcd0f-585f-4468-a00b-28c1aac3ea8e"}}, "__type__": "1"}, "3adbcd0f-585f-4468-a00b-28c1aac3ea8e": {"__data__": {"text": "    0\n            ]\n        },\n        {\n            \"id\": -9,\n            \"hash\": \"0xfe924b7cfe89ddd271abaf7210a80a7e11178758\",\n            \"nef\": {\n                \"magic\": 860243278,\n                \"compiler\": \"neo-core-v3.0\",\n                \"source\": \"\",\n                \"tokens\": [],\n                \"script\": \"EEEa93tnQBBBGvd7Z0AQQRr3e2dAEEEa93tnQBBBGvd7Z0A=\",\n                \"checksum\": 2663858513\n            },\n            \"manifest\": {\n                \"name\": \"OracleContract\",\n                \"groups\": [],\n                \"features\": {},\n                \"supportedstandards\": [],\n                \"abi\": {\n                    \"methods\": [\n                        {\n                            \"name\": \"finish\",\n                            \"parameters\": [],\n                            \"returntype\": \"Void\",\n                            \"offset\": 0,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"getPrice\",\n                            \"parameters\": [],\n                            \"returntype\": \"Integer\",\n                            \"offset\": 7,\n                            \"safe\": true\n                        },\n                        {\n                            \"name\": \"request\",\n                            \"parameters\":", "doc_id": "3adbcd0f-585f-4468-a00b-28c1aac3ea8e", "embedding": null, "doc_hash": "6134eb80ddcc4bcef76a80e569f7c26d248f93a2635eb74a61f51738bac9ace4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 49408, "end": 50735, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "9a3e4033-b9ab-46f1-b33c-420a35b82b0d", "3": "09433335-abfc-482a-9967-a8a3b80ec947"}}, "__type__": "1"}, "09433335-abfc-482a-9967-a8a3b80ec947": {"__data__": {"text": "                \"parameters\": [\n                                {\n                                    \"name\": \"url\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"filter\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"callback\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"userData\",\n                                    \"type\": \"Any\"\n                                },\n                                {\n                                    \"name\": \"gasForResponse\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 14,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\":", "doc_id": "09433335-abfc-482a-9967-a8a3b80ec947", "embedding": null, "doc_hash": "3ef17f39c1bc2e3d6d29a033362d8afcd024f60aa59ea980511cce4aa3a21ad4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 50727, "end": 51898, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "3adbcd0f-585f-4468-a00b-28c1aac3ea8e", "3": "1bc4c015-d6bc-40bf-858c-c7de018ab727"}}, "__type__": "1"}, "1bc4c015-d6bc-40bf-858c-c7de018ab727": {"__data__": {"text": "                 \"name\": \"setPrice\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"price\",\n                                    \"type\": \"Integer\"\n                                }\n                            ],\n                            \"returntype\": \"Void\",\n                            \"offset\": 21,\n                            \"safe\": false\n                        },\n                        {\n                            \"name\": \"verify\",\n                            \"parameters\": [],\n                            \"returntype\": \"Boolean\",\n                            \"offset\": 28,\n                            \"safe\": true\n                        }\n                    ],\n                    \"events\": [\n                        {\n                            \"name\": \"OracleRequest\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Id\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"RequestContract\",\n                                   ", "doc_id": "1bc4c015-d6bc-40bf-858c-c7de018ab727", "embedding": null, "doc_hash": "7f242ea8555d90499ec6195638001efd922317835b8c248860515c5f559c231d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 51905, "end": 53116, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "09433335-abfc-482a-9967-a8a3b80ec947", "3": "bd41f431-ec1c-46bd-b0be-6f973e0f7450"}}, "__type__": "1"}, "bd41f431-ec1c-46bd-b0be-6f973e0f7450": {"__data__": {"text": "                    \"type\": \"Hash160\"\n                                },\n                                {\n                                    \"name\": \"Url\",\n                                    \"type\": \"String\"\n                                },\n                                {\n                                    \"name\": \"Filter\",\n                                    \"type\": \"String\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"OracleResponse\",\n                            \"parameters\": [\n                                {\n                                    \"name\": \"Id\",\n                                    \"type\": \"Integer\"\n                                },\n                                {\n                                    \"name\": \"OriginalTx\",\n                                    \"type\": \"Hash256\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"permissions\": [\n                    {\n                        \"contract\": \"*\",\n              ", "doc_id": "bd41f431-ec1c-46bd-b0be-6f973e0f7450", "embedding": null, "doc_hash": "3acaa254bc60e115b7bc13932fec43a757d63eec8d6858b19e0a7d13086fc878", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 53124, "end": 54286, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "1bc4c015-d6bc-40bf-858c-c7de018ab727", "3": "fd08d9b2-74db-4b33-9a6e-2728796dba2a"}}, "__type__": "1"}, "fd08d9b2-74db-4b33-9a6e-2728796dba2a": {"__data__": {"text": "\"*\",\n                        \"methods\": \"*\"\n                    }\n                ],\n                \"trusts\": [],\n                \"extra\": null\n            },\n            \"updatehistory\": [\n                0\n            ]\n        }\n    ]\n}\n```\n\n", "doc_id": "fd08d9b2-74db-4b33-9a6e-2728796dba2a", "embedding": null, "doc_hash": "96b7026406307add4a70d395c3473f0345afb33a9d5cf070c367aa9d7e700f43", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}, "node_info": {"start": 54267, "end": 54513, "_node_type": "1"}, "relationships": {"1": "906c0d065612e59614ea7593639d979d529d674d", "2": "bd41f431-ec1c-46bd-b0be-6f973e0f7450"}}, "__type__": "1"}, "661006df-f4e8-4419-96a7-75d617dbd256": {"__data__": {"text": "# getnep11balances Method\n\nReturns the balance of all NEP11 assets in the specified address.\n\n:::note\nYou must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n## Parameter Description\n\naddress: The address that you want to query balance.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep11balances\",\n  \"params\": [\"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n        \"balance\": [\n            {\n                \"assethash\": \"0xb3b65e5c0d2af3f98cac6e80083f6c2b90476f40\",\n                \"tokens\": [\n                    {\n                        \"tokenid\": \"426c696e6420426f782032\",\n                        \"amount\": \"1\",\n                        \"lastupdatedblock\": 36653\n                    },\n                    {\n                        \"tokenid\": \"426c696e6420426f782033\",\n                        \"amount\": \"1\",\n                        \"lastupdatedblock\": 37100\n                    },\n                    {\n                        \"tokenid\": \"426c696e6420426f782031323635\",\n                        \"amount\": \"1\",\n                        \"lastupdatedblock\": 501483\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n:::note\n - Only when your client synchronizes to the block that the contract was", "doc_id": "661006df-f4e8-4419-96a7-75d617dbd256", "embedding": null, "doc_hash": "b5b5234e87cd39a783b1b5358e939191f084c879f4acb41a650fd921be806230", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11balances"}, "node_info": {"start": 0, "end": 1896, "_node_type": "1"}, "relationships": {"1": "a17f1453b5146aaa52a3011cd1dcd243056d7293", "3": "7bba6f49-4501-43be-94fd-374c2845f0bb"}}, "__type__": "1"}, "7bba6f49-4501-43be-94fd-374c2845f0bb": {"__data__": {"text": "- Only when your client synchronizes to the block that the contract was deployed, execution of this API will return the correct value, otherwise execution of the API will result in an error. \n:::\n> - When the input parameter is a script hash of a non-NEP11 smart contract, execution of the API will result in an error. \n> - Make sure your client has been fully synchronized to the latest block height before using this API, otherwise the balance returned may not be up-to-date.\n\n", "doc_id": "7bba6f49-4501-43be-94fd-374c2845f0bb", "embedding": null, "doc_hash": "95836f12dd21db1a32555b71d7ce9de54a0d63f38ca5a4feeb2c1cd411de2302", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11balances"}, "node_info": {"start": 1825, "end": 2304, "_node_type": "1"}, "relationships": {"1": "a17f1453b5146aaa52a3011cd1dcd243056d7293", "2": "661006df-f4e8-4419-96a7-75d617dbd256"}}, "__type__": "1"}, "a7bbcf78-1d09-442e-8dbc-dd9f9b9d09b9": {"__data__": {"text": "# getnep11properties Method\n\nGets the customized properties of the NEP-11 token, where the name, description, image, and tokenURI properties are automatically decoded by UTF8.\n\n:::note\n You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- contract: The contract hash\n\n- tokenId: The  hex string of token id\n\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep11properties\",\n  \"params\": [\"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\"452023313032204e6f697a\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"name\": \"E #102 Noiz\",\n        \"owner\": \"wJjkrPCyCQ3Rbss9WN5CaocVhRs=\",\n        \"number\": \"Zg==\",\n        \"image\": \"https://neo.org/Noiz.png\",\n        \"video\": null\n    }\n}\n```\n\n\n\n", "doc_id": "a7bbcf78-1d09-442e-8dbc-dd9f9b9d09b9", "embedding": null, "doc_hash": "c7b7100157d6a186b320d9ea84c70a85b3f99545b1d680d8f7b8d86221343004", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11properties"}, "node_info": {"start": 0, "end": 1016, "_node_type": "1"}, "relationships": {"1": "e609316cf7edc9da8c32bb3f805b24d0da13870d"}}, "__type__": "1"}, "09982871-ca94-4324-b88a-2170e75e1a6e": {"__data__": {"text": "# getnep11transfers Method\n\nReturns all the NEP11 transaction information occurred in the specified address.\n\n:::note\n You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- address: The address to query the transaction information.\n\n- startTime | endTime: Optional. The UTC timestamp which records the asset start or end  time (included).\n  - If start and end timestamps are specified, transactions occurred in the time range are returned.\n  - If only one timestamp is specified, transactions occurred since that time are returned.\n  - If not specified, transactions in recent seven days are returned.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep11transfers\",\n  \"params\": [\"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",1635146038919],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NdUL5oDPD159KeFpD5A9zw5xNF1xLX6nLT\",\n        \"sent\": [\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 0,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420412023343838\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": \"NNNPy5qxVD9yW2BavkwLdDybbR88NdvaGi\",\n                \"amount\": \"1000\",\n                \"blockindex\": 540423,\n        ", "doc_id": "09982871-ca94-4324-b88a-2170e75e1a6e", "embedding": null, "doc_hash": "c551a4c12e587a458b0a59404439b95463bcda6c261e4b1dfa083b30e3dba14e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11transfers"}, "node_info": {"start": 0, "end": 2203, "_node_type": "1"}, "relationships": {"1": "cbf7d105f46520d943a3feffb2e7949c68f35604", "3": "bd652133-adb7-4d2a-b0d2-f22a5166af8b"}}, "__type__": "1"}, "bd652133-adb7-4d2a-b0d2-f22a5166af8b": {"__data__": {"text": "   \"blockindex\": 540423,\n                \"transfernotifyindex\": 1,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420422023313734\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": \"NNNPy5qxVD9yW2BavkwLdDybbR88NdvaGi\",\n                \"amount\": \"10000\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 2,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420432023313238\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 3,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420442023363731\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 4,\n                \"txhash\":", "doc_id": "bd652133-adb7-4d2a-b0d2-f22a5166af8b", "embedding": null, "doc_hash": "1e271759b64614e7e69b3cd1587fd5f30f14d2af33aca82e7363f4f1011f630f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11transfers"}, "node_info": {"start": 2183, "end": 3679, "_node_type": "1"}, "relationships": {"1": "cbf7d105f46520d943a3feffb2e7949c68f35604", "2": "09982871-ca94-4324-b88a-2170e75e1a6e", "3": "37ef1c1d-32e2-4e9d-936a-7edd046f6b7a"}}, "__type__": "1"}, "37ef1c1d-32e2-4e9d-936a-7edd046f6b7a": {"__data__": {"text": "               \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420452023353832\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 5,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e74204620233736\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 6,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e7420472023333534\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 7,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\":", "doc_id": "37ef1c1d-32e2-4e9d-936a-7edd046f6b7a", "embedding": null, "doc_hash": "347e2d0b0f4d805a63fd03abb0f15d7d985d89022102b0cd2eba2ec27660cdf5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11transfers"}, "node_info": {"start": 3692, "end": 5179, "_node_type": "1"}, "relationships": {"1": "cbf7d105f46520d943a3feffb2e7949c68f35604", "2": "bd652133-adb7-4d2a-b0d2-f22a5166af8b", "3": "da55803c-854f-4300-88fa-08a4d160c408"}}, "__type__": "1"}, "da55803c-854f-4300-88fa-08a4d160c408": {"__data__": {"text": "               \"tokenid\": \"467261676d656e7420482023363432\"\n            },\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 8,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"467261676d656e742049202331323539\"\n            }\n        ],\n        \"received\": [\n            {\n                \"timestamp\": 1635146038919,\n                \"assethash\": \"0xd9e2093de3dc2ef7cf5704ceec46ab7fadd48e7f\",\n                \"transferaddress\": null,\n                \"amount\": \"1\",\n                \"blockindex\": 540423,\n                \"transfernotifyindex\": 9,\n                \"txhash\": \"0x683998f3a06b44be7b80be517bffda130de1fe75feae7b6e58d8372266fd87f6\",\n                \"tokenid\": \"4e20233134204e65726f\"\n            }\n        ]\n    }\n}\n```\n\n", "doc_id": "da55803c-854f-4300-88fa-08a4d160c408", "embedding": null, "doc_hash": "a20c42d03835ed68f99db9ea2165db5affb8c9df4f3479a12582b747e9203ad3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11transfers"}, "node_info": {"start": 5163, "end": 6195, "_node_type": "1"}, "relationships": {"1": "cbf7d105f46520d943a3feffb2e7949c68f35604", "2": "37ef1c1d-32e2-4e9d-936a-7edd046f6b7a"}}, "__type__": "1"}, "9ced92ca-7170-4e0f-beb9-76a5f40aeb79": {"__data__": {"text": "# getnep17balances Method\n\nReturns the balance of all NEP17 assets in the specified address.\n\n:::note\n You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\naddress: The address that you want to query balance.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep17balances\",\n  \"params\": [\"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"balance\": [\n            {\n                \"assethash\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"amount\": \"3000000100000000\",\n                \"lastupdatedblock\": 2\n            },\n            {\n                \"assethash\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"amount\": \"99999900\",\n                \"lastupdatedblock\": 2\n            }\n        ],\n        \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n    }\n}\n```\n\n\n\n:::note\n- Only when your client synchronizes to the block that the contract was deployed, execution of this API will return the correct value, otherwise execution of the API will result in an error. \n- When the input parameter is a script hash of a non-NEP17 smart contract, execution of the API will result in an error. \n- Make sure your client has been fully synchronized to the latest block height before using this API, otherwise the balance returned may not be up-to-date.\n:::\n", "doc_id": "9ced92ca-7170-4e0f-beb9-76a5f40aeb79", "embedding": null, "doc_hash": "de2eff63a4d5a77a4a561b56d1a41182c155d211930b9be78d2bdba104133303", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep17balances"}, "node_info": {"start": 0, "end": 1929, "_node_type": "1"}, "relationships": {"1": "21b24bebedfaa6a9248b003c87d2371566a009d8"}}, "__type__": "1"}, "801e9f66-027b-4b83-af29-4e14e0af3c0b": {"__data__": {"text": "# getnep17transfers Method\n\nReturns all the NEP17 transaction information occurred in the specified address.\n\n:::note\n You must install the plugin [TokensTracker](https://github.com/neo-project/neo-modules/releases), [LevelDBStore](https://github.com/neo-project/neo-modules/releases), and [RpcSever](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- address: The address to query the transaction information.\n\n- startTime | endTime: Optional. The UTC timestamp which records the asset start or end  time (included).\n  - If start and end timestamps are specified, transactions occurred in the time range are returned.\n  - If only one timestamp is specified, transactions occurred since that time are returned.\n  - If not specified, transactions in recent seven days are returned.\n\n## Configuration\n\nBefore invoking the method, you need to modify the following fields in the TokensTracker config.json file:\n\n- MaxResults: The maximum number of records. The exceeding portion will not be stored.\n- Network: Set it to the same value as Network in Neo-CLI config.json.\n\n## Example\n\n##### Example 1 - Set the start time:\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnep17transfers\",\n  \"params\": [\"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\", 0],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"sent\": [],\n        \"received\": [\n            {\n                \"timestamp\": 1612690497725,\n                \"assethash\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"100\",\n                \"blockindex\": 2,\n                \"transfernotifyindex\": 1,\n                \"txhash\": \"0x5f957960a782514d6587c445288ee1cca7d6b0f952edc204f14d9be83b8152ff\"\n            },\n            {\n                \"timestamp\": 1612690513541,\n                \"assethash\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"10000000000\",\n                \"blockindex\": 3,\n                \"transfernotifyindex\": 0,\n                \"txhash\":", "doc_id": "801e9f66-027b-4b83-af29-4e14e0af3c0b", "embedding": null, "doc_hash": "04440769467d6d07aebcca4c1fa912d42fa1b8671be31b43cd2bede8f939728f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep17transfers"}, "node_info": {"start": 0, "end": 2227, "_node_type": "1"}, "relationships": {"1": "16e1dc49bd445b7b9522f5832bb480cff2083cb0", "3": "472f813c-5a9f-42fe-a17e-bd218fa3a621"}}, "__type__": "1"}, "472f813c-5a9f-42fe-a17e-bd218fa3a621": {"__data__": {"text": "               \"txhash\": \"0xe42108b343626035cb51fbcb54949bb38aac50c8ba278841d304e9fdce0807ac\"\n            }\n        ],\n        \"address\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\"\n    }\n}\n```\n\n##### Example 2 - Set both timestamps:\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getnep17transfers\",\n    \"params\": [\"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\", 1611716619654, 2011716619654],\n    \"id\": 1\n}\n```\n\nResponse body: \n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"sent\": [],\n        \"received\": [\n            {\n                \"timestamp\": 1612690497725,\n                \"assethash\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"100\",\n                \"blockindex\": 2,\n                \"transfernotifyindex\": 1,\n                \"txhash\": \"0x5f957960a782514d6587c445288ee1cca7d6b0f952edc204f14d9be83b8152ff\"\n            },\n            {\n                \"timestamp\": 1612690513541,\n                \"assethash\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"transferaddress\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n                \"amount\": \"10000000000\",\n                \"blockindex\": 3,\n                \"transfernotifyindex\": 0,\n                \"txhash\": \"0xe42108b343626035cb51fbcb54949bb38aac50c8ba278841d304e9fdce0807ac\"\n            }\n        ],\n        \"address\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\"\n    }\n}\n```", "doc_id": "472f813c-5a9f-42fe-a17e-bd218fa3a621", "embedding": null, "doc_hash": "878c7a5b6e5dd9f2f1c4dfa280a4a4efdb60ed93b9a926b351c523e91d98ed9e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep17transfers"}, "node_info": {"start": 2203, "end": 3669, "_node_type": "1"}, "relationships": {"1": "16e1dc49bd445b7b9522f5832bb480cff2083cb0", "2": "801e9f66-027b-4b83-af29-4e14e0af3c0b"}}, "__type__": "1"}, "a20dc868-434e-491d-887f-198147fe9228": {"__data__": {"text": "\ufeff# getnewaddress Method\n\nCreates a new address.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnewaddress\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"NeMDdPDC29BfayYF7xNvnCSfCq9Drh1xKX\"\n}\n```\n\nResponse Description:\n\nReturns the newly created address.", "doc_id": "a20dc868-434e-491d-887f-198147fe9228", "embedding": null, "doc_hash": "fa809555664c2e2b06bd9af84cb3b29d1b3a84720f30644ff79a4da4df37fe65", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnewaddress"}, "node_info": {"start": 0, "end": 558, "_node_type": "1"}, "relationships": {"1": "194caadd1f3c83945174fb51d1e939937ef571ef"}}, "__type__": "1"}, "36f18ee7-0150-439b-8a09-d0cd396e17e6": {"__data__": {"text": "# getnextblockvalidators Method\n\nGets the validators list of the next block.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getnextblockvalidators\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": [\n    {\n      \"publickey\": \"03aa052fbcb8e5b33a4eefd662536f8684641f04109f1d5e69cdda6f084890286a\",\n      \"votes\": \"0\",\n      \"active\": true\n    }\n  ]\n}\n```\n\n`result` returns an array containing multiple validators. Every validator contains information about the public key, the votes, and whether it is a validator or not.\n\n:::note\nThe default vote of validator is 0 when voting has not started.\n:::", "doc_id": "36f18ee7-0150-439b-8a09-d0cd396e17e6", "embedding": null, "doc_hash": "c3683705f0ede42f46eca1b6d11dfb0d037e5d1137920602da8b49ee641f4e36", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnextblockvalidators"}, "node_info": {"start": 0, "end": 813, "_node_type": "1"}, "relationships": {"1": "5df31676dc6cc02789c0d35d4460c870a53bac60"}}, "__type__": "1"}, "9c3f2f13-352f-4e8f-8b53-af280f8534d7": {"__data__": {"text": "\ufeff# getpeers Method\n\nGets a list of nodes that the node is currently connected/disconnected from.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getpeers\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"unconnected\": [],\n        \"bad\": [],\n        \"connected\": [\n            {\n                \"address\": \"47.90.28.99\",\n                \"port\": 21333\n            },\n            {\n                \"address\": \"47.90.28.99\",\n                \"port\": 22333\n            }\n        ]\n    }\n}\n```\n\nResponse Description:\n\n- Unconnected: Nodes that are not currently connected.\n\n- Bad: Nodes that are no longer connected.\n\n- Connected: Nodes to which you are currently connected.\n", "doc_id": "9c3f2f13-352f-4e8f-8b53-af280f8534d7", "embedding": null, "doc_hash": "1e93e2ee0ece98685787bbc607de83eb81a5392949a8f5e451e2bd3720532ab4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getpeers"}, "node_info": {"start": 0, "end": 903, "_node_type": "1"}, "relationships": {"1": "9456abbb7f0a1a9ef72d5ad6ae2f9114d195428b"}}, "__type__": "1"}, "ae0e8dba-6f73-4780-80af-8bfb9ddbbb7a": {"__data__": {"text": "# getproof Method\nGets proof by querying root hash, contract hash, and storage key.\n\n:::note\n You must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- roothash: root hash of state root\n\n- scripthash: Contract script hash\n\n- key: key of the storage; Base64-encoded.\n\n## Configuration\n\nBefore you can invoke the getproof method you must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases), and then modify the following fields in the [StateService](https://github.com/neo-project/neo-modules/releases) config.json file\uff1a\n\n- FullState: Set to true, or the error message is returned as follows\uff1a\n\n  ```json\n  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n      \"code\": -100,\n      \"message\": \"Old state not supported\",\n      \"data\": \"   at Neo.Plugins.StateService.StatePlugin.GetProof(UInt256 root_hash, UInt160 script_hash, Byte[] key)\\r\\n   at Neo.Plugins.StateService.StatePlugin.GetProof(JArray _params)\\r\\n   at Neo.Plugins.RpcServer.ProcessRequest(HttpContext context, JObject request)\"\n    }\n  }\n  ```\n\n- Network: Set to the same value as `Network` in the Neo-cli config.json.\n\n- AutoVerify: Set whether to enable verification by default, and if yes, the default active wallet in Neo-cli is used as the verification node.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getproof\",\n  \"params\": [\"0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca\",\"0x79bcd398505eb779df6e67e4be6c14cded08e2f2\",\"Fw==\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"result\":", "doc_id": "ae0e8dba-6f73-4780-80af-8bfb9ddbbb7a", "embedding": null, "doc_hash": "6e1a49359ef05508f47e6f4320c889a8a2468f270274d80ccd0efc5f845a17e9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getproof"}, "node_info": {"start": 0, "end": 1820, "_node_type": "1"}, "relationships": {"1": "6a15e7acd980d7e2e41f9f55bef9b86ac6ec4bf6", "3": "65c6415b-200c-495d-b718-6b96290af076"}}, "__type__": "1"}, "65c6415b-200c-495d-b718-6b96290af076": {"__data__": {"text": "   \"id\": \"1\",\n    \"result\": \"Bfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\"\n}\n```", "doc_id": "65c6415b-200c-495d-b718-6b96290af076", "embedding": null, "doc_hash": "7d5b07be8811cd33ffcfa962a02ffa83fa29a1693bc859a76130958722ac5a3d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getproof"}, "node_info": {"start": 1793, "end": 2585, "_node_type": "1"}, "relationships": {"1": "6a15e7acd980d7e2e41f9f55bef9b86ac6ec4bf6", "2": "ae0e8dba-6f73-4780-80af-8bfb9ddbbb7a"}}, "__type__": "1"}, "3dae3807-46c1-4012-b8b7-9b7267147970": {"__data__": {"text": "\ufeff# getrawmempool Method\n\nObtains a list of confirmed / unconfirmed transactions in memory.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Examples\n\n##### Example 1 - Get verified transactions\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getrawmempool\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x9786cce0dddb524c40ddbdd5e31a41ed1f6b5c8a683c122f627ca4a007a7cf4e\",\n        \"0xb488ad25eb474f89d5ca3f985cc047ca96bc7373a6d3da8c0f192722896c1cd7\",\n        \"0xf86f6f2c08fbf766ebe59dc84bc3b8829f1053f0a01deb26bf7960d99fa86cd6\"\n    ]\n}\n```\n\nThese are the confirmed transactions received by nodes.\n\n##### Example 2 - Get verified and unverified transactions\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getrawmempool\",\n  \"params\": [true],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"height\": 5882071,\n    \"verified\": [\n      \"0x0c65fbfd2598aee5f30cd18f1264b458f1db137c4a460f4a174facb3f2d59d06\",\n      \"0xc8040c285aa495f5b5e5b3761fd9333899f4ed902951c46d86c3bbb1cb12f2c0\"\n    ],\n    \"unverified\": []\n  }\n}\n```", "doc_id": "3dae3807-46c1-4012-b8b7-9b7267147970", "embedding": null, "doc_hash": "cadfaa8739608ba929f5b2e1128525f9e4664907dfbede030e950f67d98120a1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getrawmempool"}, "node_info": {"start": 0, "end": 1249, "_node_type": "1"}, "relationships": {"1": "f8fa5aac2898710a42c2ba1e4ad97647b86cc2e6"}}, "__type__": "1"}, "f41d5b98-9ca1-42cc-8b44-cbdfc9659499": {"__data__": {"text": "\ufeff# getrawtransaction Method\n\nReturns the corresponding transaction information based on the specified hash value.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n* txid: Transaction ID\n\n* verbose: Optional. The default value is false. \n  * When verbose is false, serialized information of the block is returned in a Base64-encoded string. If you need the detailed information, use the SDK for deserialization. \n  * When verbose is true or 1, detailed information of the block is returned in Json format string.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"getrawtransaction\",\n  \"params\": [\"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\"]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"AIsJtw60lJgAAAAAAAjoIwAAAAAACxcAAAL6ifssFN8PWd3fBPblZRfys0qu6wDitlMicpPpnE8pBtU1U6u0pnLfhgEAXwsDAOQLVAIAAAAMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBTitlMicpPpnE8pBtU1U6u0pnLfhhTAHwwIdHJhbnNmZXIMFCizratyafnCGB2zy3Qev1UZMOJwQWJ9W1I5AkIMQLfVkTWSIgU9qfupqX+H0ViwPYtOTot/SbQptuHUYTFSpMB/J7sEOPITKV9HnT8BU1CSv6D6NdcwcZzEXgxRgFApDCECztQyOX3cRO26AxwLw7kz8o/dlnd5LXsg5sA23aqs8eILQZVEDXhCDED8PagPv03pnEbsxUY7XgFk/qniHcha36hDCzZsmaJkpFg5vbgxk5+QE46K0GFsNpsqDJHNToGD9jeXsPzSvD5TKxEMIQLO1DI5fdxE7boDHAvDuTPyj92Wd3kteyDmwDbdqqzx4hELQRON768=\"\n}\n```\n\nRequest body:\n\nWhen verbose = true, the result in Json format is returned:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getrawtransaction\",\n  \"params\": [\"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\", true],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c\",\n        \"size\": 386,\n        \"version\": 0,\n        \"nonce\": 246876555,\n        \"sender\":", "doc_id": "f41d5b98-9ca1-42cc-8b44-cbdfc9659499", "embedding": null, "doc_hash": "d9b9d9f32c65928a75e76b1c7b9d973746cee6fba5cce1c2237322eb63fe09f5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getrawtransaction"}, "node_info": {"start": 0, "end": 1921, "_node_type": "1"}, "relationships": {"1": "d4b9bdcab0205700b3e13c7c5a89bf6d29c1db5f", "3": "b0ae89c0-815c-47dd-ad57-2ab38604c927"}}, "__type__": "1"}, "b0ae89c0-815c-47dd-ad57-2ab38604c927": {"__data__": {"text": "246876555,\n        \"sender\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n        \"sysfee\": \"0.0999954\",\n        \"netfee\": \"0.0235316\",\n        \"validuntilblock\": 5899,\n        \"signers\": [\n            {\n                \"account\": \"0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\",\n                \"scopes\": \"None\"\n            },\n            {\n                \"account\": \"0x86df72a6b4ab5335d506294f9ce993722253b6e2\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"attributes\": [],\n        \"script\": \"CwMA5AtUAgAAAAwU+on7LBTfD1nd3wT25WUX8rNKrusMFOK2UyJyk+mcTykG1TVTq7Smct+GFMAfDAh0cmFuc2ZlcgwUKLOtq3Jp+cIYHbPLdB6/VRkw4nBBYn1bUjk=\",\n        \"witnesses\": [\n            {\n                \"invocation\": \"DEC31ZE1kiIFPan7qal/h9FYsD2LTk6Lf0m0Kbbh1GExUqTAfye7BDjyEylfR50/AVNQkr+g+jXXMHGcxF4MUYBQ\",\n                \"verification\": \"DCECztQyOX3cRO26AxwLw7kz8o/dlnd5LXsg5sA23aqs8eILQZVEDXg=\"\n            },\n            {\n                \"invocation\": \"DED8PagPv03pnEbsxUY7XgFk/qniHcha36hDCzZsmaJkpFg5vbgxk5+QE46K0GFsNpsqDJHNToGD9jeXsPzSvD5T\",\n                \"verification\": \"EQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n            }\n        ],\n        \"blockhash\": \"0x3d87f53c51c93fc08e5ccc09dbd9e21fcfad4dbea66af454bed334824a90262c\",\n        \"confirmations\": 26,\n        \"blocktime\": 1612687482881\n    }\n}\n```\n", "doc_id": "b0ae89c0-815c-47dd-ad57-2ab38604c927", "embedding": null, "doc_hash": "cebd2cbd2036bc5fc9a879bccffdad1d9b7eed809c7fd01447a9f70d4be673f6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getrawtransaction"}, "node_info": {"start": 1893, "end": 3229, "_node_type": "1"}, "relationships": {"1": "d4b9bdcab0205700b3e13c7c5a89bf6d29c1db5f", "2": "f41d5b98-9ca1-42cc-8b44-cbdfc9659499"}}, "__type__": "1"}, "ae3b19f6-7a58-434b-a3fc-78dc6a44bcd5": {"__data__": {"text": "# getstate Method\n\nQueries the state by the root hash, contract hash and storage key.\n\n:::note\n You must install the plugin  [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameters\n\n- roothash: The root hash of state root.\n\n- scripthash: The contract hash.\n\n- key: The storage key value encoded by Base64.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getstate\",\n  \"params\": [\"0xec31cdb14da4143e2ab471a8b5812d895b88fc1c12d54e112791491feca9b5f4\",\"0xb1fbb6b0096919071769906bb23b2ca2ec51eea7\",\"AQFM8QSIkBuHVYOd2kiRmQXXOI833w==\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"nMJ4AQ==\"\n}\n```", "doc_id": "ae3b19f6-7a58-434b-a3fc-78dc6a44bcd5", "embedding": null, "doc_hash": "3f9203726794ea59a37d98391cc78fa87d929232d891d4c1ee91a476d9db2f21", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstate"}, "node_info": {"start": 0, "end": 794, "_node_type": "1"}, "relationships": {"1": "78aea7bd04aada295519f293805a5f1a7cfb24cd"}}, "__type__": "1"}, "a093793f-0d48-4489-9572-0847301a3b08": {"__data__": {"text": "# getstateheight Method\nQueries the stateroot height.\n\n:::note\n You must install the plugin  [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getstateheight\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"result\": {\n        \"localrootindex\": 602,\n        \"validatedrootindex\": 602\n    }\n}\n```", "doc_id": "a093793f-0d48-4489-9572-0847301a3b08", "embedding": null, "doc_hash": "6019ac545fb3dd2e7921c0105e72af7998aa15db630f67af07bbc2e1401373ff", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstateheight"}, "node_info": {"start": 0, "end": 545, "_node_type": "1"}, "relationships": {"1": "be60035a8ad5502014d596b5fba991bcfed980af"}}, "__type__": "1"}, "1541829b-231c-46bd-9703-6d58d6e23506": {"__data__": {"text": "# getstateroot Method\n\nQueries the state root by the block height.\n\n:::note\n You must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- index: Block index\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getstateroot\",\n  \"params\": [160],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"version\": 0,\n        \"index\": 160,\n        \"roothash\": \"0x3d3f099e05cf92c018703ab309d8643c30a0ab6b2b008cc6fe80869b1a350c31\",\n        \"witnesses\": []\n    }\n}\n```", "doc_id": "1541829b-231c-46bd-9703-6d58d6e23506", "embedding": null, "doc_hash": "ce9c744f81252e5f63f7c760392cfa547b9688130d4350e9a8696de1e7f4a622", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstateroot"}, "node_info": {"start": 0, "end": 696, "_node_type": "1"}, "relationships": {"1": "90d3ee592d05a42ee198c5d7fcbe9e3f653a54cd"}}, "__type__": "1"}, "27dc4594-2105-42c2-8259-45107168ff2e": {"__data__": {"text": "\ufeff# getstorage Method\n\nReturns the stored value according to the contract script hash and the stored key. Both key and value are Base64-encoded.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n### Parameter Description\n\n* script_hash: Contract script hash or contract ID\n\n* key: The key to look up in storage (Base64-encoded)\n\n## Example\n\nRequest body:\n\n`hello` is converted into the Base64 string `aGVsbG8=`.\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getstorage\",\n    \"params\": [\"0x99042d380f2b754175717bb932a911bc0bb0ad7d\", \"aGVsbG8=\"],\n    \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"d29ybGQ=\"\n}\n```\n\n`d29ybGQ=` is converted into the string `world`.", "doc_id": "27dc4594-2105-42c2-8259-45107168ff2e", "embedding": null, "doc_hash": "896ccc379380314eef5951af1b6197ef73a4f4853819f05e9d8fd1cb06481203", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstorage"}, "node_info": {"start": 0, "end": 798, "_node_type": "1"}, "relationships": {"1": "6944c54df0fd303de2b041838750d94022e4f40c"}}, "__type__": "1"}, "6d84f374-9aab-4257-8897-6a2daabf14ed": {"__data__": {"text": "\ufeff# gettransactionheight method\n\nReturns the transaction height with the specified transaction hash.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\ntxid: Transaction id.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"gettransactionheight\",\n  \"params\": [\"0x57280b29c2f9051af6e28a8662b160c216d57c498ee529e0cf271833f90e1a53\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": 14\n}\n\n```\n", "doc_id": "6d84f374-9aab-4257-8897-6a2daabf14ed", "embedding": null, "doc_hash": "453567e4e6feb6c5fbcb6ede7a9469e8a7a6444dd3e246f618882d8e3bcbe4b2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/gettransactionheight"}, "node_info": {"start": 0, "end": 570, "_node_type": "1"}, "relationships": {"1": "abbd2301f4a4eff4c06c22d8b994ebfbad14ff97"}}, "__type__": "1"}, "84b149b2-d65f-4d58-a5c3-be47bf2f93da": {"__data__": {"text": "# getunclaimedgas method\n\nReturns the unclaimed GAS with the specified address.\n\n:::note\n Before you can invoke this method you must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases).\n:::\n\n## Parameter Description\n\naddress: Specified address.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getunclaimedgas\",\n  \"params\": [\"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"unclaimed\": \"499999500\",\n        \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n    }\n}\n```", "doc_id": "84b149b2-d65f-4d58-a5c3-be47bf2f93da", "embedding": null, "doc_hash": "541628636cc893cc7fbca5002118220be35758cc3878457e3e13a9af056f966d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getunclaimedgas"}, "node_info": {"start": 0, "end": 613, "_node_type": "1"}, "relationships": {"1": "06321c5ef917b14bc9765d17208dd30aad48e586"}}, "__type__": "1"}, "44d828f8-6298-45a2-9cf6-8a0d44ae611e": {"__data__": {"text": "\ufeff\ufeff# getversion Method\n\nReturns the version information of the node.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getversion\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"tcpport\": 10333,\n        \"wsport\": 10334,\n        \"nonce\": 1930156121,\n        \"useragent\": \"/Neo:3.0.3/\",\n        \"protocol\": {\n            \"addressversion\": 53,\n            \"network\": 860833102,\n            \"validatorscount\": 7,\n            \"msperblock\": 15000,\n            \"maxtraceableblocks\": 2102400,\n            \"maxvaliduntilblockincrement\": 5760,\n            \"maxtransactionsperblock\": 512,\n            \"memorypoolmaxtransactions\": 50000,\n            \"initialgasdistribution\": 5200000000000000\n        }\n    }\n}\n```\n", "doc_id": "44d828f8-6298-45a2-9cf6-8a0d44ae611e", "embedding": null, "doc_hash": "3ac6fbb67ceb9d7d471a7da77402cbbdf409297b713c58f601066646b5a80da7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getversion"}, "node_info": {"start": 0, "end": 937, "_node_type": "1"}, "relationships": {"1": "5a11e067e37e01a6a576b7653454f77fa9c12e5a"}}, "__type__": "1"}, "41930e30-6ee2-46a9-9113-4e32dec7cb57": {"__data__": {"text": "\ufeff# getwalletbalance Method\n\nReturns the balance of the corresponding asset in the wallet, based on the specified asset number. This method applies to the contract assets that conform to [NEP-17](https://github.com/neo-project/proposals/blob/1937ff56a09ac7e8380637e61129e9359e01a1b6/nep-17.mediawiki) standards.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Parameter Description\n\nAsset_id: Asset ID (asset identifier), which is the script hash of the contract for contract assets.\n\nFor example, NEO is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n\nGas is 0xd2a4cff31913016155e38e474a2c06d08be276cf\n\nYou can query asset ID using the [CLI command](../../../../node/cli/cli.md) `list asset` or using the blockchain browser.\n\n## Example\n\n:::note\n Make sure your client has been fully synchronized to the latest block height before using this API, otherwise the balance returned may not be up-to-date.\n:::\n\nExample: querying the balance of NEP-17 assets.\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getwalletbalance\",\n  \"params\": [\"0xd2a4cff31913016155e38e474a2c06d08be276cf\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"balance\": \"3000014661474560\"\n    }\n}\n```\n\nResponse Description:\n\nbalance: the balance of the asset in the wallet. Since the NEP-17 assets adopt the balance system rather than the UTXO system, there is no `confirmed` in the returned result and the balance is the actual available balance.\n\n:::note\n * Only when your client synchronizes to the block that the contract was deployed, execution of this API will return the correct value, otherwise execution of the API will result in an error.\n:::\n> * When the input parameter is a script hash of a non-NEP-17 smart contract, execution of the API will result in an error.\n", "doc_id": "41930e30-6ee2-46a9-9113-4e32dec7cb57", "embedding": null, "doc_hash": "424b68821deddd7a9cf82890a77dbbf938e8faa68e29d3acf78e3200c23eed85", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getwalletbalance"}, "node_info": {"start": 0, "end": 1978, "_node_type": "1"}, "relationships": {"1": "93bce555b33f8f008402435c992845a7611a8256"}}, "__type__": "1"}, "711de97a-2f7b-43c0-857c-57b8399472d5": {"__data__": {"text": "\ufeff# getwalletunclaimedgas Method\n\nGets the amount of unclaimed GAS in the wallet.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getwalletunclaimedgas\",\n  \"params\": [\"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"750000000\"\n}\n```\n\nResponse description:\n\nReturns the unclaimed GAS amount.", "doc_id": "711de97a-2f7b-43c0-857c-57b8399472d5", "embedding": null, "doc_hash": "1e9dea9868bc47ed83e7809fcc0400814bc97bc53b610673494c0709f5ab8703", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getwalletunclaimedgas"}, "node_info": {"start": 0, "end": 609, "_node_type": "1"}, "relationships": {"1": "d9b84c7ada9b04106a32672b652c50988ece4ca5"}}, "__type__": "1"}, "9f308b47-e562-40f8-9ca9-2c7dbd160fe0": {"__data__": {"text": "\ufeff# importprivkey Method\n\nImports the private key to the wallet.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n### Parameter Description\n\nkey: The WIF-format private key.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"importprivkey\",\n  \"params\": [\"KwYRSjqmEhK4nPuUZZz1LEUSxvSzSRCv3SVePoe67hjcdPGLRJY5\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NPvKVTGZapmFWABLsyvfreuqn73jCjJtN1\",\n        \"haskey\": true,\n        \"label\": null,\n        \"watchonly\": false\n    }\n}\n```\n\nResponse description:\n\nReturns the address corresponding to the key.", "doc_id": "9f308b47-e562-40f8-9ca9-2c7dbd160fe0", "embedding": null, "doc_hash": "3ac5ae4aafc4e33a89110d05f0861332f113bc790b4dceaa9c2d6384cfa5bee7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/importprivkey"}, "node_info": {"start": 0, "end": 802, "_node_type": "1"}, "relationships": {"1": "831bc07903233010bd619bdb78b75752acc09573"}}, "__type__": "1"}, "9bde4e1a-e0af-4019-939e-e2a0aef1d0ea": {"__data__": {"text": "# invokecontractverify Method\n\nInvokes the contract method `Verify`. Unlike the method `invokefunction` which executes the contract by the Application trigger, `invokecontractverify` executes the contract by the Verification trigger and can pass parameters as `params` and `signers`. Specific parameter type and number depend on the smart contract to invoke.\n\n:::note\n - This method is used to test your VM script as if they ran on the blockchain at that point in time. This RPC call does not affect the blockchain in any way.\n:::\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n- scripthash: Smart contract scripthash.\n\n- params: The parameters to be passed to the smart contract operation. \n\n- signers: Optional. List of contract signature accounts.\n  * account: signature account\n  * scopes: signature's valid scopes, allowed values: FeeOnly, CalledByEntry, CustomContracts, CustomGroups, Global\n  * allowedcontracts: contracts of the signature can take effect, if scopes is CustomContracts\n  * allowedgroups: pubkeys of the signature can take effect, if scopes is CustomGroups\n  \n  :::note\n  You need to use the proper byte order of the address passed according to its data type. If the data type is Hash160, use the big endian script hash; if the data type is ByteArray, use the little endian scripthash.\n  :::\n  \n  For example:\n  \n    ```json\n    {\n      \"type\": \"String\",\n      \"value\": \"Hello\"\n    }\n  \n    {\n      \"type\": \"Hash160\",\n      \"value\": \"0xf621168b1fce3a89c33a5f6bcf7e774b4657031c\"\n    }\n  \n    {\n      \"type\": \"ByteArray\",\n      \"value\": \"7472616e73666572\"\n    }\n    ```\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"invokecontractverify\",\n  \"params\": [ \n  \"0x92f5c79b88560584a900cfec15b0e00dc4d58b54\", \n  [ ],\n  [\n      {\n        \"account\": \"NTpqYncLsNNsMco71d9qrd5AWXdCq8YLAA\",\n        \"scopes\": \"CalledByEntry\"\n      }\n  ]\n],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"script\": \"VgEMFFbIjRQK0swPKQN90Qp/AGCitShcYEBXAANAQZv2Z84MBWhlbGxvDAV3b3JsZFNB5j8YhEBXAQAMFFbIjRQK0swPKQN90Qp/AGCitShcQfgn7IxwaEA=\",\n    \"state\": \"HALT\",\n    \"gasconsumed\": \"1017810\",\n    \"exception\": null,\n    \"stack\": [\n      {\n        \"type\": \"Boolean\",\n        \"value\": true\n      }\n    ]\n  }\n}\n```\n\nResponse description:\n\n- script: the invocation script of the contract. You can convert it to OpCode at [Neo 3.0 data", "doc_id": "9bde4e1a-e0af-4019-939e-e2a0aef1d0ea", "embedding": null, "doc_hash": "8ad4157b052831c8f16dd9f8eb894ffa3c4860b97c9e1af3e2f86a6d91394d1c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokecontractverify"}, "node_info": {"start": 0, "end": 2499, "_node_type": "1"}, "relationships": {"1": "16ecbcebc29554b382940eecefec0070f7beaa61", "3": "6a46278c-0cff-4075-85f9-b148c92f26ed"}}, "__type__": "1"}, "6a46278c-0cff-4075-85f9-b148c92f26ed": {"__data__": {"text": "of the contract. You can convert it to OpCode at [Neo 3.0 data converter](https://neo.org/converter).\n- state: `HALT` means the vm executed successfully, and`FAULT` means the vm exited due to an exception. \n- gasconsumed: the system fee consumed for invocation.\n- stack: the contract execution result. If the value is String or ByteArray, it is encoded by Base64.", "doc_id": "6a46278c-0cff-4075-85f9-b148c92f26ed", "embedding": null, "doc_hash": "333de2f9a354f160f9eee6f05db8524bb4b12866ed342e962d6cee9e46cca41c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokecontractverify"}, "node_info": {"start": 2437, "end": 2800, "_node_type": "1"}, "relationships": {"1": "16ecbcebc29554b382940eecefec0070f7beaa61", "2": "9bde4e1a-e0af-4019-939e-e2a0aef1d0ea"}}, "__type__": "1"}, "8af78899-bebf-48fe-8306-83624571d540": {"__data__": {"text": "\ufeff# invokefunction Method\n\nInvokes a smart contract with its scripthash based on the specified operation and parameters and returns the result.\n\n:::note\n - This method is used to test your VM script as if they ran on the blockchain at that point in time. This RPC call does not affect the blockchain in any way.\n:::\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n## Parameter Description\n\n* scripthash: Smart contract scripthash. You need to use the proper byte order of the address passed according to its data type. If the data type is Hash160, use the big endian scripthash; if the data type is ByteArray, use the little endian scripthash.\n\n* operation: The operation name (string)\n\n* params: Optional. The parameters to be passed into the smart contract operation\n\n* signers: Optional. List of contract signature accounts.\n\n  * account: signature account\n  * scopes: signature's valid scopes, allowed values are:\n    * None: Only transactions are signed and no contracts are allowed to use this signature.\n    * CalledByEntry: It only applies to the chain call entry. That is,  if the user invokes contract A, and then contract A calls contract B, only contract A can use the signature. It is recommended as the default value for the wallet.\n    * CustomContracts: Custom contract. The signature can be used in the specified contract.\n      It can be used in conjunction with CalledByEntry.\n    * CustomGroups: Custom contract groups that can be used in a specified contract group.\n      It can be used in conjunction with CalledByEntry.\n    * Global: Global. Global. The risk is extremely high because the contract may transfer all assets in the address. Only choose it when the contract is extremely trusted.\n  * allowedcontracts: contracts of the signature can take effect, if scopes is CustomContracts\n  * allowedgroups: pubkeys of the signature can take effect, if scopes is CustomGroups\n:::note\n You need to use the proper byte order of the address passed according to its data type. If the data type is Hash160, use the big endian script hash; if the data type is ByteArray, use the little endian scripthash.\n:::\n\nFor example:\n\n```json\n{\n  \"type\": \"String\",\n  \"value\": \"Hello\"\n}\n  \n{\n  \"type\": \"Hash160\",\n  \"value\": \"0xf621168b1fce3a89c33a5f6bcf7e774b4657031c\"\n}\n \n{\n  \"type\": \"ByteArray\",\n  \"value\": \"7472616e73666572\"\n}\n```\n\n## Example\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"invokefunction\",\n    \"params\": [\n        \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n        \"transfer\",\n        [\n            {\n                \"type\": \"Hash160\",\n                \"value\": \"0x86df72a6b4ab5335d506294f9ce993722253b6e2\"\n            },\n            {\n                \"type\": \"Hash160\",\n                \"value\": \"0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\"\n      ", "doc_id": "8af78899-bebf-48fe-8306-83624571d540", "embedding": null, "doc_hash": "48c234acdb2d33ae37166333d08f3f4ced59ede3664e9f14f4920097d3160368", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokefunction"}, "node_info": {"start": 0, "end": 2885, "_node_type": "1"}, "relationships": {"1": "8c883cd9fcc36b07991a48668f124dda16851f79", "3": "fd0539a3-92d6-4260-8d2d-33887c5010ee"}}, "__type__": "1"}, "fd0539a3-92d6-4260-8d2d-33887c5010ee": {"__data__": {"text": "           },\n            {\n                \"type\": \"Integer\",\n                \"value\": \"10000\"\n            },\n            {\n                \"type\": \"String\",\n                \"value\": \"\"\n            }\n        ],\n        [\n            {\n                \"account\": \"0x86df72a6b4ab5335d506294f9ce993722253b6e2\",\n                \"scopes\": \"CalledByEntry\",\n                \"allowedcontracts\": [],\n                \"allowedgroups\": []\n            }\n        ]\n    ]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAABECcMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBTitlMicpPpnE8pBtU1U6u0pnLfhhTAHwwIdHJhbnNmZXIMFIOrBnmtVcBQoTrUP1k26nP16x72QWJ9W1I=\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"999972\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": true\n            }\n        ],\n        \"tx\": \"AI3PBQRolZgAAAAAAMrSEgAAAAAAtRcAAAHitlMicpPpnE8pBtU1U6u0pnLfhgEAWQwAARAnDBT6ifssFN8PWd3fBPblZRfys0qu6wwU4rZTInKT6ZxPKQbVNVOrtKZy34YUwB8MCHRyYW5zZmVyDBSDqwZ5rVXAUKE61D9ZNupz9ese9kFifVtSAUIMQB87UjubTE7Kb/fOe8Yu2QDUQJ6c5pL9LjcoFaNkEiJzLY5yd72jrsvVbVFNZ6ObWloAmLkjCgDXw9enkVtwVBMrEQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n    }\n}\n```\n\nResponse description:\n\n- script: the invocation script of the contract. You can analysis from https://neo.org/converter\n\n  ```\n  SYSCALL System.Contract.Call\n  PUSHDATA1 0xf61eebf573ea36593fd43aa150c055ad7906ab83\n  PUSHDATA1 transfer\n  PUSHDATA1", "doc_id": "fd0539a3-92d6-4260-8d2d-33887c5010ee", "embedding": null, "doc_hash": "d2ea0f4989795e29cf0c477377d36388ea0b8e22fe5d3f3925027d42079909e6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokefunction"}, "node_info": {"start": 2886, "end": 4389, "_node_type": "1"}, "relationships": {"1": "8c883cd9fcc36b07991a48668f124dda16851f79", "2": "8af78899-bebf-48fe-8306-83624571d540", "3": "7f5510b3-b75f-426c-bb02-30d74c4af62b"}}, "__type__": "1"}, "7f5510b3-b75f-426c-bb02-30d74c4af62b": {"__data__": {"text": " PUSHDATA1 transfer\n  PUSHDATA1 0x86df72a6b4ab5335d506294f9ce993722253b6e2\n  PUSHDATA1 0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\n  PUSHINT16 10000\n  PUSHDATA1\n  ```\n\n- state:  `HALT` means the vm executed successfully, and`FAULT` means the vm exited due to an exception. \n\n- gasconsumed: the system fee consumed for invocation.\n\n- stack: the contract execution result. If the value is String or ByteArray, it is encoded by Base64.\n\n- tx: the transaction's hex string of this invocation, need open wallet and added signers correctly.\n\n## About iterator\n\nIf the execution result of contract includes iterators, the iteration times are constrained according to the `MaxIteratorResultItems` value configured in the  `RpcServer` `config` file. The default limit is 100 times.\n\nIn the following example, up to 6 returned results are actually available. When the `MaxIteratorResultItems ` value is 5, only 5 iterations are returned and `truncated` is true, indicating that there is still data to be returned.\n\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"wh8MBnRva2VucwwUR7xWZRSFd3BpKcM7Mj3g3v4/u3ZBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"2288880\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"InteropInterface\",\n                \"iterator\": [\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDMuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDUuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDEuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDIuY3A=\"\n                    },\n                    {\n   ", "doc_id": "7f5510b3-b75f-426c-bb02-30d74c4af62b", "embedding": null, "doc_hash": "492f627cfcd15e6440d15e406f40a75902d2277e01281516d21061884f5e3354", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokefunction"}, "node_info": {"start": 4363, "end": 6272, "_node_type": "1"}, "relationships": {"1": "8c883cd9fcc36b07991a48668f124dda16851f79", "2": "fd0539a3-92d6-4260-8d2d-33887c5010ee", "3": "6fdfbfee-8020-4785-a551-4d3beb99c4dc"}}, "__type__": "1"}, "6fdfbfee-8020-4785-a551-4d3beb99c4dc": {"__data__": {"text": "               {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDQuY3A=\"\n                    }\n                ],\n                \"truncated\": true\n            }\n        ]\n    }\n}\n```\n\nWhen the `MaxIteratorResultItems ` value is greater than or equal to 6, then 6 iterations are returned and `truncated` is false, indicating that all data has been returned.\n\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"script\": \"wh8MBnRva2VucwwUR7xWZRSFd3BpKcM7Mj3g3v4/u3ZBYn1bUg==\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"2288880\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"InteropInterface\",\n                \"iterator\": [\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDMuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDUuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDEuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDIuY3A=\"\n                    },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDQuY3A=\"\n                    },\n", "doc_id": "6fdfbfee-8020-4785-a551-4d3beb99c4dc", "embedding": null, "doc_hash": "4c89faae7f5b6a32a055b79df514b7343a8fac571a38af08b7aec68b26ff3d3f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokefunction"}, "node_info": {"start": 6298, "end": 7714, "_node_type": "1"}, "relationships": {"1": "8c883cd9fcc36b07991a48668f124dda16851f79", "2": "7f5510b3-b75f-426c-bb02-30d74c4af62b", "3": "3ae10c63-b14c-4e68-8015-c3c13fa55d10"}}, "__type__": "1"}, "3ae10c63-b14c-4e68-8015-c3c13fa55d10": {"__data__": {"text": "                  },\n                    {\n                        \"type\": \"ByteString\",\n                        \"value\": \"Ymp5eDYuY3A=\"\n                    }\n                ],\n                \"truncated\": false\n            }\n        ]\n    }\n}\n```\n", "doc_id": "3ae10c63-b14c-4e68-8015-c3c13fa55d10", "embedding": null, "doc_hash": "6b396b40dc06b2f6acfaa1b6ff2934093945f850d50533ee3e3c60ca1e0e3d9f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokefunction"}, "node_info": {"start": 7695, "end": 7944, "_node_type": "1"}, "relationships": {"1": "8c883cd9fcc36b07991a48668f124dda16851f79", "2": "6fdfbfee-8020-4785-a551-4d3beb99c4dc"}}, "__type__": "1"}, "e0917b9c-095c-47ed-bd8d-1f3fb16c66ba": {"__data__": {"text": "\ufeff\ufeff# invokescript Method\n\nReturns the result after passing a script through the VM.\n\n:::note\n - This method is to test your VM script as if they ran on the blockchain at that point in time. This RPC call does not affect the blockchain in any way.\n:::\n> - You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n\n### Parameter Description\n\n- script: A script runnable in the VM. This is the same script that is returned in invokefunction\n- signers: Optional. The list of contract signature accounts\n  * account: signature account\n  * scopes: signature's valid scopes, allowed values: FeeOnly, CalledByEntry, CustomContracts, CustomGroups, Global\n  * allowedcontracts: contracts of the signature can take effect, if scopes is CustomContracts\n  * allowedgroups: pubkeys of the signature can take effect, if scopes is CustomGroups\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"invokescript\",\n  \"params\": [    \n    \"DAlqdXN0IHRlc3QRDBRWyI0UCtLMDykDfdEKfwBgorUoXAwU19eXMOJ4xtkG5uj2lb+th34/+pAUwB8MCHRyYW5zZmVyDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n    [\n         {\n          \"account\": \"NfbEjVjhhpDsni716KVbuQWqSjVNHAUdTh\",\n          \"scopes\": \"CustomContracts\",\n          \"allowedcontracts\":[\"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\"0xd2a4cff31913016155e38e474a2c06d08be276cf\"],\n          \"allowedgroups\":[]\n        }\n    ]\n  ]\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"script\": \"DAlqdXN0IHRlc3QRDBRWyI0UCtLMDykDfdEKfwBgorUoXAwU19eXMOJ4xtkG5uj2lb+th34/+pAUwB8MCHRyYW5zZmVyDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n        \"state\": \"HALT\",\n        \"gasconsumed\": \"997796\",\n        \"exception\": null,\n        \"stack\": [\n            {\n                \"type\": \"Boolean\",\n                \"value\": false\n            }\n        ]\n    }\n}\n```\n\n- state:  `HALT` means the vm executed successfully, and`FAULT` means the vm exited due to an exception. \n- gasconsumed: the system fee consumed for invocation.\n- stack: the contract execution result. If the value is String or ByteArray, it is encoded by Base64.\n", "doc_id": "e0917b9c-095c-47ed-bd8d-1f3fb16c66ba", "embedding": null, "doc_hash": "2ee9121bc42ce324a346e018d04dec2f65057d20abaa821eca37d332b75c34c2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokescript"}, "node_info": {"start": 0, "end": 2152, "_node_type": "1"}, "relationships": {"1": "3859954c034d6ff7dbd977eb21ef30785a5f19d2"}}, "__type__": "1"}, "9c88120a-6db3-4f2c-a287-118e00c827c2": {"__data__": {"text": "\ufeff# listaddress Method\n\nLists all the addresses in the current wallet.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"listaddress\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"address\": \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n            \"haskey\": true,\n            \"label\": null,\n            \"watchonly\": false\n        },\n        {\n            \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n            \"haskey\": true,\n            \"label\": null,\n            \"watchonly\": false\n        }\n    ]\n}\n```\n\nResponse description\uff1a\n\naddress: The address in the wallet.\n\nhaskey: Whether there is a private key for the address.\n\nlabel: Address label.\n\nwatchonly: Indicates whether it is a watch only address.", "doc_id": "9c88120a-6db3-4f2c-a287-118e00c827c2", "embedding": null, "doc_hash": "8e878aa2813b7740f7b26fb58dd6345b3a4cd1004baa37245b396891eb07d2a5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/listaddress"}, "node_info": {"start": 0, "end": 1023, "_node_type": "1"}, "relationships": {"1": "2583909a61e0f473062109d8ec1483f66a1ccb23"}}, "__type__": "1"}, "541e283f-1af2-43aa-b8fa-9e273e6067ee": {"__data__": {"text": "# listplugins Method\n\nReturns a list of plugins loaded by the node.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"listplugins\",\n  \"params\": [],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"name\": \"DBFTPlugin\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": [\n                \"IP2PPlugin\"\n            ]\n        },\n        {\n            \"name\": \"LevelDBStore\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": []\n        },\n        {\n            \"name\": \"TokensTracker\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": [\n                \"IPersistencePlugin\"\n            ]\n        },\n        {\n            \"name\": \"RpcServer\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": []\n        },\n        {\n            \"name\": \"SystemLog\",\n            \"version\": \"3.1.0.0\",\n            \"interfaces\": [\n                \"ILogPlugin\"\n            ]\n        }\n    ]\n}\n```", "doc_id": "541e283f-1af2-43aa-b8fa-9e273e6067ee", "embedding": null, "doc_hash": "67b71d93f532639d7cb2a57b6e4f106d762ec1215d566faabbe1c3b44d824674", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/listplugins"}, "node_info": {"start": 0, "end": 1141, "_node_type": "1"}, "relationships": {"1": "f42afc23d2b36ebae86d5c3a14d81f0ef5d31456"}}, "__type__": "1"}, "63468b7c-2ea8-4505-bc39-5d8e5c5c3124": {"__data__": {"text": "# openwallet Method\n\nOpens the specified wallet file. To be on the safe side this method is disabled by default. If you do need to use this method you can manually enable this method in the RpcServer configuration file.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke this method.\n:::\n\n## Parameter Description\n\n- path: The wallet file path\n- password: In plain text.\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"openwallet\",\n  \"params\": [\"11.db3\", \"1\"],\n  \"id\": 1\n}\n```\n\nResponse body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}\n```\n\nResponse description\uff1a\n\ntrue: The wallet is opened.\n\nOthers: The wallet cannot be opened.\n\nIf `Access denied` is returned this is because `openwallet` is disabled. To enable it, you can remove  `openwallet` in the field DisabledMethods in RpcServer config.json.\n\n", "doc_id": "63468b7c-2ea8-4505-bc39-5d8e5c5c3124", "embedding": null, "doc_hash": "16b94950da577a228c96ffa74da6b89d7019c9fb63fd341a8671aa95fedb2418", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/openwallet"}, "node_info": {"start": 0, "end": 924, "_node_type": "1"}, "relationships": {"1": "97ee725e0debda757779756152d4a8a0c059dd47"}}, "__type__": "1"}, "c3d18f3b-d422-47fe-8afb-df4a849549bb": {"__data__": {"text": "\ufeff# sendfrom Method\n\nTransfer from the specified address to the destination address.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n### Parameter Description\n\n* asset_id: Asset ID\uff08asset identifier\uff09, the script hash of nep-17 contract.\n\n  e.g. NEO is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n\n\u200b        GAS is 0xd2a4cff31913016155e38e474a2c06d08be276cf\n* from: transfering address.\n* address: destination address.\n* value: Transfer amount\n* signers: The signature account of transaction\n\n## Example\n\nRequest body\uff1a\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"sendfrom\",\n    \"params\": [\n        \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n        \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n        \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n        100000000\n    ]\n}\n```\n\nRequest body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xe01b16626dec583941c1053467100041ce868e3b35e5fe3a85e530792cc9149d\",\n        \"size\": 252,\n        \"version\": 0,\n        \"nonce\": 2114899852,\n        \"sender\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\",\n        \"sysfee\": \"9999540\",\n        \"netfee\": \"1235610\",\n        \"validuntilblock\": 5810,\n        \"signers\": [\n            {\n                \"account\": \"0x86df72a6b4ab5335d506294f9ce993722253b6e2\",\n                \"scopes\": \"CalledByEntry\"\n            }\n        ],\n        \"attributes\": [],\n        \"script\": \"CwIA4fUFDBT6ifssFN8PWd3fBPblZRfys0qu6wwU4rZTInKT6ZxPKQbVNVOrtKZy34YUwB8MCHRyYW5zZmVyDBQos62rcmn5whgds8t0Hr9VGTDicEFifVtSOQ==\",\n        \"witnesses\": [\n            {\n                \"invocation\":", "doc_id": "c3d18f3b-d422-47fe-8afb-df4a849549bb", "embedding": null, "doc_hash": "d395beeb4b6d216eae5fa94a4f79c0d5c2564c1e296c50f62ab2d1a7a1922747", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendfrom"}, "node_info": {"start": 0, "end": 1740, "_node_type": "1"}, "relationships": {"1": "142a42c84cbadfa2bcc5d18e8e6f12ccc55c4474", "3": "2af075bf-eba3-40f2-82a0-0d0f10860b55"}}, "__type__": "1"}, "2af075bf-eba3-40f2-82a0-0d0f10860b55": {"__data__": {"text": "               \"invocation\": \"DEAUQ3hUPg/qi77rnSzXRgd2RYdZCsPDBa/n0a6M+sCsOpC/YyLPeeoqcVNAyh73qpocOqdX1tnGeizh+C8cXoK0\",\n                \"verification\": \"EQwhAs7UMjl93ETtugMcC8O5M/KP3ZZ3eS17IObANt2qrPHiEQtBE43vrw==\"\n            }\n        ]\n    }\n}\n```\n\nResponse Description:\n\nReturns the transaction details as above if the transaction was sent successfully; otherwise the transaction is failed.\n\nIf the signature is incomplete, a pending transaction is returned. If the balance is insufficient, an error message is returned.\n", "doc_id": "2af075bf-eba3-40f2-82a0-0d0f10860b55", "embedding": null, "doc_hash": "69f911410beae670b4640b0cbef0f34f641dc6b31b2e75ba092e61c6b2bebd17", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendfrom"}, "node_info": {"start": 1712, "end": 2238, "_node_type": "1"}, "relationships": {"1": "142a42c84cbadfa2bcc5d18e8e6f12ccc55c4474", "2": "c3d18f3b-d422-47fe-8afb-df4a849549bb"}}, "__type__": "1"}, "866e3e18-c25f-4243-a6cb-e098f7fd75f2": {"__data__": {"text": "\ufeff# sendmany Method\n\nBulk transfer order, and you can specify a change address.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendmany\",\n  \"params\": [from, outputs_array],\n  \"id\": 1\n}\n```\n\n### Parameter Description\n\n* `from`: Optional. The address from which you transfer the asset.\n\n* `outputs_array`\uff1aArray, the data structure of each element in the array is as follows:\n\n  ```json\n  {\"asset\": <asset>,\"value\": <value>,\"address\": <address>, \"signers\": <signers>}\n  ```\n\n  * `asset`: Asset ID (asset identifier),  the NEP-17 contract scripthash\n  \n    e.g. NeoToken is: 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n  \n    GasToken is: 0xd2a4cff31913016155e38e474a2c06d08be276cf\n  \n  * `value`: Transfer amount\n  \n  * `address`: Destination address\n  \n  * `signers`: The signature account of transaction\n\n## Example\n\nRequest text:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"sendmany\",\n    \"params\": [\n        \"NikhQp1aAD1YFCiwknhM5LQQebj4464bCJ\",\n        [\n            {\n                \"asset\": \"0xf61eebf573ea36593fd43aa150c055ad7906ab83\",\n                \"value\": 10,\n                \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n            },\n            {\n                \"asset\": \"0x70e2301955bf1e74cbb31d18c2f96972abadb328\",\n                \"value\": 50000000,\n                \"address\": \"NgaiKFjurmNmiRzDRQGs44yzByXuSkdGPF\"\n            }\n        ]\n    ]\n}\n```\n\nRequest text (with fromAddress):\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendmany\",\n  \"params\": [\n     \"NY9nnDv7cAJ44C2xeRScrXfzkrCJfFWYku\",\n\t[\n\t    {\n\t\t\t    \"asset\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\", \n\t\t\t    \"value\": 100, \n\t\t\t\t\t\"address\": \"NbtvbHpwv6nswDtVFpKEyooHhDHwZh2LHf\"\n\t\t\t}, \n\t\t\t{\n\t\t\t     \"asset\":", "doc_id": "866e3e18-c25f-4243-a6cb-e098f7fd75f2", "embedding": null, "doc_hash": "6439482a83ba14716753fb6ae1d0ecb11243cf81b48e98b6351a6f324b0e7768", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendmany"}, "node_info": {"start": 0, "end": 1918, "_node_type": "1"}, "relationships": {"1": "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec", "3": "2db175be-5d4b-423f-8d6d-3069bfcfe712"}}, "__type__": "1"}, "2db175be-5d4b-423f-8d6d-3069bfcfe712": {"__data__": {"text": "\n\t\t\t{\n\t\t\t     \"asset\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\", \n\t\t\t\t\t \"value\": 100, \n\t\t\t\t\t \"address\": \"NbtvbHpwv6nswDtVFpKEyooHhDHwZh2LHf\"\n\t\t\t},\n\t\t\t    {\n\t\t\t    \"asset\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\", \n\t\t\t    \"value\": 100, \n\t\t\t\t\t\"address\": \"NPTvd2T1zi7ioj3LmvpeBd45pPvAJU3gvr\"\n\t\t\t}, \n\t\t\t{\n\t\t\t     \"asset\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\", \n\t\t\t\t\t \"value\": 100, \n\t\t\t\t\t \"address\": \"NPTvd2T1zi7ioj3LmvpeBd45pPvAJU3gvr\"\n\t\t\t}\n\t ]\n\t ],\n  \"id\": 1\n}\n```\n\nResponse text:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"hash\": \"0xe8742fc5a69f3180ab59f3f21695ce5459891429682a7f1df38219bc05cce39e\",\n    \"size\": 514,\n    \"version\": 0,\n    \"nonce\": 537723951,\n    \"sender\": \"NY9nnDv7cAJ44C2xeRScrXfzkrCJfFWYku\",\n    \"sysfee\": \"39726800\",\n    \"netfee\": \"1497580\",\n    \"validuntilblock\": 6357,\n    \"signers\": [\n      {\n        \"account\": \"0x9dd95824d6a1789d5bb665abd727d0c387a53e86\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ],\n    \"attributes\": [],\n    \"script\": \"CwBkDBSvT25X7NLzUvxKKqw14LOzO554tQwUhj6lh8PQJ9erZbZbnXih1iRY2Z0UwB8MCHRyYW5zZmVyDBT1Y+pAvCg9TQ4FxI6jBbPyoHNA70FifVtSOQsAZAwUJvOMLBhLx7odYBaJkOQJlbxNJF4MFIY+pYfD0CfXq2W2W514odYkWNmdFMAfDAh0cmFuc2ZlcgwU9WPqQLwoPU0OBcSOowWz8qBzQO9BYn1bUjkLAGQMFK9Pblfs0vNS/EoqrDXgs7M7nni1DBSGPqWHw9An16tltludeKHWJFjZnRTAHwwIdHJhbnNmZXIMFM924ovQBixKR47jVWEBExnzz6TSQWJ9W1I5CwBkDBQm84wsGEvHuh1gFomQ5AmVvE0kXgwUhj6lh8PQJ9erZbZbnXih1iRY2Z0UwB8MCHRyYW5zZmVyDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtSOQ==\",\n    \"witnesses\": [\n      {\n ", "doc_id": "2db175be-5d4b-423f-8d6d-3069bfcfe712", "embedding": null, "doc_hash": "254c1130eace038b5f0ca37d4e3886235811be2883147b8c3b3aec6b879e3da8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendmany"}, "node_info": {"start": 1902, "end": 3405, "_node_type": "1"}, "relationships": {"1": "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec", "2": "866e3e18-c25f-4243-a6cb-e098f7fd75f2", "3": "a2f2cb5d-c547-4d74-b203-b02e8d58343e"}}, "__type__": "1"}, "a2f2cb5d-c547-4d74-b203-b02e8d58343e": {"__data__": {"text": "   \"witnesses\": [\n      {\n        \"invocation\": \"DEDxTxMc/IKpEzhfYV0bMv8qUEL1na7LvrnK3hisz1SBoYJr2SF7SpXY0RzA/1x5QfHEuxHUuvelul1aiDjFenYD\",\n        \"verification\": \"EQwhA+CII7RDmfaiqiJIg02SChWrOuktx1Y89+Q/3dWxwBgvEUF7zmyl\"\n      }\n    ]\n  }\n}\n```\n\nResponse Description:\n\nReturns the transaction details as above if the transaction was sent successfully; otherwise the transaction is failed.\n\nIf the JSON format is incorrect, a Parse error is returned. If the signature is incomplete, a pending transaction is returned. If the balance is insufficient, an error message is returned.\n", "doc_id": "a2f2cb5d-c547-4d74-b203-b02e8d58343e", "embedding": null, "doc_hash": "08b49ee312aad9ed3e9c666b2bdaf03dcef74192207e49efd16a42f22c20752d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendmany"}, "node_info": {"start": 3395, "end": 3976, "_node_type": "1"}, "relationships": {"1": "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec", "2": "2db175be-5d4b-423f-8d6d-3069bfcfe712"}}, "__type__": "1"}, "f7fa2a45-5e64-45f8-8b4b-f21d215afe5d": {"__data__": {"text": "\ufeff# sendrawtransaction Method\n\nBroadcasts transactions over the NEO network.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\ntransaction: A Base64-encoded string that has been serialized after the transaction signed in the program.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendrawtransaction\",\n  \"params\": [\"ALmNfAb4lqIAAAAAAAZREgAAAAAA8S8AAAEKo4e1Ppa3mJpjFDGgVt0fQKBC9gEAKQwFd29ybGQRwAwDcHV0DBR9rbALvBGpMrl7cXVBdSsPOC0EmUFifVtSAUIMQACXF48H1VRmI50ievPfC042rJgj7ZQ3Y4ff27abOpeclh+6KpsL6gWfZTAUyFOwdjkA7CWLM3HsovQeDQlI0oopDCEDzqPi+B8a+TUi0p7eTySh8L7erXKTOR0ziA9Uddl4eMkLQZVEDXg=\"],\n  \"id\": 1\n}\n```\n\nResponse body in successful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0x13ccdb9f7eda95a24aa5a4841b24fed957fe7f1b944996cbc2e92a4fa4f1fa73\"\n    }\n}\n```\n\nResponse body in unsuccessful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n        \"code\": -500,\n        \"message\": \"AlreadyExists\"\n    }\n}\n```\n\nResponse Description:\n\nWhen result is false, the current transaction has failed to broadcast and an exception occurs. In this example, a confirmed transaction is broadcast, which fails due to the double cost.\n\nThe following error codes can be expected:\n\n| Error codes | Message           | Description                                                  |\n| ----------- | ----------------- | ------------------------------------------------------------ |\n| 500         | AlreadyExists     | Block or transaction already exists and cannot be sent repeatedly. |\n|             | OutOfMemory       | The memory pool is full and no more transactions can be sent. |\n|             | UnableToVerify    | The block cannot be validated.                               |\n|             | Invalid           | The format or parameter is incorrect                         |\n|             | Expired           | The block information is expired                             |\n|             | InsufficientFunds | Insufficient funds      ", "doc_id": "f7fa2a45-5e64-45f8-8b4b-f21d215afe5d", "embedding": null, "doc_hash": "aab97f101507144e1be9ed58b0c5b6b97442103a05e2e21446c087bd007ad0be", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendrawtransaction"}, "node_info": {"start": 0, "end": 2123, "_node_type": "1"}, "relationships": {"1": "7955bd5fa17ace73f409ae5d2dd29b84a9922b91", "3": "19de1cce-767c-40ee-98f0-cdb9272784a0"}}, "__type__": "1"}, "19de1cce-767c-40ee-98f0-cdb9272784a0": {"__data__": {"text": "    | InsufficientFunds | Insufficient funds                                           |\n|             | PolicyFail        | The behavior is not allowed (such as blacklist address trading) |\n\n", "doc_id": "19de1cce-767c-40ee-98f0-cdb9272784a0", "embedding": null, "doc_hash": "9557c6c320a6f0179dbcf081b2f9b024d204bb2cd8c9176e68d9caf070a1cb34", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendrawtransaction"}, "node_info": {"start": 2073, "end": 2265, "_node_type": "1"}, "relationships": {"1": "7955bd5fa17ace73f409ae5d2dd29b84a9922b91", "2": "f7fa2a45-5e64-45f8-8b4b-f21d215afe5d"}}, "__type__": "1"}, "92e925ff-88a1-424c-ad92-49ae9a9bc841": {"__data__": {"text": "\ufeff# sendtoaddress Method\n\nTransfers to the specified address.\n\n:::note\n Before you can invoke this method you must:\n:::\n>\n> 1. Install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) \n> 2. Call the RPC method `openwallet` to open the wallet first.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendtoaddress\",\n  \"params\": [asset_id,address,value],\n  \"id\": 1\n}\n```\n\n## Parameter Description\n\n* asset_id\uff1a Asset ID (asset identifier),  the script hash of NEP-17 contract\n\n  e.g. NeoToken is 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\n\n  GasToken is 0xd2a4cff31913016155e38e474a2c06d08be276cf\n\n* address: Payment address\n\n* value: Amount transferred\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"sendtoaddress\",\n  \"params\": [\"0xd2a4cff31913016155e38e474a2c06d08be276cf\", \"NUuPz4k387bHuySx2e2RWhZj5SpF8V4Csy\", 100],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"hash\": \"0xe332419b8da788c3f149959cb7667aa6a796f4c4a2c49285ee65ef21e7acbb8e\",\n    \"size\": 382,\n    \"version\": 0,\n    \"nonce\": 1204566489,\n    \"sender\": \"NTpqYncLsNNsMco71d9qrd5AWXdCq8YLAA\",\n    \"sysfee\": \"9931700\",\n    \"netfee\": \"2349040\",\n    \"validuntilblock\": 6368,\n    \"signers\": [\n      {\n        \"account\": \"0x5c28b5a260007f0ad17d03290fccd20a148dc856\",\n        \"scopes\": \"None\"\n      },\n      {\n        \"account\": \"0x90fa3f7e87adbf95f6e8e606d9c678e23097d7d7\",\n        \"scopes\": \"CalledByEntry\"\n      }\n    ],\n    \"attributes\": [],\n    \"script\": \"CwMA5AtUAgAAAAwUYp1qsnQL/DbfcYBBG6gP2HgdKb0MFNfXlzDieMbZBubo9pW/rYd+P/qQFMAfDAh0cmFuc2ZlcgwUz3bii9AGLEpHjuNVYQETGfPPpNJBYn1bUjk=\",\n    \"witnesses\": [\n      {\n        \"invocation\": \"DEB2IMlTiOX9zJYgVLe6hVLXWW3OTiv1NyqOiIMzCAPJf0G9ITh/MSRTu4pW8lHn6iF7yVFbZUuNm6iXKH3+g4dS\",\n        \"verification\":", "doc_id": "92e925ff-88a1-424c-ad92-49ae9a9bc841", "embedding": null, "doc_hash": "02702279cd4a5d803b4022753d792af495d729beba9c3d16646eadcb6f554903", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendtoaddress"}, "node_info": {"start": 0, "end": 1800, "_node_type": "1"}, "relationships": {"1": "f910768b57386ba115b090741c14d9d4d6113edc", "3": "2cebea3c-d515-432a-b8e5-fc9173ab5bba"}}, "__type__": "1"}, "2cebea3c-d515-432a-b8e5-fc9173ab5bba": {"__data__": {"text": "       \"verification\": \"DCEDpDw8zJ19ja9Vjl2syj9wppx0tqXaCw43Xg8Zn221XuRBdHR2qg==\"\n      },\n      {\n        \"invocation\": \"DEDgesB10fw0goXgn2jQmtteSgCxjhX3E5IU/sclk1Aqea/OUzfm/1khO9J3sh420YxAPKoddx+4BdeTrkCtogtp\",\n        \"verification\": \"DCED4IgjtEOZ9qKqIkiDTZIKFas66S3HVjz35D/d1bHAGC9BdHR2qg==\"\n      }\n    ]\n  }\n}\n```\n\nResponse Description:\n\nReturning of the transaction details above indicates that the transaction was sent successfully. If not, the transaction has failed to send.\n\nIf the signature is incomplete, it returns the transaction to be signed.\n\nIf the balance is insufficient, it returns an error message.\n", "doc_id": "2cebea3c-d515-432a-b8e5-fc9173ab5bba", "embedding": null, "doc_hash": "ecc5dec3c250736b10e48f8371f1ce59b9d15795a49fd904a19e1645ac197e30", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendtoaddress"}, "node_info": {"start": 1778, "end": 2399, "_node_type": "1"}, "relationships": {"1": "f910768b57386ba115b090741c14d9d4d6113edc", "2": "92e925ff-88a1-424c-ad92-49ae9a9bc841"}}, "__type__": "1"}, "35aac647-092f-4aad-a8e7-d83c498b0b82": {"__data__": {"text": "\ufeff# submitblock Method\n\nBroadcasts a new block in the NEO network.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"submitblock\",\n  \"params\": [hex],\n  \"id\": 1\n}\n```\n\n### Parameter Description\n\nhex: A Base64-encoded string of a serialized block.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"submitblock\",\n  \"params\": [\"AAAAACMSKFbGpGl6t7uroMpi2ilhQd84eU/pUrRfQyswXYl76woLOY0oW1z4InfxoKyxFAAB+8FS6cRu2Pm0iaOiD8OMCnLadQEAAMgcAAD6lrDvowCyjK9dBALCmE1fvMuahQFCDEAd8EoEFBcxOLCZfh8w0tUEHHmyn++KzW4I8oeJ1WyMmjHVcolpNzOnAOzXTn/xujwy93gJ9ijvVo6wAF5qC3wCKxEMIQL4L//X3jDpIyMLze0sPNW+yFcufrrL3bnzOipdJpNLixELQRON768CAGUTt7+NSxXGAA7aoUS2kokAAAAAACYcEwAAAAAARzMAAAHNWK7P0zW+HrPTEeHcgAlj39ctnwEAXQMA5AtUAgAAAAwUzViuz9M1vh6z0xHh3IAJY9/XLZ8MFM1Yrs/TNb4es9MR4dyACWPf1y2fE8AMCHRyYW5zZmVyDBS8r0HWhMfUrW7g2Z2pcHudHwyOZkFifVtSOAFCDEADRhUarLK+/BBjhqaWY5ieento21zgkcsUMWNCBWGd+v8a35zatNRgFbUkni4dDNI/BGc3zOgPT6EwroUsgvR+KQwhAv3yei642bBp1hrlpk26E7iWN8VC2MdMXWurST/mONaPC0GVRA14\"],\n  \"id\": 1\n}\n```\n\nResponse body in successful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"hash\": \"0xbe153a2ef9e9160906f7054ed8f676aa223a826c4ae662ce0fb3f09d38b093c1\"\n    }\n}\n```\n\nResponse body in unsuccessful cases:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n        \"code\": -500,\n        \"message\": \"AlreadyExists\"\n    }\n}\n```\n\nResponse Description:\n\nWhen result is false, the block has failed to broadcast and an exception occurs. The following error codes can be expected\n\n| Error codes | Message           | Description                                                  |\n| ----------- | ----------------- | ------------------------------------------------------------ |\n| 500         | AlreadyExists     | Block or transaction already exists and cannot be sent", "doc_id": "35aac647-092f-4aad-a8e7-d83c498b0b82", "embedding": null, "doc_hash": "dce06b3b23072117f9d2fee4ca30c5a023b41882a453a0902386d4f4616c7c9d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/submitblock"}, "node_info": {"start": 0, "end": 1930, "_node_type": "1"}, "relationships": {"1": "f6a94c6c27ce3db44a57df262dad209133423d93", "3": "6b1f0a47-4675-4840-a52a-f2b70e1dd5f4"}}, "__type__": "1"}, "6b1f0a47-4675-4840-a52a-f2b70e1dd5f4": {"__data__": {"text": "    | Block or transaction already exists and cannot be sent repeatedly. |\n|             | OutOfMemory       | The memory pool is full and no more transactions can be sent. |\n|             | UnableToVerify    | The block cannot be validated.                               |\n|             | Invalid           | The format or parameter is incorrect                         |\n|             | Expired           | The block information is expired                             |\n|             | InsufficientFunds | Insufficient funds                                           |\n|             | PolicyFail        | The behavior is not allowed (such as blacklist address trading) |", "doc_id": "6b1f0a47-4675-4840-a52a-f2b70e1dd5f4", "embedding": null, "doc_hash": "264eb2c9060eabcaa0151c7c6f3a8a74d01b7ae3c57a3df600caa4bed708a417", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/submitblock"}, "node_info": {"start": 1870, "end": 2542, "_node_type": "1"}, "relationships": {"1": "f6a94c6c27ce3db44a57df262dad209133423d93", "2": "35aac647-092f-4aad-a8e7-d83c498b0b82"}}, "__type__": "1"}, "1f828d58-6b4d-4ba9-9fdc-12cea3fcd962": {"__data__": {"text": "\ufeff# validateaddress Method\n\nVerifies that the address is a valid NEO address.\n\n:::note\n You must install the plugin [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [address],\n  \"id\": 1\n}\n```\n\n## Parameter Description\n\naddress: Address.\n\n:::note\n The NEO standard address begins with N because AddressVersion in Neo N3 has been modified to 53.\n:::\n\n## Example\n\n**Example 1**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [\"NPvKVTGZapmFWABLsyvfreuqn73jCjJtN1\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"NPvKVTGZapmFWABLsyvfreuqn73jCjJtN1\",\n        \"isvalid\": true\n    }\n}\n```\n\n**Example 2**\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [\"152f1muMCNa7goXYhYAQC61hxEgGacmncB\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"address\": \"152f1muMCNa7goXYhYAQC61hxEgGacmncB\",\n        \"isvalid\": false\n    }\n}\n```\n\n**Example 3**\n\nRequest body:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validateaddress\",\n  \"params\": [\"0x9127ea19791e3f3fc59309778a4abf275d5290e5\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"address\": \"0x9127ea19791e3f3fc59309778a4abf275d5290e5\",\n    \"isvalid\": false\n  }\n}\n```", "doc_id": "1f828d58-6b4d-4ba9-9fdc-12cea3fcd962", "embedding": null, "doc_hash": "b3c4554c28f7dcb315155e693944870d1a7f7c899e0c3ccf59c6ea09d07ffca1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/validateaddress"}, "node_info": {"start": 0, "end": 1473, "_node_type": "1"}, "relationships": {"1": "e3fde9feec47db53890d8f468140c42ff14b7a0d"}}, "__type__": "1"}, "02061a93-b6e3-4104-aea8-497c2f01bcba": {"__data__": {"text": "# verfyproof Method\n\nVerifies using the root hash and proof, and gets the value of the storage corresponding to the key.\n\n:::note\n You must install the plugin [StateService](https://github.com/neo-project/neo-modules/releases) and [RpcServer](https://github.com/neo-project/neo-modules/releases) before you can invoke the method.\n:::\n\n## Parameter Description\n\n- roothash: root hash of the state root\n\n- proof: proof data of the state root; Base64-encoded.\n\n## Example\n\nRequest body:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"verifyproof\",\n  \"params\": [\"0x7bf925dbd33af0e00d392b92313da59369ed86c82494d0e02040b24faac0a3ca\", \"Bfv///8XBiQBAQ8DRzb6Vkdw0r5nxMBp6Z5nvbyXiupMvffwm0v5GdB6jHvyAAQEBAQEBAQEA7l84HFtRI5V11s58vA+8CZ5GArFLkGUYLO98RLaMaYmA5MEnx0upnVI45XTpoUDRvwrlPD59uWy9aIrdS4T0D2cA6Rwv/l3GmrctRzL1me+iTUFdDgooaz+esFHFXJdDANfA2bdshZMp5ox2goVAOMjvoxNIWWOqjJoRPu6ZOw2kdj6A8xovEK1Mp6cAG9z/jfFDrSEM60kuo97MNaVOP/cDZ1wA1nf4WdI+jksYz0EJgzBukK8rEzz8jE2cb2Zx2fytVyQBANC7v2RaLMCRF1XgLpSri12L2IwL9Zcjz5LZiaB5nHKNgQpAQYPDw8PDw8DggFffnsVMyqAfZjg+4gu97N/gKpOsAK8Q27s56tijRlSAAMm26DYxOdf/IjEgkE/u/CoRL6dDnzvs1dxCg/00esMvgPGioeOqQCkDOTfliOnCxYjbY/0XvVUOXkceuDm1W0FzQQEBAQEBAQEBAQEBAQEBJIABAPH1PnX/P8NOgV4KHnogwD7xIsD8KvNhkTcDxgCo7Ec6gPQs1zD4igSJB4M9jTREq+7lQ5PbTH/6d138yUVvtM8bQP9Df1kh7asXrYjZolKhLcQ1NoClQgEzbcJfYkCHXv6DQQEBAOUw9zNl/7FJrWD7rCv0mbOoy6nLlHWiWuyGsA12ohRuAQEBAQEBAQEBAYCBAIAAgA=\"],\n  \"id\": 1\n}\n```\n\nResponse body:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"AAI=\"\n}\n```", "doc_id": "02061a93-b6e3-4104-aea8-497c2f01bcba", "embedding": null, "doc_hash": "2ad809b6ccf129c730a0f51fb1123fcb4a57a1ee1162352a371b44ce2308174f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/verifyproof"}, "node_info": {"start": 0, "end": 1490, "_node_type": "1"}, "relationships": {"1": "81d30f3dc5c02325f5665c80adc8717b3d817d19"}}, "__type__": "1"}, "12a43cf9-9ad0-48b1-853f-404885d4addb": {"__data__": {"text": "# Neo.SmartContract.Framework\n\n## Class\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| ByteString      | Encapsulation for Byte Array                                 |\n| ECPoint         | Represents a (X,Y) coordinate pair for elliptic curve cryptography (ECC) structures |\n| ExecutionEngine | Represents the VM used to execute the script                 |\n| List            | Similar to List in .net                                      |\n| Map             | Similar to Dictionary in .net                                |\n| Nep11Token      | Abstraction class for NFT asset                          |\n| Nep17Token      | Abstraction class for digital asset                              |\n| UInt160         | UInt160                                                      |\n| UInt256         | UInt256                                                      |\n\n\n## Extension method\n\n| Name         | Description                                                  |\n| ------------ | ------------------------------------------------------------ |\n| ToByteString | - Converts byte to byte[] considering the byte as a BigInteger (0x00 at the end).<br/>- Converts sbyte to byte[].<br/>- Converts string to byte[]. Examples: \"hello\" -> [0x68656c6c6f]; \"\" -> []; \"Neo\" -> [0x4e656f]<br/>- Converts byte[] to string. Examples: [0x68656c6c6f] -> \"hello\"; [] -> \"\"; [0x4e656f] -> \"Neo\"<br/> |\n| Within       | Returns true if a <= x && x < b. Examples: x=5 a=5 b=15 is true; x=15 a=5 b=15 is false |\n| Concat       | Concatenates two byte arrays                                 |\n| Range        | Copies the subarray, starting from the specified position and having the specified length |\n| Take         | Returns a specified number of contiguous elements from the start of a sequence |\n| Last         | Returns a specified number of contiguous elements from the last of a sequence |\n| Reverse      | Reverses the order of the elements                     ", "doc_id": "12a43cf9-9ad0-48b1-853f-404885d4addb", "embedding": null, "doc_hash": "758461017ac746147950d716cfc2e96a7e417ca9b7528c394f6a5e753b3d61aa", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework"}, "node_info": {"start": 0, "end": 2061, "_node_type": "1"}, "relationships": {"1": "f71c0b8fe740205051c40c4c6a2a4576c49277d3", "3": "14116718-c1f5-45ce-b544-c26c907baa3d"}}, "__type__": "1"}, "14116718-c1f5-45ce-b544-c26c907baa3d": {"__data__": {"text": "                         |\n| Sqrt         | Calculates the square root                                   |\n\n## Enum\n\n| Name                  | Description                                   |\n| --------------------- | --------------------------------------------- |\n| ContractParameterType | Represents the parameter type of contract     |\n| OpCode                | Underlying types, which developers can ignore |\n| StackItemType         | Underlying types, which developers can ignore |\n", "doc_id": "14116718-c1f5-45ce-b544-c26c907baa3d", "embedding": null, "doc_hash": "699f5aa44e044a24a30e94444a84af6bdf1644167f35d80c6c4136e6b6b1e6fa", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework"}, "node_info": {"start": 2042, "end": 2529, "_node_type": "1"}, "relationships": {"1": "f71c0b8fe740205051c40c4c6a2a4576c49277d3", "2": "12a43cf9-9ad0-48b1-853f-404885d4addb"}}, "__type__": "1"}, "0e240014-08d7-4f50-a5db-88f912b873b0": {"__data__": {"text": "# Neo.SmartContract.Framework.Native\n\nA series of native contract methods that can be invoked in the smart contract.\n\n## Native Contract Classes\n\n| Contract Name                                                | Script Hash                                | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------ | ------------------------------------------------------------ |\n| [ContractManagement](native/ContractManagement.md) | 0xfffdc93764dbaddd97c48f252a53ea4643faa3fd | A native contract used to manage all deployed smart contracts |\n| [CryptoLib](native/CryptoLib.md) | 0x726cb6e0cd8628a1350a611384688911ab75f51b | A native contract library that provides cryptographic algorithms |\n| [GAS](native/GAS.md)             | 0xd2a4cff31913016155e38e474a2c06d08be276cf | Represents the GAS token in the NEO system                   |\n| [Ledger](native/Ledger.md)       | 0xda65b600f7124ce6c79950c1772a36403104f2be | A native contract for storing all blocks and transactions    |\n| [NEO](native/NEO.md)             | 0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5 | Represents the NEO token in the Neo system                   |\n| [Oracle](native/Oracle.md)       | 0xfe924b7cfe89ddd271abaf7210a80a7e11178758 | The native Oracle service for Neo system                     |\n| [Policy](native/Policy.md)       | 0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b | A native contract that manages the system policies           |\n| [RoleManagement](native/RoleManagement.md) | 0x49cf4e5378ffcd4dec034fd98a174c5491e395e2 | A native contract for managing roles in Neo system           |\n| [StdLib](native/StdLib.md)       | 0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0 | A native contract library that provides useful functions     |\n\n## Enumeration\n\n| Enumeration                                                  | Description                                |\n| ------------------------------------------------------------ | ------------------------------------------ |\n| [NamedCurve](native/NamedCurve.md) | Supported Elliptic Curves Extension        |\n| [OracleResponseCode](native/OracleResponseCode.md) | Defines the response code types of Oracle  |\n| [Role](native/Role.md)           | Defines permission types of RoleManagement |\n\n", "doc_id": "0e240014-08d7-4f50-a5db-88f912b873b0", "embedding": null, "doc_hash": "52e6deae669c07b3c5bb2db6a5aca66ece5b09b028f7bcedd1c5680294800c94", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native"}, "node_info": {"start": 0, "end": 2334, "_node_type": "1"}, "relationships": {"1": "a264d976268783a1bd1685c226188343b107e973"}}, "__type__": "1"}, "378f4fce-8e0b-4b6c-ad81-87267cbe7962": {"__data__": {"text": "# ContractManagement Class\n\nProvides a series of methods for the native contract `ContractManagement`, which contract hash is `0xfffdc93764dbaddd97c48f252a53ea4643faa3fd`.\n\nNamespace: [Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class ContractManagement\n```\n\n## Attributes\n\n| Name | Description   |\n| ---- | ------------- |\n| Hash | Contract hash |\n\n## Methods\n\n| Name                                                         | Description                                        |\n| ------------------------------------------------------------ | -------------------------------------------------- |\n| GetMinimumDeploymentFee()                                    | Gets the minimum fee of contract deployment        |\n| [GetContract(UInt160 hash)](ContractManagement/GetContract.md) | Gets the contract based on the given contract hash |\n| [Deploy(byte[] nefFile, string manifest)](ContractManagement/Deploy.md) | Deploys the contract                               |\n| [Update(byte[] nefFile, string manifest)](ContractManagement/Update.md) | Updates the contract                               |\n| [Destroy()](ContractManagement/Destroy.md)                   | Destroys the contract                              |\n\n", "doc_id": "378f4fce-8e0b-4b6c-ad81-87267cbe7962", "embedding": null, "doc_hash": "92fa9cf10fedac51ccfe1dacdb20bdfa1f74120837cdda09b3b6fff03722d85b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement"}, "node_info": {"start": 0, "end": 1283, "_node_type": "1"}, "relationships": {"1": "10e706d196aba6a27e863d2559c2eb93b4743fa2"}}, "__type__": "1"}, "c68139a9-ce9b-43d7-a46b-65c5e1665e72": {"__data__": {"text": "# ContractManagement.Deploy Method\n\nDeploys the contract.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Contract Deploy(ByteString nefFile, string manifest);\npublic static extern Contract Deploy(ByteString nefFile, string manifest, object data);\n```\n\nParameters:\n\n- nefFile: nef data of the contract in byte array.\n- manifest: Metadata of the contract in Json string.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static byte[] nef = \"4e4546336e656f6e00000000000000000000000000000000000000000000000000000000332e302e302e30000000000000000000000000000000000000000000000000000211407060ba5f\".HexToBytes();\n    private static string manifest = \"{\\\"name\\\":\\\"\\\",\\\"groups\\\":[],\\\"supportedstandards\\\":[],\\\"abi\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"update\\\",\\\"parameters\\\":[],\\\"offset\\\":0,\\\"returntype\\\":\\\"Any\\\",\\\"safe\\\":false}],\\\"events\\\":[]},\\\"permissions\\\":[{\\\"contract\\\":\\\"*\\\",\\\"methods\\\":\\\"*\\\"}],\\\"trusts\\\":[],\\\"extra\\\":null}\";\n\n    public static object Deploy()\n    {\n        Contract contract = ContractManagement.Deploy(nef, manifest);\n        return contract.Hash;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n    \"type\":\"ByteString\",\n    \"value\":\"fbKpbpzeGaTQ5xgyBeVh0JkNcPo=\"\n}]\n```\n\nResponse description:\n\n- ByteString string: the deployed contract hash.\n\n- Other: failed.\n\nUsually, you can define the method `_deploy` in the contract and execute the neo-cli command `deploy contract.nef` to deploy the contract.\n\n```cs\npublic static void _deploy(object data, bool update)\n{\n    if (update) return;\n    // Add other logics after the contract is deployed\n}\n```\n\n[Back](../ContractManagement.md)", "doc_id": "c68139a9-ce9b-43d7-a46b-65c5e1665e72", "embedding": null, "doc_hash": "d88d0f6b7a98b9e0d683e14c713de84853405f0893270368adee1e7888e6c94f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/Deploy"}, "node_info": {"start": 0, "end": 1727, "_node_type": "1"}, "relationships": {"1": "b11b8e8dab5971fc416380fe2fce1fb07011550f"}}, "__type__": "1"}, "e93a0e63-143f-4716-aa12-b7d97e6e0eed": {"__data__": {"text": "# ContractManagement.Destroy Method\n\nDestroies the contract.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern void Destroy();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 Owner = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static void Destroy()\n    {\n        if (!Runtime.CheckWitness(Owner)) throw new Exception(\"No authorization.\");\n        ContractManagement.Destroy();\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\"type\":\"Any\"}]\n```\n\nResponse description:\n\n- Void type: the contract was destroyed successfully.\n\n- Other: failed.\n\n[back](../ContractManagement.md)", "doc_id": "e93a0e63-143f-4716-aa12-b7d97e6e0eed", "embedding": null, "doc_hash": "d9f9246533e635c381cd3645caaf33b24f43c81c10202cd9f902b28e2ec63d72", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/Destroy"}, "node_info": {"start": 0, "end": 755, "_node_type": "1"}, "relationships": {"1": "b50ea8dfedac163bc0b144e72270592774d32792"}}, "__type__": "1"}, "cc577d4b-9fde-48c0-9b20-bf1601ad001a": {"__data__": {"text": "# ContractManagement.GetContract Method\n\nGets the contract information.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Contract GetContract(UInt160 hash);\n```\n\nParameters:\n\n- hash: the contract hash\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static UInt160 ScriptHash = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object GetContract()\n    {\n        Contract contract = ContractManagement.GetContract(ScriptHash);\n        return contract != null;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n    \"type\":\"Boolean\",\n    \"value\":true\n}]\n```\n\nResponse description:\n\n- Boolean type: true indicates the contract has been deployed.\n\n- Other: failed.\n\n[Back](../ContractManagement.md)", "doc_id": "cc577d4b-9fde-48c0-9b20-bf1601ad001a", "embedding": null, "doc_hash": "bb7ae8ee58641160e633275b518467b4440f400c23c9ac293b3c4c4522a959fa", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/GetContract"}, "node_info": {"start": 0, "end": 848, "_node_type": "1"}, "relationships": {"1": "e6b00f1398420049f0ffbed6b1bc37921fb7430d"}}, "__type__": "1"}, "e5d4b3e0-d1bb-4aa5-94a4-19f82175ea0b": {"__data__": {"text": "# ContractManagement.Update Method\n\nUpdate the contract.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern void Update(ByteString nefFile, string manifest);\npublic static extern void Update(ByteString nefFile, string manifest, object data = null);\n```\n\nParameters:\n\n- nefFile: nef data of the contract in byte array.\n- manifest: Metadata of the contract in Json string.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static byte[] nef = \"4e4546336e656f6e00000000000000000000000000000000000000000000000000000000332e302e302e30000000000000000000000000000000000000000000000000000211407060ba5f\".HexToBytes();\n    private static string manifest = \"{\\\"name\\\":\\\"\\\",\\\"groups\\\":[],\\\"supportedstandards\\\":[],\\\"abi\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"update\\\",\\\"parameters\\\":[],\\\"offset\\\":0,\\\"returntype\\\":\\\"Any\\\",\\\"safe\\\":false}],\\\"events\\\":[]},\\\"permissions\\\":[{\\\"contract\\\":\\\"*\\\",\\\"methods\\\":\\\"*\\\"}],\\\"trusts\\\":[],\\\"extra\\\":null}\";\n\n    public static void Update()\n    {\n        if (!Runtime.CheckWitness(Owner)) throw new Exception(\"No authorization.\");\n        ContractManagement.Update(nef, manifest);\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\"type\":\"Any\"}]\n```\n\nResponse description:\n\n- Void type: update completed.\n\n- Other: failed.\n\n:::note\nThe contract hash remains unchanged after the update.\n:::\n\n[Back](../ContractManagement.md)", "doc_id": "e5d4b3e0-d1bb-4aa5-94a4-19f82175ea0b", "embedding": null, "doc_hash": "193de1969aa256e70a35588ea1d67541a56ff14b00a7e9e8098aa6d93ac6161c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/Update"}, "node_info": {"start": 0, "end": 1462, "_node_type": "1"}, "relationships": {"1": "32af8818a33725d19f1044d809a1259b00204688"}}, "__type__": "1"}, "e15b2b54-5f6a-40f3-9979-ef86165612a4": {"__data__": {"text": "# CryptoLib Class\n\nProvides a series methods of the native contract `CryptoLib`. The contract hash is `0x726cb6e0cd8628a1350a611384688911ab75f51b`\u3002\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static class CryptoLib\n```\n\n## Attributes\n\n| Name | Description            |\n| ---- | ---------------------- |\n| Hash | Gets the contract hash |\n\n## Methods\n\n| Name                                   | Description   |\n| ---------------------------------------- | --------------- |\n| Sha256(ByteString value) | Calculates the byte array with SHA256 hash |\n| ripemd160(ByteString value) | Calculates the byte array with RIPEMD160 |\n| VerifyWithECDsa(ByteString message, Cryptography.ECC.ECPoint pubkey, ByteString signature, NamedCurve curve) | Uses elliptic curve to verify the signature |", "doc_id": "e15b2b54-5f6a-40f3-9979-ef86165612a4", "embedding": null, "doc_hash": "60c2b81d8278d35edf8eabcfa737ffcb90acf14ebe38302cd4d5d30a0585e79f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/CryptoLib"}, "node_info": {"start": 0, "end": 861, "_node_type": "1"}, "relationships": {"1": "548554f4c74cc0abdeebd3a8ed5d68a3105582a0"}}, "__type__": "1"}, "b6cf473a-7e0f-42ba-b0f9-09c6f7e48877": {"__data__": {"text": "# GAS Class\n\nProvides a series of attributes and methods of the native contract `GasToken`, which contract hash is `0xd2a4cff31913016155e38e474a2c06d08be276cf`.\n\nGasToken is also an NEP-17 contract, which inherits all properties and methods of an NEP-17 contract. \n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class GAS\n```\n\n## Attributes\n\n| Name          | Description                                              |\n| ----------------- | ------------------------------------------------------------ |\n| Hash           | Gets the contract hash                  |\n| Symbol           | Gets the symbol, gas                            |\n| Decimals          | Gets decimals                   |\n\n## Methods\n\n| Name                                                         | Description                             |\n| ------------------------------------------------------------ | --------------------------------------- |\n| [TotalSupply()](Gas/TotalSupply.md)                          | Gets the total supply of GAS            |\n| [BalanceOf(UInt160 account)](Gas/BalanceOf.md)               | Gets the balance                        |\n| [Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null)](Gas/Transfer.md) | Transfers GAS                           |\n| Refuel                                                       | Refuel (adding fees) for smart contract |", "doc_id": "b6cf473a-7e0f-42ba-b0f9-09c6f7e48877", "embedding": null, "doc_hash": "fdffc50b168282491f52e39f32230656ba2cb4228d8bc9c899e3668d38d4d271", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas"}, "node_info": {"start": 0, "end": 1457, "_node_type": "1"}, "relationships": {"1": "ac15883b9d74307c3c252704f2f52ca879cd9e9f"}}, "__type__": "1"}, "546b3abe-f947-43f0-953c-780027cb4ed3": {"__data__": {"text": "# GAS.BalanceOf Method\n\nGets the GAS balance in the account.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern BigInteger BalanceOf(byte[] account);\n```\n\nParameters:\n\n- account: Script hash of the account\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInteger result = GAS.BalanceOf(account);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description\n\n- Integer type: The account balance obtained successfully.\n\n- Other: failed.\n\n[Back](../Gas.md)", "doc_id": "546b3abe-f947-43f0-953c-780027cb4ed3", "embedding": null, "doc_hash": "1374ae6880c796b15e9449d552346fae45a395ce8442bfb286dcd3693d708da8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas/BalanceOf"}, "node_info": {"start": 0, "end": 799, "_node_type": "1"}, "relationships": {"1": "088f3e688a51e9b355c5161128258e0296446984"}}, "__type__": "1"}, "35b75cc3-6e3f-4d38-a0b9-23a590601c10": {"__data__": {"text": "# GAS.TotalSupply Method\n\nGets the total supply of GAS.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern BigInteger TotalSupply();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        BigInteger result = GAS.TotalSupply();\n        return result;\n    }\n}\n```\n\n[Back](../Gas.md)", "doc_id": "35b75cc3-6e3f-4d38-a0b9-23a590601c10", "embedding": null, "doc_hash": "33c9dea9d6a565949231956ff240cbd58dae92690e577056f349a7c31b875850", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas/TotalSupply"}, "node_info": {"start": 0, "end": 452, "_node_type": "1"}, "relationships": {"1": "dbca915c696c12959df834a43b1fab18a0502078"}}, "__type__": "1"}, "0cfa69c4-10c6-466b-911d-1d931a523f92": {"__data__": {"text": "# **GAS.Transfer Method**\n\nTransfers GAS\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null);\n```\n\nParameters:\n\n- from: Script hash of the account you transfer from\n- to: Script hash of the account you transfer to\n- amount: The amount to be transferred.\n- data: An additional parameter, which will be passed as a parameter when the onNEP17Payment method of the receiver is called in the transfer method of NEP-17.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 from = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    private static readonly UInt160 to = \"NXjtqYERuvSWGawjVux8UerNejvwdYg7eE\".ToScriptHash();\n\n    public static object Test()\n    {\n        bool result = GAS.Transfer(from, to, 1000);\n        return result;\n    }\n}\n```\n\nRespond:\n\n```json\n{\n\t\"type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nRespond description:\n\n- Boolean type: true means assets are transferred successfully.\n\n- Others: failed.\n\n[Back](../Gas.md)\n", "doc_id": "0cfa69c4-10c6-466b-911d-1d931a523f92", "embedding": null, "doc_hash": "a9ab5426e51977c320ea7131b3e51180da306c0a6a7d7642dd693a083906d5f1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas/Transfer"}, "node_info": {"start": 0, "end": 1172, "_node_type": "1"}, "relationships": {"1": "a351d02d11ae539555b4c40dfa309a71d5a97f52"}}, "__type__": "1"}, "9f7c6e3e-46ab-476d-bc0c-4482172212d8": {"__data__": {"text": "# Ledger Class\n\nProvides a series attributes and methods of the native contract GasToken, which hash is`0xda65b600f7124ce6c79950c1772a36403104f2be`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Ledger\n```\n\n## Attributes\n\n| Name         | Description                                                  |\n| ------------ | ------------------------------------------------------------ |\n| Hash         | Gets the contract hash.                                      |\n| CurrentHash  | Gets hash of the latest block                                |\n| CurrentIndex | Gets latest block height in current blockchain<br/>Block height = Block index = Block count - 1<br/> |\n\n## Methods\n\n| Name                                                         | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [GetBlock()](Ledger/GetBlock.md)                             | Gets block by the block hash or index                        |\n| [GetTransaction(UInt256 hash)](Ledger/GetTransaction.md)     | Gets transaction by transaction ID                           |\n| [GetTransactionFromBlock()](Ledger/GetTransactionFromBlock.md) | Gets the specified transaction by the block and transaction indexes |\n| [GetTransactionHeight(UInt256 hash)](Ledger/GetTransactionHeight.md) | Gets the block height where the transaction occurs by the transaction hash |\n\n", "doc_id": "9f7c6e3e-46ab-476d-bc0c-4482172212d8", "embedding": null, "doc_hash": "4325f304743cbcd1ab10af37a4b400b1bdd01b26dce81d3d2c937d29ab9ed6b1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger"}, "node_info": {"start": 0, "end": 1561, "_node_type": "1"}, "relationships": {"1": "c5e2918f44d47ccd432cb23999c141533db92b33"}}, "__type__": "1"}, "6948c30a-6721-49be-a667-86357c0c5d3c": {"__data__": {"text": "# Ledger.GetBlock Method\n\nGets block by the block hash or index.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Block GetBlock(uint index);\npublic static extern Block GetBlock(UInt256 hash);\n```\n\nParameters\uff1a\n\n- index: Index of the block to query\n- hash: Hash of the block to query\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Test()\n    {\n        var block = Ledger.GetBlock(100);\n    }\n    public static void Test2(UInt256 hash)\n    {\n        var block = Ledger.GetBlock(hash);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "6948c30a-6721-49be-a667-86357c0c5d3c", "embedding": null, "doc_hash": "3a1eaecddb6434cc66a5c3766e74fc1a052b31092003d642d71b3f4328e7299f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetBlock"}, "node_info": {"start": 0, "end": 669, "_node_type": "1"}, "relationships": {"1": "a2c2801854569a413107edf217bc348344bc289e"}}, "__type__": "1"}, "2b26a606-71c3-4ceb-ac88-ad49b6e808ee": {"__data__": {"text": "# Ledger.GetTransaction Method\n\nGets transaction by transaction hash.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Transaction GetTransaction(UInt256 hash);\n```\n\nParameter:\n\n- hash: The hash of the queried transaction\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Test(UInt256 hash)\n    {\n        var tx = Ledger.GetTransaction(hash);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "2b26a606-71c3-4ceb-ac88-ad49b6e808ee", "embedding": null, "doc_hash": "ad654b0fb3905e6581989848a4dbbf5749bb00e39dec2c30dde87076cbe02103", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetTransaction"}, "node_info": {"start": 0, "end": 526, "_node_type": "1"}, "relationships": {"1": "b5d5df8b9e2648dde1395ff061ea22d93482c9cf"}}, "__type__": "1"}, "7450f239-ef7e-477e-b6aa-4d8907a898e0": {"__data__": {"text": "# Ledger.GetTransactionFromBlock Method\n\nGets the specified transaction by the block index (or block hash) and transaction index.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Transaction GetTransactionFromBlock(UInt256 blockHash, int txIndex);\npublic static extern Transaction GetTransactionFromBlock(uint blockHeight, int txIndex);\n```\n\nParameters:\n\n- blockHash: the hash of the specified block\n\n- blockHeight: the index of the specified block (block height)\n- txIndex: transaction index. The transaction index starts from 0 and increases sequentially.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void GetFirstTransaction(uint block)\n    {\n        var tx = Ledger.GetTransactionFromBlock(block, 0);\n    }\n    public static void GetFirstTransaction(UInt256 block)\n    {\n        var tx = Ledger.GetTransactionFromBlock(block, 0);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "7450f239-ef7e-477e-b6aa-4d8907a898e0", "embedding": null, "doc_hash": "b2bbc24fdabdc31157277569636e38ff9b311143b34a4510590f47404b2ee14d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetTransactionFromBlock"}, "node_info": {"start": 0, "end": 1017, "_node_type": "1"}, "relationships": {"1": "8d109e7435bd9c2af69580ec1e320a6f037a4da5"}}, "__type__": "1"}, "734bb052-426c-4c08-a153-daa447455aa2": {"__data__": {"text": "# Ledger.GetTransactionHeight Method\n\nGets the block height where the transaction occurs by the transaction hash.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern int GetTransactionHeight(UInt256 hash);\n```\n\nParameter:\n\n- hash: The hash of the queried transaction\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static int Test(UInt256 txHash)\n    {\n        return Ledger.GetTransactionHeight(txHash);\n    }\n}\n```\n[Back](../Ledger.md)", "doc_id": "734bb052-426c-4c08-a153-daa447455aa2", "embedding": null, "doc_hash": "85c62fac10848dd732b473abb7bfbbadeacad7f633d4e7514416b1a8eb9f46f8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetTransactionHeight"}, "node_info": {"start": 0, "end": 575, "_node_type": "1"}, "relationships": {"1": "dcb23df74bc695168344be2595f63d212cb0b219"}}, "__type__": "1"}, "6ebf67da-5047-482a-bd9a-3f6317bb291a": {"__data__": {"text": "# NamedCurve Enumeration\n\nSupported Elliptic Curves Extension.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly\uff1aNeo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic enum NamedCurve : byte\n{\n    secp256k1 = 22,\n    secp256r1 = 23\n}\n```\n\n## Description\n\nUse in [CryptoLib.VerifyWithECDsa](../native/CryptoLib.md) method.\n\nReference [RFC 4492](https://tools.ietf.org/html/rfc4492#section-5.1.1).\n\n", "doc_id": "6ebf67da-5047-482a-bd9a-3f6317bb291a", "embedding": null, "doc_hash": "b037ed5833d1bf98bfc2290760195b92a6aed5236a0be11d7702a40e8d38d700", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/NamedCurve"}, "node_info": {"start": 0, "end": 417, "_node_type": "1"}, "relationships": {"1": "dfaabcafc3863cf7bd3be870fb8101ff56a019ad"}}, "__type__": "1"}, "02c30c38-247e-4926-a887-1cca5a7d5b71": {"__data__": {"text": "# Neo Class\n\nProvides a series of attributes and methods of the native contract NeoToken, which contract hash is `0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5`.\n\nNeoToken is also an NEP-17 contract that inherits all NEP-17 specific attributes and methods.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class NEO\n```\n\n## Attributes\n\n| Name          | Description                                              |\n| ----------------- | ------------------------------------------------------------ |\n| Name              | Gets the name, NEO   |\n| Symbol           | Gets the symbol, neo |\n| Decimals          | Gets decimals                      |\n\n## Methods\n\n| Name                                                         | Description                                     |\n| ------------------------------------------------------------ | ----------------------------------------------- |\n| [TotalSupply()](Neo/TotalSupply.md)                          | Gets the total supply of NEO                    |\n| [BalanceOf(UInt160 account)](Neo/BalanceOf.md)               | Gets the balance                                |\n| [Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null)](Neo/Transfer.md) | Transfers NEO                                   |\n| [GetGasPerBlock()](Neo/GetGasPerBlock.md)                    | Gets the number of GAS generated for each block |\n| [UnclaimedGas(UInt160 account, uint end)](Neo/UnclaimedGas.md) | Gets the number of unclaimed GAS                |\n| [RegisterCandidate(ECPoint pubkey)](Neo/RegisterCandidate.md) | Registers as a candidate                        |\n| [UnRegisterCandidate(ECPoint pubkey)](Neo/UnRegisterCandidate.md) | Unregisters as a candidate                      |\n| [Vote(UInt160 account, ECPoint voteTo)](Neo/Vote.md)         | Votes for candidates                            |\n| [GetCandidates()](Neo/GetCandidates.md)                      | Gets candidates list                            |\n|", "doc_id": "02c30c38-247e-4926-a887-1cca5a7d5b71", "embedding": null, "doc_hash": "e8f2510b4ea18fa3bed4f19fbacff5b12dc41311d48b395222cbbe0c4a067800", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo"}, "node_info": {"start": 0, "end": 2039, "_node_type": "1"}, "relationships": {"1": "6719ffcbf4cccbeb6ca14ea0b60a46c1f43341d8", "3": "41ea6e5f-0cc9-4c19-b255-c985b47001f4"}}, "__type__": "1"}, "41ea6e5f-0cc9-4c19-b255-c985b47001f4": {"__data__": {"text": "                 |\n| [GetCommittee()](Neo/GetCommittee.md)                        | Gets committee members list                     |\n| [GetNextBlockValidators()](Neo/GetNextBlockValidators.md)    | Gets validators list for the next block         |\n| [GetAccountState(DataCache snapshot, UInt160 account)](Neo/GetAccountState.md) | Gets the latest votes of the specified  account |\n\n", "doc_id": "41ea6e5f-0cc9-4c19-b255-c985b47001f4", "embedding": null, "doc_hash": "1c830f934c6fa9b7abe0b5407b1209c4f8729007d39e5feeff68130e48788077", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo"}, "node_info": {"start": 2019, "end": 2402, "_node_type": "1"}, "relationships": {"1": "6719ffcbf4cccbeb6ca14ea0b60a46c1f43341d8", "2": "02c30c38-247e-4926-a887-1cca5a7d5b71"}}, "__type__": "1"}, "d23aa091-4d97-4299-acdc-97c59400efb9": {"__data__": {"text": "# **NEO.BalanceOf** Method (UInt160)\n\nGets the NEO balance in the account.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern BigInteger BalanceOf(UInt160 account);\n```\n\nParameters:\n\n- account: Script hash of the account\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInteger result = NEO.BalanceOf(account);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description:\n\n- Integer type: The account balance is obtained successfully.\n\n- Others: failed.\n\n[Back](../Neo.md)\n\n", "doc_id": "d23aa091-4d97-4299-acdc-97c59400efb9", "embedding": null, "doc_hash": "f7d4b521c49f2105777e98de77c7bdd0ee4787a13ce8a14478fa3364159797bc", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/BalanceOf"}, "node_info": {"start": 0, "end": 821, "_node_type": "1"}, "relationships": {"1": "c6e7ec7117c9c8f9dceddaee458ae87c9a1e96a4"}}, "__type__": "1"}, "99331cf1-c5be-4e17-883b-344741dcf3ae": {"__data__": {"text": "# NEO.GetAccountState Method ()\n\nGets the latest votes of the specified account.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```\npublic static extern NeoAccountState GetAccountState(DataCache snapshot, UInt160 account)\n```\n\n## Example\n\n```\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    \n    public static object Test()\n    {\n        return NEO.GetAccountState(account);\n    }\n}\n```\n\nResponse body:\n\n```\n[\n      {\n        \"type\": \"Struct\",\n        \"value\": [\n          {\n            \"type\": \"Integer\",\n            \"value\": \"900\"\n          },\n          {\n            \"type\": \"Integer\",\n            \"value\": \"9774\"\n          },\n          {\n            \"type\": \"ByteString\",\n            \"value\": \"AsNeyvySxknpefBTobcD9O\\u002BQiieFUIdCtmzAWZvxQPA4\"\n          }\n        ]\n      }\n]\n```\n\nResponse description:\n\n- 1st value: the current account balance, which equals to the votes cast. \n- 2nd value: The block height at last update.\n- 3rd value: The public key of the account address to vote.\n\n[Back](../Neo.md)", "doc_id": "99331cf1-c5be-4e17-883b-344741dcf3ae", "embedding": null, "doc_hash": "09c558d955729dfff04a538639b8ce3c78cc5d48ae6267726ef9ac264d81b880", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetAccountState"}, "node_info": {"start": 0, "end": 1198, "_node_type": "1"}, "relationships": {"1": "20c794285446ac86257df2cec9ec228c881271d1"}}, "__type__": "1"}, "165adc68-a840-407a-99f3-0c7cac74093e": {"__data__": {"text": "# NEO.GetCandidates Method ()\n\nGets the list of candidates.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern (ECPoint, BigInteger)[] GetCandidates();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        (ECPoint, BigInteger)[] result = NEO.GetCandidates();\n        return result;\n    }\n}\n```\n\nResponse description:\n\n```json\n[{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"Struct\",\n\t\t\"value\": [{\n\t\t\t\"type\": \"ByteString\",\n\t\t\t\"value\": \"Apls6R4n/uoL7MTn/cB3Llj8G\\u002BuLJ7LUyL/JWBQg4I0y\"\n\t\t}, {\n\t\t\t\"type\": \"Integer\",\n\t\t\t\"value\": \"10000\"\n\t\t}]\n\t}]\n}]\n```\n\nResponse description:\n\n- Array type: candidates are successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)\n\n", "doc_id": "165adc68-a840-407a-99f3-0c7cac74093e", "embedding": null, "doc_hash": "b2d6be6e06912846ef8fa1924cf446e6e798ea0154ac21d8b2b225ffdfa3c4e1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetCandidates"}, "node_info": {"start": 0, "end": 838, "_node_type": "1"}, "relationships": {"1": "5f657085496c41f12ead786603ff03022ae4e539"}}, "__type__": "1"}, "41e3ec8e-6492-45f2-9fbc-818f11c034da": {"__data__": {"text": "# NEO.GetCommittee Method ()\n\nGets the list of committee members.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern string[] GetCommittee();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        string[] result = NEO.GetCommittee();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"Auj/F8Vn1i8nT\\u002BJHzIhKKmzTuP0Nd5qMWFYomlYKzKy0\"\n\t}]\n}]\n```\n\nRespond description:\n\n- Array type: committee members are successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "41e3ec8e-6492-45f2-9fbc-818f11c034da", "embedding": null, "doc_hash": "84258cf0f88d9c10d07ff6866307b930272f84a90c1f8ce3b990cb927f119167", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetCommittee"}, "node_info": {"start": 0, "end": 719, "_node_type": "1"}, "relationships": {"1": "878c150d871605948a70fea7252d5dcc617b995b"}}, "__type__": "1"}, "51921015-755f-4629-bfdc-75076c64b667": {"__data__": {"text": "# NEO.GetGasPerBlock Method ()\n\nGets the number of GAS generated in each block.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern BigInteger GetGasPerBlock();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        BigInteger result = NEO.GetGasPerBlock();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description:\n\n- Integer type: the number of GAS generated in each block\n\n- Others: failed\n\n[Back](../Neo.md)", "doc_id": "51921015-755f-4629-bfdc-75076c64b667", "embedding": null, "doc_hash": "9c7ede9d80ee468fa4490034d7186c877b448caf10bc3934ff6618f2f9137845", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetGasPerBlock"}, "node_info": {"start": 0, "end": 655, "_node_type": "1"}, "relationships": {"1": "259b9d96b728a11e2ed46378767a965d7996546e"}}, "__type__": "1"}, "d2b2a4a6-8961-4c39-91db-f707778284e8": {"__data__": {"text": "# NEO.GetNextBlockValidators Method ()\n\nGets the list of validators for the next block\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern string[] GetNextBlockValidators();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        string[] result = NEO.GetNextBlockValidators();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n[{\n\t\"type\": \"Array\",\n\t\"value\": [{\n\t\t\"type\": \"ByteString\",\n\t\t\"value\": \"Auj/F8Vn1i8nT\\u002BJHzIhKKmzTuP0Nd5qMWFYomlYKzKy0\"\n\t}]\n}]\n```\n\nResponse description:\n\n- Array type: validators by persisting block are successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "d2b2a4a6-8961-4c39-91db-f707778284e8", "embedding": null, "doc_hash": "8f166a92e0ce73241c4f266492c140b041a62e813b1a7ebb2b955897706ec413", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetNextBlockValidators"}, "node_info": {"start": 0, "end": 774, "_node_type": "1"}, "relationships": {"1": "7e2a282ca52984f8355c70697360d6cc9ef7d162"}}, "__type__": "1"}, "a36eaf4d-1d8e-46c7-8874-8f9f53a17725": {"__data__": {"text": "# NEO.RegisterCandidate Method\n\nRegisters as a candidate.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n:::note\n Candidate registration requires the candidate's signature. It means candidate registering is only self-determined. \n:::\n\n## Syntax\n\n```cs\npublic static extern bool RegisterCandidate(ECPoint pubkey);\n```\n\nParameter\uff1a\n\n- pubkey: The public key of the account to be registered.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly byte[] pubkey = \"02e8ff17c567d62f274fe247cc884a2a6cd3b8fd0d779a8c5856289a560accacb4\".HexToBytes();\n\n    public static object Test()\n    {\n        bool result = NEO.RegisterCandidate((ECPoint)pubkey);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n   \t\"type\":\"Boolean\",\n   \t\"value\":\"true\"\n}\n```\n\nResponse description:\n\n- Boolean type: true means candidate registration is succeeded.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "a36eaf4d-1d8e-46c7-8874-8f9f53a17725", "embedding": null, "doc_hash": "6a2183ec2139faf939a694282dac068e97a3e5fe7febd99bc17f8c37afe1196d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/RegisterCandidate"}, "node_info": {"start": 0, "end": 993, "_node_type": "1"}, "relationships": {"1": "152172958d6f1e60e419248bb8eef3f60a587fd7"}}, "__type__": "1"}, "bbee7429-4697-4b33-ad25-59942399cf89": {"__data__": {"text": "# NEO.TotalSupply Method\n\nGets the total supply of NEO.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern BigInteger TotalSupply();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static object Test()\n    {\n        BigInteger result = NEO.TotalSupply();\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000000\"\n}\n```\n\nResponse description:\n\n- Integer type: token total supply is successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "bbee7429-4697-4b33-ad25-59942399cf89", "embedding": null, "doc_hash": "47eaf7de7d9681de9b53081bc96377579e4d90eb0c2bb279aa50cb1062243ea4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/TotalSupply"}, "node_info": {"start": 0, "end": 630, "_node_type": "1"}, "relationships": {"1": "d7b70369ab03c79bc7fb0afcb4f6f403f82b526f"}}, "__type__": "1"}, "8d5a9f76-ac47-4325-aa1b-c1a626e659d5": {"__data__": {"text": "# NEO.Transfer Method \n\nTransfers NEO.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n:::note\n The method will check sender's signature, whether caller is sender, whether receiver is payable, and whether sender's balance is enough.\n:::\n\n## Syntax\n\n```cs\npublic static extern bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data = null);\n```\n\nParameters:\n\n- from: Script hash of the account you transfer from\n- to: Script hash of the account you transfer to\n- amount: The amount to be transferred.\n- data: An additional parameter, which will be passed as a parameter when the onNEP17Payment method of the receiver is called in the transfer method of NEP-17.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 from = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    private static readonly UInt160 to = \"NXjtqYERuvSWGawjVux8UerNejvwdYg7eE\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInterger value = 1000;\n        bool result = NEO.Transfer(from, to, value);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nResponse description:\n\n- true:  assets are transferred successfully.\n\n- Others: failed.\n\n[Back](../Neo.md)\n", "doc_id": "8d5a9f76-ac47-4325-aa1b-c1a626e659d5", "embedding": null, "doc_hash": "24d19291c27bc25162b1025bada7fd199a15a0fde91494e48bfa3ba8541f6150", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/Transfer"}, "node_info": {"start": 0, "end": 1345, "_node_type": "1"}, "relationships": {"1": "d30708ffe5c6eddca083f337eb3d05e58fc22039"}}, "__type__": "1"}, "92ab7af3-2477-4762-a270-86097a165063": {"__data__": {"text": "# NEO.UnRegisterCandidate Method\n\nUnregisters as a candidate.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n:::note\n Unregistering candidate requires the candidate's signature. It means candidate unregistering is only self-determined. \n:::\n\n## Syntax\n\n```cs\npublic static extern bool UnRegisterCandidate(ECPoint pubkey);\n```\n\nParameter:\n\n- pubkey: the public key of the account to be unregistered.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly byte[] pubkey = \"02e8ff17c567d62f274fe247cc884a2a6cd3b8fd0d779a8c5856289a560accacb4\".HexToBytes();\n\n    public static object Test()\n    {\n        bool result = NEO.UnRegisterCandidate((ECPoint)pubkey);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nResponse description:\n\n- true: The candidate is successfully unregistered.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "92ab7af3-2477-4762-a270-86097a165063", "embedding": null, "doc_hash": "65a24a860ccd4f09eef1f34ae7a7a630a511f0eea1fc09ddd8e631746e8b7687", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/UnRegisterCandidate"}, "node_info": {"start": 0, "end": 988, "_node_type": "1"}, "relationships": {"1": "f65930f8680be759f50756c2e2614a0bd39167ed"}}, "__type__": "1"}, "28ed9f60-d461-40f9-ac1c-5717a8733456": {"__data__": {"text": "# NEO.UnclaimedGas Method\n\nGets the number of unclaimed GAS.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern BigInteger UnclaimedGas(UInt160 account, uint end);\n```\n\nParameters\n\n- account: The script hash of the account to be queried;\n- end: To which block height the query ends.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        BigInteger result = NEO.UnclaimedGas(account, 100);\n        return result;\n    }\n}\n```\n\nResponse body:\n\n```json\n{\n\t\"Type\":\"Integer\",\n\t\"value\":\"100000\"\n}\n```\n\nResponse description:\n\n- Integer type: unclaimed GAS amount of this address is successfully requested.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "28ed9f60-d461-40f9-ac1c-5717a8733456", "embedding": null, "doc_hash": "34bd3a9c65e009b5017e04e0da3e5645b6e8e397f39ca5fb8a3d45ba5ec5589c", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/UnclaimedGas"}, "node_info": {"start": 0, "end": 904, "_node_type": "1"}, "relationships": {"1": "9aaae281546a10622ee883113925672043518d26"}}, "__type__": "1"}, "78934a34-7eb8-4a34-804b-599bb3a5c2b1": {"__data__": {"text": "# NEO.Vote Method\n\nVotes for the candidates.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n:::note\n - Voting towards non-candidate is recorded but not taken into account in committee & validator election. However, such votes will be effective as soon as the voted address becomes a candidate.\n:::\n> - Voter's signature will be checked. \n\n## Syntax\n\n```cs\npublic static extern bool Vote(UInt160 account, ECPoint voteTo);\n```\n\nParameters:\n\n- account: Script hash of the voting account.\n- voteTo: Public key of the account to vote.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n    private static readonly byte[] pubkey = \"02e8ff17c567d62f274fe247cc884a2a6cd3b8fd0d779a8c5856289a560accacb4\".HexToBytes();\n\n    public static object Test()\n    {\n        bool result = NEO.Vote(account, (ECPoint)pubkey);\n        return result;\n    }\n}\n```\n\n\u54cd\u5e94\u6b63\u6587\uff1a\n\n```json\n{\n\t\"type\":\"Boolean\",\n\t\"value\":\"true\"\n}\n```\n\nRespond description:\n\n- Boolean type: voted successfully.\n\n- Others: failed.\n\n[Back](../Neo.md)", "doc_id": "78934a34-7eb8-4a34-804b-599bb3a5c2b1", "embedding": null, "doc_hash": "770e794b508ea3f5fe9d58bffacbebb285da5cf0747a0894b28610c42abd8c87", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/Vote"}, "node_info": {"start": 0, "end": 1186, "_node_type": "1"}, "relationships": {"1": "def909cc3bed92e801a81bc4b047c799d9a9c6c8"}}, "__type__": "1"}, "ab5507b2-93f6-4900-8b46-6a1aafe92e15": {"__data__": {"text": "# Oracle Class\n\nProvides a series of methods of the native contract Oracle, which contract hash is `0xfe924b7cfe89ddd271abaf7210a80a7e11178758`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Oracle\n```\n\n## Attribute\n\n| Name | Description       |\n| ---- | ----------------- |\n| Hash | The contract hash |\n\n## Method\n\n| Name                                                         | Description                          |\n| ------------------------------------------------------------ | ------------------------------------ |\n| GetPrice()                                                   | Gets the price for an Oracle request |\n| [Request(string url, string filter, string callback, object userData, long gasForResponse)](Oracle/Request.md) | Initiates an Oracle request          |", "doc_id": "ab5507b2-93f6-4900-8b46-6a1aafe92e15", "embedding": null, "doc_hash": "e632686c1cf7f3dda796ecbd548698d652d539348b49ee5fe4c319d2efc58ca8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Oracle"}, "node_info": {"start": 0, "end": 867, "_node_type": "1"}, "relationships": {"1": "9bcb07591e2d7e6e3ab7dca25c7b7c75e498224b"}}, "__type__": "1"}, "e7ce80e8-8430-423a-b114-8fedc24dce50": {"__data__": {"text": "# Request Method\n\nInitiates an Oracle request.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern void Request(string url, string filter, string callback, object userData, long gasForResponse);\n```\n\nParameters\uff1a\n\n- url: The request Url\n- filter: Filter, used to filter useless data\n- callback: Callback function\n- userData: Additional data provided by the user\n- long: The cost of getting a response\n\n## Example\n\n```cs\nnamespace demo\n{\n    [DisplayName(\"Oracle Demo\")]\n    [ManifestExtra(\"Author\", \"Neo\")]\n    [ManifestExtra(\"Email\", \"dev@neo.org\")]\n    [ManifestExtra(\"Description\", \"This is a Oracle contract example\")]\n    public class OracleDemo: SmartContract\n    {\n        static readonly string PreResponseData = \"ResponseData\";\n\n        /// <summary>\n        /// Create a request.\n        /// </summary>\n        /// <param name=\"url\">URL\uff0ce.g.\"http://127.0.0.1:8080/test\"</param>\n        /// <param name=\"filter\">Filter,e.g.\"$.value\"; JSONPath, { \"value\": \"hello world\" }</param>\n        /// <param name=\"callback\">Callback method,e.g.\"callback\"</param>\n        /// <param name=\"userData\">User data,e.g.new byte[0]</param>\n        /// <param name=\"gasForResponse\">Gas for response,e.g.10000000</param>\n        public static void Request(string url,string filter,string callback,byte[] userData,long gasForResponse) {\n            Oracle.Request(url, filter, callback, userData, gasForResponse);\n        }\n\n        /// <summary>\n        /// Callback method\n        /// </summary>\n        /// <param name=\"url\">Url</param>\n        /// <param name=\"userData\">User data</param>\n        /// <param name=\"code\">Response status</param>\n        /// <param name=\"result\">Result data</param>\n        public static void Callback(string url, byte[] userData, int code, byte[] result) {\n            Storage.Put(Storage.CurrentContext, PreResponseData, result.ToByteString());\n        }\n        public static string GetData()\n        {\n            return Storage.Get(Storage.CurrentContext, PreResponseData);\n        }\n    }\n}\n```\n\n[Back](../Oracle.md)", "doc_id": "e7ce80e8-8430-423a-b114-8fedc24dce50", "embedding": null, "doc_hash": "6ec51993639bd953933aeac262f95c7ea45420acc46502f1cd7210cb12c38ecf", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Oracle/Request"}, "node_info": {"start": 0, "end": 2136, "_node_type": "1"}, "relationships": {"1": "a4af6789c452809a211a355c8920394c85ca4eaa"}}, "__type__": "1"}, "ec212a25-303a-4e27-93cc-7f76d6fb20e0": {"__data__": {"text": "# OracleResponseCode Enumeration\n\nDefines response types of Oracle.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic enum OracleResponseCode : byte\n{\n    Success = 0x00,\n\n    ProtocolNotSupported = 0x10,\n    ConsensusUnreachable = 0x12,\n    NotFound = 0x14,\n    Timeout = 0x16,\n    Forbidden = 0x18,\n    ResponseTooLarge = 0x1a,\n    InsufficientFunds = 0x1c,\n\n    Error = 0xff\n}\n```\n\n##### Description\n\n- Success: success\n\n- ProtocolNotSupported: The protocol is not supported.\n\n- ConsensusUnreachable: Consensus failed.\n\n- NotFound: HTTP 404 request failed. The requested resource was not found on the server.\n\n- Timeout: HTTP 408 request timeout.\n\n- Forbidden: The HTTP 403 server already understands the request, but refuses to execute it.\n\n- ResponseTooLarge: HTTP 413 Request Entity Too Large. The server refuses to process the current request because the size of the entity submitted by the request is larger than the server is willing or able to process.\n\n- InsufficientFunds: system fee is insufficient.\n\n- Error: other errors\n\n\nYou need to fill in the callback function name in [Oracle.Rqeuest](Oracle/Request.md). The order of the parameter data types of the callback function is fixed and must be `string url, byte[] userData, int code, byte[] result`. The code can be judged in the contract and different logic codes can be executed. Such as:\n\n```cs\npublic static void Callback(string url, byte[] userData, int code, byte[] result)\n{\n    switch (code)\n    {\n        case OracleResponseCode.Success: \n            \n            break;\n        case OracleResponseCode.NotFound: \n            \n            break;\n    }\n}\n```\n\n\n\n", "doc_id": "ec212a25-303a-4e27-93cc-7f76d6fb20e0", "embedding": null, "doc_hash": "dd4a202524c1b3378d36594d9df28ec57ea41893558ded3b60407176d7491996", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/OracleResponseCode"}, "node_info": {"start": 0, "end": 1711, "_node_type": "1"}, "relationships": {"1": "825a8a53d1378bbfa22e30c7bb587a9a50f5ea25"}}, "__type__": "1"}, "4ea83fb5-2b10-4590-a7b7-499f7891a1c7": {"__data__": {"text": "# Policy Class\n\nProvides a series of methods of the native contract Policy, which contract hash is `0xcc5e4edd9f5f8dba8bb65734541df7a1c081c67b`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Policy\n```\n\n## Attribute\n\n| Name | Description       |\n| ---- | ----------------- |\n| Hash | The contract hash |\n\n## Methods\n\n| Name                                              | Description                                                  |\n| ------------------------------------------------- | ------------------------------------------------------------ |\n| [GetFeePerByte()](Policy/GetFeePerByte.md)        | Gets the network fee per transaction byte                    |\n| [GetExecFeeFactor()](Policy/GetExecFeeFactor.md)  | Gets the execution fee factor. This is a multiplier that can be adjusted by the committee to adjust the system fees for transactions |\n| [GetStoragePrice()](Policy/GetStoragePrice.md)    | Gets the storage price                                       |\n| [IsBlocked(UInt160 account)](Policy/IsBlocked.md) | Determines whether the specified account is blocked          |\n\n", "doc_id": "4ea83fb5-2b10-4590-a7b7-499f7891a1c7", "embedding": null, "doc_hash": "9f0c72c63141a00db64718e1a12dc53675365cf85179382391d0b9838880d73a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy"}, "node_info": {"start": 0, "end": 1178, "_node_type": "1"}, "relationships": {"1": "d97bfc8b556a70d16c0a619b9c2063901759c8b4"}}, "__type__": "1"}, "ad0c30e5-1bc5-4586-879c-cb8a38a1eda1": {"__data__": {"text": "# Policy.GetExecFeeFactor Method\n\nGets NeoVM execution fee. \n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern uint GetExecFeeFactor();\n```\n\nReturn:\n\n- vm execution fee\n\n## Example\n\n```cs\npublic static void Test()\n{\n    var factor = Policy.GetExecFeeFactor();\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "ad0c30e5-1bc5-4586-879c-cb8a38a1eda1", "embedding": null, "doc_hash": "fa6e140af4dcc04fb3026200c27b4d35fe01e3dfd37596216fcde222d556e38e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/GetExecFeeFactor"}, "node_info": {"start": 0, "end": 382, "_node_type": "1"}, "relationships": {"1": "3113619d53c0e32161cde99efe9fe68be5086c0d"}}, "__type__": "1"}, "78be0ff3-7756-4b92-9ec8-3dd6b0b44c14": {"__data__": {"text": "# Policy.GetFeePerByte Method\n\nGets the transaction network fee per byte.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern long GetFeePerByte();\n```\n\nReturn:\n\n- Transaction network fee per byte\n\n## Example\n\n```cs\npublic static void Test()\n{\n    var feePerByte = Policy.GetFeePerByte();\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "78be0ff3-7756-4b92-9ec8-3dd6b0b44c14", "embedding": null, "doc_hash": "ab6320644d54f1b4992d4430bd6dec1f4a6d800330db075a959579f47db657c7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/GetFeePerByte"}, "node_info": {"start": 0, "end": 409, "_node_type": "1"}, "relationships": {"1": "ee93bed75d8cba43c85760a35cbe84d1be965ef6"}}, "__type__": "1"}, "21153cf6-d18f-4e25-a71b-fda7696eeb5c": {"__data__": {"text": "# Policy.GetStoragePrice Method\n\nGets data storage fee per byte.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern uint GetStoragePrice();\n```\n\nReturn:\n\n- Data storage fee per byte\n\n## Example\n\n```cs\npublic static void Test()\n{\n    var price = Policy.GetStoragePrice();\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "21153cf6-d18f-4e25-a71b-fda7696eeb5c", "embedding": null, "doc_hash": "e5bc05f38a160e3bc3e743682b2792ba56178d80557a9441ecbaef41fbadfe98", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/GetStoragePrice"}, "node_info": {"start": 0, "end": 392, "_node_type": "1"}, "relationships": {"1": "76436d5fa0957c3b19c068f6b378fa1640954978"}}, "__type__": "1"}, "29556d97-6685-4638-81da-5096ce992850": {"__data__": {"text": "# Policy.IsBlocked Method\n\nVerifies if the specified account is blocked.\n\nNamespace: [Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern bool IsBlocked(UInt160 account);\n```\n\nParameter:\n\n- account: the specified account\n\nReturn:\n\n- Whether the account is blocked\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    private static readonly UInt160 account = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n    public static object Test()\n    {\n        var isBlocked= Policy.IsBlocked(account);\n    }\n}\n```\n[Back](../Policy.md)\n\n", "doc_id": "29556d97-6685-4638-81da-5096ce992850", "embedding": null, "doc_hash": "6e520b90f81d77699dea965be1449321554a98c6393d6855f08e2acc309b3484", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/IsBlocked"}, "node_info": {"start": 0, "end": 649, "_node_type": "1"}, "relationships": {"1": "03b195dfaaaa351daa5bd4072becc21940e3f20e"}}, "__type__": "1"}, "2403af73-8164-4abb-8ae0-038a156e9f8d": {"__data__": {"text": "# Role Class\n\nDefines permission types of the native contract `RoleManagement`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic enum Role : byte\n{\n    StateValidator = 4,\n    Oracle = 8\n}\n```\n\nFor more information see the method `GetDesignatedByRole` in [RoleManagement](RoleManagement.md).\n\n", "doc_id": "2403af73-8164-4abb-8ae0-038a156e9f8d", "embedding": null, "doc_hash": "857b41e71455c06ac47bd220d8a99287e06b3a2e83b17e5e29b27172c2983afd", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Role"}, "node_info": {"start": 0, "end": 370, "_node_type": "1"}, "relationships": {"1": "f68c71a87dd2476d59306fdeedbdbe3211463e98"}}, "__type__": "1"}, "08dd3d90-2ace-404d-afbd-3b981ad30424": {"__data__": {"text": "# RoleManagement Class\n\nProvides a series attributes and methods of the native contract `RoleManagement`, which contract hash is`0x49cf4e5378ffcd4dec034fd98a174c5491e395e2`.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class RoleManagement\n```\n\n## Attribute\n\n| Name | Description            |\n| ---- | ---------------------- |\n| Hash | Gets the contract hash |\n\n## Method\n\n| Name                                                         | Description                                   |\n| ------------------------------------------------------------ | --------------------------------------------- |\n| [GetDesignatedByRole(Role role, uint index)](RoleManagement/GetDesignatedByRole.md) | Gets the list of nodes for the specified role |\n\n", "doc_id": "08dd3d90-2ace-404d-afbd-3b981ad30424", "embedding": null, "doc_hash": "6d1897ec218b6843798bb5150590a219398e344a8967c4e9adc87a982e6bf581", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/RoleManagement"}, "node_info": {"start": 0, "end": 817, "_node_type": "1"}, "relationships": {"1": "5c650e09670d711bf065f5d61ac95b1cf479abce"}}, "__type__": "1"}, "7b2b257e-0d54-4ff7-94f3-9025e78e04e2": {"__data__": {"text": "# RoleManagement.GetDesignatedByRole Method\n\nGets the block where the transaction occurs with transaction hash.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Native](../../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Cryptography.ECC.ECPoint[] GetDesignatedByRole(Role role, uint index);\n```\n\nParameter:\n\n- role: The type of the role\n- index: The index of the block to be queried\n\nreturns: \n\n- The public keys of the nodes\n\n## Example\n\n```cs\npublic static void Test()\n{\n    var nodes = RoleManagement.GetDesignatedByRole(Role.Oracle, 0);\n}\n```\n[Back](../RoleManagement.md)\n\n", "doc_id": "7b2b257e-0d54-4ff7-94f3-9025e78e04e2", "embedding": null, "doc_hash": "ab20e92970f651eb4ac800542daa6a0d9f81bf4f41ebc1c2662aa61666b90377", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/RoleManagement/GetDesignatedByRole"}, "node_info": {"start": 0, "end": 612, "_node_type": "1"}, "relationships": {"1": "1f783a97437abad3e1865c304bce968ce21a3a27"}}, "__type__": "1"}, "3ce6ba6a-a4c3-4899-9fe7-ac5408f13d32": {"__data__": {"text": "# StdLib Class\n\nProvides a series methods of the native contract `StdLib`, which contract hash is `0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0`.\n\nNamespace: [Neo.SmartContract.Framework.Native](../native.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static class StdLib\n```\n\n## Attributes\n\n| Name | Description            |\n| ---- | ---------------------- |\n| Hash | Gets the contract hash |\n\n## Methods\n\n| Name                                   | Description   |\n| ---------------------------------------- | --------------- |\n| Serialize(object source) | Serializes the object to byte array |\n| Deserialize(ByteString source) | Deserializes the byte array to object |\n| JsonSerialize(object obj) | Serializes the object to Json |\n| JsonDeserialize(string json) | Deserializes the Json to object |\n| Base64Decode(string input) | Decodes the Base64-encoded string into byte array |\n| Base64Encode(ByteString input) | Encodes the byte array into Base64 string |\n| Base58Decode(string input) | Decodes the Base58 encoded string into byte array |\n| Base58Encode(ByteString input) | Encodes the byte array into Base58 string |\n| Base58CheckDecode(string input) | Decodes the Base58Check encoded string into byte array |\n| Base58CheckEncode(ByteString input) | Encodes the byte array into Base58Check string |\n| Itoa | Converts the integer to string |\n| Atoi(string value, int @base = 10) | Converts the string to integer |\n| MemoryCompare(ByteString, ByteString) | If two arrays are the same, return 0; if array 1 is less than array 2, return a value less than 0; if array 1 is greater than array 2, return a value greater than 0 |\n| MemorySearch | Returns the index of the first match of array 2 in array 1, or -1 if no match |\n| StringSplit | Creates an array of substrings by splitting the input string based on one or more delimiters |", "doc_id": "3ce6ba6a-a4c3-4899-9fe7-ac5408f13d32", "embedding": null, "doc_hash": "95be915459ad6e55b351b4ac07be1f114d074cae53101a7873749b13f3574e10", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/StdLib"}, "node_info": {"start": 0, "end": 1855, "_node_type": "1"}, "relationships": {"1": "bafdf81396e6800a1302af53887731bc995c2745"}}, "__type__": "1"}, "e3cc6479-0b6e-4e64-aae1-e7b062f863ab": {"__data__": {"text": "# Neo.SmartContract.Framework.Services\n\n## Class\n\n| Class                                                        | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Block](services/Block.md)       | A class representing a block, provides a set of block-specific properties. |\n| [Contract](services/Contract.md) | A class representing a contract.                             |\n| [Crypto](services/Crypto.md)     | Provides the ECDsa method to verify the signature.           |\n| [Iterator](services/Iterator.md) | The customized iterator in the smart contract.               |\n| [Notification](services/Notification.md) | The notification sent when the contract is executed.         |\n| [Runtime](services/Runtime.md)   | Provides a set of methods during smart contract execution    |\n| [Storage](services/Storage.md)   | Provides a set of methods to insert, query, or delete data of a persistent store |\n| [StorageContext](services/StorageContext.md) | A class representing storage context of the persistent storage |\n| [StorageMap](services/StorageMap.md) | A key-value storage for a specific prefix in the given storage context. |\n| [Transaction](services/Transaction.md) | The base class representing the transaction                  |\n\n## Enumeration\n\n| Enumeration                            | Description                                                  |\n| -------------------------------------- | ------------------------------------------------------------ |\n| [CallFlags](services/CallFlags.md)     | Defines the pattern when invoking contracts                  |\n| [FindOptions](services/FindOptions.md) | Defines search options for searching a storage. Used in the  Storage.Find method. |\n| [TriggerType](services/TriggerType.md) | Defines the trigger types                                    |\n\n", "doc_id": "e3cc6479-0b6e-4e64-aae1-e7b062f863ab", "embedding": null, "doc_hash": "2c927bb5076672465e88705e86374c7a89adbdf7ee21cf9d0815b964d8671ce8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services"}, "node_info": {"start": 0, "end": 1952, "_node_type": "1"}, "relationships": {"1": "77317c54cb7795d54d933e141fdd1f3a00f34763"}}, "__type__": "1"}, "551389da-7e80-46ad-ae30-a1fd13586348": {"__data__": {"text": "# Block Class\n\nThe class that represents blocks, providing a set of related properties.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Block\n```\n\n## Attributes\n\n| Name              | Description                                                  |\n| ----------------- | ------------------------------------------------------------ |\n| Hash              | Gets the block hash                                          |\n| Version           | Gets the block version number                                |\n| PrevHash          | Gets the hash of the previous block                          |\n| MerkleRoot        | Gets the Merkle root of the block                            |\n| Timestamp         | Get the time stamp of the block                              |\n| Index             | Gets the block index which is counted from 0<br/>Index = Height = Count - 1 |\n| PrimaryIndex      | The primary(speaker) index of the consensus node that generated this block |\n| NextConsensus     | Get the consensus contract for the next block, i.e. multi-party signed contract composed of more than 2/3 consensus nodes) |\n| TransactionsCount | Gets the transaction number of the block                     |\n\n## Constructor\n\nThe Block object can be constructed through [Ledger.GetBlock()](../native/Ledger/GetBlock.md).\n\n", "doc_id": "551389da-7e80-46ad-ae30-a1fd13586348", "embedding": null, "doc_hash": "9e96fa006e264bc2763d3301d98362f6703352ee69c1a8a86a9e976bb4fc2666", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Block"}, "node_info": {"start": 0, "end": 1389, "_node_type": "1"}, "relationships": {"1": "ee512c23d221cd182be5114fb7cba4fe4415dce5"}}, "__type__": "1"}, "f77e2868-b5be-4943-940e-5be6f535960f": {"__data__": {"text": "# CallFlags Enumerator\n\nDefines special behaviors allowed when invoking smart contracts, such as chain calls, sending notifications, modifying states, etc.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic enum CallFlags : byte\n{\n    None = 0,\n\n    AllowModifyStates = 0b00000001,\n    AllowCall = 0b00000010,\n    AllowNotify = 0b00000100,\n\n    ReadOnly = AllowCall | AllowNotify,\n    All = AllowModifyStates | AllowCall | AllowNotify\n}\n```\n\n### Parameters description\n\nNone: Special behaviors of the invoked contract are not allowed, such as chain calls, sending notifications, modifying state, etc.\n\nAllowModifyStates: Allows the invoked contract to modify status.\n\nAllowCall: Allows the invoked contract to do chain calls.\n\nAllowNotify: Allows the invoked contract to send notifications.\n\nReadOnly: Allows the invoked contract to do chain calls and send notifications.\n\nAll: All behaviors of the invoked contract are allowed.\n\nCallFlags is used in the method [Call(UInt160, string, CallFlags, params object[])](Contract/Call.md).\n\nYou can also get CallFlags of native contract by [GetCallFlags()](Contract/GetCallFlags.md) .", "doc_id": "f77e2868-b5be-4943-940e-5be6f535960f", "embedding": null, "doc_hash": "70bf6ce1c37bc95d4eeada02a54f9b679f9df83518bc158fd27fa20ca8d9945a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/CallFlags"}, "node_info": {"start": 0, "end": 1206, "_node_type": "1"}, "relationships": {"1": "21b41b17950c0361bbbee33884aa7e998f18e53e"}}, "__type__": "1"}, "f14ef572-886d-4138-9d5f-0dc420d21d3d": {"__data__": {"text": "# Contract Class\n\nThe class representing a contract.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Contract\n```\n\n## Attributes\n\n| Name | Description |\n| -------------------------------- | ------ |\n| Id     | Contract Id. The native contract ID is a negative integer, and the normal contract ID is a positive integer. |\n| UpdateCounter | Contract update counter |\n| Hash  | Contract hash, which is determined by the deployer's script hash, the contract NEF checkcode, and the contract name. |\n| Nef | Nef |\n| Manifest  | Json strings that represents the contract Manifest |\n\n## Methods\n\n| Name | Description |\n| -------------------------------- | ------ |\n| [Call(UInt160 scriptHash, string method, object[] arguments)](Contract/Call.md) | Invokes the contract |\n| [GetCallFlags()](Contract/GetCallFlags.md)         | Gets the CallFlag of the contract |\n| [CreateStandardAccount()](Contract/CreateStandardAccount.md)         | Generate a script hash of standard account with public key |\n| CreateMultisigAccount(int, params Cryptography.ECC.ECPoint[]) | Generate a script hash of multi-signature accounts based on the public key list and minimum number of signatures |\n\n## Constructor\n\nThe Contract object can be constructed through [ContractManagement.GetContract(UInt60 hash)](../native/ContractManagement/GetContract.md).\n\n [ContractManagement.Deploy(byte[] nefFile, string manifest)](../native/ContractManagement/Deploy.md) publishes the contract onto the blockchain and returns a contract object.\n\n", "doc_id": "f14ef572-886d-4138-9d5f-0dc420d21d3d", "embedding": null, "doc_hash": "c826c2179dfe571f54ec5a99b120e986ebf0550c5fa4ee79086ceb1fe2cfccb4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract"}, "node_info": {"start": 0, "end": 1592, "_node_type": "1"}, "relationships": {"1": "2ad5480669ca972620ceaad932ac4607d72e6599"}}, "__type__": "1"}, "47c78d89-ec7a-4148-adc5-3e12c4b044a8": {"__data__": {"text": "# Contract.Call Method\n\nInvokes the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern object Call(UInt160 scriptHash, string method, object[] arguments)\n```\n\nParameters:\n\n- scriptHash: The contract script hash\n- method: The contract method\n- arguments: The contract method arguments\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract\n {\n     delegate object Dyncall(string method, object[] args);\n\n     //0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 in little endian order\n     //HexToBytes()\u3001ToScriptHash() can only operate on constants and cannot be written in the Main method\n     //scriptHash can be modified to be passed in from the parameter or read from storage\n     static UInt160 ScriptHash = \"NXsG3zwpwcfvBiA3bNMx6mWZGEro9ZqTqM\".ToScriptHash();\n\n     public static object Test(string operation, object[] args)\n     {\n         if (operation == \"name\")\n         {\n             return Contract.Call((UInt160)ScriptHash, \"name\", new object[0]);\n         }\n         if (operation == \"totalSupply\")\n         {\n             return Contract.Call(ScriptHash, \"totalSupply\", new object[0]);\n         }\n         return true;\n     }\n }\n```\n\n\n\n[Back](../Contract.md)", "doc_id": "47c78d89-ec7a-4148-adc5-3e12c4b044a8", "embedding": null, "doc_hash": "27ca76731dc57f7b2a84404eb8a0d59a6ebb8fd27f64f90a980b3ae33a88f965", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/Call"}, "node_info": {"start": 0, "end": 1276, "_node_type": "1"}, "relationships": {"1": "0d29168a2de4819bbaad03a2b23ded23147989d0"}}, "__type__": "1"}, "6621c65e-87ed-4fed-b972-bb572df3a047": {"__data__": {"text": "# Contract.CallEx Method (UInt160, string, object[], CallFlags)\n\nInvokes the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly:  Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern object CallEx(UInt160 scriptHash, string method, object[] arguments, CallFlags flag)\n```\n\nParameters:\n\n- scriptHash: The contract script hash\n- method: The contract method\n- arguments: The contract method arguments\n- flag: The contract call flag\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract\n {\n     delegate object Dyncall(string method, object[] args);\n\n     //0x230cf5ef1e1bd411c7733fa92bb6f9c39714f8f9 in little endian order\n     //HexToBytes()\u3001ToScriptHash() can only operate on constants and cannot be written in the Main method\n     //scriptHash can be modified to be passed in from the parameter or read from storage\n     static byte[] ScriptHash = \"f9f81497c3f9b62ba93f73c711d41b1eeff50c23\".HexToBytes();\n\n     public static object Main(string operation, object[] args)\n     {\n         if (operation == \"name\")\n         {\n             return Contract.Call((UInt160)ScriptHash, \"name\", new object[0], CallFlags.ReadOnly);\n         }\n         if (operation == \"totalSupply\")\n         {\n             return Contract.Call((UInt160)ScriptHash, \"totalSupply\", new object[0], CallFlags.ReadOnly);\n         }\n         return true;\n     }\n }\n```\n\n\n\n[Back](../Contract.md)", "doc_id": "6621c65e-87ed-4fed-b972-bb572df3a047", "embedding": null, "doc_hash": "2eac1f4883becf706aecea524eddcfee5e8d563de8d08d953b43994add2b7468", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/CallEx"}, "node_info": {"start": 0, "end": 1419, "_node_type": "1"}, "relationships": {"1": "9081096d52381d3f61509ea6709a26d9ea0cea36"}}, "__type__": "1"}, "290d6f7e-d500-43d4-a1db-ccea40d4a2ef": {"__data__": {"text": "# Contract.CreateStandardAccount Method\n\nCreates a standard account with the public key.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern UInt160 CreateStandardAccount(ECPoint pubKey);\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n        public static UInt160 CreateStandardAccount(byte[] pubKey)\n        {\n            return Contract.CreateStandardAccount((ECPoint)pubKey);\n        }\n}\n```\nThe input parameter can be either a compressed or uncompressed public key.\n\nExample with compressed public key\uff1a\n{ 0x02, 0x48, 0x6f, 0xd1, 0x57, 0x02, 0xc4, 0x49, 0x0a, 0x26, 0x70, 0x31, 0x12, 0xa5, 0xcc, 0x1d, 0x09, 0x23, 0xfd, 0x69, 0x7a, 0x33, 0x40, 0x6b, 0xd5, 0xa1, 0xc0, 0x0e, 0x00, 0x13, 0xb0, 0x9a, 0x70 } => \"3ae15fc83b48d9bb5c327e578e2f1d2100ba1b89\"\n\nExample with uncompressed public key\uff1a\n{ 0x04, 0x48, 0x6f, 0xd1, 0x57, 0x02, 0xc4, 0x49, 0x0a, 0x26, 0x70, 0x31, 0x12, 0xa5, 0xcc, 0x1d, 0x09, 0x23, 0xfd, 0x69, 0x7a, 0x33, 0x40, 0x6b, 0xd5, 0xa1, 0xc0, 0x0e, 0x00, 0x13, 0xb0, 0x9a, 0x70, 0x05, 0x43, 0x6c, 0x08, 0x2c, 0x2c, 0x88, 0x08, 0x5b, 0x4b, 0x53, 0xd5, 0x4c, 0x55, 0x66, 0xba, 0x44, 0x8d, 0x5c, 0x3e, 0x2a, 0x2a, 0x5c, 0x3a, 0x3e, 0xa5, 0x00, 0xe1, 0x40, 0x77, 0x55, 0x9c } => 3ae15fc83b48d9bb5c327e578e2f1d2100ba1b89\n\n\n\n", "doc_id": "290d6f7e-d500-43d4-a1db-ccea40d4a2ef", "embedding": null, "doc_hash": "e41d78c7a882eb738665854379963eb0012e6866afe58459e962784045c3d108", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/CreateStandardAccount"}, "node_info": {"start": 0, "end": 1371, "_node_type": "1"}, "relationships": {"1": "4e2e967d91c4dd5c423613d665148bf9c780bc5c"}}, "__type__": "1"}, "38361275-8a08-4524-b61a-a3ec9164dbd6": {"__data__": {"text": "# Contract.GetCallFlags Method\n\nGets the call privilege of the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern byte GetCallFlags();\n```\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n        public static int GetCallFlags()\n        {\n            return Contract.GetCallFlags();\n        }\n}\n```\n\n\n", "doc_id": "38361275-8a08-4524-b61a-a3ec9164dbd6", "embedding": null, "doc_hash": "d960463971eb22ce6b68ed6f1b3b48bcbdc302db744e78c0997b344848f968a6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/GetCallFlags"}, "node_info": {"start": 0, "end": 443, "_node_type": "1"}, "relationships": {"1": "168e16f6e6973fddd187cf662187e9a3b0093e49"}}, "__type__": "1"}, "c700f292-d7de-47d4-9d4d-0ff9a51bfa5e": {"__data__": {"text": "# Contract.IsPayable\n\nWhether the contract is able to accept NEP-17 assets\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic extern bool IsPayable\n```\n\n[Back](../Contract.md)", "doc_id": "c700f292-d7de-47d4-9d4d-0ff9a51bfa5e", "embedding": null, "doc_hash": "6b7cf27b61e225fc6dc093f01cfec21eb3d81f569dfbeb9fa4315db1d454d5d2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/IsPayable"}, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "e7ed503836e8d0b29c31252d1fe432a2db9cf1ff"}}, "__type__": "1"}, "b43956fd-cdd7-4b9f-a792-95b7b14d74bd": {"__data__": {"text": "# Contract.StorageContext\n\nReturns the storage context of the contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic extern StorageContext StorageContext\n```\n\nAttribute value: [StorageContext](../StorageContext.md)\n\n[Back](../Contract.md)", "doc_id": "b43956fd-cdd7-4b9f-a792-95b7b14d74bd", "embedding": null, "doc_hash": "dc8636e82ff80e403d6b6799ea38cfe4dccef75cedd2b72ca274cc957fb7efe4", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/StorageContext"}, "node_info": {"start": 0, "end": 327, "_node_type": "1"}, "relationships": {"1": "b02f75b357b8786bd2d862d7f65445f9ad69df45"}}, "__type__": "1"}, "3187b6cb-0fab-4f33-a1e9-d636512bf500": {"__data__": {"text": "# Crypto Class\n\nStatic class, which provides a method to verify signatures by ECDsa\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static class Crypto\n```\n\n## Methods\n\n| Name                                   | Description   |\n| ---------------------------------------- | --------------- |\n| CheckSig(Cryptography.ECC.ECPoint, ByteString)          | Checks the signature for the current script container |\n| CheckMultisig(Cryptography.ECC.ECPoint[], ByteString[]) | Checks the signatures for the current script container |\n\n# Constructor\n\nCrypto is a static class and does not require a constructor.", "doc_id": "3187b6cb-0fab-4f33-a1e9-d636512bf500", "embedding": null, "doc_hash": "7afeaf62b28def347b8df5b60ea6e13c769a568b0a61af5008e40cd30ff30f33", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Crypto"}, "node_info": {"start": 0, "end": 682, "_node_type": "1"}, "relationships": {"1": "0ee52b8714418c1bf862eaa9b4052f32310afb7e"}}, "__type__": "1"}, "213f7b74-82f6-4f92-937c-3d045093c294": {"__data__": {"text": "# FindOptions Enumeration\n\nDefines find options for searching storage. This is used in the Storage.Find method.\n\nNamespace: Neo.SmartContract\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic enum FindOptions : byte\n{\n    None = 0,\n\n    KeysOnly = 1 << 0,\n    RemovePrefix = 1 << 1,\n    ValuesOnly = 1 << 2,\n    DeserializeValues = 1 << 3,\n    PickField0 = 1 << 4,\n    PickField1 = 1 << 5\n}\n```\n\n##### Description\n\n- None: Search all\n\n- KeysOnly: Search Key only. It cannot be used together with ValuesOnly, DeserializeValues, PickField0, and PickField1.\n- RemovePrefix: Similar to KeysOnly. It will filter to the first byte of Key, i.e., the prefix of Key. It cannot be used together with ValuesOnly\n- ValuesOnly: Search Value only. It cannot be used together with KeysOnly and RemovePrefix.\n- DeserializeValues: Search Value and then deserialize the Value.\n- PickField0: Search the first element of Value array. It must be used together with DeserializeValues, not with PickField1.\n- PickField1: Search the second element of Value array. It must be used together with DeserializeValues, not with PickField0.\n- FindOptions is used in [Storage.Find(StorageContext, ByteString, FindOptions)](Storage/Find.md) \n\n", "doc_id": "213f7b74-82f6-4f92-937c-3d045093c294", "embedding": null, "doc_hash": "5a6f3e0554bfea31c684b4ca7ff1743f047b8aa89e71ab4a30c9834310bcdf9e", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/FindOptions"}, "node_info": {"start": 0, "end": 1224, "_node_type": "1"}, "relationships": {"1": "d61f89ac91545164dc492949c1840add1afa7b96"}}, "__type__": "1"}, "c422fdd2-34d5-457c-ad06-d55c1f340649": {"__data__": {"text": "# Iterator Class\n\nThe iterator for smart contracts.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Iterator\npublic class Iterator<T> : Iterator, IApiInterface\n```\n\n## Attributes\n\n| Name | Description          |\n| ----- | ------------------------ |\n| Value | Gets the element in the collection at the current position of the iterator |\n\n## Methods\n\n| Name                            | Name                                                     |\n| ----------------------------------- | ------------------------------------------------------------ |\n| Next()            | Advances the iterator to the next element of the collection |\n\nYou can also use [Storage.Find()](Storage/Find.md)  to construct the Iterator object.", "doc_id": "c422fdd2-34d5-457c-ad06-d55c1f340649", "embedding": null, "doc_hash": "0dfbc364e8246c66a4da5490e2b7a965d7297cf956889b8e5afe8fef1c00d9d7", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator"}, "node_info": {"start": 0, "end": 805, "_node_type": "1"}, "relationships": {"1": "37d9940ca76fbb7cede5edfcb8a66ce64950b758"}}, "__type__": "1"}, "72033f7d-70a3-48cd-bfc1-ad47e6a7bf01": {"__data__": {"text": "# Iterator<TKey, TValue>.Key Property\n\nGets the Key of the current cursor.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic extern TKey Key\n```\n\nAttribute value: genericity.\n\n\n\n[Back](../Iterator.md)", "doc_id": "72033f7d-70a3-48cd-bfc1-ad47e6a7bf01", "embedding": null, "doc_hash": "4f539c3c023ff1cfc812e3b469add6af54ec5202c94a91c95434b2852305dd88", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator/Key"}, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "56c27acc114a06eb3abc76afbe360c1c3470a6ce"}}, "__type__": "1"}, "31b8b8e1-5d3b-4de3-824d-e09efd0d4fa2": {"__data__": {"text": "# Iterator<TKey, TValue>.Next Method ()\n\nThe cursor moves down in the collection and returns the state, where `true` means the cursor has not moved to the end, and `false` means the cursor has moved to the end.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic extern bool Next();\n```\n\nReturned value: Whether the cursor moves to the end of the collection.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract\n{\n    public static void Main()\n    {\n        var iterator = Storage.Find(new byte[] { 0x01 });\n\t\twhile (iterator.Next())\n\t\t{\n    \t\tvar k = iterator.Key;\n    \t\tvar v = iterator.Value;\n    \t\t\u2026\u2026\n\t\t}\n    }\n}\n```\n\n\n\n[Back](../Iterator.md)", "doc_id": "31b8b8e1-5d3b-4de3-824d-e09efd0d4fa2", "embedding": null, "doc_hash": "cfb59e29759f72ccfd8d3ca8e1d7d15f16bf3dd6b07cb06854dd7a6bc785e032", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator/Next"}, "node_info": {"start": 0, "end": 733, "_node_type": "1"}, "relationships": {"1": "80ff403cc5dc81e916b809c885286a3f17f6acdb"}}, "__type__": "1"}, "deb3d0c7-dc02-49fe-b309-d5b4e05ff2f5": {"__data__": {"text": "# Iterator<TKey, TValue>.Value Property\n\nGets the current cursor value\u3002\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic extern TKey Value\n```\n\nAttribute value: genericity.\n\n\n\n[Back](../Iterator.md)", "doc_id": "deb3d0c7-dc02-49fe-b309-d5b4e05ff2f5", "embedding": null, "doc_hash": "19fe528031bacbde38e761c0ea7a7065431efc6a3fadfc00eeb22891c49f85d5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator/Value"}, "node_info": {"start": 0, "end": 283, "_node_type": "1"}, "relationships": {"1": "e9be7726e7f92cce6acef7626f05ddd8d9d4cf31"}}, "__type__": "1"}, "fac34947-965a-4be9-ba27-6f0d65a7cb08": {"__data__": {"text": "# Notification Class\n\nRepresents the notification sent when the smart contract executes.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Notification : IApiInterface\n```\n\n## Attributes\n\n| Name                                   | Description              |\n| ---------------------------------------- | -------------------------- |\n| ScriptHash | The script hash of the notification sender |\n| EventName | The event name of the notification |\n| State          |   The object representing the notification content, which can be of any type such as value, string, array, etc.   |\n\n## Constructor\n\nGets Notification objects from [Runtime.GetNotifications(UInt160 hash = null)](Runtime/GetNotifications.md).\n", "doc_id": "fac34947-965a-4be9-ba27-6f0d65a7cb08", "embedding": null, "doc_hash": "99fbcca079b3151638f7a5de58d4118a1c5586cbe7a63f2e686cb21e06f90527", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Notification"}, "node_info": {"start": 0, "end": 790, "_node_type": "1"}, "relationships": {"1": "5f1f503820e43bea567586e7421463ed55422c77"}}, "__type__": "1"}, "7147a4ce-aded-4bb7-b8fc-3be8edcd9bb9": {"__data__": {"text": "# Runtime Class\n\nProvides a set of methods during smart contract execution.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly\uff1aNeo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static class Runtime\n```\n\n## Attributes\n\n| Name                          | Description                                                  |\n| ----------------------------- | ------------------------------------------------------------ |\n| [Trigger](Runtime/Trigger.md) | Gets the trigger type for the smart contract (verification contract or application contract). |\n| Platform                      | Gets information of the platform on which the smart contract is currently executed |\n| ScriptContainer               | Gets the current script container                            |\n| ExecutingScriptHash           | Gets the script hash of the current context                  |\n| CallingScriptHash             | Gets the script hash of the calling contract                 |\n| EntryScriptHash               | Gets the script hash of the entry context                    |\n| Time                          | Gets the timestamp of the current block                      |\n| InvocationCounter             | Gets the call number of the current contract                 |\n| GasLeft                       | Gets the left GAS of the fee of current transaction          |\n\n## Method\n\n| Name                                                         | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [GetNotifications(UInt160 hash = null)](Runtime/GetNotifications.md) | Gets all notifications of the execution of a contract        |\n| [Log(string)](Runtime/Log.md)                                | Sends a log message to the client executing the smart contract. |\n| [CheckWitness()](Runtime/CheckWitness.md)                    | Determines whether the specified account has witnessed the current transaction |\n| BurnGas                                                      | Burning GAS to benefit the Neo ecosystem                     |\n\n## Constructor\n\nThe Runtime class is a static class and does not require a constructor.", "doc_id": "7147a4ce-aded-4bb7-b8fc-3be8edcd9bb9", "embedding": null, "doc_hash": "6c19afd15124f5f5be3f26b7dcb2fb99f5b487859f6ed31528605952bd30293d", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime"}, "node_info": {"start": 0, "end": 2265, "_node_type": "1"}, "relationships": {"1": "b3a3fbd2f54453516e136c60d831ae849938fb96"}}, "__type__": "1"}, "1d6d9325-8c63-440a-827b-5026d997a927": {"__data__": {"text": "# Runtime.CheckWitness Method\n\nVerifies that the transactions / block of the calling contract has validated the required script hashes.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern bool CheckWitness(UInt160 hash);\npublic static extern bool CheckWitness(ECPoint pubkey);\n```\n\nParameters:\n\n- hash: script hash\n- Pubkey: public key as a byte array of length 33.\n\n\nReturn value: Whether if the verification has been done, boolean.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract\n{\n    public static void Main()\n    {\n        byte[] pubKey = { 2, 123, 48, 51, 62, 13, 14, 101, 82, 174, 109, 29, 169, 249, 64, 159, 85, 30, 53, 238, 151, 25, 48, 94, 148, 93, 196, 220, 186, 153, 132, 86, 202 };\n        bool result1 = Runtime.CheckWitness((ECPoint)pubKey);\n        byte[] scriptHash = { 36, 23, 241, 177, 228, 54, 109, 223, 27, 237, 139, 54, 207, 38, 132, 101, 172, 3, 10, 73 };\n        bool result2 = Runtime.CheckWitness((UInt160)scriptHash);\n    }\n}\n```\n\n\n\n[Back](../Runtime.md)", "doc_id": "1d6d9325-8c63-440a-827b-5026d997a927", "embedding": null, "doc_hash": "0e6624c15e6c9b44d78927c73f2b3b9e2706ce17ec591a83e7f520a6836c4eb9", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/CheckWitness"}, "node_info": {"start": 0, "end": 1087, "_node_type": "1"}, "relationships": {"1": "08ee64e9ef002eb28decec239b970e4938ca469b"}}, "__type__": "1"}, "1c56b542-24bd-40d8-981a-fb6d5bda8663": {"__data__": {"text": "# Runtime.GetNotifications Method\n\nGets all notifications of the given contract execution.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Notification[] GetNotifications(UInt160 hash = null)\n```\n\nParameters:\n\n- hash: Contract script hash as a byte array of length 20. When the array values are all 0, all notifications that currently exists are returned. \n\nReturn value: All notifications during the contract execution.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        Notification[] result1 = Runtime.GetNotifications();\n        byte[] hash = { 2, 123, 48, 51, 62, 13, 14, 101, 82, 174, 109, 29, 169, 249, 64, 159, 85, 30, 53, 238};\n        Notification[] result2 = Runtime.GetNotifications((UInt160)hash);\n    }\n}\n```\n\n[Back](../Runtime.md)", "doc_id": "1c56b542-24bd-40d8-981a-fb6d5bda8663", "embedding": null, "doc_hash": "c30256d2d8a396c5eddd294dc0a4fb279a2103d1b453196c0685fe26eeeae7f8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/GetNotifications"}, "node_info": {"start": 0, "end": 922, "_node_type": "1"}, "relationships": {"1": "d45e516eb10d6ecd284ebbc896edf31cdb4a4268"}}, "__type__": "1"}, "a4c38f60-e810-425a-b281-1b1ab0e35470": {"__data__": {"text": "# Runtime.Log Method\n\nSends a log message to the client executing the smart contract. This method can trigger an event on the client but requires the client to be compatible.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern void Log(string message)\n```\n\nParameters: \n\n- message: Log as a string.\n\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main(bool debug)\n    {\n        if(debug)\n        {\n            Runtime.Log(\"Execution successful\");\n        }\n    }\n}\n```\n\n\n\n[Back](../Runtime.md)", "doc_id": "a4c38f60-e810-425a-b281-1b1ab0e35470", "embedding": null, "doc_hash": "282aeae9792f62abb2cd3dd627f8bf845ad7dfa59d1e85f48a001e157d234f8b", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/Log"}, "node_info": {"start": 0, "end": 649, "_node_type": "1"}, "relationships": {"1": "1048ad897dcbf98551e22bcb9a4a761e3d57651f"}}, "__type__": "1"}, "1452ff31-f326-40bd-a54d-154378803b52": {"__data__": {"text": "# Runtime.Time Attribute\n\nGets the current block time stamp.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern uint Time\n```\n\nAttribute: unix time stamp. Unsigned Integer.\n\n## Example\n\n```cs\npublic static bool Main()\n{\n    if (Runtime.Time >= 1587959138)\n    {\n        // do something;\n    }\n}\n```\n\n\n\n[Back](../Runtime.md)", "doc_id": "1452ff31-f326-40bd-a54d-154378803b52", "embedding": null, "doc_hash": "e2649f9cb5035e4101cdbfab059a4eeb53a624b05ae6b6e9a2a4a0d8f1325325", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/Time"}, "node_info": {"start": 0, "end": 420, "_node_type": "1"}, "relationships": {"1": "01a89aa6938a68a51598be7ea81b2c7545faf19e"}}, "__type__": "1"}, "e33b6fba-95e8-4d97-9d6b-5d1bc6e2514a": {"__data__": {"text": "# Runtime.Trigger Attribute\n\nGets the trigger type for the smart contract. \n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern TriggerType Trigger { get; }\n```\n\nAttribute\uff1a[TriggerType](../TriggerType.md).\n\n## Example\n\n```cs\npublic static bool Main()\n{\n    if (Runtime.Trigger == TriggerType.Verification)\n    {\n        // do something;\n    }\n    else if (Runtime.Trigger == TriggerType.Application)\n    {\n        // do something;\n    }\n}\n```\n\nFor details, refer to [Template](https://github.com/neo-project/examples/blob/master/csharp/ICO_Template/ICO_Template.cs).\n\n\n\n[Back](../Runtime.md)", "doc_id": "e33b6fba-95e8-4d97-9d6b-5d1bc6e2514a", "embedding": null, "doc_hash": "91d0a9dbf26a37a4c89b615dddf1a2fc7e67a95fff552e7fcc47a378619b18a1", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/Trigger"}, "node_info": {"start": 0, "end": 687, "_node_type": "1"}, "relationships": {"1": "d6579b2cdc1d1ad698db1a07e916e48504d69078"}}, "__type__": "1"}, "8f5fba89-95c4-4f5d-9b11-cd4aff364d75": {"__data__": {"text": "# Storage Class\n\nProvides a set of methods to insert, query, and delete data in the persistent storage.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static class Storage\n```\n\n## Attributes\n\n| Name                                   | Description |\n| ---------------------------------------- | ---------- |\n| [CurrentContext](Storage/CurrentContext.md) | Returns the current storage context |\n| CurrentReadOnlyContext | Returns the read-only context of the current contract storage |\n\n## Methods\n\n| Name                                    | Description                    |\n| ---------------------------------------- | -------------------------------- |\n| [Delete](Storage/Delete.md) | Deletes the value corresponding to the key from the given storage context. This method has multiple overloads. |\n| [Get](Storage/Get.md) | Gets the byte[] value corresponding to the given key from the given storage context. This method has multiple overloads. |\n| [Put](Storage/Put.md) | Puts the key-value pair into the given storage context. This method has multiple overloads. |\n| [Find](Storage/Find.md) | Finds the content in the given storage context. This method has multiple overloads. |\n\n## Constructor\n\nThe Storage class is a static class and does not require a constructor.", "doc_id": "8f5fba89-95c4-4f5d-9b11-cd4aff364d75", "embedding": null, "doc_hash": "3f6f79c41c24e4bc852bf067986a5152a244252e0e6a51a233e4880b0f715d17", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage"}, "node_info": {"start": 0, "end": 1353, "_node_type": "1"}, "relationships": {"1": "3e1d2c9caa1d4af4a272c48abc40347ae20a8703"}}, "__type__": "1"}, "0b44b838-3280-4d90-821a-ca327cee7232": {"__data__": {"text": "# Storage.CurrentContext Property\n\nReturns the current storage context. After obtaining the storage context, the object can be passed as an argument to other contracts (as a way of authorization), allowing other contracts to perform read/write operations on the persistent store of the current contract.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern StorageContext CurrentContext {get;}\n```\n\nAttribute value: Current storage context as a [StorageContext](../StorageContext.md).\n\n\n\n[Back](../Storage.md)\n", "doc_id": "0b44b838-3280-4d90-821a-ca327cee7232", "embedding": null, "doc_hash": "a5627f7882ca8444d319ff5f177673f00edc4ab48f8f0b104d95917aa67795e3", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/CurrentContext"}, "node_info": {"start": 0, "end": 605, "_node_type": "1"}, "relationships": {"1": "edad6fc25aff3d18e7619291f42055b175824e7f"}}, "__type__": "1"}, "a19dd93b-4e05-4f89-bcd1-3bbf3d1500f9": {"__data__": {"text": "# Storage.Delete Method\n\nDeletes the value corresponding to the given key from the specific storage context.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern void Delete(StorageContext context, byte[] key);\npublic static extern void Delete(StorageContext context, ByteString key);\n```\n\nParameters:\n\n- Context: Storage context as a [StorageContext](../StorageContext.md).\n\n- Key: Key as a byte array or string. Max length 64 bytes.\n\n\nReturn value: void.\n\n```cs\npublic static extern void Delete(byte[] key);\npublic static extern void Delete(string key);\n```\n\nParameters:\n\nKey: Key as a byte array or string.\n\nReturn value: void.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        Storage.Delete(Storage.CurrentContext, \"aa\");\n        Storage.Delete(Storage.CurrentContext, new byte[] { 0 });\n        Storage.Delete(\"aa\");\n        Storage.Delete(new byte[] { 0 });\n    }\n}\n```\n\n\n\n[Back](../Storage.md)\n", "doc_id": "a19dd93b-4e05-4f89-bcd1-3bbf3d1500f9", "embedding": null, "doc_hash": "e453ef9b72944235388894b7d1648747accfc9165f0bdb755a799c878a20a22a", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Delete"}, "node_info": {"start": 0, "end": 1075, "_node_type": "1"}, "relationships": {"1": "de0d542cab2219199c27f09fc7e3c7f44368755c"}}, "__type__": "1"}, "d921a477-8860-4787-b3ac-cc62d4503c92": {"__data__": {"text": "# Storage.Find Method\n\nFinds the content in the storage context that matches the specified prefix.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern Iterator Find(StorageContext context, byte[] prefix, FindOptions options = FindOptions.None);\npublic static extern Iterator Find(StorageContext context, ByteString prefix, FindOptions options = FindOptions.None);\n```\n\nParameters:\n\n- context: Storage context as a [StorageContext](../StorageContext.md)\n- prefix: Prefix as a byte array or string.\n\nReturn value: The iterator composed of the elements  that meet conditions in the context.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        byte[] prefix1 = new byte[] { 0 };\n        string prefix2 = \"aa\";\n        Storage.Find(Storage.CurrentContext, prefix1);\n        Storage.Find(Storage.CurrentContext, prefix2);\n        Storage.Find(prefix1);\n        Storage.Find(prefix2);\n    }\n}\n```\n\n[Back](../Storage.md)\n", "doc_id": "d921a477-8860-4787-b3ac-cc62d4503c92", "embedding": null, "doc_hash": "2e75620708aed612bd5b940136c557c2cef27006609a617445ac9d0ffe549b14", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Find"}, "node_info": {"start": 0, "end": 1085, "_node_type": "1"}, "relationships": {"1": "5b300188118b6802fa6c7f2c1cd3f861474312ff"}}, "__type__": "1"}, "0cb38c10-4db8-44c3-b239-e60eaac914a7": {"__data__": {"text": "# Storage.Get Method\n\nReturns a value from the persistent store based on the given key.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic static extern byte[] Get(StorageContext context, byte[] key);\npublic static extern byte[] Get(StorageContext context, ByteString key);\n```\n\nParameters:\n\nContext: Storage context as a [StorageContext](../StorageContext.md).\n\nKey: Key as a byte array or string. Max length 64 bytes.\n\nReturn Value: The value corresponding to the key as a byte array.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        byte[] value = Storage.Get(Storage.CurrentContext, new byte[] { 0 });\n        byte[] value = Storage.Get(Storage.CurrentContext, \"aa\");\n    }\n}\n```\n\n\n\n[Back](../Storage.md)\n", "doc_id": "0cb38c10-4db8-44c3-b239-e60eaac914a7", "embedding": null, "doc_hash": "aabe96290be1e65c9882f4d1f80d30432284080a3bf4dd1d31515970512cfbc2", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Get"}, "node_info": {"start": 0, "end": 871, "_node_type": "1"}, "relationships": {"1": "6238c036127bbb88cf9c09e5b282b97abf974746"}}, "__type__": "1"}, "91ebc400-581e-4319-ae0c-99fe8c512740": {"__data__": {"text": "# Storage.Put Method\n\nInserts a given value to the given key in the persistent storage.\n\nNamespace: [Neo.SmartContract.Framework.Services](../../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\nPut(StorageContext context, byte[] key, ByteString value);\nPut(StorageContext context, byte[] key, byte[] value);\nPut(StorageContext context, byte[] key, BigInteger value);\nPut(StorageContext context, ByteString key, ByteString value);\nPut(StorageContext context, ByteString key, BigInteger value);\nPut(StorageContext context, byte[] key, byte[] value, StorageFlags flags);\nPut(StorageContext context, byte[] key, BigInteger value, StorageFlags flags);\nPut(StorageContext context, ByteString key, BigInteger value, StorageFlags flags);\nPut(StorageContext context, ByteString key, ByteString value, StorageFlags flags);\n```\n\nParameters:\n\n- context: Storage context as a [StorageContext](../StorageContext.md).\n- key: Key as a byte array or string. Max length 64 bytes.\n- value: Value as a byte array, Biginteger, or string.\n- flag: StorageFlags type, representing a variable or constant in storage.\n\n\nReturn value: void.\n\n## Example\n\n```cs\npublic class Contract1 : SmartContract.Framework.SmartContract\n{\n    public static void Main()\n    {\n        byte[] key1 = new byte[] { 0 };\n        string key2 = \"aa\";\n        byte[] value1 = new byte[] { 1 };\n        BigInteger value2 = new BigInteger(\"1\");\n        string value3 = \"bb\";\n        Storage.Put(Storage.CurrentContext, key1, value1);\n        Storage.Put(Storage.CurrentContext, key1, value2);\n        Storage.Put(Storage.CurrentContext, key1, value3);\n        Storage.Put(Storage.CurrentContext, key2, value1);\n        Storage.Put(Storage.CurrentContext, key2, value2);\n        Storage.Put(Storage.CurrentContext, key2, value3);\n    }\n}\n```\n\n[Back](../Storage.md)\n", "doc_id": "91ebc400-581e-4319-ae0c-99fe8c512740", "embedding": null, "doc_hash": "6e9992b6413404384c7f491b7e23c2cb848f3d76fa341dc40b2c2164141819d6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Put"}, "node_info": {"start": 0, "end": 1833, "_node_type": "1"}, "relationships": {"1": "5852afd3268d233d6fba1ecff7cd9513eddd5853"}}, "__type__": "1"}, "dc2068a4-2c89-493e-aeb2-0bb8ba5b1c4e": {"__data__": {"text": "# StorageContext Class\n\nThe class representing the storage context of the persistent store.\n\nThe smart contract can obtain its own storage context through Storage.CurrentContext and pass the context as an argument to other contracts(as a way of authorization), allowing other contracts to call the read/write methods for its persistent storage.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class StorageContext\n```\n\n## Attribute\n\n| Name       | Description                                                  |\n| ---------- | ------------------------------------------------------------ |\n| AsReadOnly | Converts the specified storage context to a new readonly storage context |\n\n## Constructor\n\nThe StorageContext object is constructed through [Storage.CurrentContext](Storage/CurrentContext.md).", "doc_id": "dc2068a4-2c89-493e-aeb2-0bb8ba5b1c4e", "embedding": null, "doc_hash": "adc6d0eefb5c100366ca6c3ec2889460b2e81f7a28b318d69633da53d0dbc5fc", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/StorageContext"}, "node_info": {"start": 0, "end": 879, "_node_type": "1"}, "relationships": {"1": "286259c63f034ccf6031f311bc7f3014b22c3840"}}, "__type__": "1"}, "18e20fa3-d624-46aa-bac6-1bedd8de271e": {"__data__": {"text": "# StorageMap Class\n\nThis class represents the key-value storage for the specific prefix in the given storage context.\n\nNamespace:[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class StorageMap\n```\n\n## Attribute\n\n| Name                                   | Description |\n| ---------------------------------------- | ---------- |\n| Context | Storage context |\n| Prefix | Prefix |\n\n## Methods\n\n| Name   | Description                                                  |\n| ------ | ------------------------------------------------------------ |\n| Delete | Deletes the value corresponding to the key from the given storage context. This method has multiple overloads. |\n| Get    | Gets the byte[] value corresponding to the given key from the given storage context. This method has multiple overloads. |\n| Put    | Puts the key-value pair into the given storage context. This method has multiple overloads. |\n| Find   | Finds the content in the given storage context. This method has multiple overloads. |\n\n", "doc_id": "18e20fa3-d624-46aa-bac6-1bedd8de271e", "embedding": null, "doc_hash": "8be92b982e485df16bf4b550adffb312c7ce25ce39e797e16b055f67570209e6", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/StorageMap"}, "node_info": {"start": 0, "end": 1071, "_node_type": "1"}, "relationships": {"1": "6f46181364d97d859193217461da55f9f5c0b174"}}, "__type__": "1"}, "0b2d33d2-f2d5-41c6-935b-f4548bc4861d": {"__data__": {"text": "# Transaction Class\n\nUsed to represent the base class of a transaction.\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic class Transaction\n```\n\n## Attributes\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| Hash            | Hash of the current transaction                              |\n| Version         | Transaction version number. For now it is 0                  |\n| Nonce           | Random number                                                |\n| Sender          | Address script hash of the sender                            |\n| SystemFee       | System fee, which is paid to the network for resource cost   |\n| NetworkFee      | Network fee, which is paid to the verifier for packaging the transaction |\n| ValidUntilBlock | Validity period of the transaction                           |\n| Script          | Contract script hash of the transaction                      |\n\n## Constructor\n\nThe Transaction object is constructed through [Ledger.GetTransaction(UInt256)](../native/Ledger/GetTransaction.md) and [Ledger.GetTransactionFromBlock()](../native/Ledger/GetTransactionFromBlock.md).\n\n", "doc_id": "0b2d33d2-f2d5-41c6-935b-f4548bc4861d", "embedding": null, "doc_hash": "8c0fbe9b16cf19f6e635525f38a9fc27a8f81addf1174d145d3f9b9259b54ab5", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Transaction"}, "node_info": {"start": 0, "end": 1300, "_node_type": "1"}, "relationships": {"1": "efa594ae9a124dd5050a497b72808764bde65cc9"}}, "__type__": "1"}, "df6b74ea-d577-4660-b9bd-132ba3883102": {"__data__": {"text": "# TriggerType Enumeration\n\nThis enumeration represents the type of smart contract triggers. Triggers enable the contract to execute different logic under different usage scenarios.\n\nFor more information about triggers, refer to [Smart Contract Basics](../../../../develop/write/basics.md).\n\nNamespace\uff1a[Neo.SmartContract.Framework.Services](../services.md)\n\nAssembly: Neo.SmartContract.Framework\n\n## Syntax\n\n```cs\npublic enum TriggerType : byte\n{\n    OnPersist = 0x01,\n    PostPersist = 0x02,\n    Verification = 0x20,\n    Application = 0x40,\n    System = OnPersist | PostPersist,\n    All = OnPersist | PostPersist | Verification | Application\n}\n```\n\nOnPersist: Indicate that the contract is triggered by the system to execute the OnPersist method of the native contracts.\n\nPostPersist: Indicate that the contract is triggered by the system to execute the PostPersist method of the native contracts.\n\nVerification: Indicates that the contract is triggered by the verification of a IVerifiable.\n\nApplication: Indicates that the contract is triggered by the execution of transactions.\n\nSystem: The combination of all system triggers.\n\nAll: The combination of all triggers.", "doc_id": "df6b74ea-d577-4660-b9bd-132ba3883102", "embedding": null, "doc_hash": "caf86dc53c1d93dcc7cd32e3e0966676563fb05269a97af922e98594d55d04b8", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/TriggerType"}, "node_info": {"start": 0, "end": 1168, "_node_type": "1"}, "relationships": {"1": "4ac114a915f5e132b377970cb603ef2074312820"}}, "__type__": "1"}, "97713d87-dbdf-47ba-bbce-33cb51f0719b": {"__data__": {"text": "---\nsidebar_label: 'Interoperable service'\nsidebar_position: 1\n---\n# Interoperable service\n\nThis article lists the interoperable service in Neo N3. \n\nThe Interoperable service is the underlying API of the system. For more information on how to use the framework to easily call APIs in high-level languages, see [Smart Contracts Framework](framework.md).\n\n**Contract**:\n\n| API                                   | Description                                                  |\n| ------------------------------------- | ------------------------------------------------------------ |\n| System.Contract.Call                  | Use it to call another contract dynamically.                 |\n| System.Contract.GetCallFlags          | Gets the CallFlags for the current context                   |\n| System.Contract.CreateStandardAccount | Calculates corresponding account scripthash for the given public key |\n| System.Contract.CreateMultisigAccount | Creates the script hash of multi-signed account using public key. |\n\n**Crypto**:\n\n| API                         | Description                                            |\n| --------------------------- | ------------------------------------------------------ |\n| System.Crypto.CheckSig      | Checks the signature for the current script container  |\n| System.Crypto.CheckMultisig | Checks the signatures for the current script container |\n\n**Iterator**:\n\n| API                    | Description                                                  |\n| ---------------------- | ------------------------------------------------------------ |\n| System.Iterator.Next   | Advances the iterator to the next element of the collection  |\n| System.Iterator.Values | Gets the element in the collection at the current position of the iterator |\n\n**Runtime**:\n\n| API                                   | Description                                                  |\n| ------------------------------------- | ------------------------------------------------------------ |\n| System.Runtime.Platform               | Gets the name of the current platform                        |\n| System.Runtime.GetTrigger             | Gets the trigger of the execution                            |\n| System.Runtime.GetTime                | Gets the timestamp of the current block                      |\n| System.Runtime.GetScriptContainer     | Gets the current script container                            |\n| System.Runtime.GetExecutingScriptHash | Gets the script hash of the current context                  |\n| System.Runtime.GetCallingScriptHash  ", "doc_id": "97713d87-dbdf-47ba-bbce-33cb51f0719b", "embedding": null, "doc_hash": "ef95ef1076d0bfe918bd448f29f5f7b9efbb70d70e5ecb74b5c709f9becb2d7f", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/interop"}, "node_info": {"start": 0, "end": 2562, "_node_type": "1"}, "relationships": {"1": "d4e662dd3dd43a42e807c3b2be08c1ab5f69a316", "3": "77e5cbef-5d72-4a9c-9013-2177687315fe"}}, "__type__": "1"}, "77e5cbef-5d72-4a9c-9013-2177687315fe": {"__data__": {"text": "       |\n| System.Runtime.GetCallingScriptHash   | Gets the script hash of the calling contract                 |\n| System.Runtime.GetEntryScriptHash     | Gets the script hash of the entry context                    |\n| System.Runtime.CheckWitness           | Determines whether the specified account has witnessed the current transaction |\n| System.Runtime.GetInvocationCounter   | Gets the number of times the current contract has been called during the execution |\n| System.Runtime.Log                    | Writes a log                                                 |\n| System.Runtime.GetNotifications       | Gets the notifications sent by the specified contract during the execution |\n| System.Runtime.GasLeft                | Gets the remaining GAS that can be spent in order to complete the execution |\n| System.Runtime.BurnGas                | Burning GAS to benefit the Neo ecosystem                     |\n| System.Runtime.GetNetwork             | Gets the current network number                              |\n| System.Runtime.GetRandom              | Gets random number                                           |\n\n**Storage**:\n\n| API                               | Description                                                  |\n| --------------------------------- | ------------------------------------------------------------ |\n| System.Storage.GetContext         | Gets the storage context for the current contract            |\n| System.Storage.GetReadOnlyContext | Gets the read-only storage context for the current contract  |\n| System.StorageContext.AsReadOnly  | Converts the specified storage context to a new read-only storage context |\n| System.Storage.Get                | Gets the entry with the specified key from the storage       |\n| System.Storage.Find               | Finds the entries from the storage                           |\n| System.Storage.Put                | Puts a new entry into the storage                            |\n| System.Storage.Delete             | Deletes an entry from the storage                            |\n\n", "doc_id": "77e5cbef-5d72-4a9c-9013-2177687315fe", "embedding": null, "doc_hash": "e8aae5acfacbf15f6b9f9da2933fe588e2d53d0b96a9adeb5d5ecc4cdfefcc88", "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/interop"}, "node_info": {"start": 2514, "end": 4580, "_node_type": "1"}, "relationships": {"1": "d4e662dd3dd43a42e807c3b2be08c1ab5f69a316", "2": "97713d87-dbdf-47ba-bbce-33cb51f0719b"}}, "__type__": "1"}, "c8c169b2-0df2-45ad-9789-c677ee48c9a5": {"__data__": {"text": "---\ntitle: 'Real-world Tokens: Building and deploying a NEP-17 Token'\ndescription: \"This tutorial will walk you through the process of creating real-world Neo Smart Contract using the Neo Blockchain toolkit. We will create a NEP-17 token; [NEP-17](https://docs.neo.org/v3/docs/en-us/develop/write/nep17.html) is a token standard that specifies a general mechanism for tokenizing an asset on the Neo 3 blockchain.\"\nauthor: ngdenterprise\ntags: [ \"NEOEXPRESS\",\"SMART CONTRACT\",\"NEP17\"]\nskill: beginner\nimage: ./assets/cover.png\nsidebar: true\n---\n\n# Real-world Tokens: Building and deploying a NEP-17 Token\n\n\nPre-requisites\n--------------\n\nYou will need the following software to follow along with this tutorial:\n\n*   **.NET SDK 5.0** \u2014 [https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download)  \n    We\u2019ll write the smart contract code using the C# programming language. The .NET SDK is required to compile the C# code.\n*   **Visual Studio Code** \u2014 [https://code.visualstudio.com/download](https://code.visualstudio.com/download)  \n    This is a very popular code editor; the Neo Blockchain Toolkit builds on top of VS Code.\n*   **Neo Blockchain Toolkit Visual Studio Code extension** \u2014 [https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit)  \n    This will add support to VS Code for visualizing Neo blockchains, running private blockchain instances and debugging Neo smart contracts.\n\nFor a step-by-step walkthrough showing how to install the above pre-requisites, see: [Quick Start video 1](./quickstart1.html).\n\nThis 6-minute video demonstrates how to setup a new machine for N3 smart contract development.\n\n*   **C# Visual Studio Code extension** \u2014 [https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp)  \n    This will add support to VS Code for editing and building C# source code.\n*   **Neo C# smart contract compiler** \u2014 [https://github.com/neo-project/neo-devpack-dotnet](https://github.com/neo-project/neo-devpack-dotnet)  \n    This tool allows you to convert compiled C# code into bytecode suitable for execution by the Neo virtual machine.\n\nFor a step-by-step walkthrough showing how to install the C# VS Code extension and the Neo C# compiler, see: [Quick Start video 4](./quickstart4.html).\n\nThis 11-minute video demonstrates how to setup your machine to compile C# smart contracts and walks through a trivial example.\n\nAll of the software listed above is freely available and cross-platform (you can follow along on Windows, Mac or Linux).\n\nCreate a private blockchain\n---------------------------\n\nFirst, we\u2019ll create a new empty folder\u2014registrar\u2014for our project. We\u2019ll call our fictional token \u201cXYZ\u201d and store all files related to the token in a folder called `xyz-token`.\n\nLoad a new Visual Studio Code window, click on \u201cOpen Folder\u201d and then use the folder selection dialog to create a new folder called `xyz-token` and then open that folder:\n\n![VS Code window with a new empty folder opened](./assets/01.png)\n\nThe first thing we will do is use Neo Express to create a private blockchain. This will allow us to deploy and invoke our contract while we are developing it without spending any real", "doc_id": "c8c169b2-0df2-45ad-9789-c677ee48c9a5", "embedding": null, "doc_hash": "e4adfb86a23dff2a5702f268604eefcf3e0cba710d18d0d00492028468cc8202", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 0, "end": 3349, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "3": "0e9b60a6-ba6a-4dc5-8af6-9c8a3de85193"}}, "__type__": "1"}, "0e9b60a6-ba6a-4dc5-8af6-9c8a3de85193": {"__data__": {"text": "allow us to deploy and invoke our contract while we are developing it without spending any real GAS.\n\nClick the N3 icon in the tool bar to open the N3 Visual DevTracker:\n\n![N3 icon](./assets/n3icon.png)\n\nNext, use the button in the Quick Start panel to create a new Neo Express Instance:\n\n![Quick Start panel](./assets/quickstartpanel.png)\n\n(Alternatively, you could select the \u201cCreate private blockchain\u201d menu option from the context menu in the Blockchains panel.)\n\nYou\u2019ll be asked how many consensus nodes that you want your private blockchain to have. For this example, one node is sufficient and will enable us to get the most out of Neo Express (some functionality\u2014such as creating checkpoints\u2014is disabled for multi-node blockchains).\n\nWhen asked for a filename for the Neo Express configuration, we\u2019ll use the name `xyz-token.neo-express` and save the file in the empty `xyz-token` folder.\n\nYour screen should now look like this:\n\n![VS Code window with a running blockchain](./assets/02.png)\n\nYou can dismiss the message about the node being created (take note of the security warning, your `xyz-token.neo-express` file will contain private keys, but those keys should only be used for local testing as they are not securely stored). You can also close the Terminal panel showing Neo Express output if you wish\u2014your blockchain will continue to run in the background and you\u2019ll see new blocks appear in the Block Explorer panel about once every 15 seconds.\n\nYou can also check the \u201cHide empty blocks\u201d checkbox so that only blocks containing transactions are shown. Initially you\u2019ll only see the very first block but this will make it easier to identify our transactions later.\n\n![VS Code window after dismissing other output](./assets/03.png)\n\nCreate a wallet\n---------------\n\nNext, we\u2019ll create a wallet to use with our private blockchain. We'll use this wallet to deploy our smart contract to the blockchain, and will write the smart contract code so that the XYZ tokens minted when the contract is first deployed are transferred to the wallet that performed the deployment.\n\nRight click on `xyz-token.neo-express` in the Blockchains panel and click on the \u201cCreate wallet\u201d menu option. When asked for a wallet name, type `owner`. You\u2019ll see a message confirming that the wallet was created:\n\n![Wallet creation success message](./assets/04.png)\n\nWe now have a wallet for the smart contract owner, but that wallet doesn\u2019t contain any assets. Deploying a smart contract to a Neo blockchain has a fee associated with it; the fee varies based on the size of the contract but is always paid in GAS.\n\nEach Neo Express instance has a special wallet called \u201cgenesis\u201d that is initially given the entire supply of NEO and GAS (the two assets native to the Neo blockchain). Let\u2019s transfer some GAS from the genesis wallet to our owner wallet.\n\nRight click on `xyz-token.neo-express` in the Blockchains panel and click on the \u201cTransfer assets\u201d menu option. When prompted, select GAS as the asset. Enter 100,000 as the amount to transfer (this is more than enough to do multiple deployments of the contract we will later develop). Choose \u201cgenesis\u201d as the source wallet and \u201cowner\u201d for the destination. You\u2019ll see a message confirming that the transfer transaction was submitted:\n\n![Transfer success message](./assets/05.png)\n\nShortly after you\u2019ll see a new non-empty block appear in your Block Explorer panel. You can click on that block to see a list of transactions in the block (there will only be one). You can click on the transaction to see the details.\n\n![VS Code window showing transaction details](./assets/06.png)\n\nCreate a contract\n-----------------\n\nNow we\u2019re ready to write the code for our smart contract.\n\nClick the \u201cCreate a new contract\u201d button", "doc_id": "0e9b60a6-ba6a-4dc5-8af6-9c8a3de85193", "embedding": null, "doc_hash": "477a31c281f9b105576bb7aaf4f93b583dd586fd601adc782f9e7d8c49df0581", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 3271, "end": 7026, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "c8c169b2-0df2-45ad-9789-c677ee48c9a5", "3": "0f5561d6-7b5c-4261-b81d-9397bf273dfd"}}, "__type__": "1"}, "0f5561d6-7b5c-4261-b81d-9397bf273dfd": {"__data__": {"text": "the code for our smart contract.\n\nClick the \u201cCreate a new contract\u201d button in the Quick Start panel:\n\n![Quick Start panel](./assets/contractquickstart.png)\n\n(Alternatively, you could select the \u201cCreate contract\u201d menu option from the context menu in the Blockchains panel.)\n\nWhen asked which programming language you would like to use, select `csharp`.\n\nWhen asked for the contract name, enter `XyzToken`. A new file called `XyzToken.cs` will be created and opened\u2014this is our smart contract code. It has been pre-populated with some example code, but we\u2019ll shortly remove and replace most of that\u2026\n\n![VS Code window with sample contract code opened](./assets/10.png)\n\nYou can also see in the Explorer pane in VS Code that various other files have been created:\n\n![Contract files in the File Explorer](./assets/11.png)\n\nThe `XyzToken.csproj` file is an MS Build C# project configuration file; it tells the .NET SDK tooling how to build your project.\n\nThe `tasks.json` file is a Visual Studio Code configuration file that will allow you to build your code within Visual Studio Code. VS Code will have already built the sample code and the various files produced by the build are in the `XyzToken/bin/debug/net5.0` folder. You can rebuild your contract after making changes by choosing the \u201cRun build task\u2026\u201d option in the \u201cTerminal\u201d menu in VS Code.\n\nLet\u2019s remove the sample code and fill out some contract metadata, then we\u2019ll be ready to write our own smart contract code\u2026\n\nThe `XyzTokenContract.cs` file contains a single class; it is called `XyzTokenContract` and extends the `SmartContract` class (from the `Neo.SmartContract.Framework` package) to signify that it is a smart contract. The class has various attributes that are used to provide metadata that will be deployed to the N3 blockchain along with the contract:\n\n```\n[DisplayName(\"YourName.XyzTokenContract\")]\n[ManifestExtra(\"Author\", \"Your name\")]\n[ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n[ManifestExtra(\"Description\", \"Describe your contract...\")]\n```\n\nLet\u2019s replace these with real values\u2026\n\nThe `DisplayName` will be used to refer to your contract from within wallet software and other tools, it is common practice to provide a string consisting of an identifier for you (e.g. your GitHub ID, or company abbreviation) followed by a dot and then the contract name.\n\nFor the `ManifestExtra` attributes, replace the example values with real information. You can also remove the `OnNumberChanged` event and the `ChangeNumber` and `GetNumber` methods from the example contract:\n\n```csharp\nusing System;\nusing System.ComponentModel;\nusing System.Numerics;\n\nusing Neo;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\n\nnamespace XyzToken\n{\n    [DisplayName(\"djnicholson.XyzTokenContract\")]\n    [ManifestExtra(\"Author\", \"David Nicholson\")]\n    [ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n    [ManifestExtra(\"Description\", \"Controls issuance of the XYZ token\")]\n    public class XyzTokenContract : SmartContract\n    {\n      const string MAP\\_NAME = \"XyzTokenContract\";\n    }\n}\n```\n\nYou can rebuild your contract now to verify that it still builds. Our contract doesn\u2019t do anything useful yet, though; next we\u2019ll code the various methods and events mandated by the NEP-17 standards.\n\nNEP-17 requirements\n-------------------\n\nThe NEP-17 standard mandates that we implement", "doc_id": "0f5561d6-7b5c-4261-b81d-9397bf273dfd", "embedding": null, "doc_hash": "bb01845f5a4de59bcf99a4e19f2c121d034b19feb3a5ce9c7e7999fe707ca8e1", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 7043, "end": 10509, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "0e9b60a6-ba6a-4dc5-8af6-9c8a3de85193", "3": "8310ad69-d0af-410d-b52d-bce368432bd5"}}, "__type__": "1"}, "8310ad69-d0af-410d-b52d-bce368432bd5": {"__data__": {"text": "requirements\n-------------------\n\nThe NEP-17 standard mandates that we implement various methods and events in our contract:\n\n*   Token information:\n    *   A `totalSupply` method that returns the total amount of tokens in our contract (initially we\u2019ll use a fixed issuance of 1,000,000 XYZ tokens).\n    *   A `symbol` method that returns the name of our token (\u201cXYZ\u201d).\n    *   A `decimals` method that returns the number of decimals used (we\u2019ll use 8 decimal places).\n*   Token transfer mechanism:\n    *   A `transfer` method that allows XYZ tokens to be transferred between Neo wallets.\n    *   A `balanceOf` method that reports the current XYZ token balance for an account.\n    *   A `Transfer` event that will fire whenever tokens are transferred.\n\nWe\u2019ll go through and implement each of the above requirements one-by-one\u2026\n\nToken information methods\n-------------------------\n\nThe first few methods that we\u2019ll implement are pretty simple as they will all return constant values.\n\nLet\u2019s start with TotalSupply, this method returns a BigInteger representing the total amount of tokens in our contract. For now, we\u2019ll return a constant (we\u2019ll issue 1,000,000 at contract creation time) but later we may choose to implement something more complex (e.g. allow users to issue and buy tokens using NEO and/or GAS). We\u2019ll create a constant for the value 1,000,000 as we will also need to refer to the same value later when initializing our contract.\n\n```csharp\nusing System;\nusing System.ComponentModel;\nusing System.Numerics;\n\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Services.Neo;\nusing Neo.SmartContract.Framework.Services.System;\n\nnamespace XyzToken\n{\n    [DisplayName(\"djnicholson.XyzTokenContract\")]\n    [ManifestExtra(\"Author\", \"David Nicholson\")]\n    [ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n    [ManifestExtra(\"Description\", \"Controls issuance of the XYZ token\")]\n    public class XyzTokenContract : SmartContract\n    {\n        const string MAP\\_NAME = \"XyzTokenContract\";\n\n        static readonly ulong InitialSupply = 1\\_000\\_000;\n\n        public static BigInteger TotalSupply() => InitialSupply;\n    }\n}\n```\n\nThe implementation of Symbol (we\u2019ll return \u201cXYZ\u201d) and Decimals (we\u2019ll return 8) will be equally as simple. There\u2019s no need to define constants here as we won\u2019t be reusing the same values elsewhere; we can just use inline literals:\n\n```csharp\nusing System;\nusing System.ComponentModel;\nusing System.Numerics;\n\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Services.Neo;\nusing Neo.SmartContract.Framework.Services.System;\n\nnamespace XyzToken\n{\n    [DisplayName(\"djnicholson.XyzTokenContract\")]\n    [ManifestExtra(\"Author\", \"David Nicholson\")]\n    [ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n    [ManifestExtra(\"Description\", \"Controls issuance of the XYZ token\")]\n    public class XyzTokenContract : SmartContract\n    {\n        const string MAP\\_NAME = \"XyzTokenContract\";\n\n        static readonly ulong InitialSupply =", "doc_id": "8310ad69-d0af-410d-b52d-bce368432bd5", "embedding": null, "doc_hash": "70ac01942bc2c42a8997f95dfccbe417bf6c8ca60047c517ff2f241f92c85f76", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 10499, "end": 13553, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "0f5561d6-7b5c-4261-b81d-9397bf273dfd", "3": "fe214a7c-6bc2-48d7-88cc-9344f001cc68"}}, "__type__": "1"}, "fe214a7c-6bc2-48d7-88cc-9344f001cc68": {"__data__": {"text": "       static readonly ulong InitialSupply = 1\\_000\\_000;\n\n        public static BigInteger TotalSupply() => InitialSupply;\n        \n        public static string Symbol() => \"XYZ\";\n\n        public static ulong Decimals() => 8;\n    }\n}\n```\n\nAt this stage you should build your contract again to validate that you don\u2019t have any syntax errors. However, our contract does not yet confirm to the NEP-17 standard; we still need to add support for token transfers\u2026\n\nToken transfer mechanism\n------------------------\n\nFirst, we need to implement the `Transfer` event. The NEP-17 standard tells us that we must trigger a `Transfer` event whenever tokens are transferred. In code we\u2019ll call the event `OnTransfer`\u2014as this is a common convention for events in C# code\u2014and we\u2019ll use a `DisplayName`attribute so that the Neo C# compiler knows that this is the `Transfer`event:\n\n[DisplayName(\"Transfer\")]\npublic static event Action<UInt160, UInt160, BigInteger> OnTransfer;\n\nWe\u2019ll use our contract\u2019s storage to keep track of the XYZ token balance for a specific address. This information can be encoded using a mapping from addresses to numerical values. In a Neo smart contract you can use the `StorageMap` class to create an object which will allow you to lookup values by key (addresses in our case) and set a value for a specific key. Any changes made to the storage map are persisted and also apply to subsequent contract invocations. Let\u2019s add a helper property that we can use anywhere we need a reference to our mapping of token balances:\n\nprivate static StorageMap Balances => new StorageMap(Storage.CurrentContext, MAP\\_NAME);\n\nTo make our later code a bit cleaner, let\u2019s also add some strongly typed methods for getting values out of the map and putting values in. We\u2019ll use the `UInt160` type to represent addresses; this is a 160-but unsigned integer that can be safely casted to a byte array of length 20 (the length of Neo addresses). We\u2019ll use the `BigInteger` type to represent token balances.\n\nprivate static BigInteger Get(UInt160 key) => (BigInteger) Balances.Get(key);\nprivate static void Put(UInt160 key, BigInteger value) => Balances.Put(key, value);\n\nNow let\u2019s add some helper methods that will allow us to increase or reduce the XYZ token balance for a specific address:\n```csharp\nprivate static void Increase(UInt160 key, BigInteger value)\n{\n    Put(key, Get(key) + value);\n}\n\nprivate static void Reduce(UInt160 key, BigInteger value)\n{\n    var oldValue = Get(key);\n    if (oldValue == value)\n    {\n        Balances.Delete(key);\n    }\n    else\n    {\n        Put(key, oldValue - value);\n    }\n}\n```\n\nNote that the implementation of `Reduce` is slightly more complicated than `Increase`, this is because `Reduce` has an optimization that will slightly reduce the cost of invoking the smart contract in a way that reduces a balance to zero.\n\nWe\u2019re finally ready to implement our `Transfer` method! NEP-17 states that the `Transfer` method has four arguments: The sender address, the recipient address, the amount to transfer and some optional arbitrary data. There is some validation that we need to do for each of the arguments:\n\n*   We need to ensure that the sender and recipient are valid addresses (we can use the `IsValid` extension property on the `Uint160` class for this).\n*   The amount must be greater than or equal to zero.\n*   We need to verify that the", "doc_id": "fe214a7c-6bc2-48d7-88cc-9344f001cc68", "embedding": null, "doc_hash": "ae6acbfbd789d22a1f952dcde5153f9ae51a304a94d769382d2e71d678a22f61", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 13595, "end": 16971, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "8310ad69-d0af-410d-b52d-bce368432bd5", "3": "27f5942d-30dd-4b98-bfb1-b0749aac60f7"}}, "__type__": "1"}, "27f5942d-30dd-4b98-bfb1-b0749aac60f7": {"__data__": {"text": "be greater than or equal to zero.\n*   We need to verify that the transaction was signed by the owner of the sender address (we can use the `Runtime.CheckWitness(\u2026)` helper method provided by the Neo Smart Contract Framework for this). However, this validation does not apply if the caller is a contract transferring its own XYZ tokens (we can use the `Runtime.CallingScriptHash`property to check for this).\n*   The sender must have a balance greater than or equal to the amount being transferred.\n\nOnce validation has succeeded, we will perform the transfer (using the `Increase` and `Reduce` helper methods that we already created) and fire the `Transfer` event.\n\nThe NEP-17 standard also requires that we check whether the recipient address is a contract; if so, we must invoke the `onPayment` method of that contract (this gives the recipient contract the opportunity to abort the transaction if it does not want to receive the XYZ tokens). We can use the`ContractManagement.GetContract(\u2026)` method provided by the Neo Smart Contract Framework to test for this.\n\nThe full implementation of our Transfer method is as follows:\n\n```csharp\npublic static bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data)\n{\n    if (!from.IsValid || !to.IsValid)\n    {\n        throw new Exception(\"The parameters from and to should be 20-byte addresses\");\n    }\n\n    if (amount < 0) \n    {\n        throw new Exception(\"The amount parameter must be greater than or equal to zero\");\n    }\n\n    if (!from.Equals(Runtime.CallingScriptHash) && !Runtime.CheckWitness(from))\n    {\n        throw new Exception(\"No authorization.\");\n    }\n    \n    if (Get(from) < amount)\n    {\n        throw new Exception(\"Insufficient balance\");\n    }\n\n    Reduce(from, amount);\n    Increase(to, amount);\n    OnTransfer(from, to, amount);\n\n    if (ContractManagement.GetContract(to) != null)\n    {\n        Contract.Call(to, \"onPayment\", CallFlags.None, new object[] { from, amount, data });\n    }\n    \n    return true;\n}\n\n```\nThe NEP-17 standard also requires that we provide a contract method to retrieve the token balance for an arbitrary address:\n\n```csharp\npublic static BigInteger BalanceOf(UInt160 account)\n{\n    return Get(account);\n}\n```\n\nAt this stage you should build your contract again to validate that you don\u2019t have any syntax errors. Our contract is now technically compliant with the NEP-17 standard! However, it is still not ready for use as we don\u2019t yet have any code that performs the initial issuance of 1,000,000 XYZ tokens; let\u2019s remedy that\u2026\n\nInitial issuance\n----------------\n\nWe need to issue our initial supply of 1,000,000 XYZ tokens whenever our contract is deployed to a Neo blockchain for the first time. Fortunately, Neo allows you to specify that certain code in a smart contract to be executed at deployment time; we do this by creating a special `_deploy` method.\n\nThe `_deploy` method will be called at deployment time by the Neo Virtual Machine and will be passed a Boolean indicating whether this is an update or not (this is important to us as we only want to issue the initial supply during initial deployment; we shouldn\u2019t repeat the issuance if we update our contract).\n\nWe\u2019ll issue all of the initial XYZ tokens to whichever wallet initially deploys the contract. The NEP-17 standard requires that we fire the transfer event for", "doc_id": "27f5942d-30dd-4b98-bfb1-b0749aac60f7", "embedding": null, "doc_hash": "07c8ae5f8a3b494170c1c4179aa911e390b74e23e39965856d350b3c63ca89dc", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 16955, "end": 20302, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "fe214a7c-6bc2-48d7-88cc-9344f001cc68", "3": "b388076b-827e-4af4-ac91-0471cb750afd"}}, "__type__": "1"}, "b388076b-827e-4af4-ac91-0471cb750afd": {"__data__": {"text": "deploys the contract. The NEP-17 standard requires that we fire the transfer event for this initial allocation also (specifying `null` for the sender address).\n\nThe code for the deploy method will look like this:\n\n```csharp\n[DisplayName(\"_deploy\")]\npublic static void Deploy(object data, bool update)\n{\n    if (!update)\n    {\n        var tx = (Transaction) Runtime.ScriptContainer;\n        var owner = (Neo.UInt160) tx.Sender;\n        Increase(owner, InitialSupply);\n        OnTransfer(null, owner, InitialSupply);\n    }\n}\n```\n\nAt this stage you should build your contract again to validate that you don\u2019t have any syntax errors. Our contract is now ready to be deployed!\n\nContract deployment\n-------------------\n\nRight click on `xyz-token.neo-express` in the Blockchains panel and click on the \u201cDeploy contract\u201d menu option. When asked which account to use, select the \u201cowner\u201d wallet that you created earlier. When asked which contract to deploy, select `XyzToken.nef` (this file contains the Neo Virtual Machine bytecode for your contract). You\u2019ll see a message confirming that the deployment transaction was submitted:\n\n![Deployment success message](./assets/12.png)\n\nShortly after you\u2019ll see a new non-empty block appear in your Block Explorer panel. You can click on that block to see a list of transactions in the block (there will only be one). You can click on the transaction to see the details.\n\n![Deployment transaction showing within VS Code](./assets/13.png)\n\nYou\u2019ll notice that this transaction is somewhat larger than the transactions that we created earlier (when transferring GAS from the genesis account to the owner account), that\u2019s because this transaction contains the entire bytecode for your contract and all of its associated metadata! You can actually see the metadata in text format within the Block Explorer panel.\n\nYour contract has now been deployed to your own private Neo blockchain. Next, we\u2019ll experiment with transferring some assets\u2026\n\nMeet Alice\n----------\n\nBefore we continue, let\u2019s create one additional wallet so that we can simulate multiple people transferring XYZ tokens between each other. We\u2019ll call this new wallet \u201calice\u201d. The steps are identical to when we created the owner wallet earlier.\n\nRight click on `xyz-token.neo-express` in the Blockchains panel and click on the \u201cCreate wallet\u201d menu option. When asked for a wallet name, type `alice`. You\u2019ll see a message confirming that the wallet was created:\n\n![Wallet creation success message](./assets/14.png)\n\nNow that we have a second wallet, let\u2019s transfer some of the 1,000,000 XYZ tokens that were just issued to Alice\u2026\n\nContract invocation\n-------------------\n\nNeo Express allows you to invoke any contract deployed to your private blockchain. To do so, you must provide an \u201c[invoke file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md)\u201d; an invoke file is a JSON file that specifies one or more contract methods that should be invoked.\n\nRight click on `xyz-token.neo-express` in the Blockchains panel and click on the \u201cInvoke contract\u201d menu option. A new invoke file will be created for you and saved as `invoke-files/Untitled.neo-invoke.json`. By convention, invoke files use the `.neo-invoke.json` file extension, but you can rename the file to something more meaningful (e.g. `owner-to-alice.neo-invoke.json`) if you wish.\n\n![](./assets/15.png)\n\nInvoke files can consist of multiple", "doc_id": "b388076b-827e-4af4-ac91-0471cb750afd", "embedding": null, "doc_hash": "e845a75c2e3ba226fa9345a69de2b1d8244399dc0a53fc5f6ea85262f04f5ec2", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 20280, "end": 23728, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "27f5942d-30dd-4b98-bfb1-b0749aac60f7", "3": "740e5319-2be6-4a91-8d86-9754fa331850"}}, "__type__": "1"}, "740e5319-2be6-4a91-8d86-9754fa331850": {"__data__": {"text": "files can consist of multiple \u201csteps\u201d. The file created for you currently has one step, but all of the fields are currently empty. Let\u2019s fill them out\u2026 Click into the first field and you will see a dropdown that lists all known contracts on your private blockchain:\n\n![Selecting a contract](./assets/16.png)\n\nSelect your `XyzTokenContract`, and then click into the \u201cOperation\u201d text box; you\u2019ll see a list of all operations on your contract:\n\n![Selecting an operation](./assets/17.png)\n\nSelect the \u201ctransfer\u201d operation. You\u2019ll notice that new text boxes appear for each of the arguments to the transfer method. Let's fill those out\u2026\n\nNeo Express allows you to refer to wallets by name, to do so you prefix the wallet name with an \u201c@\u201d symbol. Your invoke file will look something like this:\n\n![Completed invocation file](./assets/18.png)\n\nClick the \u201cRun this step\u201d button to invoke your contract and when prompted choose the owner account. You\u2019ll see a \u201cTransactions\u201d pane appear within the invoke file editor, this shows you the most recent transactions that you have submitted using this editor window and there will only be one transaction right now. The transaction will initially show as \u201cpending\u201d and then change to \u201cconfirmed\u201d when your transaction is included in a block (within 15 seconds).\n\n![Invocation transaction created](./assets/19.png)\n\nYou can click on the transaction to see the same details that you would see if you found your transaction in the Block Explorer:\n\n![Invocation transaction details](./assets/20.png)\n\nCongratulations, you just transferred XYZ tokens from the owner to Alice!\n\nExercise for the reader\n-----------------------\n\nOur contract has a fixed total supply of XYZ tokens\u2014we mint 1,000,000 tokens at deployment time and then no more tokens are ever created. In a real-world scenario you may want to allow people to purchase tokens and mint new tokens as and when they are purchased.\n\nAs an exercise, you can modify the `XyzTokenContract` to support this functionality: Use contract storage (instead of a constant in the code) to record the total supply of XYZ tokens and then allow people to issue new XYZ tokens by paying a certain amount of NEO or GAS to the contract.\n\nSource code listing\n-------------------\n\nHere is the complete smart contract source code:\n```csharp\nusing System;\nusing System.ComponentModel;\nusing System.Numerics;\n\nusing Neo;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\n\nnamespace XyzToken\n{\n    [DisplayName(\"djnicholson.XyzTokenContract\")]\n    [ManifestExtra(\"Author\", \"David Nicholson\")]\n    [ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n    [ManifestExtra(\"Description\", \"Controls issuance of the XYZ token\")]\n    public class XyzTokenContract : SmartContract\n    {\n        const string MAP\\_NAME = \"XyzTokenContract\";\n\n        static readonly ulong InitialSupply = 1\\_000\\_000;\n\n        public static BigInteger TotalSupply() => InitialSupply;\n        \n        public static string Symbol() => \"XYZ\";\n\n        public static ulong Decimals() => 8;\n\n        [DisplayName(\"Transfer\")]\n        public static event Action<UInt160, UInt160, BigInteger> OnTransfer;\n\n        private static StorageMap Balances => new StorageMap(Storage.CurrentContext, MAP\\_NAME);\n\n        private", "doc_id": "740e5319-2be6-4a91-8d86-9754fa331850", "embedding": null, "doc_hash": "5c7bb0aef6103d194b16d90156fb8641c60d9a626daf90c3697a570c468b5fdc", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 23777, "end": 27124, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "b388076b-827e-4af4-ac91-0471cb750afd", "3": "8d89fa71-0710-4973-9626-fbe7978b359d"}}, "__type__": "1"}, "8d89fa71-0710-4973-9626-fbe7978b359d": {"__data__": {"text": "MAP\\_NAME);\n\n        private static BigInteger Get(UInt160 key) => (BigInteger) Balances.Get(key);\n\n        private static void Put(UInt160 key, BigInteger value) => Balances.Put(key, value);\n\n        private static void Increase(UInt160 key, BigInteger value)\n        {\n            Put(key, Get(key) + value);\n        }\n\n        private static void Reduce(UInt160 key, BigInteger value)\n        {\n            var oldValue = Get(key);\n            if (oldValue == value)\n            {\n                Balances.Delete(key);\n            }\n            else\n            {\n                Put(key, oldValue - value);\n            }\n        }\n\n        public static bool Transfer(UInt160 from, UInt160 to, BigInteger amount, object data)\n        {\n            if (!from.IsValid || !to.IsValid)\n            {\n                throw new Exception(\"The parameters from and to should be 20-byte addresses\");\n            }\n\n            if (amount < 0) \n            {\n                throw new Exception(\"The amount parameter must be greater than or equal to zero\");\n            }\n\n            if (!from.Equals(Runtime.CallingScriptHash) && !Runtime.CheckWitness(from))\n            {\n                throw new Exception(\"No authorization.\");\n            }\n            \n            if (Get(from) < amount)\n            {\n                throw new Exception(\"Insufficient balance\");\n            }\n\n            Reduce(from, amount);\n            Increase(to, amount);\n            OnTransfer(from, to, amount);\n\n            if (ContractManagement.GetContract(to) != null)\n            {\n                Contract.Call(to, \"onPayment\", CallFlags.None, new object[] { from, amount, data });\n            }\n            \n            return true;\n        }\n\n        public static BigInteger BalanceOf(UInt160 account)\n        {\n            return Get(account);\n        }\n\n        [DisplayName(\"\\_deploy\")]\n        public static void Deploy(object data, bool update)\n        {\n    ", "doc_id": "8d89fa71-0710-4973-9626-fbe7978b359d", "embedding": null, "doc_hash": "6b9ea9c1cef2aa312d79e30f0ae5c91ae22d07c8b4b13899c248b2674d23b841", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 27130, "end": 29081, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "740e5319-2be6-4a91-8d86-9754fa331850", "3": "00dced56-7b5c-45ac-8333-ef28fe44503c"}}, "__type__": "1"}, "00dced56-7b5c-45ac-8333-ef28fe44503c": {"__data__": {"text": "data, bool update)\n        {\n            if (!update)\n            {\n                var tx = (Transaction) Runtime.ScriptContainer;\n                var owner = (Neo.UInt160) tx.Sender;\n                Increase(owner, InitialSupply);\n                OnTransfer(null, owner, InitialSupply);\n            }\n        }\n    }\n}\n```", "doc_id": "00dced56-7b5c-45ac-8333-ef28fe44503c", "embedding": null, "doc_hash": "e155ed03ffd8daad745ddfe36f0e3c768999aeaae0e035c080d46a1368edce8f", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}, "node_info": {"start": 29068, "end": 29392, "_node_type": "1"}, "relationships": {"1": "38e58d6137d2a6865c727a9a5887f271f47c7c67", "2": "8d89fa71-0710-4973-9626-fbe7978b359d"}}, "__type__": "1"}, "deb19d6d-b41d-4255-b028-ed87b42d7fb1": {"__data__": {"text": "---\ntitle: 'A complete guide to write smart contract with Go on Neo'\ndescription: \"This article is about the last one since we\u2019re developing it at NEO SPCC. Hope that this article will help you to get an idea of how everything is tied up and being able to start neo-go node, write smart contract and deploy it.\"\nauthor: nspcc-dev\ntags: [ \"NEO GO\"]\nskill: beginner\nsidebar: true\nimage: ./assets/cover.png\nsource: https://github.com/nspcc-dev/neo-go-sc-wrkshp\n---\n\n\n![neogo](./assets/neo_color_dark_gopher.png)\n\n[NEO](https://neo.org/) builds smart economy and we at [NEO SPCC](https://nspcc.ru/en/) help them with that big challenge. \nIn our blog you might find the latest articles [how we run NEOFS public test net](https://medium.com/@neospcc/public-neofs-testnet-launch-18f6315c5ced) \nbut it\u2019s not the only thing we\u2019re working on.\n\n## NEO GO\nAs you know network is composed of nodes. These nodes as of now have several implementations:\n- https://github.com/neo-project/neo\n- https://github.com/CityOfZion/neo-python\n- https://github.com/nspcc-dev/neo-go\n\nThis article is about the last one since we\u2019re developing it at NEO SPCC. \nHope that this article will help you to get an idea of how everything is tied up and being able to start neo-go node,\n write smart contract and deploy it.\n \n## What is a node?\n\n![node](./assets/node.png)\n\nThe main goal of the node is to interact with each other (through P2P) and synchronize blocks in the network. \nIt also allows user to compile and run smart contracts within the blockchain network. \nNode consists of Client (CLI), Network layer, Consensus, Virtual Machine, Compiler and Blockchain.\n Let\u2019s take a closer look at each of them. \n\n#### Client\nClient (CLI) allows users to run commands from the terminal. These commands can be divided in 4 categories:\n\n- server operations\n- smart contract operations\n- vm operations\n- wallet operations\n\n\nFor example to connect node to the running private network you can use this command:\n```\n go run cli/main.go node -p\n```\nHere you can find more information about Private Network and how to start it. Simply speaking private network -- it\u2019s the network that you can run locally. \nFollow the link if you are interested in more detailed description\n[medium article](https://medium.com/@neospcc/neo-privatenet-auto-import-of-a-smart-contract-dbf2b9220ad2). \nAnother usage example is to compile smart contract:\n\n```bash\n$ ./bin/neo-go vm \n\n    _   ____________        __________      _    ____  ___\n   / | / / ____/ __ \\      / ____/ __ \\    | |  / /  |/  /\n  /  |/ / __/ / / / /_____/ / __/ / / /____| | / / /|_/ / \n / /|  / /___/ /_/ /_____/ /_/ / /_/ /_____/ |/ / /  / /  \n/_/ |_/_____/\\____/      \\____/\\____/      |___/_/  /_/   \n\n\nNEO-GO-VM >  \n```\nOnce we run this command we will get an interface to interact with virtual machine. \nTo get a list of all supported operation you just use `help`:\n```\nNEO-GO-VM > help\n\nCommands:\n  astack        Show alt stack contents\n  break       ", "doc_id": "deb19d6d-b41d-4255-b028-ed87b42d7fb1", "embedding": null, "doc_hash": "ef5da0f0513d6b275da4b2ab3d9ffe793374c9ebd174757e0903d4afc8f32493", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 0, "end": 2968, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "3": "37a54ca3-2bc8-4975-83f8-b2ea130debdf"}}, "__type__": "1"}, "37a54ca3-2bc8-4975-83f8-b2ea130debdf": {"__data__": {"text": "     Show alt stack contents\n  break         Place a breakpoint\n  clear         clear the screen\n  cont          Continue execution of the current loaded script\n  estack        Show evaluation stack contents\n  exit          Exit the VM prompt\n  help          display help\n  ip            Show current instruction\n  istack        Show invocation stack contents\n  loadavm       Load an avm script into the VM\n  loadgo        Compile and load a Go file into the VM\n  loadhex       Load a hex-encoded script string into the VM\n  ops           Dump opcodes of the current loaded program\n  run           Execute the current loaded script\n  step          Step (n) instruction in the program\n  stepinto      Stepinto instruction to take in the debugger\n  stepout       Stepout instruction to take in the debugger\n  stepover      Stepover instruction to take in the debugger\n\n```\nAs you can see there are a lot of options to play with it. Let\u2019s take simple smart contract `1-print.go` and compile it:\n \n```\npackage main\n\nimport (\n\t\"github.com/nspcc-dev/neo-go/pkg/interop/runtime\"\n)\n\nfunc Main() {\n\truntime.Log(\"Hello, world!\")\n}\n``` \nUse command `loadgo` to compile it:\n```\nNEO-GO-VM > loadgo 1-print.go\nREADY: loaded 22 instructions\nNEO-GO-VM 0 >  \n```\nAnd there you can see how many instructions were generated and even if you are interested in opcodes of current program you can dump them:\n```\nNEO-GO-VM 0 > ops\n0        PUSHDATA1    48656c6c6f2c20776f726c6421 (\"Hello, world!\")    <<\n15       SYSCALL      System.Runtime.Log (cfe74796)\n20       NOP\n21       RET\n```\nLater we will use this compiled contract in a workshop =).\nYou can find more information on how to use the CLI [here](https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md)\n\n#### Network\nNetwork layer is one of the most important parts of the node. In our case we have P2P protocol which allows nodes to communicate with each other and RPC -- which is used for getting some information from node like balance, accounts, current state, etc.\nHere is the document where you can find supported [RPC calls](https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md).\n\n#### Consensus\nConsensus is a mechanism allowing nodes to agree on a specific value (block in case of blockchain). We use our own go-implementation of dBFT algorithm.\n\n#### Compiler\nCompiler allows to build byte code, so you can write Smart Contract in your favourite Golang. All the output you saw in this example above was generated by the compiler.\n\n#### Virtual machine\nVirtual machine runs compiled byte code. NeoVM is a [stack-based virtual machine](https://docs.neo.org/docs/en-us/basic/technology/neovm.html). It has 2 stacks for performing computation.\n\n#### Blockchain\nAnd what is the Blockchain piece? It\u2019s quite a big one since it contains operations with accepting/validation transactions, \nsigning transactions, working with accounts, assets, storing blocks in database (or in cache).\n\n####", "doc_id": "37a54ca3-2bc8-4975-83f8-b2ea130debdf", "embedding": null, "doc_hash": "4af5f1f4075ae0148f50a2d545b4691a83565425ba9365eab73eec21aa9eff15", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 2943, "end": 5880, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "deb19d6d-b41d-4255-b028-ed87b42d7fb1", "3": "d3ff9c9a-4dad-47b5-a8ae-b512a549b7eb"}}, "__type__": "1"}, "d3ff9c9a-4dad-47b5-a8ae-b512a549b7eb": {"__data__": {"text": "working with accounts, assets, storing blocks in database (or in cache).\n\n#### Network\nThere are 3 types of network. \nPrivate net -- it\u2019s the private one which you can run locally. Testnet and Mainnet where much of the nodes across the world now running. \nNEO has a nice monitor where you can find particular node running in the blockchain network.\n[Neo Monitor](http://monitor.cityofzion.io/)\n\n## Workshop. Preparation\nIn this part we will setup the environment: run private network, connect neo-go node to it and transfer some initial GAS to our basic account\nin order to be able to pay for transaction deployment and invocation. Let's start.\n\n#### Requirements\nFor this workshop you will need Debian 10, Docker, docker-compose, go to be installed:\n- [docker](https://docs.docker.com/install/linux/docker-ce/debian/)\n- [go](https://golang.org/dl/)\n\n#### Versioning\nAs with many other Neo projects NeoGo is currently on its way to Neo 3, so there are two main branches there \u2014 [master](https://github.com/nspcc-dev/neo-go),\nwhere all Neo 3 development is happening right now and [master-2.x](https://github.com/nspcc-dev/neo-go/tree/master-2.x) for stable Neo 2 implementation. \nThis workshop contains basic tutorial notes for Neo 3 version. \nIf you want to continue with Neo 2, please, refer to [master-2.x branch](https://github.com/nspcc-dev/neo-go-sc-wrkshp/tree/master-2.x).\n\n#### Step 1\nIf you already have neo-go or go smart-contracts, please, update go modules in order to be up-to-date with the current interop API changes.\nIf not, download neo-go and build it (master branch):\n```\n$ git clone https://github.com/nspcc-dev/neo-go.git\n$ cd neo-go\n$ make build \n```\n\n#### Step 2\nThere are 2 ways of running local private network. \nOne way is using neo-local private network and other way is with neo-go private network.\n\n#### Running with neo-go private network\n```\n$ make env_image\n$ make env_up\n```\nResult: running privatenet:\n```\n=> Bootup environment\nCreating network \"neo_go_network\" with the default driver\nCreating volume \"docker_volume_chain\" with local driver\nCreating neo_go_node_four  ... done\nCreating neo_go_node_two   ... done\nCreating neo_go_node_one   ... done\nCreating neo_go_node_three ... done\n```\n\nIn case you need to shutdown environment you can use:\n```\n$ make env_down\n```\n\n#### Running with neo local private network\n```\ngit clone https://github.com/CityOfZion/neo-local.git\n$ cd neo-local\n$ git checkout -b 4nodes 0.12\n$ make start\n```\n\n#### Step 3\nStart neo-go node which will connect to previously started privatenet:\n```\n$ ./bin/neo-go node --privnet\n```\n\nResult:\n```\n2020-12-17T14:51:53.200+0300\tINFO\tno storage version found! creating genesis block\n2020-12-17T14:51:53.203+0300\tINFO\tstarting rpc-server\t{\"endpoint\": \":20331\"}\n2020-12-17T14:51:53.203+0300\tINFO\tservice is running\t{\"service\": \"Prometheus\", \"endpoint\": \":2112\"}\n2020-12-17T14:51:53.203+0300\tINFO\tservice hasn't started since it's disabled\t{\"service\": \"Pprof\"}\n2020-12-17T14:51:53.203+0300\tINFO\tnode started\t{\"blockHeight\": 0, \"headerHeight\": 0}\n\n", "doc_id": "d3ff9c9a-4dad-47b5-a8ae-b512a549b7eb", "embedding": null, "doc_hash": "a09f72b2bcee290e8fd9adb94de6e266d0243245c62fdee482e40f63ebeb7a48", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 5839, "end": 8887, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "37a54ca3-2bc8-4975-83f8-b2ea130debdf", "3": "6ccd1dc6-846a-46df-b0a3-6b52c957c543"}}, "__type__": "1"}, "6ccd1dc6-846a-46df-b0a3-6b52c957c543": {"__data__": {"text": "started\t{\"blockHeight\": 0, \"headerHeight\": 0}\n\n    _   ____________        __________\n   / | / / ____/ __ \\      / ____/ __ \\\n  /  |/ / __/ / / / /_____/ / __/ / / /\n / /|  / /___/ /_/ /_____/ /_/ / /_/ /\n/_/ |_/_____/\\____/      \\____/\\____/\n\n/NEO-GO:0.91.1-pre-657-gc13d6ecc/\n\n2020-12-17T14:51:53.204+0300\tINFO\tnew peer connected\t{\"addr\": \"127.0.0.1:20333\", \"peerCount\": 1}\n2020-12-17T14:51:53.206+0300\tINFO\tstarted protocol\t{\"addr\": \"127.0.0.1:20333\", \"userAgent\": \"/NEO-GO:0.91.1-pre-657-gc13d6ecc/\", \"startHeight\": 0, \"id\": 3172166887}\n2020-12-17T14:51:54.204+0300\tINFO\tblockchain persist completed\t{\"persistedBlocks\": 0, \"persistedKeys\": 71, \"headerHeight\": 0, \"blockHeight\": 0, \"took\": \"765.955\u00b5s\"}\n2020-12-17T14:51:56.204+0300\tINFO\tnew peer connected\t{\"addr\": \"127.0.0.1:20336\", \"peerCount\": 2}\n2020-12-17T14:51:56.204+0300\tINFO\tnew peer connected\t{\"addr\": \"127.0.0.1:20334\", \"peerCount\": 3}\n2020-12-17T14:51:56.205+0300\tINFO\tnew peer connected\t{\"addr\": \"127.0.0.1:20335\", \"peerCount\": 4}\n2020-12-17T14:51:56.205+0300\tINFO\tnew peer connected\t{\"addr\": \"127.0.0.1:20333\", \"peerCount\": 5}\n2020-12-17T14:51:56.205+0300\tINFO\tstarted protocol\t{\"addr\": \"127.0.0.1:20336\", \"userAgent\": \"/NEO-GO:0.91.1-pre-657-gc13d6ecc/\", \"startHeight\": 0, \"id\": 90708676}\n2020-12-17T14:51:56.206+0300\tWARN\tpeer disconnected\t{\"addr\": \"127.0.0.1:20333\", \"reason\": \"already connected\", \"peerCount\": 4}\n2020-12-17T14:51:56.206+0300\tINFO\tstarted protocol\t{\"addr\": \"127.0.0.1:20334\", \"userAgent\": \"/NEO-GO:0.91.1-pre-657-gc13d6ecc/\", \"startHeight\": 0, \"id\": 410946741}\n2020-12-17T14:51:56.207+0300\tINFO\tstarted protocol\t{\"addr\": \"127.0.0.1:20335\", \"userAgent\": \"/NEO-GO:0.91.1-pre-657-gc13d6ecc/\", \"startHeight\": 0, \"id\": 4085957952}\n2020-12-17T14:52:35.213+0300\tINFO\tblockchain persist completed\t{\"persistedBlocks\": 1, \"persistedKeys\": 19, \"headerHeight\": 1, \"blockHeight\": 1, \"took\": \"518.786\u00b5s\"}\n2020-12-17T14:52:50.217+0300\tINFO\tblockchain persist completed\t{\"persistedBlocks\": 1, \"persistedKeys\": 19, \"headerHeight\": 2, \"blockHeight\": 2, \"took\": \"384.966\u00b5s\"}\n2020-12-17T14:53:05.222+0300\tINFO\tblockchain persist completed\t{\"persistedBlocks\": 1, \"persistedKeys\": 19, \"headerHeight\": 3,", "doc_id": "6ccd1dc6-846a-46df-b0a3-6b52c957c543", "embedding": null, "doc_hash": "4fff2cc287d3353ead043c19844702a18f3f8ea07720a056f1cbe0aeb486cecd", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 8912, "end": 11080, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "d3ff9c9a-4dad-47b5-a8ae-b512a549b7eb", "3": "2784ea10-5d21-4083-bea2-0a9ab4df910b"}}, "__type__": "1"}, "2784ea10-5d21-4083-bea2-0a9ab4df910b": {"__data__": {"text": "1, \"persistedKeys\": 19, \"headerHeight\": 3, \"blockHeight\": 3, \"took\": \"496.654\u00b5s\"}\n...\n```\n\n#### Step 4\nTransfer some GAS from multisig account to our account.\n\n1. Create NEP17 transfer transaction:\n    ```\n        $ ./bin/neo-go wallet nep17 transfer -w .docker/wallets/wallet1.json --out my_tx.json -r http://localhost:20331 --from NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq --to NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB --token GAS --amount 29999999\n    ``` \n    Where\n    - `./bin/neo-go` runs neo-go\n    - `wallet nep17 transfer` - command with arguments in [neo-go](https://github.com/nspcc-dev/neo-go/blob/master/cli/wallet/nep17.go#L108)\n    - `-w .docker/wallets/wallet1.json` - path to the [wallet](https://github.com/nspcc-dev/neo-go/blob/master/.docker/wallets/wallet1.json) for the first node in the private network\n    - `--out my_tx.json` - output file for the signed transaction\n    - `-r http://localhost:20331` - RPC node endpoint\n    - `--from NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq` - multisig account to transfer GAS from\n    - `--to NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB` - our account from the [wallet](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/my_wallet.json)\n    - `--token GAS` - transferred token name, which is GAS\n    - `--amount 29999999` - amount of GAS to transfer\n    \n    Enter the password `one`:\n    ```\n    Password >\n    ```\n    The result is transaction signed by the first node `my_tx.json`.\n\n2. Sign the created transaction using the second node address:\n\n    ```\n    $ ./bin/neo-go wallet sign -w .docker/wallets/wallet2.json --in my_tx.json --out my_tx2.json --address NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq\n    ```\n    Where\n    - `-w .docker/wallets/wallet2.json` - path to the [wallet](https://github.com/nspcc-dev/neo-go/blob/master/.docker/wallets/wallet2.json) for the second node in private network\n    - `--in my_tx.json` - previously created transfer transaction\n    - `--out my_tx2.json` - output file for the signed transaction\n    - `--address NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq` - multisig account to sign the transaction\n    \n    Enter the password `two`:\n    ```\n    Enter password to unlock wallet and sign the transaction\n    Password >\n    ```\n    The result is transaction signed by both first and second nodes.\n\n3. Sign the transaction using the third node address and push it to the chain:\n    ```\n    $ ./bin/neo-go wallet sign -w ./.docker/wallets/wallet3.json --in my_tx2.json --out", "doc_id": "2784ea10-5d21-4083-bea2-0a9ab4df910b", "embedding": null, "doc_hash": "4873c7e55cc3d28615df456cfc4dfadbc1fd86f017dd8c65268c52f6d3c6573b", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 11087, "end": 13526, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "6ccd1dc6-846a-46df-b0a3-6b52c957c543", "3": "ce38b5be-72e8-4544-affa-4e67588e0403"}}, "__type__": "1"}, "ce38b5be-72e8-4544-affa-4e67588e0403": {"__data__": {"text": "--in my_tx2.json --out my_tx3.json --address NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq -r http://localhost:20331\n    ```\n    Enter the password `three`:\n    ```\n    Enter password to unlock wallet and sign the transaction\n    Password >\n    ```\n    The result is transaction signed by the first, second and third nodes and deployed to the chain.\n\n4. Check the balance:\n\n    Now you should have 29999999 GAS on the balance of `NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB` account.\n    To check the transfer was successfully submitted use `getnep17transfers` RPC call:\n    ```\n    curl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getnep17transfers\", \"params\": [\"NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\"] }' localhost:20331 | json_pp\n    ```\n    The result should look like the following:\n```\n{\n   \"result\" : {\n      \"received\" : [\n         {\n            \"blockindex\" : 4,\n            \"assethash\" : \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n            \"transferaddress\" : \"NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq\",\n            \"txhash\" : \"0x5c7ba46975bbcb3b7389373519cc9979d280208f8bf560f9661ae9942215404f\",\n            \"timestamp\" : 1621345458625,\n            \"transfernotifyindex\" : 0,\n            \"amount\" : \"2999999900000000\"\n         }\n      ],\n      \"sent\" : [],\n      \"address\" : \"NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\"\n   },\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1\n}\n```\n\n\n## Workshop. Part 1\nNow you have all things done to write your first smart contract, deploy and invoke it. \nLet\u2019s go!\n\n#### Step 1\nCreate basic \"Hello World\" smart contract (or use the one presented in this repo):\n```\npackage main\n\nimport (\n\t\"github.com/nspcc-dev/neo-go/pkg/interop/runtime\"\n)\n\nfunc Main() {\n\truntime.Log(\"Hello, world!\")\n}\n```\nAnd save it as `1-print.go`.\n\nCreate a configuration for it:\nhttps://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/1-print.yml\n\n#### Step 2\nCompile \"Hello World\" smart contract:\n```\n$ ./bin/neo-go contract compile -i 1-print.go -c 1-print.yml -m 1-print.manifest.json\n```\nWhere\n- `./bin/neo-go` runs neo-go\n- `contract compile` command with arguments in [neo-go](https://github.com/nspcc-dev/neo-go/blob/master/cli/smartcontract/smart_contract.go#L105)\n- `-i 1-print.go` path to", "doc_id": "ce38b5be-72e8-4544-affa-4e67588e0403", "embedding": null, "doc_hash": "f6ea55708f2566c7dd5c2b82f02bff1dd1c05433beb1278453fb7ed7220e5bb1", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 13545, "end": 15720, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "2784ea10-5d21-4083-bea2-0a9ab4df910b", "3": "85c34abd-06ec-4f42-b708-fdb38fa6408e"}}, "__type__": "1"}, "85c34abd-06ec-4f42-b708-fdb38fa6408e": {"__data__": {"text": "`-i 1-print.go` path to smart contract\n- `-c 1-print.yml` path to configuration file\n- `-m 1-print.manifest.json` path to manifest file, which is required for smart contract deployment\n\nResult:\n\nCompiled smart-contract: `1-pring.nef` and smart contract manifest `1-print.manifest.json`\n\nTo dump all the opcodes, you can use:\n```\n$ ./bin/neo-go contract inspect -i 1-print.nef\n```\n\n#### Step 3\nDeploy smart contract to the previously setup network:\n```\n$ ./bin/neo-go contract deploy -i 1-print.nef -manifest 1-print.manifest.json -r http://localhost:20331 -w my_wallet.json\n```\n\nWhere\n- `contract deploy` is a command for deployment\n- `-i 1-print.nef` path to smart contract\n- `-manifest 1-print.manifest.json` smart contract manifest file\n- `-r http://localhost:20331` node endpoint\n- `-w my_wallet.json` wallet to use to get the key for transaction signing (you can use one from the workshop repo)\n\nEnter password `qwerty` for the account:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\n\nResult:\n```\nContract: ecdd946811bcfe48feefb91c927234a6f18e341c\nb164f03a5dfc61273f7ebaf8943ff49a3ee1971babd25c7a817d46a2374f624a\n```\n\nAt this point your \u2018Hello World\u2019 contract is deployed and could be invoked. Let\u2019s do it as a final step.\n\n#### Step 4\nInvoke contract.\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json ecdd946811bcfe48feefb91c927234a6f18e341c main\n```\n\nWhere\n- `contract invokefunction` runs invoke with provided parameters\n- `-r http://localhost:20331` defines RPC endpoint used for function call\n- `-w my_wallet.json` is a wallet\n- `ecdd946811bcfe48feefb91c927234a6f18e341c` contract hash got as an output from the previous command (deployment in step 6)\n- `main` - method to be called\n\nEnter password `qwerty` for account:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\n\nResult:\n```\nSent invocation transaction bfb0398f22ae15628a1353c3b84afba6ff994e48cd376b840825314abf9bc291\n```\nIn the console where you were running step #5 you will get:\n```\n2020-12-17T15:29:48.790+0300\tINFO\truntime log\t{\"tx\": \"bfb0398f22ae15628a1353c3b84afba6ff994e48cd376b840825314abf9bc291\", \"script\": \"ecdd946811bcfe48feefb91c927234a6f18e341c\", \"msg\": \"Hello, world!\"}\n```\nWhich means that this contract was executed.\n\nThis is it. There are only 4 steps to make deployment and they look easy, aren\u2019t they?\nThank you!\n\n## Workshop. Part 2\nIn this part we'll look at RPC calls and try to write, deploy and invoke smart contract with storage. \nLet\u2019s go!\n\n### RPC calls\nLet's check what's going on under the hood. \nEach neo-go node provides an API interface for obtaining blockchain data from it.\nThe interface is provided via `JSON-RPC`, and the", "doc_id": "85c34abd-06ec-4f42-b708-fdb38fa6408e", "embedding": null, "doc_hash": "6c82b1e371737bd8093a173df64a0cbde76ccb81960e208850eae3f782eb3531", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 15721, "end": 18425, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "ce38b5be-72e8-4544-affa-4e67588e0403", "3": "541631ac-7870-418a-b78d-1c9bac407622"}}, "__type__": "1"}, "541631ac-7870-418a-b78d-1c9bac407622": {"__data__": {"text": "blockchain data from it.\nThe interface is provided via `JSON-RPC`, and the underlying protocol uses HTTP for communication.\n\nFull `NEO JSON-RPC 3.0 API` described [here](https://docs.neo.org/v3/docs/en-us/reference/rpc/latest-version/api.html).\n\nRPC-server of started in step #3 neo-go node is available on `localhost:20331`, so let's try to perform several RPC calls.\n\n#### GetRawTransaction\n[GetRawTransaction](https://docs.neo.org/v3/docs/en-us/reference/rpc/latest-version/api/getrawtransaction.html) returns \nthe corresponding transaction information, based on the specified hash value.\n\nRequest information about our deployment transaction:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getrawtransaction\", \"params\": [\"b164f03a5dfc61273f7ebaf8943ff49a3ee1971babd25c7a817d46a2374f624a\", 1] }' localhost:20331 | json_pp\n```\n\nWhere\n- `\"jsonrpc\": \"2.0\"` is protocol version\n- `\"id\": 1` is id of current request\n- `\"method\": \"getrawtransaction\"` is requested method\n- `\"params\": [\"b164f03a5dfc61273f7ebaf8943ff49a3ee1971babd25c7a817d46a2374f624a\", 1]` is an array of parameters, \n  where\n   - `b164f03a5dfc61273f7ebaf8943ff49a3ee1971babd25c7a817d46a2374f624a` is deployment transaction hash\n   - `1` is `verbose` parameter for detailed JSON string output\n- `json_pp` just makes the JSON output prettier\n\nResult:\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"result\" : {\n      \"confirmations\" : 11,\n      \"netfee\" : \"1546520\",\n      \"script\" : \"DQQBeyJuYW1lIjoiSGVsbG9Xb3JsZCBjb250cmFjdCIsImFiaSI6eyJtZXRob2RzIjpbeyJuYW1lIjoibWFpbiIsIm9mZnNldCI6MCwicGFyYW1ldGVycyI6W10sInJldHVybnR5cGUiOiJWb2lkIiwic2FmZSI6ZmFsc2V9XSwiZXZlbnRzIjpbXX0sImZlYXR1cmVzIjp7fSwiZ3JvdXBzIjpbXSwicGVybWlzc2lvbnMiOlt7ImNvbnRyYWN0IjoiKiIsIm1ldGhvZHMiOiIqIn1dLCJzdXBwb3J0ZWRzdGFuZGFyZHMiOltdLCJ0cnVzdHMiOltdLCJleHRyYSI6bnVsbH0MZE5FRjNuZW8tZ28tMC45NS4xLXByZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWDA1IZWxsbywgd29ybGQhQc/nR5YhQLbNunASwB8MBmRlcGxveQwU/aP6Q0bqUyolj8SX3a3bZDfJ/f9BYn1bUg==\",\n      \"sysfee\" : \"1001060650\",\n      \"blocktime\" : 1621345578680,\n      \"witnesses\" : [\n         {\n   ", "doc_id": "541631ac-7870-418a-b78d-1c9bac407622", "embedding": null, "doc_hash": "af35a8ed0fef9152768df5b1541924a762190b0f713e2d2b49cd7ab60ddc9b46", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 18382, "end": 20465, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "85c34abd-06ec-4f42-b708-fdb38fa6408e", "3": "45dc247d-58e2-433f-a268-2cf6ff529c0c"}}, "__type__": "1"}, "45dc247d-58e2-433f-a268-2cf6ff529c0c": {"__data__": {"text": ": [\n         {\n            \"invocation\" : \"DECFNf91SCJf0Xj5MqwQY9lEFMKYiwkm/wHxvx8B/1gT0TkfH2eL8sSHM4b99QklcRAUgNfniPYacMtMaOCfrTlv\",\n            \"verification\" : \"DCEDhEhWuuSSNuCc7nLsxQhI8nFlt+UfY3oP0/UkYmdH7G5BVuezJw==\"\n         }\n      ],\n      \"attributes\" : [],\n      \"vmstate\" : \"HALT\",\n      \"hash\" : \"0xb164f03a5dfc61273f7ebaf8943ff49a3ee1971babd25c7a817d46a2374f624a\",\n      \"nonce\" : 1906296755,\n      \"validuntilblock\" : 13,\n      \"blockhash\" : \"0x75e8dd246c40806b49502471d2d6244fcf8ae881216989119a3e32f0ddeb6959\",\n      \"sender\" : \"NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\",\n      \"signers\" : [\n         {\n            \"scopes\" : \"None\",\n            \"account\" : \"0x410b5658f92f9937ed7bdd4ba04c665d3bdbd8ae\"\n         }\n      ],\n      \"size\" : 563,\n      \"version\" : 0\n   },\n   \"id\" : 1\n}\n```\n\n#### GetApplicationLog\n[GetApplicationLog](https://docs.neo.org/v3/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html) returns the contract log based on the specified transaction id.\n\nRequest application log for invocation transaction from step #4:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"bfb0398f22ae15628a1353c3b84afba6ff994e48cd376b840825314abf9bc291\"] }' localhost:20331 | json_pp\n```\n\nWith a single parameter:\n- `bfb0398f22ae15628a1353c3b84afba6ff994e48cd376b840825314abf9bc291` - invocation transaction hash from step #7\n\nResult:\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"trigger\" : \"Application\",\n            \"notifications\" : [],\n            \"gasconsumed\" : \"2028330\",\n            \"stack\" : [\n               {\n                  \"type\" : \"Any\"\n               }\n            ],\n            \"vmstate\" : \"HALT\"\n         }\n      ],\n     ", "doc_id": "45dc247d-58e2-433f-a268-2cf6ff529c0c", "embedding": null, "doc_hash": "1e1ccf40e7421f737f9396aa9541ae4a01e04007fb214d52172d417abd997467", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 20525, "end": 22271, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "541631ac-7870-418a-b78d-1c9bac407622", "3": "039e73e4-3341-48f3-bc80-2476ed73a560"}}, "__type__": "1"}, "039e73e4-3341-48f3-bc80-2476ed73a560": {"__data__": {"text": "      }\n      ],\n      \"txid\" : \"0xbfb0398f22ae15628a1353c3b84afba6ff994e48cd376b840825314abf9bc291\"\n   },\n   \"id\" : 1\n}\n```\n\n#### Other Useful RPC calls\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 5, \"method\": \"getversion\", \"params\": [] }' localhost:20331\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 5, \"method\": \"getblockcount\", \"params\": [] }' localhost:20331\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 5, \"method\": \"getconnectioncount\", \"params\": [] }' localhost:20331\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 5, \"method\": \"getcontractstate\", \"params\": [\"0xecdd946811bcfe48feefb91c927234a6f18e341c\"] }' localhost:20331\n```\n\nList of supported by neo-go node RPC commands you can find [here](https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md#supported-methods).\n\n### Storage smart contract\n\nLet's take a look at the another smart contract example: [2-storage.go](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/2-storage.go).\nThis contract is quite simple and, as the previous one, doesn't take any arguments.\nOn the other hand, it is able to count the number of its own invocations by storing an integer value and increment it after each invocation.\nWe are interested in this contract as far as it's able to *store* values, i.e. it has a *storage* which can be shared within all contract invocations.\nWe have to pay some GAS for storage usage, the amount depends on the storage operation (e.g. put) and data size.\n\n\nThis contract also has a special internal `_deploy` method which is executed when the contract is deployed or updated.\nIt should return no value and accept single bool argument which will be true on contract update.\nOur `_deploy` method is aimed to initialise the storage value with `0` when the contract will be deployed.\n\nNow, when we learned about the storage, let's try to deploy and invoke our contract!\n\n#### Step #1\nCompile smart contract [2-storage.go](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/2-storage.go):\n\n```\n$ ./bin/neo-go contract compile -i 2-storage.go -c 2-storage.yml -m 2-storage.manifest.json\n```\n\nResult:\n\nCompiled smart-contract: `2-storage.nef` and smart contract manifest `2-storage.manifest.json`\n\n#### Step #2\nDeploy compiled smart contract:\n```\n$ ./bin/neo-go contract deploy -i 2-storage.nef -manifest 2-storage.manifest.json -r http://localhost:20331 -w my_wallet.json\n```\n... enter the password `qwerty`:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\n\nResult:\n```\nContract: 1b2fb1dc5b32934abae1ad1706b0e43513c44e66\n1ea2a1ed6c2f651436e9fcf41023119f934cd0a4f38cac16ac9042c124345f0c\n```   \n\nWhich means that our contract was deployed and now we can invoke it.\n\nLet's check that the storage value was initialised with `0`. Use", "doc_id": "039e73e4-3341-48f3-bc80-2476ed73a560", "embedding": null, "doc_hash": "879b9bc09ea694f390ecda9c80891c466b90d58b251e8ab4d059e0ecb3490ee5", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 22272, "end": 24975, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "45dc247d-58e2-433f-a268-2cf6ff529c0c", "3": "e25df95d-dfa0-41e1-b333-d064812d707d"}}, "__type__": "1"}, "e25df95d-dfa0-41e1-b333-d064812d707d": {"__data__": {"text": "invoke it.\n\nLet's check that the storage value was initialised with `0`. Use `getapplicaionlog` RPC-call for the deployment transaction:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"1ea2a1ed6c2f651436e9fcf41023119f934cd0a4f38cac16ac9042c124345f0c\"] }' localhost:20331 | json_pp\n```\n\nThe JSON result is:\n```\n{\n   \"result\" : {\n      \"txid\" : \"0x1ea2a1ed6c2f651436e9fcf41023119f934cd0a4f38cac16ac9042c124345f0c\",\n      \"executions\" : [\n         {\n            \"gasconsumed\" : \"1006244000\",\n            \"notifications\" : [\n               {\n                  \"eventname\" : \"info\",\n                  \"state\" : {\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"U3RvcmFnZSBrZXkgbm90IHlldCBzZXQuIFNldHRpbmcgdG8gMA==\"\n                        }\n                     ],\n                     \"type\" : \"Array\"\n                  },\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\"\n               },\n               {\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"U3RvcmFnZSBrZXkgaXMgaW5pdGlhbGlzZWQ=\"\n                        }\n                     ]\n                  },\n                  \"eventname\" : \"info\",\n                  \"contract\" :", "doc_id": "e25df95d-dfa0-41e1-b333-d064812d707d", "embedding": null, "doc_hash": "a4d3942860d8b07764f759cd08ccab2c1b7ad27638d88f3c31094d29f72bc8f5", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 24916, "end": 26376, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "039e73e4-3341-48f3-bc80-2476ed73a560", "3": "786c2e3f-682d-4874-83f2-084776e1f73e"}}, "__type__": "1"}, "786c2e3f-682d-4874-83f2-084776e1f73e": {"__data__": {"text": "                \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\"\n               },\n               {\n                  \"contract\" : \"0xfffdc93764dbaddd97c48f252a53ea4643faa3fd\",\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"Zk7EEzXksAYXreG6SpMyW9yxLxs=\"\n                        }\n                     ]\n                  },\n                  \"eventname\" : \"Deploy\"\n               }\n            ],\n            \"vmstate\" : \"HALT\",\n            \"stack\" : [\n            ... skipped serialized contract representation ...\n            ],\n            \"trigger\" : \"Application\"\n         }\n      ]\n   },\n   \"id\" : 1,\n   \"jsonrpc\" : \"2.0\"\n}\n```\n\nPay attention to the `notifications` JSON field: it contains two `info` notifications with base64-encoded messages.\nTo decode them just use `echo string | base64 -d` CLI command, e.g.:\n```\n$ echo U3RvcmFnZSBrZXkgbm90IHlldCBzZXQuIFNldHRpbmcgdG8gMA== | base64 -d\n```\nwhich results in `Storage key not yet set. Setting to 0` and\n```\n$ echo U3RvcmFnZSBrZXkgaXMgaW5pdGlhbGlzZWQ= | base64 -d\n```\nwhich is `Storage key is initialised`.\n\n#### Step #3\nLet's invoke our contract. As far as we have never invoked this contract, it should increment value from the storage (which is `0`) and put the new `1` value back into the storage.\nLet's check:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 1b2fb1dc5b32934abae1ad1706b0e43513c44e66 main\n```\n... enter the password `qwerty`:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\nResult:\n```\nSent invocation transaction ecc5aecf2334b06e0b5d76494bfdf3ddbaca675858f254aa4e4633756b86a40d\n```\nTo check the counter value, call `getapplicaionlog` RPC-call for the invocation", "doc_id": "786c2e3f-682d-4874-83f2-084776e1f73e", "embedding": null, "doc_hash": "703c031e81df45dff3585f9fc03bd44d9f05af5a5ef5e5c68e9c57928d43cb11", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 26431, "end": 28307, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "e25df95d-dfa0-41e1-b333-d064812d707d", "3": "47f32aad-6275-43c1-9286-163f5a5e464d"}}, "__type__": "1"}, "47f32aad-6275-43c1-9286-163f5a5e464d": {"__data__": {"text": "counter value, call `getapplicaionlog` RPC-call for the invocation transaction:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"ecc5aecf2334b06e0b5d76494bfdf3ddbaca675858f254aa4e4633756b86a40d\"] }' localhost:20331 | json_pp\n```\nThe JSON result is:\n```\n{\n   \"result\" : {\n      \"txid\" : \"0xecc5aecf2334b06e0b5d76494bfdf3ddbaca675858f254aa4e4633756b86a40d\",\n      \"executions\" : [\n         {\n            \"notifications\" : [\n               {\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"VmFsdWUgcmVhZCBmcm9tIHN0b3JhZ2U=\"\n                        }\n                     ]\n                  },\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\",\n                  \"eventname\" : \"info\"\n               },\n               {\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"U3RvcmFnZSBrZXkgYWxyZWFkeSBzZXQuIEluY3JlbWVudGluZyBieSAx\"\n                        }\n                     ]\n                  },\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\",\n                  \"eventname\" : \"info\"\n               },\n       ", "doc_id": "47f32aad-6275-43c1-9286-163f5a5e464d", "embedding": null, "doc_hash": "0143a283f1b4c0bd7bd91cfa2c7066408b20a7324928793b3728d50bcdc07ed1", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 28260, "end": 29691, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "786c2e3f-682d-4874-83f2-084776e1f73e", "3": "6fec2947-5116-4b49-8889-4c5f504d7bdd"}}, "__type__": "1"}, "6fec2947-5116-4b49-8889-4c5f504d7bdd": {"__data__": {"text": "           },\n               {\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\",\n                  \"eventname\" : \"info\",\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"TmV3IHZhbHVlIHdyaXR0ZW4gaW50byBzdG9yYWdl\"\n                        }\n                     ]\n                  }\n               }\n            ],\n            \"stack\" : [\n               {\n                  \"type\" : \"Integer\",\n                  \"value\" : \"1\"\n               }\n            ],\n            \"gasconsumed\" : \"7233580\",\n            \"vmstate\" : \"HALT\",\n            \"trigger\" : \"Application\"\n         }\n      ]\n   },\n   \"id\" : 1,\n   \"jsonrpc\" : \"2.0\"\n}\n```\nPay attention to `notifications` field. It contains messages, which where passed to `runtime.Notify` method.\nThis one contains base64 byte arrays which can be decoded into 3 messages. \nTo decode them just use `echo string | base64 -d` CLI command, e.g.:\n```\n$ echo VmFsdWUgcmVhZCBmcm9tIHN0b3JhZ2U= | base64 -d\n```\nwhich results in:\n```\nValue read from storage\n```\nSo, these 3 messages are:\n  - `Value read from storage` which was called after we've got the counter value from storage\n  - `Storage key already set. Incrementing by 1` which was called when we realised that counter value is 0\n  - `New value written into storage` which was called after the counter value was put in the storage.\n  \nThe final part is `stack` field. This field contains all returned by the contract values, so here you can see integer value `1`,\nwhich is the counter value denoted to the number of contract invocations.\n\n#### Step #4\nTo ensure that all works as expected, let's invoke the contract one more time and check, whether the counter will be incremented: \n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 1b2fb1dc5b32934abae1ad1706b0e43513c44e66 main\n```\n... enter", "doc_id": "6fec2947-5116-4b49-8889-4c5f504d7bdd", "embedding": null, "doc_hash": "375f4fa661c7bde5ed36fd618c777f4e87ca6ac5e1a453708a43ff6bc3666602", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 29748, "end": 31762, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "47f32aad-6275-43c1-9286-163f5a5e464d", "3": "d20a4846-3572-4bde-82ec-4a6f374dcdb9"}}, "__type__": "1"}, "d20a4846-3572-4bde-82ec-4a6f374dcdb9": {"__data__": {"text": "main\n```\n... enter the password `qwerty`:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\nResult:\n```\nSent invocation transaction 593a7c887d9d216adb46b322be05b3a0ba4d6be8450f478e3d71c6304189328c\n```\nTo check the counter value, call `getapplicaionlog` RPC-call for the invocation transaction:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"593a7c887d9d216adb46b322be05b3a0ba4d6be8450f478e3d71c6304189328c\"] }' localhost:20331 | json_pp\n```\nThe JSON result is:\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1,\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"vmstate\" : \"HALT\",\n            \"stack\" : [\n               {\n                  \"value\" : \"2\",\n                  \"type\" : \"Integer\"\n               }\n            ],\n            \"notifications\" : [\n               {\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\",\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"VmFsdWUgcmVhZCBmcm9tIHN0b3JhZ2U=\"\n                        }\n                     ]\n                  },\n                  \"eventname\" : \"info\"\n               },\n               {\n                  \"eventname\" : \"info\",\n                  \"state\" : {\n                     \"value\" : [\n                        {\n                           \"value\" :", "doc_id": "d20a4846-3572-4bde-82ec-4a6f374dcdb9", "embedding": null, "doc_hash": "425df3ec760e9fc15d08ed7a4bf3dcbf0ca31e691ce1c94033ef718eee1e7f91", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 31749, "end": 33217, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "6fec2947-5116-4b49-8889-4c5f504d7bdd", "3": "8a2ef4f0-03d0-4f62-94a7-06a310555226"}}, "__type__": "1"}, "8a2ef4f0-03d0-4f62-94a7-06a310555226": {"__data__": {"text": "                \"value\" : \"U3RvcmFnZSBrZXkgYWxyZWFkeSBzZXQuIEluY3JlbWVudGluZyBieSAx\",\n                           \"type\" : \"ByteString\"\n                        }\n                     ],\n                     \"type\" : \"Array\"\n                  },\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\"\n               },\n               {\n                  \"state\" : {\n                     \"value\" : [\n                        {\n                           \"value\" : \"TmV3IHZhbHVlIHdyaXR0ZW4gaW50byBzdG9yYWdl\",\n                           \"type\" : \"ByteString\"\n                        }\n                     ],\n                     \"type\" : \"Array\"\n                  },\n                  \"contract\" : \"0x1b2fb1dc5b32934abae1ad1706b0e43513c44e66\",\n                  \"eventname\" : \"info\"\n               }\n            ],\n            \"gasconsumed\" : \"7233580\",\n            \"trigger\" : \"Application\"\n         }\n      ],\n      \"txid\" : \"0x593a7c887d9d216adb46b322be05b3a0ba4d6be8450f478e3d71c6304189328c\"\n   }\n}\n```\n\nThe `stack` field contains now `2` integer value, so the counter was incremented as we expected.\n\n## Workshop. Part 3\nIn this part we'll know about NEP5 token standard and try to write, deploy and invoke more complicated smart contract. \nLet\u2019s go!\n\n### NEP17\n[NEP17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) is a token standard for the Neo blockchain that provides systems with a generalized interaction mechanism for tokenized smart contracts.\nThe example with implementation of all required by the standard methods you can find in [nep17.go](https://github.com/nspcc-dev/neo-go/blob/master/examples/token/nep17/nep17.go)\n \nLet's take a view on the example of smart contract with", "doc_id": "8a2ef4f0-03d0-4f62-94a7-06a310555226", "embedding": null, "doc_hash": "719ffb5224ab26bf13b02b206380cd0daa7410fcc95356486e53937be72079c2", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 33227, "end": 34961, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "d20a4846-3572-4bde-82ec-4a6f374dcdb9", "3": "e9f2113f-d983-479c-88fd-4d86c5ffb4c4"}}, "__type__": "1"}, "e9f2113f-d983-479c-88fd-4d86c5ffb4c4": {"__data__": {"text": "\nLet's take a view on the example of smart contract with NEP17: [token.go](https://github.com/nspcc-dev/neo-go/blob/master/examples/token/token.go)\n \nThis smart contract initialises nep17 token interface and takes operation string as a parameter, which is one of:\n- `symbol` returns ticker symbol of the token\n- `decimals` returns amount of decimals for the token\n- `totalSupply` returns total token * multiplier\n- `balanceOf` returns the token balance of a specific address and requires additional argument:\n  - `account` which is requested address\n- `transfer` transfers token from one user to another and requires additional arguments:\n  - `from` is account which you'd like to transfer tokens from\n  - `to` is account which you'd like to transfer tokens to\n  - `amount` is the amount of token to transfer\n  - `data` is any additional parameter which shall be passed to `onNEP17Payment` method (if the receiver is a contract)\nLet's perform several operations with our contract.\n\n#### Step #1\nTo compile [token.go](https://github.com/nspcc-dev/neo-go/blob/master/examples/token/token.go)\nyou can use [configuration](https://github.com/nspcc-dev/neo-go/blob/master/examples/token/token.yml).\n\nCompile smart contract:\n```\n$ ./bin/neo-go contract compile -i examples/token/token.go -c examples/token/token.yml -m examples/token/token.manifest.json\n```\n\nDeploy smart contract:\n```\n$ ./bin/neo-go contract deploy -i examples/token/token.nef -manifest examples/token/token.manifest.json -r http://localhost:20331 -w my_wallet.json\n```\n... enter the password `qwerty`:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\n\nResult:\n```\nContract: 13175d9c27074057cf4d8c50183ce9d4dceaf95c\ne0d85465a2fcfbb5280f068dc22979259d59d0f4d9a871a6de96fc0b92eaa3a5\n\n```   \n\nWhich means that our contract was deployed and now we can invoke it.\n\n#### Step #2\nLet's invoke the contract to perform different operations.\n\nTo start with, query `Symbol` of the created nep17 token:\n\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c symbol\n```                                                                   \nWhere\n- `13175d9c27074057cf4d8c50183ce9d4dceaf95c` is our contract hash from step #1\n- `symbol` is operation string which was described earlier and returns token symbol\n\n... and don't forget the password of your account `qwerty`.\n\nResult:\n```\nSent invocation transaction bd85005d02c383c400595fcefb237a9f0a0919d16f7e0dbe72336c592f1951b6\n```                                                         ", "doc_id": "e9f2113f-d983-479c-88fd-4d86c5ffb4c4", "embedding": null, "doc_hash": "588095edc7fc0d951284ca4b8103f42da7beab2f93de417ce9b2017f0eee28cf", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 34924, "end": 37498, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "8a2ef4f0-03d0-4f62-94a7-06a310555226", "3": "5b088c3b-3e41-4906-a120-6d4b80d09bef"}}, "__type__": "1"}, "5b088c3b-3e41-4906-a120-6d4b80d09bef": {"__data__": {"text": "                                                   \nNow, let's take a detailed look at this invocation transaction with `getapplicationlog` RPC call:\n\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"bd85005d02c383c400595fcefb237a9f0a0919d16f7e0dbe72336c592f1951b6\"] }' localhost:20331 | json_pp\n```               \n\nResult:\n```\n{\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"notifications\" : [],\n            \"vmstate\" : \"HALT\",\n            \"trigger\" : \"Application\",\n            \"stack\" : [\n               {\n                  \"value\" : \"QU5U\",\n                  \"type\" : \"ByteString\"\n               }\n            ],\n            \"gasconsumed\" : \"4294290\"\n         }\n      ],\n      \"txid\" : \"0xbd85005d02c383c400595fcefb237a9f0a0919d16f7e0dbe72336c592f1951b6\"\n   },\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1\n}\n```\n\nAt least, you can see that `stack` field of JSON result is not empty: it contains base64 byte array with the symbol of our token.\n\nFollowing commands able you to get some additional information about token:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c decimals\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c totalSupply\n```\n\n#### Step #3\n\nNow it's time for more interesting things. First of all, let's check the balance of nep17 token on our account by using `balanceOf`:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c balanceOf NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\n```                             \n... with `qwerty` password. The result is:\n```\nSent invocation transaction 84e819e08a05a0709aa5cfc02e613b7aaa4650f324cd37eda4e2941605354498\n```\nAnd take a closer look at the transaction's details with `getapplicationlog` RPC-call:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\":", "doc_id": "5b088c3b-3e41-4906-a120-6d4b80d09bef", "embedding": null, "doc_hash": "3abaac72004c56022f63e13d2896dfc94f46aa57492abaa22d455b4c459dea88", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 37545, "end": 39555, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "e9f2113f-d983-479c-88fd-4d86c5ffb4c4", "3": "7030325d-0007-47f6-982e-2714ae0d7bea"}}, "__type__": "1"}, "7030325d-0007-47f6-982e-2714ae0d7bea": {"__data__": {"text": "\"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"84e819e08a05a0709aa5cfc02e613b7aaa4650f324cd37eda4e2941605354498\"] }' localhost:20331 | json_pp\n```\nResult:\n```\n{\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"stack\" : [\n               {\n                  \"value\" : \"0\",\n                  \"type\" : \"Integer\"\n               }\n            ],\n            \"notifications\" : [],\n            \"trigger\" : \"Application\",\n            \"vmstate\" : \"HALT\",\n            \"gasconsumed\" : \"5311140\"\n         }\n      ],\n      \"txid\" : \"0x84e819e08a05a0709aa5cfc02e613b7aaa4650f324cd37eda4e2941605354498\"\n   },\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1\n}\n``` \nAs far as `stack` field contains integer value `0`, we have no token on the balance. But don't worry about that. Just follow the next step.\n\n#### Step #4\n\nBefore we are able to start using our token (e.g. transfer it to someone else), we have to *mint* it.\nIn other words, we should transfer all available amount of token (total supply) to someone's account.\nThere's a special function for this purpose in our contract - `Mint` function. However, this function\nuses `CheckWitness` runtime syscall to check whether the caller of the contract is the owner and authorized\nto manage initial supply of tokens. That's the purpose of transaction's *signers*: checking given hash\nagainst the values provided in the list of signers. To pass this check we should add our account to\ntransaction's signers list with CalledByEntry scope. So let's mint token to our address:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c mint NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB -- NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB:CalledByEntry\n```\nWhere:\n- `--` is a special delimiter of transaction's cosigners list\n- `NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB` is the signer itself (which is our account)\n\n... with `qwerty` pass. The result:\n``` \nSent invocation transaction 17ceda88c215876c45e2e824cd62639c113f2be235278649024124d8f0213da3\n```\n`getapplicationlog` RPC-call for this transaction tells us the following:\n```\n{\n   \"result\" : {\n      \"txid\" : \"0x17ceda88c215876c45e2e824cd62639c113f2be235278649024124d8f0213da3\",\n      \"executions\" : [\n         {\n            \"trigger\" : \"Application\",\n            \"gasconsumed\"", "doc_id": "7030325d-0007-47f6-982e-2714ae0d7bea", "embedding": null, "doc_hash": "bf0f2f5d449ea746d1ef9967db665f8e641f1b55c814d6df2d73ad01f86a952e", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 39511, "end": 41819, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "5b088c3b-3e41-4906-a120-6d4b80d09bef", "3": "ae0377f0-a4a7-4cd6-96ac-9c975f9d8ea9"}}, "__type__": "1"}, "ae0377f0-a4a7-4cd6-96ac-9c975f9d8ea9": {"__data__": {"text": "           \"gasconsumed\" : \"16522950\",\n            \"vmstate\" : \"HALT\",\n            \"notifications\" : [\n               {\n                  \"contract\" : \"0x13175d9c27074057cf4d8c50183ce9d4dceaf95c\",\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"type\" : \"Any\"\n                        },\n                        {\n                           \"value\" : \"rtjbO11mTKBL3XvtN5kv+VhWC0E=\",\n                           \"type\" : \"ByteString\"\n                        },\n                        {\n                           \"value\" : \"1100000000000000\",\n                           \"type\" : \"Integer\"\n                        }\n                     ]\n                  },\n                  \"eventname\" : \"Transfer\"\n               }\n            ],\n            \"stack\" : [\n               {\n                  \"value\" : true,\n                  \"type\" : \"Boolean\"\n               }\n            ]\n         }\n      ]\n   },\n   \"id\" : 1,\n   \"jsonrpc\" : \"2.0\"\n}\n```\nHere we have `true` at the `stack` field, which means that token was successfully minted.\nLet's just ensure that by querying `balanceOf` one more time:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c balanceOf NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\n```\n... with `qwerty` pass. The result:\n``` \nSent invocation transaction", "doc_id": "ae0377f0-a4a7-4cd6-96ac-9c975f9d8ea9", "embedding": null, "doc_hash": "01d6943ff6f5ed0a14df5529fa3d3ff616f7a69b8a324f033b295371aaeba0ed", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 41852, "end": 43296, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "7030325d-0007-47f6-982e-2714ae0d7bea", "3": "fd1ec7a2-a022-4333-ae4c-b2cad20fad1f"}}, "__type__": "1"}, "fd1ec7a2-a022-4333-ae4c-b2cad20fad1f": {"__data__": {"text": "with `qwerty` pass. The result:\n``` \nSent invocation transaction 95fed6e224071b09e885994aa869bee9b3dd815e89cc11b871b4432a35d04b0a\n```\n... with the following `getapplicationlog` JSON message:\n```\n{\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"stack\" : [\n               {\n                  \"value\" : \"1100000000000000\",\n                  \"type\" : \"Integer\"\n               }\n            ],\n            \"trigger\" : \"Application\",\n            \"vmstate\" : \"HALT\",\n            \"gasconsumed\" : \"5557020\",\n            \"notifications\" : []\n         }\n      ],\n      \"txid\" : \"0x95fed6e224071b09e885994aa869bee9b3dd815e89cc11b871b4432a35d04b0a\"\n   },\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1\n}\n```\nNow we can see integer value at the `stack` field, so `1100000000000000` is the nep17 token balance of our account.\n\nNote, that token can be minted only once.\n\n#### Step #5\n\nAfter we are done with minting, it's possible to transfer token to someone else.\nLet's transfer 5 tokens from our account to `NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm` with `transfer` call:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c transfer NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm 500000000 null -- NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB:CalledByEntry\n```\n... with password `qwerty` and following result:\n``` \nSent invocation transaction 5b8c23f4816b67e67e869c4305942fb81041671e70bed6a3888e7493883db8bd\n```\nOur favourite `getapplicationlog` RPC-call tells us:\n```\n{\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"vmstate\" : \"HALT\",\n            \"notifications\" : [\n               {\n                  \"contract\" : \"0x13175d9c27074057cf4d8c50183ce9d4dceaf95c\",\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n      ", "doc_id": "fd1ec7a2-a022-4333-ae4c-b2cad20fad1f", "embedding": null, "doc_hash": "f88e93df4ab0740b20a0a7509537412e8c96ba88f26d80f9b8fa4ebbcdc76f1f", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 43253, "end": 45139, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "ae0377f0-a4a7-4cd6-96ac-9c975f9d8ea9", "3": "3c195813-9629-4e88-9f70-a2f03faaf074"}}, "__type__": "1"}, "3c195813-9629-4e88-9f70-a2f03faaf074": {"__data__": {"text": "            {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"rtjbO11mTKBL3XvtN5kv+VhWC0E=\"\n                        },\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"50l6vFaauRKm8hPVkr3Aw2CeHQs=\"\n                        },\n                        {\n                           \"type\" : \"Integer\",\n                           \"value\" : \"500000000\"\n                        }\n                     ]\n                  },\n                  \"eventname\" : \"Transfer\"\n               }\n            ],\n            \"trigger\" : \"Application\",\n            \"gasconsumed\" : \"14760950\",\n            \"stack\" : [\n               {\n                  \"type\" : \"Boolean\",\n                  \"value\" : true\n               }\n            ]\n         }\n      ],\n      \"txid\" : \"0x5b8c23f4816b67e67e869c4305942fb81041671e70bed6a3888e7493883db8bd\"\n   },\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1\n}\n```\nNote, that `stack` field contains `true`, which means that token was successfully transferred.\nLet's now check the balance of `NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm` account to ensure that the amount of token on that account = 5:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 13175d9c27074057cf4d8c50183ce9d4dceaf95c balanceOf NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm\n```\nThe `getapplicationlog` RPC-call for this transaction tells us the following:\n```\n{\n   \"id\" : 1,\n   \"jsonrpc\" : \"2.0\",\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"trigger\" :", "doc_id": "3c195813-9629-4e88-9f70-a2f03faaf074", "embedding": null, "doc_hash": "9b8b924a19670a5489a2eb08c38d22ce885a3ba857b1fd5e98230d70647c521a", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 45195, "end": 46760, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "fd1ec7a2-a022-4333-ae4c-b2cad20fad1f", "3": "44b0946c-f990-4418-b441-61975add9ec5"}}, "__type__": "1"}, "44b0946c-f990-4418-b441-61975add9ec5": {"__data__": {"text": "   {\n            \"trigger\" : \"Application\",\n            \"stack\" : [\n               {\n                  \"value\" : \"500000000\",\n                  \"type\" : \"Integer\"\n               }\n            ],\n            \"gasconsumed\" : \"5557020\",\n            \"notifications\" : [],\n            \"vmstate\" : \"HALT\"\n         }\n      ],\n      \"txid\" : \"0x022ade3087cb32fed650b1ab6a799ac9861539308a27f54ba6f38ffde26bd424\"\n   }\n}\n```\nHere we are! There are exactly 5 tokens at the `stack` field. You can also ensure that these 5 tokens were debited from `NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB` account by using `balanceOf` method.\n\n## Workshop. Part 4\nIn this part we'll summarise our knowledge about smart contracts by investigating [4-domain](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/4-domain.go) smart contract. This contract \ncontains code for domain registration, transferring, deletion and getting information about registered domains.\n\nLet\u2019s go!\n\n#### Step #1\nLet's take a glance at our [contract](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/4-domain.go) and inspect it. The contract takes an action string as the first parameter, which is one of the following:\n- `register` checks, whether domain with the specified name already exists. If not, it also adds the pair `[domainName, owner]` to the storage. It requires additional arguments:\n   - `domainName` which is the new domain name.\n   - `owner` - the 34-digit account address from our [wallet](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/my_wallet.json), which will be used for contract invocation.\n- `query` returns the specified domain owner address (or false, if no such domain was registered). It requires the following argument:\n   - `domainName` which is requested domain name.\n- `transfer` transfers domain with the specified name to the other address (of course, in case if you're the actual owner of the domain requested). It requires additional arguments:\n   - `domainName` which is the name of domain you'd like to transfer.\n   - `toAddress` - the account address you'd like to transfer the specified domain to.\n- `delete` deletes the specified domain from the storage. The arguments:\n   - `domainName` which is the name of the domain you'd like to delete.\n \n In the next steps we'll compile and deploy smart contract. \n After that we'll try to register new domain, transfer it to another account and query information about it.\n\n#### Step #2\n\nCompile smart contract [4-domain.go](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/4-domain.go) with [configuration](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/4-domain.yml)\n```\n$ ./bin/neo-go contract compile -i 4-domain.go -c 4-domain.yml -m 4-domain.manifest.json\n```\n\n... and", "doc_id": "44b0946c-f990-4418-b441-61975add9ec5", "embedding": null, "doc_hash": "0eff3ce80e688e8571b0a44dea3a1e7d69f0710bf2f579ae4f01342b4ecd43e3", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 46751, "end": 49497, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "3c195813-9629-4e88-9f70-a2f03faaf074", "3": "cf72d3f6-55f2-4b27-8700-a1678521917d"}}, "__type__": "1"}, "cf72d3f6-55f2-4b27-8700-a1678521917d": {"__data__": {"text": "-m 4-domain.manifest.json\n```\n\n... and deploy it:\n```\n$ ./bin/neo-go contract deploy -i 4-domain.nef --manifest 4-domain.manifest.json -r http://localhost:20331 -w my_wallet.json\n```\nJust a note: our contract uses storage and, as the previous one, needs the flag `hasstorage` to be set to `true` value.\nThat can be done in [configuration](https://github.com/nspcc-dev/neo-go-sc-wrkshp/blob/master/4-domain.yml) file.\n\n... enter the password `qwerty`:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\n\nResult:\n```\nContract: 5e6d360e472798ee10c676022761bc5a2c3828f5\na84ea858045b498b73319d8acdf0f95c9bdba4227b0999006176c0136306b80f\n```   \nYou know, what it means :)\n\n#### Step #3\n\nInvoke the contract to register domain with name `my_first_domain`:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 5e6d360e472798ee10c676022761bc5a2c3828f5 register my_first_domain NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB -- NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB:CalledByEntry\n```\n... the strongest password in the world, guess: `qwerty`\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\nResult:\n```\nSent invocation transaction a7f868e07898592de9846549b4395190dfe7efbbdd521178c2b72d96c25dd831\n```\nAlso you can see the log message in the console, where you run neo-go node:\n```\n2020-12-17T17:31:43.480+0300\tINFO\truntime log\t{\"tx\": \"a7f868e07898592de9846549b4395190dfe7efbbdd521178c2b72d96c25dd831\", \"script\": \"5e6d360e472798ee10c676022761bc5a2c3828f5\", \"msg\": \"RegisterDomain: my_first_domain\"}\n```\nWell, that's ok. Let's check now, whether our domain was registered with `getapplicationlog` RPC-call:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"a7f868e07898592de9846549b4395190dfe7efbbdd521178c2b72d96c25dd831\"] }' localhost:20331 | json_pp\n```\nThe result is:\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"result\" : {\n      \"txid\" : \"0xa7f868e07898592de9846549b4395190dfe7efbbdd521178c2b72d96c25dd831\",\n      \"executions\" : [\n         {\n            \"stack\" : [\n               {\n                  \"type\" : \"Boolean\",\n                  \"value\" : true\n             ", "doc_id": "cf72d3f6-55f2-4b27-8700-a1678521917d", "embedding": null, "doc_hash": "f6623ab00ba9f9bd8ee63a8302d1ac1221afd1434ee86d4847db0c3c44226c47", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 49474, "end": 51609, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "44b0946c-f990-4418-b441-61975add9ec5", "3": "54a6fcf0-0c2c-4b8d-95cf-a64373d9ce11"}}, "__type__": "1"}, "54a6fcf0-0c2c-4b8d-95cf-a64373d9ce11": {"__data__": {"text": " \"value\" : true\n               }\n            ],\n            \"gasconsumed\" : \"9143210\",\n            \"trigger\" : \"Application\",\n            \"notifications\" : [\n               {\n                  \"contract\" : \"0x5e6d360e472798ee10c676022761bc5a2c3828f5\",\n                  \"eventname\" : \"registered\",\n                  \"state\" : {\n                     \"type\" : \"Array\",\n                     \"value\" : [\n                        {\n                           \"value\" : \"rtjbO11mTKBL3XvtN5kv+VhWC0E=\",\n                           \"type\" : \"ByteString\"\n                        },\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"bXlfZmlyc3RfZG9tYWlu\"\n                        }\n                     ]\n                  }\n               }\n            ],\n            \"vmstate\" : \"HALT\"\n         }\n      ]\n   },\n   \"id\" : 1\n}\n```\nEspecially, we're interested in two fields of the json:\n\nFirst one is `notifications` field, which contains one notification with `registered` name:\n- `bXlfZmlyc3RfZG9tYWlu` byte string in base64 representation, which can be decoded to `my_first_domain` - our domain's name\n- `ecv/0NH0e0cStm0wWBgjCxMyaok=` byte array, which can be decoded to the account address `NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB`.\n\nThe second field is `stack` with `true` value, which was returned by the smart contract.\n\nAll of these values let us be sure that our domain was successfully registered.  \n\n#### Step #4\n\nInvoke the contract to query the address information our `my_first_domain` domain:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 5e6d360e472798ee10c676022761bc5a2c3828f5 query my_first_domain\n```\n... the pass `qwerty`:\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password", "doc_id": "54a6fcf0-0c2c-4b8d-95cf-a64373d9ce11", "embedding": null, "doc_hash": "0dd45512b1c7b562fd92eebc25ec8ea2518c2aa6cd819d765e196623a3fb1d79", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 51633, "end": 53425, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "cf72d3f6-55f2-4b27-8700-a1678521917d", "3": "9a360feb-e205-4434-8884-0f0479882ecd"}}, "__type__": "1"}, "9a360feb-e205-4434-8884-0f0479882ecd": {"__data__": {"text": "password >\n```\nResult:\n```\nSent invocation transaction b8b1e8e473437badfad13355c65da6bcd1e868bd30fbedfcd8f9fd5daef52bfb\n```\nand log-message:\n```\n2020-12-17T17:39:32.677+0300\tINFO\truntime log\t{\"tx\": \"7693ddedee55e1ccf2914a049d3cf5c3d1b29d5fb8ecbd3e9bd5672a242170a6\", \"script\": \"5e6d360e472798ee10c676022761bc5a2c3828f5\", \"msg\": \"QueryDomain: my_first_domain\"}\n```\nLet's check this transaction with `getapplicationlog` RPC call:\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"b8b1e8e473437badfad13355c65da6bcd1e868bd30fbedfcd8f9fd5daef52bfb\"] }' localhost:20331 | json_pp\n```\n... which gives us the following result:\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"id\" : 1,\n   \"result\" : {\n      \"txid\" : \"0xb8b1e8e473437badfad13355c65da6bcd1e868bd30fbedfcd8f9fd5daef52bfb\",\n      \"executions\" : [\n         {\n            \"vmstate\" : \"HALT\",\n            \"stack\" : [\n               {\n                  \"type\" : \"ByteString\",\n                  \"value\" : \"rtjbO11mTKBL3XvtN5kv+VhWC0E=\"\n               }\n            ],\n            \"gasconsumed\" : \"4321230\",\n            \"trigger\" : \"Application\",\n            \"notifications\" : []\n         }\n      ]\n   }\n}\n```\n\nwith base64 interpretation of our account address `NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB` on the stack, which means that domain `my_first_domain` was registered by the owner with received account address.\n\n#### Step #5\n\nInvoke the contract to transfer domain to the other account (e.g. account with `NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm` address):\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 5e6d360e472798ee10c676022761bc5a2c3828f5 transfer my_first_domain NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm -- NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\n```\n... the password: `qwerty`\n```\nEnter account NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB password >\n```\nResult:\n```\nSent invocation transaction", "doc_id": "9a360feb-e205-4434-8884-0f0479882ecd", "embedding": null, "doc_hash": "3d4783f854b702ba2074c9d01f7439acef657ef687bcaff385532944704eb4c9", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 53431, "end": 55314, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "54a6fcf0-0c2c-4b8d-95cf-a64373d9ce11", "3": "baccc5d8-6b7b-49e0-88b1-3d377bc6d7a5"}}, "__type__": "1"}, "baccc5d8-6b7b-49e0-88b1-3d377bc6d7a5": {"__data__": {"text": "password >\n```\nResult:\n```\nSent invocation transaction c1a97f8263cfea75ea27b31b53a4a2088d4a0f48d03c9967f92aa96fbf74a603\n```\nand log-message:\n```\n2020-12-17T17:44:07.536+0300\tINFO\truntime log\t{\"tx\": \"5d06117399a2ffc35d1f4a16fc16de7ab5136406b16dbfb8cda033d31cb59bcc\", \"script\": \"5e6d360e472798ee10c676022761bc5a2c3828f5\", \"msg\": \"TransferDomain: my_first_domain\"}\n```\nPerfect. And `getapplicationlog` RPC-call...\n```\ncurl -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"getapplicationlog\", \"params\": [\"c1a97f8263cfea75ea27b31b53a4a2088d4a0f48d03c9967f92aa96fbf74a603\"] }' localhost:20331 | json_pp\n```\n... tells us:\n```\n{\n   \"id\" : 1,\n   \"jsonrpc\" : \"2.0\",\n   \"result\" : {\n      \"executions\" : [\n         {\n            \"stack\" : [\n               {\n                  \"value\" : true,\n                  \"type\" : \"Boolean\"\n               }\n            ],\n            \"gasconsumed\" : \"7680110\",\n            \"vmstate\" : \"HALT\",\n            \"trigger\" : \"Application\",\n            \"notifications\" : [\n               {\n                  \"eventname\" : \"deleted\",\n                  \"state\" : {\n                     \"value\" : [\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"rtjbO11mTKBL3XvtN5kv+VhWC0E=\"\n                        },\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"bXlfZmlyc3RfZG9tYWlu\"\n                        }\n                     ],\n                     \"type\" : \"Array\"\n                  },\n    ", "doc_id": "baccc5d8-6b7b-49e0-88b1-3d377bc6d7a5", "embedding": null, "doc_hash": "94b39166ff5217971da2167d36d07bbe17d4944bb1734294ded86e3f46c86c40", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 55272, "end": 56802, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "9a360feb-e205-4434-8884-0f0479882ecd", "3": "3af3c67c-df19-4b99-9926-9692a535cf01"}}, "__type__": "1"}, "3af3c67c-df19-4b99-9926-9692a535cf01": {"__data__": {"text": "              },\n                  \"contract\" : \"0x5e6d360e472798ee10c676022761bc5a2c3828f5\"\n               },\n               {\n                  \"state\" : {\n                     \"value\" : [\n                        {\n                           \"value\" : \"50l6vFaauRKm8hPVkr3Aw2CeHQs=\",\n                           \"type\" : \"ByteString\"\n                        },\n                        {\n                           \"type\" : \"ByteString\",\n                           \"value\" : \"bXlfZmlyc3RfZG9tYWlu\"\n                        }\n                     ],\n                     \"type\" : \"Array\"\n                  },\n                  \"contract\" : \"0x5e6d360e472798ee10c676022761bc5a2c3828f5\",\n                  \"eventname\" : \"registered\"\n               }\n            ]\n         }\n      ],\n      \"txid\" : \"0xc1a97f8263cfea75ea27b31b53a4a2088d4a0f48d03c9967f92aa96fbf74a603\"\n   }\n}\n```\nThe `notifications` field contains two events:\n- First one with name `deleted` and additional information (domain `my_first_domain` was deleted from account `NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB`),\n- Second one with name `registered`  and additional information  (domain `my_first_domain` was registered with account `NgzuJWWGVEwFGsRrgzj8knswEYRJrTe7sm`).\nThe `stack` field contains `true` value, which means that our domain was successfully transferred.\n\n#### Step #6\n\nThe last call is `delete`, so you can try to create the other domain, e.g. `my_second_domain` and then remove it from storage with:\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 5e6d360e472798ee10c676022761bc5a2c3828f5 register my_second_domain NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB -- NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB:CalledByEntry\n$", "doc_id": "3af3c67c-df19-4b99-9926-9692a535cf01", "embedding": null, "doc_hash": "41b2e74a16302f8308e4f6bba0cd1679bbafb333a95dc31e4033f0ad022fd7e3", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 56851, "end": 58568, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "baccc5d8-6b7b-49e0-88b1-3d377bc6d7a5", "3": "78d1ae9e-63a8-480c-9aa1-161b74b3d453"}}, "__type__": "1"}, "78d1ae9e-63a8-480c-9aa1-161b74b3d453": {"__data__": {"text": "./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json 5e6d360e472798ee10c676022761bc5a2c3828f5 delete my_second_domain -- NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\n```\n\nThank you!\n\n### Useful links\n\n* [Our basic tutorial on Medium](https://medium.com/@neospcc/%D1%81%D0%BC%D0%B0%D1%80%D1%82-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%B0%D0%BA%D1%82-%D0%B4%D0%BB%D1%8F-neo-769139352b65)\n* [Using NEO Blockchain Toolkit](https://medium.com/@neospcc/neogo-adds-support-for-neo-blockchain-toolkit-673ea914f661)\n* [NEO documentation](https://docs.neo.org/)\n* [NEO github](https://github.com/neo-project/neo/)\n* [NEO-GO github](https://github.com/nspcc-dev/neo-go)\n", "doc_id": "78d1ae9e-63a8-480c-9aa1-161b74b3d453", "embedding": null, "doc_hash": "ecfbcb5a90812490577228d53c18989c9ca75cae957460bb0748561767069219", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}, "node_info": {"start": 58572, "end": 59242, "_node_type": "1"}, "relationships": {"1": "a030f0608eafd7249c57c45a3da2385110fe0cb6", "2": "3af3c67c-df19-4b99-9926-9692a535cf01"}}, "__type__": "1"}, "687d410f-a55f-4e99-bb34-cacef86baaf7": {"__data__": {"text": "---\ntitle: 'Real-world Smart Contracts: Building and deploying a Simple Domain Registrar'\ndescription: \"This tutorial will walk you through the process of creating real-world Neo Smart Contract using the Neo Blockchain toolkit. We will build a blockchain-based domain registration system.\"\nauthor: ngdenterprise\ntags: [ \"NEOEXPRESS\",\"SMART CONTRACT\"]\nskill: beginner\nimage: ./assets/cover.png\nsidebar: true\n---\n\n# Real-world Smart Contracts: Building and deploying a Simple Domain Registrar\n\n\n\nYou are currently viewing the command-line version of this tutorial. More comfortable using a graphical user-interface? [Click here for a UI version of this tutorial](./tutorial1-ui.html).\n\nThis tutorial was inspired by the [Neo N3 Fungible Token Sample Contract](https://github.com/ngdenterprise/neo-fungible-token-sample) project.\n\nThis tutorial will walk you through the process of creating real-world Neo Smart Contract using the Neo Blockchain toolkit. We will build a blockchain-based domain registration system.\n\nPre-requisites\n--------------\n\nYou will need the following software to follow along with this tutorial:\n\n*   **.NET SDK 5.0** \u2014 [https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download)  \n    We\u2019ll write the smart contract code using the C# programming language. The .NET SDK is required to compile the C# code.\n*   **Visual Studio Code** \u2014 [https://code.visualstudio.com/download](https://code.visualstudio.com/download)  \n    This is a very popular code editor; the Neo Blockchain Toolkit builds on top of VS Code.\n*   **Neo Blockchain Toolkit Visual Studio Code extension** \u2014 [https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit)  \n    This will add support to VS Code for visualizing Neo blockchains, running private blockchain instances and debugging Neo smart contracts.\n\nFor a step-by-step walkthrough showing how to install the above pre-requisites, see: [Quick Start video 1](./quickstart1.html).\n\nThis 6-minute video demonstrates how to setup a new machine for N3 smart contract development.\n\n*   **C# Visual Studio Code extension** \u2014 [https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp)  \n    This will add support to VS Code for editing and building C# source code.\n*   **Neo C# smart contract compiler** \u2014 [https://github.com/neo-project/neo-devpack-dotnet](https://github.com/neo-project/neo-devpack-dotnet)  \n    This tool allows you to convert compiled C# code into bytecode suitable for execution by the Neo virtual machine.\n\nFor a step-by-step walkthrough showing how to install the C# VS Code extension and the Neo C# compiler, see: [Quick Start video 4](./quickstart4.html).\n\nThis 11-minute video demonstrates how to setup your machine to compile C# smart contracts and walks through a trivial example.\n\n*   **Neo Express** \u2014 [https://github.com/neo-project/neo-express](https://github.com/neo-project/neo-express)  \n    This tool allows you to run a private instance of the Neo blockchain.\n\nNeo Express can be installed using the following command:  \n`$ dotnet tool install Neo.Express -g`\n\nThe .NET SDK must be installed first (see above).\n\nOn Linux and MacOS systems additional dependencies", "doc_id": "687d410f-a55f-4e99-bb34-cacef86baaf7", "embedding": null, "doc_hash": "1f454688935be4a19807e97639766b4c527cbf8c9a2e319874b25a6b15198aba", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 0, "end": 3369, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "3": "2991ab55-e6c4-40ba-b637-1e90c9dd5b40"}}, "__type__": "1"}, "2991ab55-e6c4-40ba-b637-1e90c9dd5b40": {"__data__": {"text": "be installed first (see above).\n\nOn Linux and MacOS systems additional dependencies are required, see [Quick Start video 1](./quickstart1.html) or the [Neo Express documentation](https://github.com/neo-project/neo-express#ubuntu-installation) for more information.\n\nAll of the software listed above is freely available and cross-platform (you can follow along on Windows, Mac or Linux).\n\nCreate a private blockchain\n---------------------------\n\nFirst, we\u2019ll create a new empty folder\u2014registrar\u2014for our project. We\u2019ll store all files related to our domain registration service in this folder.\n\n$ mkdir registrar\n$ cd registrar\n\nThe first thing we will do is use Neo Express to create a private blockchain. This will allow us to deploy and invoke our contract while we are developing it without spending any real GAS.\n\n$ neoxp create\nCreated 1 node privatenet at\n/Users/neo/registrar/default.neo-express\n    Note: The private keys for the accounts in this file are are \\*not\\* encrypted.\n          Do not use these accounts on MainNet or in any other system where security is a concern.\n\nTake note of the security warning, a `default.neo-express` file will have been created that contains private keys, but those keys should only be used for local testing as they are not securely stored.\n\nYou can now run your private blockchain:\n\n$ neoxp run\n\nIn your terminal you\u2019ll see the console output from Neo Express and will notice that about once every 15 seconds a new block is added to your blockchain. If you press Ctrl+C or close the terminal, you\u2019re blockchain will stop. For now, leave Neo Express running and open a new terminal for the subsequent steps.\n\nCreate a wallet\n---------------\n\nNext, we\u2019ll create a wallet to use with our private blockchain. This wallet will be used to deploy our smart contract to the blockchain. Initially we\u2019ll make domain registration free-of-charge so the owner won\u2019t have any involvement after initial deployment (you could imagine us later improving the contract to charge fees\u2014in NEO or GAS\u2014for domain registration though and have the owner able to redeem those fees).\n\n$ neoxp wallet create owner\nowner\n    NigW5fvwHWMEzgoeasQTA6fdktXLe8tCsa\n    Note: The private keys for the accounts in this wallet are \\*not\\* encrypted.\n          Do not use these accounts on MainNet or in any other system where security is a concern.\n\nWe now have a wallet for the smart contract owner, but that wallet doesn\u2019t contain any assets. Deploying a smart contract to a Neo blockchain has a fee associated with it; the fee varies based on the size of the contract but is always paid in GAS.\n\nEach Neo Express instance has a special wallet called \u201cgenesis\u201d that is initially given the entire supply of NEO and GAS (the two assets native to the Neo blockchain). Let\u2019s transfer some GAS from the genesis wallet to our owner wallet.\n\n$ neoxp transfer 100000 GAS genesis owner\nTransfer Transaction 0x0acc8cab2dd88a3e4c73284a71edc94c77a03db62e46950ee6d42b60e22a9b9d submitted\n\nMeet Alice and Bob\n------------------\n\nLet\u2019s create two more wallets so that we can later experiment with registering and transferring domains. We\u2019ll call the wallets `alice` and `bob` (it is convention when describing protocols to name the first two participants Alice and Bob!)\n\nThe steps aliceto create the wallets are exactly the same as above\u2014when we created the owner wallet\u2014just with different wallet names. Be sure to also transfer some GAS from the `genesis` wallet to Alice and Bob (as they will need some GAS to be able to invoke the registration contract that we will create).\n\nThe wallets that", "doc_id": "2991ab55-e6c4-40ba-b637-1e90c9dd5b40", "embedding": null, "doc_hash": "a34876d243d4bbe40dd54af7a9a44d582d1516940616ec80a32ec0390c9e925b", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 3297, "end": 6891, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "687d410f-a55f-4e99-bb34-cacef86baaf7", "3": "edd86f8c-ece7-4efc-9ff7-6843d66af2b0"}}, "__type__": "1"}, "edd86f8c-ece7-4efc-9ff7-6843d66af2b0": {"__data__": {"text": "to be able to invoke the registration contract that we will create).\n\nThe wallets that you have created are stored inside the `.neo-express` configuration file. If you open the file you should now see a wallets entry that looks something like this (your keys and addresses will be different, though):\n\n![Configuration file containing new wallets](./assets/09.png)\n\nCreate a contract\n-----------------\n\nNow we\u2019re ready to write the code for our smart contract.\n\nWe\u2019ll use Visual Studio Code to write the code for our smart contract. Load a new VS Code window and open your `registrar` folder. The folder will contain a single file\u2014`default.neo-express`\u2014that was created by Neo Express to store your private blockchain configuration.\n\nClick the N3 icon in the tool bar to open the N3 Visual DevTracker:\n\n![N3 icon](./assets/02.png)\n\n![VS Code window with the registrar folder opened](./assets/11.png)\n\nClick the \u201cCreate a new contract\u201d button in the Quick Start panel:\n\n![Quick Start panel](./assets/12.png)\n\n(Alternatively, you could select the \u201cCreate contract\u201d menu option from the context menu in the Blockchains panel.)\n\nWhen asked which programming language you would like to use, select `csharp`.\n\nWhen asked for the contract name, enter `Registration`. A new file called `RegistrationContract.cs` will be created and opened\u2014this is our smart contract code. It has been pre-populated with some example code, but we\u2019ll shortly remove and replace most of that\u2026\n\n![VS Code window with sample contract code opened](./assets/13.png)\n\nYou can also see in the Explorer pane in VS Code that various other files have been created:\n\n![Contract files in the File Explorer](./assets/15.png)\n\nThe `RegistrationContract.csproj` file is an MS Build C# project configuration file; it tells the .NET SDK tooling how to build your project.\n\nThe `tasks.json` file is a Visual Studio Code configuration file that will allow you to build your code within Visual Studio Code. VS Code will have already built the sample code and the various files produced by the build are in the `Registration/bin/debug/net5.0` folder. You can rebuild your contract after making changes by choosing the \u201cRun build task\u2026\u201d option in the \u201cTerminal\u201d menu in VS Code.\n\nIf you prefer to build using the command-line, you can delete the`tasks.json` file and instead run the `dotnet build` command within the `Registration` folder whenever you want to build:\n\n$ cd Registration/\n$ dotnet build\nMicrosoft (R) Build Engine version 16.8.3+39993bd9d for .NET\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n  RegistrationContract -> /Users/neo/registrar/RegistrationContract/bin/Debug/net5.0/RegistrationContract.dll\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:01.21\n\nLet\u2019s remove the sample code and fill out some contract metadata, then we\u2019ll be ready to write our own smart contract code\u2026\n\nThe `RegistrationContract.cs` file contains a single class; it is called `RegistrationContract` and extends the `SmartContract` class (from the `Neo.SmartContract.Framework` package) to signify that it is a smart contract. The class has various attributes that are used to provide metadata that will be deployed to the N3 blockchain along with the contract:\n\n```csharp\n[DisplayName(\"YourName.RegistrationContract\")]\n[ManifestExtra(\"Author\", \"Your name\")]\n[ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n[ManifestExtra(\"Description\", \"Describe your contract...\")]\n```\n\nLet\u2019s replace these with real values\u2026\n\nThe", "doc_id": "edd86f8c-ece7-4efc-9ff7-6843d66af2b0", "embedding": null, "doc_hash": "b043a61bfb5c91a3cba010772bfc0d8387b02387cadb724e43819f7231873de2", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 6892, "end": 10495, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "2991ab55-e6c4-40ba-b637-1e90c9dd5b40", "3": "b591c0b4-49de-4916-8116-633116af551e"}}, "__type__": "1"}, "b591c0b4-49de-4916-8116-633116af551e": {"__data__": {"text": "replace these with real values\u2026\n\nThe `DisplayName` will be used to refer to your contract from within wallet software and other tools, it is common practice to provide a string consisting of an identifier for you (e.g. your GitHub ID, or company abbreviation) followed by a dot and then the contract name.\n\nFor the `ManifestExtra` attributes, replace the example values with real information. You can also remove the `OnNumberChanged` event, the `MAP_NAME` constant and the `ChangeNumber` and `GetNumber` methods from the example contract:\n\n```csharp\nusing System;\nusing System.ComponentModel;\nusing System.Numerics;\n\nusing Neo;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\n\nnamespace Registration\n{\n    [DisplayName(\"djnicholson.RegistrationContract\")]\n    [ManifestExtra(\"Author\", \"David Nicholson\")]\n    [ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n    [ManifestExtra(\"Description\", \"A domain registration service for Neo blockchains\")]\n    public class RegistrationContract : SmartContract\n    {\n    }\n}\n```\n\nYou can rebuild your contract now to verify that it still builds. Our contract doesn\u2019t do anything useful yet, though; next we\u2019ll code various methods to make it a fully functional domain registration service!\n\nDomain registration interface\n-----------------------------\n\nFor this example, we\u2019ll say that a valid domain name is any non-empty string consisting only of the characters \u2018a\u2019 through \u2018z\u2019.\n\nWe\u2019ll support the following behaviors:\n\n*   Anyone can query whether a domain name is already registered (and if so, who owns it) using a `Lookup` method.\n*   Any available name can be registered by calling a `Register` method (signing the transaction as the intended owner of the domain).\n*   The existing owner of a domain can transfer it to someone else by invoking a `Transfer` method (providing the new owner as an argument and signing the transaction as the current owner).\n*   The existing owner of a domain can delete their registration by invoking a `Delete` method (signing the transaction as the current owner).\n\nWe\u2019ll also emit an event whenever ownership changes for a domain name.\n\nHelper methods\n--------------\n\nFirst it would be useful to implement a couple of helper methods.\n\nThe first helper method will implement our validation logic; it will determine if an arbitrary string is a valid domain name according to our rules and throw an exception if not:\n```csharp\nstatic void Validate(string domain)\n{\n    var domainBytes = domain.ToByteArray();\n    for (int i = 0; i < domain.Length; i++)\n    {\n        if (domainBytes[i] < 'a' || domainBytes[i] > 'z')\n        {\n            throw new Exception(\"Domains must only use lowercase a-z characters\");\n        }\n    }\n\n    if (domain.Length == 0)\n    {\n        throw new Exception(\"Domains must be non-empty\");\n    }\n}\n```\nWe\u2019ll often need to know the current owner of a valid domain name, so let\u2019s also add a helper method for that. We\u2019ll use contract storage to keep track of which domain is owned by which address and will arrange for the method to return zero if a domain is unregistered.\n```csharp\nstatic UInt160 GetOwner(string domain)\n{\n    var value = Storage.Get(Storage.CurrentContext, domain);\n    if (value == null)\n    {\n        return", "doc_id": "b591c0b4-49de-4916-8116-633116af551e", "embedding": null, "doc_hash": "cf9accb035daebdbc375813913edcd2c56e96ece295367a597df9cd9100b75e3", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 10537, "end": 13871, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "edd86f8c-ece7-4efc-9ff7-6843d66af2b0", "3": "318bd023-fb8d-43cf-ba67-e27eff2d0804"}}, "__type__": "1"}, "318bd023-fb8d-43cf-ba67-e27eff2d0804": {"__data__": {"text": "if (value == null)\n    {\n        return UInt160.Zero;\n    }\n    else\n    {\n        return (UInt160) value;\n    }\n}\n```\nWe also need to declare the event that we will be emitting whenever domain name ownership changes:\n```csharp\n[DisplayName(\"ChangeOwner\")]\npublic static event Action<string, UInt160> OnChangeOwner;\n```\nDomain name lookup\n------------------\n\nOur first operation will allow people to lookup the current owner of a domain name (a return value of zero will represent that the domain is currently unregistered):\n```csharp\npublic static UInt160 Lookup(string domain)\n{\n    Validate (domain);\n    return GetOwner(domain);\n}\n```\nNote that we confirm the domain name is valid before doing any further processing; we will follow the same pattern for all of our contract operations.\n\nDomain name registration\n------------------------\n\nNext, we need an operation to allow someone to register an available domain name:\n```csharp\npublic static void Register(string domain)\n{\n    Validate(domain);\n\n    if (!GetOwner(domain).IsZero)\n    {\n        throw new Exception(\"Already registered\");\n    }\n\n    var tx = (Transaction) Runtime.ScriptContainer;\n    Storage.Put(Storage.CurrentContext, domain, tx.Sender);\n    OnChangeOwner(domain, tx.Sender);\n}\n```\nNote that we first check that the domain is valid and available. We then extract the address used to sign the transaction and update the contract storage so the mapping from this domain name to this address is persisted.\n\nDomain name transfer\n--------------------\n\nNow we need an operation for transferring domain names:\n```csharp\npublic static void Transfer(string domain, UInt160 to)\n{\n    Validate(domain);\n\n    var owner = GetOwner(domain);\n    if (GetOwner(domain).IsZero)\n    {\n        throw new Exception(\"Not registered\");\n    }\n\n    if (!to.IsValid || to.IsZero)\n    {\n        throw new Exception(\"Invalid transferee\");\n    }\n\n    if (!Runtime.CheckWitness(owner))\n    {\n        throw new Exception(\"Not authorized\");\n    }\n    \n    Storage.Put(Storage.CurrentContext, domain, to);\n    OnChangeOwner(domain, to);\n}\n```\nWe confirm that the domain is already registered, then we make sure that the destination address is valid and the signer of the transaction is the current owner of the domain name. If all these checks pass we update our contract storage and emit our ownership change event.\n\nDomain name deletion\n--------------------\n\nFinally, we need an operation for domain name owners to delete their registration:\n```csharp\npublic static void Delete(string domain)\n{\n    Validate(domain);\n\n    var owner = GetOwner(domain);\n    if (owner.IsZero)\n    {\n        throw new Exception(\"Not registered\");\n    }\n\n    if (!Runtime.CheckWitness(owner))\n    {\n        throw new Exception(\"Not authorized\");\n    }\n\n    Storage.Delete(Storage.CurrentContext, domain);\n    OnChangeOwner(domain, UInt160.Zero);\n}\n```\nWe check that the domain is currently registered and the person it is registered to has signed the transaction; we then remove the relevant item from storage and emit our ownership change event (using an address of zero to signify that the domain has become available again).\n\nNow we\u2019re ready to deploy our contract to our private Neo blockchain!\n\nContract deployment\n-------------------\n\nWhen you build your smart contract code, one of the files emitted", "doc_id": "318bd023-fb8d-43cf-ba67-e27eff2d0804", "embedding": null, "doc_hash": "b5608ecabbca3260910fd0862adce84cd670c15e3c0ecedae68490aba65fae74", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 13880, "end": 17208, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "b591c0b4-49de-4916-8116-633116af551e", "3": "23582841-916e-449c-b7f0-f0234ee11a83"}}, "__type__": "1"}, "23582841-916e-449c-b7f0-f0234ee11a83": {"__data__": {"text": "you build your smart contract code, one of the files emitted is`RegistrationContract.nef`; this contains the N3 Virtual Machine bytecode for your contract and is required for deployment. You can deploy your contract to your private blockchain as follows:\n\n$ neoxp contract deploy Registration/bin/Debug/net5.0/RegistrationContract.nef owner\nDeployment Transaction 0xc5f6b16350427e4bf0dfa01fc939ac192df45e39e703e60cd08db5c1a37e17a5 submitted\n\nYour contract has now been deployed to your own private Neo blockchain. Next, we\u2019ll experiment with registering some domains\u2026\n\nRegistering a domain\n--------------------\n\nNeo Express allows you to invoke any contract deployed to your private blockchain. To do so, you must provide an \u201c[invoke file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md)\u201d; an invoke file is a JSON file that specifies one or more contract methods that should be invoked.\n\n```csharp\nCreate a new text file and paste the following JSON into it:\n\n[\n  {\n    \"contract\": \"djnicholson.RegistrationContract\",\n    \"operation\": \"register\",\n    \"args\": [ \"widgets\" ]\n  }\n]\n```\nSave the file as `alice-registration.neo-invoke.json` and then run the following command:\n\n$ neoxp contract invoke alice-registration.json owner\nInvocation Transaction 0xdbf3fa71a74fa0676d7513ded2e2f18ea6cf5b9f022a9b008b9b05bc36865217 submitted\n\nThis command submits a transaction to your private blockchain that invokes all of the steps in the invoke file (only one step in our case) using Alice\u2019s wallet.\n\nCongratulations, you just registered your first domain! `widgets` is now owned by Alice!\n\nTransferring a domain\n---------------------\n\nNext let\u2019s have Alice transfer the widgets domain to Bob.\n\nCreate a new invoke file called `alice-to-bob-transfer.neo-invoke.json` and populate it as follows:\n```json\n[\n  {\n    \"contract\": \"djnicholson.RegistrationContract\",\n    \"operation\": \"transfer\",\n    \"args\": [ \"widgets\", \"@bob\" ]\n  }\n]\n```\nNote that you can refer to wallet address in invoke files by prefixing the wallet name with an \u2018@\u2019 character.\n\nNow run this invoke file the same was as before (again using Alice\u2019s account to submit the transaction). Now Bob own\u2019s the domain `widgets`!\n\nYou can verify this by trying to run the same invoke file again and verifying that the transaction results in an error (Alice is no longer the owner so our smart contract throws an exception).\n\nDeleting a domain\n-----------------\n\nFinally, let\u2019s delete the `widgets` domain.\n\nCreate a new invoke file called `delete-widgets.neo-invoke.json` and populate it as follows:\n```json\n[\n  {\n    \"contract\": \"djnicholson.RegistrationContract\",\n    \"operation\": \"delete\",\n    \"args\": [ \"widgets\" ]\n  }\n]\n```\nNow run this invoke file the same was as before, but this time use Bob\u2019s account to submit the transaction. Now nobody own\u2019s the domain`widgets` and it is available for registration again!\n\nExercise for the reader\n-----------------------\n\nOur contract allows anyone to register any domain free-of-charge (as long as they have enough GAS to pay to submit the invocation transactions). In a real-world you may want to charge fees when a user registers a domain; people could pay these fees in NEO, GAS or indeed any other NEP-17 asset.\n\nAs an", "doc_id": "23582841-916e-449c-b7f0-f0234ee11a83", "embedding": null, "doc_hash": "3ead848a0012cab3f06a16563281ab8964eb24cac1ad94786efa1eaf2c5c31b0", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 17183, "end": 20459, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "318bd023-fb8d-43cf-ba67-e27eff2d0804", "3": "d787c8ec-587f-4e81-826d-5658eb90c86d"}}, "__type__": "1"}, "d787c8ec-587f-4e81-826d-5658eb90c86d": {"__data__": {"text": "GAS or indeed any other NEP-17 asset.\n\nAs an exercise, you can modify the `RegistrationContract` to support this functionality: You can add an `OnPayment` method to your contract that will be called whenever someone pays assets to the contract. The `OnPayment` method provides the sender and amount of funds as arguments, you can determine what asset was paid by inspecting the `Runtime.CallingScriptHash` property provided by the runtime and you could make use of the optional `data` argument to allow the user to specify which name they would like to register. Within your `OnPayment` method you can reject the transaction\u2014e.g., if the domain is unavailable or not enough funds were paid\u2014by throwing an exception.\n\nSource code listing\n-------------------\n\nHere is the complete smart contract source code:\n```csharp\nusing System;\nusing System.ComponentModel;\n\nusing Neo;\nusing Neo.SmartContract.Framework;\nusing Neo.SmartContract.Framework.Native;\nusing Neo.SmartContract.Framework.Services;\n\nnamespace Registration\n{\n    [DisplayName(\"djnicholson.RegistrationContract\")]\n    [ManifestExtra(\"Author\", \"David Nicholson\")]\n    [ManifestExtra(\"Email\", \"[[email\u00a0protected]](/cdn-cgi/l/email-protection)\")]\n    [ManifestExtra(\"Description\", \"A domain registration service for N3 blockchains\")]\n    public class RegistrationContract : SmartContract\n    {\n        [DisplayName(\"ChangeOwner\")]\n        public static event Action<string, UInt160> OnChangeOwner;\n\n        static void Validate(string domain)\n        {\n            var domainBytes = domain.ToByteArray();\n            for (int i = 0; i < domain.Length; i++)\n            {\n                if (domainBytes[i] < 'a' || domainBytes[i] > 'z')\n                {\n                    throw new Exception(\"Domains must only use lowercase a-z characters\");\n                }\n            }\n\n            if (domain.Length == 0)\n            {\n                throw new Exception(\"Domains must be non-empty\");\n            }\n        }\n\n        static UInt160 GetOwner(string domain)\n        {\n            var value = Storage.Get(Storage.CurrentContext, domain);\n            if (value == null)\n            {\n                return UInt160.Zero;\n            }\n            else\n            {\n                return (UInt160) value;\n            }\n        }\n\n        public static UInt160 Lookup(string domain)\n        {\n            Validate (domain);\n            return GetOwner(domain);\n        }\n\n        public static void Register(string domain)\n        {\n ", "doc_id": "d787c8ec-587f-4e81-826d-5658eb90c86d", "embedding": null, "doc_hash": "d358980e4768f5f9ad7c98efb3d10380a2203244064effd8b0560b03f94bda1e", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 20473, "end": 22970, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "23582841-916e-449c-b7f0-f0234ee11a83", "3": "345a05da-793c-4553-b8d7-52d172f3d5c4"}}, "__type__": "1"}, "345a05da-793c-4553-b8d7-52d172f3d5c4": {"__data__": {"text": " public static void Register(string domain)\n        {\n            Validate (domain);\n\n            if (!GetOwner(domain).IsZero)\n            {\n                throw new Exception(\"Already registered\");\n            }\n\n            var tx = (Transaction) Runtime.ScriptContainer;\n            Storage.Put(Storage.CurrentContext, domain, tx.Sender);\n            OnChangeOwner(domain, tx.Sender);\n        }\n\n        public static void Transfer(string domain, UInt160 to)\n        {\n            Validate (domain);\n\n            var owner = GetOwner(domain);\n            if (GetOwner(domain).IsZero)\n            {\n                throw new Exception(\"Not registered\");\n            }\n\n            if (!to.IsValid || to.IsZero)\n            {\n                throw new Exception(\"Invalid transferee\");\n            }\n\n            if (!Runtime.CheckWitness(owner))\n            {\n                throw new Exception(\"Not authorized\");\n            }\n\n            Storage.Put(Storage.CurrentContext, domain, to);\n            OnChangeOwner (domain, to);\n        }\n\n        public static void Delete(string domain)\n        {\n            Validate (domain);\n\n            var owner = GetOwner(domain);\n            if (owner.IsZero)\n            {\n                throw new Exception(\"Not registered\");\n            }\n\n            if (!Runtime.CheckWitness(owner))\n            {\n                throw new Exception(\"Not authorized\");\n            }\n\n            Storage.Delete(Storage.CurrentContext, domain);\n            OnChangeOwner(domain, UInt160.Zero);\n        }\n    }\n}\n```", "doc_id": "345a05da-793c-4553-b8d7-52d172f3d5c4", "embedding": null, "doc_hash": "7a1c0790c05dbd050e5f6206c7ced70aaee756330908b85211a7c3a07bfdf722", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}, "node_info": {"start": 22952, "end": 24504, "_node_type": "1"}, "relationships": {"1": "8debbfbe0ac533335ae372b7070eddbfe91b2ca4", "2": "d787c8ec-587f-4e81-826d-5658eb90c86d"}}, "__type__": "1"}, "91e34b6e-534b-4d48-a0ee-e9426f0b6ecb": {"__data__": {"text": "---\ntitle: 'dApp-Wallet Integration with WalletConnect'\ndescription: \"This article covers implementation of WalletConnect, an open source protocol for communication between dApps and wallets. With it, a user can securely sign dApp proposed transactions directly from their personal wallet without exposing their private key to the application.\"\nauthor: Gil Lopes Bueno\ntags: [ \"DAPP\", \"WALLETCONNECT\"]\nimage: ./assets/cover.png\nskill: beginner\nsidebar: true\n---\n\n# dApp-Wallet Integration with WalletConnect\n\n## 1. An Introduction:\n\nThis article covers implementation of **WalletConnect**, an open source protocol for communication between dApps and\nwallets. With it, a user can securely sign dApp proposed transactions directly from their personal wallet without\nexposing their private key to the application.\n\n### Why do I need WalletConnect in my dApp?\n\nAlmost every decentralized application needs user's authentication to send a signed transaction to the blockchain. From\nminting tokens to making a simple transfer, users must always sign their transactions whenever the client-side\napplication needs to call a SmartContract method that requires the user's Account.\n\nWithout a solution like WalletConnect, the user would need to trust their private key to the dApp in order to sign.\nFor obvious reasons, outside of testing environments, this is a huge security issue. The dApp could simply use the key\nto maliciously steal funds or sign something not approved by the user.\n\n### The **WalletConnect 2.0** protocol:\n\n[WalletConnect](https://walletconnect.org/) is an established chain-agnostic open source protocol for connecting\ndecentralized applications to wallets. Whereas there are different options on how to safely implement such connection,\nWalletConnect is a widely supported standard across different wallets, chains and applications, and it's technical\napproach is simple, safe and proven.\n\n### The **WalletConnect SDK**:\n\nThis article will present the usage of [`COZ's WalletConnect 2.0 SDK`](https://github.com/CityOfZion/wallet-connect-sdk),\nan auxiliary library built on top of [WalletConnect](https://github.com/WalletConnect/walletconnect-monorepo) which\nwraps the protocol for integration within the Neo ecosystem.\n\n### And this is how it works:\n\n![img](assets/walletconnect-diagram.png)\n\n1. The application generates a connection payload and presents it to the user (commonly as a QR code) to provide to\ntheir wallet. The QR code contains information required to create a secure communication channel between the requesting\napplication and wallet via a relay server.\n\n2. Now, the application will have the ability to send requests directly to the user's wallet.\n\n3. When a request is received, the wallet will ask for the user to approve the transaction. It will then sign the\ntransaction, send it to the network and respond back to the dApp with the response it gets from the blockchain.\n\n## 2. Using WalletConnect\n\n### Requirements\n\n- A front-end application that needs to interact with smart contracts deployed to the blockchain;\n- A wallet supporting N3 with WalletConnect integration. For testing purposes, we recommend the use of\n[Neon Wallet](https://neon.coz.io/).\n- Create an account on [Wallet Connect website](https://walletconnect.com/)\nand then create a new `Project`, it's super easy, with just a few fields on the form. After that, you will be able to\nget your `projectId` and use it on your application.\n\n### Choose your path\n\nThere are currently two packages available for\n[COZ's WalletConnect 2.0 SDK](https://github.com/CityOfZion/wallet-connect-sdk): the\n[Core SDK](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core), that can be\nused with any front end framework, and a\n[React", "doc_id": "91e34b6e-534b-4d48-a0ee-e9426f0b6ecb", "embedding": null, "doc_hash": "cf1dac59280524ea7304343af9c60db3f3f6350130dcff2e6ac8e76281c8d497", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/06/26/dapp-wallet-integration-with-walletconnect"}, "node_info": {"start": 0, "end": 3764, "_node_type": "1"}, "relationships": {"1": "5251331a818ff444c11dba2c16f2d532d59175cc", "3": "7950bfca-d5d1-4e83-8594-f4cc5b54ca85"}}, "__type__": "1"}, "7950bfca-d5d1-4e83-8594-f4cc5b54ca85": {"__data__": {"text": "that can be\nused with any front end framework, and a\n[React SDK](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-react), a React\nlibrary with a context provider that handles the state changes for us.\n\nFrom here on, you will need to choose a path. Each upcoming section will briefly showcase the implementation of\nWalletConnect basic features using each of the packages.\n\n## 2.a. The \"Core\" SDK\n\n### Installation\nInstall the dependency on your client-side application\n#### NPM\n```\nnpm i @cityofzion/wallet-connect-sdk-core @walletconnect/sign-client @walletconnect/types\n```\n#### YARN\n```\nyarn add @cityofzion/wallet-connect-sdk-core @walletconnect/sign-client @walletconnect/types\n```\n\n### Setup\n\nInitialize the SDK with the following code:\n```js\nimport WcSdk from '@cityofzion/wallet-connect-sdk-core'\nimport SignClient from '@walletconnect/sign-client'\n\nconst wcSdk = new WcSdk(await SignClient.init({\n  projectId: '<your wc project id>', // the ID of your project on Wallet Connect website\n  relayUrl: 'wss://relay.walletconnect.com', // we are using walletconnect's official relay server\n  metadata: {\n    name: 'MyApplicationName', // your application name to be displayed on the wallet\n    description: 'My Application description', // description to be shown on the wallet\n    url: 'https://myapplicationdescription.app/', // url to be linked on the wallet\n    icons: ['https://myapplicationdescription.app/myappicon.png'] // icon to be shown on the wallet\n  }\n}))\n```\nYou only need to initialize the SDK once, so it's recommended to do it on your application's entry point.\n\n### Manage Session\n\nJust after initializing the client you can call `manageSession`, just once, it will reload the user's connected session\nand subscribe to the `disconnect` event.\n\n```js\nawait wcSdk.manageSession()\n```\n\nTo continue the tutorial, jump to [Using the SDK](#3-Using-the-SDK).\n\n## 2.b The \"React\" SDK\n\n### Installation\n\nInstall the dependencies on your application\n\n#### NPM\n\n```\nnpm i @cityofzion/wallet-connect-sdk-react @walletconnect/sign-client @walletconnect/types\n```\n\n#### YARN\n\n```\nyarn add @cityofzion/wallet-connect-sdk-react @walletconnect/sign-client @walletconnect/types\n```\n\n### Setup\n\nWrap WalletConnectProvider around your App and declare the options\n\n```jsx\nimport {WalletConnectProvider} from \"@cityofzion/wallet-connect-sdk-react\";\n\nconst wcOptions = {\n    projectId: '<your wc project id>', // the ID of your project on Wallet Connect website\n    relayUrl: 'wss://relay.walletconnect.com', // we are using walletconnect's official relay server\n    metadata: {\n        name: 'MyApplicationName', // your application name to be displayed on the wallet\n        description: 'My Application description', // description to be shown on the wallet\n        url: 'https://myapplicationdescription.app/', // url to be linked on the wallet\n        icons: ['https://myapplicationdescription.app/myappicon.png'] // icon to be shown on the wallet\n    }\n};\n\nReactDOM.render(\n  <>\n    <WalletConnectProvider autoManageSession={true} options={wcOptions}>\n      <App />\n    </WalletConnectProvider>\n ", "doc_id": "7950bfca-d5d1-4e83-8594-f4cc5b54ca85", "embedding": null, "doc_hash": "9b0d9c8be478b295104fe44c2f14586654678345af72e716d41bf72090667bf2", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/06/26/dapp-wallet-integration-with-walletconnect"}, "node_info": {"start": 3715, "end": 6857, "_node_type": "1"}, "relationships": {"1": "5251331a818ff444c11dba2c16f2d532d59175cc", "2": "91e34b6e-534b-4d48-a0ee-e9426f0b6ecb", "3": "4af14a26-6dd8-49a4-9221-babf5a1dd107"}}, "__type__": "1"}, "4af14a26-6dd8-49a4-9221-babf5a1dd107": {"__data__": {"text": "     <App />\n    </WalletConnectProvider>\n  </>,\n  document.getElementById(\"root\"),\n);\n```\n\n## Usage\n\nFrom now on, every time you need to use WalletConnect, you can simply use the `useWalletConnect` hook:\n\n```ts\nimport {useWalletConnect} from \"@cityofzion/wallet-connect-sdk-react\";\n\nexport default function MyComponent() {\n  const wcSdk = useWalletConnect()\n  // do something\n}\n```\n\n## 3. Using the SDK\n\n### Check if the user is connected\nAt this point, you can check if the user is connected by calling `isConnected` method at any moment. The following code\nis optional, only to show you how to check if the user is connected.\n```js\nif (wcSdk.isConnected()) {\n  console.log(wcSdk.getAccountAddress()) // print the first connected account address\n  console.log(wcSdk.getChainId()) // print the first connected account chain info\n  console.log(wcSdk.session.namespaces); // print the blockchain dictionary with methods, accounts and events\n  console.log(wcSdk.session.peer.metadata); // print the wallet metadata\n}\n```\nBut since you didn't connect yet, it will return `false`. So, let's connect!\n\n### Connect to the wallet\nTo connect to the wallet, you need to call `connect` method.\n\nFirst, we check if the user is already connected, if not, we call `connect` method.\n\nIt's important to choose the blockchain you want to connect to, and the methods you want to use.\n```js\nif (!wcSdk.isConnected()) {\n  // choose between neo3:mainnet, neo3:testnet or neo3:private, and the methods you want to use\n  await wcSdk.connect('neo3:testnet', ['invokeFunction', 'testInvoke', 'signMessage','verifyMessage'])  \n  // and check if there is a connection\n  console.log(wcSdk.isConnected() ? 'Connected successfully' : 'Connection refused')\n}\n```\nThe connect method will open a new browser tab to help the user to connect with its wallet. But you can handle the\nconnection in your own way, check the\n[documentation](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#connect-to-the-wallet)\nto see how to do it.\n\n### Disconnect from the wallet\nIt's interesting to have a button to allow the user to disconnect its wallet, call `disconnect` when this happens:\n```js\nawait wcSdk.disconnect();\n```\n\n### Interacting with the Wallet using the methods\n- Use [InvokeFunction](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#invoking-a-smartcontract-method-on-neo-3-blockchain)\nto invoke a smart contract method on Neo 3 blockchain.\n- Use [TestInvoke](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#calling-testinvoke)\nto call testInvoke to retrieve information from a SmartContract without persisting any information on the blockchain.\n- Use [SignMessage and VerifyMessage](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#sign-and-verify-message)\nto sign and verify messages and to be sure about the user's identity.\n- Use [TraverseIterator](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#sign-and-verify-message)\nto traverse an iterator returned by a SmartContract method.\n- Use", "doc_id": "4af14a26-6dd8-49a4-9221-babf5a1dd107", "embedding": null, "doc_hash": "195c0529f5337f0a0ee0275b0efe443c9ee6f28e3e57aeb742382294828e02b6", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/06/26/dapp-wallet-integration-with-walletconnect"}, "node_info": {"start": 6876, "end": 10067, "_node_type": "1"}, "relationships": {"1": "5251331a818ff444c11dba2c16f2d532d59175cc", "2": "7950bfca-d5d1-4e83-8594-f4cc5b54ca85", "3": "647a290c-ad5d-4356-8629-df0e86c19371"}}, "__type__": "1"}, "647a290c-ad5d-4356-8629-df0e86c19371": {"__data__": {"text": "traverse an iterator returned by a SmartContract method.\n- Use [GetWalletInfo](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#get-wallet-info)\nto get more information about the wallet.\n- Use [GetNetworkVersion](https://github.com/CityOfZion/wallet-connect-sdk/tree/develop/packages/wallet-connect-sdk-core#get-network-version)\nto get the network version used by the connected wallet.\n\n## 4. Support\nIf you have any trouble using the SDK, please [open an issue](https://github.com/CityOfZion/wallet-connect-sdk/issues)\nor contact COZ at Neo's Discord Server.", "doc_id": "647a290c-ad5d-4356-8629-df0e86c19371", "embedding": null, "doc_hash": "43f9314c10503627eb05954bae2e4d1755803b272208ed2b6ee476051f4d4131", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/06/26/dapp-wallet-integration-with-walletconnect"}, "node_info": {"start": 10037, "end": 10642, "_node_type": "1"}, "relationships": {"1": "5251331a818ff444c11dba2c16f2d532d59175cc", "2": "4af14a26-6dd8-49a4-9221-babf5a1dd107"}}, "__type__": "1"}, "47315152-9213-420e-944f-0717a701680c": {"__data__": {"text": "---\r\ntitle: 'NeoID, NeoOracle and NeoFS demo'\r\ndescription: \"This tutorial describes an interactive demo to demonstrate the functionality and usage of NeoID (Neo Identity) as well as Neo Oracle and NeoFS (Neo File Storage) with an example use case \u2014 using an accommodation dApp to book a room.\"\r\nauthor: NGD\r\ntags: [ \"DAPP\"]\r\nskill: beginner\r\nsidebar: true\r\nimage: ./assets/cover.png\r\n---\r\n\r\n\r\n# A Demo of Neo N3 Core Components dApp\r\n\r\nThis tutorial describes an interactive demo to demonstrate the functionality and usage of NeoID (Neo Identity) as well as Neo Oracle and NeoFS (Neo File Storage) with an example use case \u2014 using an accommodation dApp to book a room.\r\n\r\n## How it works\r\n\r\n![](./assets/workflow.png)\r\n\r\nAs shown in above figure, this demo involves the following major components:\r\n\r\n- **NeoID**: \r\n\r\n  Decentralized identity tools provide much-needed solutions for user authentication in blockchain-based applications. \r\n\r\n  Neo ID allows users to create and manage decentralized identifiers, issue claims as a data verifier, users can tap into these verified credentials to gain access to applications without ever needing to share their private data, retaining full sovereignty and preventing its possible misuse.\r\n\r\n  Here are the parties that are involved in the process.\r\n\r\n  - `Credential owner` - has an Neo ID. This entity acquires a verifiable credential issued by another entity that is referred to as the credential issuer. \r\n  - `Credential issuer` - has an Neo ID. This entity issues credentials to endorse a target entity for certain qualifications or credentials. Credential issuers provide multi-dimensional authentication for entities that are part of the trust network. The authentication process and result are recorded on the Neo blockchain blockchain with data privacy protection. Credential issuers provide a standardized and credible authentication method for credential consumers to verify the credentials. Credential issuers play the role of a trust endorser.\r\n  - `Credential consumers` - accept the user's verifiable credentials and initiate the credential verification process for the respective credentials. This includes many different scenarios, e.g., the employers who need to verify the interviewer's identity information/degree/industry skills. They play the role of trust buyer.\r\n\r\n- **Neo Oracle**:\r\n\r\n  Oracle is the system to obtain information from the external network off the blockchain. Oracle nodes in the Neo blockchain are required to separately verify the data fetched from the network to reach a consensus on the information retrieved from the outside world. In this way, the information retrieved is ensured for integrity. In our demo, the oracle is driven by a price-feeding smart contract, which launches oracle requests and record the responses.  \r\n\r\n- **NeoFS**\r\n\r\n  NeoFS is a distributed, decentralized object storage network. NeoFS nodes are organized in a peer-to-peer network that takes care of storing and distributing user's files. Any Neo user can participate in NeoFS network and get paid for providing storage resources to other users or store his data in NeoFS and pay a competitive price for it. Your files are stored as objects in containers created by you, and you can share your files in various ways. Images of public access is shared in this demo through an HTTP gateway, which responds the stored object with the given container ID and object ID. \r\n\r\n## Starting the dApp demo\r\n\r\nThe accommodation [Dapp](https://github.com/bettybao1209/Neo-ID) built on Neo blockchain is designed for the following usage", "doc_id": "47315152-9213-420e-944f-0717a701680c", "embedding": null, "doc_hash": "107c174d2c0c5058f9c6a18ec20a2e38fe038e72b34ccb8bcf2a573729731f1c", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 0, "end": 3593, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "3": "b016d2a4-304f-4f09-9dc7-b93e2f4f1ca0"}}, "__type__": "1"}, "b016d2a4-304f-4f09-9dc7-b93e2f4f1ca0": {"__data__": {"text": "built on Neo blockchain is designed for the following usage scenario:\r\n\r\n*Oliver* is looking for an accommodation. To make the reservation, the dApp requires Oliver to identify himself as an individual. Fortunately for Oliver, his *Government* has recently decided to implement a digital version of the national ID with the help of the Neo blockchain. Oliver needs to apply for a digital ID  by presenting his physical ID to a local authority. At the moment of booking, Oliver can identify himself to the dApp with his digital Passport. Once the identity is verified, the dApp issues an access key credential to Oliver. Among the other things, the access key contains a code that gives access to an automatic door to enter the accommodation. When Oliver arrives at his accommodation, he displays the booking confirmation to the *Door Lock*, an automatic door with a IoT device capable to verify Oliver's claim. Once the booking is verified, Oliver is finally able to enter the accommodation.\r\n\r\nNow let's initialize the demo.\r\n\r\n### Prerequisites\r\n\r\n- [ ] Install the Neo node with the plugins [RpcServer](https://github.com/neo-project/neo-modules/releases/download/v3.0.0-rc3/RpcServer.zip) and [OracleService](https://github.com/neo-project/neo-modules/releases/download/v3.0.0-rc3/OracleService.zip). \r\n\r\n- [ ] Set up a private chain. Refer to [here](https://docs.neo.org/docs/en-us/node/cli/setup.html).\r\n\r\n- [ ] Deploy the contracts [seraph-id-smart-contracts](https://github.com/neo-ngd/seraph-id-smart-contracts) and [PriceFeedsService](https://github.com/bettybao1209/PriceFeedsService). Refer to [here](https://docs.neo.org/docs/zh-cn/develop/deploy/deploy.html).\r\n\r\n- [ ] Deploy [NeoFS node](https://github.com/nspcc-dev/neofs-node) \r\n\r\n  :::note\r\n  NeoFS may need a proxy to solve the CORS problem.\r\n  :::\r\n  \r\n- [ ] Set up the Oracle role, as follows:\r\n\r\n  ```\r\n  invoke 0x49cf4e5378ffcd4dec034fd98a174c5491e395e2 designateAsRole [{\"type\":\"Integer\",\"value\":\"8\"},{\"type\":\"Array\",\"value\":[{\"type\":\"PublicKey\",\"value\":\"YOUR ORACLE PUBLICKEYS\"}]}] [invoker] [invoker_signature + consensus_signature]\r\n  ```\r\n\r\n  `0x49cf4e5378ffcd4dec034fd98a174c5491e395e2` is the contract hash of `NativeContract`.\r\n\r\n### Building the dApp\r\n\r\nGet the source code of the dapp demo from [Github](https://github.com/bettybao1209/Neo-ID). \r\n\r\nAccording to your private chain settings, modify the necessary parameters in the ` seraph-id-sdk/src/__tests__/test-data.json` file:  \r\n\r\n```json\r\n{\r\n  \"neoRpcUrl\": \"http://localhost:10332\",\r\n  \"magic\":5195086,\r\n  \"neoscanUrl\": \"http://localhost:4000/api/main_net\",\r\n  \"network\": \"PrivateNet\",\r\n  \"issuerScriptHash\": \"0x9f1bcc1c5c7dae36e6ea60c8c47068e0b1e85484\",\r\n  \"issuerName\": \"SeraphID Issuer\",\r\n  \"issuerDID\":", "doc_id": "b016d2a4-304f-4f09-9dc7-b93e2f4f1ca0", "embedding": null, "doc_hash": "6e47eddc4430d5e553f728f011d311cb4d79f42b995d97c3f12fa098125cd648", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 3544, "end": 6290, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "47315152-9213-420e-944f-0717a701680c", "3": "39b342f3-5a80-4ec2-927b-da33779b783f"}}, "__type__": "1"}, "39b342f3-5a80-4ec2-927b-da33779b783f": {"__data__": {"text": "\"SeraphID Issuer\",\r\n  \"issuerDID\": \"did:neoid:priv:0x9f1bcc1c5c7dae36e6ea60c8c47068e0b1e85484\",\r\n  \"issuerPublicKeys\": [\"03b1e60e7d8a751092a8e36b1b95cb0cb64b44f2c82668749e9a4e3f16ff0b138c\"],\r\n  \"issuerPrivateKey\": \"KwoCZzfMoL3E7shgb3nPGXNTFYdALwfHt5NCVmQc7xF2hL5YVrfG\",\r\n  \"existingSchema\": {\r\n    \"name\": \"TestSchema\",\r\n    \"attributes\": [\r\n      \"firstName\",\r\n      \"lastName\",\r\n      \"age\"\r\n    ],\r\n    \"revokable\": true\r\n  },\r\n  \"claimAttributes\": {\r\n    \"firstName\": \"Betty\",\r\n    \"lastName\": \"Bao\",\r\n    \"age\": 30\r\n  },\r\n  \"rotName\": \"SeraphID Trust Anchor\",\r\n  \"rotDID\": \"did:neoid:priv:0xae2a7da19dee59c9973c81af367ca1cec221062e\",\r\n  \"rotPrivateKey\": \"KwoCZzfMoL3E7shgb3nPGXNTFYdALwfHt5NCVmQc7xF2hL5YVrfG\",\r\n  \"rotScriptHash\": \"0xae2a7da19dee59c9973c81af367ca1cec221062e\",\r\n  \"walletName\": \"1.json\",\r\n  \"walletPassword\": \"123\",\r\n  \"walletOwnerPrivateKey\": \"KwoCZzfMoL3E7shgb3nPGXNTFYdALwfHt5NCVmQc7xF2hL5YVrfG\",\r\n  \"ownerDID\": \"did:neoid:priv:NTfrPyZSGdBJs1yi3pUYhdWRdGY8pVSnFp\",\r\n  \"timeToWaitForBlockConfirmation\": 15000,\r\n  \"addedAdminKey\": \"03b1e60e7d8a751092a8e36b1b95cb0cb64b44f2c82668749e9a4e3f16ff0b138c\"\r\n}\r\n\r\n```\r\n\r\n Modify the ` seraph-id-demo\\demo\\src\\configs.ts` file as well:\r\n\r\n```\r\nimport { DIDNetwork } from '@sbc/seraph-id-sdk'\r\n\r\nexport const NEO_RPC_URL = 'http://seed1t.neo.org:20332';\r\nexport const DID_NETWORK = DIDNetwork.TestNet;\r\n\r\nexport const GOVERNMENT_SCRIPT_HASH = '0xcdec7e3c578f6d9e5f0fc48368b69f5e3759c635';\r\nexport const AGENCY_SCRIPT_HASH = '0xcdec7e3c578f6d9e5f0fc48368b69f5e3759c635';\r\n\r\nexport const GOVERNMENT_ISSUER_PRIVATE_KEY = 'KwgorFpHTbfwCko4ZJ5dZ7Xt1heCJHsscKy3m36Du6bVrbpuSAup';\r\nexport const AGENCY_ISSUER_PRIVATE_KEY = 'KwgorFpHTbfwCko4ZJ5dZ7Xt1heCJHsscKy3m36Du6bVrbpuSAup';\r\nexport const FLAT_WALLET_ADDRESS =", "doc_id": "39b342f3-5a80-4ec2-927b-da33779b783f", "embedding": null, "doc_hash": "f809d55f8bf204d1664102ae5ba464203a6c5aafd588fd4c31dc522e2bd26559", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 6310, "end": 8078, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "b016d2a4-304f-4f09-9dc7-b93e2f4f1ca0", "3": "ff8f22d4-fb9c-4542-8ccd-04ed55ba1a24"}}, "__type__": "1"}, "ff8f22d4-fb9c-4542-8ccd-04ed55ba1a24": {"__data__": {"text": "const FLAT_WALLET_ADDRESS = '0x5a4e405ed7fb167569199c46758105ecedd654f7';  \r\n\r\nexport const PRICE_FEED_SERVICE = '0x89d9839aa840a0bc55b64501faeac3ab037f471d';\r\nexport const OKEX_PROVIDER = '0x9a2a4fe4aef9453edb5b735792c5aac99bfedeb0';\r\n\r\nexport const CONTAINER_ID = 'AssBPkHiryqgSf5j96hje6rS2QJ8PMEkJx34iCXZWbsP';\r\nexport const OBJECT_ID1 = 'CWG5gTFYyAeFUQwj8XAHkMttk9z9fbn5sBJqN97LAvVF';\r\nexport const OBJECT_ID2 = '9FYG3a93v4tycaCc7w4QnnbM1EyDndNTGFB3QHoBs1oT';\r\nexport const OBJECT_ID3 = 'F9Z8NNx76drdzqufXc136dV8q1qxpXKkJvVNj3P1a72p';\r\nexport const OBJECT_ID4 = 'EFT77HCB8xMXCUyaDPBVvakJbEcu6SZXNcHNFbWogm5g';\r\nexport const OBJECT_ID5 = '6QGyCDfAV99fDMbMbc8Mv9EiNy57SrKHTE314LS5Ymmw';\r\nexport const OBJECT_ID6 = 'AaszehhYEUrc7ePGiGD8kYXjo3b6i8mJb8ZDsAactWL2';\r\n\r\nexport const PASSPORT_SCHEMA_NAME = 'Passport1';\r\nexport const ACCESS_KEY_SCHEMA_NAME = 'AccessKey1';\r\nexport const MAGIC = 844378958;\r\n\r\n```\r\n\r\n- `PRICE_FEED_SERVICE`: the contract hash PriceManager.\r\n\r\n- `OKEX_PROVIDER:` the contract hash OkexProvider .\r\n- `CONTAINER_ID:`  the container ID of NeoFS.\r\n- `OBJECT_ID1-6:`  the hash of images stored Neo FS.\r\n\r\n```\r\ncd demo\r\nnpm install\r\ncd ../\r\nts-node bootstrap/bootstrap.ts\r\ncd demo\r\nyarn start\r\n```\r\n\r\nWhen the demo is started successfully, visit http://localhost:3000/ to experience it.\r\n\r\n![home](./assets/home.png)\r\n\r\n## Demonstrating the dApp\r\n\r\nIn the demo, we will play the role of four distinct network participants to demonstrate the use of the digital identity system from the following perspectives:\r\n\r\n- A normal user named Oliver who generates a decentralized identifier, applies for credentials, then books and accesses the chosen accommodation\r\n- A government entity that will issue verifiable credentials to Oliver\r\n- An accommodation agency that will verify credentials and issue an access key\r\n- An IoT-enabled smart door lock that will allow entry to the accommodation after verifying the access key\r\n\r\n![](./assets/reservation.png)\r\n\r\nIn the following sections we will walk through the reservation process and explain the related codes behind.\r\n\r\n### 1. Generate DID\r\n\r\n![](./assets/apply.png)\r\n\r\nIn Oliver's card, click the button to generate a DID. At this time the dApp connects with the [Neoline wallet](https://neoline.io/) accordingly. If your browser does not install the extension Neoline, it will switch to the installation", "doc_id": "ff8f22d4-fb9c-4542-8ccd-04ed55ba1a24", "embedding": null, "doc_hash": "bbb01c75883141a269e377eca2e939e944a9c80faf47020c61477d6d8cfa66e2", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 8085, "end": 10456, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "39b342f3-5a80-4ec2-927b-da33779b783f", "3": "3fd8b9f5-d471-4fbc-9b0b-2a1f21951b51"}}, "__type__": "1"}, "3fd8b9f5-d471-4fbc-9b0b-2a1f21951b51": {"__data__": {"text": "If your browser does not install the extension Neoline, it will switch to the installation page.\r\n\r\n![generate_DID](./assets/generate_DID.png)\r\n\r\nWhen DID is successfully generated, you can click on the icon  ![button](./assets/button.png) to see the generated DID. \r\n\r\n![show_DID](./assets/show_DID.png)\r\n\r\n#### The codes\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/components/IdentityOwner/Owner.tsx\r\n// Line 454\r\n  generateDID = async (value: any) => {\r\n   var neo3Dapi; \r\n        try{\r\n             neo3Dapi=(await getNeoDapiInstances()).neo3Dapi;           \r\n        }catch\r\n        {\r\n            alert(\"You have not installed the browser plugin \\\"neoline\\\". \\nPlease run this demo in a chrome browser with the extension neoline installed.\\nRedirecting to chrome webstore...\");\r\n            window.location.href = \"https://neoline.io/\";\r\n        }\r\n        \r\n        const neo3Dapi = (await getNeoDapiInstances()).neo3Dapi;\r\n        const { address, label } = await neo3Dapi.getAccount();\r\n        console.log(\"address is: \", address);\r\n        value.changeAction('demoOwnerDID', 'waiting');\r\n\r\n        const did = this.props.ownerWallet.generateDID(configs.DID_NETWORK, address);\r\n        localStorage.setItem('ownerDID', did);\r\n        console.log('created DID', did);\r\n\r\n        if (did) {\r\n            value.changeAction('demoOwnerDID', 'success');\r\n            value.nextTip(`Act as ${Agents.owner} and ask the digital Passport to the ${Agents.government}`);\r\n        } else {\r\n            value.changeAction('demoOwnerDID', 'failure');\r\n            value.nextTip(`Error occurred while generating the DID. Please go back to the Help Page, click the reset button and try again!`);\r\n        }\r\n\r\n    }\r\n```\r\n\r\n### 2. Apply for a passport\r\n\r\nClick on `APPLY FOR PASSPORT` to go to the government's website.\r\n\r\n![apply_for_passport](./assets/apply_for_passport.png)\r\n\r\nFill in Oliver's information which can be fictitious in this demo. Note that our agency requires the flat borrower to be at least 17 years old.\r\n\r\n![passport_request](./assets/passport_request.png)\r\n\r\n#### The codes\r\n\r\nThe button `SEND REQUEST` invokes the following codes:\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/GovernmentPage/GovernmentPage.tsx\r\n// Line 195\r\n                    {this.getFormValidation() ? (\r\n                        <div", "doc_id": "3fd8b9f5-d471-4fbc-9b0b-2a1f21951b51", "embedding": null, "doc_hash": "43550f9381ac24665ab79c66c77fc0a03121482c0ca3f8a02663e516e53a5b8f", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 10406, "end": 12740, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "ff8f22d4-fb9c-4542-8ccd-04ed55ba1a24", "3": "cd4a3a57-c0cb-444e-b5db-cd1195251149"}}, "__type__": "1"}, "cd4a3a57-c0cb-444e-b5db-cd1195251149": {"__data__": {"text": "                  <div className=\"GetCredentialsButton\">\r\n                            <Fab onClick={() => this.getCredentials(value)} variant=\"extended\" color=\"secondary\"> Send Request </Fab>\r\n                        </div>\r\n```\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/GovernmentPage/GovernmentPage.tsx\r\n// Line 341\r\n    getCredentials = (value: any) => {\r\n\r\n        value.changeAction('govPageAsOwner', 'askForCredentials');\r\n\r\n        setTimeout(() => {\r\n            value.nextTip(`Play as ${Agents.government} to issue credentials to ${Agents.owner}`);\r\n\r\n            value.changeAction('govPageAsOwner', 'waitingForCredentials');\r\n            value.changeAction('demoOwnerCredFromGov', 'waiting');\r\n            value.changeAction('demoGov', 'pendingRequest');\r\n            value.changeAction('govPageAsGov', 'pendingRequest');\r\n\r\n        }, 3000);\r\n    }\r\n```\r\n\r\nTill now the codes do not really affect the operations on the blockchain. We just simulated Oliver's application for passport with the browser's local storage (using Oliver's DID and the personal information you filled in the form). In the next step, the government will issue a passport by signing a claim on the Neo blockchain, asserting that Oliver's personal information is acknowledged by the government. \r\n\r\n### 3. Issue the passport\r\n\r\n![](./assets/issue.png)\r\n\r\nNow let's switch the role and play as the government, who is an issuer of credentials. Click `GO TO GOVERNMENT Webpage` in the government card, and check Oliver's passport application.\r\n\r\n![go_to_government](./assets/go_to_government.png)\r\n\r\n![passport_requests_overview](./assets/passport_requests_overview.png)\r\n\r\nClick `ISSUE` to confirm that Oliver's personal information is correct, and issue the passport. \r\n\r\n#### The codes\r\n\r\nThe issue action is implemented by the following codes:\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/GovernmentPage/GovernmentPage.tsx\r\n// Line 263\r\n                <div>\r\n                    <PassportRequests\r\n                        activeRequest={request}\r\n                        denied={() => this.doNotIssueCredential(value)}\r\n                        issued={() => this.issueCredential(value, request)}\r\n                    />\r\n                </div>\r\n```\r\n\r\n##### issueCredential\r\n\r\nThe function `issueCredential` operates on the blockchain, using `seraph-id-sdk`.\r\n\r\n```typescript\r\n//", "doc_id": "cd4a3a57-c0cb-444e-b5db-cd1195251149", "embedding": null, "doc_hash": "9020fc309b4b1d216b5b30b1c901432bdb941457c4d4fd36c480a8f8e5fa35ef", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 12813, "end": 15203, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "3fd8b9f5-d471-4fbc-9b0b-2a1f21951b51", "3": "4703a3d3-c7a4-424d-9b03-df1b3a13b91b"}}, "__type__": "1"}, "4703a3d3-c7a4-424d-9b03-df1b3a13b91b": {"__data__": {"text": "seraph-id-demo/demo/src/containers/GovernmentPage/GovernmentPage.tsx\r\n// Line 356\r\n    issueCredential = (value: any, request: PassportReq) => {\r\n\r\n        value.changeAction('govPageAsGov', 'issuing');\r\n        const govIssuer = new SeraphIDIssuer(configs.GOVERNMENT_SCRIPT_HASH, configs.NEO_RPC_URL, configs.DID_NETWORK, configs.MAGIC)\r\n        const ownerDID = localStorage.getItem('ownerDID');\r\n\r\n        const claimID = uuid();\r\n        const newClaim = govIssuer.createClaim(claimID, configs.PASSPORT_SCHEMA_NAME,\r\n            {\r\n                'idNumber': 'J12393496',\r\n                'firstName': request.firstName,\r\n                'secondName': request.secondName,\r\n                'birthDate': request.birthDate,\r\n                'citizenship': request.citizenship,\r\n                'address': request.address,\r\n                'gender': request.gender\r\n            }, ownerDID ? ownerDID : '');\r\n\r\n        console.log('new created Claim', newClaim);\r\n        govIssuer.issueClaim(newClaim, configs.GOVERNMENT_ISSUER_PRIVATE_KEY).then(\r\n            res => {\r\n                setTimeout(() => {\r\n                    console.log('issueClaimID RES', res.id);\r\n\r\n                    try {\r\n                        this.props.ownerWallet.addClaim(res);\r\n                        const addedClaim = this.props.ownerWallet.getClaim(res.id);\r\n                        console.log('claim Added to the Wallet: ', addedClaim);\r\n\r\n                        localStorage.setItem('passportClaimID', res.id);\r\n                        localStorage.setItem('passportClaim', JSON.stringify(res));\r\n\r\n                        value.changeAction('agencyPageAsOwner', 'toChooseAFlat');\r\n                        value.nextTip(`Play as ${Agents.owner} and choose an accommodation from the ${Agents.smartAgency} Web Page.`);\r\n\r\n                        value.changeAction('govPageAsOwner', 'success');\r\n                        value.changeAction('demoOwnerCredFromGov',", "doc_id": "4703a3d3-c7a4-424d-9b03-df1b3a13b91b", "embedding": null, "doc_hash": "a5fcb0619b7b35d7b69c4aa15f478e44f2e5446f47b3bf13649eab0ae781e0ac", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 15208, "end": 17160, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "cd4a3a57-c0cb-444e-b5db-cd1195251149", "3": "cb8c0078-5409-4eb3-a17e-b0c6e22b77af"}}, "__type__": "1"}, "cb8c0078-5409-4eb3-a17e-b0c6e22b77af": {"__data__": {"text": "       value.changeAction('demoOwnerCredFromGov', 'success');\r\n                        value.changeAction('demoGov', 'credIssued');\r\n                        value.changeAction('govPageAsGov', 'credIssued');\r\n                    }\r\n                    catch (err) {\r\n                        console.error('issueClaim ERR', err);\r\n                        this.handleCredIssuingError(value);\r\n                    }\r\n                }, 2000);\r\n            }\r\n        ).catch(err => {\r\n            console.error('issueClaim ERR', err);\r\n            this.handleCredIssuingError(value);\r\n        });\r\n    }\r\n```\r\n\r\n##### govIssuer.issueClaim & ownerWallet.addClaim\r\n\r\nNow let's take a look at the core operations `govIssuer.issueClaim` and `ownerWallet.addClaim ` (see the codes below). \r\n\r\nUsing `issueClaim`, the government first checks that the claim has a proper structure that fits the schema which has been registered before. The schema used here is a template for claims that only fits passports. \r\n\r\nThen, the government puts its digital ID (DID) into the claim, signs the claim with the government's private key, and finally inject the claim ID (that can potentially be revoked) into an issuer-contract (The function `injectClaim` at line 161 in `seraph-id-sdk/src/issuer-contract.ts`). \r\n\r\nTo summarize, `issueClaim` helps the government register and sign a claim, store the claim ID on the blockchain, and return all the information about the claim. \r\n\r\n```typescript\r\n// seraph-id-sdk/src/issuer.ts\r\n// Line 102\r\n  public async issueClaim(\r\n    claim: IClaim,\r\n    issuerPrivateKey: string,\r\n    gas?: number,\r\n  ): Promise<IClaim> {\r\n    let result: IClaim = await this.validateClaimStructure(claim);\r\n    result.issuerDID =  this.contract.getIssuerDID();\r\n    result = await this.signClaim(claim, issuerPrivateKey);\r\n    result.tx = await this.contract.injectClaim(claim.id, issuerPrivateKey, gas);\r\n    // this.contract is a SeraphIDIssuerContract object\r\n    // which had been initialized in seraph-id-sdk/src/verifier.ts\r\n    return result;\r\n  }\r\n```\r\n\r\nAn important point is that, the `result` returned by `issueClaim` contains all the information about Oliver, and **cannot be modified by people who do not have the government's private key** (otherwise the signature from the government would be invalid). In this way, Oliver can take the claim `result` as his passport. \r\n\r\nOn the Neo blockchain, only the ID and the validity (whether it has been revoked by the government) of the claim is stored:\r\n\r\n```typescript\r\n// seraph-id-smart-contracts/Issuer/Issuer.cs\r\n// Line 87\r\n", "doc_id": "cb8c0078-5409-4eb3-a17e-b0c6e22b77af", "embedding": null, "doc_hash": "af8a3f2be0711bdd4419d9fce94bf7b2207c7815b81bdf48f90ca2e444ffad75", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 17119, "end": 19708, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "4703a3d3-c7a4-424d-9b03-df1b3a13b91b", "3": "e4814e06-4d5c-4989-bc9d-727eaa19619e"}}, "__type__": "1"}, "e4814e06-4d5c-4989-bc9d-727eaa19619e": {"__data__": {"text": "Line 87\r\n        public static bool InjectClaim(string id)\r\n        {\r\n            if (!IsCalledByAdmin()) throw new Exception(\"Only SmartContract admin can call this operation\");\r\n\r\n            ClaimStatus status = ByteArray2ClaimStatus((byte[])Claims.Get(id));\r\n\r\n            if (status != ClaimStatus.Nonexistent) throw new Exception(\"Claim already exists\");\r\n\r\n            Claims.Put(id, (ByteString)ClaimStatus2ByteArray(ClaimStatus.Valid));\r\n\r\n            return true;\r\n        }\r\n```\r\n\r\nThen the government should give the claim to Oliver's wallet for later use. This is implemented with the off-chain function `ownerWallet.addClaim`. Note that we do not put the claim directly in the wallet. Instead, we find Oliver's DID in his wallet, and attach the claim to the DID. \r\n\r\n```typescript\r\n// seraph-id-sdk/src/wallet.ts\r\n// Line 90\r\n  public addClaim(claim: IClaim) {\r\n    const acc = this.accounts2[this.didMap[claim.ownerDID]];\r\n    if (!acc) {\r\n      throw new SeraphIDError(`DID account ${claim.ownerDID} is not a part of this wallet. Add account first.`);\r\n    }\r\n    // We have found the DID in Oliver's wallet, and we actually add claim to the DID\r\n    acc.addClaim(claim);  // This invokes seraph-id-sdk/src/account.ts\r\n  }\r\n```\r\n\r\n```typescript\r\n// seraph-id-sdk/src/account.ts\r\n// Line 67\r\n  public addClaim(claim: IClaim) {\r\n    if (this.isLocked) {\r\n      throw new SeraphIDError('Decrypt account before adding claims.');\r\n    }\r\n    if (!claim || !claim.id) {\r\n      throw new SeraphIDError('This claim is invalid');\r\n    }\r\n\r\n    if (this.claims[claim.id]) {\r\n      throw new SeraphIDError(`Claim with id ${claim.id} already exists`);\r\n    }\r\n    this.claims[claim.id] = claim;\r\n  }\r\n```\r\n\r\nYou must have noticed that the claim information given to Oliver's wallet is not stored on the blockchain. Remember that the government has already executed `govIssuer.issueClaim`, which can `injectClaim` to store the claim ID on the blockchain. Oliver just needs a piece of off-chain information, and others can find Oliver's passport claim ID and validity (whether revoked) on the chain. Meanwhile, the off-chain information is signed by the government, and Oliver does not know the private key of the government, so the claim information held by Oliver cannot be manipulated by Oliver for a fake identity. This is why the `result` returned by `issueClaim` can serve as a valid `passportClaim` for Oliver. \r\n\r\n### 4. Book a flat\r\n\r\n![](./assets/book.png)\r\n\r\nAfter the government successfully issued a credential, go back to the Oliver's card again and click `BOOK A FLAT` on the left. \r\n\r\n![book_a_flat](./assets/book_a_flat.png)\r\n\r\nFeel free to book any flat, as long as you have enough GAS. In this page, the images of flats are loaded from HTTP gateways attached to NeoFS, and the prices are generated", "doc_id": "e4814e06-4d5c-4989-bc9d-727eaa19619e", "embedding": null, "doc_hash": "89bc0eb3ab20d1c7961fa2e81eef72e8babf11e6348a701128a9f4808dd77681", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 19743, "end": 22562, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "cb8c0078-5409-4eb3-a17e-b0c6e22b77af", "3": "19d69417-b741-47a8-8aff-54289f240dbe"}}, "__type__": "1"}, "19d69417-b741-47a8-8aff-54289f240dbe": {"__data__": {"text": "are loaded from HTTP gateways attached to NeoFS, and the prices are generated dynamically with Neo Oracle. The access to NeoFS is simply implemented with HTTP requests, which is not directly provided by the RPC service of Neo testnet. the URL to an image on NeoFS is consisted of the container ID and the object ID. On the other hand, the oracle is accessed through a price-feeder contract, and works by visiting public HTTP APIs on the Internet. The oracle nodes on the Neo blockchain must reach a consensus on the price to generate a valid oracle response. \r\n\r\n![accommodation](./assets/accommodation.png)\r\n\r\nBy clicking any `BOOK` button, your booking request is transmitted through the browser storage to the agency. Then click `SHARE CREDENTIAL`. You need to share Oliver's claim attached to his DID with the agency, so that the agency can read the digital passport issued by the government (returned from `issueClaim`) and check its validity (whether revoked) on the Neo blockchain. \r\n\r\n![share_credential](./assets/share_credential.png)\r\n\r\n#### The codes\r\n\r\nSee the following codes that presents these flats:\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/components/FlatCards/FlatCards.tsx\r\n// Line 42\r\n    const topFlats: FlatCard[] = [\r\n        { id: 1, pictureRef: configs.OBJECT_ID1, city: 'Florence', price: tokenPrice === 0 ? '' : GetTokenPrice(200, tokenPrice), rooms: 2, meters: 65, others: 'Bathtub' },\r\n        { id: 2, pictureRef: configs.OBJECT_ID2, city: 'Beijing', price: tokenPrice === 0 ? '' : GetTokenPrice(280, tokenPrice), rooms: 3, meters: 110, others: 'Garden' },\r\n        { id: 3, pictureRef: configs.OBJECT_ID3, city: 'New York', price: tokenPrice === 0 ? '' : GetTokenPrice(370, tokenPrice), rooms: 4, meters: 155, others: 'Terrace' },\r\n    ];\r\n\r\n    const bottomFlats: FlatCard[] = [\r\n        { id: 4, pictureRef: configs.OBJECT_ID4, city: 'Paris', price: tokenPrice === 0 ? '' : GetTokenPrice(195, tokenPrice), rooms: 2, meters: 54, others: 'Position' },\r\n        { id: 5, pictureRef: configs.OBJECT_ID5, city: 'Z\u00fcrich', price: tokenPrice === 0 ? '' : GetTokenPrice(450, tokenPrice), rooms: 5, meters: 240, others: 'Magnific view' },\r\n        { id: 6, pictureRef: configs.OBJECT_ID6, city: 'Madrid', price: tokenPrice === 0 ? '' : GetTokenPrice(210, tokenPrice), rooms: 2, meters: 80, others: 'Pool' },\r\n    ];\r\n```\r\n\r\n```typescript\r\n// utilizing Neo oracle to generate price\r\n// seraph-id-demo/demo/src/components/FlatCards/FlatCards.tsx\r\n// Line 35\r\n        async function getPriceFunc(){\r\n            let response = await pricefeed.getPrice();\r\n            setPrice(response);\r\n        }\r\n```\r\n\r\n```typescript\r\n// utilizing NeoFS to present images of flats\r\n//", "doc_id": "19d69417-b741-47a8-8aff-54289f240dbe", "embedding": null, "doc_hash": "9a0edcf118a8a8a436450ce0c0e247f81d40a585bced8d317a403acf0f1ccc61", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 22506, "end": 25201, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "e4814e06-4d5c-4989-bc9d-727eaa19619e", "3": "3b733aa5-3280-40d9-89db-7f35299d9cf8"}}, "__type__": "1"}, "3b733aa5-3280-40d9-89db-7f35299d9cf8": {"__data__": {"text": "utilizing NeoFS to present images of flats\r\n// seraph-id-demo/demo/src/components/FlatCards/FlatCards.tsx\r\n// Line 154\r\n    fetch('http://172.168.3.42:4030/get/'+ configs.CONTAINER_ID + '/' + imageRef)\r\n        .then(response => response.blob())\r\n        .then(image => {\r\n            // Create a local URL of that image\r\n            const localUrl = URL.createObjectURL(image);\r\n            setImageData(localUrl);\r\n        });\r\n```\r\n\r\nSee the following codes that implement `Share Credential`:\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 275\r\n                <div className=\"PageContainer\">\r\n                    <h1> You need to share your digital Passport in order to book the flat. </h1>\r\n                    <Fab variant=\"extended\" style={this.style} onClick={() => { this.doNotShareCredentials(value) }}> Don't Share </Fab>\r\n                    <Fab variant=\"extended\" style={this.style} className=\"RightButton\" onClick={() => { this.shareCredentials(value) }}> Share credential </Fab>\r\n                </div>\r\n```\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 133\r\n    shareCredentials = (value: any) => {\r\n\r\n        value.changeAction('agencyPageAsOwner', 'sharingCredentials');\r\n\r\n        const passportClaimID = localStorage.getItem('passportClaimID');\r\n        if (passportClaimID) {\r\n            const passportClaim = this.props.ownerWallet.getClaim(passportClaimID);\r\n\r\n            if (passportClaim) {\r\n                value.passportClaim = passportClaim;\r\n\r\n                console.log('passport Claim from Owner Wallet', passportClaim);\r\n\r\n                value.nextTip(`As ${Agents.smartAgency}, you need to verify the identity of ${Agents.owner} from your Web Page`);\r\n\r\n                value.changeAction('agencyPageAsOwner', 'waitingForValidation');\r\n                value.changeAction('agencyPageAsAgency', 'pendingRequest');\r\n                value.changeAction('demoOwnerCredFromAgency', 'waiting');\r\n                value.changeAction('demoAgency', 'pendingRequest');\r\n\r\n            } else {\r\n                value.changeAction('agencyPageAsOwner', 'digitalIdentityNotFound');\r\n", "doc_id": "3b733aa5-3280-40d9-89db-7f35299d9cf8", "embedding": null, "doc_hash": "2699729f987616b3830d89048c7aa738e238c4830469b69ff285f726cfaa4d76", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 25227, "end": 27448, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "19d69417-b741-47a8-8aff-54289f240dbe", "3": "547a81b4-1b42-427b-bc9e-d624a1a447a5"}}, "__type__": "1"}, "547a81b4-1b42-427b-bc9e-d624a1a447a5": {"__data__": {"text": "value.changeAction('agencyPageAsOwner', 'digitalIdentityNotFound');\r\n            }\r\n        } else {\r\n            value.changeAction('agencyPageAsOwner', 'digitalIdentityNotFound');\r\n        }\r\n\r\n    }\r\n```\r\n\r\nThe core operation is `getClaim`, which is off-chain. \r\n\r\n```typescript\r\n// seraph-id-sdk/src/wallet.ts\r\n// Line 104\r\n  public getClaim(claimId: string): IClaim | undefined {\r\n    for (const acc of this.accounts2) {\r\n      var claim = acc.getClaim(claimId);  // invokes seraph-id-sdk/src/account.ts\r\n      if (claim) return claim;\r\n    }\r\n  }\r\n```\r\n\r\n```typescript\r\n// seraph-id-sdk/src/account.ts\r\n// Line 67\r\n  public addClaim(claim: IClaim) {\r\n    if (this.isLocked) {\r\n      throw new SeraphIDError('Decrypt account before adding claims.');\r\n    }\r\n    if (!claim || !claim.id) {\r\n      throw new SeraphIDError('This claim is invalid');\r\n    }\r\n\r\n    if (this.claims[claim.id]) {\r\n      throw new SeraphIDError(`Claim with id ${claim.id} already exists`);\r\n    }\r\n    this.claims[claim.id] = claim;\r\n  }\r\n```\r\n\r\nWith Oliver's off-chain claim, the agency should get Oliver's passport claim injected on the blockchain. \r\n\r\n### 5. Verify Oliver's passport\r\n\r\n![](./assets/verify.png)\r\n\r\nNow the agency has got Oliver's shared off-chain information `passportClaim`, let's move on to play as the agency to verify Oliver's passport. In this demo, the agency is both a consumer and an issuer of credentials, and in this step, it is consuming the credential issued by the government. \r\n\r\n1. In the agency card, click `GO TO ACCOMMODATION DAPP` on the right. \r\n\r\n   What the agency actually do is getting the claim issued by the government on the blockchain according to the information provided by Oliver. \r\n\r\n   ![go_to_accommodation](./assets/go_to_accommodation.png)\r\n\r\n2. Click `VERIFY PASSPORT` to check the passport claim obtained from Oliver. \r\n\r\n   The agency will verify the credential in terms of the validity of the signature and criterions issued by the agency itself. See [codes related to step 2](#related-to-step-2).\r\n\r\n   ![verify_passport](./assets/verify_passport.png)\r\n\r\n3. When the verification is passed, click `ISSUE` to issue the access key to Oliver. See [codes related to step 3](#related-to-step-3)\r\n\r\n   ![issue_access_key](./assets/issue_access_key.png)\r\n\r\n#### The codes\r\n\r\nLet's dive into the codes behind step 2 and step 3 to figure out the logic of credential verification process.\r\n\r\n##### Related to step 2\r\n\r\nThe following codes implements the `Verify Passport` action:\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 341\r\n        else if", "doc_id": "547a81b4-1b42-427b-bc9e-d624a1a447a5", "embedding": null, "doc_hash": "b6741fc10f60699b62c184759ed828ea55db1eeed81038fa7f4d6cb9d3c52029", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 27421, "end": 30057, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "3b733aa5-3280-40d9-89db-7f35299d9cf8", "3": "12081b5d-0024-44b9-b086-96a2f0076974"}}, "__type__": "1"}, "12081b5d-0024-44b9-b086-96a2f0076974": {"__data__": {"text": "Line 341\r\n        else if (value.actions.agencyPageAsAgency === 'pendingRequest') {\r\n            return (\r\n                <div>\r\n                    <AccessKeyRequests\r\n                        activeRequest={new AccessKeyReq(0, city ? city : '', checkIn, checkOut, price ? price : '', PassportStatus.toVerify, AccessKeyStatus.waitingForPassport)}\r\n                        verified={() => this.verifyDigitalIdentity(value)}\r\n                    />\r\n                </div>\r\n            ......\r\n// function AccessKeyRequests at seraph-id-demo/demo/src/components/AccessKeyRequests/AccessKeyRequests.tsx\r\n```\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 51\r\n    verifyDigitalIdentity = (value: any) => {\r\n\r\n        value.changeAction('agencyPageAsAgency', 'verifying');\r\n\r\n        const agencyVerifier = new SeraphIDVerifier(configs.GOVERNMENT_SCRIPT_HASH, configs.NEO_RPC_URL, configs.DID_NETWORK, configs.MAGIC);\r\n        const passportClaim = value.passportClaim;\r\n        ......\r\n// Line 61\r\n        if (passportClaim) {\r\n            agencyVerifier.validateClaim(passportClaim, (passportClaim) => this.passportValidationFunc(passportClaim)).then(\r\n        ......\r\n```\r\n\r\n```typescript\r\n// seraph-id-sdk/src/verifier.ts\r\n// Line 84\r\n  public async validateClaim(claim: IClaim, validate: (claim: IClaim) => boolean): Promise<boolean> {\r\n    const now = new Date().getTime();\r\n    const from = claim.validFrom ? claim.validFrom.getTime() : now;\r\n    const to = claim.validTo ? claim.validTo.getTime() : now;\r\n\r\n    return (\r\n      from <= now &&\r\n      now <= to &&\r\n      (await this.verify(claim)) &&\r\n      (await this.contract.isValidClaim(claim.id)) &&\r\n      validate(claim)\r\n    );\r\n  }\r\n```\r\n\r\nIn the off-chain function `this.verify` above, by examining the signature and the validity of the signature, the agency knows that the claim is issued by the government, and that the claim is not faked or illegally modified. Given that the agency lists the government's DID as a trusted credential issuer, the content of Oliver's `passportClaim` is acknowledged by the agency. \r\n\r\nThen, using the on-chain function `this.contract.isValidClaim`, the agency reads the validity (whether revoked) of the `passportClaim` ID. \r\n\r\n```cs\r\n// seraph-id-smart-contracts/Issuer/Issuer.cs\r\n// Line 121\r\n        public static bool IsValidClaim(string", "doc_id": "12081b5d-0024-44b9-b086-96a2f0076974", "embedding": null, "doc_hash": "251a8e1820c2bdf0ed21ef44af33767e3c86be3464601c52170762df8012cb24", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 30111, "end": 32508, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "547a81b4-1b42-427b-bc9e-d624a1a447a5", "3": "b84aa510-59eb-4b0d-acba-6981e5e3c90c"}}, "__type__": "1"}, "b84aa510-59eb-4b0d-acba-6981e5e3c90c": {"__data__": {"text": "Line 121\r\n        public static bool IsValidClaim(string id)\r\n        {\r\n            ClaimStatus status = ByteArray2ClaimStatus((byte[])Claims.Get(id));\r\n            return status == ClaimStatus.Valid;\r\n        }\r\n```\r\n\r\nFinally, by executing `validate` in `validateClaim` (which is actually `passportValidationFunc` provided by the agency), the agency actually executes the custom function `passportValidationFunc` to check some criterions issued by the agency itself. In this demo, we require that Oliver must be older than 17. \r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 89\r\n    passportValidationFunc = (passportClaim: any) => {\r\n        let validated = false;\r\n        const birthDate = passportClaim.attributes.birthDate;\r\n        if (birthDate) {\r\n            const birthYear = birthDate.slice(-4);\r\n            const currentYear = new Date().getFullYear();\r\n            if (currentYear - birthYear > 17) {\r\n                validated = true;\r\n            }\r\n        }\r\n        return validated;\r\n    }\r\n```\r\n\r\nNow it has been confirmed by the agency that Oliver has valid passport, is older than 17, and is eligible to book a flat. \r\n\r\n##### Related to step 3\r\n\r\nWhen clicking on `ISSUE`, an `accessKeyClaim` is issued by the agency. \r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 341\r\n        else if (value.actions.agencyPageAsAgency === 'digitalIdentityVerified') {\r\n            return (\r\n                <div>\r\n                    <AccessKeyRequests\r\n                        activeRequest={new AccessKeyReq(0, city ? city : '', checkIn, checkOut, price ? price : '', PassportStatus.valid, AccessKeyStatus.pending)}\r\n                        issued={() => this.issueAccesskey(value)}\r\n                        denied={() => this.doNotIssueAccesskey(value)}\r\n                        ......\r\n```\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/containers/AccommodationDapp/AccommodationDapp.tsx\r\n// Line 199, in function issueAccesskey\r\n        agencyIssuer.issueClaim(newClaim, configs.AGENCY_ISSUER_PRIVATE_KEY).then(\r\n            res => {\r\n                setTimeout(() => {\r\n                    console.log('issueClaimID RES',", "doc_id": "b84aa510-59eb-4b0d-acba-6981e5e3c90c", "embedding": null, "doc_hash": "d0a208611fac7dd2d99dde93996e8db3b98bd88942c5405e221cadedbb457328", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 32480, "end": 34734, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "12081b5d-0024-44b9-b086-96a2f0076974", "3": "ef1fa717-d73a-4835-a2d4-1a8d16d3befb"}}, "__type__": "1"}, "ef1fa717-d73a-4835-a2d4-1a8d16d3befb": {"__data__": {"text": "           console.log('issueClaimID RES', res.id);\r\n\r\n                    try {\r\n                        this.props.ownerWallet.addClaim(res);\r\n                        const addedClaim = this.props.ownerWallet.getClaim(res.id);\r\n                        ......\r\n```\r\n\r\n```typescript\r\n// seraph-id-sdk/src/issuer.ts\r\n// Line 102\r\n  public async issueClaim(\r\n    claim: IClaim,\r\n    issuerPrivateKey: string,\r\n    gas?: number,\r\n  ): Promise<IClaim> {\r\n    let result: IClaim = await this.validateClaimStructure(claim);\r\n    result.issuerDID =  this.contract.getIssuerDID();\r\n    result = await this.signClaim(claim, issuerPrivateKey);\r\n    result.tx = await this.contract.injectClaim(claim.id, issuerPrivateKey, gas);\r\n    \r\n    return result;\r\n  }\r\n```\r\n\r\n```typescript\r\n// seraph-id-sdk/src/account.ts\r\n// Line 85\r\n  public getClaim(claimId: string): IClaim | undefined {\r\n    if (this.isLocked) {\r\n      throw new SeraphIDError('Decrypt account first');\r\n    }\r\n\r\n    return this.claims[claimId];\r\n  }\r\n```\r\n\r\nIn this demo, your DID is related to your browser's context. **Even if you `Reset` the demo, the `passportClaim` issued by the government still remains attached to your DID (and also valid on the blockchain).** Only if you close your browser tab and re-open the demo can the `passportClaim` be deleted, so that your browser will generate a new DID of \"Oliver\" for you to play with the demo again. **If you just `Reset` the demo, you can still book a flat without a new passport issued from the government, because your previous `passportClaim` is still stored in the browser's context**. \r\n\r\nAnother important aspect to mention is that, the validity of Oliver's `passportClaim` and his age (which should be over 17) is actually verified off the blockchain, only by the agency (for example, see the function `verifyOffline` at `seraph-id-sdk/src/verifier.ts`, line 64). This seems to be a centralized operation. However, let's pay special attention to the actual preconditions for the agency to issue Oliver's `accessKeyClaim`. Evidently, the only requirements for the `accessKeyClaim` are that `passportClaim` is valid (not revoked) and truly issued by the government, and that Oliver is old enough. Particularly, we do not need to let everyone, but only the agency to believe that the three fore mentioned conditions hold firm. Now that the raw data about Oliver's passport and personal information is signed by the government, the agency can certainly trust these raw data. Then, another hidden condition is that the agency trusts its own local computing environment and the codes in `seraph-id-sdk` (you can write your own codes if you do not really trust `seraph-id-sdk`). Therefore, all the results deduced from the agency's running codes can be trusted by the agency, without further on-chain operations. \r\n\r\nIn other words, all the computation and storage on the blockchain is intended for consensus (common trust) among all the participants of the blockchain. When trust is needed only for a single participant,", "doc_id": "ef1fa717-d73a-4835-a2d4-1a8d16d3befb", "embedding": null, "doc_hash": "0d147e818cdeac7c4af15028facf0fbe5e60fbd6b1d4c168cbd95fb68478ed79", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 34749, "end": 37780, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "b84aa510-59eb-4b0d-acba-6981e5e3c90c", "3": "9b7affd3-44f2-43c6-9df0-9d4a95e09f3b"}}, "__type__": "1"}, "9b7affd3-44f2-43c6-9df0-9d4a95e09f3b": {"__data__": {"text": "all the participants of the blockchain. When trust is needed only for a single participant, we do not have to spend extra GAS for consensus computation on the blockchain. \r\n\r\n### 6. Pay for the flat and try to open the door\r\n\r\n![](./assets/pay0.png)\r\n\r\nIn Oliver's card click on \"PAY THE FLAT\" to transfer GAS to the accommodation dApp. \r\n\r\n![pay_the_flat](./assets/pay.png)\r\n\r\nThen click \"OPEN THE DOOR\" on the bottom left to share the `accessKeyClaim` issued by the agency with the landlord.\r\n\r\n![open_the_door](./assets/open_the_door.png)\r\n\r\n#### The codes\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/components/IdentityOwner/Owner.tsx\r\n// Line 330\r\n<Fab onClick={() => this.openDoor(value)} variant=\"extended\" color=\"primary\">\r\n    {OWNER_DOOR_BTN_LABEL}\r\n</Fab>\r\n```\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/components/IdentityOwner/Owner.tsx\r\n// Line 330\r\n    openDoor = (value: any) => {\r\n\r\n        value.changeAction('demoOwnerOpenDoor', 'sharingCredentials');\r\n\r\n        const accessKeyClaimID = localStorage.getItem('accessKeyClaimID');\r\n        console.log('accessKeyClaimID', accessKeyClaimID);\r\n        if (accessKeyClaimID) {\r\n            const accessKeyClaim = this.props.ownerWallet.getClaim(accessKeyClaimID);\r\n```\r\n\r\n### 7. Verify the access key\r\n\r\n![](./assets/door.png)\r\n\r\nThe door (owned by the landlord) is the consumer of the credential `accessKeyClaim` issued by the agency. Click `VERIFY ACCESS KEY` on the bottom right to let the door verify the claim:\r\n\r\n![verify_access_key](./assets/verify_access_key.png)\r\n\r\n#### The codes\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/components/LandLord/LandLord.tsx\r\n// Line 30\r\n        } else if (value.actions.demoLandlord === 'pendingRequest') {\r\n            return (\r\n                <div>\r\n                    <p> There is a pending request from {Agents.owner}. </p>\r\n                    <div>\r\n                        <Fab variant=\"extended\" color=\"primary\" onClick={() => verifyAccessKey(value)}> Verify Access Key </Fab>\r\n                    </div>\r\n                </div>\r\n            );\r\n```\r\n\r\n```typescript\r\n// seraph-id-demo/demo/src/components/LandLord/LandLord.tsx\r\n// Line 66\r\n    const verifyAccessKey = (value: any) => {\r\n\r\n        value.changeAction('demoLandlord', 'verifying');\r\n\r\n        const landLordVerifier = new", "doc_id": "9b7affd3-44f2-43c6-9df0-9d4a95e09f3b", "embedding": null, "doc_hash": "1eceb40e6da14124dbde124e3f3749fda72829175ef38dbad2e2a7fa60cf78aa", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 37734, "end": 40042, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "ef1fa717-d73a-4835-a2d4-1a8d16d3befb", "3": "b06afb54-aef4-4b24-ac9a-e5446eff1b84"}}, "__type__": "1"}, "b06afb54-aef4-4b24-ac9a-e5446eff1b84": {"__data__": {"text": "       const landLordVerifier = new SeraphIDVerifier(configs.AGENCY_SCRIPT_HASH, configs.NEO_RPC_URL, configs.DID_NETWORK, configs.MAGIC);\r\n        const accessKeyClaim = value.accessKeyClaim;\r\n        console.log('access key Claim to Verify: ', value.accessKeyClaim);\r\n\r\n        if (accessKeyClaim) {\r\n\r\n            landLordVerifier.validateClaim(accessKeyClaim, (accessKeyClaim) => { return true; }).then(\r\n            ...\r\n```\r\n\r\n", "doc_id": "b06afb54-aef4-4b24-ac9a-e5446eff1b84", "embedding": null, "doc_hash": "8184a6da7a134defb00e6a7802a6265ab0468d30e144b6db258120806c4f2204", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}, "node_info": {"start": 40084, "end": 40517, "_node_type": "1"}, "relationships": {"1": "8d81e4c37bd0065fa700b516f7a1475991711404", "2": "9b7affd3-44f2-43c6-9df0-9d4a95e09f3b"}}, "__type__": "1"}, "41cc0ab9-0e9b-40de-ad88-b6e3e3d6132b": {"__data__": {"text": "---\ntitle: \"How to transfer NFT using PROPS's SDK\"\ndescription: \"Transfer NFT on the Neo blockchain from one wallet to another wallet using props's SDK.\"\nauthor: Apisit\ntags: [ \"PROPS\",\"REACT\",\"JS\"]\nskill: beginner\nsidebar: true\n# image: ./assets/cover.png\n---\n\n# How to transfer NFT using PROPS's SDK\nIn this short tutorial, you will learn how to transfer any NFT on the Neo blockchain using Props's SDK.\n\n## Prerequisite\n- [Neon.js](https://github.com/CityOfZion/neon-js)\n> npm i @cityofzion/neon-js  \n\n- [Props SDK](https://props.coz.io/d)\n> npm install @cityofzion/props --save  \n\n\n\n## Code\n\n```js\n//import these two libs\nimport * as PropsSDK from '@cityofzion/props'\nimport Neon from \"@cityofzion/neon-js\";\n\n\n\n//Code part to make a transfer\ntry {\n    const fromAccount = Neon.create.account(\"PUT YOUR WIF HERE\")\n    const node = Neon.create.rpcClient('https://mainnet1.neo.coz.io:443')\n    const assetHash = \"\" //smart contract hash\n    const toAddress = \"\" //N3 address\n    const tokenID = \"\" //A token Id of the NFT you want to transfer\n    const res = await PropsSDK.api.PuppetAPI.transfer(\n        node.url,\n        Neon.CONST.MAGIC_NUMBER.MainNet, //change this to match the network you are using.\n        assetHash,\n        toAddress,\n        tokenId,\n        fromAccount\n    )\n    console.log(res) //The response is published transaction ID.\n} catch (e) {\n    console.log(e)\n}\n```", "doc_id": "41cc0ab9-0e9b-40de-ad88-b6e3e3d6132b", "embedding": null, "doc_hash": "c78333e039afc5f0d435390aca4062c671f9bd4c1800a056905bde93526a8473", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/06/18/transfer-nft-with-props-sdk"}, "node_info": {"start": 0, "end": 1392, "_node_type": "1"}, "relationships": {"1": "73e1c22b9c4006822d09fb92e07cd21f7587e551"}}, "__type__": "1"}, "dc8d2404-56d2-48ad-8697-b238ce9f2846": {"__data__": {"text": "---\ntitle: \"How to transfer Neo, Gas or any NEP-17 token using neon-js\"\ndescription: \"Transfer Neo, Gas or NEP-17 token on the Neo blockchain from one wallet to another wallet using neon-js\"\nauthor: Apisit\ntags: [ \"NEP-17\",\"REACT\",\"JS\",\"NEON-JS\"]\nskill: beginner\nsidebar: true\n\n---\n\n\n# How to transfer Neo, GAS or any NEP-17 token using Neon.js\nIn this short tutorial, you will learn how to transfer any Nep-17 token on the Neo blockchain using neon-js\n\n## Prerequisite\n- [Neon.js](https://github.com/CityOfZion/neon-js)\n> npm i @cityofzion/neon-js  \n\n\n## Code\n\n```js\nimport { default as Neon, sc } from \"@cityofzion/neon-js\";\n\nconst GAS = '0xd2a4cff31913016155e38e474a2c06d08be276cf' //GAS Contract. You can replace this with any NEP-17 compatible smart contract.\nconst networkMagic = Neon.CONST.MAGIC_NUMBER.MainNet // Using mainnet\nconst rpcAddress = \"\" // You can find reliable node here -> https://dora.coz.io/monitor\nconst fromAccount = Neon.create.account(\"WIF HERE\") // You can create your account with a WIF.\nconst toAddress = \"NQx4coq2SUdEti7USwL4J6GSggmefGGNt8\" \nconst contract = new Neon.experimental.SmartContract(Neon.u.HexString.fromHex(GAS),\n    {\n    networkMagic,\n    rpcAddress,\n    account\n    }\n)\n\nconst data = null;\nconst amount = 1 * Math.pow(10,8) // We are trasferring 1 GAS\nconst operation = \"transfer\"\nconst params = [\n    sc.ContractParam.hash160(fromAccount.address),\n    sc.ContractParam.hash160(toAddress),\n    sc.ContractParam.integer(amount),\n    sc.ContractParam.any(null)\n]\n\nlet result;\ntry {\n    const txHash = await contract.invoke(operation, params);\n    console.log(txHash) //this is a transaction ID\n} catch (e) {   \n    console.log(e);\n}\n```\n\n\n", "doc_id": "dc8d2404-56d2-48ad-8697-b238ce9f2846", "embedding": null, "doc_hash": "fa3f97a40e03c0d12ca321251a798379526be32d7f966d4cdbf95570cf6e7709", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/17/transfer-neo-or-gas-with-neon-js"}, "node_info": {"start": 0, "end": 1685, "_node_type": "1"}, "relationships": {"1": "6cc61083cf586833e12a5035116ba2bb9fa1d901"}}, "__type__": "1"}, "3c4e6346-04f7-4185-a079-d58f62172899": {"__data__": {"text": "---\ntitle: \"Decentralized public key server for ECDH with NeoNS\"\ndescription: \"Using NeoNS as a decentralized public key server for key exchange for ECDH.\"\nauthor: Apisit\ntags: [ \"NEONS\",\"REACT\",\"JS\",\"NEON-JS\"]\nskill: beginner\nsidebar: true\nimage: ./assets/send_message.png\n---\n\n\nIf you are familiar with ECDH, You know that you need to exchange public keys between two parties to generate a shared secret to encrypt and decrypt the data. Exchanging a public key relies on having a centralized server to store your public key and the ability to retreive it.\n\nWith the new NeoNS recently launched, one of a great features about NeoNS is the ability to add multiple records to your .neo domain. Similar to what you are doing with a normal web domain name. i.e. CNAME, TXT, IP, etc. \nAnd the best part about this is \u2014 It's **decentralized** and is available for you to use today!\n\nLet's dive in on how NeoNS can help make storing public key and exchanging key easier.\n\nHere is the flows explaining how it works.\n\nAlice is sending Bob an encrypted message.   \n![Send Message](assets/send_message.png)\n\nBob is reading a message from Alice.\n![Read Message](assets/read_message.png)\n\nFirst you need to set a record on you .neo domain with a [`setRecord`](/docs/n3/neons/api/setRecord) method. \n\n\nTo retreive all records from a particular .neo domain, you will need [`getAllRecords`](/docs/n3/neons/api/getAllRecords) method.\nThen you can check whether an owner of particular .neo domain has a public key registered in their records or not.\n\nThere you have it. Multiple records on NeoNS is a very powerful feature. Hope this can inspire you to build something!\n\nYou can read more about NeoNS API [here](/docs/n3/neons/index).\n\nCheck out the sample application at [https://github.com/cityOfZion/inbox](https://github.com/cityOfZion/inbox)\n\n\n", "doc_id": "3c4e6346-04f7-4185-a079-d58f62172899", "embedding": null, "doc_hash": "58dc78dac1c2aed4d25985ab3953f5dad67e0cae2d31f5ca26075f4070543cfb", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/25/neons-as-a-public-key-server"}, "node_info": {"start": 0, "end": 1832, "_node_type": "1"}, "relationships": {"1": "e519087b56ec56ee156342768e56317e11499bac"}}, "__type__": "1"}, "2af5e81d-4cf0-4edd-9b90-635408d6e9f5": {"__data__": {"text": "---\ntitle: \"Neonjs Cheatsheet\"\ndescription: \"Get up to speed with neon-js, Helpful cheatsheet to give you complete overview of the neon-js you need to know when building dapp on Neo!\"\nauthor: Apisit\ntags: [ \"REACT\",\"JS\",\"NEON-JS\"]\nskill: beginner\nsidebar: true\n---\n\nHelpful cheatsheet to give you complete overview of the neon-js methods you need to know when building dapp on Neo!\n\n## Wallet or Account\n\n`Neon.create.account()` can take different type of value such as WIF, private key, public key, script hash and when you leave it blank it will create a new keypair.\n\n#### Create a new keypair\n```js\nconst account = Neon.create.account()\nconsole.log(a.address)\nconsole.log(a.WIF)\nconsole.log(a.privateKey)\nconsole.log(a.publicKey)\n```\n\n#### Account with WIF\n```js\nconst WIF = \"L4VqMgXehi1k97C3dH3xR5XWMWt1BxfYNj87QrYxVVBhjo7woAKa\"\nconst account = Neon.create.account(WIF)\nconsole.log(a.address)\nconsole.log(a.WIF)\nconsole.log(a.privateKey)\nconsole.log(a.publicKey)\n```\n\n#### Get address from a public key\n```js\nconst publicKey = \"031b88e4809d7c384b7f3fb4d04559870cbc3cddf3c50a38bae9fedb90256127b6\"\nconst account = Neon.create.account(publicKey)\nconsole.log(a.address)\n```\n\n\n#### Get address from a script hash\n```js\nconst scriptHash = \"ec35d21b1b121dd5653454f8c615709ec7ba36a7\"\nconst account = Neon.create.account(scriptHash)\nconsole.log(a.address)\n```\n\n## Smart contract\n\n#### Invoke a method in a smart contract\n```js\nconst contractHash = \"0xd2a4cff31913016155e38e474a2c06d08be276cf\" //GAS Contract\nconst networkMagic = Neon.CONST.MAGIC_NUMBER.MainNet\nconst rpcAddress = \"https://n3seed1.ngd.network:10332/\"\nconst WIF = \"L4VqMgXehi1k97C3dH3xR5XWMWt1BxfYNj87QrYxVVBhjo7woAKa\"\nconst account = Neon.create.account(WIF)\nconst contract = new Neon.experimental.SmartContract(Neon.u.HexString.fromHex(contractHash),\n    {\n        networkMagic,\n        rpcAddress,\n        account\n    }\n)\n\nconst amount = 1 * Math.pow(10,8)\nconst operation = \"transfer\"\nconst params = [\n    sc.ContractParam.hash160(account.address),\n    sc.ContractParam.hash160(\"NbA7bUJM6bFTvVEcYZhkwaSMKnVho4faRW\"),\n    sc.ContractParam.integer(amount),\n    sc.ContractParam.any(\"\")\n]\n\nlet result;\ntry {\n    const txHash = await contract.invoke(operation, params);\n    console.log(txHash)\n} catch (e) {\n    console.log(e);\n}\n```\n\n## Validating\nneon-js provides convenient methods in `Neon.is` package. Some of the example below. \n```js\nconst address = Neon.is.address(\"NbA7bUJM6bFTvVEcYZhkwaSMKnVho4faRW\")\nconsole.log(address)", "doc_id": "2af5e81d-4cf0-4edd-9b90-635408d6e9f5", "embedding": null, "doc_hash": "3515deff1a22afad7224abcfdeecc9465c9748d4a89e33ff4b231cdc98b40de5", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/30/neonjs-cheatsheet"}, "node_info": {"start": 0, "end": 2492, "_node_type": "1"}, "relationships": {"1": "d010f143013b96e788b3a27751a9869dd863b83c", "3": "278c79c9-e59c-4e08-b6a2-694c3efe1c8a"}}, "__type__": "1"}, "278c79c9-e59c-4e08-b6a2-694c3efe1c8a": {"__data__": {"text": "//true\n```\n\n\n\n\n## Converter\nneon-js provides several method to convert value from one to another. You will be using some of these methods very often. Most of the time When something is wrong, it's likely related to the data type.\n\n```js\nlet b64 = Neon.u.hex2base64(Neon.u.str2hexstring(\"apisit.neo\"))\nconsole.log(b64)\n```\n\n```js\nlet reversedHex = Neon.u.reverseHex(\"3ff68d232a60f23a5805b8c40f7e61747f6f61ce\")\nconsole.log(reversedHex)\n```\n\n\n\n\n\n\n\n\n\n\n", "doc_id": "278c79c9-e59c-4e08-b6a2-694c3efe1c8a", "embedding": null, "doc_hash": "4d1dccb2d01d468045d73dcd9ae3cb507468a1c34fad250dcd1b67155555d2f9", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/30/neonjs-cheatsheet"}, "node_info": {"start": 2493, "end": 2941, "_node_type": "1"}, "relationships": {"1": "d010f143013b96e788b3a27751a9869dd863b83c", "2": "2af5e81d-4cf0-4edd-9b90-635408d6e9f5"}}, "__type__": "1"}, "e6b78bd2-77f0-49cf-8dd7-26a3e9f2642b": {"__data__": {"text": "---\ntitle: 'Neo3-boa - Writing a fungible token contract using Python'\ndescription: \"This tutorial provides step-by-step instructions for creating a fungible token contract on the Neo \nblockchain using Python and Neo3-boa. It does so by demonstrating how to comply with the NEP-17 standard.\"\nauthor: coz.io\ntags: [\"PYTHON\", \"NEO3BOA\", \"SMART CONTRACT\", \"NEP-17\"]\nskill: BEGINNER\nimage: \"./assets/boa-logo.png\"\nsidebar: true\n---\n\n## 0. Introduction\n\nThis tutorial will show you how to create a fungible token using [Neo3-boa](https://github.com/CityOfZion/neo3-boa), the\ntool to compile Python scripts into NeoVM compatible code. The token will be compliant with the NEP-17 standard.\n\n### What is the NEP-17 Standard?\n\nThe [NEP-17 standard](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) defines a set of rules that\na token contract must follow to be considered a valid fungible token on the Neo blockchain.\nThe standard defines methods, events and callbacks that the contract must implement. The NEP-17 standard is the\nequivalent of the ERC-20 standard in Ethereum.\n\n### Why follow a standard?\n\nWhen a contract follows a standard, other contracts and applications can interact with it without having to know the\nimplementation details. This allows other developers to easily create interoperable contracts and applications.\n\n## 1. Prerequisites\n\nThis tutorial assumes that you have [Python 3.7](https://www.python.org/) or any higher version,\n[Visual Studio Code](https://code.visualstudio.com/), the\n[Python VS Code extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) and the\n[Neo Blockchain Toolkit VS Code extension](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit)\ninstalled and properly configured.\n\n> To properly configure Neo Blockchain Toolkit you should follow their [tutorial](https://developers.neo.org/tutorials/2021/05/27/getting-started-with-the-neo-blockchain-toolkit).\n\n## 2. Create a virtual environment using VS Code and install Neo3-boa\n\nCreate a new folder for your project and open it in VS Code, then create a file named `requirements.txt` and write\n`neo3-boa==1.0.0` inside it.\n\nPress `Ctrl+Shift+P` to open the Command Palette and type `Python: Create Environment`, select `Venv`, your Python\nversion, select the `requirements.txt` file, and press `Ok`, so that the virtual environment can be created.\n\nCreate a new terminal by pressing `Ctrl+Shift+P` and typing `Terminal: Create New Terminal`. You should see `(.venv)`\nat the beginning of the terminal line. You'll only be able to compile your contract if the virtual environment is\nactive.\n\n> Note: if you are using a powershell terminal you might get an error stating that\n> the `Activate.ps1 cannot be loaded because running scripts is disabled on this system`, you can just use a cmd\n> terminal instead by clicking on the **\u2304** icon on right side of the **+** symbol on the terminal tab and selecting\n> `Command Prompt`. If everything is alright you should see `(.venv)` at the beginning of the terminal line.\n> ![Activating CMD on Terminal](./assets/terminal-cmd.png)\n\nAlso, if you have a Python file open, you can check the lower right corner of VS Code to verify that the virtual environment\nis active, and it's using Python 3.\n![Venv active", "doc_id": "e6b78bd2-77f0-49cf-8dd7-26a3e9f2642b", "embedding": null, "doc_hash": "fdbbfcdef13f3c2cd1c26daeda2509721563e82d63e3317bde7c0abd5f3b7696", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}, "node_info": {"start": 0, "end": 3316, "_node_type": "1"}, "relationships": {"1": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2", "3": "7b768f0f-f7c6-4d77-9c2f-defa531b7643"}}, "__type__": "1"}, "7b768f0f-f7c6-4d77-9c2f-defa531b7643": {"__data__": {"text": "the virtual environment\nis active, and it's using Python 3.\n![Venv active on Python file](./assets/venv-active.png)\n\n## 3. Create the Coin contract file\n\nCreate a new file called `coin.py` and add the following method to indicate that a hundred million tokens will exist in\nthe contract:\n\n```python\nfrom boa3.builtin.compile_time import public\n\n@public(name='totalSupply', safe=True)\ndef total_supply() -> int:\n    return 10 ** 8\n```\n\n## 4. Compiling the contract\n\nOpen the VS Code terminal and run the following command to compile the contract:\n\n```bash\nneo3-boa compile coin.py --debug\n```\n\nBe sure to include the `--debug` flag to generate the debug information required by the Neo Blockchain Toolkit.\n\nIf the compilation is successful, you should see 3 new files:\n\n- `coin.nef`: The contract binary file (bytecode);\n- `coin.manifest.json`: The contract manifest file. This file is required to deploy the contract and is automatically\ngenerated by the compiler alongside the nef.\n- `coin.nefdbgnfo`: The debug information file. This file is required by the Neo Blockchain Toolkit to debug the contract.\n\n## 5. Running the contract using the Neo Blockchain Toolkit\n\nClick on the `.nef` or `.manifest.json` generated file and press `Ctrl+Shift+D` to open the Run and Debug panel.\nClick on `create a launch.json file` and select `Neo Contract` as the environment.\n![Creating a debug launch file](./assets/create-launch-json.png)\n\nThis will generate a `.vscode/launch.json` file inside the project folder. Open the file and replace the `operation`\nfield value with `totalSupply`:\n\n```json\n...\n\"invocation\": {\n    \"operation\": \"totalSupply\",\n    \"args\": []\n}\n...\n```\n\nNext, press `F5` to start debugging. The Neo Blockchain Toolkit will simulate a contract deploy so that you can invoke the\n`totalSupply` method in a test environment. This environment will not be persisted after the debug session ends. So, if\nyou want to test a method that changes the contract storage, you will need to deploy the contract to a local neo-express\ninstance or the testnet.\n\nDebugging the `totalSupply` method will not be very useful, but it's a good way to test if your environment is working\nproperly. After debugging, you should get a message on the debug console showing the GAS consumed and the return value of the method.\n\n## 6. Contract Initialization\n\nTo test some methods that we will implement, having some data on the storage will be important. So we will save some\ninformation on the storage when the contract is deployed.\n\nNeo has some methods that are automatically called by the Virtual Machine, for example, there is the `_deploy` method\nthat is called whenever a contract is deployed or updated, and is often used in all kinds of smart contracts.\n\n### _deploy\n\nWe will be using this method to initialize the contract storage, giving all tokens to the one who deployed the smart\ncontract. To do so, we will be using the `runtime.script_container` to get the script hash of the sender.\n\nThen, save the sender as the owner of the whole total supply on the storage with the `storage.put` method. Our strategy\nis to have the owner as the key and the quantity of tokens they own as the value of the storage.\n\n```python\n# update coin.py adding the following code:\nfrom typing import Any\nfrom boa3.builtin.contract import Nep17TransferEvent\nfrom boa3.builtin.interop import runtime, storage\nfrom boa3.builtin.interop.blockchain import Transaction\n\n\n@public\ndef _deploy(data: Any, update: bool):\n", "doc_id": "7b768f0f-f7c6-4d77-9c2f-defa531b7643", "embedding": null, "doc_hash": "77facdbb521c423fc75eca4e2e43d90a3cd91f1043f8e1c151096c43102f26fa", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}, "node_info": {"start": 3253, "end": 6738, "_node_type": "1"}, "relationships": {"1": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2", "2": "e6b78bd2-77f0-49cf-8dd7-26a3e9f2642b", "3": "5359db3b-e972-4ac1-a676-fdb066956a7f"}}, "__type__": "1"}, "5359db3b-e972-4ac1-a676-fdb066956a7f": {"__data__": {"text": "Transaction\n\n\n@public\ndef _deploy(data: Any, update: bool):\n    # if the contract is being deployed for the first time, add all tokens to the contract deployer\n    if not update:\n        container: Transaction = runtime.script_container\n        storage.put(container.sender, total_supply())\n\n        # trigger the Transfer event to notify that the tokens were minted, it's a NEP-17 requirement\n        # check out more about NEP-17 events here: https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki#events\n        Nep17TransferEvent(None, container.sender, total_supply())\n```\n\nMethods that start with an underscore are not callable by the user. In this example, the `_deploy` method is called\nautomatically when the contract is deployed.\n\n## 7. NEP-17 Methods\n\nThe NEP-17 standard defines 5 mandatory methods that a token contract must implement:\n\n### symbol\n\nReturns the token symbol. In this example, we will return the string `COIN`.\n\n```python\n# update coin.py adding the following code:\n\n@public(safe=True)\ndef symbol() -> str:\n    return \"COIN\"\n```\n\nWhen writting methods that will be used by other contracts or users, you need to use the `public` decorator.\nThe `safe` parameter indicates that when calling the method it won't change the contract storage and can be safely\ncalled by other contracts or users.\n\nIf you want to run one of the new methods that will be added, you need to recompile the smart contract using\nNeo3-boa again and change the operation in the `.vscode/launch.json` file to the name of the method you want to run.\n\nStrings returned by the contract are shown as a hex string by default, that's why if you try to run the test by just\nchanging the operation to `symbol`, the return is `434f494e` instead of `COIN`. But you can add the\n[`\"return-types\"`](https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md#return-types)\nconfiguration to cast it into a legible string.\n\n```json\n...\n\"invocation\": {\n    \"operation\": \"symbol\",\n    \"args\": []\n},\n\"return-types\": [\n    \"string\",\n],\n...\n```\n\n### decimals\n\nReturns the number of decimals used by the token.\nThis is used to provide decimal precision when displaying token balances because Neo doesn't support floating types as\nthey are often unreliable. In this example, we will return **2**, but in a real situation you'd want a bigger decimal number.\n\n```python\n# update coin.py adding the following code:\n\n@public(safe=True)\ndef decimals() -> int:\n    return 2\n```\n\n### totalSupply\n\nReturns the total supply of the token. We already implemented this method before, but, since we just defined that there will be\n2 decimals, we need to multiply the supply by 10 ** 2.\n\n```python\n# update coin.py by overwriting the total_supply method with the following code:\n\n@public(name='totalSupply', safe=True)\ndef total_supply() -> int:\n    return (10 ** 8) * 10 ** decimals()\n```\n\nThe `name` parameter is used to define how this method will be called. Since Neo's first supported languages were C#, VB.Net, F#,\nJava, and Kotlin, the naming convention of the Neo standards methods is not snake_case. However,", "doc_id": "5359db3b-e972-4ac1-a676-fdb066956a7f", "embedding": null, "doc_hash": "9834c45e8df6bb5529a497c5cf9807cdba55da784dd386675bd9267ed3d4b170", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}, "node_info": {"start": 6747, "end": 9866, "_node_type": "1"}, "relationships": {"1": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2", "2": "7b768f0f-f7c6-4d77-9c2f-defa531b7643", "3": "cec4096e-c53b-49f9-a307-519a60122f02"}}, "__type__": "1"}, "cec4096e-c53b-49f9-a307-519a60122f02": {"__data__": {"text": "convention of the Neo standards methods is not snake_case. However, Neo3-boa allows you to write a\nmore pythonic code with snake_case methods as long as you add the `name` parameter to the `public` decorator when necessary.\n\n### balanceOf\n\nReturns the balance of a token for a specific address. Every token should be stored and linked to an address in the\ncontract storage, and to access the storage we will be using the `storage.get` method.\n\nIn this smart contract, we made it so that the key to accessing the number of tokens an address has is just the script hash\nof the address (represented by the `UInt160` type).\n\nThe `storage.get` method returns a `bytes` value, so we need to convert it to an `int` before returning it.\n\n```python\n# update coin.py adding the following code:\nfrom boa3.builtin.type import UInt160, helper as type_helper\n\n@public(name='balanceOf', safe=True)\ndef balance_of(account: UInt160) -> int:\n    assert len(account) == 20   # NEP-17 requires the address to be 20 bytes long\n\n    amount_in_bytes = storage.get(account)\n    return type_helper.to_int(amount_in_bytes)\n```\n\nTo run methods that require parameters, you need to add the parameters to the `args` list in the `.vscode/launch.json`\nfile. For example, to run the `balanceOf` method, you need to add the address you want to check the balance of.\nSince we didn't define [a signer](https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md#signers),\nthe account that will deploy the smart contract is `0x0000000000000000000000000000000000000000` and that is the\nonly account that will have a balance that is not zero.\n\n```json\n...\n\"invocation\": {\n    \"operation\": \"balanceOf\",\n    \"args\": [ \"0x0000000000000000000000000000000000000000\" ]\n},\n...\n```\n\n### transfer\n\nTransfers a number of tokens from the sender to the specified address, passing an optional data parameter.\n\nWe won't be using the data parameter in this example, but it's required by the NEP-17 standard. This method has a lot\nof peculiarities detailed in the comments in the code below.\n\n```python\n# update coin.py adding the following code:\n\nfrom boa3.builtin.interop import blockchain, contract\n\n@public\ndef transfer(from_address: UInt160, to_address: UInt160, amount: int, data: Any) -> bool:\n    # NEP-17 requires the address to be 20 bytes long\n    assert len(from_address) == 20   \n    assert len(to_address) == 20\n    # it also requires the amount to be greater than or equal to 0\n    assert amount >= 0\n\n    tokens_sender = balance_of(from_address)\n    tokens_receiver = balance_of(to_address)\n\n    # to transfer tokens, the sender must be authenticated. \n    # We will use the `check_witness` method to verify that the sender is the owner of the tokens.\n    if not runtime.check_witness(from_address):\n        return False\n\n    if tokens_sender < amount:\n        return False\n\n    # if `amount` is 0 or the sender is also the receiver, there is no need to change the storage\n    if amount != 0 and from_address != to_address:\n        # use the `storage.put` method to change the storage\n        storage.put(from_address,", "doc_id": "cec4096e-c53b-49f9-a307-519a60122f02", "embedding": null, "doc_hash": "b9227c937531753562a7076cd89d54b5f9fb0dea86dbbe1f288fd01eb1cd7148", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}, "node_info": {"start": 9865, "end": 12972, "_node_type": "1"}, "relationships": {"1": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2", "2": "5359db3b-e972-4ac1-a676-fdb066956a7f", "3": "0d72f687-0afd-4425-8643-6d6e4d3957fc"}}, "__type__": "1"}, "0d72f687-0afd-4425-8643-6d6e4d3957fc": {"__data__": {"text": "to change the storage\n        storage.put(from_address, type_helper.to_bytes(tokens_sender - amount))\n        storage.put(to_address, type_helper.to_bytes(tokens_receiver + amount))\n    \n    # if the method succeeds, it must fire the Transfer event\n    # check out more details here: https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki#transfer-1\n    Nep17TransferEvent(from_address, to_address, amount)\n    # if the to_address is a smart contract, it must call the onNEP17Payment\n    if blockchain.get_contract(to_address) is not None:\n        contract.call_contract(to_address, 'onNEP17Payment', [from_address, amount, data])\n\n    return True\n```\n\nSince the `transfer` method changes values on the storage, it can not be flagged as `safe`.\n\nThe `transfer` method is the most complex method of the NEP-17 standard. It's the method you should debug the most.\nHowever, to reach the end of the function and return `True`, you need to pass through the `check_witness` function.\nSo, you can either add a [signer](https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md#signers)\nwhen invoking or add a [runtime property](https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md#runtime)\nto always return `True` when doing a `check_witness`.\n\nIn the example below, we are transfering 5.00 tokens from the `0x00000...` address to the `0x99999...` address.\n\n```json\n...\n\"invocation\": {\n    \"operation\": \"transfer\",\n    \"args\": [\n        \"0x0000000000000000000000000000000000000000\",\n        \"0x9999999999999999999999999999999999999999\",\n        500,\n        null\n    ]\n},\n\"runtime\": {\n    \"witnesses\": {\n        \"check-result\": true\n    }\n}\n...\n```\n\nSince the debugger is just simulating an invocation, the changes made to the storage won't persist after the debug\nsession has ended. So, trying to check the balance of the `0x99999...` address later will not return `500`.\n\n## 8. NEP-17 Callbacks\n\nThe NEP-17 standard defines a single callback called `onNEP17Payment` that must be called if the recipient is a contract.\nThis callback is used to notify the recipient that it has received tokens. It's up to the recipient to implement this\ncallback. The recipient can reject the transfer by raising an exception.\n\n```python\n# update coin.py adding the following code:\nfrom boa3.builtin.contract import abort\n\n@public(name='onNEP17Payment')\ndef on_nep17_payment(from_address: UInt160, amount: int, data: Any):\n    abort()     # in this example, the smart contract is rejecting all transfers made to it\n```\n\n## 9. Manifest Metadata\n\nNeo3-boa allows you to define the contract metadata using the `metadata` decorator. This information is used to generate\nthe contract manifest file. You can check the `coin.manifest.json` before and after adding the method to see the changes\nmade into the file.\n\nIn our example, we will define the contract name and the supported standards, but you can add any information you want\nto. We are also adding permissions to allow our contract to call", "doc_id": "0d72f687-0afd-4425-8643-6d6e4d3957fc", "embedding": null, "doc_hash": "1c61a55b49ac53bf0fb7b29495d2f2a76e2b05fb72e989845cc72bbef1111fc8", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}, "node_info": {"start": 12987, "end": 16033, "_node_type": "1"}, "relationships": {"1": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2", "2": "cec4096e-c53b-49f9-a307-519a60122f02", "3": "ee9e8276-b4d6-495e-8600-fde59ec94b3f"}}, "__type__": "1"}, "ee9e8276-b4d6-495e-8600-fde59ec94b3f": {"__data__": {"text": "add any information you want\nto. We are also adding permissions to allow our contract to call the `onNEP17Payment` method. The compiler automatically\ndoes this step, but it's a good practice to define the permissions in the contract code.\n\n```python\nfrom boa3.builtin.compile_time import metadata, NeoMetadata\n\n@metadata\ndef manifest_metadata() -> NeoMetadata:\n    meta = NeoMetadata()\n    meta.name = 'Coin Contract'\n    meta.supported_standards = ['NEP-17']\n    meta.add_permission(methods=['onNEP17Payment'])\n    return meta\n```\n\n## 10. Other examples\n\nCheck out this [simple NEP-17](https://github.com/CityOfZion/neo3-boa/blob/v1.0.0/boa3_test/examples/simple_nep17.py)\nexample to see a smart contract that is as simple as the one in this example, but is more cohesive and uses some more\nfeatures in its implementation.\n\nAlso, check out this [more complex NEP-17](https://github.com/CityOfZion/neo3-boa/blob/v1.0.0/boa3_test/examples/nep17.py)\nexample to examine a smart contract that can also mint and burn tokens.\n\n## 11. What's next\n\nTo test your smart contract in a more realist environment, you might want to create a private network with neo-express\nand deploy your smart contract into it, or deploy your smart contract into a testnet.\n", "doc_id": "ee9e8276-b4d6-495e-8600-fde59ec94b3f", "embedding": null, "doc_hash": "2b72fbd9b1dc2b7783ac61f27c09503b0c63cf32e1980c95057bed3e95ef9e61", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}, "node_info": {"start": 15984, "end": 17230, "_node_type": "1"}, "relationships": {"1": "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2", "2": "0d72f687-0afd-4425-8643-6d6e4d3957fc"}}, "__type__": "1"}, "3114a604-e25e-4560-ac10-2e906c78a132": {"__data__": {"text": "---\ntitle: 'neow3j - Implementing a NEP-11 (NFT) Smart Contract in Java'\ndescription: \"This tutorial describes an example implementation of a NEP-11 smart contract developed in Java using the neow3j library.\"\nauthor: AxLabs\ntags: [\"NEP-11\", \"JAVA\", \"NEOW3J\"]\nskill: beginner\nimage: \"./assets/neow3j-padded.png\"\nsource: https://github.com/neow3j/neow3j-examples-java/blob/7000d804257f8d573ac8cc369aa2a3abb303a751/src/main/java/io/neow3j/examples/contractdevelopment/contracts/NonFungibleToken.java\nsidebar: true\n---\n\n<div align=\"center\" style={{ padding: '0% 25% 0% 25%' }}>\n  <img src=\"/tooling/neow3j.png\" alt=\"neow3j\" width=\"75%\" style={{ padding: '0% 0% 5% 0%' }}/>\n  <h1> <a href=\"https://github.com/neow3j/neow3j\">neow3j</a> <sub><small>v3.21.1</small></sub></h1>\n</div>\n\nNeow3j is a development toolkit that provides easy and reliable tools to build Neo dApps and Smart Contracts using the\nJava platform (Java, Kotlin, Android). Check out [neow3j.io](https://neow3j.io) for more detailed information on neow3j\nand the technical documentation.\n\n## 1. Setup\n\nIf you haven't already set up your environment to use the neow3j library, you can check out our tutorial about setting\nup a neow3j project [here](/tutorials/neow3j-smart-contract-quickstart).\n\n## 2. NEP-11 Overview\n\nThe NEP-11 is the non-fungible token (NFT) standard on Neo N3. Have a look at its official documentation\n[here](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki).\n\n## 3. Example NEP-11 Contract\n\nThe following example code represents a possible implementation for a token that supports the NEP-11 standard.\n\n:::info\n\nThis example contract supports **indivisible** NFTs (i.e., `decimals` is equal to 0).\n\n<br />\n\nThe NEP-11 standard also describes what methods are required if divisible NTFs should be supported. Some of the methods\nrequired for divisible NFTS deviate from the ones discussed here. Check out the documentation of the NEP-11 standard\n[here](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki) for more details.\n\n:::\n\n```java\npackage io.neow3j.examples.contractdevelopment.contracts;\n\nimport io.neow3j.devpack.ByteString;\nimport io.neow3j.devpack.Contract;\nimport io.neow3j.devpack.Hash160;\nimport io.neow3j.devpack.Helper;\nimport io.neow3j.devpack.Iterator;\nimport io.neow3j.devpack.Map;\nimport io.neow3j.devpack.Runtime;\nimport io.neow3j.devpack.Storage;\nimport io.neow3j.devpack.StorageContext;\nimport io.neow3j.devpack.StorageMap;\nimport io.neow3j.devpack.annotations.DisplayName;\nimport io.neow3j.devpack.annotations.ManifestExtra;\nimport io.neow3j.devpack.annotations.OnDeployment;\nimport io.neow3j.devpack.annotations.Permission;\nimport io.neow3j.devpack.annotations.Safe;\nimport", "doc_id": "3114a604-e25e-4560-ac10-2e906c78a132", "embedding": null, "doc_hash": "ba73fbacf0aa8a90f8c424b84d0969586da7dc1ba45fa57fb2d46b4c1f2fb2c4", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 0, "end": 2718, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "3": "b79841a8-2f61-48b8-b656-36cb693ea582"}}, "__type__": "1"}, "b79841a8-2f61-48b8-b656-36cb693ea582": {"__data__": {"text": "io.neow3j.devpack.annotations.Safe;\nimport io.neow3j.devpack.annotations.SupportedStandard;\nimport io.neow3j.devpack.constants.CallFlags;\nimport io.neow3j.devpack.constants.FindOptions;\nimport io.neow3j.devpack.constants.NativeContract;\nimport io.neow3j.devpack.constants.NeoStandard;\nimport io.neow3j.devpack.contracts.ContractManagement;\nimport io.neow3j.devpack.events.Event3Args;\nimport io.neow3j.devpack.events.Event4Args;\n\n@DisplayName(\"FurryFriends\")\n@ManifestExtra(key = \"author\", value = \"AxLabs\")\n@SupportedStandard(neoStandard = NeoStandard.NEP_11)\n@Permission(nativeContract = NativeContract.ContractManagement)\npublic class NonFungibleToken {\n\n    static final int contractMapPrefix = 0;\n    static final byte[] totalSupplyKey = new byte[]{0x00};\n    static final byte[] tokensOfKey = new byte[]{0x01};\n    static final byte[] contractOwnerKey = new byte[]{0x02};\n\n    static final int registryMapPrefix = 1;\n    static final int ownerOfMapPrefix = 2;\n    static final int balanceMapPrefix = 3;\n\n    static final int propNameMapPrefix = 8;\n    static final int propDescriptionMapPrefix = 9;\n    static final int propImageMapPrefix = 10;\n    static final int propTokenURIMapPrefix = 11;\n\n    static final String propName = \"name\";\n    static final String propDescription = \"description\";\n    static final String propImage = \"image\";\n    static final String propTokenURI = \"tokenURI\";\n\n    // endregion keys of key-value pairs in NFT properties\n    // region deploy, update, destroy\n\n    @OnDeployment\n    public static void deploy(Object data, boolean update) throws Exception {\n        if (!update) {\n            initializeContract((Hash160) data);\n        }\n        if (!Runtime.checkWitness(contractOwner())) {\n            throw new Exception(\"No authorization\");\n        }\n    }\n\n    public static void update(ByteString script, String manifest) throws Exception {\n        if (!Runtime.checkWitness(contractOwner())) {\n            throw new Exception(\"No authorization\");\n        }\n        new ContractManagement().update(script, manifest);\n    }\n\n    public static void destroy() throws Exception {\n        if (!Runtime.checkWitness(contractOwner())) {\n            throw new Exception(\"No authorization\");\n        }\n        new ContractManagement().destroy();\n    }\n\n    // endregion deploy, update, destroy\n    // region NEP-11 methods\n\n    @Safe\n    public static String symbol() {\n        return \"NEOW\";\n    }\n\n    @Safe\n    public static int decimals() {\n        return 0;\n    }\n\n    @Safe\n    public static int totalSupply() {\n        return new StorageMap(Storage.getReadOnlyContext(), contractMapPrefix).getInt(totalSupplyKey);\n    }\n\n    @Safe\n    public static int balanceOf(Hash160 owner) throws Exception {\n        if", "doc_id": "b79841a8-2f61-48b8-b656-36cb693ea582", "embedding": null, "doc_hash": "8133129d6ffbb5a0c2f844294d761aabafe59e0d5814fd09ec73c33d6ab87204", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 2677, "end": 5422, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "3114a604-e25e-4560-ac10-2e906c78a132", "3": "d79e85ef-f5b1-4fca-8184-fcae7f637134"}}, "__type__": "1"}, "d79e85ef-f5b1-4fca-8184-fcae7f637134": {"__data__": {"text": "balanceOf(Hash160 owner) throws Exception {\n        if (!Hash160.isValid(owner)) {\n            throw new Exception(\"The parameter 'owner' must be a 20-byte address.\");\n        }\n        return getBalance(Storage.getReadOnlyContext(), owner);\n    }\n\n    @Safe\n    public static Iterator<ByteString> tokensOf(Hash160 owner) throws Exception {\n        if (!Hash160.isValid(owner)) {\n            throw new Exception(\"The parameter 'owner' must be a 20-byte address.\");\n        }\n        return (Iterator<ByteString>) Storage.find(Storage.getReadOnlyContext(), createTokensOfPrefix(owner),\n                (byte) (FindOptions.KeysOnly | FindOptions.RemovePrefix));\n    }\n\n    public static boolean transfer(Hash160 to, ByteString tokenId, Object data) throws Exception {\n        if (!Hash160.isValid(to)) {\n            throw new Exception(\"The parameter 'to' must be a 20-byte address.\");\n        }\n        if (tokenId.length() > 64) {\n            throw new Exception(\"The parameter 'tokenId' must be a valid NFT ID (64 or less bytes long).\");\n        }\n        Hash160 owner = ownerOf(tokenId);\n        if (!Runtime.checkWitness(owner)) {\n            return false;\n        }\n        onTransfer.fire(owner, to, 1, tokenId);\n        if (owner != to) {\n            StorageContext ctx = Storage.getStorageContext();\n            new StorageMap(ctx, ownerOfMapPrefix).put(tokenId, to.toByteArray());\n\n            new StorageMap(ctx, createTokensOfPrefix(owner)).delete(tokenId);\n            new StorageMap(ctx, createTokensOfPrefix(to)).put(tokenId, 1);\n\n            decreaseBalanceByOne(ctx, owner);\n            increaseBalanceByOne(ctx, to);\n        }\n        if (new ContractManagement().getContract(to) != null) {\n            Contract.call(to, \"onNEP11Payment\", CallFlags.All, new Object[]{owner, 1, tokenId, data});\n        }\n        return true;\n    }\n\n    // endregion NEP-11 methods\n    // region non-divisible NEP-11 methods\n\n    @Safe\n    public static Hash160 ownerOf(ByteString tokenId) throws Exception {\n        if (tokenId.length() > 64) {\n            throw new Exception(\"The parameter 'tokenId' must be a valid NFT ID (64 or less bytes long).\");\n        }\n        ByteString owner = new StorageMap(Storage.getReadOnlyContext(), ownerOfMapPrefix).get(tokenId);\n        if (owner == null) {\n            throw new Exception(\"This token id does not exist.\");\n        }\n       ", "doc_id": "d79e85ef-f5b1-4fca-8184-fcae7f637134", "embedding": null, "doc_hash": "b15585804f11bcfa32b094c03b61caa81a7b33140478fca40882cf6202c4e854", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 5423, "end": 7802, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "b79841a8-2f61-48b8-b656-36cb693ea582", "3": "f4c0a9ab-cfbf-4820-9b65-862a6acbf8ff"}}, "__type__": "1"}, "f4c0a9ab-cfbf-4820-9b65-862a6acbf8ff": {"__data__": {"text": "exist.\");\n        }\n        return new Hash160(owner);\n    }\n\n    // endregion non-divisible NEP-11 methods\n    // region optional NEP-11 methods\n\n    @Safe\n    public static Iterator<Iterator.Struct<ByteString, ByteString>> tokens() {\n        return (Iterator<Iterator.Struct<ByteString, ByteString>>) new StorageMap(Storage.getReadOnlyContext(),\n                registryMapPrefix).find(FindOptions.RemovePrefix);\n    }\n\n    @Safe\n    public static Map<String, String> properties(ByteString tokenId) throws Exception {\n        if (tokenId.length() > 64) {\n            throw new Exception(\"The parameter 'tokenId' must be a valid NFT ID (64 or less bytes long).\");\n        }\n        Map<String, String> p = new Map<>();\n        StorageContext ctx = Storage.getReadOnlyContext();\n        ByteString tokenName = new StorageMap(ctx, propNameMapPrefix).get(tokenId);\n        if (tokenName == null) {\n            throw new Exception(\"This token id does not exist.\");\n        }\n\n        p.put(propName, tokenName.toString());\n        ByteString tokenDescription = new StorageMap(ctx, propDescriptionMapPrefix).get(tokenId);\n        if (tokenDescription != null) {\n            p.put(propDescription, tokenDescription.toString());\n        }\n        ByteString tokenImage = new StorageMap(ctx, propImageMapPrefix).get(tokenId);\n        if (tokenImage != null) {\n            p.put(propImage, tokenImage.toString());\n        }\n        ByteString tokenURI = new StorageMap(ctx, propTokenURIMapPrefix).get(tokenId);\n        if (tokenURI != null) {\n            p.put(propTokenURI, tokenURI.toString());\n        }\n        return p;\n    }\n\n    // endregion optional NEP-11 methods\n    // region events\n\n    @DisplayName(\"Mint\")\n    private static Event3Args<Hash160, ByteString, Map<String, String>> onMint;\n\n    @DisplayName(\"Transfer\")\n    private static Event4Args<Hash160, Hash160, Integer, ByteString> onTransfer;\n\n    // endregion events\n    // region custom methods\n\n    @Safe\n    public static Hash160 contractOwner() {\n        return new StorageMap(Storage.getReadOnlyContext(), contractMapPrefix).getHash160(contractOwnerKey);\n    }\n\n    public static void mint(Hash160 owner, ByteString tokenId, Map<String, String> properties) throws Exception {\n        if (!Runtime.checkWitness(contractOwner())) {\n            throw new Exception(\"No authorization\");\n        }\n        StorageContext ctx = Storage.getStorageContext();\n        StorageMap registryMap = new StorageMap(ctx, registryMapPrefix);\n        if (registryMap.get(tokenId) != null) {\n            throw new Exception(\"This token", "doc_id": "f4c0a9ab-cfbf-4820-9b65-862a6acbf8ff", "embedding": null, "doc_hash": "ccdefb2ae4b21133ba6824478db5f66568c352ec66fe6e3595718535ff339ac5", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 7833, "end": 10414, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "d79e85ef-f5b1-4fca-8184-fcae7f637134", "3": "df8cd480-4fb3-4886-814f-5b27cfc8eb27"}}, "__type__": "1"}, "df8cd480-4fb3-4886-814f-5b27cfc8eb27": {"__data__": {"text": "{\n            throw new Exception(\"This token id already exists.\");\n        }\n        if (!properties.containsKey(propName)) {\n            throw new Exception(\"The properties must contain a value for the key 'name'.\");\n        }\n        String tokenName = properties.get(propName);\n        new StorageMap(ctx, propNameMapPrefix).put(tokenId, tokenName);\n        if (properties.containsKey(propDescription)) {\n            String description = properties.get(propDescription);\n            new StorageMap(ctx, propDescriptionMapPrefix).put(tokenId, description);\n        }\n        if (properties.containsKey(propImage)) {\n            String image = properties.get(propImage);\n            new StorageMap(ctx, propImageMapPrefix).put(tokenId, image);\n        }\n        if (properties.containsKey(propTokenURI)) {\n            String tokenURI = properties.get(propTokenURI);\n            new StorageMap(ctx, propTokenURIMapPrefix).put(tokenId, tokenURI);\n        }\n\n        registryMap.put(tokenId, tokenId);\n        new StorageMap(ctx, ownerOfMapPrefix).put(tokenId, owner.toByteArray());\n        new StorageMap(ctx, createTokensOfPrefix(owner)).put(tokenId, 1);\n\n        increaseBalanceByOne(ctx, owner);\n        incrementTotalSupplyByOne(ctx);\n        onMint.fire(owner, tokenId, properties);\n    }\n\n    public static void burn(ByteString tokenId) throws Exception {\n        Hash160 owner;\n        try {\n            owner = ownerOf(tokenId);\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        if (!Runtime.checkWitness(owner)) {\n            throw new Exception(\"No authorization.\");\n        }\n\n        StorageContext ctx = Storage.getStorageContext();\n\n        new StorageMap(ctx, registryMapPrefix).delete(tokenId);\n        new StorageMap(ctx, propNameMapPrefix).delete(tokenId);\n        new StorageMap(ctx, propDescriptionMapPrefix).delete(tokenId);\n        new StorageMap(ctx, propImageMapPrefix).delete(tokenId);\n        new StorageMap(ctx, propTokenURIMapPrefix).delete(tokenId);\n        new StorageMap(ctx, ownerOfMapPrefix).delete(tokenId);\n\n        new StorageMap(ctx, createTokensOfPrefix(owner)).delete(tokenId);\n        decreaseBalanceByOne(ctx, owner);\n        decrementTotalSupplyByOne(ctx);\n        onTransfer.fire(owner, null, 1, tokenId);\n    }\n\n    // endregion custom methods\n    // region private helper methods\n\n    private static void initializeContract(Hash160 contractOwner)", "doc_id": "df8cd480-4fb3-4886-814f-5b27cfc8eb27", "embedding": null, "doc_hash": "320835b3eb70a2bb8a26bc4ddf92074dbab9ab3ec38b71d08a3580697c1eac51", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 10397, "end": 12837, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "f4c0a9ab-cfbf-4820-9b65-862a6acbf8ff", "3": "e2a3ec8d-62b4-4bed-b9bf-de1e2cc3fc54"}}, "__type__": "1"}, "e2a3ec8d-62b4-4bed-b9bf-de1e2cc3fc54": {"__data__": {"text": "helper methods\n\n    private static void initializeContract(Hash160 contractOwner) {\n        StorageMap contractMap = new StorageMap(Storage.getStorageContext(), contractMapPrefix);\n        contractMap.put(totalSupplyKey, 0);\n        contractMap.put(contractOwnerKey, contractOwner);\n    }\n\n    // When storage context is already loaded, this is a cheaper method than `contractOwner()`.\n    private static Hash160 contractOwner(StorageContext ctx) {\n        return new StorageMap(ctx, contractMapPrefix).getHash160(contractOwnerKey);\n    }\n\n    private static int getBalance(StorageContext ctx, Hash160 owner) {\n        return new StorageMap(ctx, balanceMapPrefix).getIntOrZero(owner.toByteArray());\n    }\n\n    private static void increaseBalanceByOne(StorageContext ctx, Hash160 owner) {\n        new StorageMap(ctx, balanceMapPrefix).put(owner.toByteArray(), getBalance(ctx, owner) + 1);\n    }\n\n    private static void decreaseBalanceByOne(StorageContext ctx, Hash160 owner) {\n        new StorageMap(ctx, balanceMapPrefix).put(owner.toByteArray(), getBalance(ctx, owner) - 1);\n    }\n\n    private static void incrementTotalSupplyByOne(StorageContext ctx) {\n        StorageMap contractMap = new StorageMap(ctx, contractMapPrefix);\n        int updatedTotalSupply = contractMap.getInt(totalSupplyKey) + 1;\n        contractMap.put(totalSupplyKey, updatedTotalSupply);\n    }\n\n    private static void decrementTotalSupplyByOne(StorageContext ctx) {\n        StorageMap contractMap = new StorageMap(ctx, contractMapPrefix);\n        int updatedTotalSupply = contractMap.getInt(totalSupplyKey) - 1;\n        contractMap.put(totalSupplyKey, updatedTotalSupply);\n    }\n\n    private static byte[] createTokensOfPrefix(Hash160 owner) {\n        return Helper.concat(tokensOfKey, owner.toByteArray());\n    }\n\n    // endregion private helper methods\n\n}\n```\n\n## 4. Contract Breakdown\n\n### Imports\n\nThe imports show the neow3j devpack classes that are used in the example contract. Check out neow3j devpack's\n[javadoc](https://javadoc.io/doc/io.neow3j/devpack/latest/index.html) for a full overview of classes and methods that\nare supported.\n\n```java\npackage io.neow3j.examples.contractdevelopment.contracts;\n\nimport io.neow3j.devpack.ByteString;\nimport io.neow3j.devpack.Contract;\nimport io.neow3j.devpack.Hash160;\nimport io.neow3j.devpack.Helper;\nimport io.neow3j.devpack.Iterator;\nimport io.neow3j.devpack.Map;\nimport io.neow3j.devpack.Runtime;\nimport io.neow3j.devpack.Storage;\nimport io.neow3j.devpack.StorageContext;\nimport io.neow3j.devpack.StorageMap;\nimport io.neow3j.devpack.annotations.DisplayName;\nimport io.neow3j.devpack.annotations.ManifestExtra;\nimport io.neow3j.devpack.annotations.OnDeployment;\nimport io.neow3j.devpack.annotations.Permission;\nimport io.neow3j.devpack.annotations.Safe;\nimport", "doc_id": "e2a3ec8d-62b4-4bed-b9bf-de1e2cc3fc54", "embedding": null, "doc_hash": "cd61d67a2ba9ef9ba948fc4fd633a7100fce648bbdd9e5c879c2f9ef8b14089d", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 12796, "end": 15586, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "df8cd480-4fb3-4886-814f-5b27cfc8eb27", "3": "249028d3-e1bd-449c-956d-2c30e2eb677c"}}, "__type__": "1"}, "249028d3-e1bd-449c-956d-2c30e2eb677c": {"__data__": {"text": "io.neow3j.devpack.annotations.Safe;\nimport io.neow3j.devpack.annotations.SupportedStandard;\nimport io.neow3j.devpack.constants.CallFlags;\nimport io.neow3j.devpack.constants.FindOptions;\nimport io.neow3j.devpack.constants.NativeContract;\nimport io.neow3j.devpack.constants.NeoStandard;\nimport io.neow3j.devpack.contracts.ContractManagement;\nimport io.neow3j.devpack.events.Event3Args;\nimport io.neow3j.devpack.events.Event4Args;\n```\n\n### Contract-specific Information\n\nAnnotations on top of the smart contract's class represent contract-specific information. The following annotations are\nused in the example contract:\n\n_`@DisplayName`_\n\nSpecifies the contract's name. If this annotation is not present, the class name is used for the contract's name.\n\n_`@ManifestExtra`_\n\nAdds the provided key-value pair information in the manifest's `extra` field. You can also use `@ManifestsExtras` to\ngather multiple `@ManifestExtra` annotations (results in the same as when using single `@ManifestExtra` annotations).\n\n_`@SupportedStandard`_\n\nSets the `supportedStandards` field in the manifest. You can use `neoStandard = ` with the enum `NeoStandard` to use an\nofficial standard (see [here](https://github.com/neo-project/proposals#readme)), or `customStandard = ` with a custom\nstring value.\n\n_`Permission`_\nSpecifies, which third-party contracts and methods the smart contract is allowed to call. By default (i.e., if no\npermission annotation is set), the contract is not allowed to call any contract. Use `contract = ` and `methods = ` to\nspecify, respectively, which contracts and methods are allowed.\n\n_For example, if you want to allow transferring NEO tokens from the contract, you can add the annotation\n`@Permission(nativeContract = NativeContract.NeoToken, methods = \"transfer\")`._\n\n```java\n@DisplayName(\"FurryFriends\")\n@ManifestExtra(key = \"author\", value = \"AxLabs\")\n@SupportedStandard(neoStandard = NeoStandard.NEP_11)\n@Permission(nativeContract = NativeContract.ContractManagement)\npublic class NonFungibleToken {\n```\n\n### Constants\n\nYou can set a constant value for the contract by using `final` variables. These values are always loaded when the\ncontract is called and cannot be changed once the contract is deployed. If a final value does not include a method call\n(e.g., raw types, or a final `String` value, such as \"name\"), then these values are inlined during compilation.\n\n:::note\n\nAll contract constants and all methods must be `static` (since the object-orientation of the JVM is different on the\nNeoVM).\n\n:::\n:::tip\n\nThe contract owner of this example contract is fixed (i.e., it is a `final` variable). If you intend to provide a way to\nchange such a variable, you should not store it as a `final` variable. Rather, you would store it as a value in the\nstorage, which provides the possibility to be modified through a method.\n\n:::\n\n```java\nstatic final int contractMapPrefix = 0;\nstatic final byte[] totalSupplyKey = new byte[]{0x00};\nstatic final byte[] tokensOfKey = new byte[]{0x01};\nstatic final byte[] contractOwnerKey = new byte[]{0x02};\n\nstatic final int registryMapPrefix = 1;\nstatic final int ownerOfMapPrefix = 2;\nstatic final int balanceMapPrefix = 3;\n\nstatic final int propNameMapPrefix = 8;\nstatic final int propDescriptionMapPrefix = 9;\nstatic final int propImageMapPrefix = 10;\nstatic final int propTokenURIMapPrefix = 11;\n\nstatic final", "doc_id": "249028d3-e1bd-449c-956d-2c30e2eb677c", "embedding": null, "doc_hash": "0262fe7429b45deaa3decf226b3057a9b70cd0d952977d4398d8a46213d7dceb", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 15617, "end": 18985, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "e2a3ec8d-62b4-4bed-b9bf-de1e2cc3fc54", "3": "d936f2dc-223a-4b4f-9914-4ae54f1ae9f5"}}, "__type__": "1"}, "d936f2dc-223a-4b4f-9914-4ae54f1ae9f5": {"__data__": {"text": "10;\nstatic final int propTokenURIMapPrefix = 11;\n\nstatic final String propName = \"name\";\nstatic final String propDescription = \"description\";\nstatic final String propImage = \"image\";\nstatic final String propTokenURI = \"tokenURI\";\n```\n\n### Deploy\n\nOnce a deployment transaction is made (containing the contract and other parameters), the contract data is first stored\non the blockchain and then the native contract `ContractManagement` calls the smart contract's `deploy()` method. In\nneow3j, that method is marked with the annotation `@OnDeployment`. In the example, when the smart contract is deployed,\nthe private method `initializeContract` is called to initialize the contract's storage (see further below in the section\nabout private helper methods).\n\n```java\n@OnDeployment\npublic static void deploy(Object data, boolean update) throws Exception {\n    if (!update) {\n        initializeContract((Hash160) data);\n    }\n    if (!Runtime.checkWitness(contractOwner())) {\n        throw new Exception(\"No authorization\");\n    }\n}\n```\n\n### Update and Destroy\n\nIn order to update the contract, the following method first checks that the contract owner witnessed the transaction and\nthen the native `ContractManagement.update()` method is called. When updating a smart contract, you can change the smart\ncontract's code and its manifest. This means that you can update how the contract programmatically manages its storage\ncontext.\n\n:::note\n\nAdditionally to changing the smart contract's script and manifest, the method `ContractManagement.update()` eventually\ncalls the smart contract's `deploy()` method (shown above) with the boolean `update` set to true.\n\n:::\n\n```java\npublic static void update(ByteString script, String manifest) throws Exception {\n    if (!Runtime.checkWitness(contractOwner())) {\n        throw new Exception(\"No authorization\");\n    }\n    new ContractManagement().update(script, manifest);\n}\n```\n\nThe example contract also provides the option to destroy the smart contract. As well as the `update()` method, it first\nverifies that the contract owner witnessed the transaction and then calls the method `ContractManagement.destroy()`\nmethod.\n\n:::caution\n\nWhen the native method `ContractManagement.destroy()` is called from a smart contract, the whole smart contract's\nstorage context is erased, and the contract can no longer be used.\n\n:::\n\n```java\npublic static void destroy() throws Exception {\n    if (!Runtime.checkWitness(contractOwner())) {\n        throw new Exception(\"No authorization\");\n    }\n    new ContractManagement().destroy();\n}\n```\n\n### NEP-11 Methods\n\nThe required NEP-11 methods are implemented as follows. If a method does not change the state of the contract (i.e., it\nis just used for reading), it can be annotated with the `@Safe` annotation. Out of the required NEP-11 methods, only the\n`transfer()` method should be writing to the contract's storage and, thus, is not annotated as safe.\n\n```java\n@Safe\npublic static String symbol() {\n    return \"NEOW\";\n}\n\n@Safe\npublic static int decimals() {\n    return 0;\n}\n\n@Safe\npublic static int totalSupply() {\n    return new StorageMap(Storage.getReadOnlyContext(), contractMapPrefix).getInt(totalSupplyKey);\n}\n\n@Safe\npublic static int balanceOf(Hash160 owner) throws Exception {\n    if (!Hash160.isValid(owner)) {\n        throw new Exception(\"The parameter 'owner' must be a 20-byte address.\");\n    }\n    return getBalance(Storage.getReadOnlyContext(), owner);\n}\n\n@Safe\npublic static", "doc_id": "d936f2dc-223a-4b4f-9914-4ae54f1ae9f5", "embedding": null, "doc_hash": "1a371cc410bd5a0572a89249d0f503a2f7381ddd3ad3faf58dda10cbbe0b577c", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 18972, "end": 22440, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "249028d3-e1bd-449c-956d-2c30e2eb677c", "3": "7225bae9-9fcb-4a86-bed3-46303b77f562"}}, "__type__": "1"}, "7225bae9-9fcb-4a86-bed3-46303b77f562": {"__data__": {"text": "owner);\n}\n\n@Safe\npublic static Iterator<ByteString> tokensOf(Hash160 owner) throws Exception {\n    if (!Hash160.isValid(owner)) {\n        throw new Exception(\"The parameter 'owner' must be a 20-byte address.\");\n    }\n    return (Iterator<ByteString>) Storage.find(Storage.getReadOnlyContext(), createTokensOfPrefix(owner),\n            (byte) (FindOptions.KeysOnly | FindOptions.RemovePrefix));\n}\n\npublic static boolean transfer(Hash160 to, ByteString tokenId, Object data) throws Exception {\n    if (!Hash160.isValid(to)) {\n        throw new Exception(\"The parameter 'to' must be a 20-byte address.\");\n    }\n    if (tokenId.length() > 64) {\n        throw new Exception(\"The parameter 'tokenId' must be a valid NFT ID (64 or less bytes long).\");\n    }\n    Hash160 owner = ownerOf(tokenId);\n    if (!Runtime.checkWitness(owner)) {\n        return false;\n    }\n    onTransfer.fire(owner, to, 1, tokenId);\n    if (owner != to) {\n        StorageContext ctx = Storage.getStorageContext();\n        new StorageMap(ctx, ownerOfMapPrefix).put(tokenId, to.toByteArray());\n\n        new StorageMap(ctx, createTokensOfPrefix(owner)).delete(tokenId);\n        new StorageMap(ctx, createTokensOfPrefix(to)).put(tokenId, 1);\n\n        decreaseBalanceByOne(ctx, owner);\n        increaseBalanceByOne(ctx, to);\n    }\n    if (new ContractManagement().getContract(to) != null) {\n        Contract.call(to, \"onNEP11Payment\", CallFlags.All, new Object[]{owner, 1, tokenId, data});\n    }\n    return true;\n}\n```\n\n### Non-divisible NEP-11 Methods\n\nThe NEP-11 standard specifies non-divisible as well as divisible NFT smart contracts. Since this smart contract is\nindivisible (i.e., its decimals are 0), it is required to implement a specific method `ownerOf` for it. It returns the\nscript hash of the owner the token with the specified token id.\n\n```java\n@Safe\npublic static Hash160 ownerOf(ByteString tokenId) throws Exception {\n    if (tokenId.length() > 64) {\n        throw new Exception(\"The parameter 'tokenId' must be a valid NFT ID (64 or less bytes long).\");\n    }\n    ByteString owner = new StorageMap(Storage.getReadOnlyContext(), ownerOfMapPrefix).get(tokenId);\n    if (owner == null) {\n        throw new Exception(\"This token id does not exist.\");\n    }\n    return new Hash160(owner);\n}\n```\n\n### NEP-11 Optional Methods\n\nThe NEP-11 standard describes two optional methods called `tokens()` and `properties()`. Meaning that if methods with\nthese names and parameters are implemented, they must follow the standard. Below you can see the implementation of these\ntwo methods. The `tokens()` method iterates through the `registryMap` and returns an `Iterator` based on the key-value\npairs that are found in the registry. The `properties()` method returns a map of the provided token's properties stored\nin the contract's storage. This includes its name, and if present its description, image, and URI.\n\n```java\n@Safe\npublic static", "doc_id": "7225bae9-9fcb-4a86-bed3-46303b77f562", "embedding": null, "doc_hash": "7c15c1aba61f84124b72b16a535126eba9acc047e19f1521c3361ca69ca106fa", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 22468, "end": 25375, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "d936f2dc-223a-4b4f-9914-4ae54f1ae9f5", "3": "d1ddb34a-3767-481c-89b8-b33bff55fa1d"}}, "__type__": "1"}, "d1ddb34a-3767-481c-89b8-b33bff55fa1d": {"__data__": {"text": "present its description, image, and URI.\n\n```java\n@Safe\npublic static Iterator<Iterator.Struct<ByteString, ByteString>> tokens() {\n    return (Iterator<Iterator.Struct<ByteString, ByteString>>) new StorageMap(Storage.getReadOnlyContext(),\n            registryMapPrefix).find(FindOptions.RemovePrefix);\n}\n\n@Safe\npublic static Map<String, String> properties(ByteString tokenId) throws Exception {\n    if (tokenId.length() > 64) {\n        throw new Exception(\"The parameter 'tokenId' must be a valid NFT ID (64 or less bytes long).\");\n    }\n    Map<String, String> p = new Map<>();\n    StorageContext ctx = Storage.getReadOnlyContext();\n    ByteString tokenName = new StorageMap(ctx, propNameMapPrefix).get(tokenId);\n    if (tokenName == null) {\n        throw new Exception(\"This token id does not exist.\");\n    }\n\n    p.put(propName, tokenName.toString());\n    ByteString tokenDescription = new StorageMap(ctx, propDescriptionMapPrefix).get(tokenId);\n    if (tokenDescription != null) {\n        p.put(propDescription, tokenDescription.toString());\n    }\n    ByteString tokenImage = new StorageMap(ctx, propImageMapPrefix).get(tokenId);\n    if (tokenImage != null) {\n        p.put(propImage, tokenImage.toString());\n    }\n    ByteString tokenURI = new StorageMap(ctx, propTokenURIMapPrefix).get(tokenId);\n    if (tokenURI != null) {\n        p.put(propTokenURI, tokenURI.toString());\n    }\n    return p;\n}\n```\n\n### Events\n\nThe NEP-11 standard requires an event `Transfer` that contains the values `from`, `to`, `amount`, and `tokenId`. For\nthis, the class `Event4Args` can be used with the annotation `@DisplayName` to set the event's name that will be shown\nin the manifest and notifications when it has been fired. The event `Mint` is an additional custom event that is fired\nwhenever a new NFT is minted.\n\n```java\n@DisplayName(\"Mint\")\nprivate static Event3Args<Hash160, ByteString, Map<String, String>> onMint;\n\n@DisplayName(\"Transfer\")\nprivate static Event4Args<Hash160, Hash160, Integer, ByteString> onTransfer;\n```\n\nAn event variable can effectively fire an event by using the `fire()` method with the corresponding arguments. For example, the `Transfer` event (represented by the `onTransfer` variable) should be fired whenever a transfer happens.\n\n```java\nonTransfer.fire(owner, to, 1, tokenId);\n```\n\n### Custom Methods\n\nThe example contract contains some custom methods, that are not specified in the NEP-11 standard.\n\nThe method `contractOwner()` simply returns the script hash of the contract owner.\n\nThe method `mint()` can be invoked by the contract owner in order to mint new NFT tokens. It stores the tokenId in the\n`registryMap`, its properties in the `propertiesMap`, and its owner in the `ownerMap`. Further, it increases the owner's\nbalance, and the total supply by 1, before it fires the `Mint` event.\n\nThe method `burn()` can be invoked by the owner of a token. It deletes all information about the token and updates the\nbalance and total supply accordingly. If the intent of burning a token need not require the storage to be freed, the\ntoken could also just be sent to a *burner address*.\n\n```java\n@Safe\npublic static Hash160 contractOwner() {\n    return new", "doc_id": "d1ddb34a-3767-481c-89b8-b33bff55fa1d", "embedding": null, "doc_hash": "e413bebb73e8401765706bbf7f86310b64484fa5f9f5c0f4d2304f786900223a", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 25342, "end": 28519, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "7225bae9-9fcb-4a86-bed3-46303b77f562", "3": "103856cc-001e-4ecc-a6c9-594573e4756f"}}, "__type__": "1"}, "103856cc-001e-4ecc-a6c9-594573e4756f": {"__data__": {"text": "static Hash160 contractOwner() {\n    return new StorageMap(Storage.getReadOnlyContext(), contractMapPrefix).getHash160(contractOwnerKey);\n}\n\npublic static void mint(Hash160 owner, ByteString tokenId, Map<String, String> properties) throws Exception {\n    if (!Runtime.checkWitness(contractOwner())) {\n        throw new Exception(\"No authorization\");\n    }\n    StorageContext ctx = Storage.getStorageContext();\n    StorageMap registryMap = new StorageMap(ctx, registryMapPrefix);\n    if (registryMap.get(tokenId) != null) {\n        throw new Exception(\"This token id already exists.\");\n    }\n    if (!properties.containsKey(propName)) {\n        throw new Exception(\"The properties must contain a value for the key 'name'.\");\n    }\n    String tokenName = properties.get(propName);\n    new StorageMap(ctx, propNameMapPrefix).put(tokenId, tokenName);\n    if (properties.containsKey(propDescription)) {\n        String description = properties.get(propDescription);\n        new StorageMap(ctx, propDescriptionMapPrefix).put(tokenId, description);\n    }\n    if (properties.containsKey(propImage)) {\n        String image = properties.get(propImage);\n        new StorageMap(ctx, propImageMapPrefix).put(tokenId, image);\n    }\n    if (properties.containsKey(propTokenURI)) {\n        String tokenURI = properties.get(propTokenURI);\n        new StorageMap(ctx, propTokenURIMapPrefix).put(tokenId, tokenURI);\n    }\n\n    registryMap.put(tokenId, tokenId);\n    new StorageMap(ctx, ownerOfMapPrefix).put(tokenId, owner.toByteArray());\n    new StorageMap(ctx, createTokensOfPrefix(owner)).put(tokenId, 1);\n\n    increaseBalanceByOne(ctx, owner);\n    incrementTotalSupplyByOne(ctx);\n    onMint.fire(owner, tokenId, properties);\n}\n\npublic static void burn(ByteString tokenId) throws Exception {\n    Hash160 owner;\n    try {\n        owner = ownerOf(tokenId);\n    } catch (Exception e) {\n        throw new Exception(e.getMessage());\n    }\n    if (!Runtime.checkWitness(owner)) {\n        throw new Exception(\"No authorization.\");\n    }\n\n    StorageContext ctx = Storage.getStorageContext();\n\n    new StorageMap(ctx, registryMapPrefix).delete(tokenId);\n    new StorageMap(ctx, propNameMapPrefix).delete(tokenId);\n    new StorageMap(ctx, propDescriptionMapPrefix).delete(tokenId);\n    new StorageMap(ctx, propImageMapPrefix).delete(tokenId);\n    new StorageMap(ctx, propTokenURIMapPrefix).delete(tokenId);\n    new StorageMap(ctx, ownerOfMapPrefix).delete(tokenId);\n\n    new StorageMap(ctx, createTokensOfPrefix(owner)).delete(tokenId);\n    decreaseBalanceByOne(ctx, owner);\n    decrementTotalSupplyByOne(ctx);\n    onTransfer.fire(owner, null, 1, tokenId);\n}\n```\n\n### Private Helper Methods\n\nPrivate methods can be used to simplify and make the smart contract more readable. The following private methods are\nused in the NEP-11 example contract.\n\n```java\nprivate static void initializeContract(Hash160 contractOwner)", "doc_id": "103856cc-001e-4ecc-a6c9-594573e4756f", "embedding": null, "doc_hash": "d092c2c50ea36f99086a7d00cce913177cb49838f287bae6691df8a77c965552", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 28544, "end": 31434, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "d1ddb34a-3767-481c-89b8-b33bff55fa1d", "3": "de096021-b0f6-46fc-86cc-ca96cf5b6937"}}, "__type__": "1"}, "de096021-b0f6-46fc-86cc-ca96cf5b6937": {"__data__": {"text": "contract.\n\n```java\nprivate static void initializeContract(Hash160 contractOwner) {\n    StorageMap contractMap = new StorageMap(Storage.getStorageContext(), contractMapPrefix);\n    contractMap.put(totalSupplyKey, 0);\n    contractMap.put(contractOwnerKey, contractOwner);\n}\n\n// When storage context is already loaded, this is a cheaper method than `contractOwner()`.\nprivate static Hash160 contractOwner(StorageContext ctx) {\n    return new StorageMap(ctx, contractMapPrefix).getHash160(contractOwnerKey);\n}\n\nprivate static int getBalance(StorageContext ctx, Hash160 owner) {\n    return new StorageMap(ctx, balanceMapPrefix).getIntOrZero(owner.toByteArray());\n}\n\nprivate static void increaseBalanceByOne(StorageContext ctx, Hash160 owner) {\n    new StorageMap(ctx, balanceMapPrefix).put(owner.toByteArray(), getBalance(ctx, owner) + 1);\n}\n\nprivate static void decreaseBalanceByOne(StorageContext ctx, Hash160 owner) {\n    new StorageMap(ctx, balanceMapPrefix).put(owner.toByteArray(), getBalance(ctx, owner) - 1);\n}\n\nprivate static void incrementTotalSupplyByOne(StorageContext ctx) {\n    StorageMap contractMap = new StorageMap(ctx, contractMapPrefix);\n    int updatedTotalSupply = contractMap.getInt(totalSupplyKey) + 1;\n    contractMap.put(totalSupplyKey, updatedTotalSupply);\n}\n\nprivate static void decrementTotalSupplyByOne(StorageContext ctx) {\n    StorageMap contractMap = new StorageMap(ctx, contractMapPrefix);\n    int updatedTotalSupply = contractMap.getInt(totalSupplyKey) - 1;\n    contractMap.put(totalSupplyKey, updatedTotalSupply);\n}\n\nprivate static byte[] createTokensOfPrefix(Hash160 owner) {\n    return Helper.concat(tokensOfKey, owner.toByteArray());\n}\n```\n\n## 5. Compile the Contract\n\nThe contract can be compiled using the gradle plugin. First, set the `className` in the file `gradle.build` to the\ncontract's class name. Then, the gradle task `neow3jCompile` can be executed from the project's root path to compile the\ncontract.\n\n```bash\n./gradlew neow3jCompile\n```\n\nThe output is then accessible in the folder `./build/neow3j`, and should contain the following three files:\n\n```bash\nFurryFriends.manifest.json\nFurryFriends.nef\nFurryFriends.nefdbgnfo\n```\n\n:::note\n\nThe filenames can deviate according to what the contract's name is. See [here](#contract-specific-information).\n\n:::\n\nNow, the contract's `.manifest.json` and `.nef` files can be used to deploy the contract. Neow3j's SDK can be used to do\nso. Check out the example [here](https://github.com/neow3j/neow3j-examples-java/blob/4d82df91c27bf9d4992c166e1ae98045bd24fbbd/src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java)\nabout how to deploy a contract with its manifest and nef files.\n\n## About\n\nFeel free to report any issues that might arise. Open an issue\n[here](https://github.com/neow3j/neow3j/issues/new/choose) to help us directly including it in our backlog.\n\n\n<!---\n## How to test my dApp\n\nThis could also be handled in another tutorial\n--->\n", "doc_id": "de096021-b0f6-46fc-86cc-ca96cf5b6937", "embedding": null, "doc_hash": "317e3fc4e79edd995297d7f9a3de74c1e8f632c984e3df3ad5ab9de4fa68e3c0", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}, "node_info": {"start": 31393, "end": 34347, "_node_type": "1"}, "relationships": {"1": "10dc86f143df7511f6eb56e39b61c4dcf782c1ba", "2": "103856cc-001e-4ecc-a6c9-594573e4756f"}}, "__type__": "1"}, "33963789-de9e-4d71-b637-dd527d3ae036": {"__data__": {"text": "---\ntitle: 'neow3j - Implementing a NEP-17 Smart Contract in Java'\ndescription: \"This tutorial describes an example implementation of a NEP-17 smart contract developed in Java using the neow3j library.\"\nauthor: AxLabs\ntags: [\"NEP-17\", \"JAVA\", \"NEOW3J\"]\nskill: beginner\nimage: \"./assets/neow3j-padded.png\"\nsource: \"https://github.com/neow3j/neow3j-examples-java/blob/7000d804257f8d573ac8cc369aa2a3abb303a751/src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java\"\nsidebar: true\n---\n\n<div align=\"center\" style={{ padding: '0% 25% 0% 25%' }}>\n  <img src=\"/tooling/neow3j.png\" alt=\"neow3j\" width=\"75%\" style={{ padding: '0% 0% 5% 0%' }}/> \n  <h1> <a href=\"https://github.com/neow3j/neow3j\">neow3j</a> <sub><small>v3.21.1</small></sub></h1> \n</div>\n\nNeow3j is a development toolkit that provides easy and reliable tools to build Neo dApps and Smart Contracts using the\nJava platform (Java, Kotlin, Android). Check out [neow3j.io](https://neow3j.io) for more detailed information on neow3j\nand the technical documentation.\n\n## 1. Setup\n\nIf you haven't already set up your environment to use the neow3j library, you can check out our tutorial about setting\nup a neow3j project [here](/tutorials/neow3j-smart-contract-quickstart).\n\n## 2. NEP-17 Overview\n\nThe NEP-17 is the fungible token standard on Neo N3. Have a look at its official documentation\n[here](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki).\n\n## 3. Example NEP-17 Contract\n\nThe following example code represents a possible implementation for a token that supports the NEP-17 standard.\n\n```java\npackage io.neow3j.examples.contractdevelopment.contracts;\n\nimport io.neow3j.devpack.ByteString;\nimport io.neow3j.devpack.Contract;\nimport io.neow3j.devpack.Hash160;\nimport io.neow3j.devpack.Runtime;\nimport io.neow3j.devpack.Storage;\nimport io.neow3j.devpack.StorageContext;\nimport io.neow3j.devpack.StorageMap;\nimport io.neow3j.devpack.annotations.DisplayName;\nimport io.neow3j.devpack.annotations.ManifestExtra;\nimport io.neow3j.devpack.annotations.OnDeployment;\nimport io.neow3j.devpack.annotations.Permission;\nimport io.neow3j.devpack.annotations.Safe;\nimport io.neow3j.devpack.annotations.SupportedStandard;\nimport io.neow3j.devpack.constants.CallFlags;\nimport io.neow3j.devpack.constants.NativeContract;\nimport io.neow3j.devpack.constants.NeoStandard;\nimport io.neow3j.devpack.contracts.ContractManagement;\nimport io.neow3j.devpack.events.Event3Args;\n\n@DisplayName(\"AxLabsToken\")\n@ManifestExtra(key = \"name\", value = \"AxLabsToken\")\n@ManifestExtra(key = \"author\", value = \"AxLabs\")\n@SupportedStandard(neoStandard = NeoStandard.NEP_17)\n@Permission(nativeContract = NativeContract.ContractManagement)\npublic class FungibleToken {\n\n    static final int", "doc_id": "33963789-de9e-4d71-b637-dd527d3ae036", "embedding": null, "doc_hash": "62eb2574c1d0f98c07bf84898eb99e5b1490825cf328a6779f6db33deff07512", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 0, "end": 2753, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "3": "9801b967-37d3-46d6-b9b2-881b6c5c5cc9"}}, "__type__": "1"}, "9801b967-37d3-46d6-b9b2-881b6c5c5cc9": {"__data__": {"text": "class FungibleToken {\n\n    static final int contractMapPrefix = 0;\n    static final byte[] contractOwnerKey = new byte[]{0x00};\n    static final byte[] totalSupplyKey = new byte[]{0x01};\n\n    static final int assetMapPrefix = 1;\n\n    // region deploy, update, destroy\n\n    @OnDeployment\n    public static void deploy(Object data, boolean update) {\n        if (!update) {\n            StorageContext ctx = Storage.getStorageContext();\n            // Set the contract owner.\n            Storage.put(ctx, contractOwnerKey, (Hash160) data);\n            // Initialize the supply.\n            int initialSupply = 200_000_000;\n            Storage.put(ctx, totalSupplyKey, initialSupply);\n            // Allocate all tokens to the contract owner.\n            new StorageMap(ctx, assetMapPrefix)\n                    .put(contractOwner(ctx).toByteArray(), initialSupply);\n        }\n    }\n\n    public static void update(ByteString script, String manifest) throws Exception {\n        if (!Runtime.checkWitness(contractOwner(Storage.getReadOnlyContext()))) {\n            throw new Exception(\"No authorization\");\n        }\n        new ContractManagement().update(script, manifest);\n    }\n\n    public static void destroy() throws Exception {\n        if (!Runtime.checkWitness(contractOwner(Storage.getReadOnlyContext()))) {\n            throw new Exception(\"No authorization\");\n        }\n        new ContractManagement().destroy();\n    }\n\n    // endregion deploy, update, destroy\n    // region NEP-17 methods\n\n    @Safe\n    public static String symbol() {\n        return \"ALT\";\n    }\n\n    @Safe\n    public static int decimals() {\n        return 2;\n    }\n\n    @Safe\n    public static int totalSupply() {\n        return Storage.getInt(Storage.getReadOnlyContext(), totalSupplyKey);\n    }\n\n    public static boolean transfer(Hash160 from, Hash160 to, int amount, Object[] data) throws Exception {\n        if (!Hash160.isValid(from) || !Hash160.isValid(to)) {\n            throw new Exception(\"The parameters 'from' and 'to' must be 20-byte addresses.\");\n        }\n        if (amount < 0) {\n            throw new Exception(\"The parameter 'amount' must be greater than or equal to 0.\");\n        }\n        StorageContext ctx = Storage.getStorageContext();\n        if (amount > getBalance(ctx, from) || !Runtime.checkWitness(from)) {\n            return false;\n        }\n\n        if (from != to && amount != 0) {\n            deductFromBalance(ctx, from, amount);\n            addToBalance(ctx,", "doc_id": "9801b967-37d3-46d6-b9b2-881b6c5c5cc9", "embedding": null, "doc_hash": "b55eccc2bb16a9ed8a67f92a509cf91a231ead0e92f4213ea84fc693ecf41bfe", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 2719, "end": 5185, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "2": "33963789-de9e-4d71-b637-dd527d3ae036", "3": "b6d6d1b9-a16d-4c3d-af17-9d1f6c028127"}}, "__type__": "1"}, "b6d6d1b9-a16d-4c3d-af17-9d1f6c028127": {"__data__": {"text": "amount);\n            addToBalance(ctx, to, amount);\n        }\n\n        onTransfer.fire(from, to, amount);\n        if (new ContractManagement().getContract(to) != null) {\n            Contract.call(to, \"onNEP17Payment\", CallFlags.All, data);\n        }\n        return true;\n    }\n\n    @Safe\n    public static int balanceOf(Hash160 account) throws Exception {\n        if (!Hash160.isValid(account)) {\n            throw new Exception(\"The parameter 'account' must be a 20-byte address.\");\n        }\n        return getBalance(Storage.getReadOnlyContext(), account);\n    }\n\n    // endregion NEP-17 methods\n    // region events\n\n    @DisplayName(\"Transfer\")\n    static Event3Args<Hash160, Hash160, Integer> onTransfer;\n\n    // endregion events\n    // region custom methods\n\n    @Safe\n    public static Hash160 contractOwner() {\n        return new StorageMap(Storage.getReadOnlyContext(), contractMapPrefix).getHash160(contractOwnerKey);\n    }\n\n    // endregion custom methods\n    // region private helper methods\n\n    // When storage context is already loaded, this is a cheaper method than `contractOwner()`.\n    private static Hash160 contractOwner(StorageContext ctx) {\n        return new StorageMap(ctx, contractMapPrefix).getHash160(contractOwnerKey);\n    }\n\n    private static void addToBalance(StorageContext ctx, Hash160 key, int value) {\n        new StorageMap(ctx, assetMapPrefix).put(key.toByteArray(), getBalance(ctx, key) + value);\n    }\n\n    private static void deductFromBalance(StorageContext ctx, Hash160 key, int value) {\n        int oldValue = getBalance(ctx, key);\n        new StorageMap(ctx, assetMapPrefix).put(key.toByteArray(), oldValue - value);\n    }\n\n    private static int getBalance(StorageContext ctx, Hash160 key) {\n        return new StorageMap(ctx, assetMapPrefix).getIntOrZero(key.toByteArray());\n    }\n\n    // endregion private helper methods\n\n}\n```\n\n## 4. Contract Breakdown\n\nIn the following subsections, we'll be looking at each part of the NEP-17 example contract.\n\n### Imports\n\nThe imports show the neow3j devpack classes that are used in the example contract. Check out neow3j devpack's\n[javadoc](https://javadoc.io/doc/io.neow3j/devpack/latest/index.html) for a full overview of classes and methods that\nare supported.\n\n```java\npackage io.neow3j.examples.contractdevelopment.contracts;\n\nimport io.neow3j.devpack.ByteString;\nimport io.neow3j.devpack.Contract;\nimport io.neow3j.devpack.Hash160;\nimport io.neow3j.devpack.Runtime;\nimport io.neow3j.devpack.Storage;\nimport io.neow3j.devpack.StorageContext;\nimport io.neow3j.devpack.StorageMap;\nimport io.neow3j.devpack.annotations.DisplayName;\nimport io.neow3j.devpack.annotations.ManifestExtra;\nimport io.neow3j.devpack.annotations.OnDeployment;\nimport", "doc_id": "b6d6d1b9-a16d-4c3d-af17-9d1f6c028127", "embedding": null, "doc_hash": "78be009bd3d7c56539feca1469bed464c8390228271d5f72c96905879c3b37a9", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 5195, "end": 7927, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "2": "9801b967-37d3-46d6-b9b2-881b6c5c5cc9", "3": "7017b803-999e-4d05-b031-adc95a80a3bb"}}, "__type__": "1"}, "7017b803-999e-4d05-b031-adc95a80a3bb": {"__data__": {"text": "io.neow3j.devpack.annotations.OnDeployment;\nimport io.neow3j.devpack.annotations.Permission;\nimport io.neow3j.devpack.annotations.Safe;\nimport io.neow3j.devpack.annotations.SupportedStandard;\nimport io.neow3j.devpack.constants.CallFlags;\nimport io.neow3j.devpack.constants.NativeContract;\nimport io.neow3j.devpack.constants.NeoStandard;\nimport io.neow3j.devpack.contracts.ContractManagement;\nimport io.neow3j.devpack.events.Event3Args;\n```\n\n### Contract-specific Information\n\nAnnotations on top of the smart contract's class represent contract-specific information. The following annotations can\nbe used for in a smart contract:\n\n_`@DisplayName`_\n\nIt specifies the contract's name. If this annotation is not present, the class name is used for the contract's name.\n\n_`@ManifestExtra`_\n\nAdds the provided key-value pair information in the manifest's `extra` field. You can also use `@ManifestsExtras` to\ngather multiple `@ManifestExtra` annotations (results in the same as when using single `@ManifestExtra` annotations).\n\n_`@SupportedStandard`_\n\nSets the `supportedStandards` field in the manifest. You can use `neoStandard = ` with the enum `NeoStandard` to use an\nofficial standard (see [here](https://github.com/neo-project/proposals#readme)), or `customStandard = ` with a custom\nstring value.\n\n_`@Permission`_\n\nSpecifies, which third-party contracts and methods the smart contract is allowed to call. By default (i.e., if no\npermission annotation is set), the contract is not allowed to call any contract. Use `contract = ` and `methods = ` to\nspecify, respectively, which contracts and methods are allowed.\n\n_For example, if you want to allow transferring NEO tokens from the contract, you can add the annotation\n`@Permission(nativeContract = NativeContract.NeoToken, methods = \"transfer\")`._\n\n```java\n@DisplayName(\"AxLabsToken\")\n@ManifestExtra(key = \"name\", value = \"AxLabsToken\")\n@ManifestExtra(key = \"author\", value = \"AxLabs\")\n@SupportedStandard(neoStandard = NeoStandard.NEP_17)\n@Permission(nativeContract = NativeContract.ContractManagement)\npublic class FungibleToken {\n```\n\n### Constants\n\nYou can set a constant value for the contract by using `final` variables. These values are always loaded when the\ncontract is called and cannot be changed once the contract is deployed. If a final value does not include a method call\n(e.g., raw types, or a final `String` value, such as \"name\"), then these values are inlined during compilation.\n\n:::note\n\nAll contract constants and all methods must be `static` (since the object-orientation of the JVM is different on the\nNeoVM).\n\n:::\n:::tip\n\nThe contract owner of this example contract is fixed (i.e., it is a `final` variable). If you intend to provide a way to\nchange such a variable, you should not store it as a `final` variable. Rather, you would store it as a value in the\nstorage, which provides the possibility to be modified through a method.\n\n:::\n\n```java\nstatic final int contractMapPrefix = 0;\nstatic final byte[] contractOwnerKey = new byte[]{0x00};\nstatic final byte[] totalSupplyKey = new byte[]{0x01};\n```\n\n### Deploy\n\nOnce a deployment transaction is made (containing the contract and other parameters), the contract data is first stored\non the blockchain and then the native contract `ContractManagement` calls the smart contract's `deploy()` method. In\nneow3j, that method is marked with the annotation `@OnDeployment`. In the", "doc_id": "7017b803-999e-4d05-b031-adc95a80a3bb", "embedding": null, "doc_hash": "1eb060d9fec9d9f2105a7a24c7b80b1e18468840369e354d324802d5879cb947", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 7904, "end": 11304, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "2": "b6d6d1b9-a16d-4c3d-af17-9d1f6c028127", "3": "97257d0b-e6ec-4def-aa88-cb9d8525c49b"}}, "__type__": "1"}, "97257d0b-e6ec-4def-aa88-cb9d8525c49b": {"__data__": {"text": "that method is marked with the annotation `@OnDeployment`. In the example, when the smart contract is deployed,\nthe `initialSupply` is set to 200'000'000 and it is allocated to the smart contract's owner.\n\n```java\n@OnDeployment\npublic static void deploy(Object data, boolean update) throws Exception {\n    if (!update) {\n        StorageContext ctx = Storage.getStorageContext();\n        // Set the contract owner.\n        Storage.put(ctx, contractOwnerKey, (Hash160) data);\n        // Initialize the supply.\n        int initialSupply = 200_000_000;\n        Storage.put(ctx, totalSupplyKey, initialSupply);\n        // Allocate all tokens to the contract owner.\n        new StorageMap(ctx, assetMapPrefix)\n                .put(contractOwner(ctx).toByteArray(), initialSupply);\n    }\n}\n```\n\n### Update and Destroy\n\nIn order to update the contract, the following method first checks that the contract owner witnessed the transaction and\nthen the native `ContractManagement.update()` method is called. When updating a smart contract, you can change the smart\ncontract's code and its manifest. This means that you can update how the contract programmatically manages its storage\ncontext.\n\n:::note\n\nAdditionally to changing the smart contract's script and manifest, the method `ContractManagement.update()` eventually\ncalls the smart contract's `deploy()` method (shown above) with the boolean `update` set to true.\n\n:::\n\n```java\npublic static void update(ByteString script, String manifest) throws Exception {\n    if (!Runtime.checkWitness(contractOwner(Storage.getReadOnlyContext()))) {\n        throw new Exception(\"No authorization\");\n    }\n    new ContractManagement().update(script, manifest);\n}\n```\n\nThe example contract also provides the option to destroy the smart contract. As well as the `update()` method, it first\nverifies that the contract owner witnessed the transaction and then calls the method `ContractManagement.destroy()`\nmethod.\n\n:::caution\n\nWhen the native method `ContractManagement.destroy()` is called from a smart contract, the whole smart contract's\nstorage context is erased, and the contract can no longer be used.\n\n:::\n\n```java\npublic static void destroy() throws Exception {\n    if (!Runtime.checkWitness(contractOwner(Storage.getReadOnlyContext()))) {\n        throw new Exception(\"No authorization\");\n    }\n    new ContractManagement().destroy();\n}\n```\n\n### NEP-17 Methods\n\nThe required NEP-17 methods are implemented as follows. If a method does not change the state of the contract (i.e., it\nis just used for reading), it can be annotated with the `@Safe` annotation. Out of the NEP-17 methods, only the\n`transfer()` method should be writing to the contract and is thus not annotated as safe.\n\n```java\n@Safe\npublic static String symbol() {\n    return \"ALT\";\n}\n\n@Safe\npublic static int decimals() {\n    return 2;\n}\n\n@Safe\npublic static int totalSupply() {\n    return Storage.getInt(Storage.getReadOnlyContext(), totalSupplyKey);\n}\n\npublic static boolean transfer(Hash160 from, Hash160 to, int amount, Object[] data) throws Exception {\n    if (!Hash160.isValid(from) || !Hash160.isValid(to)) {\n        throw new Exception(\"The parameters 'from' and 'to' must be 20-byte addresses.\");\n    }\n    if (amount <", "doc_id": "97257d0b-e6ec-4def-aa88-cb9d8525c49b", "embedding": null, "doc_hash": "499733dec99e3502a4f320afd765ee96cc6f21d5bee445232732305e3d4c1315", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 11299, "end": 14530, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "2": "7017b803-999e-4d05-b031-adc95a80a3bb", "3": "4532d07b-659e-46a7-ac16-550a5082bbce"}}, "__type__": "1"}, "4532d07b-659e-46a7-ac16-550a5082bbce": {"__data__": {"text": "20-byte addresses.\");\n    }\n    if (amount < 0) {\n        throw new Exception(\"The parameter 'amount' must be greater than or equal to 0.\");\n    }\n    StorageContext ctx = Storage.getStorageContext();\n    if (amount > getBalance(ctx, from) || !Runtime.checkWitness(from)) {\n        return false;\n    }\n\n    if (from != to && amount != 0) {\n        deductFromBalance(ctx, from, amount);\n        addToBalance(ctx, to, amount);\n    }\n\n    onTransfer.fire(from, to, amount);\n    if (new ContractManagement().getContract(to) != null) {\n        Contract.call(to, \"onNEP17Payment\", CallFlags.All, data);\n    }\n    return true;\n}\n\n@Safe\npublic static int balanceOf(Hash160 account) throws Exception {\n    if (!Hash160.isValid(account)) {\n        throw new Exception(\"The parameter 'account' must be a 20-byte address.\");\n    }\n    return getBalance(Storage.getReadOnlyContext(), account);\n}\n```\n\n### Events\n\nThe NEP-17 standard requires an event `Transfer` that contains the values `from`, `to`, and `amount`. For this, the\nclass `Event3Args` can be used with the annotation `@DisplayName` to set the event's name that will be shown in the\nmanifest and notifications when it has been fired.\n\n```java\n@DisplayName(\"Transfer\")\n    static Event3Args<Hash160, Hash160, Integer> onTransfer;\n```\n\nAn event variable can effectively fire an event by using the `fire()` method with the corresponding arguments. For\nexample, the `Transfer` event (represented by the `onTransfer` variable) should be fired whenever a transfer happens.\n\n```java\nonTransfer.fire(from, to, amount);\n```\n\n### Custom Methods\n\nThe example contract contains two custom methods that are not specified in the NEP-17 standard. The method\n`contractOwner()` simply returns the script hash of the contract owner.\n\n```java\n@Safe\npublic static Hash160 contractOwner() {\n    return new StorageMap(Storage.getReadOnlyContext(), contractMapPrefix).getHash160(contractOwnerKey);\n}\n```\n\n### Private Helper Methods\n\nPrivate methods can be used to simplify and make the smart contract more readable. The following private methods are\nused in the NEP-17 example contract.\n\n```java\n// When storage context is already loaded, this is a cheaper method than `contractOwner()`.\nprivate static Hash160 contractOwner(StorageContext ctx) {\n    return new StorageMap(ctx, contractMapPrefix).getHash160(contractOwnerKey);\n}\n\nprivate static void addToBalance(StorageContext ctx, Hash160 key, int value) {\n    new StorageMap(ctx, assetMapPrefix).put(key.toByteArray(), getBalance(ctx, key) + value);\n}\n\nprivate static void deductFromBalance(StorageContext ctx, Hash160 key, int value) {\n    int oldValue = getBalance(ctx, key);\n    new StorageMap(ctx, assetMapPrefix).put(key.toByteArray(), oldValue - value);\n}\n\nprivate static int getBalance(StorageContext ctx, Hash160 key) {\n    return new StorageMap(ctx, assetMapPrefix).getIntOrZero(key.toByteArray());\n}\n```\n\n## 5. Compile the Contract\n\nThe contract can be compiled using the gradle plugin. First, set the `className` in the file `gradle.build` to the\ncontract's class name. Then, the gradle task `neow3jCompile` can be executed from the project's root path to compile", "doc_id": "4532d07b-659e-46a7-ac16-550a5082bbce", "embedding": null, "doc_hash": "bd93466773e7eedab11f54256ef9e4f145fdec02ec561f22ee5253f60b74128a", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 14554, "end": 17707, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "2": "97257d0b-e6ec-4def-aa88-cb9d8525c49b", "3": "e9f7c021-cb86-46c5-8664-a241a759434b"}}, "__type__": "1"}, "e9f7c021-cb86-46c5-8664-a241a759434b": {"__data__": {"text": "can be executed from the project's root path to compile the\ncontract.\n\n```bash\n./gradlew neow3jCompile\n```\n\nThe output is then accessible in the folder `./build/neow3j`, and should contain the following three files:\n\n```bash\nAxLabsToken.manifest.json\nAxLabsToken.nef\nAxLabsToken.nefdbgnfo\n```\n\n:::note\n\nThe filenames can deviate according to what the contract's name is. See [here](#contract-specific-information).\n\n:::\n\nNow, the contract's `.manifest.json` and `.nef` files can be used to deploy the contract. Neow3j's SDK can be used to do\nso. Check out the example [here](https://github.com/neow3j/neow3j-examples-java/blob/4d82df91c27bf9d4992c166e1ae98045bd24fbbd/src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java)\nabout how to deploy a contract with its manifest and nef files.\n\n## About\n\nFeel free to report any issues that might arise. Open an issue\n[here](https://github.com/neow3j/neow3j/issues/new/choose) to help us directly including it in our backlog.\n\n\n<!---\n## How to test my dApp\n\nThis could also be handled in another tutorial\n--->\n", "doc_id": "e9f7c021-cb86-46c5-8664-a241a759434b", "embedding": null, "doc_hash": "4eecfaf145808ff921249cf9207f9aaa825080ae4c1b0e061c25aae32dc1d438", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}, "node_info": {"start": 17685, "end": 18758, "_node_type": "1"}, "relationships": {"1": "a99163cb7d7c23ba4a76851624e5b6220caf4065", "2": "4532d07b-659e-46a7-ac16-550a5082bbce"}}, "__type__": "1"}, "cb38ad7b-cafe-48a7-8ba7-a3832b01b155": {"__data__": {"text": "---\ntitle: 'neow3j - Java SDK Quickstart'\ndescription: \"In this quickstart guide, you will set up a neow3j project and get introduced to all tools necessary for interacting with the Neo N3 blockchain using Java.\"\nauthor: AxLabs\ntags: [\"DAPP\", \"SDK\", \"NEOW3J\", \"JAVA\", \"KOTLIN\"]\nskill: beginner\nimage: ./assets/neow3j-padded.png\nsource: https://github.com/neow3j/neow3j-boilerplate-sdk/tree/devportal-quickstart-tutorial\nsidebar: true\n---\n\n<div align=\"center\" style={{ padding: '0% 25% 0% 25%' }}>\n  <img src=\"/tooling/neow3j.png\" alt=\"neow3j\" width=\"75%\" style={{ padding: '0% 0% 5% 0%' }}/> \n  <h1> <a href=\"https://github.com/neow3j/neow3j\">neow3j</a> <sub><small>v3.21.1</small></sub></h1> \n</div>\n\n## 1. Introduction\n\nNeow3j is a development toolkit that provides easy and reliable tools to build Neo dApps and Smart\nContracts using the Java platform (Java, Kotlin, Android). Check out [neow3j.io](https://neow3j.io) for more detailed\ninformation on neow3j and the technical documentation.\n\n## 2. Setup\n\n### Requirements\n\n__Java__\n\nDApp development in Java requires a Java SDK of at least version 8. Checkout [Adoptium](https://adoptium.net/)\nfor Java OpenJDK downloads.\n\n__Neo-Express__\n\nNeo-Express is a tool for setting up local private blockchains for development purposes. You will use it to learn how to\ninteract with a Neo blockchain using the neow3j SDK. It requires .NET Core installed on your machine. Step through the\nNeo-Express installation section [here](https://github.com/neo-project/neo-express#installation) to set it up.\n\n### Development Environment\n\nYou can develop a dApp with neow3j in any editor, but we recommend using \n[IntelliJ IDEA](https://www.jetbrains.com/idea/download/) and [Visual Studio Code](https://code.visualstudio.com/).\nIntelliJ offers one of the best Java/Kotlin developer experiences while VS Code offers a powerful extension for\ndevelopment on Neo.\n\nIf you use VS Code make sure to install the \n[Neo Blockchain Toolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit)\nextension. It supports an easy setup of private blockchains, provides functionality to quickly fund an address, an\nin-editor block explorer and much more. To get familiar with the Blockchain Toolkit checkout the quickstart tutorials\n[here](https://ngdenterprise.com/neo-tutorials/quickstart1.html). For optimal Java support in VS Code we recommend\nusing the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).\n\n### Code \n\nFor a quick setup of your dApp project, you can use the\n[SDK boilerplate template](https://github.com/neow3j/neow3j-boilerplate-sdk) repository. This project contains two\nsimple examples. First, you'll build, sign and send a transaction. Then, we'll show you how to subscribe to new blocks\non a Neo N3 blockchain.\n\nYou can either click on `Use this template` within GitHub to create your own repository from it, or clone it with the\nfollowing commands:\n\n```\ngit clone https://github.com/neow3j/neow3j-boilerplate-sdk.git\ncd", "doc_id": "cb38ad7b-cafe-48a7-8ba7-a3832b01b155", "embedding": null, "doc_hash": "597ecc2508ac2d41e1808cece553d4325f6bb9223387988353854b5d87134061", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-sdk-quickstart"}, "node_info": {"start": 0, "end": 3049, "_node_type": "1"}, "relationships": {"1": "8f329b7e75e735e924b9459a0a29ec6d3cae5477", "3": "68dd145b-273e-4e77-8720-de6b40c7c18a"}}, "__type__": "1"}, "68dd145b-273e-4e77-8720-de6b40c7c18a": {"__data__": {"text": "neow3j-boilerplate-sdk && git checkout -b devportal-quickstart-tutorial\n```\n\n:::note\n\nThis tutorial is based on the branch `devportal-quickstart-tutorial`, it might not be on the same commit as the `main`\nbranch.\n\n:::\n\n## 3. Building, Signing and Sending a Transaction\n\nIn the following example code, a transaction that transfer 10 NEO is built, signed and sent. Then, its status is printed\nwhen it has been executed successfully and is persisted on the blockchain.\n\n```java\npackage com.axlabs.boilerplate;\n\nimport io.neow3j.contract.GasToken;\nimport io.neow3j.crypto.WIF;\nimport io.neow3j.protocol.Neow3j;\nimport io.neow3j.protocol.core.response.NeoApplicationLog;\nimport io.neow3j.protocol.core.response.NeoSendRawTransaction;\nimport io.neow3j.protocol.http.HttpService;\nimport io.neow3j.transaction.AccountSigner;\nimport io.neow3j.transaction.Transaction;\nimport io.neow3j.transaction.TransactionBuilder;\nimport io.neow3j.types.Hash160;\nimport io.neow3j.types.Hash256;\nimport io.neow3j.utils.Await;\nimport io.neow3j.utils.Numeric;\nimport io.neow3j.wallet.Account;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class BuildAndSendTransaction {\n\n    public static void main(String[] args) throws Throwable {\n\n        // Initialize Neow3j to connect to a testnet Neo node.\n        Neow3j neow3j = Neow3j.build(new HttpService(\"http://seed2t5.neo.org:20332\"));\n\n        // Initialize GasToken.\n        GasToken gasToken = new GasToken(neow3j);\n\n        // Define sender and recipient of transfer.\n        Hash160 recipient = new Hash160(\"b897160506030c5d06dc087a21544b4853768012\");\n        String aliceWif = WIF.getWIFFromPrivateKey(\n                Numeric.hexStringToByteArray(\"6c54536dbd876b92bfc96dd7b9fd6a4286d9a51ac5e26b5cf9becfa27e330918\"));\n        Account alice = Account.fromWIF(aliceWif);\n\n        // Start building a transfer transaction of GAS. Note that the GasToken has 8 decimals and you need to provide\n        // the transfer amount in fractions. The following 1 GAS equals 1_00000000 GAS fractions.\n        BigInteger amount = gasToken.toFractions(new BigDecimal(\"1\"));\n        TransactionBuilder b = gasToken.transfer(alice, recipient, amount);\n\n        // Set the signers, sign the transaction and get the signed transaction ready to be sent.\n        Transaction tx = b.signers(AccountSigner.calledByEntry(alice))\n                .sign();\n\n        // Send the transaction.\n        NeoSendRawTransaction response = tx.send();\n\n        // Make sure the node returns no error and then get the transaction hash and wait for execution.\n        if (response.hasError()) {\n           ", "doc_id": "68dd145b-273e-4e77-8720-de6b40c7c18a", "embedding": null, "doc_hash": "41fd46fd0ce8dbd5766a4150f2401e061181e9b2d85f35370343ace34bad2f68", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-sdk-quickstart"}, "node_info": {"start": 3050, "end": 5667, "_node_type": "1"}, "relationships": {"1": "8f329b7e75e735e924b9459a0a29ec6d3cae5477", "2": "cb38ad7b-cafe-48a7-8ba7-a3832b01b155", "3": "f3d33ee8-6592-4b2c-9d6f-473f63f0fb67"}}, "__type__": "1"}, "f3d33ee8-6592-4b2c-9d6f-473f63f0fb67": {"__data__": {"text": "if (response.hasError()) {\n            System.out.printf(\"Transaction was not successful. Error message from Neo node was: '%s'\\n\",\n                    response.getError().getMessage());\n        } else {\n            // Get the transaction hash and wait for the transaction to be persisted.\n            Hash256 txHash = response.getSendRawTransaction().getHash();\n            Await.waitUntilTransactionIsExecuted(txHash, neow3j);\n\n            // Get the transaction's application log and print it.\n            NeoApplicationLog applicationLog = neow3j.getApplicationLog(txHash).send().getApplicationLog();\n            System.out.println(applicationLog);\n        }\n    }\n\n}\n```\n\n### Imports\n\nThe imports show the neow3j SDK classes that are used in the example contract. Check out neow3j's javadoc [here](https://javadoc.io/doc/io.neow3j/contract/latest/index.html) and [here](https://javadoc.io/doc/io.neow3j/core/latest/index.html) for a full overview of classes and methods that are supported.\n\n```java\npackage com.axlabs.boilerplate;\n\nimport io.neow3j.contract.GasToken;\nimport io.neow3j.crypto.WIF;\nimport io.neow3j.protocol.Neow3j;\nimport io.neow3j.protocol.core.response.NeoApplicationLog;\nimport io.neow3j.protocol.core.response.NeoSendRawTransaction;\nimport io.neow3j.protocol.http.HttpService;\nimport io.neow3j.transaction.AccountSigner;\nimport io.neow3j.transaction.Transaction;\nimport io.neow3j.transaction.TransactionBuilder;\nimport io.neow3j.types.Hash160;\nimport io.neow3j.types.Hash256;\nimport io.neow3j.utils.Await;\nimport io.neow3j.utils.Numeric;\nimport io.neow3j.wallet.Account;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n```\n\n### Connect to Neo N3 Network\n\nThe `Neow3j` class sets up a connection to a Neo N3 blockchain. The endpoint in the example code points to a testnet\nnode. If you run a local Neo N3 network and want to interact with it through neow3j, you have to change this endpoint\naccordingly.\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://seed2t5.neo.org:20332\"));\n```\n\n### Initialize GasToken\n\nIn the example code, 1 GAS is transferred. The GAS token is managed in the native smart contract `GasToken`. Neow3j's\nclass `GasToken` provides all necessary methods that can be invoked on the `GasToken` smart contract. This allows you to\nbuild a transfer transaction that then can be sent to the blockchain.\n\n```java\nGasToken gasToken = new GasToken(neow3j);\n```\n\nNow we prepare all necessary parameters that are required to build a transaction that transfers 1 GAS from `alice` to\nthe script hash `b897160506030c5d06dc087a21544b4853768012`.\n\n```java\nHash160 recipient = new Hash160(\"b897160506030c5d06dc087a21544b4853768012\");\n\n// Alice's address =", "doc_id": "f3d33ee8-6592-4b2c-9d6f-473f63f0fb67", "embedding": null, "doc_hash": "9dec2ae4fbbd4ecff404d753c7768d77b86c762151ffc5af27d2d5bd6ea06c63", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-sdk-quickstart"}, "node_info": {"start": 5643, "end": 8350, "_node_type": "1"}, "relationships": {"1": "8f329b7e75e735e924b9459a0a29ec6d3cae5477", "2": "68dd145b-273e-4e77-8720-de6b40c7c18a", "3": "c2e7dc7d-d57f-462a-85db-5cc572aff979"}}, "__type__": "1"}, "c2e7dc7d-d57f-462a-85db-5cc572aff979": {"__data__": {"text": "Alice's address = NNSyinBZAr8HMhjj95MfkKD1PY7YWoDweR\nString aliceWif = WIF.getWIFFromPrivateKey(\n        Numeric.hexStringToByteArray(\"6c54536dbd876b92bfc96dd7b9fd6a4286d9a51ac5e26b5cf9becfa27e330918\"));\nAccount alice = Account.fromWIF(aliceWif);\n```\n\n### Create Transfer Script\n\nBefore building the transfer script, we have to consider the decimal points of the GasToken. It has 8 decimals, and we\nneed to pass the transfer amount in fractions in the script. That means, for transferring 1 GAS, we need to pass\n1_00000000 as the transfer amount. To make this more simple, you can use the method `toFractions(BigDecimal)` that\ncalculates the fractions.\n\n```java\nBigInteger amount = gasToken.toFractions(new BigDecimal(\"1\"));\n```\n\nThe `transfer()` method of the `GasToken` with the following parameters builds the transfer script and initializes a\n`TransactionBuilder`. Before building the transaction, additional variables can be set in this `TransactionBuilder`,\ne.g., an additional network fee, signers, etc.\n\n```java\nTransactionBuilder b = gasToken.transfer(alice, recipient, amount);\n```\n\n### Build and Sign the Transaction\n\nTo transfer GAS from `alice`, `alice` must be a witness to this transaction. The `alice` account can be set in the\n`TransactionBuilder` as a signer with witness scope `calledByEntry`. Then, the `TransactionBuilder` is ready to be\nsigned. When the `sign()` method is called, the transaction is built, and the witness is appended to it with the provided\naccount passed to the `TransactionBuilder`'s signers.\n\n```java\nTransaction tx = b.signers(AccountSigner.calledByEntry(alice))\n        .sign();\n```\n\n### Send the Transaction\n\nThe transaction is now ready to be sent and can be sent with the `send()` method.\n\n```java\nNeoSendRawTransaction response = tx.send();\n```\n\n### Wait for Response\n\nYou can now check the node's response for an error as the transaction has been sent. If there is no error, the\ntransaction hash is retrieved, and the method `Await.waitUntilTransactionIsExecuted()` waits until the transaction is\npersisted on the blockchain. Then, the transaction's application log is fetched. It contains all relevant information\nabout the transaction, e.g., its notifications, the invocation results, state, etc.\n\n```java\nif (response.hasError()) {\n    System.out.printf(\"Transaction was not successful. Error message from Neo node was: '%s'\\n\",\n            response.getError().getMessage());\n} else {\n    Hash256 txHash = response.getSendRawTransaction().getHash();\n    Await.waitUntilTransactionIsExecuted(txHash, neow3j);\n\n    NeoApplicationLog applicationLog = neow3j.getApplicationLog(txHash).send().getApplicationLog();\n    System.out.println(applicationLog);\n}\n```\n\n## 4. Tracking new Blocks\n\nIn the following example, the Neo N3 network is subscribed to track newly created blocks.\n\n```java\npackage com.axlabs.boilerplate;\n\nimport io.neow3j.protocol.Neow3j;\nimport io.neow3j.protocol.http.HttpService;\n\nimport java.io.IOException;\n\npublic class SubscribeToBlocks {\n\n    public static void main(String[] args) throws IOException {\n\n        // Initialize Neow3j to connect to a testnet Neo node.\n        Neow3j", "doc_id": "c2e7dc7d-d57f-462a-85db-5cc572aff979", "embedding": null, "doc_hash": "b7e96aaa8e4161e612aaf5e94fbd48c86c1a3cbd5ec8a23cc181c4a0e020f563", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-sdk-quickstart"}, "node_info": {"start": 8361, "end": 11513, "_node_type": "1"}, "relationships": {"1": "8f329b7e75e735e924b9459a0a29ec6d3cae5477", "2": "f3d33ee8-6592-4b2c-9d6f-473f63f0fb67", "3": "7e95c262-765e-4a3f-a9e5-cfb1d7744ce8"}}, "__type__": "1"}, "7e95c262-765e-4a3f-a9e5-cfb1d7744ce8": {"__data__": {"text": "to a testnet Neo node.\n        Neow3j neow3j = Neow3j.build(new HttpService(\"http://seed2t5.neo.org:20332\"));\n\n        // Subscribe to new blocks on the testnet.\n        neow3j.subscribeToNewBlocksObservable(true)\n                .subscribe((blockReqResult) -> {\n                    System.out.println(\"#######################################\");\n                    System.out.println(\"Block Index:     \" + blockReqResult.getBlock().getIndex());\n                    System.out.println(\"Block Hash:      \" + blockReqResult.getBlock().getHash());\n                    System.out.println(\"Prev Block Hash: \" + blockReqResult.getBlock().getPrevBlockHash());\n                    System.out.println(\"Next Consensus:  \" + blockReqResult.getBlock().getNextConsensus());\n                    System.out.println(\"Transactions:    \" + blockReqResult.getBlock().getTransactions());\n                });\n    }\n\n}\n```\n\n### Subscribe to new Blocks\n\nAs in the previous example, first, we have to establish a connection to a blockchain by initializing a `Neow3j` object.\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://seed2t5.neo.org:20332\"));\n```\n\nThe method `subscribeToNewBlocksObservable()` creates an observable that emits every new block and the method\n`subscribe()` provides a callback function.\n\nIn this example, as soon as a new block exists, we print the information of the new block, i.e., its index, hash,\nprevious block hash, the next consensus node and a list of all transactions included in that block.\n\n```java\nneow3j.subscribeToNewBlocksObservable(true)\n        .subscribe((blockReqResult) -> {\n            System.out.println(\"#######################################\");\n            System.out.println(\"Block Index:     \" + blockReqResult.getBlock().getIndex());\n            System.out.println(\"Block Hash:      \" + blockReqResult.getBlock().getHash());\n            System.out.println(\"Prev Block Hash: \" + blockReqResult.getBlock().getPrevBlockHash());\n            System.out.println(\"Next Consensus:  \" + blockReqResult.getBlock().getNextConsensus());\n            System.out.println(\"Transactions:    \" + blockReqResult.getBlock().getTransactions());\n        });\n```\n\n## About\n\nFeel free to report any issues that might arise. Open an issue\n[here](https://github.com/neow3j/neow3j/issues/new/choose) to help us directly including it in our backlog.\n", "doc_id": "7e95c262-765e-4a3f-a9e5-cfb1d7744ce8", "embedding": null, "doc_hash": "7a8ac83914e8e8f588322fa7bb7e4fca075460d66163ef01c85031faa14a0d0a", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-sdk-quickstart"}, "node_info": {"start": 11491, "end": 13853, "_node_type": "1"}, "relationships": {"1": "8f329b7e75e735e924b9459a0a29ec6d3cae5477", "2": "c2e7dc7d-d57f-462a-85db-5cc572aff979"}}, "__type__": "1"}, "14c64886-5ddc-42b8-8731-7a87df0b564a": {"__data__": {"text": "---\ntitle: 'neow3j - Java Smart Contract Quickstart'\ndescription: \"In this quickstart guide, you will set up a smart contract project and get introduced to all tools necessary for contract development in Java.\"\nauthor: AxLabs\ntags: [ \"NEOW3J\", \"SMART CONTRACT\", \"JAVA\"]\nskill: beginner\nimage: ./assets/neow3j-padded.png\nsource: https://github.com/neow3j/neow3j-boilerplate-contracts/tree/devportal-quickstart-tutorial\nsidebar: true\n---\n\n<div align=\"center\" style={{ padding: '0% 25% 0% 25%' }}>\n  <img src=\"/tooling/neow3j.png\" alt=\"neow3j\" width=\"75%\" style={{ padding: '0% 0% 5% 0%' }}/> \n  <h1> <a href=\"https://github.com/neow3j/neow3j\">neow3j</a> <sub><small>v3.21.1</small></sub></h1> \n</div>\n\n## 1. Introduction\n\nJava Smart contracts are made possible through the neow3j devpack, which provides a smart contract library, a compiler\nand a test framework. Neow3j favors [Gradle](https://gradle.org) as the build tool. It offers a Gradle plugin that\nallows contract compilation via a Gradle task.\n\n## 2. Setup \n\n### Requirements\n\n__Java__\n\nSmart contract development in Java requires a Java SDK of at least version 8. Checkout [Adoptium](https://adoptium.net/)\nfor Java OpenJDK downloads.\n\n__Docker__\n\nFor running automated smart contract tests with neow3j you need to have\n[Docker](https://www.docker.com/products/docker-desktop) installed.\n\n### Development Environment\n\nYou could write smart contracts in any editor, but we recommend using \n[IntelliJ IDEA](https://www.jetbrains.com/idea/download/) and [Visual Studio Code](https://code.visualstudio.com/).\nIntelliJ offers one of the best Java/Kotlin developer experiences while VS Code offers a powerful extension for\ndevelopment on Neo.\n\nIf you use VS Code make sure to install the \n[Neo Blockchain Toolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit)\nextension. It supports contract debugging, easy setup of private blockchains, and an in-editor block explorer. \nTo get familiar with the Blockchain Toolkit checkout the quickstart tutorials\n[here](https://ngdenterprise.com/neo-tutorials/quickstart1.html) (the tutorials use C# as the smart contract\nlanguage). \nFor optimal Java support in VS Code we recommend using the \n[Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).\n\n### Code \n\nFor a quick setup of your smart contract project you can use the template project from our\n[neow3j-boilerplate-contracts](https://github.com/neow3j/neow3j-boilerplate-contracts) repository. It contains a simple\n\"HelloWorld\" smart contract.\n\nYou can either click on `Use this template` within GitHub to create your own repository from it, or clone it with the\nfollowing commands:\n\n```\ngit clone https://github.com/neow3j/neow3j-boilerplate-contracts.git\ncd neow3j-boilerplate-contracts && git checkout -b devportal-quickstart-tutorial\n```\n\n:::note\n\nThis tutorial is based on the branch `devportal-quickstart-tutorial`, it might not be on the same commit as the `main`\nbranch.\n\n:::\n\n## 3. Compilation\n\n### Using the Gradle Task\n\nWith the setup from above, we", "doc_id": "14c64886-5ddc-42b8-8731-7a87df0b564a", "embedding": null, "doc_hash": "898a17c411e3bdd7d2b8652ffee903760ace7ab7001920e04414070978722fa6", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-smart-contract-quickstart"}, "node_info": {"start": 0, "end": 3094, "_node_type": "1"}, "relationships": {"1": "0c749a25bfccf75b7a8c8e27568c178616d5368d", "3": "4492926b-14af-4fcf-bec0-935a0425e49f"}}, "__type__": "1"}, "4492926b-14af-4fcf-bec0-935a0425e49f": {"__data__": {"text": "Compilation\n\n### Using the Gradle Task\n\nWith the setup from above, we can already compile our HelloWorld contract. Open a terminal in the project's root\ndirectory and run \n\n```\n./gradlew neow3jCompile\n```\n\nThis compiles the smart contract class `HelloWorldSmartContract`, and places a NEF file, contract manifest, and\ndebugging information file by default at `build/neow3j`. NEF file and contract manifest are described\n[here](/docs/n3/develop/write/manifest). They are the artifacts that are deployed on-chain. The debugging information\nfile is required by the Neo Debugger (part of the Neo Blockchain Toolkit) to debug your contract.\n\n### Using the Compiler in Code\n\nThe neow3j compiler can also be invoked in Java code. This is practical if you are using Java code to deploy your\ncontract and want to compile your contract in the same code.\n\nYou will find an example for the compiler usage `com.axlabs.helloworld.Deployment` in the boilerplate project.\n\n```java\nCompilationUnit res = new Compiler().compile(HelloWorldSmartContract.class.getCanonicalName());\n```\n\nThe compilation result is a `CompilationUnit` which gives access to the NEF file and the contract manifest. They are\nused to call the `ContractManagement` contract - a contract that is native to the Neo blockchain.\n\n```java\nTransactionBuilder builder = new ContractManagement(neow3j)\n    .deploy(res.getNefFile(), res.getManifest(), hash160(owner))\n    .signers(signer);\n```\n\n## 4. Development\n\n__Understanding Java for the NeoVM__\n\nWhen using neow3j to implement smart contracts you will, at some point, have to understand the differences between\nnormal Java and Java for smart contract. Because smart contract code will run on the NeoVM and not on the JavaVM there\nare several restrictions. You can read about that\n[here](https://neow3j.io/#/neo-n3/smart_contract_development/neowjava).\n\n__Understanding the neow3j Devpack__\n\nTo get to know the neow3j devpack library you can consult the documentation\n[here](https://neow3j.io/#/neo-n3/smart_contract_development/devpack). It shows core features of the Neo smart\ncontract API, like storage, events, and native contracts, and explains how they are available in neow3j.\nOr, checkout one of the other neow3j tutorials on the developer portal to get a better idea of how Java smart contracts\nlook like.\n\n__Automated Testing__\n\nWhen writing smart contracts testing is of utmost importance to feel confidence in one's code.  Neow3j offers a test\nframework that is build on top of JUnit 5. It is documented\n[here](https://neow3j.io/#/neo-n3/smart_contract_development/testing). The test class `HelloWorldSmartContractTest` in\nthe boilerplate repository gives a first impression how contract tests with neow3j look.\n\n__Manual Testing__\n\nBefore you deploy your contract on the Neo mainnet, you will probably want to test it on a private network on your\nmachine and then on testnet. For local testing we recommend using the Neo Blockchain Toolkit mentioned in the\n[dev environment](#development-environment) section. \nThe boilerplate repository already contains a `default.neo-express` configuration file that defines a private network\nwith one account called Alice. In VS Code open the command palette and type \"Start blockchain\". Execute the command. The\nprivate net will start. Again in the command palatte type \"Transfer assets\" and execute the command. Transfer 100 GAS\nfrom genesis to Alice. This is will create a transaction on the private net.\nNow you can run the main method in `com.axlabs.helloworld.Deployment` (of the boilerplate repo) to deploy the", "doc_id": "4492926b-14af-4fcf-bec0-935a0425e49f", "embedding": null, "doc_hash": "aed8203e5b785d61b6c9886fa8ca7b761588fff38c4d7efaac48240a14b2b42d", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-smart-contract-quickstart"}, "node_info": {"start": 3035, "end": 6604, "_node_type": "1"}, "relationships": {"1": "0c749a25bfccf75b7a8c8e27568c178616d5368d", "2": "14c64886-5ddc-42b8-8731-7a87df0b564a", "3": "8780cde8-536a-4441-ac8d-94581d374e0f"}}, "__type__": "1"}, "8780cde8-536a-4441-ac8d-94581d374e0f": {"__data__": {"text": "(of the boilerplate repo) to deploy the contract on\nthe private net. \n\n:::tip\nThe underlying tool used for running private networks is Neo-Express. It can be separately installed and used as a\ncommand line tool [here](https://github.com/neo-project/neo-express#installation).\n:::\n", "doc_id": "8780cde8-536a-4441-ac8d-94581d374e0f", "embedding": null, "doc_hash": "4645965a52206bcb2ddf8dc3146f3658a1fa297f6b88b3dc97a91a62e15362ae", "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-smart-contract-quickstart"}, "node_info": {"start": 6625, "end": 6905, "_node_type": "1"}, "relationships": {"1": "0c749a25bfccf75b7a8c8e27568c178616d5368d", "2": "4492926b-14af-4fcf-bec0-935a0425e49f"}}, "__type__": "1"}, "faee21f2-c965-407f-8f3f-7310fbe55625": {"__data__": {"text": "<pre>\n  NEP: 1\n  Title: NEP Purpose and Guidelines\n  Author: Erik Zhang <erik@neo.org>\n  Type: Meta\n  Status: Active\n  Created: 2017-8-3\n</pre>\n\n==What is a NEP?==\n\nNEP stands for NEO Enhancement Proposal. An NEP is a design document providing information to the NEO community, or describing a new feature for NEO or its processes or environment. The NEP should provide a concise technical specification of the feature and a rationale for the feature. The NEP author is responsible for building consensus within the community and documenting dissenting opinions.\n\n==NEP Rational==\n\nWe intend NEPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into NEO. Because the NEPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n\nFor NEO implementers, NEPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the NEPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.\n\n==NEP Types==\n\nThere are three types of NEP:\n\n*A '''Standards Track''' NEP describes any change that affects most or all NEO implementations, such as a change to the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using NEO.\n\n*An '''Informational''' NEP describes a NEO design issue, or provides general guidelines or information to the NEO community, but does not propose a new feature. Informational NEPs do not necessarily represent a NEO community consensus or recommendation, so users and implementors are free to ignore Informational NEPs or follow their advice.\n\n*A '''Meta''' NEP describes a process surrounding NEO or proposes a change to (or an event in) a process. Meta NEPs are like Standards Track NEPs but apply to areas other than the NEO protocol itself. They may propose an implementation, but not to NEO's codebase; they often require community consensus; unlike Informational NEPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in NEO development.\n\n==NEP Work Flow==\n\nThe NEP process begins with a new idea for NEO. It is highly recommended that a single NEP contain a single key proposal or new idea. The more focused the NEP, the more successful it tends to be. A change to one client doesn't require a NEP; a change that affects multiple clients, or defines a standard for multiple apps to use, does. The NEP editor reserves the right to reject NEP proposals if they appear too unfocused or too broad. If in doubt, split your NEP into several well-focused ones.\n\nEach NEP must have a champion - someone who writes the NEP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.\n\nVetting an idea publicly before going as far as writing an NEP is meant to save the potential author time. Asking the NEO community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where NEO is used. Examples of appropriate public forums to gauge interest around your", "doc_id": "faee21f2-c965-407f-8f3f-7310fbe55625", "embedding": null, "doc_hash": "f985daef13859df931064b1a289ce92c350b2b850433136a4471aff248e56ffa", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-1.mediawiki"}, "node_info": {"start": 0, "end": 3825, "_node_type": "1"}, "relationships": {"1": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2", "3": "941c8556-bd98-49a1-8555-b11804be5926"}}, "__type__": "1"}, "941c8556-bd98-49a1-8555-b11804be5926": {"__data__": {"text": "areas where NEO is used. Examples of appropriate public forums to gauge interest around your NEP include [https://www.reddit.com/r/NEO the NEO subreddit], [https://github.com/neo-project/proposals/issues the Issues section of this repository], and [https://discord.io/neo the NEO Discord]. In particular, [https://github.com/neo-project/proposals/issues the Issues section of this repository] is an excellent place to discuss your proposal with the community and start creating more formalized language around your NEP.\n\nOnce the champion has asked the NEO community whether an idea has any chance of acceptance a draft NEP should be presented as a pull request. This gives the author a chance to continuously edit the draft NEP for proper formatting and quality. This also allows for further public comment and the author of the NEP to address concerns about the proposal.\n\nIf the NEP collaborators approve, the NEP editor will assign the NEP a number, label it as Standards Track, Informational, or Meta, give it status \"Draft\", and add it to the git repository. The NEP editor will not unreasonably deny an NEP. Reasons for denying NEP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the NEO philosophy.\n\nStandards Track NEPs consist of three parts, a design document, implementation, and finally if warranted an update to the formal specification. The NEP should be reviewed and accepted before an implementation is begun, unless an implementation will aid people in studying the NEP. Standards Track NEPs must include an implementation -- in the form of code, a patch, or a URL to some -- before it can be considered Final.\n\nFor an NEP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.\n\nOnce a NEP has been accepted, the implementations must be completed. When the implementation is complete and accepted by the community, the status will be changed to \"Final\".\n\nA NEP can also be assigned status \"Deferred\". The NEP author or editor can assign the NEP this status when no progress is being made on the NEP. Once a NEP is deferred, the NEP editor can re-assign it to draft status.\n\nA NEP can also be \"Rejected\". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.\n\nNEPs can also be superseded by a different NEP, rendering the original obsolete.\n\nThe possible paths of the status of NEPs are as follows:\n\n[[Image:nep-1/process.png|NEP Process]]\n\nSome Informational and Meta NEPs may also have a status of \"Active\" if they are never meant to be completed. E.g. NEP 1 (this NEP).\n\n==What belongs in a successful NEP?==\n\nEach NEP should have the following parts:\n\n*Preamble -- [https://tools.ietf.org/html/rfc822 RFC 822] style headers containing meta-data about the NEP, including the NEP number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.\n\n*Abstract -- a short (~200 words) description of the technical issue being addressed.\n\n*Motivation (*optional) -- The motivation is critical for NEPs that want to change the NEO protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the NEP solves. NEP submissions without sufficient motivation may be rejected outright.\n\n*Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough", "doc_id": "941c8556-bd98-49a1-8555-b11804be5926", "embedding": null, "doc_hash": "f483187db0dd87c3027b9281f1b0f73480b5ebe7b2c6022a1d1ad47f48de72b0", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-1.mediawiki"}, "node_info": {"start": 3748, "end": 7517, "_node_type": "1"}, "relationships": {"1": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2", "2": "faee21f2-c965-407f-8f3f-7310fbe55625", "3": "88e62ef5-60d5-4023-b020-684e8e570570"}}, "__type__": "1"}, "88e62ef5-60d5-4023-b020-684e8e570570": {"__data__": {"text": "the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current NEO platforms.\n\n*Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.\n\n*Backwards Compatibility -- All NEPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The NEP must explain how the author proposes to deal with these incompatibilities. NEP submissions without a sufficient backwards compatibility treatise may be rejected outright.\n\n*Test Cases -- Test cases for an implementation are mandatory for NEPs that are affecting consensus changes. Other NEPs can choose to include links to test cases if applicable.\n\n*Implementations -- The implementations must be completed before any NEP is given status \"Final\", but it need not be completed before the NEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.\n\n==NEP Formats and Templates==\n\nNEPs should be written in [https://www.mediawiki.org/wiki/Help:Contents mediawiki] or [https://help.github.com/articles/basic-writing-and-formatting-syntax/ markdown] format. Image files should be included in a subdirectory for that NEP.\n\n===NEP Header Preamble===\n\nEach NEP must begin with an [https://tools.ietf.org/html/rfc822 RFC 822] style header preamble. The headers must appear in the following order. Headers marked with \"*\" are optional and are described below. All other headers are required.\n\n<pre>\n  NEP: <NEP number>(this is determined by the NEP editor)\n  Title: <NEP title>\n  Author: <list of authors' real names and optionally, email address>\n *Discussions-To: <email address>\n  Status: <Draft | Active | Accepted | Deferred | Rejected | Withdrawn | Final | Superseded>\n  Type: <Standard | Informational | Meta>\n  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>\n *Replaces: <NEP numbers>\n *Superseded-By: <NEP number>\n *Resolution: <url>\n</pre>\n\nThe Author header lists the names, and optionally the email addresses of all the authors/owners of the NEP. The format of the Author header value must be\n\n<pre>\n  Random J. User <address@dom.ain>\n</pre>\n\nif the email address is included, and just\n\n<pre>\n  Random J. User\n</pre>\n\nif the email address is not given.\n\nIf there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.\n\nNote: The Resolution header is required for Standards Track NEPs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the NEP is made.\n\nWhile a NEP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the NEP is being discussed. No Discussions-To header is necessary if the NEP is being discussed privately with the author.\n\nThe Type header specifies the type of NEP: Standard, Informational, or Meta.\n\nThe Created header records the date that the NEP was assigned a number. It should be in yyyy-mm-dd format, e.g. 2001-08-14.\n\nNEPs may have a Requires header, indicating the NEP numbers that this NEP depends on.\n\nNEPs may also have a Superseded-By header indicating that a NEP has been rendered", "doc_id": "88e62ef5-60d5-4023-b020-684e8e570570", "embedding": null, "doc_hash": "8179f4d55362306a00dc010a48adf1ad61d11a1d3b14f42f97e8d4d5486f6c3a", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-1.mediawiki"}, "node_info": {"start": 7521, "end": 11185, "_node_type": "1"}, "relationships": {"1": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2", "2": "941c8556-bd98-49a1-8555-b11804be5926", "3": "deae2be9-caa3-4407-b483-3417e6cc9f3a"}}, "__type__": "1"}, "deae2be9-caa3-4407-b483-3417e6cc9f3a": {"__data__": {"text": "may also have a Superseded-By header indicating that a NEP has been rendered obsolete by a later document; the value is the number of the NEP that replaces the current document. The newer NEP must have a Replaces header containing the number of the NEP that it rendered obsolete.\n\n===Auxiliary Files===\n\nNEPs may include auxiliary files such as diagrams. Such files must be included in a subdirectory for that NEP and be named nep-x-y.ext, where \"x\" is the NEP number, \"y\" is a serial number (starting at 1), and \"ext\" is replaced by the actual file extension (e.g. \"png\").\n\n==Transferring NEP Ownership==\n\nIt occasionally becomes necessary to transfer ownership of NEPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred NEP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the NEP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the NEP. We try to build consensus around a NEP, but if that's not possible, you can always submit a competing NEP.\n\nIf you are interested in assuming ownership of a NEP, send a message asking to take over, addressed to both the original author and the NEP editor. If the original author doesn't respond to email in a timely manner, the NEP editor will make a unilateral decision (it's not like such decisions can't be reversed :).\n\n==NEP Editors==\n\nThe current NEP editor is\n\n*Erik Zhang (@erikzhang)\n\n==NEP Editor Responsibilities & Workflow==\n\nFor each new NEP that comes in, an editor does the following:\n\n*Read the NEP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.\n\n*The title should accurately describe the content.\n\n*Edit the NEP for language (spelling, grammar, sentence structure, etc.), markup (Github flavored Markdown), code style\n\nIf the NEP isn't ready, the editor will send it back to the author for revision, with specific instructions.\n\nOnce the NEP is ready for the repository, the NEP editor will:\n\n*Assign a NEP number (almost always just the next available number, but sometimes it's a special/joke number, like 666 or 3141) in the pull request comments.\n\n*Merge the pull request when the author is ready (allowing some time for further peer review).\n\n*List the NEP in [[README.mediawiki]]\n\n*Send a message back to the NEP author with next steps.\n\nThe NEP editors are intended to fulfill administrative and editorial responsibilities. The NEP editors monitor NEP changes, and correct any structure, grammar, spelling, or markup mistakes we see.\n\n==History==\n\nThis document was derived heavily from [https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki Bitcoin's BIP-0001] written by Amir Taaki which in turn was derived from [https://www.python.org/dev/peps/pep-0001/ Python's PEP-0001]. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the NEO improvement process, and should not be bothered with technical questions specific to NEO or the NEP process. Please direct all comments to the NEP editors.\n", "doc_id": "deae2be9-caa3-4407-b483-3417e6cc9f3a", "embedding": null, "doc_hash": "c0dda9c1a407fb88da74ef0018bdadb721f2be5fb1b755768723381e36f7fae0", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-1.mediawiki"}, "node_info": {"start": 11184, "end": 14591, "_node_type": "1"}, "relationships": {"1": "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2", "2": "88e62ef5-60d5-4023-b020-684e8e570570"}}, "__type__": "1"}, "a52760c6-6781-4dfa-8629-6591be4684b0": {"__data__": {"text": "<pre>\n  NEP: 11\n  Title: Non-Fungible Token Standard\n  Author: Joe Stewart <hal0x2328@splyse.tech>, Shane Mann <fetter@splyse.tech>, Wyatt Mufson <wyatt@ryu.games>, Erik Zhang <erik@neo.org>\n  Type: Standard\n  Status: Final\n  Created: 2018-04-18\n</pre>\n\n==Abstract==\n\nThis NEP defines a standard non-fungible token system for the NEO Smart Economy.\n\n==Motivation==\n\nNFTs are required to track, exchange and enforce ownership of digital assets.\nA non-fungible token (NFT) can be thought of like a property deed - each one is unique and carries some non-mutable information (e.g. the physical address of the property).\nOther information, such as the owner of the property, can be changed.\nAlso, we provide built-in optional divisibility within each non-fungible asset.\nThis allows for high value objects to be tokenized more effectively.\n\n==Specification==\n\n===Common methods===\n\n====symbol====\n\n<pre>\n{\n  \"name\": \"symbol\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"String\"\n}\n</pre>\n\nReturns a short string symbol of the token managed in this contract. e.g. <code>\"MNFT\"</code>.\nThis symbol SHOULD be short (3-8 characters is recommended), with no whitespace characters or new-lines and SHOULD be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).\n\nThis method MUST always return the same value every time it is invoked.\n\n====decimals====\n\n<pre>\n{\n  \"name\": \"decimals\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nReturns the number of decimals used by the token - e.g. <code>8</code>, means to divide the token amount by <code>100,000,000</code> to get its user representation.\n\nIf the token managed in this contract is indivisible, the function SHOULD return <code>0</code>.\n\nIf this method returns <code>0</code>, the \"Non-divisible NFT methods\" must be implemented.\nOtherwise, the \"Divisible NFT methods\" must be implemented.\n\nThis method MUST always return the same value every time it is invoked.\n\n====totalSupply====\n\n<pre>\n{\n  \"name\": \"totalSupply\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nReturns the total token supply currently in the system.\n\n====balanceOf====\n\n<pre>\n{\n  \"name\": \"balanceOf\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"owner\",\n      \"type\": \"Hash160\"\n    }\n  ],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nReturns the total amount of NFTs owned by the specified address.\n\nThe parameter <code>owner</code> SHOULD be a 20-byte address.\nIf not, this method SHOULD <code>throw</code> an exception.\n\n====tokensOf====\n\n<pre>\n{\n  \"name\": \"tokensOf\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"owner\",\n      \"type\": \"Hash160\"\n    }\n  ],\n  \"returntype\": \"InteropInterface<iterator>\"\n}\n</pre>\n\nReturns an <code>iterator</code> that contains all of the token ids owned by the specified address.\nEach of these IDs SHOULD be a ByteString with a length of no more than 64", "doc_id": "a52760c6-6781-4dfa-8629-6591be4684b0", "embedding": null, "doc_hash": "17e095bf12d571f4e6aeb6fae5d8ceade948c7aebd79977b701798e26c5268a6", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"}, "node_info": {"start": 0, "end": 2899, "_node_type": "1"}, "relationships": {"1": "663d5b6cf13be0f1275a907bc31741a313d14b31", "3": "05ed184a-0e88-4b47-8900-0f87c3c40aed"}}, "__type__": "1"}, "05ed184a-0e88-4b47-8900-0f87c3c40aed": {"__data__": {"text": "of these IDs SHOULD be a ByteString with a length of no more than 64 bytes.\n\nThe parameter <code>owner</code> SHOULD be a 20-byte address.\nIf not, this method SHOULD <code>throw</code> an exception.\n\n====transfer====\n\n<pre>\n{\n  \"name\": \"transfer\",\n  \"safe\": false,\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"Any\"\n    }\n  ],\n  \"returntype\": \"Boolean\"\n}\n</pre>\n\nIt transfers the token with id <code>tokenId</code> to address <code>to</code>.\n\nThe parameter <code>to</code> SHOULD be a 20-byte address.\nIf not, this method SHOULD <code>throw</code> an exception.\n\nThe parameter <code>tokenId</code> SHOULD be a valid NFT ID (64 or less bytes long).\nIf not, this method SHOULD <code>throw</code> an exception.\n\nThe function SHOULD return <code>false</code> if the token that will be transferred has more than one owner.\n\nIf the method succeeds, it MUST fire the <code>Transfer</code> event, and MUST return <code>true</code>, even if the token is sent to the owner.\n\nIf the receiver is a deployed contract, the function MUST call <code>onNEP11Payment</code> method on receiver contract with the <code>data</code> parameter from <code>transfer</code> AFTER firing the <code>Transfer</code> event.\n\nThe function SHOULD check whether the owner address equals the caller contract hash.\nIf so, the transfer SHOULD be processed; If not, the function SHOULD use the SYSCALL <code>Neo.Runtime.CheckWitness</code> to verify the transfer.\n\nIf the transfer is not processed, the function SHOULD return <code>false</code>.\n\n===Non-divisible NFT methods===\n\n====ownerOf====\n\n<pre>\n{\n  \"name\": \"ownerOf\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    }\n  ],\n  \"returntype\": \"Hash160\"\n}\n</pre>\n\nReturns the owner of the specified token.\n\nThe parameter <code>tokenId</code> SHOULD be a valid NFT ID (64 or less bytes long).\nIf not, this method SHOULD <code>throw</code> an exception.\n\n===Divisible NFT methods===\n\n====transfer====\n\n<pre>\n{\n  \"name\": \"transfer\",\n  \"safe\": false,\n  \"parameters\": [\n    {\n      \"name\": \"from\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"to\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"amount\",\n      \"type\": \"Integer\"\n    },\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"Any\"\n    }\n  ],\n  \"returntype\": \"Boolean\"\n}\n</pre>\n\nIt transfers an <code>amount</code> of tokens with id <code>tokenId</code> from address", "doc_id": "05ed184a-0e88-4b47-8900-0f87c3c40aed", "embedding": null, "doc_hash": "5729ca74053e97866a2418a93ce3095a82a9700d06b2db1f7f25fd1b1eb4f2ae", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"}, "node_info": {"start": 2846, "end": 5437, "_node_type": "1"}, "relationships": {"1": "663d5b6cf13be0f1275a907bc31741a313d14b31", "2": "a52760c6-6781-4dfa-8629-6591be4684b0", "3": "931f7218-1f13-4c02-afaf-4cd43cf187cc"}}, "__type__": "1"}, "931f7218-1f13-4c02-afaf-4cd43cf187cc": {"__data__": {"text": "of tokens with id <code>tokenId</code> from address <code>from</code> to address <code>to</code>.\n\nThe parameters <code>from</code> and <code>to</code> SHOULD be 20-byte addresses.\nIf not, this method SHOULD <code>throw</code> an exception.\n\nThe parameter <code>amount</code> SHOULD be greater than or equal to <code>0</code> and SHOULD be less than or equal to <code>pow(10, decimals())</code>.\nIf not, this method SHOULD <code>throw</code> an exception.\n\nThe parameter <code>tokenId</code> SHOULD be a valid NFT ID (64 or less bytes long).\nIf not, this method SHOULD <code>throw</code> an exception.\n\nThe function SHOULD return <code>false</code> if the <code>from</code> account balance does not have enough tokens to spend.\n\nIf the method succeeds, it MUST fire the <code>Transfer</code> event, and MUST return <code>true</code>, even if the <code>amount</code> is <code>0</code>, or the token is sent to the owner.\n\nIf the receiver is a deployed contract, the function MUST call <code>onNEP11Payment</code> method on receiver contract with the <code>data</code> parameter from <code>transfer</code> AFTER firing the <code>Transfer</code> event.\n\nThe function SHOULD check whether the <code>from</code> address equals the caller contract hash.\nIf so, the transfer SHOULD be processed; If not, the function SHOULD use the SYSCALL <code>Neo.Runtime.CheckWitness</code> to verify the transfer.\n\nIf the transfer is not processed, the function SHOULD return <code>false</code>.\n\n====ownerOf====\n\n<pre>\n{\n  \"name\": \"ownerOf\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    }\n  ],\n  \"returntype\": \"InteropInterface<iterator>\"\n}\n</pre>\n\nReturns an <code>iterator</code> that contains all the co-owners that own the specified token.\n\nThe parameter <code>tokenId</code> SHOULD be a valid NFT ID (64 or less bytes long).\nIf not, this method SHOULD <code>throw</code> an exception.\n\n====balanceOf====\n\n<pre>\n{\n  \"name\": \"balanceOf\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"owner\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    }\n  ],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nThis method returns the balance of the specified token for the specified <code>owner</code>'s account.\n\nThe parameter <code>tokenId</code> SHOULD be a valid NFT ID (64 or less bytes long).\nIf not, this method SHOULD <code>throw</code> an exception.\n\nThe parameter <code>owner</code> SHOULD be a 20-byte address.\nIf not, this method SHOULD <code>throw</code> an exception.\n\nIf the <code>owner</code> is an unused address, or it's not the owner of the specified token, this method SHOULD return <code>0</code>.\n\n===Optional methods===\n\n====tokens====\n\n<pre>\n{\n  \"name\": \"tokens\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"InteropInterface<iterator>\"\n}\n</pre>\n\nReturns an <code>iterator</code> that contains all of the tokens minted", "doc_id": "931f7218-1f13-4c02-afaf-4cd43cf187cc", "embedding": null, "doc_hash": "05992b98bf8a4f2bd1170048db78480ab15691991d39cdf765eebb3067c27508", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"}, "node_info": {"start": 5447, "end": 8360, "_node_type": "1"}, "relationships": {"1": "663d5b6cf13be0f1275a907bc31741a313d14b31", "2": "05ed184a-0e88-4b47-8900-0f87c3c40aed", "3": "92e1c1ef-ce6f-4679-b62d-0a3849c63255"}}, "__type__": "1"}, "92e1c1ef-ce6f-4679-b62d-0a3849c63255": {"__data__": {"text": "an <code>iterator</code> that contains all of the tokens minted by the contract.\n\n====properties====\n\n<pre>\n{\n  \"name\": \"properties\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    }\n  ],\n  \"returntype\": \"Map\"\n}\n</pre>\n\nReturns a serialized NVM object containing the properties for the given NFT.\nThe NVM object must conform to the \"NEO NFT Metadata JSON Schema\".\n\nThe parameter <code>tokenId</code> SHOULD be a valid NFT ID (64 or less bytes long).\nIf not, this method SHOULD <code>throw</code> an exception.\n\nFollowing is a description of the JSON Schema:\n<pre>\n{\n  \"title\": \"Asset Metadata\",\n  \"type\": \"object\",\n  \"required\": [\"name\"],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Identifies the asset to which this NFT represents.\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Optional. Describes the asset to which this NFT represents.\"\n    },\n    \"image\": {\n      \"type\": \"string\",\n      \"format\": \"uri\",\n      \"description\": \"Optional. A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\"\n    },\n    \"tokenURI\": {\n      \"type\": \"string\",\n      \"format\": \"uri\",\n      \"description\": \"Optional. A distinct URI for a given asset that adheres to RFC 3986\"\n    }\n  }\n}\n</pre>\n\nGiven this schema, the simplest json object that can be constructed is the following:\n<pre>\n{\n   \"name\": \"Slime 1\"\n}\n</pre>\n\nAnd if all the properties are included:\n<pre>\n{\n   \"name\": \"Slime 2\",\n   \"description\": \"A slime\",\n   \"image\": \"{some image URI}\",\n   \"tokenURI\": \"{some URI}\"\n}\n</pre>\n\n===Receiver methods===\n\n====onNEP11Payment====\n\n<pre>\n{\n  \"name\": \"onNEP11Payment\",\n  \"parameters\": [\n    {\n      \"name\": \"from\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"amount\",\n      \"type\": \"Integer\"\n    },\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"Any\"\n    }\n  ],\n  \"returntype\": \"Void\"\n}\n</pre>\n\nIf a contract is to receive NFTs, it must implement the receiver method. Transferring NFTs to any contract that does not implement the receiver method will cause the transaction to fail. If the receiver doesn't want to receive this transfer it MUST abort the execution.\n\nThe meaning of the parameters of the <code>onNEP11Payment</code> method is consistent with that of <code>transfer</code>. \n\n===Events===\n\n====Transfer====\n\n<pre>\n{\n  \"name\": \"Transfer\",\n  \"parameters\": [\n   ", "doc_id": "92e1c1ef-ce6f-4679-b62d-0a3849c63255", "embedding": null, "doc_hash": "b264a0c8851a4024ce67eeead8849a6ab29d946c55aa4b2cf0805acc3aef5358", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"}, "node_info": {"start": 8351, "end": 10962, "_node_type": "1"}, "relationships": {"1": "663d5b6cf13be0f1275a907bc31741a313d14b31", "2": "931f7218-1f13-4c02-afaf-4cd43cf187cc", "3": "d47ad24f-95f9-4d54-8c78-08e91c81f75e"}}, "__type__": "1"}, "d47ad24f-95f9-4d54-8c78-08e91c81f75e": {"__data__": {"text": " \"name\": \"Transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"from\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"to\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"amount\",\n      \"type\": \"Integer\"\n    },\n    {\n      \"name\": \"tokenId\",\n      \"type\": \"ByteString\"\n    }\n  ]\n}\n</pre>\n\nMUST trigger when tokens are transferred, including zero value transfers.\n\nA token contract which creates new tokens MUST trigger a <code>Transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.\n\nA token contract which burns tokens MUST trigger a <code>Transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.\n\n==Implementation==\n\nhttps://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep11Token.cs\n", "doc_id": "d47ad24f-95f9-4d54-8c78-08e91c81f75e", "embedding": null, "doc_hash": "574f212b1cd0235626de3d075bade7dfdef2aa4e2b3fe29fd924ac4c8442199b", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"}, "node_info": {"start": 10975, "end": 11805, "_node_type": "1"}, "relationships": {"1": "663d5b6cf13be0f1275a907bc31741a313d14b31", "2": "92e1c1ef-ce6f-4679-b62d-0a3849c63255"}}, "__type__": "1"}, "660f4415-0c25-46e6-8ce5-2edd5a0f966a": {"__data__": {"text": "<pre>\n  NEP: 14\n  Title: NeoContract ABI\n  Author: Erik Zhang <erik@neo.org>\n  Type: Standard\n  Status: Final\n  Created: 2020-03-25\n  Replaces: 3\n</pre>\n\n==Abstract==\n\nAn Application Binary Interface (ABI) is the interface between two program modules, one of which is often a library and/or operating system and the other one is usually an application created by a regular programmer.\n\nThis NEP describes the ABI standards for NEO smart contracts.\n\n==Motivation==\n\nNEO smart contract system is designed to be mutually invocable between contracts. To achieve this, we need a mechanism for exposing the interface of smart contracts. With NeoContract ABI, developers can easily create programs to invoke smart contracts or write clients that automatically access contract functionalities.\n\n==Rationale==\n\nWe assume the Application Binary Interface (ABI) is strongly typed, known at compilation time and static. No introspection mechanism will be provided. We assert that all contracts will have the interface definitions of any contracts they call available at compile-time.\n\nThis specification does not address contracts whose interface is dynamic or otherwise known only at run-time. Should these cases become important they can be adequately handled as facilities built within the NEO ecosystem.\n\n==Specification==\n\n===Contract===\n\nThe NeoContract ABI is defined by JSON format, which has the following basic structure, where some of the top-level objects can have any number of child objects:\n\n<pre>\n{\n  \"methods\": [],\n  \"events\": []\n}\n</pre>\n\n<code>methods</code> is an array of Method objects which describe the details of each method in the contract.\n\n<code>events</code> is an array of Event objects which describe the details of each event in the contract.\n\n===Method===\n\nMethod object has the following structure:\n\n<pre>\n{\n  \"name\": \"transfer\",\n  \"offset\": 0,\n  \"safe\": false,\n  \"parameters\": [],\n  \"returntype\": \"Boolean\"\n}\n</pre>\n\n<code>name</code> is the name of the method, which can be any valid identifier.\n\n<code>offset</code> is the offset of this method in the script.\n\n<code>safe</code> indicates if it's safe to call this method. If a method is marked as safe, the user interface will not give any warnings when it is called by any other contract.\n\n<code>parameters</code> is an array of Parameter objects which describe the details of each parameter in the method.\n\n<code>returntype</code> indicates the return type of the method. It can be one of the following values: <code>Any</code>, <code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>Map</code>, <code>InteropInterface</code>, <code>Void</code>.\n\n===Event===\n\nEvent object has the following structure:\n\n<pre>\n{\n  \"name\": \"refund\",\n  \"parameters\": []\n}\n</pre>\n\n<code>name</code> is the name of the event, which can be any valid identifier.\n\n<code>parameters</code> is an array of Parameter objects which describe the details of each parameter in the event.\n\n===Parameter===\n\nParameter object has the following structure:\n\n<pre>\n{\n  \"name\": \"from\",\n  \"type\": \"Hash160\"\n}\n</pre>\n\n<code>name</code> is the name of the parameter, which can be any valid identifier.\n\n<code>type</code> indicates the type of the parameter. It can be one of the following values: <code>Any</code>,", "doc_id": "660f4415-0c25-46e6-8ce5-2edd5a0f966a", "embedding": null, "doc_hash": "b7d2abb0f33c633242ef972fb0f905381b65e24b7301fb1662ebddd0db853c9e", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-14.mediawiki"}, "node_info": {"start": 0, "end": 3402, "_node_type": "1"}, "relationships": {"1": "fce99ff8c5884f7ba5a9949812e08489c86b7ebd", "3": "7029f4d7-f830-47ab-b852-9f070e98b498"}}, "__type__": "1"}, "7029f4d7-f830-47ab-b852-9f070e98b498": {"__data__": {"text": "parameter. It can be one of the following values: <code>Any</code>, <code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>Map</code>, <code>InteropInterface</code>.\n\n===ParameterType===\n\nParameterType enum has the following values:\n\n{|\n!name\n!description\n|-\n| Signature\n| A signature of a transaction or block which is generated by the user.\n|-\n| Boolean\n| A boolean value can be either <code>true</code> or <code>false</code>.\n|-\n| Integer\n| An arbitrarily large integer whose value in theory has no upper or lower bounds.\n|-\n| Hash160\n| A 160-bits integer.\n|-\n| Hash256\n| A 256-bits integer.\n|-\n| ByteArray\n| A byte array.\n|-\n| PublicKey\n| An ECC public key which is encoded with compressed mode.\n|-\n| String\n| A string which is encoded in UTF-8.\n|-\n| Array\n| An array of objects. The type of elements can be any value of ParameterType.\n|-\n| Map\n| A map of objects. The type of elements inside the key/value collection can be any value of ParameterType.\n|-\n| InteropInterface\n| An interface which is returned by interop services.\n|-\n| Any\n| Any means that the method will return a value of uncertain type.\n|-\n| Void\n| Void means that the method has no return value. This value cannot be the type of a parameter.\n|}\n", "doc_id": "7029f4d7-f830-47ab-b852-9f070e98b498", "embedding": null, "doc_hash": "aca2e4e8c77ee981b3c32c07be9866d850fa8d403de3a333655892c4613ce5d7", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-14.mediawiki"}, "node_info": {"start": 3335, "end": 4705, "_node_type": "1"}, "relationships": {"1": "fce99ff8c5884f7ba5a9949812e08489c86b7ebd", "2": "660f4415-0c25-46e6-8ce5-2edd5a0f966a"}}, "__type__": "1"}, "d4b67375-7206-44bf-8d0f-e43586765dc3": {"__data__": {"text": "<pre>\n  NEP: 15\n  Title: NeoContract Manifest\n  Author: Erik Zhang <erik@neo.org>, Fernando D\u00edaz Toledano <shargon@gmail.com>, Vitor Naz\u00e1rio Coelho <vncoelho@gmail.com>, Igor Machado Coelho <igormachado@gmail.com>, Li Jianying <lightsever@hotmail.com> \n  Type: Standard\n  Status: Final\n  Created: 2020-03-20\n  Requires: 14\n</pre>\n\n==Abstract==\n\nA\u00a0Manifest is a file containing metadata for a group of accompanying files. For example, the files of a computer program may have a manifest describing name, trust information, permissions required for execution. \n\nThis NEP describes the Manifest standards for NEO smart contracts.\n\n==Motivation==\n\nThere should be a way to expose the access control over the contract. To achieve this, we need a mechanism for describing the features and permissions of smart contracts. With NeoContract Manifest, developers can have clear recognition about the contract and easily create programs to invoke the contract.\n\n==Rationale==\n\nWe assume the Manifest is strongly typed, known at compilation time and static. No introspection mechanism will be provided. We assert that all contracts will have the interface definitions of any contracts they call available at compile-time.\n\n==Specification==\n\n===Manifest===\n\nThe NeoContract Manifest is defined by JSON format, which has the following basic structure, where some of the top-level objects can have any number of child objects:\n\n<pre>\n\n{\n  \"name\": \"\",\n  \"groups\": [],\n  \"features\": {},\n  \"supportedstandards\": [],\n  \"abi\": {},\n  \"permissions\": [],\n  \"trusts\": [], \n  \"extra\": {}\n}\n\n</pre>\n\nThe <code>name</code> is the name of the contract, which can be any valid identifier.\n\nThe <code>groups</code> field is an array of <code>Group</code> objects which represent a set of mutually trusted contracts. A contract will trust and allow any contract in the same group to invoke it, and the user interface will not give any warnings.\n\nThe <code>features</code> field will be used for future expansion and should always be an empty object for now.\n\nThe <code>supportedstandards</code> field describes which standard it supports, such like <code>NEP</code> or <code>RFC</code>. It must be an array. In order to make smart contracts or other clients understand correctly, all NEPs must be capitalized. NEP and number must be connected with <code>-</code>. For example: <code>\"supportedstandards\": [\"NEP-11\", \"NEP-17\", \"RFC 1035\"]</code>.\n\nThe <code>abi</code> field describes which methods and events are included in the contract and how other contracts interact with them. For technical details of ABI, please refer to [https://github.com/neo-project/proposals/pull/119 NEP-14: NeoContract ABI].\n\nThe <code>permissions</code> field is an array containing a set of <code>Permission</code> objects. It describes which contracts may be invoked and which methods are called.\n\nThe <code>trusts</code> field is an array containing a set of contract hashes or group public keys. It can also be assigned with a wildcard <code>*</code>. If it is a wildcard <code>*</code>, then it means that it trusts any contract. If a contract is trusted, the user interface will not give any warnings when called by the contract.\n\nThe <code>extra</code> field describes the custom user data, such as name, code version, author, description, etc.\n\nThe extension name of the manifest file should be <code>.manifest.json</code>.\n\n===Group===\n\nA <code>Group</code> is identified by a public key and must be accompanied by a signature", "doc_id": "d4b67375-7206-44bf-8d0f-e43586765dc3", "embedding": null, "doc_hash": "cac321317aacce89e3385a17c8061364dd028e6384cc5b0fa107f68463f0000c", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-15.mediawiki"}, "node_info": {"start": 0, "end": 3486, "_node_type": "1"}, "relationships": {"1": "6775f3f9fb92dea7c04deb0dbb4619aa6e32feda", "3": "52f55661-79b8-4e4b-bcac-28a19c1e9a4a"}}, "__type__": "1"}, "52f55661-79b8-4e4b-bcac-28a19c1e9a4a": {"__data__": {"text": "is identified by a public key and must be accompanied by a signature for the contract hash to prove that the contract is indeed included in the group.\n\n<pre>\n{\n  \"pubKey\": \"0333b24ee50a488caa5deec7e021ff515f57b7993b93b45d7df901e23ee3004916\",\n  \"signature\": \"bAhbpx1J8eIPLb5\\u002BfvDIRQTbX0doilPxQO\\u002BQKS\\u002B3fpgyjTwV73UPrv0qsb6I3ZuQjfCA7xoePl5rU508B7k\\u002B7w==\"\n}\n</pre>\n\nWhere <code>pubKey</code> represents the public key of the group and <code>signature</code> is the signature of the contract hash encoded in Base64.\n\n===Permission===\n\nThe definition of the <code>Permission</code> object is as follows:\n\n<pre>\n{\n  \"contract\": \"hash | group | *\",\n  \"methods\": [] | \"*\"\n}\n</pre>\n\nThe <code>contract</code> field indicates the contract to be invoked. It can be a hash of a contract, a public key of a group, or a wildcard <code>*</code>.\n\nIf it specifies a hash of a contract, then the contract will be invoked; If it specifies a public key of a group, then any contract in this group will be invoked; If it specifies a wildcard <code>*</code>, then any contract will be invoked.\n\nThe <code>methods</code> field is an array containing a set of methods to be called. It can also be assigned with a wildcard <code>*</code>, which means that any method can be called.\n\nIf a contract invokes a contract or method that is not declared in the manifest at runtime, the invocation will fail.\n", "doc_id": "52f55661-79b8-4e4b-bcac-28a19c1e9a4a", "embedding": null, "doc_hash": "e5a917f3720e400cdc1b5dd5842bd541a8480d7e967551c0880ed327707f187a", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-15.mediawiki"}, "node_info": {"start": 3418, "end": 4810, "_node_type": "1"}, "relationships": {"1": "6775f3f9fb92dea7c04deb0dbb4619aa6e32feda", "2": "d4b67375-7206-44bf-8d0f-e43586765dc3"}}, "__type__": "1"}, "2486bb1f-1bd4-4127-9ab2-943eb186bfec": {"__data__": {"text": "<pre>\n  NEP: 16\n  Title: NEO Executable Format (NEF)\n  Author: Erik Zhang <erik@neo.org>, Fernando D\u00edaz Toledano <shargon@gmail.com>, Igor Machado Coelho <igormachado@gmail.com>, Li Jianying <lightsever@hotmail.com>, Vitor Naz\u00e1rio Coelho <vncoelho@gmail.com>\n  Type: Standard\n  Status: Final\n  Created: 2020-03-31\n</pre>\n\n==Abstract==\n\nCompiled code to be executed by the Neo virtual machine is represented using a binary format, typically stored in a file, known as the <code>nef</code> file format. The <code>nef</code> file contains Neo bytecodes, as well as other ancillary information such as byte ordering and compiler used.\n\nThis NEP describes the NEF standard for NEO smart contracts.\n\n==Motivation==\n\nFor the sake of security, we need to place strong syntactic and structural constraints on the executable file. With the <code>nef</code> file format, we can guarantee both the validity and functionality of the compiled file.\n\n==Specification==\n\nIn the field definitions below, we provide both the definitions of the fields as well as the corresponding functions.\n\n===NefFile Structure===\n\nA <code>nef</code> file consists of a stream of 8-bit bytes. Multibyte data items are always stored in little-endian order, where the low bytes come first. Its structure is described further below.\n\n<pre>\nnef_file\n{\n  4-byte  magic;\n  64-byte compiler;\n  var-byte source;\n  1-byte reserve;\n  method_token{\n    20-byte hash;\n    var-byte method;\n    2-byte parametersCount;\n    1-byte hasReturnValue;\n    1-byte callFlags;\n  } tokens[];\n  2-byte reserve;\n  var-byte script;\n  4-byte checksum;\n}\n</pre>\n\nThe extension name of the <code>nef</code> file should be <code>.nef</code>.\n\n====magic====\n\nThe <code>magic</code> item supplies the magic number identifying the <code>NEF3</code> file format; it has the value <code>0x3346454E</code>.\n\n====compiler====\n\nThe <code>compiler</code> is a UTF-8 encoded <code>string</code> representing the compiler used to create the data in the <code>script</code> item. It should indicate the name and the version of the compiler, which must be padded to make it up to the required length if shorter than 64 bytes.\n\n====source====\n\nThe field <code>source</code> is related with the location of the source code.\n\n====reserve====\n\nAll bits of the <code>reserve</code> item are reserved for future use and must be set to zero in generated nef files.\n\n====tokens====\n\nEach entry in the <code>tokens</code> item must be a <code>method_token</code> structure giving a necessary description of a method invoked by this contract.\n\n=====hash=====\n\nThe <code>hash</code> item represents the hash of the static contract with the length of 20 bytes, indicating which contract the method belongs to.\n\n=====method=====\n\nThe <code>method</code> item is used to represent constant string values of the method name. It has s single-byte length prefix and up to 32 byte string contents encoded in UTF-8.\n=====parametersCount=====\n\nThe <code>parametersCount</code> denotes the number of formal parameters of the method.\n\n=====hasReturnValue=====\n\nThe <code>hasReturnValue</code> item is a boolean value that indicates whether the method has return value or not.\n\n=====callFlags=====\n\nThe value of", "doc_id": "2486bb1f-1bd4-4127-9ab2-943eb186bfec", "embedding": null, "doc_hash": "6ac2c8456761215cb7ed7dea84347cf43af4c05f041be4eb0fadc04ca779d1b1", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-16.mediawiki"}, "node_info": {"start": 0, "end": 3211, "_node_type": "1"}, "relationships": {"1": "2e294e91a705ff61d7ce858a41915e703db7e590", "3": "98fa73fe-b660-494d-b24b-728eec0b4188"}}, "__type__": "1"}, "98fa73fe-b660-494d-b24b-728eec0b4188": {"__data__": {"text": "method has return value or not.\n\n=====callFlags=====\n\nThe value of the <code>callFlags</code> item is a mask of flags used to denote the calling permission to the method. The Interpretation of each flag, when set, is specified in the following table:\n\n{|\n!Flag Name !!Value !!Interpretation\n|-\n| None || 0 || called without other permissions\n|-\n| ReadStates || 0b00000001 || allow to read the storage \n|-\n| WriteStates || 0b00000010 || allow to write the storage\n|-\n| AllowCall || 0b00000100 || allow to call methods in other contracts\n|-\n| AllowNotify || 0b00001000 || allow to send the notification\n|}\n\nAll bits of the <code>callFlags</code> item not assigned in the table are reserved for future use. They should be set to zero in generated <code>nef</code> files.\n\n====script====\n\nThe value of <code>script</code> stores the raw VM opcodes. The data should be serialised using the variable length format as described in the [https://docs.neo.org/developerguide/en/articles/conventions.html#variable-length-types documentation].\n\n====checksum====\n\nThe <code>checksum</code> item is used not only to ensure a corrupt-free transmission, but also to ensure that the file has not been tampered with. It is computed by using the SHA256 algorithm to hash the serialised <code>nef</code> file excluding <code>checksum</code> twice, and converting the result into a 32-bit unsigned integer, which must be identical with the last four bytes of the <code>nef</code> file.\n\n==Implementation==\n\nhttps://github.com/neo-project/neo/blob/master/src/neo/SmartContract/NefFile.cs\n", "doc_id": "98fa73fe-b660-494d-b24b-728eec0b4188", "embedding": null, "doc_hash": "6f53a3053993944be5241b10ab07c9ea4c9e11b351c03e0283ec1482edd19b1b", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-16.mediawiki"}, "node_info": {"start": 3145, "end": 4711, "_node_type": "1"}, "relationships": {"1": "2e294e91a705ff61d7ce858a41915e703db7e590", "2": "2486bb1f-1bd4-4127-9ab2-943eb186bfec"}}, "__type__": "1"}, "bf7f6fa8-8368-4fb8-8eb7-4c8bd19b616a": {"__data__": {"text": "<pre>\n  NEP: 17\n  Title: Token Standard\n  Author: Erik Zhang <erik@neo.org>\n  Type: Standard\n  Status: Final\n  Created: 2020-11-12\n  Replaces: 5\n</pre>\n\n==Abstract==\n\nThis proposal outlines a token standard for the NEO blockchain that will provide systems with a generalized interaction mechanism for tokenized Smart Contracts.  This mechanic, along with the justification for each feature are defined.  A template and examples are also provided to enable the development community.\n\n==Motivation==\n\nAs the NEO blockchain scales, Smart Contract deployment and invocation will become increasingly important.  Without a standard interaction method, systems will be required to maintain a unique API for each contract, regardless of their similarity to other contracts.  Tokenized contracts present themselves as a prime example of this need because their basic operating mechanism is the same.  A standard method for interacting with these tokens relieves the entire ecosystem from maintaining a definition for basic operations that are required by every Smart Contract that employs a token.\n\n==Specification==\n\nIn the method definitions below, we provide both the definitions of the functions as they are defined in the contract as well as the invoke parameters.\n\n===Methods===\n\n====symbol====\n\n<pre>\n{\n  \"name\": \"symbol\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"String\"\n}\n</pre>\n\nReturns a short string representing symbol of the token managed in this contract. e.g. <code>\"MYT\"</code>. This string MUST be valid ASCII, MUST NOT contain whitespace or control characters, SHOULD be limited to uppercase Latin alphabet (i.e. the 26 letters used in English) and SHOULD be short (3-8 characters is recommended).\n\nThis method MUST always return the same value every time it is invoked.\n\n====decimals====\n\n<pre>\n{\n  \"name\": \"decimals\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nReturns the number of decimals used by the token - e.g. <code>8</code>, means to divide the token amount by <code>100,000,000</code> to get its user representation.\n\nThis method MUST always return the same value every time it is invoked.\n\n====totalSupply====\n\n<pre>\n{\n  \"name\": \"totalSupply\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nReturns the total token supply deployed in the system.\n\n====balanceOf====\n\n<pre>\n{\n  \"name\": \"balanceOf\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"account\",\n      \"type\": \"Hash160\"\n    }\n  ],\n  \"returntype\": \"Integer\"\n}\n</pre>\n\nReturns the token balance of the <code>account</code>.\n\nThe parameter <code>account</code> MUST be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.\n\nIf the <code>account</code> is an unused address, this method MUST return <code>0</code>.\n\n====transfer====\n\n<pre>\n{\n  \"name\": \"transfer\",\n  \"safe\": false,\n  \"parameters\": [\n    {\n      \"name\": \"from\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"to\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"amount\",\n      \"type\": \"Integer\"\n    },\n", "doc_id": "bf7f6fa8-8368-4fb8-8eb7-4c8bd19b616a", "embedding": null, "doc_hash": "8b1ec00cc7f6fc330ab07179375ef96e6896f427adbc60bf83f4c845a62019ff", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki"}, "node_info": {"start": 0, "end": 3052, "_node_type": "1"}, "relationships": {"1": "55bce386ab89a40105f1481584f10c5ebb518f4a", "3": "d9859f30-0cf0-47d7-8c41-651aecc9c756"}}, "__type__": "1"}, "d9859f30-0cf0-47d7-8c41-651aecc9c756": {"__data__": {"text": "     \"type\": \"Integer\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"Any\"\n    }\n  ],\n  \"returntype\": \"Boolean\"\n}\n</pre>\n\nTransfers an <code>amount</code> of tokens from the <code>from</code> account to the <code>to</code> account.\n\nThe parameters <code>from</code> and <code>to</code> MUST be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.\n\nThe parameter <code>amount</code> MUST be greater than or equal to <code>0</code>. If not, this method SHOULD <code>throw</code> an exception.\n\nThe function MUST return <code>false</code> if the <code>from</code> account balance does not have enough tokens to spend.\n\nIf the method succeeds, it MUST fire the <code>Transfer</code> event, and MUST return <code>true</code>, even if the <code>amount</code> is <code>0</code>, or <code>from</code> and <code>to</code> are the same address.\n\nThe function SHOULD check whether the <code>from</code> address equals the caller contract hash. If so, the transfer SHOULD be processed; If not, the function SHOULD use the SYSCALL <code>Neo.Runtime.CheckWitness</code> to verify the transfer.\n\nIf the transfer is not processed, the function MUST return <code>false</code>.\n\nIf the receiver is a deployed contract, the function MUST call <code>onNEP17Payment</code> method on receiver contract with the <code>data</code> parameter from <code>transfer</code> AFTER firing the <code>Transfer</code> event. If the receiver doesn't want to receive this transfer it MUST call <code>ABORT</code>.\n\n<pre>\n{\n  \"name\": \"onNEP17Payment\",\n  \"parameters\": [\n    {\n      \"name\": \"from\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"amount\",\n      \"type\": \"Integer\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"Any\"\n    }\n  ],\n  \"returntype\": \"Void\"\n}\n</pre>\n\n===Events===\n\n====Transfer====\n\n<pre>\n{\n  \"name\": \"Transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"from\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"to\",\n      \"type\": \"Hash160\"\n    },\n    {\n      \"name\": \"amount\",\n      \"type\": \"Integer\"\n    }\n  ]\n}\n</pre>\n\nMUST trigger when tokens are transferred, including zero value transfers and self-transfers.\n\nA token contract which creates new tokens MUST trigger a <code>Transfer</code> event with the <code>from</code> address set to <code>null</code> when tokens are created.\n\nA token contract which burns tokens MUST trigger a <code>Transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.\n\n==Implementation==\n\nC#: https://github.com/neo-project/neo-devpack-dotnet/blob/master/src/Neo.SmartContract.Framework/Nep17Token.cs\n\nPython:", "doc_id": "d9859f30-0cf0-47d7-8c41-651aecc9c756", "embedding": null, "doc_hash": "5df00906616d77ad1a4d6f55e2f52f56705b1c090522ab8c5d08d5904d01ef54", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki"}, "node_info": {"start": 3033, "end": 5643, "_node_type": "1"}, "relationships": {"1": "55bce386ab89a40105f1481584f10c5ebb518f4a", "2": "bf7f6fa8-8368-4fb8-8eb7-4c8bd19b616a", "3": "3ac5eeb8-c2bf-48bd-867e-a515d9fe6ed0"}}, "__type__": "1"}, "3ac5eeb8-c2bf-48bd-867e-a515d9fe6ed0": {"__data__": {"text": "https://github.com/CityOfZion/neo3-boa/blob/development/boa3_test/examples/nep17.py\n", "doc_id": "3ac5eeb8-c2bf-48bd-867e-a515d9fe6ed0", "embedding": null, "doc_hash": "11202eb77373ed42decee27882d8ec81c8ca871685ecfd83bae07476534baeaa", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki"}, "node_info": {"start": 5664, "end": 5748, "_node_type": "1"}, "relationships": {"1": "55bce386ab89a40105f1481584f10c5ebb518f4a", "2": "d9859f30-0cf0-47d7-8c41-651aecc9c756"}}, "__type__": "1"}, "7a97c8e1-7040-4496-b45b-d768d3cddc22": {"__data__": {"text": "<pre>\n  NEP: 19\n  Title: Debug Info Specification\n  Author: Harry Pierson (harrypierson@hotmail.com)\n  Type: Standard\n  Status: Final\n  Created: 2019-09-02\n</pre>\n\n== Abstract ==\n\nThis NEP describes the debug information format used by the \n[https://github.com/neo-project/neo-debugger Neo Smart Contract Debugger].\nThis information is generated by smart contract compilers such as \n[https://github.com/neo-project/neo-devpack-dotnet NCCS]\nand [https://github.com/CityOfZion/neo-boa neo-boa].\n\n== Motivation ==\n\nIn order to provide a good developer experience, the debugger needs additional type information\nabout parameters, variables and storage items that exists in the contract source code but is not\nneeded by the NeoVM and is discarded during contract compilation. The debugger also needs to source\nmap information in order to map binary addresses in compiled contracts to locations in source code.\n\n== Rationale ==\n\nThis format has been implemented by the Neo Smart Contract Debugger and multiple Neo smart contract\ncompilers including NCCS, NEON, neo-boa, Neow3j and neo-go.\n\n== Debug Info Format Specification ==\n\nNeo compilers SHOULD emit debug information as part of the compilation process along with the required\ncompiled contract binary and contract manifest. Emitting debug information is optional, but the Neo\nSmart Contract Debugger will be limited to disassembly level debugging without it.\n\nDebug info is stored in JSON format, described informally below and specified via the \"[[nep-19/neo-debug-info.schema.json|neo-debug-info.schema.json]]\" file.\nThe debug info is stored in a file with the same base name as the contract binary with the extension\n\".debug.json\". The debug info can be optionally compressed using standard Zip compression. When compressed,\nthe debug info archive must have single \".debug.json\" file and the archive itself must have an \".nefdbgnfo\"\nextension. \n\n<blockquote>\nNote, the format is defined in this specification using TypeScript for readability. \nThere is no requirement that this format be implemented in TypeScript. \nThe full specification of this format is specified in \"[[nep-19/neo-debug-info.schema.json|neo-debug-info.schema.json]]\"\n</blockquote>\n\nThe debug info has the following structure. Note, for space optimization, several string properties contain\nmultiple pieces of information encoded as a string. Those encodings are indicated in comments in the code below.\n\n  type TypeName = string; // format: ContractParamterType enum value\n\n  type MemberName = string // format: \"{namespace},{display-name}\n\n  type Variable = string; // format: \"{name},{TypeName}(,{slotIndex})?\n\n  interface Method {\n    id: string;\n    name: MemberName; \n    range: string; // format: \"{start-address}-{end-address}\n    params?: Variable[]; \n    return?: TypeName;\n    variables?: Variable[]; \n    \"sequence-points\"?: string[]; // format: \"{address}[{document-index}]{start-line}:{start-column}-{end-line}:{end-column}\"\n  }\n\n  interface Event {\n    id: string;\n    name: MemberName; \n    params?: Variable[]; \n  }\n\n  interface DebugInformation {\n    hash: string; // hex-encoded UInt160\n    documents?: string[]; // absolute or relative file paths\n    document-root?: string | null; // project root\n    events?: Event[];\n    methods?: Method[];\n    \"static-variables\"?: Variable[]; \n  }\n\n=== TypeName ===\n\nTypeNames in Neo debug info are string encoded values from the", "doc_id": "7a97c8e1-7040-4496-b45b-d768d3cddc22", "embedding": null, "doc_hash": "34d59333d844cabbdb0e96637988f1b5d4b89eb01421f22c900adf649d2788b6", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-19.mediawiki"}, "node_info": {"start": 0, "end": 3409, "_node_type": "1"}, "relationships": {"1": "a4a4b904d8b191a23528d4997e7314f27a6250e5", "3": "4ef0c57c-b50e-4926-b4b2-f8f9d24aaf4a"}}, "__type__": "1"}, "4ef0c57c-b50e-4926-b4b2-f8f9d24aaf4a": {"__data__": {"text": "TypeName ===\n\nTypeNames in Neo debug info are string encoded values from the \n[https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ContractParameterType.cs ContractParameterType enum type]\n\n* Any\n* Boolean\n* Integer\n* ByteArray\n* String\n* Hash160\n* Hash256\n* PublicKey\n* Signature\n* Array\n* Map\n* InteropInterface\n* Void\n\nGenerally, this type information is used to decode NeoVM types during debugging. For example, NeoVM has no\nnative string type - strings are represented in NeoVM as a [https://github.com/neo-project/neo-vm/blob/master/src/neo-vm/Types/ByteString.cs ByteString].\nThe additional type information enables the debugger to treat the bytes in the NeoVM ByteString as a UTF-8\nencoded string in order to decode the string for the developer.\n\n=== Variable ===\n\nVariable types are used to encode name and type information about NeoVM arguments, local variables and static\nfields. Additionally, a variable may include an optional slot index. This is useful for scenarios where the\ncompiler may use slots for hidden variables not authored by the developer. If the slot index is not specified,\nthe array index of the Variable type is used as the slot index. For a given variable array, ''ALL'' variables ''MUST''\ninclude a slot index if ''ANY'' variables contain a slot index. Mixing variables with and and without an optional\nslot index in a single Variable array is '''NOT SUPPORTED'''. It is supported to have some Variable arrays include\nslot index information while other Variable arrays in the same debug info file do not.\n\nName, type and optional slot index are combined into a single comma separated string. A Variable without slot\nindex has a single comma (i.e. \"varName,varType\") while a Variable with index has two commas (i.e. \"varName,varType,1\").\n\n=== MemberName ===\n\nMemberName types are used to store the name and optional namespace of a type member such as a method or event.\nMemberName namespace is optional, but the comma separator is not. For encoding members with no namespace, the\nMemberName string MUST start with a comma (i.e. \",SomeName\").\n\n=== Method ===\n\nMethod types have the following fields:\n\n* id: a unique string representing the method.\n* name: a MemberName with the method's name and optional namespace\n* range: the range of NeoVM bytecode addresses that is associated with this method. Range is encoded as a string with the start and end addresses as integers separated by a dash\n* params: a collection of Variable instances representing the NeoVM arguments associated with this method\n* return: the TypeName of the method's return value\n* variables: a collection of Variable instances representing the NeoVM local variables associated with this method\n* sequence-points: a collection of strings that encode a map of NeoVM bytecode addresses back to source code locations.\n\nNote, params, return, variables and sequence-points are all optional. A Method object with no return\nproperty will default to having Void return type. A Method object with no params, variables or sequence-points\nproperties will default to having an empty array of the collection in question.\n\nA sequence point contains six integers encoded into a single string\n\n* address: This is an integer representing the location in the contract script of the sequence point.\n* document-index: This is an index into the documents array indicating the source code file containing the sequence point. documents array is described below.\n* start-line: This is the line in the source code file that is associated with the sequence point\n* start-column: This is the column of the line specified above in the source code file associated with the sequence point. Note, this value can be zero for languages that don't support mapping sequence points to segments within a line\n* end-line: for languages that support multi-line code expressions, this is the last line of the source code associated with the sequence point. For single-line expressions, this will be the same as", "doc_id": "4ef0c57c-b50e-4926-b4b2-f8f9d24aaf4a", "embedding": null, "doc_hash": "3ec5c6ac427ae75298b7598e3b95cd491d94d3bf2b36150a7013d02c7397b3a0", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-19.mediawiki"}, "node_info": {"start": 3345, "end": 7333, "_node_type": "1"}, "relationships": {"1": "a4a4b904d8b191a23528d4997e7314f27a6250e5", "2": "7a97c8e1-7040-4496-b45b-d768d3cddc22", "3": "6a721008-1dfa-43ef-b56f-1b4dc3f2c67d"}}, "__type__": "1"}, "6a721008-1dfa-43ef-b56f-1b4dc3f2c67d": {"__data__": {"text": "code associated with the sequence point. For single-line expressions, this will be the same as start-line\n* end-column: for languages that support multi-line code expressions, this is column within end-line that marks the end of the sequence point code expression. Like start-column, it can be zero. Sequence points that have the same start/end line and zero for both start/end column will render the sequence point as the full line specified.\n\nThe six integers of a single sequence point are string encoded using this pattern:\n\n  {address}[{document-index}]{start-line}:{start-column}-{end-line}:{end-column}\n\n=== Event ===\n\nEvent types have the following fields:\n\n* id: a unique string representing the method.\n* name: a MemberName with the method's name and optional namespace\n* params: a collection of Variable instances representing the NeoVM arguments associated with this event\n\nNote, like Method types, params is optional. An event object with no params property will default to an\nempty params array.\n\n=== DebugInformation ===\n\nTop level debug information has the following fields\n\n==== hash ====\n\nThis property stores the UInt160 hash value of the contract's Script. Note, this is '''NOT''' the same as a\ndeployed contract's script hash. The debugger uses this hash value to map deployed contracts to their\ndebug information. The hash value is stored as a hex encoded string with an optional \"0x\" prefix.\n\n==== documents ====\n\nThis property stores an array of file paths, used in sequence point data. These paths can be absolute or\nrelative, pointing to the file paths of source files as they existed on the machine where the contract was\ncompiled.\n\nNeo Smart Contract Debugger has the ability to automatically discover differences in paths between compiling \nand debugging machine, plus supports manual source file mapping for cases where the mapping cannot be determined\nautomatically.\n\nIf omitted, this property defaults to an empty array.\n\n==== document-root ====\n\nThis property stores the root folder path for the contract source files. Releative paths in the documents\narray are treated as relative to the document-root path.\n\nIf omitted or null, all elements of the documents array are treated as absolute paths.\n\n==== static-variables ====\n\nThis property stores an array of Variable types, representing the static fields associated with this contract.\nIf omitted, this property defaults to an empty array.\n\n==== methods ====\n\nThis property stores an array of Method types as described above. Each Method object represents a method in the\ncontract. Both private and public methods from the contract should be represented in the methods array.\nIf omitted, this property defaults to an empty array.\n\n==== events ====\n\nThis property stores an array of Event types as described above. Each Event object represents a parameters\nof a contract notification that may be fired during contract execution. If omitted, this property defaults\nto an empty array.\n\n== Backwards Compatibility ==\n\nInitial preview releases of the Neo Smart Contract Debugger for Neo Legacy used a more verbose\nformat for debug info. That format was incompatible with the format described in this document,\nbut never shipped a production release. Production releases of the Neo Legacy debugger use a\nslightly different version of the format described in this document.\n\nThe Neo N3 Debugger initially shipped during preview without the DebugInformation static-variables\nproperty or the slotIndex Variable value. These were added as optional fields before production\nrelease of the N3 Debugger. \n\nDetails regarding older versions of the debug info format is available in the \n[https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN11%20-%20NEO%20Debug%20Info%20Specification.md original Design Note].\n\n== Implementation ==\n\nNCCS:", "doc_id": "6a721008-1dfa-43ef-b56f-1b4dc3f2c67d", "embedding": null, "doc_hash": "62f687d8bd7a900fcbc126b5a5896ea11f20612875907048b5abd9c0f047a5d4", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-19.mediawiki"}, "node_info": {"start": 7319, "end": 11138, "_node_type": "1"}, "relationships": {"1": "a4a4b904d8b191a23528d4997e7314f27a6250e5", "2": "4ef0c57c-b50e-4926-b4b2-f8f9d24aaf4a", "3": "9a057338-2b2d-444e-8f50-22d5060db43b"}}, "__type__": "1"}, "9a057338-2b2d-444e-8f50-22d5060db43b": {"__data__": {"text": "original Design Note].\n\n== Implementation ==\n\nNCCS: https://github.com/neo-project/neo-devpack-dotnet/blob/e9b00b7284819699a522c2d94ec22ef1d5e5be8a/src/Neo.Compiler.CSharp/CompilationContext.cs#L330-L362\n", "doc_id": "9a057338-2b2d-444e-8f50-22d5060db43b", "embedding": null, "doc_hash": "1a296378843dac7a65e4f3098e0620647728c29105daea5bd14f50d90790686d", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-19.mediawiki"}, "node_info": {"start": 11167, "end": 11371, "_node_type": "1"}, "relationships": {"1": "a4a4b904d8b191a23528d4997e7314f27a6250e5", "2": "6a721008-1dfa-43ef-b56f-1b4dc3f2c67d"}}, "__type__": "1"}, "b926fa77-0a2c-43b5-afaa-80627ca259f4": {"__data__": {"text": "<pre>\n  NEP: 2\n  Title: Passphrase-protected private key\n  Author: Erik Zhang <erik@neo.org>\n  Type: Standard\n  Status: Final\n  Created: 2017-8-7\n</pre>\n\n==Abstract==\n\nA method is proposed for encrypting and encoding a passphrase-protected private key record in the form of a 58-character Base58Check-encoded printable string. Encrypted private key records are intended for use on paper wallets. Each record string contains all the information needed to reconstitute the private key except for a passphrase, and the methodology uses salting and scrypt to resist brute-force attacks.\n\n==Motivation==\n\nPassword and passphrase-protected private keys enable new practical use cases for sending assets from person to person. Someone wanting to send assets through postal mail could send a password-protected paper wallet and give the recipient the passphrase over the phone or e-mail, making the transfer safe from interception of either channel. A user of paper wallets could carry funded encrypted private keys while leaving a copy at home as an element of protection against accidental loss or theft. A user of paper wallets who leaves assets in a bank vault or safety deposit box could keep the password at home or share it with trusted associates as protection against someone at the bank gaining access to the paper wallets and spending from them. The foreseeable and unforeseeable use cases for password-protected private keys are numerous.\n\nOn the other hand, a standardized passphrase-protected private key format makes it possible to share private keys from different wallet clients.\n\n==Rationale==\n\n'''''User story:''' As a NEO user who uses paper wallets, I would like the ability to add encryption, so that my NEO paper storage can be two factor: something I have plus something I know.''\n\n'''''User story:''' As a NEO user who would like to pay a person or a company with a private key, I do not want to worry that any part of the communication path may result in the interception of the key and theft of my funds. I would prefer to offer an encrypted private key, and then follow it up with the password using a different communication channel (e.g. a phone call or SMS).\n\n==Specification==\n\nThis proposal makes use of the following functions and definitions:\n\n*'''AES256Encrypt, AES256Decrypt''', the simple form of the well-known AES block cipher without consideration for initialization vectors or block chaining. Each of these functions takes a 256-bit key and 16 bytes of input, and deterministically yields 16 bytes of output.\n\n*'''SHA256''', a well-known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 32-byte hash.\n\n*'''scrypt''', a well-known key derivation algorithm. It takes the following parameters: (string) password, (string) salt, (int) n, (int) r, (int) p, (int) length, and deterministically yields an array of bytes whose length is equal to the length parameter.\n\n*'''Base58Check''', a method for encoding arrays of bytes using 58 alphanumeric characters commonly used in the NEO ecosystem.\n\n===Prefix===\n\nIt is proposed that the resulting Base58Check-encoded string start with a '6'. The number '6' is intended to represent, from the perspective of the user, \"a private key that needs something else to be usable\" - an umbrella definition that could be understood in the future to include keys participating in multisig transactions, and was chosen with deference to the existing prefix '5' most commonly observed in Wallet Import Format which denotes an unencrypted private key.\n\nIt is proposed that the second character ought to give a hint as to what is needed as a second factor, and for an encrypted key requiring a passphrase, the uppercase letter P is proposed.\n\nTo keep the size of the encrypted key down, no initialization vectors (IVs) are used in the AES encryption. Rather, suitable values for", "doc_id": "b926fa77-0a2c-43b5-afaa-80627ca259f4", "embedding": null, "doc_hash": "b37d104a4c451dd12923e31c594f4e28eadd5953eabf2520c884a02f52e4c401", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki"}, "node_info": {"start": 0, "end": 3886, "_node_type": "1"}, "relationships": {"1": "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283", "3": "673f5dd1-cc6a-4237-8171-0d578741161c"}}, "__type__": "1"}, "673f5dd1-cc6a-4237-8171-0d578741161c": {"__data__": {"text": "(IVs) are used in the AES encryption. Rather, suitable values for IV-like use are derived using scrypt from the passphrase and from using a 32-bit hash of the resulting NEO address as salt.\n\n===Proposed specification===\n\n*Object identifier prefix: 0x0142. These are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.\n\n*How the user sees it: 58 characters always starting with '6P'\n\n*Count of payload bytes (beyond prefix): 37\n\n**1 byte (flagbyte): always be 0xE0\n\n**4 bytes: SHA256(SHA256(expected_neo_address))[0...3], used both for typo checking and as salt\n\n**16 bytes: An AES-encrypted key material record (encryptedhalf1)\n\n**16 bytes: An AES-encrypted key material record (encryptedhalf2)\n\n*Range in base58check encoding (prefix 6PY):\n\n**Minimum value: 6PYJxKpVnkXUsnZAfD2B5ZsZafJYNp4ezQQeCjs39494qUUXLnXijLx6LG (based on 01 42 E0 plus thirty-six 00's)\n\n**Maximum value: 6PYXg5tGnLYdXDRZiAqXbeYxwDoTBNthbi3d61mqBxPpwZQezJTvQHsCnk (based on 01 42 E0 plus thirty-six FF's)\n\n===Encryption steps===\n\n#Compute the NEO address (ASCII), and take the first four bytes of SHA256(SHA256()) of it. Let's call this \"addresshash\".\n\n#Derive a key from the passphrase using scrypt\n\n#*Parameters: passphrase is the passphrase itself encoded in UTF-8 and normalized using Unicode Normalization Form C (NFC). Salt is the addresshash from the earlier step, n=16384, r=8, p=8, length=64\n\n#*Let's split the resulting 64 bytes in half, and call them derivedhalf1 and derivedhalf2.\n\n#Do AES256Encrypt(block = privkey[0...15] xor derivedhalf1[0...15], key = derivedhalf2), call the 16-byte result encryptedhalf1\n\n#Do AES256Encrypt(block = privkey[16...31] xor derivedhalf1[16...31], key = derivedhalf2), call the 16-byte result encryptedhalf2\n\nThe encrypted private key is the Base58Check-encoded concatenation of the following, which totals 39 bytes without Base58 checksum:\n\n*0x01 0x42 + flagbyte + addresshash + encryptedhalf1 + encryptedhalf2\n\n===Decryption steps===\n\n#Collect encrypted private key and passphrase from user.\n\n#Derive derivedhalf1 and derivedhalf2 by passing the passphrase and addresshash into scrypt function.\n\n#Decrypt encryptedhalf1 and encryptedhalf2 using AES256Decrypt, merge the two parts and XOR the result with derivedhalf1 to form the plaintext private key.\n\n#Convert that plaintext private key into a NEO address.\n\n#Hash the NEO address, and verify that addresshash from the encrypted private key record matches the hash. If not, report that the passphrase entry was incorrect.\n\n==Backwards Compatibility==\n\nBackwards compatibility is minimally applicable since this is a new standard that at most extends Wallet Import Format. It is assumed that an entry point for private key data may also accept existing formats of private keys (such as hexadecimal and Wallet Import Format); this draft uses a key format that cannot be mistaken for any existing one and preserves auto-detection capabilities.\n\n==Test vectors==\n\nTest 1:\n\n*Passphrase: TestingOneTwoThree\n*Encrypted:", "doc_id": "673f5dd1-cc6a-4237-8171-0d578741161c", "embedding": null, "doc_hash": "619e40d011be9fa7d2bebb0e760db484be2b73fc4c990da04a2287adf117bd6e", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki"}, "node_info": {"start": 3832, "end": 6918, "_node_type": "1"}, "relationships": {"1": "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283", "2": "b926fa77-0a2c-43b5-afaa-80627ca259f4", "3": "c0f32e47-7c01-4f2a-a88c-2d358c5006b7"}}, "__type__": "1"}, "c0f32e47-7c01-4f2a-a88c-2d358c5006b7": {"__data__": {"text": "1:\n\n*Passphrase: TestingOneTwoThree\n*Encrypted: 6PYVPVe1fQznphjbUxXP9KZJqPMVnVwCx5s5pr5axRJ8uHkMtZg97eT5kL\n*Unencrypted (WIF): L44B5gGEpqEDRS9vVPz7QT35jcBG2r3CZwSwQ4fCewXAhAhqGVpP\n*Unencrypted (hex): CBF4B9F70470856BB4F40F80B87EDB90865997FFEE6DF315AB166D713AF433A5\n\nTest 2:\n\n*Passphrase: Satoshi\n*Encrypted: 6PYN6mjwYfjPUuYT3Exajvx25UddFVLpCw4bMsmtLdnKwZ9t1Mi3CfKe8S\n*Unencrypted (WIF): KwYgW8gcxj1JWJXhPSu4Fqwzfhp5Yfi42mdYmMa4XqK7NJxXUSK7\n*Unencrypted (hex): 09C2686880095B1A4C249EE3AC4EEA8A014F11E6F986D0B5025AC1F39AFBD9AE\n\n==Implementation==\n\n*neo-project/neo: https://github.com/neo-project/neo/blob/master/neo/Wallets/KeyPair.cs#L75\n\n*CityOfZion/neon-js: https://github.com/CityOfZion/neon-js/blob/master/src/wallet/nep2.js\n", "doc_id": "c0f32e47-7c01-4f2a-a88c-2d358c5006b7", "embedding": null, "doc_hash": "3a9cb178f3d6e7f8d9f0db2f87b7878c3732e7f4bdbf171bb1bfffeb41684dec", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki"}, "node_info": {"start": 6926, "end": 7655, "_node_type": "1"}, "relationships": {"1": "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283", "2": "673f5dd1-cc6a-4237-8171-0d578741161c"}}, "__type__": "1"}, "1aca1672-0346-4f28-8c51-f417cc45b60d": {"__data__": {"text": "<pre>\n  NEP: 6\n  Title: Wallet Standard\n  Author: Erik Zhang <erik@neo.org>\n  Type: Standard\n  Status: Final\n  Created: 2017-09-14\n  Requires: 2, 3\n</pre>\n\n==Abstract==\n\nThis NEP describes a wallet standard that allows the wallet files to be shared between the various implementations of NEO.\n\n==Motivation==\n\nCurrently, different client programs generate different wallet files. They have different file formats, different ways of storing, and different ways of encrypting. It is difficult for users to migrate between different client programs because the wallet files are not in the same format. Although migration can be achieved by exporting the private key, it is cumbersome for wallets with multiple private keys. We need an universal wallet format that allows users to migrate across all platforms safely and easily without having to change the wallet file or export the private keys.\n\n==Rationale==\n\nThe wallet standard should consider both security and cross-platform compatibility. For security, we require the implementations to use the NEP-2 mechanism to encrypt or decrypt the private keys. For cross-platform, we use the JSON format to describe the wallet files, so that the contents of the wallet files can be easily recognized on each platform.\n\n==Specification==\n\n===Wallet===\n\nA wallet file in JSON format has the following basic structure:\n\n<pre>\n{\n  \"name\": \"MyWallet\",\n  \"version\": \"1.0\",\n  \"scrypt\": {},\n  \"accounts\": [],\n  \"extra\": null\n}\n</pre>\n\n<code>name</code> is a label that the user has given to the wallet.\n\n<code>version</code> is currently fixed at <code>1.0</code> and will be used for functional upgrades in the future.\n\n<code>scrypt</code> is a ScryptParameters object which describes the parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.\n\n<code>accounts</code> is an array of Account objects which describe the details of each account in the wallet.\n\n<code>extra</code> is an object that is defined by the implementor of the client for storing extra data. This field can be <code>null</code>.\n\n===ScryptParameters===\n\nScryptParameters object has the following structure:\n\n<pre>\n{\n  \"n\": 16384,\n  \"r\": 8,\n  \"p\": 8\n}\n</pre>\n\n<code>n</code> is a parameter that defines the CPU/memory cost. Must be a value 2^N.\n\n<code>r</code> is a tuning parameter.\n\n<code>p</code> is a tuning parameter (parallelization parameter). A large value of p can increase computational cost of SCrypt without increasing the memory usage.\n\n===Account===\n\nAccount object has the following structure:\n\n<pre>\n{\n  \"address\": \"AQLASLtT6pWbThcSCYU1biVqhMnzhTgLFq\",\n  \"label\": \"MyAddress\",\n  \"isDefault\": true,\n  \"lock\": false,\n  \"key\": \"6PYWB8m1bCnu5bQkRUKAwbZp2BHNvQ3BQRLbpLdTuizpyLkQPSZbtZfoxx\",\n  \"contract\": {},\n  \"extra\": null\n}\n</pre>\n\n<code>address</code> is the base58 encoded address of the account.\n\n<code>label</code> is a label that the user has given to the account.\n\n<code>isDefault</code> indicates whether the account is the default change account.\n\n<code>lock</code> indicates whether the account is locked by the user. The client shouldn't spend the funds in a locked account.\n\n<code>key</code> is the private key of the account in NEP-2 format. This field can be <code>null</code> (for watch-only", "doc_id": "1aca1672-0346-4f28-8c51-f417cc45b60d", "embedding": null, "doc_hash": "116ee5dbe1af66b81dfc7765b3a85f7ffe0b2a29d58b233ce95eee2d553687c5", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki"}, "node_info": {"start": 0, "end": 3272, "_node_type": "1"}, "relationships": {"1": "f5626351415decdb3cce95c2ba0dcf97f19b4f32", "3": "56383fa6-93f1-4fd2-b93f-0161184846a6"}}, "__type__": "1"}, "56383fa6-93f1-4fd2-b93f-0161184846a6": {"__data__": {"text": "format. This field can be <code>null</code> (for watch-only address or non-standard address).\n\n<code>contract</code> is a Contract object which describes the details of the contract. This field can be <code>null</code> (for watch-only address).\n\n<code>extra</code> is an object that is defined by the implementor of the client for storing extra data. This field can be <code>null</code>.\n\n===Contract===\n\nContract object has the following structure:\n\n<pre>\n{\n  \"script\": \"21036dc4bf8f0405dcf5d12a38487b359cb4bd693357a387d74fc438ffc7757948b0ac\",\n  \"parameters\": [],\n  \"deployed\": false\n}\n</pre>\n\n<code>script</code> is the script code of the contract. This field can be <code>null</code> if the contract has been deployed to the blockchain.\n\n<code>parameters</code> is an array of Parameter objects which describe the details of each parameter of the contract function. For more information about the Parameter object, see the descriptions in [[nep-3.mediawiki|NEP-3: NeoContract ABI]].\n\n<code>deployed</code> indicates whether the contract has been deployed to the blockchain.\n\n==Backwards Compatibility==\n\nAll old-format wallets should be able to be converted to this new JSON format easily. If these wallet files contain some extra data, they can be stored in the <code>extra</code> fileds.\n\n==Implementation==\n\n*neo-project/neo: https://github.com/neo-project/neo/blob/master/src/neo/Wallets/NEP6/NEP6Wallet.cs \n*CityOfZion/neon-js: https://github.com/CityOfZion/neon-js/blob/master/packages/neon-core/src/wallet/Wallet.ts \n", "doc_id": "56383fa6-93f1-4fd2-b93f-0161184846a6", "embedding": null, "doc_hash": "1d8ed053836837fe1ff69fc0981fa24e457bc17c6d1888c5ac536d0ff63b0db6", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki"}, "node_info": {"start": 3213, "end": 4740, "_node_type": "1"}, "relationships": {"1": "f5626351415decdb3cce95c2ba0dcf97f19b4f32", "2": "1aca1672-0346-4f28-8c51-f417cc45b60d"}}, "__type__": "1"}, "771684a5-f29b-485f-8f07-7c223e70d4d0": {"__data__": {"text": "<pre>\n  NEP: 9\n  Title: URI Scheme for Native Assets and Supported Smart Contracts\n  Author: Andrei <terentiev.andrei@gmail.com>, Apisit <apisit.toompakdee@gmail.com>\n  Type: Standard\n  Status: Final\n  Created: 2018-01-15\n</pre>\n\n==Abstract==\n\nThis NEP describes a URI standard for transfer of NEO native assets. Furthermore it proposes a subset of URI's for well established smart contract operations, which at the time of this proposal encompasses NEP-5 token transfers. In the future, as more well understood and well tested contracts are added to the network, URI's may be added. We define a framework for determining if a URI scheme is appropriate for a given smart contract operation below.  \n\n==Motivation==\n\nCurrently, there is no standard URI for NEO clients to consume. Bitcoin implements a URI standard so that clicking links or scanning QR codes can easily implement a bitcoin payment. Similarly the transfer of native assets on the NEO chain should be jat as simple. \n\nHowever NEO can possibly implement much more contract operations via smart contract execution. These can range from minting and transferring tokens, registering domain names, exchanges, and other customized applications. Ideally a URI could exist for generic smart contract execution. However, this has security implications, as it may be difficult to determine what a smart contract URI actually does, which could lead to loss of funds.\n\nTo counter this we propose that the URI's generated for smart contract invocation to be limited to a subset of well established contract operations like NEP-5 token transfer. This will allow a client to easily understand and verify what a given URI will be to do. If the client is even more security conscious it could maintain a white list of contracts that follow the given URI spec.\n\nAny new NEO URI that is added to this specification should be used for a smart contract that is secure, well documented, and commonly used. We will discuss more about this at the end of this proposal.\n\n==Specification==\n\n===Native asset transfer URI===\n\nA native asset transfer would have the following URI. It describes the receiver address, asset, and additional attributes that will be sent with the transaction. \n\n'''URI scheme: <code>neo</code>'''\n\n<code>neo:<address>[?asset=<asset>][?amount=<amount>][?<TransactionAttributeKey>=<value>]</code>\n\n==== URI keys====\n{| class=\"wikitable\"\n! Key\n! Description\n! Required\n|-\n| address\n| Valid NEO Address\n| \u2713\n|-\n| asset\n| neo, gas or asset ID.\n| -\n|-\n| amount\n| amount of asset being sent. e.g 1.0\n| -\n|}\n\n==== Available URI keys map to NEO transaction attribute keys ====\n{| class=\"wikitable\"\n! URI Key\n! NEO Transaction attribute\n! Description\n|-\n| contractHash\n| 0x00\n| Hash value of contract \n|-\n| ecdh02, ecdh03\n|\t0x02,0x03\n|\tPublic key for ECDH key exchange\n|-\n| script \n|\t0x20\n|\tAdditional validation of transactions\n|-\n| vote\n|\t0x30\n| For voting\n|-\n| certUrl\n| 0x80 \n|\tUrl address of certificate \n|-\n| descriptionUrl\n| 0x81\n|\tUrl address of description \n|-\n| description\n| 0x90\n| Brief description \n|-\n| hash1,hash2,...,hash15\n|\t0xa1,0xa2,...,0xaf\n|\tUsed to store custom hash values\n|-\n| remark,remark2,...,remark15\n|\t0xf0,0xf1,...,0xff\n|\tRemarks\n|}\n\n====Reference native assets====  \n{| class=\"wikitable\"\n! Name\n! Hash\n|-\n| NEO \n|", "doc_id": "771684a5-f29b-485f-8f07-7c223e70d4d0", "embedding": null, "doc_hash": "9e38449dc67e4f80e9057e37ffce118a4ef7f9a3d42d5bff3f24a535e17f7e3c", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-9.mediawiki"}, "node_info": {"start": 0, "end": 3297, "_node_type": "1"}, "relationships": {"1": "3674070896941616c6fd91904b4e53ccfce9c125", "3": "505a3b73-7a0a-4ca8-a585-b03a92f874f7"}}, "__type__": "1"}, "505a3b73-7a0a-4ca8-a585-b03a92f874f7": {"__data__": {"text": "class=\"wikitable\"\n! Name\n! Hash\n|-\n| NEO \n| c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b \n|-\n| GAS \n| 602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7 \n|}\n\n====Examples====\n\nBegin transaction to specified address\n\n<code>neo:AeNkbJdiMx49kBStQdDih7BzfDwyTNVRfb</code>\n\n\nBegin transaction of unspecified amount of NEO\n\n<code>neo:AeNkbJdiMx49kBStQdDih7BzfDwyTNVRfb?asset=neo</code>\n\nBegin transaction to specified address of 1 NEO\n\n<code>neo:AeNkbJdiMx49kBStQdDih7BzfDwyTNVRfb?asset=neo&amount=1.0</code>\n\nBegin transaction to specified address of 1 NEO with transaction attribute description = \"Hello\"\n\n<code>neo:AeNkbJdiMx49kBStQdDih7BzfDwyTNVRfb?asset=neo&amount=1.0&description=Hello</code>\n\nBegin transaction to specified address of 0.1 GAS. Put public key in ecdh02 attribute field to allow sender to encrypt using ECDH. Transaction attribute description = \"Hello\"\n\n<code>neo:AQc5mtFayAdoCK13BW1cGAzAHyo9SoUWe7?asset= gas&amount=0.1&ecdh02=02ed53ad58c838435d4dd7a4b25c1eba01384c814ca53a539405434807afbb04b4&description=Hello</code>\n\nThis should be sufficient to facilitate transfer of native NEO assets safely.\n\n\n===Smart contract invocation URI===\nTo invoke the smart contract, we need to specify a script hash and the operation of the smart contract that is being invoked as well as providing required parameters. This way an application can tailor the screen to match the invoking operation with pre-filled information. e.g. transfer NEP-5 token, voting, etc. what left for a user to do is to authorize/sign the transaction. \n\nAs mentioned before, generic smart contract execution is not necessarily suitable for URI's. This is because both of the security issues, and usability. A client of the URI should have 100% confidence that the URI that they will consume will have it's intended effect. Limiting it to a subset of contract operations does most of the heavy lifting. If the client wishes to be even more secure, it can whitelist its own set of contracts for each subset of supported smart contract URI's.\n\nAny addition to supported smart contract URI's should follow the exact same procedure as other NEO enhancement proposals. In order to be added as a supported smart contract URI, the operation/proposal should have the following... \n\n# Not application specific.  \n# Well tested.    \n# Well documented and easy to consume by a client.  \n# A set of examples where the URI is useful.  \n\nIf it meets these criteria than can be considered to enter the list of supported URI schema.\n\n====NEP-5 token transfer====\n\nA NEP-5 token transfer is a smart contract invocation and would have the following URI. \n\n<code>neo:<address>?asset=<NEP5ScriptHash>[?amount=<amount>][?<TransactionAttributeKey>=<value>]</code>\n\n\n===== URI Keys=====\n{| class=\"wikitable\"\n! Key\n! Description\n! Required\n|-\n| address\n| Valid NEO Address to transfer to.  \n| \u2713\n|-\n| asset\n| Valid NEP-5 smart contract's script hash in big endian.\n| \u2713\n|-\n| amount\n| amount of token being", "doc_id": "505a3b73-7a0a-4ca8-a585-b03a92f874f7", "embedding": null, "doc_hash": "3d82d916753dd9e308b41cbac2aff60f627dc242b3943f51e38b449f5da89160", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-9.mediawiki"}, "node_info": {"start": 3259, "end": 6251, "_node_type": "1"}, "relationships": {"1": "3674070896941616c6fd91904b4e53ccfce9c125", "2": "771684a5-f29b-485f-8f07-7c223e70d4d0", "3": "4d182342-0d81-4274-bc54-f989dc0d617d"}}, "__type__": "1"}, "4d182342-0d81-4274-bc54-f989dc0d617d": {"__data__": {"text": "big endian.\n| \u2713\n|-\n| amount\n| amount of token being sent. e.g 1.0\n| -\n|-\n|}\n\n=====Examples=====\nBegin transaction to transfer 10 ONT to specific adderess.\n\n<code>neo:AK2nJJpJr6o664CWJKi1QRXjqeic2zRp8y?asset=ceab719b8baa2310f232ee0d277c061704541cfb&amount=10</code>\n\nBegin transaction to transfer unspecified amount of ONT to specific adderess.\n\n<code>neo:AK2nJJpJr6o664CWJKi1QRXjqeic2zRp8y?asset=ceab719b8baa2310f232ee0d277c061704541cfb</code>\n\n\n==Rationale==\n\nThe URI needs to consider both ease of use for users and wallet developers as well as security implications, especially in the case of executing arbitrary smart contracts. We can make much easier security guarantees with URI's related to transfer native assets as opposed to smart contract invocation. \n\n==Implementation==\nReference Implementation\n\n* [https://github.com/O3Labs/NEP9-go]\n* [https://github.com/O3Labs/nep9.js]\n\n==Reference==\nThe below discussion has many relevant talking points relevant to the security implications of smart contract URI's.\n\n* [https://github.com/ethereum/EIPs/issues/67]\n\n", "doc_id": "4d182342-0d81-4274-bc54-f989dc0d617d", "embedding": null, "doc_hash": "a7501d12e294625d014333fc28f9092f5e402d03cb6edb927a9166aba117d401", "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-9.mediawiki"}, "node_info": {"start": 6239, "end": 7306, "_node_type": "1"}, "relationships": {"1": "3674070896941616c6fd91904b4e53ccfce9c125", "2": "505a3b73-7a0a-4ca8-a585-b03a92f874f7"}}, "__type__": "1"}, "830735fe-dd73-4944-aa17-5e0cf8057db2": {"__data__": {"text": "## Why are consensus committee only functions not wrapped?\nThe group of users that can make use of this is _very_ limited. By ommitting these functions the API list stays short and\nrelevant to the biggest group of users. Those who do wish to use these functions can always use the generic \n`call_function()` method on the contract of choice to call them.\n\n## Why is the native ContractManagement contract not wrapped?\nThe contract `deploy`, `update` and `destroy` functionality is already part of the `GenericContract` base class used in \nall contract wrappers.\n\n## Why is the native Ledger contract not wrapped?\nAll information that can be obtained from the `Ledger` contract can also be obtained using the `NeoRpcClient`. In some \ncases the `Ledger` contract returns even incomplete data. For example `Ledger.GetBlock` returns a `TrimmedBlock` without\ntransactions as opposed to `NeoRpcClient.get_block()` which returns the complete block. The `Ledger` contract is really\nintended to be consumed by smart contracts.\n\n## Why does the IJson interface consume and produce dictionaries?\nThis was originally used in the full node version of Mamba. However, it seems like the standard in the Python community\n if judged by looking at popular packages/frameworks like `requests` and `aiohttp`. Also, frameworks like `FastAPI`, \n `Django` and `Flask` all have ways of consuming a `dict` when returning a json response. It seems like the best choice \n for these reasons. \n\n## How do I &lt;insert topic&gt;?\nHave a look at the examples on GitHub if the documentation doesn't cover your question. If the examples also don't answer\nyour question then feel free to ask on GitHub or ask in #python on the [NEO Discord server](https://discord.gg/rvZFQ5382k).\n", "doc_id": "830735fe-dd73-4944-aa17-5e0cf8057db2", "embedding": null, "doc_hash": "e5070d8819d29b3cea9adede00f427ed83b39370cc6642f3af5c2788d1a61080", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/faq.html"}, "node_info": {"start": 0, "end": 1746, "_node_type": "1"}, "relationships": {"1": "10e9e232763fcb5426824ae4860c9167bea61eb5"}}, "__type__": "1"}, "6086d92e-9780-4e43-b2af-ba55a3551b44": {"__data__": {"text": "# Getting started\n\nMamba is a Python SDK for interacting with the NEO blockchain. It abstracts away the complexities\nof creating the data structures required to interact with smart contracts and change blockchain state. At the same time\nit is flexible enough that you can handcraft transactions or even the instructions to be executed by the virtual machine. \nCommunication with the network is done through JSON-RPC servers. A list of public RPC servers can be found \n[here](https://dora.coz.io/monitor).\n\nLet's get setup and get a little taste of what using it looks like before diving into how it is structured and how to\nwork with it to achieve your goals.\n\n## Requirements\n* Python 3.10\n* Linux, OSX or Windows\n\n## Installation\n\n=== \"UNIX\"\n    ```linenums=\"0\"\n    pip install neo-mamba\n    ```\n=== \"Windows\"\n    ```linenums=\"0\"\n    python -m pip install neo-mamba\n    ```\n\n### From source\n\n=== \"UNIX\"\n    ```linenums=\"0\"\n    git clone https://github.com/CityOfZion/neo-mamba.git\n    cd neo-mamba\n    python -m venv venv\n    source venv/bin/activate\n    pip install -e .\n    ```\n=== \"Windows\"\n    ```linenums=\"0\"\n    git clone https://github.com/CityOfZion/neo-mamba.git\n    cd neo-mamba\n    python -m venv venv\n    venv\\Scripts\\activate\n    python -m pip install -e .\n    ```\n\n## Quick example\nGet the NEO balance for an account\n\n```py3\nimport asyncio\nfrom neo3.api.wrappers import ChainFacade, NeoToken\n\n\nasync def main():\n    facade = ChainFacade.node_provider_mainnet()\n    neo = NeoToken()\n    print(\n        await facade.test_invoke(neo.balance_of(\"Nbsphyrdyz8ufeWKkNR1MUH2fuLABmqtqU\"))\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n", "doc_id": "6086d92e-9780-4e43-b2af-ba55a3551b44", "embedding": null, "doc_hash": "55aadfca5e16e96cec1b6a7950a306219fbb0fe3f1595cf396d1939815912359", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/getting-started.html"}, "node_info": {"start": 0, "end": 1659, "_node_type": "1"}, "relationships": {"1": "25c156963f302a95be89c45032739d900f982c86"}}, "__type__": "1"}, "0ee094b6-a7a4-49eb-ab3f-0c26c6fef8e0": {"__data__": {"text": "---\ntemplate: home.html\ntitle: MAMBA\n---\n", "doc_id": "0ee094b6-a7a4-49eb-ab3f-0c26c6fef8e0", "embedding": null, "doc_hash": "810baad17db4d4708b45648828f5d562d969ab48869ab40d6d69ccb14ff56a08", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/index.html"}, "node_info": {"start": 0, "end": 41, "_node_type": "1"}, "relationships": {"1": "851734bf26775211863b85ce8750d79b886a6761"}}, "__type__": "1"}, "f1b7fd4e-7d43-48de-b3c4-49c9290b6caa": {"__data__": {"text": "# Smart contracts\n\nThis document explains how to work with smart contracts. First we'll establish the mental model of working with \nblockchains. If you are already familiar with the NEO blockchain or talking to smart contracts on blockchains in general \nyou can go directly to the [interaction section](#interacting-with-smart-contracts). Next we'll look have a what comes \nin to play in a basic smart contract interaction. Followed by that we build an understanding of how the wrappers work \nbefore diving into the breakdown of a NEP-17 token transfer where all learned comes together.\n\nAfter reading this chapter you'll have an understanding of the major components involved in interacting with smart \ncontracts. You be able to do all common interactions with a smart contract of choice and have the foundational knowledge \nthat allows you to follow the [examples](https://github.com/CityOfZion/neo-mamba/tree/master/examples) on the Github repo.\n\n## What are smart contracts?\n\nSmart contracts are nothing more than programs of which the compiled code is stored on the blockchain. They \nexpose a public API which you can call to execute its functions, whether that be transfering\ntokens, executing some algorithm or just reading stored data is up to the contract author. It is important to realise\nthat the smart contract code does not live on your machine and is executed on a remote network (the blockchain). \n\nAdd to this that smart contracts are \"compiled\" to a custom language and executed by a custom processor \n(the NEO Virtual Machine). That means that your Python code cannot talk Python to the smart contract, but that a \ntranslation has to happen. This library performs that translation under the hood and helps communicate between your \nmachine and the smart contract.\n\n## Interacting with smart contracts\nThere are 2 layers in this library used to talk to smart contracts. First, wrappers for various \n[smart contract types](#types-of-smart-contracts) to make calling functions on them feel almost the same as calling\nregular Python code. Second, a `ChainFacade` class which acts as the network gateway. It will build and sign a \ntransaction if state needs to be persisted or use other means for read-only (free) executions.\n\nLets breakdown the following example which queries the blockchain for the symbol of the Neo token contract and \nwill return `NEO` as result.\n<a name=\"symbol-reading-example\"></a>\n```py3\nfacade = ChainFacade.node_provider_mainnet()\nneo = NeoToken()\nawait facade.test_invoke(neo.symbol())\n```\nLine `1` creates a facade for communicating with the MainNet. While it can be configured to perform automatic \ntransaction signing when persisting state, for now it is only important to know that this configured the facade to talk \nto a MainNet RPC node internally.\n\nLine `2` instantiates our first wrapper. The `NeoToken` class wraps around the native [NeoToken](https://github.com/neo-project/neo/blob/77ee2cc5b6ea371efdf3be506b173c6304b0fc01/src/Neo/SmartContract/Native/NeoToken.cs#L31) \nsmart contract (built-in to the chain) and gives a convenient way of calling the public functions of the smart contract.\n\nLine `3` is where the interesting parts happen. The call to `neo.symbol()` does not actually return \"NEO\", instead it \nbuilds a sequence of NEO Virtual Machine instructions that the network understands. These instructions need to be sent\nto the network, which is where the `facade` comes in to play. The `facade` has two ways of sending the instructions\n\n1. `test_invoke()` - Use for read-only calls. Does not cost GAS.\n2. `invoke()` - Use for state changing calls. Costs GAS.\n\n!!! tip\n\n    There are multiple variations of the `*invoke*()` call such as `invoke_fast` and", "doc_id": "f1b7fd4e-7d43-48de-b3c4-49c9290b6caa", "embedding": null, "doc_hash": "5343961f92990c14c2a79005307da3ac857330330f428b43518a680e1194b08c", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/smart-contracts.html"}, "node_info": {"start": 0, "end": 3717, "_node_type": "1"}, "relationships": {"1": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add", "3": "05fea5c4-03fd-4adf-ad47-2018ea8abf2d"}}, "__type__": "1"}, "05fea5c4-03fd-4adf-ad47-2018ea8abf2d": {"__data__": {"text": "multiple variations of the `*invoke*()` call such as `invoke_fast` and `invoke_multi`. See the API docs \n    for more information.\n\n\nIn the example above `test_invoke()` is used because the `symbol()` function does not modify state. It just reads data \nstored and so there is no reason to pay for it and grow the chain unnecessary. In later sections and chapters state \nmodifying transactions will be discussed. We'll also learn how to sign and pay the transactions with an account of our \nchoice. For now let's first get a greater understanding of the various wrappers that exist.\n\n\n## Contract wrappers\nThe smart contract wrappers are a key component in simplifying smart contract interaction. Like the facade they live in \nthe `neo3.api.wrappers` module. The NEO blockchain has a few native contracts build into the chain such as the NEO and \nGAS tokens, but also contracts providing information regarding the chain configuration like the \n[PolicyContract](https://github.com/neo-project/neo/blob/77ee2cc5b6ea371efdf3be506b173c6304b0fc01/src/Neo/SmartContract/Native/PolicyContract.cs#L22).\nFor these kind of contracts specialised wrappers exist like `NeoToken`, `GasToken`, `PolicyContract` and `RoleContract`.\n\n### Types of smart contracts\nTechnically speaking there are no types of smart contracts. However, they can implement standards that give \nthem compartalisable behaviour. For example implementing [NEP-11](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki) \ngives NFT like behaviour, [NEP-17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) gives \nfungible token behaviour. NEO and GAS are examples of NEP-17 tokens, but there are many more NEP-17 tokens in the system.\nTo easily use these contracts there are more generic wrappers available such as `NEP17Contract`, `NEP11DivisibleContract` and \n`NEP11NonDivisibleContract`.\n\nAll they require is the contract hash and you're ready to call them like NEO or GAS. For example wrapping the \n[TOTHEMOON](https://dora.coz.io/contract/neo3/mainnet/0x56199aa066633745de4d603e6477881455c08243) token is done as follows \n\n```py3 linenums=\"0\"\nfrom neo3.core import types\nfrom neo3.api.wrappers import NEP17Contract\n\ncontract_hash = types.UInt160.from_string(\"0x56199aa066633745de4d603e6477881455c08243\")\nttm = NEP17Contract(contract_hash)\n```\nYou can now `transfer()` TTM tokens, query the `balance_of()` an account or call any of the other NEP-17 methods. If the\ncontract exposes additional functions beyond those from the standard then there is the generic \n`call_function(<name>,<args>)` that can always be used.\n\nLastly, if none of the existing wrappers suit the contract use `GenericContract` or better create your own wrapper on \ntop of `GenericContract`. \n\n### Hierarchy\n\nIn the previous section we described the various wrapper classes that can be used from most specialised to most generic. \nThe diagram below shows the structure\n\n![image](wrapper-hierarchy.png)\n\n* Yellow are the most specialised wrappers.\n* White are building blocks and not intended to be used on their own. They are shown to make the picture complete.\n\n## Modifying chain state\nThis section shows what it takes to modify chain state, specifically we'll show how to transfer a NEP-17 token (NEO) and \nbreak down the steps and options.\n\nWe've [previously](#symbol-reading-example) seen how to query the `symbol` of a contract by using the", "doc_id": "05fea5c4-03fd-4adf-ad47-2018ea8abf2d", "embedding": null, "doc_hash": "a77d515c68e76d026723f62e4ac5bc2d93faa9b2b94f1f64dab17acf08e67be7", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/smart-contracts.html"}, "node_info": {"start": 3657, "end": 7070, "_node_type": "1"}, "relationships": {"1": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add", "2": "f1b7fd4e-7d43-48de-b3c4-49c9290b6caa", "3": "d46d3426-c30b-4399-83b3-b125dc039b08"}}, "__type__": "1"}, "d46d3426-c30b-4399-83b3-b125dc039b08": {"__data__": {"text": "seen how to query the `symbol` of a contract by using the `test_invoke()` \nmethod on the facade. Such queries do not modify state and thus does not require validation by the consensus nodes. \nTransfering a token, which changes the balance of 2 accounts, on the other hand does require verification to prevent \nunauthorized transfers. This verification and `transfer` script execution costs compute and thus has a GAS price \nassociated to it.\n\nState modifications always need to be communicated to the network using a [Transaction](https://github.com/CityOfZion/neo-mamba/blob/master/neo3/network/payloads/transaction.py#L199).\nThis container will hold the `script` that executes the `transfer` action, signatures for \napproval of the modification and has GAS attached to pay for the verification and execution fees. \n\n### NEP-17 transfer example\nLet's see how this looks in code and then break it down line-by-line.\n```py3\nimport asyncio\nfrom neo3.api.wrappers import ChainFacade, NeoToken\nfrom neo3.api.helpers.signing import sign_insecure_with_account\nfrom neo3.network.payloads.verification import Signer\nfrom neo3.wallet.wallet import Wallet\n\n\nasync def main():\n    neo = NeoToken()\n    \n    wallet = Wallet.from_file(\"./mywallet.json\")\n    account = wallet.account_default\n    \n    facade = ChainFacade.node_provider_mainnet()\n    facade.add_signer(\n        sign_insecure_with_account(account, password=\"123\"),\n        Signer(account.script_hash)\n    )\n    \n    destination = \"NUVaphUShQPD82yoXcbvFkedjHX6rUF7QQ\"\n    print(await facade.invoke(neo.transfer(account.address, destination, 10)))\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n#### Wallet account setup\nSkipping the imports, startup boilerplate code and NeoToken wrapper creation (that we've seen before) we start here\n```py3 linenums=\"11\"\nwallet = Wallet.from_file(\"./path_to/mywallet.json\")\naccount = wallet.account_default\n```\nIn order to transfer tokens we need to have an account with funds to transfer them from. Secondly, all transactions are\npaid for with `GAS`. So while this example transfers `NEO`, the account must also hold a bit of `GAS` to pay for the \nfees. For the aforementioned reasons we assume you already have a [NEP-6](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki)\nwallet that we'll load from disk.\n\n!!! tip\n    If you want to learn upfront how much gas a transaction will cost then use the `estimate_gas()` helper on the facade.\n\n#### Facade setup\nNext up is setting up and configuring the facade to automatically sign our transaction(s).\n```py3 linenums=\"14\"\nfacade = ChainFacade.node_provider_mainnet()\nfacade.add_signer(\n    sign_insecure_with_account(account, password=\"123\"),\n    Signer(account.script_hash)\n)\n```\nThe first line we've seen before and creates a facade configured to communicate with a MainNet RPC node. It is possible \nto provide your own RPC node if you'd like by manually creating the `ChainFacade`. The facade can be configured to \nautomatically use a specific wallet account for signing transactions when `invoke()` is called on the facade. This is \ndone through the `add_signer()` function which takes two", "doc_id": "d46d3426-c30b-4399-83b3-b125dc039b08", "embedding": null, "doc_hash": "50e7a30e8b83f60147abdee1b6f5bda59d6860df6e4563537a03dd4f275a2286", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/smart-contracts.html"}, "node_info": {"start": 7086, "end": 10241, "_node_type": "1"}, "relationships": {"1": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add", "2": "05fea5c4-03fd-4adf-ad47-2018ea8abf2d", "3": "5b9d2018-677e-4db9-9757-33e5a9e681e3"}}, "__type__": "1"}, "5b9d2018-677e-4db9-9757-33e5a9e681e3": {"__data__": {"text": "This is \ndone through the `add_signer()` function which takes two arguments\n\n1. a callback function to perform the actual transaction signing\n2. a [Signer](https://github.com/CityOfZion/neo-mamba/blob/5bc73174f91f6c2466743fbeb53f55dfb35786da/neo3/network/payloads/verification.py#L68) \nobject indicating where the signature is valid\n\nThe callback function takes the provided account information, creates a signature and embeds it in the `Transaction`.  \nIt states that `account` agrees with the modification that the transaction `script` will perform. The consensus nodes\nwill verify the validity of the signature before performing the transfer. \n\nThe `Signer` will have a scope of `CALLED_BY_ENTRY` by default. This means that the signature is only valid inside the\nfirst contract called. In this case that will be the `NeoToken` contract. This scope can be checked by the \n`CheckWitness` function inside smart contracts to avoid abuse. There are many scenarios where one contract may need to\ncall one or more other contracts. For such cases the signer can be configured with other scope options and rules. This\nhowever is beyond the scope of this example and can be learned more about [in this excellent article](https://neospcc.medium.com/thou-shalt-check-their-witnesses-485d2bf8375d) \nby the NSPCC.\n\n!!! note\n    1. Calling `test_invoke()` instead of `invoke()` will automatically add the `Signer`, without calling the callback, \n    to limit the scope. This is useful if you want to realistically simulate your state changing calls.\n    2. You can add multiple signers. The first signer added is considerd the `sender` and will pay for the fees.\n\n#### Invoke & receipt\nNow that we're done with the preparation we can perform the actual transfer.\n```py3 linenums=\"21\"\nprint(await facade.invoke(neo.transfer(account.address, destination, 10)))\n```\nThe `neo.transfer()` call will generate VM instructions to perform the requested token transfer. The instructions are\npassed to `facade.invoke()` which builds the transaction, signs it and sends it to the network. It will wait and poll \nthe network for a receipt and print that. Among the `result` of calling the `transfer` function the receipt contains \nnotifications emitted by the smart contract(s) and more. \n\nAn example receipt for the transfer may look as follows\n\n```py3 linenums=\"0\"\nInvokeReceipt(\n    tx_hash=619759221b434356e76783534b7ca9dc8c8ec36f25c1943c2262f727736c862a, \n    included_in_block=18419, \n    confirmations=3, \n    gas_consumed=9977750, \n    state=HALT, \n    exception=None, \n    notifications=[\n        Notification(\n            contract=d2a4cff31913016155e38e474a2c06d08be276cf, \n            event_name=Transfer, \n            state=StackItem(type=ARRAY, value=[\n                StackItem(type=BYTE_STRING, value=b'3\\xfc\\xa3\\x0b\\xc0,\\x81%\\xc2\\xb7\\xb0\\x85\\xb7\\x96\\x13Pk\\xbf=O'), \n                StackItem(type=BYTE_STRING,", "doc_id": "5b9d2018-677e-4db9-9757-33e5a9e681e3", "embedding": null, "doc_hash": "e3c2cd01af92e19fc715febf7bb09846f7b66c68e3011673ee1b4dd0ef4d0e3c", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/smart-contracts.html"}, "node_info": {"start": 10232, "end": 13133, "_node_type": "1"}, "relationships": {"1": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add", "2": "d46d3426-c30b-4399-83b3-b125dc039b08", "3": "ffb0dbf5-33d3-4c60-becf-1a9196bee644"}}, "__type__": "1"}, "ffb0dbf5-33d3-4c60-becf-1a9196bee644": {"__data__": {"text": "         StackItem(type=BYTE_STRING, value=b'^\\x1c{1\\xf3\\xd1\\x9b\\xc3\\xb9\\xaeaY\\xee\\x80v\\xc7\\xcb1\\x11z'), \n                StackItem(type=INTEGER, value=10)\n                ]\n            )\n        )\n    ], \n    result=True\n)\n```\n\n!!! tip \n    If you would like to return immediatly and not wait for a receipt use `invoke_fast()` instead of `invoke()`. \n    This will return a transaction id.", "doc_id": "ffb0dbf5-33d3-4c60-becf-1a9196bee644", "embedding": null, "doc_hash": "3a9ca6cecd1f94ae6943ac22949512241f06eb9aead306bb1441b3f6985da5c6", "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/smart-contracts.html"}, "node_info": {"start": 13153, "end": 13543, "_node_type": "1"}, "relationships": {"1": "ec3dbeb909cbb6dc05065822894f0d0cb7e58add", "2": "5b9d2018-677e-4db9-9757-33e5a9e681e3"}}, "__type__": "1"}, "27f5c409-c840-48b6-a3e7-d92b837a65fa": {"__data__": {"text": "## Iterators\n\n**TL;DR** You can use `SmartContract.callFunctionReturningIterator(...)` to invoke a method that returns an iterator and\ntraverse through the iterator using the resulting `Iterator` object and its utility methods.\n\nA smart contract method can return an iterator that makes it easier to read through storage with many entries. When\ncalling such a method using an RPC (e.g., `invokefunction`), the node you're connected to opens a session and returns a\n`sessionId` and an `iteratorId`. You can then use these values with the RPC `traverseIterator` providing a number `n` of\nentries you want to iterate through with each call. When first using this RPC, you will get the first `n` entries of the\niterator. If there are more entries in the iterator, using the same RPC again will return the next `n` entries of the\niterator, etc.\n\n**Note 1:** You cannot traverse an iterator that is returned as the result of a write transaction.\n\n**Note 2:** Some nodes (especially public nodes) have sessions disabled due to DoS concerns. If this is the case, neow3j\nprovides a custom utility method to unwrap the iterator on the NeoVM level and return an array of entries with the\nmethod `SmartContract.callFunctionAndUnwrapIterator(...)`.", "doc_id": "27f5c409-c840-48b6-a3e7-d92b837a65fa", "embedding": null, "doc_hash": "7ef3b9b21dcb5d341dd6812e51ec9d990d4632fe3f50bd278871aba75c1fc25a", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/advanced"}, "node_info": {"start": 0, "end": 1235, "_node_type": "1"}, "relationships": {"1": "0de19f48e6a004a29fcc717169500bd54129498f"}}, "__type__": "1"}, "f1a01968-83ad-4bff-8f1c-e094e119d39c": {"__data__": {"text": "# Interacting with a Neo Node\n\n## Setting up a Connection\nBecause neow3j is not a Neo node implementation, interacting with an external node is crucial for any actions that read\nfrom or write to the blockchain.  The centerpiece of the interaction with Neo nodes is the `io.neow3j.protocol.Neow3j` \nclass. It provides Java counterparts for all JSON-RPC methods supported by Neo nodes. \nYou can instantiate it as follows:\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://localhost:40332\"));\n```\n\nThis requires a Neo node to be listening at `http://localhost:40332`. Replace that URL with whatever node you want to\nconnect to. This way of instantiating a `Neow3j` object will set it up with a default configuration. The right\nconfiguration depends on the network you are connecting to. The default values are tailored to the Neo mainnet, e.g.,\nwith a 15 seconds block time. If you are connecting to an other network you might need to adapt the configuration and\ninstantiate the `Neow3j` object with an instance of `Neow3jConfig`. For example:\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://localhost:40332\"), \n                             new Neow3jConfig().setNetworkMagic(769));\n```\n \nNeow3j uses this configuration internally in a couple of places. E.g., the network magic number is used in the process\nof hashing transactions.\n\nThe `Neow3jConfig` has a static member and static methods for setting and getting the address version. It is static\nbecause the address version is required in places where no `Neow3j` instance is available. Make sure that the address\nversion is matching the addresses you are working with and adjust it with `Neow3jConfig.setAddressVersion(byte version)`\nif necessary.\n\nNow that we have a `Neow3j` instance set up, we can start exploring possible interactions with the Neo blockchain. Most\nmethods on `Neow3j` construct and return a `Request` object that defines the request and the expected response format. \nCall `send()` on that request to actually send it to the Neo node. The returned type will be a subclass of `Response`.\nTo make sure you don't run into unexpected `NullPointerException`s you can call `hasError()`, `getError()`, or\n`throwOnError()` on the response object and handle errors smoothly before trying to access any other response data.\n\nAnother set of methods on `Neow3j` are based on RxJava and return `Observable`s that you can subscribe to. They are\nbriefly explored in the next section on monitoring the blockchain.\n## Monitoring the Blockchain\n\nOne common use case in blockchain-related applications is keeping track of new blocks and their contents.  There are\nseveral methods on `Neow3j` that allow you to catch up and subscribe to new blocks. Any block retrieved from the Neo\nnode will be passed on to your subscriber. The following example gets all blocks starting at block index 100 and\nsubscribes to any newly generated blocks. With the boolean parameter you control if you want to receive the complete\ntransaction data for each block.\n\n```java\nneow3j.catchUpToLatestAndSubscribeToNewBlocksObservable(new BigInteger(\"100\"), true)\n        .subscribe((blockReqResult) -> {\n            System.out.println(\"blockIndex: \" + blockReqResult.getBlock().getIndex());\n            System.out.println(\"hashId: \" + blockReqResult.getBlock().getHash());\n            System.out.println(\"confirmations: \" +", "doc_id": "f1a01968-83ad-4bff-8f1c-e094e119d39c", "embedding": null, "doc_hash": "46e6cd4cc1bff605af12807eb20249cb9619aee025063d43e97a40f6a782c629", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/interacting_with_a_node"}, "node_info": {"start": 0, "end": 3378, "_node_type": "1"}, "relationships": {"1": "00803e0bbf0f3d47ea5568caf06860aa884da00a", "3": "99d256c2-d78b-4a2b-868a-d48e1748045a"}}, "__type__": "1"}, "99d256c2-d78b-4a2b-868a-d48e1748045a": {"__data__": {"text": "        System.out.println(\"confirmations: \" + blockReqResult.getBlock().getConfirmations());\n            System.out.println(\"transactions: \" + blockReqResult.getBlock().getTransactions());\n        });\n```\n\nOr if you are not interested in any history, start subscribing from the latest block:\n\n```java\nneow3j.subscribeToNewBlocksObservable(true)\n        .subscribe((blockReqResult) -> {\n            System.out.println(\"blockIndex: \" + blockReqResult.getBlock().getIndex());\n            System.out.println(\"hashId: \" + blockReqResult.getBlock().getHash());\n            System.out.println(\"confirmations: \" + blockReqResult.getBlock().getConfirmations());\n            System.out.println(\"transactions: \" + blockReqResult.getBlock().getTransactions());\n        });\n```\n\n## Inspecting a transaction\n\nYou can retrieve transaction information with the block subscriptions from the last sections but you can also be more\nspecific and fetch information about single transactions, e.g., if you sent a transaction to a node and now want to\ncheck its state on the blockchain. \n\n```java\nHash256 txHash = new Hash256(\"da5a53a79ac399e07c6eea366c192a4942fa930d6903ffc10b497f834a538fee\");\nNeoGetTransaction response = neow3j.getTransaction(txHash).send();\nif (response.hasError()) {\n    throw new Exception(\"Error fetching transaction: \" + response.getError().getMessage());\n}\nTransaction tx = response.getTransaction();\n```\n\nThis `Transaction` object will contain all the information about the transaction, e.g., the fees paid for it, the block\nit was included in, or how many blocks have been added since the transaction was included in a block. If you require the\ntransaction in its raw byte array form you can use the `getRawTransaction` method instead. It will provide a\nBase64-encoded String of the transaction bytes.\n\n```java\nNeoGetRawTransaction response = neow.getRawTransaction(txHash).send();\nStribg tx = response.getRawTransaction();\n```\n\nMost transactions will have an invocation output that is of interest to the dApp. You can get the results of an\ninvocation with the `getApplicationLog` method. \n\n```java\nHash256 txHash = new Hash256(\"da5a53a79ac399e07c6eea366c192a4942fa930d6903ffc10b497f834a538fee\");\nNeoGetApplicationLog response = neow.getApplicationLog(txHash).send();\nif (response.hasError()) {\n    throw new Exception(\"Error fetching transaction's app log: \" + response.getError().getMessage());\n}\n// Get the first execution. Usually there is only one execution.\nNeoApplicationLog.Execution execution = response.getApplicationLog().getExecutions().get(0);\n// Check if the execution ended in a NeoVM state FAULT.\nif (execution.getState().equals(NeoVMStateType.FAULT)) {\n    throw new Exception(\"Invocation failed\");\n}\n// Get the result stack.\nList<StackItem> stack = execution.getStack();\nStackItem returnValue = stack.get(0);\n\n// Get the notifications fired by the transaction.\nList<NeoApplicationLog.Execution.Notification> notifications = execution.getNotifications();\n```\n\nThe stack included in the application logs will contain all the stack items that the invocation returned. Usually the\nreturn stack is made up of one return value that is at index 0. You will need to know what type", "doc_id": "99d256c2-d78b-4a2b-868a-d48e1748045a", "embedding": null, "doc_hash": "fee09b26fdb3554d1b4f01bcbcfeccbc6b815ec402d46149f9db8261cdd4d867", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/interacting_with_a_node"}, "node_info": {"start": 3343, "end": 6539, "_node_type": "1"}, "relationships": {"1": "00803e0bbf0f3d47ea5568caf06860aa884da00a", "2": "f1a01968-83ad-4bff-8f1c-e094e119d39c", "3": "09aaee23-38e5-4f19-9c73-d9c5e07f039f"}}, "__type__": "1"}, "09aaee23-38e5-4f19-9c73-d9c5e07f039f": {"__data__": {"text": "is made up of one return value that is at index 0. You will need to know what type of stack item the\ninvocation returns to be able to interpret it correctly.  \n\nNext to the return value you can also check what notifications have been triggered by the transaction. The applications\nlog's notifications are one way to track activities of a  smart contract. Currently there is no convenient way to follow\na smart contract. You will need to subscribe to new blocks, go through all transaction's application logs, and check if\nthe logs contain notifications fired by the contract by comparing the contract hash to `notification.getContract()`.\n\n\n## Using a Wallet on the Node\n\nIf you run your own Neo full node you can make use of wallets that are stored directly on that node. Neow3j covers the\nnecessary methods to interact and make use of such wallets. \n\nFirst a wallet needs to be opened.\n\n```java\nNeoOpenWallet response = neow3j.openWallet(\"/path/to/wallet.json\", \"walletPassword\").send();\nif (response.hasError()) {\n    throw new Exception(\"Failed to open walled. Error message: \" + response.getError().getMessage());\n}\n\nif (response.getOpenWallet()) {\n    System.out.println(\"Successfully opened wallet.\");\n} else {\n    System.out.println(\"Wallet not opened.\");\n}\n```\n\nNow, with the open wallet, you can list the accounts in that wallet.\n\n```java\nNeoListAddress response = neow3j.listAddress().send();\nif (response.hasError()) {\n    throw new Exception(\"Failed to fetch wallet accounts. Error message: \" + response.getError().getMessage());\n}\nList<NeoAddress> listOfAddresses = response.getAddresses();\n```\n\nCheck the wallets balances.\n\n```java\nNeoGetWalletBalance response = neow3j.getWalletBalance(NeoToken.SCRIPT_HASH).send();\nif (response.hasError()) {\n    throw new Exception(\"Failed to get wallet balance. Error message: \" + response.getError().getMessage());\n}\nString balance = response.getWalletBalance().getBalance();\n```\n\nAnd, in the end, close the wallet.\n\n```java\nNeoCloseWallet response = neow3j.closeWallet().send();\nif (response.hasError()) {\n    throw new Exception(\"Failed to close the  wallet. Error message: \" + response.getError().getMessage());\n}\n```\n\n## Neo-Express\n\nThe class `io.neow3j.protocol.Neow3jExpress` extends the methods of `Neow3j` with methods that are specific to\nneo-express. [Neo-express](https://github.com/neo-project/neo-express) is a developer tool that enables a fast workflow. It is basically a tool for managing and configuring private networks for development purposes.\nNeo-express exposes several RPC methods additional to normal Neo nodes. These are available through `Neow3jExpress`. Use `Neow3jExpress` just like `Neow3j` but with an URL that points to a neo-express instance.\n\n```java\nNeow3jExpress neow3j = Neow3jExpress.build(new HttpService(\"http://localhost:40332\"));\n```\n\nThis API is especially of interest to developers that create developer tools using neo-express as the local Neo network.\n", "doc_id": "09aaee23-38e5-4f19-9c73-d9c5e07f039f", "embedding": null, "doc_hash": "33d003f79f830b21bb3891c47e17df1ba751c6998fdf9c4add994fe7e4af6b42", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/interacting_with_a_node"}, "node_info": {"start": 6493, "end": 9444, "_node_type": "1"}, "relationships": {"1": "00803e0bbf0f3d47ea5568caf06860aa884da00a", "2": "99d256c2-d78b-4a2b-868a-d48e1748045a"}}, "__type__": "1"}, "f1990a63-c147-45e5-9ca0-79033c55b441": {"__data__": {"text": "# dApp Development\n\nIn our definition, dApp development comprises the implementation of systems that interact and are based on a blockchain. \nAlthough, smart contracts are also part of a dApp, we separate contract development and dApp development because\nneow3j's libraries are cleanly separable into these two development activities. In this part we introduce the neow3j SDK\nwhich is concerned with dApp development.\n\nThe neow3j SDK attempts to provide a high abstraction layer that relieves the developer from dealing\nwith technical details of the Neo blockchain. At the same time, it gives the ability for more\ndetailed configuration for use cases where more control is needed.\nYou can, for example, use the `NeoToken` class to conveniently construct a NEO transfer\nwith a single method call, or construct a transaction from scratch using the `TransactionBuilder`.\n\nThe neow3j SDK is divided into two modules `io.neow3j:core` and `io.neow3j:contract` that separate the lower level core\nfunctionalities, like signing, from more abstract functionality, like building contract-specific transactions. The\n_core_ module is a dependency of the _contract_ module, so if you add _contract_ as a dependency to your project you\nwill get the _core_ module as well.\n\n**`io.neow3j:core`** contains\n  - Basic definitions and enums.\n  - Utility methods of which the most notable classes are, e.g., for handling hex strings. \n  - Cryptographic methods related to key pairs (class `ECKeyPair`) and signatures (class `Sign`).\n  - Wallet and account management, i.e., the handling of key pairs or reading from and writing to NEP-6 wallet files.\n  - Interaction with the Neo blockchain, i.e., communication via JSON-RPC with a Neo node. \n  - The `Transaction` and `ScriptBuilder` classes that are fundamental for constructing contract invocations of any\n    kind.\n\n**`io.neow3j:contract`** contains\n- Functionality related to smart contracts.\n- Classes that allow easy interaction with native contracts.\n- Classes that represent and allow easy interaction with contracts following a certain standard, like the NEP-17 token\n  standard.\n- for interfaces like fungible or non-fungible token contracts and native contracts that support building invocation\n  scripts to create a transaction.\n\nThe following sections explain the SDK's capabilities based on common concepts and activities used in dApp\ndevelopment.\n", "doc_id": "f1990a63-c147-45e5-9ca0-79033c55b441", "embedding": null, "doc_hash": "70773abf6f757e768ec379fbaa86b64ad91c54059bcf9e32e81d26d719494a47", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/introduction"}, "node_info": {"start": 0, "end": 2391, "_node_type": "1"}, "relationships": {"1": "3285dcf116bfdad51771084e20604689a1e7e14b"}}, "__type__": "1"}, "f8caaa84-d5b7-44a6-a6fe-bf92b2e51c08": {"__data__": {"text": "# Preliminaries\n\nThe following sections introduce general concepts and types that you will meet throughout the neow3j SDK.\n## Hashes\n\nHashes appear a lot in the blockchain world and Neo is not an exception. There are two kinds of hashes in Neo. One\nis 256 bit long and produced by applying the SHA-256 (member of the SHA-2 cryptographic hash functions) twice to some\ninput data. It is used for transaction and block hashes. The other is 160 bit long and produced by first applying\nSHA-256 and then RIPEMD-160 to some input data. It is used for identifying accounts and contracts in the form of script\nhashes, i.e., hashes of the scripts underlying those accounts and contracts.  \n\nThe neow3j SDK uses the types `io.neow3j.contract.Hash256` and `io.neow3j.contract.Hash160` for those two hash types,\nrespectively. You will see that the SDK's API almost always requires you to work with these two types instead of a\nsimple string or byte array. Note, that the hashes stored by these types are stored in big-endian order but can be\nretrieved in little-endian order via the `toLittleEndianArray()` method. Endianness might be an issue when inspecting\nresults from contract invocations, because the Neo node might return a hash in little-endian order, which you have to be\naware of when constructing a `Hash160` or `Hash256`.\n\n\n## NeoVM Stack Items\n\nThe NeoVM is the virtual machine on which all smart contract code is executed. When invoking a contract on the \nNeo blockchain, the result of that invocation is a list of items that are left on the NeoVM's stack at the end of the\n invocation. These items are called stack items and are represented by the `StackItem` class in neow3j SDK. Stack items\ncan be one of several defined types that exist on the NeoVM and they have to be mapped into Java types when the SDK\nreceives them from a Neo node. This mapping is not a simple one-to-one mapping but leaves space for more interpretation.\nFor example, a stack item containing an integer can be interpreted as a boolean value if it is in the range of 0 and 1.\nOr a byte array can be interpreted as an integer value.\n\nThe `StackItem` class in neow3j lets you choose to which Java type you want to \"cast\" a stack item. Any stack item that\nis returned by a Neo node will be wrapped into the `StackItem` class. Then, if you know that an invocation is returning\na boolean value you can call `stackItem.getBoolean()` and you will receive true or false even if the stack item is an\ninteger of value 0 or 1 behind the scenes. If the stack item is not castable to the type you desire, an exception will\nbe thrown. E.g., if you call `stackItem.getMap()` on an integer stack item, it will not give you a map-interpretation of\nthat integer but simply throw an exception. Thus, you still need to know what type of stack item an invocation will return.\n", "doc_id": "f8caaa84-d5b7-44a6-a6fe-bf92b2e51c08", "embedding": null, "doc_hash": "cfaa92a22368660eb3f579b43bd517ff7bbc21ea9279f15b4afa7b23fd9786c5", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/preliminaries"}, "node_info": {"start": 0, "end": 2831, "_node_type": "1"}, "relationships": {"1": "55e0c4ab7cbdba9353a629cc70b3983e3e9a803c"}}, "__type__": "1"}, "209d1d6a-ca15-41bb-bdbe-4e0d0878a5e5": {"__data__": {"text": "# Smart Contracts\n\nTo deploy, invoke or just retrieve information about any contract's state on the blockchain, the class `SmartContract`\ncan be used. It is the most generic class in the neow3j SDK that models a contract. All other contract classes are\nsubclasses of this one. On one hand, `SmartContract` offers methods to invoke a contract on the blockchain with the\nresult of an actual state change. On the other hand, you can use it to simulate an invocation without actually inducing\nstate changes. The latter is also used when the invocation only performs read actions. \n\nThe only method that creates an actual transaction is `invokeFunction(...)`. It builds a script based on the provided\nfunction name and contract parameters and constructs a `TransactionBuilder` with it. The returned transaction builder\ncan then be configured, built, and the transaction send as described in the Section\n[Transactions](neo-n3/dapp_development/transactions.md). This process is visualized in the following figure.\n\n```\n         Build script           ->      Configure transaction       ->   Tx ready to sign and send\n\n        ---------------                  --------------------                -------------\n       | SmartContract |        ->      | TransactionBuilder |      ->      | Transaction |\n        ---------------                  --------------------                -------------\n```\n\n\nThe methods that don't change blockchain state all start with the word *call* to indicate that the performed invocation\nis only a call to the Neo JSON-RPC API's `invokefunction` or `invokescript` methods. They don't produce transaction\nbuilders or transactions.  There are several of such *call* methods, with the basic one being `callInvokeFunction(...)`.\nIf you know what type the contract invocation will return, you can use one of the more specific call methods that\nalready unpack the invocation result value, e.g., `callFunctionReturningScriptHash(...)`.\n\nConversely to the return type, each method of a contract takes specific parameter types as input. In order to know what\nmethods exist in a smart contract, and what parameter types it requires, every contract has a manifest that provides you\nwith this and much more information about the contract. In the following sections, we'll show you how to create contract\nparameters, get the manifest and figure out what parameters you need to pass to a function you want to invoke.\n\n## Contract Parameters\n\nWhen invoking a smart contract, you will need parameters. The neow3j SDK represents parameters via the\n`ContractParameter` class. It provides many static construction methods that cover all possible parameter types. If you\nuse those methods, neow3j will make sure that the parameter is sent to the contract in the correct encoding and the\ncorrect type declaration. For example, if you need to pass a script hash of a NEO address as a parameter, you can use\nthe method `ContractParameter.hash160(...)`. It converts the script hash to the expected byte array.\n\nIf you invoke a contract that takes an object as a parameter, you need to use a contract parameter of type `Array`. As\nan example, assume the that the `Bongo` struct class below is the expected method parameter. \n\n```java\n@Struct\npublic class Bongo {\n\n    public String lowNote;\n    public String highNote;\n\n    public Bongo(String lowNote, String highNote) {\n        this.lowNote = lowNote;\n        this.highNote = highNote;\n    }\n}\n```\n\nUsing the neow3j SDK, you would have to construct the following parameter representing a `Bongo`", "doc_id": "209d1d6a-ca15-41bb-bdbe-4e0d0878a5e5", "embedding": null, "doc_hash": "7c0248961d285c0553c9d23598b607ca521bc35fad4202ec468fa27e6470cc61", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/smart_contracts"}, "node_info": {"start": 0, "end": 3546, "_node_type": "1"}, "relationships": {"1": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a", "3": "765386d9-517c-49d5-9625-8461ed16eba8"}}, "__type__": "1"}, "765386d9-517c-49d5-9625-8461ed16eba8": {"__data__": {"text": "SDK, you would have to construct the following parameter representing a `Bongo` instance.\n\n```java\nContractParameter.array(\n    ContractParameter.string(\"C2\"), \n    ContractParameter.string(\"C5\")));\n```\n\nThe same applies when the object is used in a return type. In other words, expect a return value of type `Array` that\nwill hold the object's variables in the order they appear in the class.\n\n\n## Contract Invocation\n\nFirst, you have to specify which contract and which function you want to invoke. Use the `io.neow3j.contract.Hash160`\nclass for the contract's script hash and create a `SmartContract` together with a `Neow3j` instance.\n\n```java\nHash160 scriptHash = new Hash160(\"0x1a70eac53f5882e40dd90f55463cce31a9f72cd4\");\nSmartContract smartContract = new SmartContract(scriptHash, neow3j);\n```\n\nThen, you need to define the parameters that will be passed to the contract. In order to know what parameters you need\nto pass to the contract, you need information about its methods. You can get that information by reading the contract's\nABI that's in the manifest. In the following it's shown how you can get all the methods of a smart contract with their\nnames, parameters, and return type in order to know what parameters you need to pass to a function and also what you\ncan expect to be returned.\n\n```java\nList<ContractManifest.ContractABI.ContractMethod> methods = smartContract.getManifest().getAbi().getMethods();\n```\n\nIn this example, we are invoking a name service contract and call the `register` function with a domain name and an\naddress that should be registered under that domain name.\n\n```java\nAccount account = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\");\nContractParameter domainParam = ContractParameter.string(\"myname.neo\");\nContractParameter accountParam = ContractParameter.hash160(account.getScriptHash());\n```\n\nWith the smart contract instance, the function, and the parameters, we can construct an invocation as follows. This\ndoesn't yet send a transaction but it builds the correct script and instantiates a transaction builder with it for\nfurther configuration.\n\n```java\nString function = \"register\";\nTransactionBuilder txBuilder = smartContract.invokeFunction(function, domainParam, accountParam);\n```\n\nHere's the complete code with the configuration of the transaction builder. The transaction is signed by the same\naccount that is registered under the domain name \"myname.neo\".\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://localhost:40332\"));\nHash160 scriptHash = new Hash160(\"0x1a70eac53f5882e40dd90f55463cce31a9f72cd4\");\nSmartContract smartContract = new SmartContract(scriptHash, neow3j);\n\nAccount account = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\");\nContractParameter domainParam = ContractParameter.string(\"myname.neo\");\nContractParameter accountParam = ContractParameter.hash160(account.getScriptHash());\nString function = \"register\";\n\nNeoSendRawTransaction response = new SmartContract(scriptHash, neow3j)\n        .invokeFunction(function, domainParam, accountParam)\n        .signers(AccountSigner.calledByEntry(account))\n        .sign()\n        .send();\n```\n\nOf course, it is also possible to call a smart contract function that doesn't take any parameters, e.g., a contract that\nsimply increments a number every time it gets", "doc_id": "765386d9-517c-49d5-9625-8461ed16eba8", "embedding": null, "doc_hash": "81c34204273baa6f466a678234ff06d4e01eb3098243665b93ee3da06809a472", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/smart_contracts"}, "node_info": {"start": 3479, "end": 6819, "_node_type": "1"}, "relationships": {"1": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a", "2": "209d1d6a-ca15-41bb-bdbe-4e0d0878a5e5", "3": "8b363639-1efe-4b91-9ac4-ca8ca3fa05cc"}}, "__type__": "1"}, "8b363639-1efe-4b91-9ac4-ca8ca3fa05cc": {"__data__": {"text": "e.g., a contract that\nsimply increments a number every time it gets called.\n\n```java\nNeoSendRawTransaction response = new SmartContract(contract, neow3j)\n        .invokeFunction(\"increment\")\n        .signers(AccountSigner.calledByEntry(account))\n        .sign()\n        .send();\n```\n\n## Testing the Invocation\n\nIf you need to know the effect of your invocation before actually propagating it through the network, you can do a test\ninvocation first. This also calls the RPC node but only simulates the execution without any effects on the blockchain.\nContinuing the above example of the domain name contract, a test invocation would look like the following. Notice that\ndepending on what call you perform, you also need to add signers even though no blockchain state is changed. In this\nspecific example the signer is needed because in the called contract it will be verified if the account that is\nregistered is also the sender of the transaction.\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://localhost:40332\"));\n\nHash160 scriptHash = new Hash160(\"0x1a70eac53f5882e40dd90f55463cce31a9f72cd4\");\nString function = \"register\";\n\nAccount account = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\");\nContractParameter domainParam = ContractParameter.string(\"neo.com\");\nContractParameter accountParam = ContractParameter.hash160(account.getScriptHash());\nList<ContractParameter> params = Arrays.asList(domainParam, accountParam);\n\nNeoInvokeFunction response = new SmartContract(scriptHash, neow3j)\n        .callInvokeFunction(funtion, params, AccountSigner.calledByEntry(account));\n```\n\nThe `NeoInvokeFunction` holds information about the GAS amount consumed in the contract execution, the VM exit state\n(e.g. HALT or FAULT), and the VM's stack, i.e. the return value.\n\n## Contract Interfaces\n\nThere are several subclasses of `SmartContract` that implement a sort of interface to Neo's native contracts and\ncontracts that follow token standards. Here, the word interface means that these classes provide an interface to\ninteract with the deployed contracts. Token contracts are discussed separately in Section [Token\nContracts](neo-n3/dapp_development/token_contracts.md). They include fungible and non-fungible tokens such as `NeoToken`\nand `GasToken`. The other available contract classes are discussed below. \n\n### ContractManagement\n\nThe `ContractManagement` contract is a Neo native contract that, as its name suggests, can be used to manage other\ncontracts. More precisely, it allows you to deploy, update, and delete a contract. In the neow3j SDK the update and\ndelete methods cannot be used, because they can only be called from within another contract. But, the deploy method is\navailable and allows you to deploy new contracts with neow3j. For example:\n\n```java\nTransaction tx = new ContractManagement(neow3j)\n        .deploy(nef, manifest)\n        .signers(AccountSigner.calledByEntry(account1)))\n        .sign();\n```\n\nProducing the necessary NEF (Neo Executable Format) file and contract manifest is not discussed here but are part of\nthe Contract Development [section]().\n\nThere are two other methods on `ContracManagement`. They are concerned with the minimum deployment fee. The getter\n`getMinimumDeploymentFee()` can be used by anyone. But, the setter `setMinimumDeploymentFee(...)` can only successfully\nbe used if the transaction is signed by committee", "doc_id": "8b363639-1efe-4b91-9ac4-ca8ca3fa05cc", "embedding": null, "doc_hash": "d5524699f1d8c4185f9634a16381123a2cd93b8ef9fb8980c539a2bc30bef73f", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/smart_contracts"}, "node_info": {"start": 6831, "end": 10233, "_node_type": "1"}, "relationships": {"1": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a", "2": "765386d9-517c-49d5-9625-8461ed16eba8", "3": "50d46fc1-9f62-48e0-aba2-e9e78fa1f9f8"}}, "__type__": "1"}, "50d46fc1-9f62-48e0-aba2-e9e78fa1f9f8": {"__data__": {"text": "can only successfully\nbe used if the transaction is signed by committee members. I.e., it will be of no use to most developers.\n\n\n### PolicyContract\n\nThe `PolicyContract` holds information about several settings of the Neo network. You can retrieve information like GAS\nfee per transaction byte, the GAS price per byte of contract storage, or if a certain account is blacklisted.\n\nThe contract also provides setters for all of these values, though, these can only successfully be used if the\ntransaction is signed by committee members. \n\n\n### RoleManagement\n\nThe `RoleManagament` contract is used to assign roles to nodes in the network. A node can be a state validator, an\noracle node, or a NeoFS \"Alphabet\" node (responsible for consensus on NeoFS sidechain). \n\nThe designation of a node to a role can only be done via the Neo committee. But you can check the role assignments with\nthe `getDesignatedRole(...)` method.\n\n\n### NeoNameService\n\nThe `NeoNameService` is not a native contract but managed by the Neo core team. The script hash of this contract is not\nknown to neow3j and has to be provided by the developer when constructing an instance of `NeoNameService`. As its name\nsuggest the name service contract provides the possibility to map a name to an owner account. You can read more about it\nin the official [Neo Docs](https://docs.neo.org/docs/en-us/reference/nns.html).\n\nThe `NeoNameService` class in the neow3j SDK provides you with all the methods of the contract. So you can check\nregistered names and register your own name-to-address mappings. Some of them can only be called by the Neo committee,\ne.g., `addRoot(...)` or `setPrice(...)` methods.\n", "doc_id": "50d46fc1-9f62-48e0-aba2-e9e78fa1f9f8", "embedding": null, "doc_hash": "e8422e289548f13c0eda1ef602247d90755db903efc340af1ae09593a2d60294", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/smart_contracts"}, "node_info": {"start": 10219, "end": 11884, "_node_type": "1"}, "relationships": {"1": "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a", "2": "8b363639-1efe-4b91-9ac4-ca8ca3fa05cc"}}, "__type__": "1"}, "736ad2e2-a9bc-4e9c-8d65-4e332485aedd": {"__data__": {"text": "# Token Contracts\n\nThere are two token standards on Neo, one for fungible and one for non-fungible tokens. The neow3j SDK covers the\ninteraction with such token contracts in the classes `FungibleToken` and `NonFungibleToken`.\n\nThe following graph shows how the classes around token contracts are structured. They are sub-types of the\n`SmartContract` base class and add all token contract specific methods ontop.\nIn the subtype `Token` the common methods used in token contracts like `getDecimals()`, `getSymbol()` or\n`getTotalSupply()` are collected.  In the subtype `FungibleToken` the NEP-17 standard is implemented. Two specific\ninstances of NEP-17 contracts are the native contracts `NeoToken` and `GasToken`. They contain their additional methods\nthat are specific to them, e.g., `registerValidator`, `getRegisteredValidators` or `vote`.  The `NonFungibleToken`\nrepresents a wrapper for token contracts that comply with the NEP-11 standard for non-fungible tokens. The\n`NeoNameService` contract is a specific example for such a contract.\n\n```\n             Build invocation script                 ->      Specify Tx Signers, etc.    ->   Tx ready to sign and send\n                 ---------------\n                | SmartContract |\n                 ---------------\n                        |\n                     -------\n                    | Token |\n                     -------                                  --------------------                -------------\n                    /        \\                       ->      | TransactionBuilder |      ->      | Transaction |\n        ---------------     ------------------                --------------------                -------------\n       | FungibleToken |   | NonFungibleToken |\n        ---------------     ------------------\n          /         \\                 \\\n   ----------      ----------         ----------------\n  | NeoToken |    | GasToken |       | NeoNameService |\n   ----------      ----------         ----------------\n```\n\nAll of these classes provide methods to build scripts and a transactions for contract invocation. The methods that\nchange state return a `TransactionBuilder` that can be used to further configure the transaction, e.g., specify signers\nor an additional network fee. The transaction can then be signed and built, and the returned `Transaction` sent to a Neo\nnode.\n\n## Fungible Token Contracts (NEP-17)\n\nThe most prominent method on [NEP-17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) token\ncontracts is the `transfer` method. There are a couple of overloads for this method.  In its basic form", "doc_id": "736ad2e2-a9bc-4e9c-8d65-4e332485aedd", "embedding": null, "doc_hash": "820d8c5f0f13dd125a0167d2d4db3d9e58f39b1f9356eb439bd3a72bae71b4a6", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/token_contracts"}, "node_info": {"start": 0, "end": 2615, "_node_type": "1"}, "relationships": {"1": "b484ecd890487de4c8d570dfa3845603338f7c0a", "3": "d4e1a924-c013-4234-ad94-8c6f24780052"}}, "__type__": "1"}, "d4e1a924-c013-4234-ad94-8c6f24780052": {"__data__": {"text": "method. There are a couple of overloads for this method.  In its basic form `transfer` takes\nan `Account` as the for the sender. That account is added as a signer to the transaction builder with witness scope\n`calledByEntry` . If the account contains a private key, you can use `sign()` to automatically sign the resulting\ntransaction.\n\n```java\nAccount account = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\");\nHash160 to = Hash160.fromAddress(\"NWcx4EfYdfqn5jNjDz8AHE6hWtWdUGDdmy\");\n\nNeoSendRawTransaction response = new NeoToken(neow3j)\n        .transfer(account, to, new BigInteger(\"15\"))\n        .sign()\n        .send();\n```\n\nAnother `transfer` method allows you to pass a `Hash160` instead of `Account` for the sender. In this version, no signer\nis attached and it is up to you to add the correct signer. This is useful when the sender is a contract as in the\nexample below.\n\n```java\nHash160 contractHash = new Hash160(\"0xacce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\")\nHash160 to = Hash160.fromAddress(\"NWcx4EfYdfqn5jNjDz8AHE6hWtWdUGDdmy\");\n// Owner of the contract. Required in for verifying the withdraw from the contract.\nAccount account = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\");\n\nNeoSendRawTransaction response = new NeoToken(neow3j)\n        .transfer(contractHash, to, new BigInteger(\"15\"))\n        .signers(AccountSigner.calledByEntry(account),\n                ContractSigner.calledByEntry(contractHash))\n        .sign()\n        .send();\n```\n\nIn both variations of the `transfer` method, there is another overload that allows you to pass a contract parameter.\nThat parameter is forwarded to the `onNep17Payment` method if the receiver is a smart contract and has implemented that\nmethod. If you want to pass multiple parameters you need to do it inside a `ContractParameter.array(...)`.\n\n## Non-fungible Token Contracts (NEP-11)\n\nThe wrapper class `NonFungibleToken` provides support for the\n[NEP-11](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki) standard. Take a look at the standard\nfor detailed information about non-fungible tokens on the Neo blockchain.\n\nIt is important to understand that the standard supports non-divisible as well as divisible non-fungible tokens.\nFor divisible tokens, a token can have multiple owners. Each owner owns a fraction of that token.\nThe provided wrapper class supports both divisible and non-divisible tokens, while methods that are only intended\nfor divisible tokens are not allowed to be used for non-divisible tokens, vice-versa.\n\nBoth divisible and non-divisible token contracts implement the method `balanceOf(owner)`. It simply returns the number\nof tokens owned by the given address. On divisible tokens this includes fractional amounts of tokens. To get the\nfractional amount owned of a specific token, you can use the method `balanceOf(owner, tokenId)` that is specifically\nimplemented by divisible", "doc_id": "d4e1a924-c013-4234-ad94-8c6f24780052", "embedding": null, "doc_hash": "a77f7b50024944c5356d4f3cbc716e1468902385f300103f783dd248dc322a97", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/token_contracts"}, "node_info": {"start": 2555, "end": 5489, "_node_type": "1"}, "relationships": {"1": "b484ecd890487de4c8d570dfa3845603338f7c0a", "2": "736ad2e2-a9bc-4e9c-8d65-4e332485aedd", "3": "e4c786af-9e53-4882-a0f1-9e65b3e3df5a"}}, "__type__": "1"}, "e4c786af-9e53-4882-a0f1-9e65b3e3df5a": {"__data__": {"text": "tokenId)` that is specifically\nimplemented by divisible tokens.\n\nFurther, NFTs provide the methods `tokens`, `tokensOf` and `ownerOf`. The method `ownerOf` returns the single owner of a\nnon-divisible token. With divisible tokens, this method returns an iterator with all owners that own a share of this token.\n\nThen, there are multiple overloads for the `transfer` methods, some for non-divisible and some for divisible tokens that\nare both. For divisible tokens the method has an additional parameter for the fractional token amount to transfer. \nSimilar to the overloads on the `FungibleToken` class (see previous section), `NonFungibleToken` also provides further\noverloads for the sender address to be either an `Account` or `Hash160`, and for adding a contract parameter that is\npassed to the `onNep11Payment` method if the receiver is a smart contract.\n\nHere's an example for sending 200 fractions of the token with ID 1. The fractional amount has to be in accordance with\nthe number of decimals the token can have. You can fetch the number of decimals via the `getDecimals()` method or\ncalculate the amount via the `toFractions(...)` method.\n\n```java\nAccount account = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\");\nHash160 to = Hash160.fromAddress(\"NWcx4EfYdfqn5jNjDz8AHE6hWtWdUGDdmy\");\n\nNonFungibleToken nft = new NonFungibleToken(new Hash160(\"ebc856327332bcffb7587a28ef8d144df6be8537\"), neow3j);\nTransactionBuilder builder = nft.transfer(account, to, new BigInteger(\"200\"), new byte[]{1});\n```\n\nThe NEP-11 has an optional method `properties` that returns the properties of a token. You can get a tokens properties as shown below.\n\n```java\nNFTokenState properties = nft.properties(new byte[]{1});\nString name = properties.getName();\nString description = properties.getDescription();\nString image = properties.getImage();\nString tokenURI = properties.getTokenURI();\n```\n", "doc_id": "e4c786af-9e53-4882-a0f1-9e65b3e3df5a", "embedding": null, "doc_hash": "55ee9126014f25f6f7b742b41df2e74c1ad13f082f210da1760742f541b59b31", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/token_contracts"}, "node_info": {"start": 5495, "end": 7399, "_node_type": "1"}, "relationships": {"1": "b484ecd890487de4c8d570dfa3845603338f7c0a", "2": "d4e1a924-c013-4234-ad94-8c6f24780052"}}, "__type__": "1"}, "026575d1-d180-47b2-85c8-aaff69bef90b": {"__data__": {"text": "# Transactions\n\nTransactions are the main protagonists when changing blockchain state. Every change is induced by a transaction. Neo's\ntransactions are very generic. There are no transaction types. What determines their impact is the attached script. A\nscript is a sequence of NeoVM instructions and can therefore take many forms, though, transaction scripts usually\ncontain one or more calls to smart contracts. The full definition of a Neo transaction is described\n[here](https://docs.neo.org/docs/en-us/basic/concept/transaction.html) in the official Neo documentation.\n\nThe neow3j SDK represents Neo transactions in its `io.neow3j.transaction.Transaction` class. It provides all necessary\nfunctionality to serialize to a byte array and send the transaction to a Neo node. But, constructing a valid transaction\nmanually would be a tedious task. Therefore, neow3j provides the `io.neow3j.contract.TransactionBuilder`, which takes\ncare of building a valid transaction and points out wrong configurations as early as possible. \n\n## Building Transactions\n\nThe `TransactionBuilder` and the `Transaction` require a connection to a Neo node for fetching information, like fees\nor to send the transaction. Therefore, the `TransactionBuilder` is instantiated with a `Neow3j` object. Once\nconstructed, the builder allows you to set almost all the properties a Neo transaction can have. The system fee, which\nis the amount of GAS your transaction will consume, and the network fee, which is based on the size of your transaction\nand the efforts to verify it, are both fetched automatically when building the transaction.\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://127.0.0.1:40332\"));\nTransactionBuilder builder = new TransactionBuilder(neow3j);\n```\n\nThe properties called *nonce*, *validUntilBlock*, and *version* will also be set automatically if not set explicitly.\nThe *nonce* prevents replay attacks in which the exact same transaction is copied and sent again. Its default value is\nset at random by the transaction builder. The *validUntilBlock* value determines for how long the transaction will\nremain valid before it is included in a block. If it does not get included before that time, it will be discarded by\nthe network. The default value is set as the maximum supported by the connected network. The transaction *version* is\nset to 0 by default which you will most probably not have to change.\n\nThe properties that are of most interest are the transaction's script and its signers. As mentioned before, the script\ndetermines the actual effects of the transaction on the blockchain state. How to build the script itself is not\ndiscussed here. Neow3j offers many classes in the `contract` module that will provide you with a `TransactionBuilder`\nholding a preconfigured script.\n\n```java\nbuilder.script(script);\n```\n\nThe use of transaction signers is twofold. The first signer in the list specifies the account that will pay for the\ntransaction fees - it is called the `sender` of the transaction. Secondly, all signers - including the first in the\nlist - are used to allow specific actions of the script that are depending on the signature of an account. For example,\nif a token should be transferred from account a to account b, usually this requires the approval of account a.\n\nYou can set the signers of a transaction with the method `signers(Signer... signers)` in the transaction builder. Note,\nthat the first signer in the provided parameters is used as the transaction's sender. In case you have set all signers,\nbut want to change the sender to another signer, you can use the method `firstSigner(Hash160 account)` to set it\nexplicitly.\n\n```java\nAccount account =", "doc_id": "026575d1-d180-47b2-85c8-aaff69bef90b", "embedding": null, "doc_hash": "ccca0dcda9c24e873050689545a9a6943597c45767187e0fbce1bf259461d8c3", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/transactions"}, "node_info": {"start": 0, "end": 3692, "_node_type": "1"}, "relationships": {"1": "f423c118b9d7a97be63fc2f724b8941551359402", "3": "ff1c1813-4fe1-4c50-b0f1-f30fe2f6a111"}}, "__type__": "1"}, "ff1c1813-4fe1-4c50-b0f1-f30fe2f6a111": {"__data__": {"text": "account)` to set it\nexplicitly.\n\n```java\nAccount account = Account.fromWIF(\"L24Qst64zASL2aLEKdJtRLnbnTbqpcRNWkWJ3yhDh2CLUtLdwYK2\");\nbuilder.signers(AccountSigner.calledByEntry(account));\n```\n\nSigners are associated with a witness scope that restricts how the signer's witness* can be used in an invocation.\nFor example, if a signer is only needed for paying the transaction fee, the witness scope can be set to *None*. There\nare two signer classes to be aware of - the `AccountSigner` and the `ContractSigner`. Use `AccountSigner` for signers\nthat are backed by an account. It provides static builder methods for all witness scopes.\n\nUse `ContractSigner` if the signer is a smart contract. This kind of signer doesn't require a signature, but will call\nthe contract's `verify(...)` method when the transaction is executed. Since contract signers cannot pay the transaction\nfees, the class `ContractSigner` does not provide a builder method for the *None* witness scope. Further, the\n`ContractSigner`'s builder methods can take contract parameters in case the contract's `verify(...)` method has extra\nparameters.\n\n**Note:** A transaction requires at least one `AccountSigner` that will pay for the fees.\n\n> *A witness is a script pair that contains an invocation and a verification script. Both scripts are simply a\n> sequence of NeoVM instructions. In the basic case of an account signer, the invocation script consists of the\n> instruction to push the signature data on the NeoVM stack, whereas in the verification script, the corresponding\n> public key data is pushed on the NeoVM stack followed by an instruction to check its signature provided in the\n> invocation script.\n>\n> Check out the [Medium article by NeoSPCC](https://neospcc.medium.com/thou-shalt-check-their-witnesses-485d2bf8375d)\n> to learn more about witnesses and witness scopes.\n\nWitnesses can only be added to the `Transaction` object and not to the builder because they usually depend on the\nserialized transaction for producing a signature. In case you are using `single-sig` accounts in a transaction's\nsigners, the `sign()` method will produce the witnesses automatically for you.\n\nThe following is a simple example of how building, signing, and sending a transaction might look.\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://127.0.0.1:40332\"));\nAccount account = Account.fromWIF(\"L24Qst64zASL2aLEKdJtRLnbnTbqpcRNWkWJ3yhDh2CLUtLdwYK2\");\n\nbyte[] script = new ScriptBuilder().contractCall(NeoToken.SCRIPT_HASH, \"symbol\", null)\n                                   .toArray();\n\nTransaction tx = new TransactionBuilder(neow3j)\n    .script(script)\n    .signers(AccountSigner.calledByEntry(account))\n    .sign();\n\nNeoSendRawTransaction response = tx.send();\n```\n\nFor manually adding witnesses to a transaction continue reading the next section.\n\n## Signing Transactions\n\nAs you have seen in the last section, the `TransactionBuilder` offers a `sign()` method. It attempts to add the correct\nsignatures according to what it finds in the list of signers. If you add an `AccountSigner` that holds a private key,\nthe `sign()` method can automatically create the signature/witness for that signer. If the account doesn't have a key,\ne.g., because it", "doc_id": "ff1c1813-4fe1-4c50-b0f1-f30fe2f6a111", "embedding": null, "doc_hash": "9dd211fb01ede9d9434813af0473134f9d52da5e2f7c32f7f9133dc8758b9774", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/transactions"}, "node_info": {"start": 3640, "end": 6867, "_node_type": "1"}, "relationships": {"1": "f423c118b9d7a97be63fc2f724b8941551359402", "2": "026575d1-d180-47b2-85c8-aaff69bef90b", "3": "c8d252f5-7694-41d8-913e-dbb64eab09aa"}}, "__type__": "1"}, "c8d252f5-7694-41d8-913e-dbb64eab09aa": {"__data__": {"text": "that signer. If the account doesn't have a key,\ne.g., because it is a multi-sig account, you will need to provide the witness manually.\nWitnesses for `ContractSigners` are also added automatically with `sign()`.\n\nTo sign manually, use `getUnsignedTransaction()` on the builder and retrieve the transaction with an empty list of\nwitnesses. Now it is up to you to add the necessary witnesses. You can get the serialized transaction bytes and create\na witness from it as shown below.\n\n```java\nTransaction tx = txBuilder.getUnsignedTransaction();\nAccount account = Account.fromWIF(\"L24Qst64zASL2aLEKdJtRLnbnTbqpcRNWkWJ3yhDh2CLUtLdwYK2\");\nECKeyPair keyPair = account.getECKeyPair();\nbyte[] txBytes = tx.getHashData();\nWitness witness = Witness.create(txBytes, keyPair);\ntx.addWitness(witness);\ntx.send();\n```\n\nIf your use case is more advanced and requires witnesses of `multi-sig` accounts, you can create an unsigned\n`Transaction` with `getUnsignedTransaction()` and append the witnesses manually to the transaction with\none of the `addMultiSigWitness(...)` convenience methods. The following example shows how such an implementation could\nlook like with a multi-sig account of three participants that requires the signature of two of them.\n\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://127.0.0.1:40332\"));\n\nECKeyPair.ECPublicKey pubKey1 = ...;\nECKeyPair.ECPublicKey pubKey2 = ...;\nECKeyPair.ECPublicKey pubKey3 = ...;\nint threshold = 2;\n\n// The multi-sig account holding its verification script.\nAccount multiSigAccount = Account.createMultiSigAccount(Arrays.asList(pubKey1, pubKey2, pubKey3), threshold);\n\nbyte[] script = ...;\n\n// Create and get unsigned transaction.\nTransaction tx = new TransactionBuilder(neow3j)\n    .script(script)\n    .signers(AccountSigner.calledByEntry(multiSigAccount))\n    .getUnsignedTransaction();\n\n// Externally sign the transaction's hash data (tx.getHashData()) with e.g., Sign.signMessage(txHash, ecKeyPair);\n// Then, parse the raw signature data into the Sign.SignatureData object.\nbyte[] rawSig1 = ...;\nSign.SignatureData sigData1 = Sign.SignatureData.fromByteArray(rawSig1);\nbyte[] rawSig2 = ...;\nSign.SignatureData sigData2 = Sign.SignatureData.fromByteArray(rawSig2);\n\n// Create a map to specify what signature data belongs to which public key.\nHashMap<ECKeyPair.ECPublicKey, Sign.SignatureData> signatureMap = new HashMap<>();\nsignatureMap.put(pubKey1, sigData1);\nsignatureMap.put(pubKey2, sigData2);\n\n// Creates and adds a multi-sig witness to the transaction based on the verification script and the signatures.\ntx.addMultiSigWitness(multiSigAccount.getVerificationScript(), signatureMap);\n\nNeoSendRawTransaction response = tx.send();\n```\n\nIf you need to sign a transaction manually and also require a witness for a contract signer, you can use the method\n`Witness.createContractWitness(List<ContractParameter> verifyParams)` to create a witness for the contract signer. Then,\nadd it with `addWitness(Witness witness)` to the transaction.\n\n## Tracking Transactions\n\nTo track an issued transaction, you can use the method `track()` on the transaction instance.  As soon as the\ntransaction is included in a block, you can retrieve its application log with", "doc_id": "c8d252f5-7694-41d8-913e-dbb64eab09aa", "embedding": null, "doc_hash": "45a85276559df9a25fbb43b72af4c73ba5f178b4c12181cccc69401d60149a46", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/transactions"}, "node_info": {"start": 6867, "end": 10076, "_node_type": "1"}, "relationships": {"1": "f423c118b9d7a97be63fc2f724b8941551359402", "2": "ff1c1813-4fe1-4c50-b0f1-f30fe2f6a111", "3": "bd12d885-efe5-4ed9-b1f4-1a1104d1624a"}}, "__type__": "1"}, "bd12d885-efe5-4ed9-b1f4-1a1104d1624a": {"__data__": {"text": "as the\ntransaction is included in a block, you can retrieve its application log with the method `getApplicationLog()`.\n\n```java\ntx.track().subscribe(blockIndex -> {\n    System.out.println(\"Transaction included in block \" + blockIndex + \".\");\n    NeoApplicationLog log = tx.getApplicationLog();\n    System.out.println(\"Transaction exited with state \" + log.getExecutions().get(0).getState() + \".\");\n});\n```\n\nIf you call `getApplicationLog()` before the transaction is included in a block it throws an `RpcResponseErrorException`\nwith an error message, that the transaction is unknown or could not be found.\n\n## Adding additional Network Fees\n\nThere are two kind of fees one has to pay for a transaction, the system fee and the network fee. The system fee is the\ncost of resources consumed by the execution of a script on the NeoVM. It depends on the number and type of instructions\nexecuted in the script. The network fee is paid for the size of the transaction and the effort needed for signature\nverification. Adding a higher network fee than needed gives the transaction priority in the network. Neow3j\nautomatically fetches the necessary system and network fees for a transaction, but you can add an additional network fee\nfor priority. Use the method `additionalNetworkFee()` as in the example below.\n\n```java\nTransaction tx = new TransactionBuilder(neow3j)\n        .script(script)\n        .signers(AccountSigner.calledByEntry(acc))\n        .additionalNetworkFee(1_000_000L)\n        .sign();\n```\n\nThis adds 1'000'000 GAS fractions to the network fee, which is 1'000'000 / 10^8 = 0.01 GAS.\n", "doc_id": "bd12d885-efe5-4ed9-b1f4-1a1104d1624a", "embedding": null, "doc_hash": "449574ec11602803f8b9f7d3d0bb199b49793255d6525a001d18ff3aaff1842c", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/transactions"}, "node_info": {"start": 10046, "end": 11639, "_node_type": "1"}, "relationships": {"1": "f423c118b9d7a97be63fc2f724b8941551359402", "2": "c8d252f5-7694-41d8-913e-dbb64eab09aa"}}, "__type__": "1"}, "d4b7dc91-8dd8-4bdc-bf58-7c759415e381": {"__data__": {"text": "# Wallets and Accounts\n\nAccounts and wallets are important concepts in blockchain. A Neo account in its basic form is made up of an EC key pair.\nFrom this EC key pair, a `script hash` and an `address` can be derived that are used to identify the account.\n\nBesides this simple form there are also multi-signature (multi-sig) accounts which are made up of multiple public keys that\nparticipate in the account. Neow3j uses the same `Account` class to represent both single- and multi-sig accounts.\n\nA wallet is a collection of one or more accounts.\n\n## Wallets\n\nThe easiest way to create a new wallet is by using one of the static creation methods.\n\n```java\nWallet w = Wallet.create();\n```\n\nThis creates a wallet with a new account (with a new key pair). There are other versions of this method that allow us to\nimmediately encrypt the new private key or directly write the wallet to a file after creation.\n\n[NEP-6](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki) is the wallet standard for Neo. If you have a\nNEP-6 wallet file exported from some other wallet software, you can use `fromNEP6Wallet(...)` which reads the wallet information\nfrom the NEP-6 file.\n\n```java\nString absoluteFileName = \"/path/to/your/NEP6.wallet\";\nWallet w = Wallet.fromNEP6Wallet(absoluteFileName)\n        .name(\"NewName\");\n```\n\n> **Note:** When reading the wallet from a NEP-6 wallet file, the private keys of the contained accounts will be\n> encrypted until you call `decryptAllAccounts(String password)` on the wallet. An encrypted account cannot be used for\n> signing transactions.\n\nIf you already have `Account` objects you can create a wallet with the static method `withAccounts(...)`. Furthermore, you can\nmanually set a name, version and [scrypt](https://en.wikipedia.org/wiki/Scrypt) parameters for the wallet. If nothing is\nset, default values are used.\n\n```java\nWallet w = Wallet.withAccounts(Account.create())\n        .name(\"MyWallet\")\n        .version(\"1.0\");\n```\n\n> **Note:** If you want to extract a wallet instance, e.g. as a data transfer object make sure to create a\n> `NEP6Wallet` instance and use this instance. To do so, you will have to encrypt the wallet first and then call\n> `toNEP6Wallet`. This automatically initiates `NEP6Account` instances for all accounts in the wallet.\n\n## Accounts\n\nAccounts in neow3j can be created with or without EC key material. If the private key of the account is available, the\naccount can be used for signing arbitrary data, which includes transactions or other raw data.\n\nThe following methods create an account with the private key available.\n\n- `create()`\n- `new Account(ECkeyPair exKeyPair)`\n- `fromNEP6Account(NEP6Account nep6Acct)` - Requires decryption of the private key with `decryptPrivateKey(...)`. \n- `fromWIF(String wif)`\n\nIt is also possible to create an account without a private key. This applies for example for a multi-sig account where\nonly the public keys, or its derived verification script are known. You can create an account without a private key with\nthe following static methods:\n  \n- `fromAddress(String address)`\n- `fromScriptHash(Hash160 scriptHash)`\n- `fromPublicKey(ECPublicKey publicKey)`\n- `fromVerificationScript(VerificationScript script)`\n\n> **Note:** If you are working with Neo addresses or `watch-only` accounts (i.e., without a private key), you can use\n> the `Hash160` class for that. However, if you are working with wallets, and you're using", "doc_id": "d4b7dc91-8dd8-4bdc-bf58-7c759415e381", "embedding": null, "doc_hash": "15353dc58e75a5e0d20488a3868b8f8a4865a4512f72a53365c0a45b1a354aa6", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/wallets_and_accounts"}, "node_info": {"start": 0, "end": 3438, "_node_type": "1"}, "relationships": {"1": "04f3d2ec9980a7ace5dd0af852d1679836867364", "3": "abc75c84-d9ea-4da5-9522-9b45b555e4fb"}}, "__type__": "1"}, "abc75c84-d9ea-4da5-9522-9b45b555e4fb": {"__data__": {"text": "class for that. However, if you are working with wallets, and you're using NEP-6 wallet files, you can\n> use the `Account` class for that.\n\nAn account can hold a label that is set to its address by default. If needed you can change it to a custom label with\nthe `label(String)` method.\n\n```java\nAccount a = Account.fromWIF(\"L3kCZj6QbFPwbsVhxnB8nUERDy4mhCSrWJew4u5Qh5QmGMfnCTda\")\n        .label(\"MyAccount\");\n```\n\n> **Note:** When you want to extract a single account instance, e.g. as a data transfer object (dto) make sure to create a\n> `NEP6Account` instance and use this instance. To do so, you will have to encrypt the account first and then call\n> `toNEP6Account`. This conversion is automatically made for each account when creating a `NEP6Wallet` from a wallet instance.\n\n## Multi-sig Accounts\n\nMulti-signature accounts can be created with the following methods:\n\n- `fromVerificationScript(VerificationScript script)`\n- `fromNEP6Account(NEP6Account nep6Acct)`\n- `createMultiSigAccount(List<ECPublicKey> publicKeys, int signingThreshold)`\n- `createMultiSigAccount(String address, int signingThreshold, int nrOfParticipants)`\n\nThe first two methods can be used for single- and multi-sig accounts. The verification script - which is available in\nthe NEP6Account's script - holds all information needed about the multi-sig account. This includes the signing\nthreshold, the number of participants, and the involved public keys.  \nIn the latter two methods there is now verification script available. Therefore, one or both of signing threshold and\nnumber of participants has to be specified explicitly in order such that the multi-sig account can be used as a signer in\ntransactions. The `TransactionBuilder` needs the signing threshold and number of participants to determine the network\nfee that has to be paid for signing with the account.\n\nMulti-sig accounts do not hold EC key pairs. That would defeat the purpose of multi-sig accounts, because\ntheir key material should be spread over multiple entities.\n\nIn the following example a new mutli-sig account is created from three public keys. Its signing threshold is two, i.e.,\nfor a transaction signed by this account to be successful, at least two of the three participants have to sign.\n\n```java\nList<ECPublicKey> publicKeys = Arrays.asList(\n        ECKeyPair.createEcKeyPair().getPublicKey(),\n        ECKeyPair.createEcKeyPair().getPublicKey(),\n        ECKeyPair.createEcKeyPair().getPublicKey()\n);\n\nAccount a2 = Account.createMultiSigAccount(publicKeys, 2)\n        .label(\"MyMultiSigAccount\");\n```\n\n## Account Balances\n\nTo check the NEP-17 balances of an account, use the following method.\n\n```java\nNeow3j neow3j = Neow3j.build(new HttpService(\"http://localhost:40332\"));\nMap<Hash160, BigInteger> nep17Balances = a.getNep17Balances(neow3j);\n```\n\nThis returns a map containing all NEP-17 token balances of the account.\n", "doc_id": "abc75c84-d9ea-4da5-9522-9b45b555e4fb", "embedding": null, "doc_hash": "9acdd0a05521539112cce9f907ccf3b900734b3b537926068d56e64ca0312e69", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/wallets_and_accounts"}, "node_info": {"start": 3364, "end": 6242, "_node_type": "1"}, "relationships": {"1": "04f3d2ec9980a7ace5dd0af852d1679836867364", "2": "d4b7dc91-8dd8-4bdc-bf58-7c759415e381"}}, "__type__": "1"}, "03a18030-2344-4c68-a4cb-2a6a558b11c0": {"__data__": {"text": "# Frequently Asked Questions\n\nThis page contains questions that we've been asked in the past and might arise during your development process.\n\n### General Questions\n\n##### Why do I need docker installed for running the test framework?\n\nThe test framework runs a neo-node instance inside of a docker container. This allows you to test your smart contract\nand invocations with a running Neo N3 blockchain.\n\n##### How can I make use of Neo's fine granularity for transaction signatures?\n\nFor this, we suggest you to read through\n[this Medium article](https://neospcc.medium.com/thou-shalt-check-their-witnesses-485d2bf8375d) about the mechanisms\naround signers, scopes and witnesses.\n\n##### What is the difference between Witness Rules and the `@Permission` annotation on a smart contract?\n\n> **TL;DR** Witness rules restrict/allow actions of a transaction, while @Permission defines which non-safe methods a\nsmart contract is allowed to invoke on other smart contracts.\n\nWitness rules (but also the `allowContracts` and `allowGroups` witness scopes) allow you to control the usage of your\nsignature on a per-transaction basis. It tells the NeoVM in which contracts it is allowed to use the provided\nsignature. If your invocation leads to a call to a contract not mentioned in your rules, then the called contract cannot\nmake changes on your behalf.\n\nOn the other hand, the `@Permission` annotation on a smart contract restricts the calls that \nthe contract can make once deployed. I.e., it doesn't care about signatures but can be used to prohibit calling\narbitrary contracts from within a contract. These restrictions are applied to all invocations of that contract\n(regardless of what is allowed in the transactions invoking it).\n\nBoth concepts are used to reduce the attack surface on a transaction. Note, that permissions only apply when it's a\ncontract call that changes state or emits notifications. Reading from one contract to another won't be restricted with\nthe `@Permission` annotation.\n\n### SDK - dApp Development\n\n##### What RPC is used to relay a transaction that I will pay for, and which ones are just for reading?\n\nThe RPC `sendrawtransaction` is used to relay transactions that have been signed and will persist on-chain (i.e., it\ncosts GAS). The RPCs `invokefunction` and `invokescript` are read-only and can be used to \"mock\" invocations to figure\nout what would happen if this function or script was invoked/executed in a signed transaction.\n\n##### How does the node validate a witness check when I only use read invocations?\n\nWhen invoking methods with `invokefunction` or `invokescript` RPCs, calls to `checkWitness` return true as long as the\ncorrect signers (with the correct scope) are attached in the request.\n\n### Devpack - Smart Contract Development\n\nNo FAQs yet for the devpack.\n\n**Please reach out to us in our [Discord Server](https://discord.gg/RBukhnEeke) if you think there are questions and\nanswers that we should add on this page.**\n", "doc_id": "03a18030-2344-4c68-a4cb-2a6a558b11c0", "embedding": null, "doc_hash": "f09ade3259c47b2e4170d472f510a9a8513da53193bb1e35817798eed83693b8", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/faq"}, "node_info": {"start": 0, "end": 2968, "_node_type": "1"}, "relationships": {"1": "e2ae7c4ad61d8c725f1cba48b0a697056bd08676"}}, "__type__": "1"}, "ec23dc1b-6039-42af-820d-eb503bd768ec": {"__data__": {"text": "# Debugging\n\nBy default, the `neow3jCompile` Gradle task will output a `.nefdbgnfo` file that contains debugging information for the\ncompiled smart contract. The file is placed in the same folder as the NEF and contract manifest, i.e., usually at\n`./build/neow3j`. The file is actually a zip archive containing a JSON file, if you want to take a look inside.\n\nThe debugging information is meant to be used with the [Neo\nDebugger](https://github.com/neo-project/neo-debugger), which is part of the VS Code extension pack called \n[Neo Blockchain Toolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit).\nSmart Contract debugging is not possible in IntelliJ. From here on we assume you are working in VS Code and have the Neo\nBlockchain Toolkit extension installed.\n\nFor VS Code to know what contract to debug, you need to add a launch configuration. Launch configuration are in the file\n`.vscode/launch.json` in your projecet directory. If there is no such file yet, you can generate it by selecting \"Add\nConfiguration\" from the \"Run\" menu. \nIn `launch.json` move your cursor inside the \"configurations\" section and use autocompletion, such that an input box\nwill appear containing an entry \"*Neo Contract: Launch*\". Select it, and a new configuration will be added. Adapt the\nconfiguration similarly to the following example. The `program` property has to point to the NEF file that was output by\nthe neow3j Gradle plugin. For more information on how to configure a launch configuration for the Neo Debugger head over\nto one of the creator's [examples](https://github.com/devhawk/safe-purchase-sample/blob/master/.vscode/launch.json).\nHere's the excerpt from neow3j's boilerplate project.\n\n```json\n{\n    \"name\": \"HelloWorldSmartContract\",\n    \"type\": \"neo-contract\",\n    \"request\": \"launch\",\n    \"program\": \"${workspaceFolder}/build/neow3j/HelloWorld.nef\",\n    \"neo-express\": \"${workspaceFolder}/default.neo-express\",\n    \"invocation\": {\n        \"operation\": \"getOwner\",\n        \"args\": []\n    },\n    \"storage\": [\n        {\n            \"key\": \"owner\",\n            \"value\": \"@NNSyinBZAr8HMhjj95MfkKD1PY7YWoDweR\"\n        }\n    ]\n}\n```\n\nWith the configuration in place you can start debugging by pressing F5 or use \"Debug: Start Debugging\" from the Command\nPalette.\n\n> **Note**  \nCurrently, debugging is only supported inside of the contract class. If the class makes calls to methods in the devpack\nor in other custom classes in your workspace, the debugger will not step into those methods.\n", "doc_id": "ec23dc1b-6039-42af-820d-eb503bd768ec", "embedding": null, "doc_hash": "ed302890de489b35f655bfbbb9fc1065669f7f3c1fecb93d00ce8f1e230cb1bb", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/debugging"}, "node_info": {"start": 0, "end": 2529, "_node_type": "1"}, "relationships": {"1": "349d56d82877332aa239d46ed63ae96132a460f2"}}, "__type__": "1"}, "4de8561e-4e67-47ec-a453-fd8013ae3477": {"__data__": {"text": "# Deployment\n\nYou can deploy smart contracts with different tools from the Neo ecosystem, for example, with the Neo Blockchain\nToolkit. Here, we show how to deploy with neow3j. In our smart contract projects, we like to use a separate source set\nto hold deployment related code. Adding such a source set is described in the\n[Setup](neo-n3/smart_contract_development/setup_and_compilation.md) guide.\n\nThe [boilerplate](https://github.com/neow3j/neow3j-boilerplate) repository shows how this could look like.\n\nThe central class for deployment is `ContractManagement` that was introduced\n[here](neo-n3/dapp_development/smart_contracts.md#ContractManagement) and is part of neow3j SDK. Thus, you need the\nmodule `io.neow3j:contract`. See the [Quickstart](README.md#quickstart) section on how to import it. \nBefore you calling the `ContractManagement` contract, we need to compile our contract code. \n\n```java\nCompilationUnit res = new Compiler().compile(HelloWorldSmartContract.class.getCanonicalName(), substitutions);\n```\n\nThen we can pass the resulting NEF and manifest to `ContractManagement` by calling its `deploy` method. \n\n```java\nAccountSigner signer = AccountSigner.none(deploymentAccount);\nHash160 owner = deploymentAccount.getScriptHash();\nTransactionBuilder builder = new ContractManagement(neow3j)\n        .deploy(res.getNefFile(), res.getManifest(), hash160(owner))\n        .signers(signer);\nHash256 txHash = builder.sign().send().getSendRawTransaction().getHash();\nAwait.waitUntilTransactionIsExecuted(txHash, neow3j);\n```\n\nNote that we're also passing `hash160(owner)` to the `ContractManagement`'s `deploy` method as a parameter. That\nparameter will be passed to the `_deploy` method of your contract, so you can use it to configure your contract at time\nof deployment. The `ContractManagement` contract will deploy your contract and then call the `_deploy` method on it.\nYou can add this method to your contract by annotating a method with `@OnDeployment` (see\n[here](neo-n3/smart_contract_development/devpack.md#_deploy)). Here's an example for such a method.\n\n```java\n@OnDeployment\npublic static void deploy(Object data, boolean update) {\n        if (!update) {\n                Storage.put(ctx, OWNER_KEY, (Hash160) data);\n        }\n}\n```\n\nAbove we passed `hash160(owner)` as a deploy parameter, but, if you want to pass multiple parameters use\n`ContractParameter.array(...)` and add all parameters to it.\n\nFinally, To get the newly deployed contract's hash you can execute the code below. The hash depends on the sender of the\ndeploy transaction, the NEF checksum and the contract's name. The hash does not change even if you update the contract\nin the future.\n\n```java\nHash160 contractHash = SmartContract.getContractHash(\n        a.getScriptHash(), \n        nefFile.getCheckSumAsInteger(), \n        manifest.getName());\n```", "doc_id": "4de8561e-4e67-47ec-a453-fd8013ae3477", "embedding": null, "doc_hash": "3c91e5984fa41f5ee1bac01ad896983eae055b2ed7a6b437695d91c4f7bcc37f", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/deployment"}, "node_info": {"start": 0, "end": 2843, "_node_type": "1"}, "relationships": {"1": "66a53c20d00acf0dceaaddbcf22285b6963dd513"}}, "__type__": "1"}, "a26457d2-c153-42af-a57c-28c418eda62a": {"__data__": {"text": "# Devpack\n\nThe neow3j devpack provides classes, methods and annotations required for writing smart contracts in Java. For example,\nif your smart contract needs to verify a transaction signature, the devpack offers a method for that. Or, if you want to\npublish detailed information about the contract in its manifest, you can use one of the devpack's annotations.\nThe following sections describe the devpack's API, frequently used concepts and constructs. Not every class is described\nhere. Use the [Javadocs](https://javadoc.io/doc/io.neow3j/devpack/latest/overview-summary.html) as well to get an\noverview of the devpacks capabilities.\n\n## Hashes\n\nAs with neow3j SDK, the devpack provides special types for hashes. Use `Hash160` for contract and account hashes and\n`Hash256` for transaction and block hashes. The underlying stack item of both of these types is a NeoVM byte string,\nthus, changing to and from `ByteString` doesn't require an actual conversion. When you use the constructor\n`Hash160(ByteString value)` or `Hash256(ByteString value)` the devpack does **not** check if the value is a valid hash\nwith correct size. Use `Hash160.isValid(Object o)` or `Hash256.isValid(Object o)` on an object if you need to check for\nvalidity.\n\n## Storage\n\nEvery smart contract on the Neo blockchain has its own key-value store. This storage is accessed via a so called storage\ncontext. The context is the gateway to the contract's storage. This additional concept between you and the storage\npotentially allows you to pass the context to another contract, which could then access your contract's storage\ndirectly. In the devpack, the storage context is represented by the `io.neow3j.devpack.StorageContext` class. \n\nMethods for accessing storage are on the classes `io.neow3j.devpack.Storage` and `io.neow3j.devpack.StorageMap`. They\nprovide many `put` and `get` methods for different key and return types. Because the storage context is always required\nfor such method calls, it makes sense to retrieve the `StorageContext` once with `Storage.getStorageContext()`, store it\nin a static class variable and reuse it every time the storage is accessed. This might save GAS in contract invocations.\nUse the `StorageMap` if you want to reserve a segment of the storage for a specific purpose. Storage maps use a prefix\nthat is appended to every key used in that map. \n\nNote that the size for storage keys and values is limited to 64 bytes and 65535 bytes, respectively. When using a\n`StorageMap` the map prefix counts towards the key size.\n\n## Smart Contract Interfaces\n\nYour smart contract can call other contracts via the `Contract.call(Hash160 scriptHash, String method, byte callFlags,\nObject[] arguments)` method in an adhoc way. But, there is a another way of doing this, and that is by using what we\ncall a contract interface. In the context of the devpack, contract interfaces are classes that provide an\ninterface to deployed contracts. The word interface is not used in Java's meaning but in the meaning of a gateway to the\nactual contract instance on the blockchain. For example, the `NeoToken` class holds all methods of the native NeoToken\ncontract and allows you to call it from within your own smart contract. These contract interface classes are located in\nthe `io.neow3j.devpack.contracts` package. All of Neo's native contracts are represented here, plus some other classes,\ne.g., interfaces to access token contracts.\n\nIf you need to call a method of a native contract, e.g., get the hash of the latest block, use the corresponding method on the contract interface.\n\n<!-- An overview of the functionality of the native contracts is described in ... -->\n\n```java\nHash256 blockHash = new LedgerContract().currentHash();\n```\n\nAdditionally to the existing contract interfaces, you can define your own. The requirements for a valid contract", "doc_id": "a26457d2-c153-42af-a57c-28c418eda62a", "embedding": null, "doc_hash": "58a6ba482ed43d67354b6e0303074694ed2f1359431ca04421226f748a2c7200", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 0, "end": 3846, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "3": "966cbc1d-e11c-4f9f-8201-aa0be08f49ae"}}, "__type__": "1"}, "966cbc1d-e11c-4f9f-8201-aa0be08f49ae": {"__data__": {"text": "to the existing contract interfaces, you can define your own. The requirements for a valid contract interface\nare:\n- extend the `io.neow3j.devpack.contracts.ContractInterface` class.\n- create a constructor with a single `Hash160` parameter and call `super()` without any further logic in the constructor.\n\nA minimal version of a custom contract interface looks like this.\n\n```java\nclass MyContract extends ContractInterface {\n    MyContract(Hash160 scriptHash) {\n        super(scriptHash);\n    }\n}\n```\n\nAlternatively, if the contract hash is known at compile time, a constructor with a single `String` parameter can be used:\n\n```java\nclass MyContract extends ContractInterface {\n    MyContract(String scriptHash) {\n        super(scriptHash);\n    }\n}\n```\n\nIn this minimal form the class only provides access to the contract's hash via the `getHash()` method inherited from\n`ContractInterface`. Any other contract methods have to be added according to their signature in the contract's\nmanifest. Assuming the contract has a method `findElement` with a `ByteString` parameter and a `ByteString` return type,\nyou would need to add the following method. Note that the method needs to be native. A method body implementation is not necessary, since this is only an interface to an actual contract instance on the blockchain.\n\n```java\npublic native ByteString findElement(ByteString key);\n```\n\nThe devpack provides abstract contract interfaces that already contain the API of contracts following a standard. For example,\nif you want to establish a contract interface to a fungible token contract, you can extend the `FungibleToken` class. All methods\nof a NEP-17 token contract are already available and you can just add extra methods that your contract might hold (simply add them as shown before).\n\n```java\nclass MyTokenContract extends FungibleToken {\n    public MyTokenContract(String contractHash) {\n        super(contractHash);\n    }\n\n    public native int someCustomMethod(String arg);\n\n}\n```\n\nIn case your fungible token contract does not hold any other methods, or you don't require them, you can simply initialize a `FungibleToken` with your token contract hash and access its NEP-17 methods.\n\n```java\nnew FungibleToken(\"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\").balanceOf(owner);\n```\n\nCheckout the `io.neow3j.devpack.contracts` package for more such contract interfaces.\n\n## Native Contracts\n\n### StdLib\n\nWhen using the `StdLib.jsonSerialize(Object o)` method for a value or object that contains a byte string or byte array\n(e.g., `ByteString`, `byte[]`, or `Hash160`) make sure to first Base64-encoded that value. Otherwise, it will be\ninterpreted as a UTF-8 encoded string, which might lead to errors. It will not be presented in the JSON as a hexadecimal\nstring.\n\n### Neo Name Service\n\nThe Neo Name Service contract (NNS) is technically not a native contract but is maintained and issued by the Neo\nFoundation. The devpack provides a contract interface to the NNS with the class\n`io.neow3j.devpack.contracts.NeoNameService`. Note, that this class does not have a fixed script hash, since it is not a\nnative contract. If you want to use the class in your contract you can simply initialize an instance of it.\n\n```java\nnew NeoNameService(\"a92fbe5bf164170a624474841485b20b45a26047\");\n```\n\nMake sure that the script hash is equal to the current script hash of the NNS contract.\n\n## Events\n\nNeo smart contracts can fire events. They appear, for example, in the", "doc_id": "966cbc1d-e11c-4f9f-8201-aa0be08f49ae", "embedding": null, "doc_hash": "d3864151c0d215c7b4e637bc4b53b215b27165512680d526d777ff12af7b200a", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 3763, "end": 7228, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "2": "a26457d2-c153-42af-a57c-28c418eda62a", "3": "035c7bec-3343-42b7-9b8c-13afcbd2b225"}}, "__type__": "1"}, "035c7bec-3343-42b7-9b8c-13afcbd2b225": {"__data__": {"text": "smart contracts can fire events. They appear, for example, in the [application\nlogs](https://docs.neo.org/v3/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html) of a contract\ninvocation. The events that a contract can fire are listed in its manifest. The JSON below shows how this could look.\n\n```json\n\"events\": [\n    {\n        \"name\": \"transfer\",\n        \"parameters\": [\n            {\n                \"name\": \"arg1\",\n                \"type\": \"Integer\"\n            },\n            {\n                \"name\": \"arg2\",\n                \"type\": \"String\"\n            }\n        ]\n    }\n]\n```\n\nAn event is defined by its name and the state parameters that are passed with it. The devpack allows you to define and\nuse events with up to 16 state parameters. The classes representing these events are located in the\n[`io.neow3j.devpack.events`](https://javadoc.io/doc/io.neow3j/devpack/latest/io/neow3j/devpack/events/package-summary.html)\npackage. \n\nEvents are declared in static contract variables as shown in the following code snippet. They cannot\nbe declared inside of a method body or in classes that are not the main contract class.\n\n```java\n    @DisplayName(\"mint\")\n    private static Event1Arg<Integer> onMint;\n\n    @DisplayName(\"transfer\")\n    private static Event2Args<Integer, String> onTransfer;\n```\n\nIt is not necessary to initialize the variables with an actual instance. This is counter-intuitive for a Java developer,\nbut, the variables are not meant to have an actual value. They are only definitions, with a name and the number and\ntypes of state parameters. All event classes follow the naming schema `Event[n]Args`, where `n` is the number of state\nparameters the event takes. The `@DisplayName` annotation is optional and can be used to define a different name for the\nevent than the variable name. If it is not used, the variable name is the event name.\n\nOnce an event is declared, it can then be used in contract methods by calling its `fire(...)` method. \n\n```java\n    public static boolean transfer() throws Exception {\n        ...\n        onTransfer.fire(transferAmount, \"tokens transferred!\");\n        ...\n        return true;\n    }\n```\n\n>**Note:** Events are not allowed to be fired in the [verify method](neo-n3/smart_contract_development/devpack.md?id=verify).\n\n## Special Contract Methods\n\nThere are a couple of contract methods that have a special purpose. The neow3j devpack provides annotations to mark them\nin your contract code. Using the annotations will make it easier to spot the methods in your code and allows the\ncompiler to make checks that help finding errors in these methods faster.\n\n### _deploy\n\nThis method is called right after a contract is deployed or updated. More precisely, the *ContractManamgement* contract\nwill call this method on your contract when you invoke `deploy` or `update` on the *ContractManagement*. You can use it\nto setup and configure your contract at deploy-time. \nUse the devpack's `io.neow3j.devpack.annotations.OnDeployment` annotation on the designated method. Your method's name\ndoes", "doc_id": "035c7bec-3343-42b7-9b8c-13afcbd2b225", "embedding": null, "doc_hash": "c13473cbc9d00c764573a651d1d1af3deb42aee83b46e5294ddb1d56df8dac94", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 7258, "end": 10321, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "2": "966cbc1d-e11c-4f9f-8201-aa0be08f49ae", "3": "3f8576d1-bbc9-4c8d-aba8-945af6d08907"}}, "__type__": "1"}, "3f8576d1-bbc9-4c8d-aba8-945af6d08907": {"__data__": {"text": "annotation on the designated method. Your method's name\ndoes not have to be `_deploy`, but can be anything. Although, in the contract manifest it will show up under the name\n`_deploy`. The method's signature must be `void methodName(Object data, boolean isUpdate)`.\n\n### verify\n\nThis method is called if your contract is invoked with the verification trigger. For example, when a contract owns\ntokens and you issue a withdraw transaction that transfers those tokens to another account/contract, the contract\nis called with the verification trigger. In other words the contract's `verify` method is called. Most often the\n`verify` method contains a simple witness check on the owner of the contract.\nUse the devpack's `io.neow3j.devpack.annotations.OnVerification` annotation on the designated method. Your method's name\ndoes not have to be `verify`, but can be anything. Although, in the contract manifest it will show up under the name\n`verify`. The method must return a boolean and can have any number of parameters.\n\n>**Note:** The Neo node does not allow the verify method to fire any event. The compiler will throw an exception\n>if an event is fired within this method.\n\n### onNEP17Payment\n\nYour contract requires this method to be able to receive tokens from NEP-17 contracts, i.e., fungible tokens like NEO or\nGAS. Any contract that follows the NEP-17 standard will call this method on your contract if some of its tokens are\ntransferred to your contract. \nUse the devpack's `io.neow3j.devpack.annotations.OnNEP17Payment` annotation on the designated method. Your method's name\ndoes not have to be `onNEP17Payment`, but can be anything. Although, in the contract manifest it will show up under the\nname `onNEP17Payment`. The method's signature must be `void methodName(Hash160 sender, int amount, Object data)`.\n\n### onNEP11Payment\n\nYour contract requires this method to be able to receive tokens from NEP-17 contracts, i.e., non-fungible tokens. Any\ncontract that follows the NEP-11 standard will call this method on your contract if some of its tokens are transferred\nto your contract. Use the devpack's `io.neow3j.devpack.annotations.OnNEP11Payment` annotation on the designated method.\nYour method's name does not have to be `onNEP11Payment`, but can be anything. Although, in the contract manifest it will\nshow up under the name `onNEP11Payment`. The method's signature must be `void methodName(Hash160 sender, int amount,\nByteString tokenId, Object data)`.\n\n\n## Permissions, Trusts, Groups, Safe Methods, and Call Flags\n\nThe basis of authorization on the Neo blockchain are cryptographic signatures. Users attach signatures to contract\ninvocations to proove that they are authorized to perform certain actions in a smart contract. This authorization can be\nmisused by smart contracts. A malicious contract can use the signature to perform a token transfer unintended by the\nuser. To prevent that, Neo applies witness scopes that allow the user to restrict the use of their witness/signature. By\ndefault a witness is only valid in the contract that is the entry point of an invocation. The scope can be extended to\nspecific contracts, groups of contracts or to a global scope.\n\n### Groups\n\nSmart contract groups are designated by an EC public key. The contract manifest contains the affiliation of a contract\nwith a group as shown below.\n\n```json\n\"groups\": [\n    {\n        \"pubkey\":\"033a4d051b04b7fc0230d2b1aaedfd5a84be279a5361a7358db665ad7857787f1b\",\n       ", "doc_id": "3f8576d1-bbc9-4c8d-aba8-945af6d08907", "embedding": null, "doc_hash": "88bd61bfb2e6e298612b4a2608201055ce1259444ae9da02560eab4b975e1d24", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 10324, "end": 13795, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "2": "035c7bec-3343-42b7-9b8c-13afcbd2b225", "3": "82abd7ff-888b-47c0-9d5f-686477bdd751"}}, "__type__": "1"}, "82abd7ff-888b-47c0-9d5f-686477bdd751": {"__data__": {"text": "       \"signature\":\"DEA2r+67KlQc/dIvEdOXMIGCm7x+V5vXT5ZRtGRwOlDxBuqzur/OU8OSitiYn5f6tQywog8FziGp5S2VI2/5Wnxj\"\n    }\n],\n```\n\nThe public key identifies the group and the signature is proof that the originator of the contract was in possession of\nthe corresponding private key material. The signature is created from the contract's hash and needs to be\nBase64-encoded. Thus, if you want to add your contract to a group you first need to compile it, calculate the contract\nhash, create the signature over that hash and extend the contract manifest with the group's public key and the produced\nsignature. Note, that the contract hash depends on the account used to deploy the contract. I.e., you need to know in\nadvance which account you will use to deploy the contract. To retrieve the contract hash and produce the signature you\ncan use the neow3j SDK as in the following example code.\n\n```java\nHash160 sender = ...;\nContractManifest manifest = ...;\nNefFile nefFile = ...;\nHash160 contractHash = SmartContract.calcContractHash(sender, nefFile.getCheckSumAsInteger(), manifest.getName());\n\nECKeyPair keyPair = ...;\nSign.SignatureData sig = Sign.signMessage(contractHash.toArray(), keyPair);\nString encSig = Base64.encode(sig.getConcatenated());\n```\n\nYou will have to modify the contract manifest JSON file and add the produced encoded signature and the public\nkey to the `groups` section manually.\n\n### Permissions \n\nBesides witness scopes, smart contract security is improved by a system of permissions and trusts that a contract\ndeveloper can define for her contract. Permissions define which contracts your contract is permitted to call. They are\nactively enforced, meaning that once defined in the contract's manifest, any calls from within your contract to\ncontracts and methods not contained in the permissions will fail. To define permissions use the \n`io.neow3j.devpack.annotations.Permission` annotation on class level of your contract class. By default your contract\nwill have no permissions.\n\nThe following is an example configuration. It allows your contract to call any method of the contract\nwith hash `726cb6e0cd8628a1350a611384688911ab75f51b`, the methods `getBalance` and `transfer` of the contract with hash\n`d2a4cff31913016155e38e474a2c06d08be276cf`, and the method `commonMethodName` of any contract in the group with public key\n`033a4d051b04b7fc0230d2b1aaedfd5a8  4be279a5361a7358db665ad7857787f1b`.\n\n```java\n@Permission(contract = \"726cb6e0cd8628a1350a611384688911ab75f51b\", methods = \"*\")\n@Permission(contract = \"d2a4cff31913016155e38e474a2c06d08be276cf\", methods = {\"getBalance\", \"transfer\"})\n@Permission(contract = \"033a4d051b04b7fc0230d2b1aaedfd5a84be279a5361a7358db665ad7857787f1b\", methods = \"commonMethodName\")\npublic class MyContract {\n```\n\nTo set a permission for a native contract, you can instead use the `nativeContract` field in the annotation together with\nthe enum `NativeContract`. As you may have noticed, the second permission in the example code above refers to the native\nGasToken contract. As it is a native contract, you can instead also use the following annotation, which results in the\nexact same outcome.\n\n```java\n@Permission(nativeContract = NativeContract.GasToken,", "doc_id": "82abd7ff-888b-47c0-9d5f-686477bdd751", "embedding": null, "doc_hash": "8de4e303c91d8da1ab3fa6011273fa3cb4ff8ee1123ce7d1c7a1c62cb84cb6cb", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 13849, "end": 17060, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "2": "3f8576d1-bbc9-4c8d-aba8-945af6d08907", "3": "19f5d0e9-8607-48e7-899c-7aff4f1d76c5"}}, "__type__": "1"}, "19f5d0e9-8607-48e7-899c-7aff4f1d76c5": {"__data__": {"text": "= NativeContract.GasToken, methods = {\"getBalance\", \"transfer\"})\n```\n\nIf you want to allow your contract to call any other contract, use the wildcard permission \n`@Permission(contract = \"*\", methods = \"*\")`.\n\n### Trusts\n\nTrusts define what contracts can call your contract, but, in contrast to permissions they are not enforeced. I.e., you\ncannot deter other contracts from calling yours. Trusts are only a definition that wallets and other dApps can use to\ntell the user when a contract is invoked that doesn't trust the calling contract.\n\nBy default the trust property is empty, i.e., no contracts are trusted. Use the `io.neow3j.devpack.annotations.Trust`\nannotation to define trusts like in the following example. The first entry is based on a single smart contract hash and\nthe second one on a public key of a contract group.\n\n```java\n@Trust(contract = \"acce6fd80d44e1796aa0c2c625e9e4e0ce39efc0\")\n@Trust(contract = \"033a4d051b04b7fc0230d2b1aaedfd5a84be279a5361a7358db665ad7857787f1b\")\npublic class MyContract {\n```\n\nTo trust a native contract, instead of adding its hash to the `contract` attribute, you can use the `nativeContract`\nattribute the same way as it is used in the `@Permission` annotation as specified\n[above](neo-n3/smart_contract_development/devpack.md#Permissions). In the following example, the native StdLib is trusted:\n\n```java\n@Trust(nativeContract = NativeContract.StdLib)\npublic class MyContract {\n```\n\nIf you want to trust any contract use the wildcard option `@Trust(\"*\")`.\n\n### Safe Methods\n\nMethods that don't change state of a contract and don't fire events can be safely invoked in a read-only mode. To signal\nthat to the Neo network, you can use the `io.neow3j.devpack.annotations.Safe` annotation on method-level. The method\nwill be tagged as safe in the contract's manifest.\n\nIf your `@Safe`-annotate a method does change state or fire an event, invocations of that method will fail.\n\n\n### Call Flags\n\nCall flags allow you to restrict the actions of a contract you call within your contract. For example, you can deny\nfurther calls to other contracts, changing blockchain state, or firing events.\n\nThe possible flags are defined and docuemented in `io.neow3j.devpack.constants.CallFlags` and are ment to be used in the\n`call` method of the `io.neow3j.devpack.Contract` class.\n\n\n## Placeholder Substitution\n\nThe devpack offers the possibility to substitute strings used in a contract before compiling it. Any string literal in\nthe main contract class can be substituted, even annotation values. Currently, this feature is not supported in\nauxiliary classes used in the contract class.\n\nYou have to compile the contract programmatically to be able to use this feature. Checkout\n[this](neo-n3/smart_contract_development/setup_and_compilation.md#programmatic-compilation) section for information on\nhow to compile programmatically. The `Compiler` provides a `compile` method that takes a `Map<String, String>`\nparameter. This is the substitution map that tells the compiler which strings are placeholder strings (the map's keys)\nand which values they should be replaced with (the map's values). The placeholders in the contract must follow the\nsyntax `\"${*}\"` where `*` will be used as key in the substitution map.\n\n```java\n    Map<String, String> substitutionMap = new HashMap<>();\n    substitutionMap.put(\"contract_hash\", \"da65b600f7124ce6c79950c1772a36403104f2be\");\n  ", "doc_id": "19f5d0e9-8607-48e7-899c-7aff4f1d76c5", "embedding": null, "doc_hash": "c8f87ddb1a8c254f1c49f8b35069adb4c827d42e23de448d852e6fcf44cfb3ce", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 17036, "end": 20439, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "2": "82abd7ff-888b-47c0-9d5f-686477bdd751", "3": "9b635f6d-9215-483f-a506-571996729e12"}}, "__type__": "1"}, "9b635f6d-9215-483f-a506-571996729e12": {"__data__": {"text": "   substitutionMap.put(\"event_name\", \"TheEvent\");\n    ...\n    CompilationUnit res = new Compiler().compile(YourSmartContract.class.getName(), substitutionMap);\n```\n\nHere's an example of how a smart contract using placeholders might look.\n\n```java\n    @Permission(contract = \"${contract_hash}\", methods = \"*\")\n    static class PlaceholderSubstitutionContract {\n\n        static final String aString = \"${a_string}\";\n        static final Hash160 OWNER = StringLiteralHelper.addressToScriptHash(\"${account_address}\");\n\n        @DisplayName(\"${event_name}\")\n        static Event1Arg<String> event;\n\n        public static String method() {\n            String s2 = \"${another_string}\";\n            return s1 + s2;\n        }\n\n        public static Hash160 getOwner() {\n            return OWNER;\n        }\n    }\n```\n\n> **Note:** If the placeholder is not specified in the substitution map when compiling, the string present\nin the contract will be used (given that this value is not restricted to any format). For example, `\"${account_address}\"`\nmust be replaced with a valid address for the compilation not to fail, while `event` will be called `\"${event_name}\"` if\n`\"event_name\"` is not a key in the substitution map and thus no substitution is provided.\n\nThe placeholder substitution feature works in contract tests too. See\n[this](neo-n3/smart_contract_development/testing.md#deployment-configuration) section for more information.\n\n\n\n<!-- ## Annotations\n\nThe devpack provides several annotations to be used on smart contract classes and methods. All annotation are contained\nin the [`io.neow3j.devpack.annotations`](https://javadoc.io/doc/io.neow3j/devpack/latest/io/neow3j/devpack/annotations/package-summary.html)\npackage. Check the Javadocs for more information on what the annotations do. -->\n", "doc_id": "9b635f6d-9215-483f-a506-571996729e12", "embedding": null, "doc_hash": "c6e8d2421e39fa96e884c872317d2dc6b51fe3756be4261d596ac1f580614a0d", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}, "node_info": {"start": 20463, "end": 22256, "_node_type": "1"}, "relationships": {"1": "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6", "2": "19f5d0e9-8607-48e7-899c-7aff4f1d76c5"}}, "__type__": "1"}, "50e81b5b-7b14-4d8f-8448-2bd011c1c7c3": {"__data__": {"text": "# Smart Contract Development\n\nNeo stands out from other blockchains in that it allows you to implement smart contracts in several well known\nprogramming languages like C#, Go and JavaScript. Neow3j contributes to this and adds support for Java as a smart\ncontract language. The part of neow3j concerned with smart contract development is termed **neow3j devpack**. \nIt is composed of three modules.\n\n- The `io.neow3j:devpack` is the module that your smart contract project will depend on. It is a Java library that\n  contains Neo-specific annotations, methods, and classes required for contract development. You will use it in your\n  contract, e.g., to fetch information about the current block, or to send out a notification. The API of this module is\n  described in the [Devpack](neo-n3/smart_contract_development/devpack.md) section.\n- The `io.neow3j:compiler` contains the compiler that produces NeoVm code from Java classes. You can use it \n  programmatically, by invoking it in a Java program, but, most likely you will not need to access it directly.\n- The `io.neow3j:gradle-plugin` implements a Gradle plugin that you apply to your smart contract project and offers a\n  simple Gradle task for contract compilation\n\n## Java for the Neo Virtual Machine\n\nIt is important to understand that, even though, on the surface you will be writing Java code, the generated bytecode \nand the executing virtual machine are not related to Java. Your smart contract code is compiled to byte code that runs\non the Neo Virtual Machine (NeoVM) and not on the Java Virtual Machine (JVM). Because of the differences between the JVM\nand the NeoVM, the programming experience with Java for Neo is different. We, therefore, define Java for Neo as a Java\nflavour or subset and name it NeowJava. Section [NeowJava](neo-n3/smart_contract_development/neowjava.md) discusses\nin which ways NeowJava deviates from Java and what the pitfalls are when using NeowJava.\n\n## Development Environment\n\nYou can write smart contracts in any editor or IDE you want. There are some environments, namely Visual Studio Code\nand IntelliJ IDEA, that provide you with extra support for an improved developer experience.\n\nWith [**Visual Studio Code**](https://code.visualstudio.com/) you can make use of the [Neo Blockchain\nToolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit) extension, that is\ndeveloped by [ngdenterprise](https://ngdenterprise.com/). It allows contract debugging, easy contract setup, and\nprovides a GUI for manipulating a local neo-express instance.  Next to the Toolkit, we suggest to install the [Java\nExtension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) and the [Gradle Extension\nPack](https://marketplace.visualstudio.com/items?itemName=richardwillis.vscode-gradle-extension-pack).\n\n[**IntelliJ**](https://www.jetbrains.com/idea/download/) is obviously a good choice because it has already great support\nfor Java.  A [Neo plugin](https://plugins.jetbrains.com/plugin/17195-neo) has been implemented for IntelliJ too. It\nprovides basic control over neo-express via IntelliJ's UI. For usage instructions and a short video visit the plugin's \n[github page](https://github.com/irshadnilam/intellij-neo). Debugging smart contracts is not possible with IntelliJ.\n\n## Requirements\n\n- A local installation of the [**Java 8 SDK**](https://adoptopenjdk.net/) (or higher) is required for smart contract\n  compilation. \n\n- For running smart contract tests you need to have", "doc_id": "50e81b5b-7b14-4d8f-8448-2bd011c1c7c3", "embedding": null, "doc_hash": "ac0f6745c05777b4fd0ee1c45cb3a477dcd75fc6baf95b28cd168ca9a0449fcc", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/introduction"}, "node_info": {"start": 0, "end": 3530, "_node_type": "1"}, "relationships": {"1": "160a3ee76bdf4783ebdf54434ea15874fcbcfca2", "3": "54c9ba18-d2ac-4cb5-a134-2e9f72a0366f"}}, "__type__": "1"}, "54c9ba18-d2ac-4cb5-a134-2e9f72a0366f": {"__data__": {"text": "for smart contract\n  compilation. \n\n- For running smart contract tests you need to have [**Docker**](https://www.docker.com/products/docker-desktop) installed locally.\n", "doc_id": "54c9ba18-d2ac-4cb5-a134-2e9f72a0366f", "embedding": null, "doc_hash": "e25e4fcc5587cd1e9813e14bc8db63fdc0b1ef1f81ee9d9fe518fe7544479e5f", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/introduction"}, "node_info": {"start": 3443, "end": 3611, "_node_type": "1"}, "relationships": {"1": "160a3ee76bdf4783ebdf54434ea15874fcbcfca2", "2": "50e81b5b-7b14-4d8f-8448-2bd011c1c7c3"}}, "__type__": "1"}, "7e1cafe7-543b-4305-ab37-e05b72cc1dd4": {"__data__": {"text": "# NeowJava\n\nThis section discusses the possibilities and restrictions that exist when implementing a smart contract in Java. Even\nthough we are coding in Java the produced byte code is not meant for the JVM but for the NeoVM. Therefore, only a subset\nof Java can be used and we call that subset NeowJava.\n\nBlockchain programmers need to be careful with computational resources because every step in their code costs GAS.\nYou should **avoid using Java's standard library** and any library not explicitly implemented for smart contract\npurposes, because such libraries might contain unsupported code or code that is costly for execution on a blockchain.\n\n## Types\n\nThe NeoVM works with types called stack items - the NeoVM is a stack machine. The neow3j devpack maps Java types to\nthose stack item types. The following table shows the devpack's most important Java types and their correspdongin NeoVM\nstack items.\n\n| Java type                      | Stack Item Type | Description |\n|--------------------------------|-----------------|-------------|\n| `int`/`Integer`                | Integer         | Java integers have a corresponding integer stack item on the NeoVM. The difference to normal Java integers is the range. On the NeoVM the integer range is not restricted to [2<sup>-31</sup>, 2<sup>31</sup>-1]. We discuss integers in more depth below. |   \n| `boolean`/`Boolean`            | Boolean         | Java's `boolean` maps to the Boolean stack item on the NeoVM. But, the NeoVM also uses Integer stack items in the range [0,1] for boolean values. Don't worry if you get an Integer stack item as a return value even if your contract method returns a `boolean`. |\n| `byte[]`/`Byte[]`              | Buffer          | Java's byte array maps to a stack item called Buffer on the NeoVM. This is a mutable byte aray.\n| `io.neow3j.devpack.ByteString` | ByteString      | This is an immutable byte array. The NeoVM ByteString type does not have a corresponding type in Java, thus, `ByteString` was introduced by the devpack. |\n| `java.lang.String`             | ByteString      | The Java `String` is represented as a UTF-8 encoded byte array on the NeoVM. The stack item type is ByteString. |\n| `io.neow3j.devpack.Map`        | Map             | The NeoVM has a dedicated stack item type for maps. The devpack provides a corresponding `Map` type. Note, that it is not possible to use `java.utils.Map` instead. | \n| `io.neow3j.devpack.List`       | Array           | The NeoVM has a dedicated stack item type for arrays that are not byte arrays. The devpack provides a corresponding `List` type . Note, that it's not possible to use `java.utils.List` instead. |\n| Arrays like `int[]`            | Array           | Instead of using `List` you can also use array types, e.g., `String[]`. They are also represented with the Array stack item type. |\n| Custom Objects                 | Array           | All other classes, or rather instances of these classes, are represented as Arrays on the NeoVM. A more detailed explanation is given below. |\n\n### Byte Arrays\n\nThe", "doc_id": "7e1cafe7-543b-4305-ab37-e05b72cc1dd4", "embedding": null, "doc_hash": "e91696149c229f37bebb6fde7b99ddee8e3decbd850cb4bae661316ecb47402d", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}, "node_info": {"start": 0, "end": 3064, "_node_type": "1"}, "relationships": {"1": "b44d415a65f4ba2652c65ce92f311a43dc6459c0", "3": "2f6a07ed-69aa-4573-9ae7-4019289536cc"}}, "__type__": "1"}, "2f6a07ed-69aa-4573-9ae7-4019289536cc": {"__data__": {"text": "more detailed explanation is given below. |\n\n### Byte Arrays\n\nThe NeoVM has two stack items for containing byte arrays. The ByteString is an immutable byte array while Buffer is\nmutable. We recommend to use the devpack's `ByteString` by default and only use `byte[]` (which maps to the Buffer\nstack item) if you need mutability. For example, for method parameters `ByteString` is the right choice, making it clear\nthat the method will not have any side effects on the argument. You can convert `ByteString` to `byte[]` with the\n`toByteArray()` method and the other way around by using the `ByteString(byte[] buffer)` constructor.\n\n### Integers\n\nYou can use all Java integer types, including their wrapper classes. That is, `byte`, `short`, `char`, `int`, `long` and\n`Byte`, `Short`, `Character`, `Integer`, `Long`. Because the NeoVM knows only one integer stack item, the neow3j\ncompiler treats all these types equally. All of them have the same size restrictions. Think of all integer types as\nBigIntegers. This means that Java's definition of an `int` having a size of 32 bit does not hold true for Neo smart\ncontracts. The limit is much higher, more precisely, an integer on the NeoVM can take up to 32 bytes. We recommend using\n`int`/`Integer` everywhere and ignoring `short`, `char`, and `long`. `Byte` and `byte` are useful for indicating small\nvalues, like constants.\n\nWith the above said, the question arises: \"How do I initialize large integers?\". Java will deny your attempts of\ninitializing an `int` with values outside of the range [2<sup>-31</sup>, 2<sup>31</sup>-1]. To circumvent this you can\nuse the `StringLiteralHelper` and it's method `stringToInt(String number)` that allows you to initialize any integer\nvalue.\n\nNote that when casting an `int` variable to a `byte`, the underlying value is not truncated from 32 to 8 bit. Merely the\nsuperficial Java type canges from `int` to `byte`. The same applies if you use wrapper type methods like\n`Integer.byteValue()`. The devpack provides two helper methods `Helper.asByte(int value)` and \n`Helper.asSignedByte(int value)` that you can to convert `int` to `byte` if you know that the integer value fits into a \nbyte. The methods do not truncate the argument, but throw an exception if the value doesn't fit into a byte.\n\n### Strings\n\nIntuitively you can use Java's `String` type for strings. But be aware that on the NeoVM a `String` is not represented\nas an object, but as a UTF8-encoded ByteString stack item. This means that you cannot make use of `String` instance\nmethods like `contains()` or `indexOf()`. The exception is the `length()` method, which works as expected. Checkout the\n`io.neow3j.devpack.Helper` and `io.neow3j.devpack.StringLiteralHelper` clases which offer of String related helper\nmethods.\n\nNeow3j supports string concatenation with the `+` operator but mixing in other types is not. For example, \n`\"hello\" + \"world\"` works, but `\"hello\" + 5` does not.\n\n### Arrays\n\nYou can use arrays as usual. You will only face some restrictions with multi-dimensional arrays. When initialising a\nmulti-dimensional array you cannot specify the length of all other dimensions but the first one.  Thus, the expression\n`new String[10][4]` will fail, but `new String[10][]` will compile. To set the second dimensions you could cycle\nthrough the first dimension and initialize each slot as follows.\n\n```java\nString[][] arr = new String[10][];\nfor (int i = 0; i < arr.length; i++) {\n    arr[i] =", "doc_id": "2f6a07ed-69aa-4573-9ae7-4019289536cc", "embedding": null, "doc_hash": "b5c2947f6808f5d1988f2b34d5081357ceb5d1a05277d11f1a1597de26d62444", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}, "node_info": {"start": 3008, "end": 6470, "_node_type": "1"}, "relationships": {"1": "b44d415a65f4ba2652c65ce92f311a43dc6459c0", "2": "7e1cafe7-543b-4305-ab37-e05b72cc1dd4", "3": "039bc1c5-46eb-40b3-a314-d71d04759c0b"}}, "__type__": "1"}, "039bc1c5-46eb-40b3-a314-d71d04759c0b": {"__data__": {"text": "0; i < arr.length; i++) {\n    arr[i] = new String[4];\n}\n```\n\nDirect instantiatetion with specific values also works. \n\n```java\nString[][] arr = new String[][]{null, new String[]{\"hello\", \" \", \"world\", \"!\"}};\n```\n\nIn any case, the compiler will tell you if what you try works or not. You can use `io.neow3j.devpack.List` instead of\nJava arrays. It provides more convenience than plain arrays. It is represented as the same stack item on the NeoVM as an\narray and is, therefore, not more expensive.\n\n### Objects\n\nInstances of all other devpack classes not mentioned in the above table, and also the classes you define yourself, are\nrepresented as Arrays on the NeoVM. The NeoVM array contains the object's field variables in the order they appear in\nthe class definition. I.e., in the following example the `lowNote` variable has index 0 and `highNote` has index 1 in\nthe array that represents an instance of this class on the NeoVM.\n\n```java\npublic class Bongo {\n\n    public String lowNote;\n    public String highNote;\n\n    public Bongo(String lowNote, String highNote) {\n        this.lowNote = lowNote;\n        this.highNote = highNote;\n    }\n}\n```\n\nThe devpack itself defines classes that can be instantiated. For example, calling `Storage.getStorageContext()`\nreturns a `StorageContrext` instance. On that object you can call instance methods like `createMap(...)`.  Another\nexample is the `io.neow3j.devpack.neo.Transaction` class. After retrieving a `Transaction` object with\n`LedgerContract.getTransaction(Hash256 txId)` all its properties are available to the contract class through public\ninstance variables on the object. Of course, we could add getter and setter methods to the classes instead of accessing\nthe members directly, but that incurs a higher GAS fee when executing the contract, because of the extra method call.\n\n\n\n## Contract Class\n\nNeowJava smart contracts consist of one main contract class and possibly other classes containing functionality used in\nthe main class. We refer to this main class as the *contract class* and to the others as *auxiliary classes*. Only\nmethods of the contract class are accessible and show up in the contract manifest if they are public.\n\nEverything on the contract class is static. The concept of creating an instance of it and deploying it on the blockchain\ndoes not apply here. The contract's state is not saved in its class variables but accessed through a storage API. So\nrather think of the contract class as being the managing entity handling incoming invocations, contract storage and\nevent emission but not actually holding state itself. This is different, for example, to Solidity where the class\nvariables hold the contract state. Auxiliary classes can be purely static classes too, basically serving as a collection\nof functions which the contract class makes use of. But, they can also be classes in an object-oriented sense that get\ninstantiated in the contract class and provide structure and functionality to contract's data.\n\nWhen compiling a smart contract, the contract class is the input to the compilation. The compiler will also look for and\ncompile any auxiliary classes used in the contract class.\n\n### Contract Methods\n\nAll methods on the contract class need to be static. If you mark a method with the `public` modifier it will show up in the\ncontract's manifest and is callable from the outside. Any other access modifier will make the method invisible to\nthe outside, i.e., it's not necessary to use `private`. Of course, you can use the `private` modifier to make it\nexplicit and to prohibit any auxiliary class to call it. Making methods in an auxiliary class public will not put them\ninto the contract manifest. If these classes are in the same package as your contract class it's enough to use no\naccess modifier. If they are in", "doc_id": "039bc1c5-46eb-40b3-a314-d71d04759c0b", "embedding": null, "doc_hash": "944226307498ab09d76cf9145b5a27546647de7d1aa039851d89000506a1c4a4", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}, "node_info": {"start": 6500, "end": 10315, "_node_type": "1"}, "relationships": {"1": "b44d415a65f4ba2652c65ce92f311a43dc6459c0", "2": "2f6a07ed-69aa-4573-9ae7-4019289536cc", "3": "e0bc4299-6336-4452-a548-358551e473e2"}}, "__type__": "1"}, "e0bc4299-6336-4452-a548-358551e473e2": {"__data__": {"text": "package as your contract class it's enough to use no\naccess modifier. If they are in another package they need to be public as with normal Java.\n\n### Contract Variables (Static Variables)\n\nAll variables on the contract class have to be static. Note that these variables do not represent the contract's state.\nTheir values are not written into the contract's storage. The NeoVM initializes them in every invocation of the\ncontract meaning that you cannot use them to store state. Changes to static variables are lost as soon as an invocations\nfinishes. \n\nYou can apply the `final` keyword to a static variable if you want to prohibit changes to its value. But, be aware that\nstatic, final variables that are initialised with a constant value (i.e., not derived from a method call) will be inlined\nwherever they are used. For example, the following variable will not be reused throughout the rest of the contract but\nits value will be copied to all the script locations where it is used.\n```java\nstatic final int initialSupply = 200_000_000;\n```\nThis is fine with small values but might become GAS-intensive with very large values, like long strings, that are used\noften in the smart contract. It bloats the resulting script and incurs higher GAS costs when invoking the contracts\nmethods that use the variable multiple times.\n\nIn classes that are not the main contract class, the only static variables that are currently supported are final static\nvariables that are initialized with a constant value, as `initialSupply` above. Other static variables will lead to a\ncompielr error. \n\nYou can initialize contract variables with constant values (e.g., string literals) but also with a return value of a\nmethod call as shown in the following examples. As mentioned above, the variables that are dynamically initialised, are\nnot inlined when marking them with `final`.\n\n```java\nstatic int initialSupply = 200_000_000;\nstatic String totalSupplyKey = \"totalSupply\";\nstatic StorageContext sc = Storage.getStorageContext();\nstatic StorageMap assetMap = new StorageMap(sc, \"assets\");\n```\n\nNeow3j also supports the static initializer clause as shown below. But, the instance initializer, i.e., the same\nclause without the `static` keyword is not supported.\n\n```java\nstatic final String assetPrefix;\nstatic final StorageContext sc;\n\nstatic {\n    assetPrefix = \"asset\";\n    sc = Storage.getStorageContext();\n}\n```\n\nFor convenience in variable initialization, the devpack offers the `StringLiteralHelper`.  As its name suggests, it\noperates on string literals. It offers methods that take string literals and convert them to byte arrays, script hashes,\nor integers. The following example uses it to set the owner script hash using the owner account's address.\n\n```java\nstatic final Hash160 owner = StringLiteralHelper.addressToScriptHash(\"NZNos2WqTbu5oCgyfss9kUJgBXJqhuYAaj\");\n```\n\n## Exceptions\n\nNeow3j supports exceptions and try-catch blocks, but restricts you to using the `java.lang.Exception` class. You can\neither use the constructor with a string argument (`new Exception(String message)`) or the one without any arguments\n(`new Exception()`). In case no message is provided, a default message `\"error\"` is passed.\n\nThere is a special case for assertions described [below](#assertions), otherwise, no other exception types are\npermitted. This restriction implies that you cannot have multiple catch clauses that each handle a different\nexception type.\n\nIf you want to get the exception message in case of a caught exception, you can use the method `getMessage()` as in\nthe following example:\n\n```java\ntry {\n    throw new Exception(\"Not allowed.\");\n} catch (Exception e) {\n    e.getMessage(); // equals \"Not allowed.\"\n}\n```\n\n##", "doc_id": "e0bc4299-6336-4452-a548-358551e473e2", "embedding": null, "doc_hash": "e134818b2b5cf1a0913b5d930912ad4dfd3b9d7ae5918ded6efcc4fc4dbbfd69", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}, "node_info": {"start": 10274, "end": 13994, "_node_type": "1"}, "relationships": {"1": "b44d415a65f4ba2652c65ce92f311a43dc6459c0", "2": "039bc1c5-46eb-40b3-a314-d71d04759c0b", "3": "cb837cc8-115e-4473-859c-21866668422a"}}, "__type__": "1"}, "cb837cc8-115e-4473-859c-21866668422a": {"__data__": {"text": "e.getMessage(); // equals \"Not allowed.\"\n}\n```\n\n## Assertions\n\nNeow3j supports Java's `assert` statement. It is converted to the `ASSERT` opcode on the Neo VM, which is not catchable.\nIf an assertion fails, the Neo VM faults and the transaction reverts. The opcode on the Neo VM does not consume a message.\nHence, passing a message to Java's `assert` is not allowed, and will result in a `CompilerException` at compile time.\n\n```java\nassert getRemainingBalance() >= 0;\n```\n\n\n## Type Comparison\n\nAs you know, in Java, the `==` operator compares primitive data types by value and complex type by reference. In\nNeowJava behaves differently. When using `==` the following rules apply.\n\n- The types that compare by value are: `int`, `Integer`, `boolean`, `Boolean`, `String`,\n`ByteString`, `Hash160`, `Hash256`, `ECPoint`, `Iterator.Struct`.  \n\n- The types that compare by reference are:`byte[]`, `List`, `Map`, arrays (e.g., `int[]`), custom objects. \n\nIf a devpack class provides an `equals` method, you can be assured it is a comparison by value.\nTake `String` as an example. Using `==` to compare two strings in NeowJava will result in a comparison by value. Using\n`equals` does the same.\n\n## Type Checking\n\nThe neow3j compiler supports the `instanceof` keyword for the following types:\n`int`, `Integer`,`boolean`, `Boolean`, `byte[]`, `String`, `ByteString`, `Hash160`, `Hash256`, `ECPoint`, `Map`, `List`,\n`Notification`, `InteropInterface`, `Iterator.Struct`, arrays.\n\nCustom objects are not supported with the `instanceof` operation. This is because the NeoVM doesn't carry the type\ninformation with custom objects on the stack. They are represented as array stack items without type information. The neow3j\ncompiler will throw an error if you use `instanceof` with an unsupported type.\n\n## Structs\n\nFor a collection of specific types you can create a class with field variables of different types. On the NeoVM this will\nrefer to a struct stack item. In order to use a class as a struct, you can use the annotation `io.neow3j.devpack.annotations.Struct`.\nYou can then set up a constructor that sets its values. Have a look at the following example:\n\n```java\n@Struct\npublic static class ExampleStruct {\n    public int id;\n    public Hash160 owner;\n    public Map<String, Integer> customValues;\n\n    ExampleStruct(int id, Hash160 owner, Map<String, Integer> customValues) {\n        this.id = id;\n        this.owner = owner;\n        this.customValues = customValues;\n    }\n}\n```\n\n## Inheritance\n\nEvery Java class that doesn't explicitly extend another class is a subclass of `Object` and has access to its methods\neven without overwriting them. However, NeowJava prohibits usage of `Object` methods like `toString` or `equals`\nif they are not explicitly overridden.\n\nNeow3j supports the inheritance of struct classes, i.e., classes annotated with `@Struct`. You can use the keyword `extends`\nto inherit field variables from another struct. In the following example, by instantiating a `Car`, the created struct on the\nNeoVM will hold both variables `brand` and `model`.\n\n```java\nclass Vehicle {\n    public String brand;\n\n    Vehicle(String brand) {\n        this.brand = brand;\n    }\n}\n\nclass Car extends Vehicle {\n    public String model;\n\n    Car(String brand, String", "doc_id": "cb837cc8-115e-4473-859c-21866668422a", "embedding": null, "doc_hash": "fd7c7f79cdd29028cdb23f740ead429c1baccd7441655c302554858cdc7130cc", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}, "node_info": {"start": 14019, "end": 17288, "_node_type": "1"}, "relationships": {"1": "b44d415a65f4ba2652c65ce92f311a43dc6459c0", "2": "e0bc4299-6336-4452-a548-358551e473e2", "3": "af36e4ac-dac6-4da7-8f10-aabac4c2555b"}}, "__type__": "1"}, "af36e4ac-dac6-4da7-8f10-aabac4c2555b": {"__data__": {"text": "{\n    public String model;\n\n    Car(String brand, String model) {\n        super(brand);\n        this.model = model;\n    }\n```\n\nFurther support for inheritance with the `extends` keyword is in development. It currently only with structs and Contract\nInterfaces as described [here](neo-n3/smart_contract_development/devpack.md#smart-contract-interfaces).\n\n## Unsupported Features\n\nFirst of all, the neow3j compiler is based on Java 8. Thus, any Java features added in higher versions are not\nsupported. Other features that Java 8 includes but the neow3j compiler does not support are:\n\n- Floating point numbers, i.e., `float`/`Float` and `double`/`Double`. Floating point numbers are not supported by the\n    NeoVM and can, thus, not be used in NeowJava smart contracts. Everything happens with integers.\n\n- Enums\n\n- Lambda Expressions\n\n- Interfaces\n", "doc_id": "af36e4ac-dac6-4da7-8f10-aabac4c2555b", "embedding": null, "doc_hash": "5191dd3e093e217cde48480d4159f7f326dfade92d4d0d672242815c3b2dfe88", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}, "node_info": {"start": 17278, "end": 18126, "_node_type": "1"}, "relationships": {"1": "b44d415a65f4ba2652c65ce92f311a43dc6459c0", "2": "cb837cc8-115e-4473-859c-21866668422a"}}, "__type__": "1"}, "6cbbc852-9ef5-4c7c-b1a3-154780aefa59": {"__data__": {"text": "# Setup & Compilation\n\nThere are two ways of getting started with neow3j. You can either setup your local environment or you can use GitHub\ncodespaces to get started quickly. If you want to set up your local environment you can just skip the GitHub Codespace\nsetup steps.\n\nUse the [boilerplate](https://github.com/neow3j/neow3j-boilerplate) repository for a basic project setup on which you\ncan build your contracts. You can use it as a template to create your own project repository.\n\n<img src=\"https://axlabs.fra1.digitaloceanspaces.com/neow3j-files%2Ftutorials%2F20230330_neow3j-boilerplate-1-clone-from-template.gif\" width=\"80%\"/>\n\nIf you want to develop locally, skip the next section and continue [here](#the-build-file).\n\n## Setup in GitHub Codespace\n\nYou can get started quickly by using our boilerplate in a GitHub codespace. This allows you to get started quickly\nwithout having to setup and manage your local environment. Just follow the following few steps:\n\nStart a new codespace in your newly created boilerplate repository. This might take a while because it downloads and\nruns multiple images.\n\n<img src=\"https://axlabs.fra1.digitaloceanspaces.com/neow3j-files%2Ftutorials%2F20230330_neow3j-boilerplate-2-start-codespace.gif\" width=\"80%\"/>\n\nOnce the VSCode IDE is showing up in your browser, you should see the `main` and `test` source sets. The `main`\ncontains a smart contract class, and `test` holds a file to test it. Once a green arrow shows up in the test class, the\nIDE is fully loaded and ready.\n\n> **Note:** There is also a third sourceset `deploy` present which is used for productive deployment configurations.\n\n<img src=\"https://axlabs.fra1.digitaloceanspaces.com/neow3j-files%2Ftutorials%2F20230330_neow3j-boilerplate-3-show-main-test-sourcesets.gif\" width=\"80%\"/>\n\nNow, you can run the tests by clicking on the green arrow. The test class uses neow3j's test framework which runs a\nNeo node in the background where your smart contract is deployed and invoked.\n\n<img src=\"https://axlabs.fra1.digitaloceanspaces.com/neow3j-files%2Ftutorials%2F20230330_neow3j-boilerplate-4-run-tests.gif\" width=\"80%\"/>\n\n## The Build File\n\nThe neow3j devpack uses [Gradle](https://gradle.org/) as its build tool. Thus, the structure of a smart contract project\nfollows the Gradle convention. This section discusses the contents of the `build.gradle` file as found in the\nboilerplate project.\n\nThe first block in the file applies the necessary Gradle plugins. Neow3j provides its own Gradle plugin that allows\ncontract compilation via a Gradle task called `neow3jCompile`. The Java plugin is also necessary.\n\n```groovy\nplugins {\n    id 'java'\n    id 'io.neow3j.gradle-plugin' version \"3.21.1\"\n}\n```\n\nThen follows the definition of the project's organization and version.\n\n```groovy\ngroup 'com.axlabs'\nversion '1.0-SNAPSHOT'\n```\n\nNext, we have to set the Java version compatibility, which needs to be Java 1.8 in order for the neow3j compiler to\nwork.\n\n```groovy\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n```\n\nThen, we define the artifact repositories in which to find code dependencies. This is by default Maven Central.", "doc_id": "6cbbc852-9ef5-4c7c-b1a3-154780aefa59", "embedding": null, "doc_hash": "29a1251b101ddde2021e4191b0e5ae175e1aab4ee4c9229bb59b3d13b4f6d67c", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/setup_and_compilation"}, "node_info": {"start": 0, "end": 3138, "_node_type": "1"}, "relationships": {"1": "36ad17f3a41b4149ccd6b58800a832bca7f71228", "3": "9df4d9c5-77bc-4dfd-9c4b-5301a23687b3"}}, "__type__": "1"}, "9df4d9c5-77bc-4dfd-9c4b-5301a23687b3": {"__data__": {"text": "repositories in which to find code dependencies. This is by default Maven Central. Neow3j\nartifacts are published there. \n\n```groovy\nrepositories {\n    mavenCentral()\n}\n```\n\nAn extra source set is established next. It is meant for code concerning contract deployment. This adds a source set\n`deploy` additional to `main` and `test`. \n\n```groovy\nsourceSets {\n    deploy {\n        compileClasspath += sourceSets.main.output\n        runtimeClasspath += sourceSets.main.output\n    }\n}\n```\n\nThen we need to define the dependencies, which are `io.neow3j:devpack` for writing smart contract code, `io.neow3j:devpack-test` and JUnit 5 for wirting contract tests, and `io.neow3j:compiler` for compiling contracts inside of Java code.\n\n```groovy\ndependencies {\n    implementation 'io.neow3j:devpack:3.21.1'\n\n    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0',\n            'io.neow3j:devpack-test:3.21.1',\n            'ch.qos.logback:logback-classic:1.2.11'\n\n    deployImplementation 'io.neow3j:compiler:3.21.1',\n            'ch.qos.logback:logback-classic:1.2.11'\n}\n```\n\nFor JUnit 5 to work with Gradle, we need to add the following block.\n\n```groovy\ntasks.withType(Test) {\n    useJUnitPlatform()\n}\n```\n\nLastly, there is a block called `neow3jCompiler`, which configures the `neow3jCompile` Gradle task. The contract that we\nwant to compile is declared by its fully qualified name with the `className` property. There are two hidden properties\nnot used here. The first is the `debug` property, which determines if the compilation should produce debugging\ninforamtion for the Neo Debugger. It is true by default. The second is `outputDir`, which specifies a directory for\nplacing the compilation results. It is `build/neow3j` by default.\n\n```groovy\nneow3jCompiler {\n    className = \"com.axlabs.boilerplate.HelloWorldSmartContract\"\n}\n```\n\n## Compilation\n\nContract compilation can happen in two ways. Either you use neow3j's Gradle task or you invoke the compiler from within\nJava code. The next two sections explain the two approaches.\n\n### Using Gradle\n\nWith the setup from above, we can now turn to the compilation. The boilerplate project contains a very simple contract.\nTo compile it, run `./gradlew neow3jCompile` from the project's root folder. This will compile the smart contract class,\nand output a NEF file, contract manifest, and debugging information file to the output directory `build/neow3j`. The NEF\nfile is the contract binary containing the NeoVm code. The contract manifest defines the properties of the contract, for\nexample, what methods are available for invocation. The debugging information file, ending with `.nefdbgnfo`, is\nrequired by the Neo Debugger to debug your contract. The NEF and the manifest are the artifacts that we need for\ndeployment.\n\n\n### Programmatic Compilation\n\nThe neow3j compiler can be invoked from within another Java program. For this, we require the `io.neow3j:compiler`\nmodule which is already included in the boilerplate project.\n\nIn the class `com.axlabs.boilerplate.Deployment`, you can see an example usage of the", "doc_id": "9df4d9c5-77bc-4dfd-9c4b-5301a23687b3", "embedding": null, "doc_hash": "0f782aaae0567b14dff43bacf6c3679aaa31b24149731b7179a8dacdd9be3420", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/setup_and_compilation"}, "node_info": {"start": 3069, "end": 6139, "_node_type": "1"}, "relationships": {"1": "36ad17f3a41b4149ccd6b58800a832bca7f71228", "2": "6cbbc852-9ef5-4c7c-b1a3-154780aefa59", "3": "f22f525e-ae1f-48a0-a5df-457ff160afec"}}, "__type__": "1"}, "f22f525e-ae1f-48a0-a5df-457ff160afec": {"__data__": {"text": "you can see an example usage of the neow3j compiler.\n\n```java\nCompilationUnit res = new Compiler().compile(\n               HelloWorldSmartContract.class.getCanonicalName(),\n               substitutions);\n```\n\nThe compile requires the fully qualified name of the contract class to compile and will look for that class file in the\nproject. After compilation the results are accessible in the `CompilationUnit`. It contains the NEF file, contract\nmanifest, and other information.\n\n```java\nNefFile nef = result.getNefFile();\nContractManifest manifest = result.getManifest();\n```\n\nIf you want the compiler to produce debugging information, you need to tell the neow3j compiler where the sources of the\nsmart contract are. It doesn't matter if the contract's Java files are located in the same project or somewhere else.\n\n```java\nFile sourceDirectory = new File(\"/path/to/the/contract/src/java/main\");\nDirectorySourceContainer sourceContainer = new DirectorySourceContainer(sourceDirectory, false);\nCompilationUnit result = new Compiler()\n        .compile(\"com.axlabs.boilerplate.HelloWorldSmartContract\", Arrays.asList(sourceContainer));\nDebugInfo debugInfo = result.getDebugInfo();\n```\n", "doc_id": "f22f525e-ae1f-48a0-a5df-457ff160afec", "embedding": null, "doc_hash": "c18d58229e5d745bea6327236f4c410d037617689bc59deac86271fc8f551bd0", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/setup_and_compilation"}, "node_info": {"start": 6174, "end": 7356, "_node_type": "1"}, "relationships": {"1": "36ad17f3a41b4149ccd6b58800a832bca7f71228", "2": "9df4d9c5-77bc-4dfd-9c4b-5301a23687b3"}}, "__type__": "1"}, "82dbb0a2-ee22-46a3-b0a4-1687ca2e4e27": {"__data__": {"text": "# Testing\n\nThoroughly testing a smart contract requires deploying it on a running Neo instance and invoking its methods possibly\nwith a specific chain setup. Neow3j offers a test library that allows convenient smart contract testing on top of JUnit.\nThis library lives in the `io.neow3j:devpack-test` module.\n\nAfter setting up a smart contract project with Gradle as described in the\n[Setup](neo-n3/smart_contract_development/setup_and_compilation.md) guide you are also setup for writing contract tests.\n\nCheckout the [boilerplate repository](https://github.com/neow3j/neow3j-boilerplate) for a simple example of a contract test class.\n\n## Test Configuration\n\nA contract test must be annotated with `@ContractTest`. Besides adding JUnit-related functionality it also allows you to\nconfigure the test. Here's an example of how this might look:\n\n```java\n@ContractTest(contracts = HelloWorldSmartContractTest.class, blockTime = 1)\npublic class HelloWorldSmartContractTest {\n```\n\n**Contracts**\n\nMost importantly, you need to specify the contracts under test via the `contracts` property. The specified contracts will\nbe automatically compiled and deployed before all tests in this test class.\n\n**Block Time**\n\nSmart contract tests run on an underlyig Neo blockchain implementation that produces blocks in a fixed time interval. You\ncan change that interval with the `blockTime` property.\n\n**Batch File**\n\nSome Neo blockchain implementations, like neo-express, have a **batch** functionality that allows you to execute a\nseries of commands that alter the blockchain state before running it. You can, thereby, initialize the blockchain to a\ndesired state before running the tests. Place the batch file in the *resources* directory (i.e., *src/test/resources*)\nand set the name of the file in the `batchFile` property. The batch file is applied once before all tests.\n\nCheckout the official neo-express\n[documentation](https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md#neoxp-batch) on how to\nwrite a batch file for neo-express.\n\n**Checkpoint File**\n\nSome Neo blockchain implementations, like neo-express, have a **checkpoint** functionality that allows you to load a\nblockchain state - a checkpoint - that was previously exported from another blockchain instance. You can use this\nfunctionality in tests by applying such a checkpoint before tests are run. The blockchain will then start running\nstarting at the state of the checkpoint.  Place the checkpoint file in the *resources* directory (i.e.,\n*src/test/resources*) and set the name of the file in the `checkpoint` property. The checkpoint file is applied once\nbefore all tests. If a batch file is also configured, the checkpoint is applied first.\n\nCheckout the official neo-express\n[documentation](https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md#neoxp-checkpoint) on\nhow to generate a checkpoint file for neo-express.\n\n**Chain Configuration**\n\nThe underlying blockchain instance can be configured via a configuration file. E.g., neo-express is configured via\na .neo-express configuration file that specify, among others, the key material for the consensus node, preset accounts\nand blockchain parameters. The devpack-test library contains a default neo-express configuration file with one consensus\nnode and an account that controls the consensus node's private key. You can use a custom configuration by adding a\nconfiguration file to the *resources* directory (i.e., *src/test/resources*) and set the name of the file in the\n`neoxpConfig` property. The default configuration will be overwritten. As a template for the file you can use the\nlibrary's default neo-express config", "doc_id": "82dbb0a2-ee22-46a3-b0a4-1687ca2e4e27", "embedding": null, "doc_hash": "72d42549de51bcaecc5a61e3bf125f5c360d885149541af5e2ea758d3bb3555a", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/testing"}, "node_info": {"start": 0, "end": 3691, "_node_type": "1"}, "relationships": {"1": "6028c92ec26a27eaa2ba7c360864163dd7ff9b90", "3": "edf9eca5-7111-41fd-bab5-edc46ee073bb"}}, "__type__": "1"}, "edf9eca5-7111-41fd-bab5-edc46ee073bb": {"__data__": {"text": "As a template for the file you can use the\nlibrary's default neo-express config file\n[here](https://github.com/neow3j/neow3j/blob/master-3.x/test-tools/src/main/resources/default.neo-express).\n\nCheckout the official neo-express\n[documentation](https://github.com/neo-project/neo-express/blob/master/docs/settings.md) on what settings can be used in\na neo-express config file.\n\n## Test Extension\n\nNext to the `@ContractTest` annotation you have to add the `ContractTestExtension` to your test class. It is a JUnit 5\ntest extension that hooks into the before and after stages of the test class. It configures and starts the test\nblockchain, applies batche and checkpoint files, compiles and deploys your contract, and tears everything down after all\ntests were run.\n\n```java\n    @RegisterExtension\n    private static ContractTestExtension ext = new ContractTestExtension();\n```\n\nThe `ContractTestExtension` has a second constructor that takes an instance of `TestBlockchain`. This provides\nflexbility for the underlying Neo blockchain implementation used for the tests. Currently only one implementation of\n`TestBlockchain` exists. It uses neo-express in a docker container. In the future other implementations could be added,\ne.g., for running tests directly on the testnet but with limited capabilities compared to a neo-express instance.\n\nThe `ContractTestExtension` provides several methods to control the blockchain instance. You can halt, resume, and\nfast-forward block production, create new accounts or retrieve the genesis accounts with its associated private keys.\nFurthermore, it provides access to a `Neow3j` configured to do RPC method calls to the underlying blockchain and access\nto the `SmartContract` objects representing the deployed contracts. You could retrieve both in a setup method before\nall tests and set them as static variables on your test class.\n\n```java\n    @BeforeAll\n    public static void setUp() {\n        neow3j = ext.getNeow3j();\n        contract = ext.getDeployedContract(HelloWorldSmartContract.class);\n    }\n```\n\n## Deployment Configuration\n\nThe `devpack-test` allows you to configure the deployment of you smart contracts under test by adding a static\nconfiguration method for each contract. The methods must be annotated with `@DeployConfig` and the annotation's value\nmust be set with the class of the contract this configuration is meant for. The method must return `DeployConfiguration`\nand take either no or an optional argument of type `DeployContext`. Configuration happens on the `DeployConfiguration`\nobject. Currently, it allows you to set the deployment parameter, mappings for placeholder string substitution\n(described [here](neo-n3/smart_contract_development/devpack.md#placeholder-substitution)), and the signer of the deploy\ntransaction (single and multi-sig accounts).\nThe `DeployContext` parameter allows you to access contracts that are preceeding in the deployment order. It also\nprovides the deployment transaction hashes.\n\n```java\n    @DeployConfig(ExampleContract.class)\n    public static DeployConfiguration config2(DeployContext ctx) {\n        DeployConfiguration config = new DeployConfiguration();\n        SmartContract sc = ctx.getDeployedContract(AnotherContract.class);\n        config.setDeployParam(ContractParameter.hash160(sc.getScriptHash()));\n\n        config.setSubstitution(\"owner_address\", \"NXXazKH39yNFWWZF5MJ8tEN98VYHwzn7g3\");\n        config.setSubstitution(\"contract_hash\",", "doc_id": "edf9eca5-7111-41fd-bab5-edc46ee073bb", "embedding": null, "doc_hash": "b63a7d833428a32fb93b112721599482c52ee635b23f437e463ee63bb5cb5420", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/testing"}, "node_info": {"start": 3625, "end": 7076, "_node_type": "1"}, "relationships": {"1": "6028c92ec26a27eaa2ba7c360864163dd7ff9b90", "2": "82dbb0a2-ee22-46a3-b0a4-1687ca2e4e27", "3": "82cc673c-7e46-4ee4-b15e-776b54483e51"}}, "__type__": "1"}, "82cc673c-7e46-4ee4-b15e-776b54483e51": {"__data__": {"text": "       config.setSubstitution(\"contract_hash\", \"ef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\");\n\n        config.setSigner(AccountSigner.calledByEntry(anAccount));\n    }\n```\n\nThe example shows, that you can access other contracts under test if they are preceeding in the order of deployment.\nThis allows you to grab the contract hash and use it as a deployment parameter in another contract.\n\nNote, that you can set only one deployment parameter. That is according to the standardized `_deploy` method in smart\ncontracts. It takes only one deployment parameter. Thus, if you want to pass multiple parameters, pack them into an\narray parameter.\n\nAlso note, if you use a `setUp` method annotated with `@BeforeAll`, beware that deployment configuration methods are\ninvoked before such a `setUp` method. Thus, things that you set up there, will not be available yet in the configuration\nmethods. If you rely on accounts in the configuration method, set them up in the static constructor of your test class.\n", "doc_id": "82cc673c-7e46-4ee4-b15e-776b54483e51", "embedding": null, "doc_hash": "297e3a8d6f2abcd740c34cce13ae225b6985bc549f07ce6cf13adf7369088238", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/testing"}, "node_info": {"start": 7097, "end": 8095, "_node_type": "1"}, "relationships": {"1": "6028c92ec26a27eaa2ba7c360864163dd7ff9b90", "2": "edf9eca5-7111-41fd-bab5-edc46ee073bb"}}, "__type__": "1"}, "e9355459-9eb3-4dbb-b756-8b6694997927": {"__data__": {"text": "# Meme Governance dApp\n\nThis project should demonstrate how a decentralized application (dApp) could be built on the Neo blockchain, using Java and React/NextJS.\n\nThe dApp implements a governance protocol, where users can:\n\n- Create a proposal to add a new meme.\n- Create a proposal to remove an existing meme.\n- Vote on an existing proposal (either to add or remove) within a specified timeframe.\n- Execute a proposal that was accepted in the vote.\n- Get the currently persisted memes.\n\n> Note: Any user holding GAS can participate in the Meme Governance Protocol.\n\n## Contracts\n\nThe GitHub repo with the Smart Contracts presented in this section can be found here:\n\n> https://github.com/AxLabs/meme-governance-contracts\n\nThere are two contracts, the `MemeContract` and the `GovernanceContract`. The `GovernanceContract` is the owner of the\n`MemeContract` and as such is the only entitled entity that can change the state of the `MemeContract`.\n\nThe `GovernanceContract` has a built-in voting mechanism, so that every change on the `MemeContract` has to pass a vote. Users can vote in favor or\nagainst a proposal. For a proposal to be accepted, the following criteria must be met:\n- the voting time frame needs to be over (see [getVotingTime](#getVotingTime)).\n- the proposal needs a minimum of votes in favor (see [getMinVotesInFavor](#getMinVotesInFavor)).\n- the proposal needs to have more votes in favor than against.\n\nWhen a proposal passes its vote, it can be executed (see [execute](#execute)) and thus persisted on the \u00b4MemeContract\u00b4.\n\n### Specification GovernanceContract\n\n#### getMemeContract\n\n```javascript\n{\n  \"name\": \"getMemeContract\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Hash160\"\n}\n```\nReturns the address of the underlying `MemeContract`.\n\n#### getVotingTime\n\n```javascript\n{\n  \"name\": \"getVotingTime\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Integer\"\n}\n```\nReturns the timeframe (number of blocks) to vote for a proposal after it was created.\n\n#### getMinVotesInFavor\n\n```javascript\n{\n  \"name\": \"getMinVotesInFavor\",\n  \"safe\": true,\n  \"parameters\": [],\n  \"returntype\": \"Integer\"\n}\n```\nGets the minimum votes in favor for a proposal to be accepted.\n\n#### proposeNewMeme\n\n```javascript\n{\n  \"name\": \"proposeNewMeme\",\n  \"safe\": false,\n  \"parameters\": [\n      {\n          \"name\": \"memeId\", // A unique id/name for this new meme.\n          \"type\": \"String\"\n      },\n      {\n          \"name\": \"description\", // A description of the meme.\n          \"type\": \"String\"\n      },\n      {\n          \"name\": \"url\", // An image url that points directly to the meme file.\n          \"type\": \"String\"\n      },\n      {\n          \"name\": \"imageHash\", // The SHA-256 hash of the meme file found under the provided url.\n          \"type\": \"ByteArray\"\n      }\n  ],\n  \"returntype\": \"Void\"\n}\n```\nCreates a proposal to add", "doc_id": "e9355459-9eb3-4dbb-b756-8b6694997927", "embedding": null, "doc_hash": "96b36b51861028dae7a4c708f9d1dfda1f8f4241ff4caa4da555e46d765b1844", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/meme_governance_dapp"}, "node_info": {"start": 0, "end": 2841, "_node_type": "1"}, "relationships": {"1": "677697a5ea0bf6e42ad17f33bac5435e517a95b4", "3": "d400d31f-71dc-4b8d-9838-6cf264f1e3f6"}}, "__type__": "1"}, "d400d31f-71dc-4b8d-9838-6cf264f1e3f6": {"__data__": {"text": "\"Void\"\n}\n```\nCreates a proposal to add a new meme.\n\n**Requirements:**\n- no open (voting in progress) proposal with the same `memeId`.\n- no closed **and** accepted proposal with the same `memeId`. (A closed proposal that was not accepted can be overwritten.)\n- no meme with the same `memeId`.\n\n#### proposeRemoval\n\n```javascript\n{\n  \"name\": \"proposeRemoval\",\n  \"safe\": false,\n  \"parameters\": [\n      {\n          \"name\": \"memeId\", // The id/name of an existing meme to be removed.\n          \"type\": \"String\"\n      }\n  ],\n  \"returntype\": \"Void\"\n}\n```\nCreates a proposal to remove an existing meme.\n\n**Requirements:**\n- an existing meme with the same `memeId`.\n\n#### vote\n\n```javascript\n{\n  \"name\": \"vote\",\n  \"safe\": false,\n  \"parameters\": [\n      {\n          \"name\": \"memeId\", // The id/name of the meme that this proposal is about.\n          \"type\": \"String\"\n      },\n      {\n          \"name\": \"voter\", // The voter's script hash.\n          \"type\": \"Hash160\"\n      },\n      {\n          \"name\": \"inFavor\", // True to vote in favor and false to vote against a proposal.\n          \"type\": \"Boolean\"\n      }\n  ],\n  \"returntype\": \"Void\"\n}\n```\nVote for a proposal (in favor or against).\n\n**Requirements:**\n- an open proposal for the given `memeId`.\n- the voter is required to be a signer (with called by entry scope).\n\n#### execute\n\n```javascript\n{\n  \"name\": \"execute\",\n  \"safe\": false,\n  \"parameters\": [\n      {\n          \"name\": \"memeId\", // The meme id/name that the proposal was about.\n          \"type\": \"String\"\n      }\n  ],\n  \"returntype\": \"Boolean\"\n}\n```\nExecutes a finished proposal. If the proposal was about to create a meme, the meme with its properties is created on the `MemeContract`. If the\nproposal was about removing a meme, the meme is removed from the `MemeContract`.\n\n> **Note**: If the proposal was not accepted, it's removed.\n\n**Requirements:**\n- a closed proposal for the specified `memeId`.\n\n#### getProposals\n\n```javascript\n{\n  \"name\": \"getProposals\",\n  \"safe\": true,\n  \"parameters\": [\n      {\n          \"name\": \"startingIndex\", // The first index in the iterator on the contract.\n          \"type\": \"Integer\"\n      }\n  ],\n  \"returntype\": \"Array\"\n}\n```\nGets a list of proposals that have not been executed. The returned array holds the proposals in the structure explained in detail [below](#meme-and-proposal-structure).\n\n> **Note:** The returned list size is limited. This method is intended to be used by RPCs, since those are not made for processing large data,\n> the deployed contract has a limit of 100 entries in the returned array. If the contract holds", "doc_id": "d400d31f-71dc-4b8d-9838-6cf264f1e3f6", "embedding": null, "doc_hash": "769d5a3285d21abbeda34843363b4d945619c2407b72e0f6232753c84a3f06f6", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/meme_governance_dapp"}, "node_info": {"start": 2808, "end": 5385, "_node_type": "1"}, "relationships": {"1": "677697a5ea0bf6e42ad17f33bac5435e517a95b4", "2": "e9355459-9eb3-4dbb-b756-8b6694997927", "3": "15624c73-1263-4fde-85f2-746806264ed1"}}, "__type__": "1"}, "15624c73-1263-4fde-85f2-746806264ed1": {"__data__": {"text": "contract has a limit of 100 entries in the returned array. If the contract holds more than 100 proposals, you can get the data by\n> making multiple calls and increasing `startingIndex` by 100 for each RPC. E.g. use 0 to get the first 100 proposals.\n\n### Specification MemeContract\n\n#### getMeme\n\n```javascript\n{\n  \"name\": \"getMeme\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"memeId\", // The id/name of the meme.\n      \"type\": \"String\"\n    }\n  ],\n  \"returntype\": \"Array\"\n}\n```\nReturns the meme properties of the specified meme id. The returned array is explained in detail [below](#meme-and-proposal-structure).\n\n#### getMemes\n\n```javascript\n{\n  \"name\": \"getMemes\",\n  \"safe\": true,\n  \"parameters\": [\n    {\n      \"name\": \"startingIndex\", // The first index in the iterator on the contract.\n      \"type\": \"Integer\"\n    }\n  ],\n  \"returntype\": \"Array\"\n}\n```\nGets a list of existing memes. The returned array holds the memes in the structure explained in detail [below](#meme-and-proposal-structure).\n\n> **Note:** The starting index is handled the same way as in the function `getProposals` (see [above](#getProposals)).\n\n### Additional notes\n\nBoth contracts are linked to each other upon deployment of the governance contract. The contracts are both deployed separately. The meme\ncontract is deployed first and then the governance contract is deployed with the meme contract's hash as data parameter. Upon deploying the\ngovernance contract, the following steps are executed:\n\n- The owner on the `MemeContract` is set to the address of the `GovernanceContract`.\n- The `MemeContract` hash is set on the `GovernanceContract` for all future invocations.\n\n> **Note:** You can check whether the two contracts are correctly initialized by calling `MemeContract.getOwner()` and\n  `GovernanceContract.getMemeContract()`.  \n\n### Meme and Proposal Structure\n\nThe properties of a meme are passed in an array of the following structure:\n\n```javascript\n{\n    \"type\": \"Array\",\n    \"value\": [\n        {\n            \"name\": \"id\", // The unique id/name of the meme.\n            \"type\": \"String\"\n        },\n        {\n            \"name\": \"description\", // The description of the meme.\n            \"type\": \"String\"\n        },\n        {\n            \"name\": \"url\", // The url of the meme.\n            \"type\": \"String\"\n        },\n        {\n            \"name\": \"imageHash\", // The sha-256 hash of the image of the above url.\n            \"type\": \"ByteArray\"\n        }\n    ]\n}\n```\n\nA proposal is returned as an array of the following structure:\n```javascript\n{\n    \"type\": \"Array\",\n    \"value\": [\n        {\n            \"name\": \"meme\", // Reference to the meme that this proposal refers to (structure as", "doc_id": "15624c73-1263-4fde-85f2-746806264ed1", "embedding": null, "doc_hash": "e2fb0b923f191d37a3741dbaefae381a6b079ab3891953246ce9c93a385893e4", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/meme_governance_dapp"}, "node_info": {"start": 5354, "end": 8037, "_node_type": "1"}, "relationships": {"1": "677697a5ea0bf6e42ad17f33bac5435e517a95b4", "2": "d400d31f-71dc-4b8d-9838-6cf264f1e3f6", "3": "f476aeb5-f12c-49c1-9a9f-7009e7497b7d"}}, "__type__": "1"}, "f476aeb5-f12c-49c1-9a9f-7009e7497b7d": {"__data__": {"text": "// Reference to the meme that this proposal refers to (structure as above).\n            \"type\": \"Array\"\n        },\n        {\n            \"name\": \"create\", // Whether the proposal is about to create or remove the above meme.\n            \"type\": \"Boolean\"\n        },\n        {\n            \"name\": \"voteInProgress\", // True, if this proposal can be voted for, false, if the voting is closed.\n            \"type\": \"Boolean\"\n        },\n        {\n            \"name\": \"finalizationBlock\", // The last block number that accepts any vote.\n            \"type\": \"Integer\"\n        },\n        {\n            \"name\": \"votesInFavor\", // The number of votes in favor of the proposal.\n            \"type\": \"Integer\"\n        },\n        {\n            \"name\": \"votesAgainst\", // The number of votes against the proposal.\n            \"type\": \"Integer\"\n        }\n    ]\n}\n```\n\n## Frontend\n\nThe GitHub repo with the frontend presented in this section can be found here:\n\n> https://github.com/AxLabs/meme-governance-frontend\n\nThe frontend was built with [NextJS](https://nextjs.org/), and it's composed of:\n\n* **Landing Page:** general information about the Meme Governance dApp\n  * Served on the `/` path, e.g., `http://localhost:8080/`\n* **dApp:** the actual dApp implementation, where all actions are exposed to users\n  * Served on the `/dapp` path, e.g., `http://localhost:8080/dapp`\n  * \ud83d\ude80 **Full integration to [NeoLine](https://neoline.io/en/) browser wallet**\n\nThis project is meant to be used as a boilerplate to bootstrap projects in a fast and easy way.\n\n### Getting Started\n\nRun the following commands on your local environment:\n\n```shell\ngit clone --depth=1 https://github.com/AxLabs/meme-governance-frontend.git my-project-name\ncd my-project-name\nnpm install\n```\n\nIf you're a developer, and want to run locally in **development mode with live reload**:\n\n```shell\nnpm run dev\n```\n\nIf you want to create an **optimized production build**, then execute:\n\n```shell\nnpm run build-prod\n```\n\nTo serve the optimized production build, run:\n\n```shell\nnpm run start\n```\n", "doc_id": "f476aeb5-f12c-49c1-9a9f-7009e7497b7d", "embedding": null, "doc_hash": "6db33334cb89791b3263a9b6d7e7ccc971c42b898d25cf823dec2712662e0f4e", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/meme_governance_dapp"}, "node_info": {"start": 8036, "end": 10079, "_node_type": "1"}, "relationships": {"1": "677697a5ea0bf6e42ad17f33bac5435e517a95b4", "2": "15624c73-1263-4fde-85f2-746806264ed1"}}, "__type__": "1"}, "6af8de91-446e-4d89-8591-5d9359437486": {"__data__": {"text": "# Various Smart Contracts\n\nWe've compiled a GitHub repo with several Smart Contracts written using neow3j devpack.\n\nCheck it out:\n\n> https://github.com/neow3j/neow3j-examples-java\n\nJust to cite a few relevant examples that you can find in our [GitHub repo](https://github.com/neow3j/neow3j-examples-java):\n\n- [**NFT Smart Contract**](https://github.com/neow3j/neow3j-examples-java/blob/master/src/main/java/io/neow3j/examples/contractdevelopment/contracts/NonFungibleToken.java)\n- [**Calling another Smart Contract**](https://github.com/neow3j/neow3j-examples-java/blob/master/src/main/java/io/neow3j/examples/contractdevelopment/contracts/CallAnotherContract.java)\n- [**Fungible Token Smart Contract**](https://github.com/neow3j/neow3j-examples-java/blob/master/src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java)\n- [**How to programmatically deploy a Smart Contract**](https://github.com/neow3j/neow3j-examples-java/blob/master/src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java)\n- [**How to transfer assets from a Smart Contract**](https://github.com/neow3j/neow3j-examples-java/blob/master/src/main/java/io/neow3j/examples/contractinvoke/TransferFromContract.java)\n  - [**Smart Contract allowing owner to transfer assets from it**](https://github.com/neow3j/neow3j-examples-java/blob/master/src/main/java/io/neow3j/examples/contractdevelopment/contracts/OnVerificationContract.java)\n", "doc_id": "6af8de91-446e-4d89-8591-5d9359437486", "embedding": null, "doc_hash": "81579769b3ca54943b56614662150589afe851e604561b4ce7bf0fe6b727ce7c", "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/various_examples"}, "node_info": {"start": 0, "end": 1441, "_node_type": "1"}, "relationships": {"1": "136b8c33391a7e1b5f1958f576f1ef1bdecfdc92"}}, "__type__": "1"}, "ad9a3213-ef8d-45ab-b6fe-88857077b103": {"__data__": {"text": "---\nid: const\ntitle: Constants\n---\n\nConstants are defined and exposed as:\n\n```ts\nimport Neon from \"@cityofzion/neon-js\";\nconst nativeContractHashes = Neon.CONST.NATIVE_CONTRACT_HASH;\n\nimport { CONST } from \"@cityofzion/neon-js\";\nconst addrVersion = CONST.DEFAULT_ADDRESS_VERSION;\n```\n\nDo refer to the source code for all the constants available.\n", "doc_id": "ad9a3213-ef8d-45ab-b6fe-88857077b103", "embedding": null, "doc_hash": "3982a24a3516249eeff9e23e9b2e21dc3b0ec80e3328868ff8cbe826fa517f6a", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/const"}, "node_info": {"start": 0, "end": 346, "_node_type": "1"}, "relationships": {"1": "2816a1890f140db2081e94e33bfcc4eea7325f80"}}, "__type__": "1"}, "a8eef57f-a4b5-494a-87de-e4bbfe565fa2": {"__data__": {"text": "---\nid: logging\ntitle: Logging\n---\n\nThe logging module is exposed only as a named import :\n\n```ts\nimport { logging } from \"@cityofzion/neon-js\";\nlogging.logger.setDefaultLevel(\"info\"); // sets logging level of neon-js to 'info'\nconst apiLogger = logging.logger.getLogger(\"api\"); // gets the logger for the api package\napiLogger.setLevel(\"warn\"); // sets logging level only on the logger for the api package\n```\n\nAll logs are piped towards `stdout` and `stderr`. Each named package within\n`neon-js` will have its own logger. The initial setting for all loggers is\n'silent'.\n", "doc_id": "a8eef57f-a4b5-494a-87de-e4bbfe565fa2", "embedding": null, "doc_hash": "4a9721c2afc1af1d6a8f5857e2ceb51e7e6efb844b55cf3436e4a6ea93af674d", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/logging"}, "node_info": {"start": 0, "end": 573, "_node_type": "1"}, "relationships": {"1": "5a10e563752a8c8b9b4a6f90bf77bc9d6b0a971e"}}, "__type__": "1"}, "73b87a8d-7daa-4098-a55d-567c5eaa3494": {"__data__": {"text": "---\nid: rpc\ntitle: RPC\n---\n\nThe `rpc` module is exposed as:\n\n```js\nimport Neon, { rpc } from \"@cityofzion/neon-js\";\nconst client = Neon.create.rpcClient(URL);\nconst alternative = new rpc.RPCClient(URL);\n```\n\nThis module contains the classes and interfaces to interact with the RPC\nendpoints supplied by the current C# neo implementation. It also contains the\nclasses for `Network` and `Protocol` which are configurations that provide us\ndetails about a network.\n\n---\n\n## Classes\n\n### RPCClient\n\nThe RPC Client acts as a model for a specific NEO Node. RPC Calls are methods\nwhich external applications can interact with the NEO network easily without\nsending a transaction.\n\nIt provides built-in RPC methods for easy calling. Previous queries can be\nretrieved from the `history` property.\n\nRPC methods mirror the API reference found in the official NEO documentation.\nAll RPC methods return a Promise.\n\nDo note that method names follow the JS convention of camelCase instead of all\nlowercase.\n\n```js\n// Creates a RPCClient that will talk to http://seed1.neo.org:10332\nconst client = Neon.create.rpcClient(\"http://seed1.neo.org:10332\");\nconst alternative = new rpc.RPCClient(\"http://seed1.neo.org:10332\");\n\n// Returns block number\nclient.getBlockCount();\nclient.getRawTransaction(\n  \"88c302bd409cbb3940f6d13e5624f832eb769e346b28afcb79e05cfd13a68fec\",\n  1\n);\n\n// Custom query (used for methods not supported by implementation)\nlet query = Neon.create.query({ method: \"custommethod\" });\nclient.execute(query);\n```\n\n### Query\n\nA Query object is a simple wrapper around a request/response pair. It allows us\nto generate queries quickly without being dependent on a client.\n\nCustom queries can be created by passing in the necessary parameters.\n\nThere are also static methods to support generating supported RPC methods.\n\n```js\n// Custom query\nconst query = Neon.create.query({ method: \"newmethod\", params: [arg1, arg2] });\nconst response = query.execute(\"http://mycustomneonode.com:10332\");\n\n// Simple query creation and execution\nconst response = rpc.Query.getBlock(1).execute(\"http://seed1.neo.org:10332\");\n```\n\n### Network\n\nThe Network class is a configuration object that contains the information\nrequired to connect to a blockchain. The default networks avaialble in `neon-js`\ncan be found in the global settings object. This class can be used to add\nsupport for a private network to `neon-js`.\n\n```js\nconst newNet = new rpc.Network({ name: \"NewNet\" });\nNeon.add.network(newNet);\n\nconsole.log(Neon.settings.networks[\"NewNet\"]);\n```\n\nAccess the fields in conventional javascript notation (camelCase):\n\n```js\nclass Network {\n  public name: string;\n  public protocol: Protocol;\n  public nodes: string[];\n  public extra: { [key: string]: string };\n}\n```\n\nHowever, this class will export as a JSON that follows the C# convention in\norder to maintain compatibility with the main implementation:\n\n```ts\ninterface NetworkJSON {\n  Name: string;\n  ProtocolConfiguration: ProtocolJSON;\n  Nodes: string[];\n  ExtraConfiguration: { [key: string]: string };\n}\n```\n\nSimilarly, the constructor is compatible with the protocol files from C#. Once\nimported, proceed to follow javascript conventions.\n\n```js\nconst javascriptStyle = new rpc.Network({ name:", "doc_id": "73b87a8d-7daa-4098-a55d-567c5eaa3494", "embedding": null, "doc_hash": "67968d1dc16e82d130abc400fc893949caf0650d8d00da82a855807a03cf797a", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/rpc"}, "node_info": {"start": 0, "end": 3234, "_node_type": "1"}, "relationships": {"1": "ce1e34a0affd2b1631b4428e19cb0925667d22c7", "3": "771b564e-ecda-4358-a6e1-fee10b9c633b"}}, "__type__": "1"}, "771b564e-ecda-4358-a6e1-fee10b9c633b": {"__data__": {"text": "javascriptStyle = new rpc.Network({ name: \"camelCaseNet\" });\nconst CSharpStyle = new rpc.Network({ Name: \"PascalCaseNet\" });\n\njavascriptStyle.name; // camelCaseNet\nCSharpStyle.name; //PascalCaseNet\n```\n\n### Protocol\n\nThe Protocol class is the interface and class representing the configuration of\nthe network itself. Details such as the magic number, seedlist and validators\nare found in this class.\n\nThis class is not exposed in the fluent API.\n\nSimilar to the `Network` class, this class maintains C# compatibility for the\nconstructor and `export()` method.\n\n```js\nconst protocol = new rpc.Protocol({ magic: 23 });\nconst CSharpProtocol = new rpc.Protocol({ Magic: 23 });\n```\n\nThe export interface is:\n\n```ts\ninterface ProtocolJSON {\n  Magic: number;\n  AddressVersion: number;\n  StandbyValidators: string[];\n  SeedList: string[];\n}\n```\n", "doc_id": "771b564e-ecda-4358-a6e1-fee10b9c633b", "embedding": null, "doc_hash": "8f05d8c42136f0570f0811c178499815f6e52588bd8ce3f86088de3277200e93", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/rpc"}, "node_info": {"start": 3193, "end": 4030, "_node_type": "1"}, "relationships": {"1": "ce1e34a0affd2b1631b4428e19cb0925667d22c7", "2": "73b87a8d-7daa-4098-a55d-567c5eaa3494"}}, "__type__": "1"}, "2760afcf-4217-41fc-b945-71c19db9610c": {"__data__": {"text": "---\nid: sc\ntitle: Smart Contract\n---\n\nThe `sc` module is exposed as:\n\n```js\nimport Neon, { sc } from \"@cityofzion/neon-js\";\nconst sb = Neon.create.scriptBuilder();\nconst alternative = new sc.scriptBuilder();\n```\n\nUsers interact with smart contracts through Transactions. These transactions carry the hex output from scriptBuilder and\nto the network for processing.\n\nTo test out smart contracts, you are better off using RPC calls:\n\n- `invoke`\n- `invokefunction`\n- `invokescript`\n\nThese RPC calls execute the provided script and  returns the result based on the current blockchain state.\nHowever, it is not actually recorded on the chain. Thus, their purpose is to test out the script to\nensure validity and find out the gas cost required.\n\nFor example, in the NEP-17 token standard, we do not require an actual transaction\nto retrieve the name or symbol of the token. Thus, it is better to use a\n`invoke` RPC call instead of a real Transaction which costs gas.\n\nWe will use a transaction when we want to effect a state change. For example, we\nwant to transfer tokens from address A to B. We will use invoke to ensure the\nscript is valid before sending the actual transaction.\n\n---\n\n## Classes\n\n### ScriptBuilder\n\nThe `ScriptBuilder` is an object that converts a smart contract method call into\na hexstring that can be sent to the network with a Transaction.\n\n```js\nconst sb = Neon.create.scriptBuilder();\n// Build script to call 'symbol()' from contract at ef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\nsb.emitAppCall(\"ef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\", \"symbol\");\n\n// Test the script with invokescript\nrpc.Query.invokeScript(sb.str).execute(nodeURL);\n```\n\nYou may chain multiple calls together in a single VM script. The results will be\nreturned in order.\n\n```js\nconst sb = Neon.create.scriptBuilder();\nsb.emitAppCall(scriptHash, \"decimals\").emitAppCall(scriptHash, \"symbol\");\n\n// Returns decimals, symbol\nrpc.Query.invokeScript(sb.str)\n  .execute(\"http://seed1.neo.org:10332\")\n  .then((res) => {\n    console.log(res);\n  });\n```\n\nA simple wrapper method is provided for convenience.\n\n```js\nconst props = {\n  scriptHash: Neon.CONST.NATIVE_CONTRACT_HASH.NeoToken,\n  operation: \"symbol\",\n  args: [],\n};\n// Returns a hexstring\nconst vmScript = Neon.create.script(props);\n```\n\n### ContractParam\n\nContractParam objects provide a convenient way to construct calls for `invoke`\nand `invokefunction`. These RPC calls utilise a JSON struct for arguments and\ncan be messy to create by hand:\n\n```js\n  {\n    type: String,\n    value: 'this is a string'\n  }\n```\n\nContractParam currently supports creating string, boolean, integer, bytearray\nand array.\n\n```js\nconst param1 = Neon.create.contractParam(\"String\", \"balanceOf\");\n// This will automatically convert an address to a scriptHash that smart contracts use.\nconst param2 = sc.ContractParam.hash160(\"NNtxeX9UhKfHySqPQ29hQnZe22k8LwcFk1\");\n\nrpc.Query.invoke(\n  CONST.NATIVE_CONTRACT_HASH.NeoToken,\n  param1,\n  sc.ContractParam.array(param2)\n).then((res) => {\n  console.log(res);\n});\n```\n\nContractParams are compatible with", "doc_id": "2760afcf-4217-41fc-b945-71c19db9610c", "embedding": null, "doc_hash": "268e007455f4d2fb2ce09e7a3786e8ecb8594f341dd60cf29b17688865876d2d", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/sc"}, "node_info": {"start": 0, "end": 3062, "_node_type": "1"}, "relationships": {"1": "f61a351f28df52fb9f42768fa9cd91312c80c452", "3": "85610ac8-0d1d-4473-90c5-ef76e07f175c"}}, "__type__": "1"}, "85610ac8-0d1d-4473-90c5-ef76e07f175c": {"__data__": {"text": " console.log(res);\n});\n```\n\nContractParams are compatible with ScriptBuilder, so it is fine to pass them in as arguments directly.\n", "doc_id": "85610ac8-0d1d-4473-90c5-ef76e07f175c", "embedding": null, "doc_hash": "858a27972005af9e750b170703a8269493686d41bb201794d33b9cc711c70c6d", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/sc"}, "node_info": {"start": 3000, "end": 3131, "_node_type": "1"}, "relationships": {"1": "f61a351f28df52fb9f42768fa9cd91312c80c452", "2": "2760afcf-4217-41fc-b945-71c19db9610c"}}, "__type__": "1"}, "b8f13b1f-20b1-40b0-8a9f-51d26d89047f": {"__data__": {"text": "---\nid: tx\ntitle: Transactions\n---\n\nThe `tx` module is exposed as:\n\n```ts\nimport { tx, wallet } from \"@cityofzion/neon-js\";\nconst acct = new wallet.Account();\nconst transaction = new tx.Transaction();\ntransaction.addSigner(new tx.Signer({ account: acct.scriptHash }));\ntransaction.sign(acct);\nconsole.log(transaction.hash());\n```\n\nTransactions form the core of the interaction with the blockchain. In order to\neffect any state changes on the chain, a transaction is required to be sent and\nprocessed into a block by the consensus nodes.\n\n```js\n// We can use this serializedTx string and send it through sendrawtransaction RPC call.\nconst serializedTx = transaction.serialize();\n```\n---\n\n## Components\n\nTransactions are composed of the following parts:\n\n1. Version\n\nThis determines the version of the transaction. Protocol may defer for different\nversions.\n\n2. Witnesses\n\nThe witnesses to the transaction. These are the signatures to authorise the\ntransaction. Usually the private key of the owner of the input assets is used to\ngenerate the signature.\n\n3. Signers\n\nThe signers control the validity of the signatures and can be checked in smart contracts using the `CheckWitness`\nfunctionality. A good article on how they work and can be used can be read here https://neospcc.medium.com/thou-shalt-check-their-witnesses-485d2bf8375d\nThe first signer is also known as the `sender` and will pay for the transaction fees.\n\n4. Attributes\n\nExtra attributes that are attached to the transaction. An example is a OracleResponse.\nAttributes can only be set by special entities in the system (being the consensus committee or an Oracle node).\n", "doc_id": "b8f13b1f-20b1-40b0-8a9f-51d26d89047f", "embedding": null, "doc_hash": "f733562551584ff486b3224cbae171f7a99fe803182e0dd5c9a1689e78fb0076", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/tx"}, "node_info": {"start": 0, "end": 1633, "_node_type": "1"}, "relationships": {"1": "6878c60abde2dad6460e60de634eb256d40c8f18"}}, "__type__": "1"}, "c8a214b7-62ae-428a-ba66-d4a3cdd71523": {"__data__": {"text": "---\nid: u\ntitle: Utility\n---\n\nThe `u` module is exposed as:\n\n```js\nimport Neon, { u } from \"@cityofzion/neon-js\";\nNeon.u.reverseHex(hexstring);\n\n```\n\nThe utility module contains:\n\n- Format manipulation methods\n- Hashing methods\n- Utility classes\n\n---\n\n## Classes\n\n### StringStream\n\nStringStream is a simple stream object that allows us to read a hexstring byte\nby byte. It is not an actual stream but fakes the stream interface for better\nmanipulation. It stores the whole string and a pointer to keep track of the\ncurrent position on the string.\n\nIt is used in serializing and deserializing a transaction object. The\nScriptBuilder class for smart contracts inherits from StringStream.\n\n```js\nconst ss = new Neon.u.StringStream(\"abcdefgh\");\nss.read(1); // 'ab'\nss.read(2); // 'cdef'\nss.isEmpty(); // false\nss.read(1); // 'gh'\nss.isEmpty(); // true\nss.str; // 'abcdefgh'\n```\n\n## Methods\n\n### Format\n\nWhile most of the methods in Neon takes in strings and outputs strings, the\nunderlying logic requires a lot of format conversions.\n\n```js\nNeon.u.reverseHex(hexstring);\nNeon.u.ab2str(arrayBuffer);\n\n// Conversions to hex\nNeon.u.str2hexstring(\"normalString\"); // 6e6f726d616c537472696e67\nNeon.u.int2hex(234); // EA\nNeon.u.ab2hexstring(arrayBuffer);\n\n// Conversion from hex\nNeon.u.hexstring2str(\"6e6f726d616c537472696e67\"); // normalString\nNeon.u.hex2int(\"EA\"); // 234\nNeon.u.hexstring2ab(hexString);\n```\n\nThe most common format is hex string. This is a string where every 2 characters\nrepresents a byte in an bytearray. `neon-js` intentionally works with hex\nstrings because strings are easy to print and manipulate.\n\n### Hashing\n\nThese methods are convenient wrappers around the CryptoJS functions. They take\nin strings and return strings.\n\n```js\nimport Neon from \"@cityofzion/neon-js\";\n// Performs a single SHA\nNeon.u.sha256(item);\n// Performs a SHA followed by a SHA\nNeon.u.hash256(item);\n// Performs a SHA followed by a RIPEMD160\nNeon.u.hash160(item);\n```\n", "doc_id": "c8a214b7-62ae-428a-ba66-d4a3cdd71523", "embedding": null, "doc_hash": "c7f25f8efcbd7ca4340ed407daa858942ce37480a4c9f20c851dadee9196183e", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/u"}, "node_info": {"start": 0, "end": 1956, "_node_type": "1"}, "relationships": {"1": "ae3c2b16ecc23026d83047143b5b36712942ebd7"}}, "__type__": "1"}, "533875a2-0369-4957-a476-c32a3d60d759": {"__data__": {"text": "---\nid: wallet\ntitle: Wallet\n---\n\nThe `wallet` module is exposed as:\n\n```js\nimport Neon, { wallet, CONST } from \"@cityofzion/neon-js\";\nconst account = Neon.create.account(privateKey);\nconst alternative = new wallet.Account(privateKey);\n\nNeon.is.address(string, CONST.DEFAULT_ADDRESS_VERSION);\nwallet.isAddress(string, CONST.DEFAULT_ADDRESS_VERSION);\n```\n\nThe `wallet` module contains methods for manipulating keys, creating signatures\nand verifying keys.\n\n---\n\n## Classes\n\n### Account\n\n```ts\nclass Account {\n  constructor(str: string);\n\n  WIF: string;\n  privateKey: string;\n  publicKey: string;\n  scriptHash: string;\n  address: string;\n\n  getPublicKey(encoded: boolean): string;\n  encrypt(keyphrase: string, scryptParams?: ScryptParams): Promise<this>;\n  decrypt(keyphrase: string, scryptParams?: ScryptParams): Promise<this>;\n  export(): WalletAccount;\n}\n```\n\nThe `Account` class is used to store and transform keys to its various formats.\nIt can be instantiated with any key format and is smart enough to recognise the\nformat and store it appropriately.\n\n```js\nconst a = Neon.create.Account(\"NNtxeX9UhKfHySqPQ29hQnZe22k8LwcFk1\");\nconsole.log(a.address); // NNtxeX9UhKfHySqPQ29hQnZe22k8LwcFk1\n\nconst b = new wallet.Account(\n  \"9ab7e154840daca3a2efadaf0df93cd3a5b51768c632f5433f86909d9b994a69\"\n);\nconsole.log(b.privateKey); // 9ab7e154840daca3a2efadaf0df93cd3a5b51768c632f5433f86909d9b994a69\n```\n\nThe class enables us to easily retrieve keys in any derivable format without\nneeding to remember any methods. However, we can only retrieve formats that can\nbe derived from our input. For example, we cannot retrieve any formats other\nthan address and scripthash from `a` because we instantiated it with an address.\nHowever, we can get any format from `b` because it was instantiated with a\nprivate key, which is the lowest level key available.\n\n```js\nconsole.log(a.publicKey); // throws an error\nconsole.log(b.publicKey); // prints the public key\nconsole.log(b.address); // prints the address\n```\n\nThe order of the keys are:\n\n0. encrypted (NEP2)\n1. privateKey / WIF\n1. publicKey\n1. scriptHash\n1. address\n\nWhen you instantiate an `Account` with a key, you can retrieve any format that\nis below it in the list. For example, if we instantiate with a public key, we\ncan get the publc key, scriptHash and address but not the private key.\n\nThe Account class can be instantiated from encrypted key, private key, public\nkey, address or ScriptHash.\n\nThe `encryptedKey` is special as it is the lowest level key but requires the\nuser to unlock it first before we can derive anything from it. This can be done\nthrough the `decrypt` method.\n\n```js\nconst c = new wallet.Account(\n  \"6PYLHmDf6AjF4AsVtosmxHuPYeuyJL3SLuw7J1U8i7HxKAnYNsp61HYRfF\"\n);\nconsole.log(c.encrypted); // encrypted key\nconsole.log(c.address); // throws error\nc.decrypt(\"city of zion\").then(() => console.log(c.address)); //", "doc_id": "533875a2-0369-4957-a476-c32a3d60d759", "embedding": null, "doc_hash": "79b7c598c43beaff2e239703537fa4015e81736c91e13cb49c1ca9d5a1d0064c", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/wallet"}, "node_info": {"start": 0, "end": 2875, "_node_type": "1"}, "relationships": {"1": "fa894ee595ea533511746c94c66c36fcb678ecb6", "3": "88cc45ca-fc2e-4308-b84c-3b9ff0ea0c5d"}}, "__type__": "1"}, "88cc45ca-fc2e-4308-b84c-3b9ff0ea0c5d": {"__data__": {"text": "of zion\").then(() => console.log(c.address)); // ALq7AWrhAueN6mJNqk6FHJjnsEoPRytLdW\n```\n\nYou can encrypt the key by using the `encrypt` method. This is necessary if you\nwant to export this key to a JSON file.\n\n```ts\nc.encrypt(\"new password\").then(() => c.export());\n```\n\nThis action will encrypt the private key with the provided password and replace\nany old NEP2 key.\n\n### Wallet\n\nThe `Wallet` class implements the NEP-6 convention which is a standard way set\nby NEO council on how to export keys in a JSON file. By doing this, we can move\nkeys across different software providers without worry.\n\nThe `Wallet` class is essentially a collection of encrypted keys as well as the\nparameters used to encrypt them.\n\n```js\nimport Neon, { wallet } from \"cityofzion/neon-js\";\n\nconst a = new wallet.Account(\n  \"6PYLHmDf6AjF4AsVtosmxHuPYeuyJL3SLuw7J1U8i7HxKAnYNsp61HYRfF\"\n);\nconst b = new wallet.Account(\n  \"9ab7e154840daca3a2efadaf0df93cd3a5b51768c632f5433f86909d9b994a69\"\n);\n\n// We create a wallet with name 'myWallet'. This is optional. The constructor is fine with no arguments.\nconst w1 = Neon.create.wallet({ name: \"myWallet\" });\n\n// We generate a new Account and add it to the wallet\nw1.addAccount();\n// We add Account a to the wallet.\nw1.addAccount(a);\n// We add Account b to the wallet.\n// Note that Account b is unencrypted and we can add this Account.\n// The wallet will only error when trying to export an unencrypted key but does not prevent you from adding it.\nw1.addAccount(b);\n```\n\nIf your Account is not encrypted, it is still possible to add it to the Wallet.\nHowever, you will be unable to export the wallet until you encrypt it. The\nWallet class provides some helper methods to quickly encrypt or decrypt all\naccounts.\n\n```js\n// encrypting Account a will fail as it has not been unlocked.\nw1.encryptAll(\"lousypassword\").then((results) => console.log(results)); // returns [false, true]\n\n// we will decrypt a (account at array position 0)\nw1.decrypt(0, \"city of zion\").then((result) => console.log(result)); // returns true\n// so we can encrypt everything with the same password\nw1.encrypt(0, \"lousypassword\").then((result) => console.log(result)); // returns true\n```\n\nSimilar methods for decryption (`wallet.decrypt`, `wallet.decryptAll`) is\navailable. Encryption and decryption methods will return booleans which\ncorresponds to the success or failure of the action.\n\nDo note that decrypting does not mean that you cannot export the wallet.\nDecryption does not erase the old encryption but merely exposes your keys.\n\nOnce encrypted, you can proceed to export your wallet through `export`.\n\n```js\n// exports as JSON string\nconst walletString = w1.export();\n\n// Decryption failed for account[0]\nw2.decryptAll(\"lousypassword\").then((results) => console.log(results)); // returns [true, true]\n```\n\n## Methods\n\n### Core\n\nThe core methods available are methods to convert key formats and generate new\nprivate keys.\n\nDo note that the methods available is not the full set but only the minimum\nrequired. Generally, there is a method to retrieve the lower key from the higher\nkey. For example, `getPublicKeyFromPrivateKey` exists but", "doc_id": "88cc45ca-fc2e-4308-b84c-3b9ff0ea0c5d", "embedding": null, "doc_hash": "491a7d22cd5a3616b06758ae51ce19c6a4351a254fa9e013e0c510ca23ac2362", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/wallet"}, "node_info": {"start": 2832, "end": 5968, "_node_type": "1"}, "relationships": {"1": "fa894ee595ea533511746c94c66c36fcb678ecb6", "2": "533875a2-0369-4957-a476-c32a3d60d759", "3": "dfde03af-44b1-4c4a-9f15-d36e8ced7edc"}}, "__type__": "1"}, "dfde03af-44b1-4c4a-9f15-d36e8ced7edc": {"__data__": {"text": "from the higher\nkey. For example, `getPublicKeyFromPrivateKey` exists but not\n`getAddressFromPrivatKey` or `getPrivateKeyFromPublicKey`. For conversions\nacross all formats, you are encouraged to use the `Account` class.\n\n```js\nconst privateKey = Neon.create.privateKey();\nconst publicKey = Neon.get.publicKeyFromPrivateKey(publicKey);\nconst scriptHash = Neon.get.scriptHashFromPublicKey(publicKey);\nconst address = Neon.get.addressFromScriptHash(scriptHash);\n\nconst privateKey = wallet.generatePrivateKey();\nconst publicKey = wallet.getPublicKeyFromPrivateKey(privateKey);\nconst scriptHash = wallet.getScriptHashFromPublicKey(publicKey);\nconst address = wallet.getAddressFromScriptHash(scriptHash);\n```\n\nThere are no checks in place for this set of methods to ensure the inputs are\nproper. Errors may be thrown when conversion fails for certain methods.\n\n### Components\n\nThese are methods used to convert JS objects into their respective `neon-js`\nimplementation.\n\nThese methods are exposed for completeness but you are encouraged to use the\nconstructors of the main objects `Balance` and `Claims` instead of manually\nrecreating your own objects.\n\n### NEP2\n\nThe NEP2 standard describes the procedure to encrypt or decrypt a private key.\nThe encryption method accepts either a WIF or HEX private key. However, the\ndecryption method will always return a WIF for consistency.\n\nDo note that the encryption/decryption takes a long time and might not work very\nnicely in browsers.\n\n```js\nconst privateKey = Neon.create.privateKey();\nconst WIF = Neon.get.WIFFromPrivateKey(privateKey);\nconst nep2Key = await Neon.encrypt(privateKey, \"myPassword\");\nconst decryptedKey = await Neon.decrypt(nep2Key, \"myPassword\");\nWIF === decryptedKey; // true\n\nconst privateKey = wallet.generatePrivateKey();\nconst WIF = new wallet.Account(privateKey).WIF;\nconst nep2Key = await wallet.encrypt(WIF, \"myPassword\");\nconst decryptedKey = await wallet.decrypt(nep2Key, \"myPassword\");\nWIF === decryptedKey; // true\n```\n\n### Verify\n\nVerification methods for the various key formats are available::\n\n```js\nNeon.is.address(addrStr);\nNeon.is.privateKey(keyStr);\nNeon.is.encryptedKey(encryptedStr);\nNeon.is.publicKey(publicKeyStr);\nNeon.is.wif(wifStr);\nNeon.is.scriptHash(scriptHashStr);\n\nwallet.isAddress(addrStr);\nwallet.isPrivateKey(keyStr);\nwallet.isNEP2(keyStr);\nwallet.isPublicKey(publicKeyStr);\nwallet.isWIF(wifStr);\nwallet.isScriptHash(scriptHashStr);\n```\n\nThese methods will return a boolean regarding the key format. No errors will be\nthrown.\n", "doc_id": "dfde03af-44b1-4c4a-9f15-d36e8ced7edc", "embedding": null, "doc_hash": "9de34bff58d628938635dee828bfbb53118014af425653b10bc6db3876e6568f", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/wallet"}, "node_info": {"start": 5939, "end": 8457, "_node_type": "1"}, "relationships": {"1": "fa894ee595ea533511746c94c66c36fcb678ecb6", "2": "88cc45ca-fc2e-4308-b84c-3b9ff0ea0c5d"}}, "__type__": "1"}, "f19991c5-f563-4e02-8911-6142d940867b": {"__data__": {"text": "---\nid: index\ntitle: API\nsidebar_position: 1\n---\n\n`neon-js` is laid out in a modules style, with each folder in the source code\nrepresenting a module with a particular functionality.\n\n## default\n\nThe default import for Neon is a Javascript object where functions are arranged\nin a semantic manner following the convention of Verb-Noun. If a method goes\nbeyond 2 levels, the rest of the name is camelCased at the noun level.\n\n```js\nimport Neon from \"@cityofzion/neon-js\";\nNeon.create.privateKey();\nNeon.serialize.tx(transactionObj);\nNeon.get.publicKeyFromPrivateKey(privateKey);\n```\n\nThis style is recommended for beginners or anyone who just wishes to use Neon\nwithout hassle.\n\n## api\n\nThe `api` module contains code that interfaces with external APIs as well as\nproviding a high level abstraction.\n\n## wallet\n\nThe `wallet` module deals with key manipulating as well as importing and\nexporting of wallet files.\n\n## tx\n\nThe `tx` module deals with transaction creation, serialization and\ndeserialization.\n\n## sc\n\nThe `sc` module deals with smart contract script construction. It is used\nprimarily to construct scripts that can be carried by InvocationTransaction.\n\n## rpc\n\nThe `rpc` module deals with the RPC interface exposed by the NEO node.\n\n## u\n\nThe `u` module is the utilities module containing methods handling the various\ndata transformation aspects within NEO.\n\n## CONST\n\nThe `CONST` module is a collection of constants and defaults used across all\nmodules.\n", "doc_id": "f19991c5-f563-4e02-8911-6142d940867b", "embedding": null, "doc_hash": "b8096bdad85ea18422462f0d90bfb3dbc62c2ddbaa29e5976efedb531ac28a1b", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/index"}, "node_info": {"start": 0, "end": 1465, "_node_type": "1"}, "relationships": {"1": "73a1295b60d8aba72eeb39f05e57338928567cca"}}, "__type__": "1"}, "b92b62da-d5d5-41a9-960d-238627a0752f": {"__data__": {"text": "---\nid: facade\ntitle: Using the NetworkFacade\n---\n\nThe NetworkFacade class is designed to be the quick and easy way to start using\nneon-js without much configuration. The primary aim of the facade is to provide\nsingle \"batteries included\" methods that developers can rely on to quickly build\nout an interaction.\n\nFor this tutorial, you will need:\n\n- A url which is a NEO node JSON RPC endpoint.\n- A private key which contains funds.\n- An address to send some funds to.\n\n> While we highly recommend using a private network for development, if you wish to use the TestNet and are looking\n> for a public RPC node you can try one from https://dora.coz.io/monitor\n\n# Setup\n\nFirst, we initialize the `NetworkFacade` pointing to our endpoint. Note that the\nmethod call returns a promise. During initialization, the class will make an API\ncall to the endpoint to grab some basic details that we will use later.\n \n\n```js\nimport Neon from \"@cityofzion/neon-js\";\n\nconst url = \"http://localhost:20332\";\nconst privateKey = \"L1QqQJnpBwbsPGAuutuzPTac8piqvbR1HRjrY5qHup48TBCBFe4g\";\nconst address = \"NMBfzaEq2c5zodiNbLPoohVENARMbJim1r\";\n\nconst facadePromise = Neon.api.NetworkFacade.fromConfig({\n  node: url,\n});\n```\n\n# Create intent\n\nLet us craft an intent to send some funds. The `decimalAmt` field allows us to\nuse the numbers that non-technical users are used to. In this example, an\nalternative would be filling up the `integerAmt` field with `1`.\n\n```js\nconst intent = {\n  from: new Neon.wallet.Account(privateKey),\n  to: address,\n  decimalAmt: 0.00000001,\n  contractHash: Neon.CONST.NATIVE_CONTRACT_HASH.GasToken,\n};\n```\n\nWe will also need to create a siging configuration to tell the class how to sign\nthe transaction. In this example, we will use a private key.\n \n\n```js\nconst signingConfig = {\n  signingCallback: Neon.api.signWithAccount(\n    new Neon.wallet.Account(privateKey)\n  ),\n};\n```\n\n# Execute\n\nThe facade will take care of all the details such as setting an appropriate\nvalidUntilBlock, filling in the minimum GAS fees required and sending it off.\n \n\n```js\nfacadePromise\n  .then((facade) => facade.transferToken([intent], signingConfig))\n  .then((txid) => console.log(txid))\n  .catch((err) => console.log(err));\n```\n", "doc_id": "b92b62da-d5d5-41a9-960d-238627a0752f", "embedding": null, "doc_hash": "d199696a11215ade8813d5f776805be00b56d08e25423927ff74a6c09f5c6d99", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/facade"}, "node_info": {"start": 0, "end": 2218, "_node_type": "1"}, "relationships": {"1": "ccbe8ad6630f6e231992b45ff35309305f9ae208"}}, "__type__": "1"}, "7a5d0124-e92c-4646-8756-87d80320b0a3": {"__data__": {"text": "---\nid: reading_data\ntitle: Reading data from the blockchain\n---\n\nIn this tutorial, we will be retrieving some data from the contracts in the blockchain.\nWe use this method to retrieve data for various purposes:\n\n- Finding out the balance of an account.\n- Calculating fees\n- Finding out who to vote for.\n\nThis is done through the `invokefunction` or `invokescript` RPC call to a NEO node.\nWe will be performing a couple of invokes to show you how to retrieve contract data from the blockchain.\n\nNOTE: This tutorial is written in Typescript. There\n \n\n```js\nimport { rpc, sc, u } from \"@cityofzion/neon-core\";\n\nconst url = \"http://localhost:20332\";\n\nconst rpcClient = new rpc.RPCClient(url);\n```\n\n* Helper function to transform GAS integers into 8 decimal format.\n\n```js\nfunction transformGasDecimal(num) {\n  if (num.length <= 8) {\n    return \"0.\" + num.padStart(8, \"0\");\n  }\n  const decimalPoint = num.length - 8;\n  return (\n    num.substring(0, decimalPoint) +\n    \".\" +\n    num.substring(decimalPoint, num.length)\n  );\n}\n```\n\nWe will start off with finding out the total GAS supply on the blockchain currently.\n \n\n```js\nfunction getGasTotalSupply() {\n  console.log(\"--- Current GAS total supply ---\");\n  // This is a hexstring\n  const gasTotalSupplyScript = new sc.ScriptBuilder()\n    .emitContractCall(sc.GasContract.INSTANCE.totalSupply())\n    .build();\n\n  //We wrap the script in a HexString class so the SDK can handle the conversion to Base64 for us.\n  const payload = u.HexString.fromHex(gasTotalSupplyScript);\n  return rpcClient.invokeScript(payload).then((gasTotalSupplyResult) => {\n    const gasTotalSupply = gasTotalSupplyResult.stack[0].value;\n\n    console.log(`Gas total supply is ${transformGasDecimal(gasTotalSupply)}`);\n    console.log(\n      `This action took ${transformGasDecimal(\n        gasTotalSupplyResult.gasconsumed\n      )} GAS to run.\\n\\n`\n    );\n  });\n}\n```\n\nWe know that the GAS supply is ever increasing with each block produced.\nWe can verify this by running the same exact script again after at least a block has passed.\nFor now, we want to check out the candidates available for voting on this chain.\nThis information is held in the NEO contract.\nThis time, we will try out the invokefunction RPC call.\n \n\n```js\nfunction getNeoCandidates() {\n  console.log(\"--- Candidates and their votes ---\");\n  const neoCandidateContractCall = sc.NeoContract.INSTANCE.getCandidates();\n  return rpcClient\n    .invokeFunction(\n      neoCandidateContractCall.scriptHash,\n      neoCandidateContractCall.operation\n    )\n    .then((neoCandidateResult) => {\n      const neoCandidatesStackItems = neoCandidateResult.stack[0].value;\n\n      const neoCandidateStrings = neoCandidatesStackItems.map((i) => {\n        const struct = i.value;\n        const publicKey = u.HexString.fromBase64(struct[0].value).toBigEndian();\n        const votes = parseInt(struct[1].value);\n        return `${publicKey} has ${votes} votes\\n`;\n   ", "doc_id": "7a5d0124-e92c-4646-8756-87d80320b0a3", "embedding": null, "doc_hash": "8b4f2d1ee8b3846c4e07899e66f85d467e44fe7fd2e43e016b07e0077bb0635d", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/readingData"}, "node_info": {"start": 0, "end": 2932, "_node_type": "1"}, "relationships": {"1": "9674b2ef810b4e3148e81c1fcb72a884b3156506", "3": "6bb5b131-6807-4b5a-9b04-873495a29932"}}, "__type__": "1"}, "6bb5b131-6807-4b5a-9b04-873495a29932": {"__data__": {"text": " return `${publicKey} has ${votes} votes\\n`;\n      });\n\n      neoCandidateStrings.forEach((i) => console.log(i));\n\n      console.log(\n        `This action took: ${transformGasDecimal(\n          neoCandidateResult.gasconsumed\n        )} GAS to run.`\n      );\n      console.log(\"\\n\\n\");\n    });\n}\n```\n\nOne other important function that invokefunction/invokescript serves is to help us estimate the GAS required to execute the script.\nAs the node is actually executing the script within the blockchain context, the gasconsumed field is pretty accurate assuming that the signers field is populated correctly.\nThis is also how neon-js is able to assemble transactions with a good GAS fee estimate.\n\n```js\ngetGasTotalSupply().then(getNeoCandidates);\n```\n", "doc_id": "6bb5b131-6807-4b5a-9b04-873495a29932", "embedding": null, "doc_hash": "9efff6bc8a6f2852850efc64f435c5c4e8adeb7a5286424500a481466d7ee314", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/readingData"}, "node_info": {"start": 2884, "end": 3632, "_node_type": "1"}, "relationships": {"1": "9674b2ef810b4e3148e81c1fcb72a884b3156506", "2": "7a5d0124-e92c-4646-8756-87d80320b0a3"}}, "__type__": "1"}, "1f10a18c-c2ec-4395-8a36-8f16def843fc": {"__data__": {"text": "---\nid: transfer\ntitle: Performing a basic transaction\n---\n\nIn this tutorial, we will be performing a basic transfer of NEO from an address to another address.\n\nIn Neo2, NEO and GAS are considered native assets and operate using the UTXO\nsystem.\n\nIn Neo3, the UTXO system is removed. In its place, NEO and GAS now implements\nthe [NEP-17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki) interface. They are still considered\nnative assets but operate very similarly to how NEP-5 tokens work in Neo2.\n\nFirst, some setup:\n \n\n```js\nimport { CONST, rpc, sc, wallet, tx, u } from \"@cityofzion/neon-core\";\n\nconst inputs = {\n  fromAccount: new wallet.Account(\n    \"L1QqQJnpBwbsPGAuutuzPTac8piqvbR1HRjrY5qHup48TBCBFe4g\"\n  ),\n  toAccount: new wallet.Account(\n    \"L2QTooFoDFyRFTxmtiVHt5CfsXfVnexdbENGDkkrrgTTryiLsPMG\"\n  ),\n  tokenScriptHash: CONST.NATIVE_CONTRACT_HASH.NeoToken,\n  amountToTransfer: 1,\n  systemFee: 0,\n  networkFee: 0,\n  networkMagic: 1234567890, //CONST.MAGIC_NUMBER.TestNet,\n  nodeUrl: \"http://localhost:20332\", //\"http://seed2t.neo.org:20332\",\n};\n\nconst vars = {};\n```\n\nWe will perform the following checks:\n\n1. The token exists. This can be done by performing a invokeFunction call.\n2. The amount of token exists on fromAccount.\n3. The amount of GAS for fees exists on fromAccount.\n\nAll these checks can be performed through RPC calls to a NEO node.\n \n\n```js\nconst rpcClient = new rpc.RPCClient(inputs.nodeUrl);\n\nasync function createTransaction() {\n  console.log(\"\\n\\n --- Today's Task ---\");\n  console.log(\n    `Sending ${inputs.amountToTransfer} token \\n` +\n      `from ${inputs.fromAccount.address} \\n` +\n      `to ${inputs.toAccount.address}`\n  );\n\n  // Since the token is now an NEP-17 token, we transfer using a VM script.\n  const script = sc.createScript({\n    scriptHash: inputs.tokenScriptHash,\n    operation: \"transfer\",\n    args: [\n      sc.ContractParam.hash160(inputs.fromAccount.address),\n      sc.ContractParam.hash160(inputs.toAccount.address),\n      inputs.amountToTransfer,\n      sc.ContractParam.any(),\n    ],\n  });\n\n  // We retrieve the current block height as we need to\n  const currentHeight = await rpcClient.getBlockCount();\n  vars.tx = new tx.Transaction({\n    signers: [\n      {\n        account: inputs.fromAccount.scriptHash,\n        scopes: tx.WitnessScope.CalledByEntry,\n      },\n    ],\n    validUntilBlock: currentHeight + 1000,\n    script: script,\n  });\n  console.log(\"\\u001b[32m  \u2713 Transaction created \\u001b[0m\");\n}\n```\n\nNetwork fees pay for the processing and storage of the transaction in the\nnetwork. There is a cost incurred per byte of the transaction (without the\nsignatures) and also the cost of running the verification of", "doc_id": "1f10a18c-c2ec-4395-8a36-8f16def843fc", "embedding": null, "doc_hash": "5432fcb7fffc2f1dbf24a522c94f9c18958dec4b5e00495257bbbb3873480fae", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/transfer"}, "node_info": {"start": 0, "end": 2696, "_node_type": "1"}, "relationships": {"1": "214de1548039954ceb3b61eab92b718ef015721a", "3": "fe0d58d4-ec44-48b9-bfe1-755bd3c1033e"}}, "__type__": "1"}, "fe0d58d4-ec44-48b9-bfe1-755bd3c1033e": {"__data__": {"text": "the transaction (without the\nsignatures) and also the cost of running the verification of signatures.\n \n\n```js\nasync function checkNetworkFee() {\n  const feePerByteInvokeResponse = await rpcClient.invokeFunction(\n    CONST.NATIVE_CONTRACT_HASH.PolicyContract,\n    \"getFeePerByte\"\n  );\n\n  if (feePerByteInvokeResponse.state !== \"HALT\") {\n    if (inputs.networkFee === 0) {\n      throw new Error(\"Unable to retrieve data to calculate network fee.\");\n    } else {\n      console.log(\n        \"\\u001b[31m  \u2717 Unable to get information to calculate network fee.  Using user provided value.\\u001b[0m\"\n      );\n      vars.tx.networkFee = u.BigInteger.fromNumber(inputs.networkFee);\n    }\n  }\n  const feePerByte = u.BigInteger.fromNumber(\n    feePerByteInvokeResponse.stack[0].value\n  );\n  // Account for witness size\n  const transactionByteSize = vars.tx.serialize().length / 2 + 109;\n  // Hardcoded. Running a witness is always the same cost for the basic account.\n  const witnessProcessingFee = u.BigInteger.fromNumber(1000390);\n  const networkFeeEstimate = feePerByte\n    .mul(transactionByteSize)\n    .add(witnessProcessingFee);\n  if (inputs.networkFee && inputs.networkFee >= networkFeeEstimate.toNumber()) {\n    vars.tx.networkFee = u.BigInteger.fromNumber(inputs.networkFee);\n    console.log(\n      `  i Node indicates ${networkFeeEstimate.toDecimal(\n        8\n      )} networkFee but using user provided value of ${inputs.networkFee}`\n    );\n  } else {\n    vars.tx.networkFee = networkFeeEstimate;\n  }\n  console.log(\n    `\\u001b[32m  \u2713 Network Fee set: ${vars.tx.networkFee.toDecimal(\n      8\n    )} \\u001b[0m`\n  );\n}\n```\n\nFirst, we check that the token exists. We perform an invokeFunction RPC call\nwhich calls the `name` method of the contract. The VM should exit successfully\nwith `HALT` and give us the token name if it exists.\n \n\n```js\nasync function checkToken() {\n  const tokenNameResponse = await rpcClient.invokeFunction(\n    inputs.tokenScriptHash,\n    \"symbol\"\n  );\n\n  if (tokenNameResponse.state !== \"HALT\") {\n    throw new Error(\n      \"Token not found! Please check the provided tokenScriptHash is correct.\"\n    );\n  }\n\n  vars.tokenName = u.HexString.fromBase64(\n    tokenNameResponse.stack[0].value\n  ).toAscii();\n\n  console.log(\"\\u001b[32m  \u2713 Token found \\u001b[0m\");\n}\n```\n\nSystemFees pay for the processing of the script carried in the transaction. We\ncan easily get this number by using invokeScript with the appropriate signers.\n \n\n```js\nasync function checkSystemFee() {\n  const invokeFunctionResponse = await rpcClient.invokeScript(\n    u.HexString.fromHex(vars.tx.script),\n    [\n      {\n        account: inputs.fromAccount.scriptHash,\n        scopes:", "doc_id": "fe0d58d4-ec44-48b9-bfe1-755bd3c1033e", "embedding": null, "doc_hash": "d81071873ef7b5bd9986035f7c06d7d651d5b42b3a04effe3bdd9cd2902ed77d", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/transfer"}, "node_info": {"start": 2620, "end": 5292, "_node_type": "1"}, "relationships": {"1": "214de1548039954ceb3b61eab92b718ef015721a", "2": "1f10a18c-c2ec-4395-8a36-8f16def843fc", "3": "aef9a616-847e-4982-8c3b-d8c9f27bdf19"}}, "__type__": "1"}, "aef9a616-847e-4982-8c3b-d8c9f27bdf19": {"__data__": {"text": "inputs.fromAccount.scriptHash,\n        scopes: tx.WitnessScope.CalledByEntry,\n      },\n    ]\n  );\n  if (invokeFunctionResponse.state !== \"HALT\") {\n    throw new Error(\n      `Transfer script errored out: ${invokeFunctionResponse.exception}`\n    );\n  }\n  const requiredSystemFee = u.BigInteger.fromNumber(\n    invokeFunctionResponse.gasconsumed\n  );\n  if (inputs.systemFee && inputs.systemFee >= requiredSystemFee) {\n    vars.tx.systemFee = u.BigInteger.fromNumber(inputs.systemFee);\n    console.log(\n      `  i Node indicates ${requiredSystemFee} systemFee but using user provided value of ${inputs.systemFee}`\n    );\n  } else {\n    vars.tx.systemFee = requiredSystemFee;\n  }\n  console.log(\n    `\\u001b[32m  \u2713 SystemFee set: ${vars.tx.systemFee.toDecimal(8)}\\u001b[0m`\n  );\n}\n```\n\nWe will also need to check that the inital address has sufficient funds for the transfer.\nWe look for both funds of the token we intend to transfer and GAS required to pay for the transaction.\nFor this, we rely on the [TokensTracker](https://github.com/neo-project/neo-modules/tree/master/src/TokensTracker)\nplugin. Hopefully, the node we select has the plugin installed.\n \n\n```js\nasync function checkBalance() {\n  let balanceResponse;\n  try {\n    balanceResponse = await rpcClient.execute(\n      new rpc.Query({\n        method: \"getnep17balances\",\n        params: [inputs.fromAccount.address],\n      })\n    );\n  } catch (e) {\n    console.log(e);\n    console.log(\n      \"\\u001b[31m  \u2717 Unable to get balances as plugin was not available. \\u001b[0m\"\n    );\n    return;\n  }\n  // Check for token funds\n  const balances = balanceResponse.balance.filter((bal) =>\n    bal.assethash.includes(inputs.tokenScriptHash)\n  );\n  const balanceAmount =\n    balances.length === 0 ? 0 : parseInt(balances[0].amount);\n  if (balanceAmount < inputs.amountToTransfer) {\n    throw new Error(`Insufficient funds! Found ${balanceAmount}`);\n  } else {\n    console.log(\"\\u001b[32m  \u2713 Token funds found \\u001b[0m\");\n  }\n\n  // Check for gas funds for fees\n  const gasRequirements = vars.tx.networkFee.add(vars.tx.systemFee);\n  const gasBalance = balanceResponse.balance.filter((bal) =>\n    bal.assethash.includes(CONST.NATIVE_CONTRACT_HASH.GasToken)\n  );\n  const gasAmount =\n    gasBalance.length === 0\n      ? u.BigInteger.fromNumber(0)\n      : u.BigInteger.fromNumber(gasBalance[0].amount);\n\n  if (gasAmount.compare(gasRequirements) === -1) {\n    throw new Error(\n      `Insufficient gas to pay for fees! Required ${gasRequirements.toString()} but only had ${gasAmount.toString()}`\n    );\n  } else {\n    console.log(\n      `\\u001b[32m  \u2713 Sufficient GAS for fees found (${gasRequirements.toString()})", "doc_id": "aef9a616-847e-4982-8c3b-d8c9f27bdf19", "embedding": null, "doc_hash": "22c6701594c64bdda615ee1fcbd816082e05b47adb8b415b5e632ae388f700d9", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/transfer"}, "node_info": {"start": 5332, "end": 7985, "_node_type": "1"}, "relationships": {"1": "214de1548039954ceb3b61eab92b718ef015721a", "2": "fe0d58d4-ec44-48b9-bfe1-755bd3c1033e", "3": "5f959b35-f3c2-438f-b652-218935d8e6e7"}}, "__type__": "1"}, "5f959b35-f3c2-438f-b652-218935d8e6e7": {"__data__": {"text": " \u2713 Sufficient GAS for fees found (${gasRequirements.toString()}) \\u001b[0m`\n    );\n  }\n}\n```\n\nAnd finally, to send it off to network.\n \n\n```js\nasync function performTransfer() {\n  const signedTransaction = vars.tx.sign(\n    inputs.fromAccount,\n    inputs.networkMagic\n  );\n\n  console.log(vars.tx.toJson());\n  const result = await rpcClient.sendRawTransaction(\n    u.HexString.fromHex(signedTransaction.serialize(true))\n  );\n\n  console.log(\"\\n\\n--- Transaction hash ---\");\n  console.log(result);\n}\n\ncreateTransaction()\n  .then(checkToken)\n  .then(checkNetworkFee)\n  .then(checkSystemFee)\n  .then(checkBalance)\n  .then(performTransfer)\n  .catch((err) => console.log(err));\n```\n\nYou should be able to see the transaction hash printed in the console log.\nAfter waiting for the network to process the transaction, you can check on your new account balance.\n \n", "doc_id": "5f959b35-f3c2-438f-b652-218935d8e6e7", "embedding": null, "doc_hash": "9a33b9f86238b52ae5c119a1fa373b2f9ac76b10ad2e6ccca05705218a3531ed", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/transfer"}, "node_info": {"start": 7959, "end": 8813, "_node_type": "1"}, "relationships": {"1": "214de1548039954ceb3b61eab92b718ef015721a", "2": "aef9a616-847e-4982-8c3b-d8c9f27bdf19"}}, "__type__": "1"}, "db85481e-58ef-44e3-b7c4-f84a327d6ad8": {"__data__": {"text": "---\nid: installation\ntitle: Installation\n---\n\n## Install\n\nTo install\n\n```sh\nnpm install @cityofzion/neon-js\n```\n\nor\n\n```sh\nnpm install @cityofzion/neon-core\n```\n\nThis will give you the release that is compatible for the neo3 mainnet and testnet.\n\n> **Note**\n> For most use-cases, we recommend `neon-js`.\n> Do not use `neon-js` and `neon-core`  in the same project.  The classes are not cross-package compatible. See https://github.com/CityOfZion/neon-js/issues/850.\n\n## Node\n\nSupport policy is to support the maintainence and LTS versions of Node. At the\ntime of writing, this is:\n\n- Node 12\n- Node 14\n- Node 16\n\n## Web\n\nBoth `neon-core` and `neon-js` are packaged for the web. Use script tags:\n\n```html\n<script src=\"https://unpkg.com/@cityofzion/neon-js@next\"></script>\n```\n\nThe library will be loaded under the variable `Neon`.\n", "doc_id": "db85481e-58ef-44e3-b7c4-f84a327d6ad8", "embedding": null, "doc_hash": "2ae0b3066b2d21454c3d5fe4a2b58f754e6aba9fd5b5c8415f97cc1fc27a56b6", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/installation"}, "node_info": {"start": 0, "end": 830, "_node_type": "1"}, "relationships": {"1": "78e4a99b02ef627a8bf0fb68ffd9cf938d7ed6e9"}}, "__type__": "1"}, "2ceb0276-f6e4-4bae-bb39-4495a5900669": {"__data__": {"text": "---\nid: overview\ntitle: Overview\nslug: /\n---\n\n`neon-js` is a Javascript library to interface with NEO blockchain, providing\nquick and easy methods to send RPC calls, create transactions and simple\ncontract invocations.\n\n## Features\n\n- Built-in RPC queries\n- Transaction creation, serialization and deserialization\n- Wallet key manipulation\n- Smart Contract script builder\n- 3rd party API support\n\n## Usage\n\nNeon can be used in 2 ways:\n\n### Semantic\n\nThe default import for Neon is a Javascript object where functions are arranged\nin a semantic manner following the convention of Verb-Noun. If a method goes\nbeyond 2 levels, the rest of the name is camelCased at the noun level.\n\n```js\nimport Neon from \"@cityofzion/neon-js\";\nNeon.create.privateKey();\nNeon.deserialize.tx(serializedTransaction);\nNeon.verify.message(message, signature, publicKey)\n```\n\nThis style is recommended for beginners or anyone who just wishes to use Neon\nwithout hassle.\n\n### Named\n\nNamed imports are the conventional JS imports. The modules in Neon are:\n\n- `api`\n- `CONST`\n- `rpc`\n- `sc`\n- `tx`\n- `u`\n- `wallet`\n\n```js\nimport { api } from \"@cityofzion/neon-js\";\n```\n\nThis style offers more control and flexibility. Do refer to the source code for\neach module's exports.\n", "doc_id": "2ceb0276-f6e4-4bae-bb39-4495a5900669", "embedding": null, "doc_hash": "73e4649c4bf748b9e1ddf4c16932db468eb31b6381fe33c1ffe7d0efc23cd727", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/overview"}, "node_info": {"start": 0, "end": 1245, "_node_type": "1"}, "relationships": {"1": "9cfa3947cc291d1e8e3fc531bd7b146d143d3c40"}}, "__type__": "1"}, "71c5c3f8-3d47-445a-9a9b-1a4d9603e17b": {"__data__": {"text": "---\nid: structure\ntitle: Structure\n---\n\nThe package `neon-js` is actually composed of several packages, each offering a\ndifferent functionality.\n\n## Core\n\nThe core package is `neon-core`, comprised of the following folders:\n\n- `rpc`\n- `sc`\n- `tx`\n- `u`\n- `wallet`\n\nThese are the minimum packages deemed necessary for basic functionality for\ninteraction with the blockchain. The sub module `CONST` rounds off the core module with some defaults.\n\nFor users who just require the bare functionality, you may just use the core\npackage:\n\n```js\nimport { tx, wallet } from \"@cityofzion/neon-core\";\nconst t = new tx.Transaction();\nconst acct = new wallet.Account();\n```\n\n## Other packages\n\n### api\nProvides high level functionality for crafting transactions.\n\n### ledger\n\nProvides an easy wrapper for communicating with the NEO N3 app on a Ledger.\n\n### neon-js\n\nConstructed package using:\n\n- `neon-core`\n- `neon-api`\n\nIn addition, this package exposes a high level semantic API binding for beginner usage. The semantic API can be found in the default export of the package.\n\n```js\nconst Neon = require(\"@cityofzion/neon-js\");\n\nconsole.log(Neon); // {wallet, tx, api, nep5, etc...}\n\nconst NeonJs = Neon.default;\n\nconsole.log(NeonJs); // {create, get, sign, verify,...}\n```\n\nThe semantic API follows a convention of Verb-Noun. Any extra words beyond the first 2 is collapsed into the Noun and camelcased.\n\n```js\nNeonJs.create.stringStream(\"1234\");\nNeonJs.encrypt.privateKey(\"key\");\n```\n\n### uri\n\nProvides the ability to parse a NEO URI schema string into a consumable intent object.\n", "doc_id": "71c5c3f8-3d47-445a-9a9b-1a4d9603e17b", "embedding": null, "doc_hash": "3bc93eb189c7e9aaffa687c6dd1b072514f5d82930607fa65bdb3471463aa0fa", "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/structure"}, "node_info": {"start": 0, "end": 1572, "_node_type": "1"}, "relationships": {"1": "be160c9cc5ba7f37436e8a2b3df0fec060051879"}}, "__type__": "1"}, "dd6613d2-d102-4a8f-9006-7c31fc6f8965": {"__data__": {"text": "Getting Started\nCheck out our GitHub README page to see how you can install Neo3-Boa.\nWriting a smart contract\nIt\u2019s pretty easy to write a Python3 script with Neo3-Boa, since it is compatible with a lot of Python features. However, there are some key differences that you should be aware of, here\u2019s the 4 most prominent ones:\nthere is no floating point arithmetic, only the\ninttype is implemented;\nyou need to specify a function\u2019s return type and parameter types;\nif you want to call other smart contracts, you can only call public functions;\nto interact with the Neo blockchain, you need to use a function, variable, or class inside the\nboa3.builtinpackage.\nOverview of Neo3-Boa features\n|\n|\nPackages\n|\n|\nContains:\n|\n|\nImportant features\n|\n|\nall packages below, it also contains an env variable that lets you change the value of a variable when compiling the smart contract.\n|\n|\nmethods and classes that are needed when you are compiling your smart contract, as opposed to when it\u2019s being executed on the blockchain.\n|\n|\nevents and methods that might help when writing something specific about Neo blockchain\n|\n|\nother packages that have a lot of helpful interoperable services. Has some overlap with the native contracts.\n|\n|\nfeatures to get information on the Neo blockchain.\n|\n|\nfeatures related to smart contracts.\n|\n|\nfeatures related to cryptography.\n|\n|\nthe iterator class.\n|\n|\nmethods to serialize and deserialize JSON.\n|\n|\nfeatures related with Neo Oracle, it is used to get information from outside the blockchain.\n|\n|\nfeatures related to policies that affect the entire Neo blockchain.\n|\n|\nmethods to get information about the nodes on the blockchain.\n|\n|\nfeatures to get information that can only be acquired when running the smart contract.\n|\n|\n|\n|\nmethods that convert one data to another or methods that can check and compare memory.\n|\n|\nfeatures to store, get, or change values inside the blockchain.\n|\n|\n|\n|\nclasses that interface Neo\u2019s native contracts.\n|\n|\nNeo types.\n|\n|\nOpcodes used internally by the Neo VM, used to create scripts dynamically.\n|\n|\na small sample of functions similar to Python\u2019s math.\nHello World\nLet\u2019s write a quick Hello World script that has a method that will save\n\"Hello World\" on the blockchain\nand another method that will return the string.\nThose 2 functions will need to be callable and will also need to change the values inside the storage,\nso let\u2019s import both the\npublic decorator and the\nstorage package.\n# hello_world.py from boa3.builtin.compile_time import public from boa3.builtin.interop import storage @public # the public decorator will make this method callable def save_hello_world(): # an empty return type indicates that the return is None storage.put(b\"first script\", \"Hello World\") # the put method will store the \"Hello World\" value with the \"first script\" key @public # the public decorator will make this method callable too def get_hello_world() -> str: # this method will return a string, so it needs to specify it return str(storage.get(b\"first script\")) # the get method will return the value associated with \"first script\" key\nNeo Methods\nNeo currently has 2 special methods:\n_deploy and\nverify:\nfrom typing import Any from boa3.builtin.compile_time import public @public def _deploy(data: Any, update: bool): \"\"\" This method will automatically be called when the smart contract is deployed or updated. \"\"\" pass @public def verify() -> bool: \"\"\" When this contract address is included in the transaction signature, this method will be triggered as a VerificationTrigger to verify that the signature is correct. For example, this method needs to be called when withdrawing token from the contract. :return: whether the", "doc_id": "dd6613d2-d102-4a8f-9006-7c31fc6f8965", "embedding": null, "doc_hash": "1b9e41866d2d7b9150e9389782708163559b8e5e18d8251920168260af8fa680", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/getting-started.html"}, "node_info": {"start": 0, "end": 3692, "_node_type": "1"}, "relationships": {"1": "806afee7-97ad-4579-93e3-8c32e6dbac2b", "3": "a7844479-bfc3-4078-9161-8051777affde"}}, "__type__": "1"}, "a7844479-bfc3-4078-9161-8051777affde": {"__data__": {"text": "this method needs to be called when withdrawing token from the contract. :return: whether the transaction signature is correct \"\"\" pass\nSo, using the example above, if you want to set the\n\"Hello World\" message when you deploy your smart contract and have\nanother method to save a given string you could do the following:\n# hello_world_with_deploy.py from typing import Any from boa3.builtin.compile_time import public from boa3.builtin.interop import storage @public def _deploy(data: Any, update: bool): # the _deploy function needs to have this signature storage.put(b\"second script\", \"Hello World\") # \"Hello World\" will be stored when this smart contract is deployed @public def get_message() -> str: # this method will still try to get the value saved on the blockchain return str(storage.get(b\"second script\")) @public def set_message(new_message: str): # now this method will overwrite a new string on the blockchain storage.put(b\"second script\", new_message)\nCompiling your Smart Contract\nUsing CLI\n$ neo3-boa compile path/to/your/file.py\nNote: When resolving compilation errors it is recommended to resolve the first reported error and try to compile again. An error can have a cascading effect and throw more errors all caused by the first.\nUsing Python Script\nfrom boa3.boa3 import Boa3 Boa3.compile_and_save('path/to/your/file.py')\nReference Examples and Tutorials\nCheck out Neo3-boa tutorials on Neo Developer.\nFor an extensive collection of examples:", "doc_id": "a7844479-bfc3-4078-9161-8051777affde", "embedding": null, "doc_hash": "adcd3e3b3b3223d8771308878ef2310c5a5c261d59191b48a732eac084f73e58", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/getting-started.html"}, "node_info": {"start": 3599, "end": 5062, "_node_type": "1"}, "relationships": {"1": "806afee7-97ad-4579-93e3-8c32e6dbac2b", "2": "dd6613d2-d102-4a8f-9006-7c31fc6f8965"}}, "__type__": "1"}, "7d31ab70-55f1-4523-8ec2-19e616c04470": {"__data__": {"text": "2. Tutorials\u00b6\nThis section presents a few examples of Python code that can be compiled by Neo3-Boa into actual Smart Contracts and deployed to the Neo Blockchain.\nThe main goal of these tutorials is to introduce Blockchain concepts to the Python developer. In each of them, we will try to highlight basic concepts of Smart Contract logic, pinpointing the ways in which it differs from usual programming logic, and the structural reasons behind those differences.\nAll of the examples presented here can be found in the examples folder of the Neo3-Boa repository\n2.1 Hello World\u00b6\nWarning\nCONTENT MISSING: Brief Tutorial Description of Hello World\nfrom boa3.builtin.compile_time import NeoMetadata, metadata, public from boa3.builtin.interop import storage @public def Main(): storage.put(b'hello', b'world') @metadata def manifest() -> NeoMetadata: meta = NeoMetadata() meta.author = \"COZ in partnership with Simpli\" meta.email = \"contact@coz.io\" meta.description = 'This is a contract example' return meta\n2.2 Neo Token Standard (NEP-17)\u00b6\nWarning\nCONTENT MISSING: Brief Tutorial Description of NEP-17\nfrom typing import Any, Union from boa3.builtin.compile_time import NeoMetadata, metadata, public from boa3.builtin.contract import Nep17TransferEvent, abort from boa3.builtin.interop import runtime, storage from boa3.builtin.interop.contract import GAS as GAS_SCRIPT, NEO as NEO_SCRIPT, call_contract from boa3.builtin.nativecontract.contractmanagement import ContractManagement from boa3.builtin.type import UInt160 # ------------------------------------------- # METADATA # ------------------------------------------- @metadata def manifest_metadata() -> NeoMetadata: \"\"\" Defines this smart contract's metadata information \"\"\" meta = NeoMetadata() meta.supported_standards = ['NEP-17'] meta.add_permission(methods=['onNEP17Payment']) meta.author = \"Mirella Medeiros, Ricardo Prado and Lucas Uezu. COZ in partnership with Simpli\" meta.description = \"NEP-17 Example\" meta.email = \"contact@coz.io\" return meta # ------------------------------------------- # TOKEN SETTINGS # ------------------------------------------- # Script hash of the contract owner OWNER = UInt160() SUPPLY_KEY = 'totalSupply' # Symbol of the Token TOKEN_SYMBOL = 'NEP17' # Number of decimal places TOKEN_DECIMALS = 8 # Total Supply of tokens in the system TOKEN_TOTAL_SUPPLY = 10_000_000 * 10 ** TOKEN_DECIMALS # 10m total supply * 10^8 (decimals) # Value of this NEP-17 token corresponds to NEO AMOUNT_PER_NEO = 10 # Value of this NEP-17 token compared to GAS AMOUNT_PER_GAS = 2 # ------------------------------------------- # Events # ------------------------------------------- on_transfer = Nep17TransferEvent # ------------------------------------------- # Methods # ------------------------------------------- @public(safe=True) def symbol() -> str: \"\"\" Gets the symbols of the token. This string must be valid ASCII, must not contain whitespace or control characters, should be limited to uppercase Latin alphabet (i.e. the 26 letters used in English) and should be short (3-8 characters is recommended). This method must always return the same value every time it is invoked. :return: a short string representing symbol of the token managed in this contract. \"\"\" return TOKEN_SYMBOL @public(safe=True) def decimals() -> int: \"\"\" Gets the amount of decimals used by the token. E.g. 8, means to divide the token amount by 100,000,000 (10 ^ 8) to get its user representation. This method must always return the same value every time it is invoked. :return: the number of decimals used by the token. \"\"\" return TOKEN_DECIMALS @public(name='totalSupply', safe=True) def total_supply() -> int: \"\"\"", "doc_id": "7d31ab70-55f1-4523-8ec2-19e616c04470", "embedding": null, "doc_hash": "d4017b193772b7d257b9e56996c029e742100fe58caf2d41bb12dca996db0762", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 0, "end": 3673, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "3": "6be4d1c5-0e6d-4792-885e-f2fa760af469"}}, "__type__": "1"}, "6be4d1c5-0e6d-4792-885e-f2fa760af469": {"__data__": {"text": "safe=True) def total_supply() -> int: \"\"\" Gets the total token supply deployed in the system. This number must not be in its user representation. E.g. if the total supply is 10,000,000 tokens, this method must return 10,000,000 * 10 ^ decimals. :return: the total token supply deployed in the system. \"\"\" return storage.get(SUPPLY_KEY).to_int() @public(name='balanceOf', safe=True) def balance_of(account: UInt160) -> int: \"\"\" Get the current balance of an address The parameter account must be a 20-byte address represented by a UInt160. :param account: the account address to retrieve the balance for :type account: UInt160 \"\"\" assert len(account) == 20 return storage.get(account).to_int() @public def transfer(from_address: UInt160, to_address: UInt160, amount: int, data: Any) -> bool: \"\"\" Transfers an amount of NEP17 tokens from one account to another If the method succeeds, it must fire the `Transfer` event and must return true, even if the amount is 0, or from and to are the same address. :param from_address: the address to transfer from :type from_address: UInt160 :param to_address: the address to transfer to :type to_address: UInt160 :param amount: the amount of NEP17 tokens to transfer :type amount: int :param data: whatever data is pertinent to the onPayment method :type data: Any :return: whether the transfer was successful :raise AssertionError: raised if `from_address` or `to_address` length is not 20 or if `amount` is less than zero. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(from_address) == 20 and len(to_address) == 20 # the parameter amount must be greater than or equal to 0. If not, this method should throw an exception. assert amount >= 0 # The function MUST return false if the from account balance does not have enough tokens to spend. from_balance = storage.get(from_address).to_int() if from_balance < amount: return False # The function should check whether the from address equals the caller contract hash. # If so, the transfer should be processed; # If not, the function should use the check_witness to verify the transfer. if from_address != runtime.calling_script_hash: if not runtime.check_witness(from_address): return False # skip balance changes if transferring to yourself or transferring 0 cryptocurrency if from_address != to_address and amount != 0: if from_balance == amount: storage.delete(from_address) else: storage.put(from_address, from_balance - amount) to_balance = storage.get(to_address).to_int() storage.put(to_address, to_balance + amount) # if the method succeeds, it must fire the transfer event on_transfer(from_address, to_address, amount) # if the to_address is a smart contract, it must call the contracts onPayment post_transfer(from_address, to_address, amount, data) # and then it must return true return True def post_transfer(from_address: Union[UInt160, None], to_address: Union[UInt160, None], amount: int, data: Any): \"\"\" Checks if the one receiving NEP17 tokens is a smart contract and if it's one the onPayment method will be called :param from_address: the address of the sender :type from_address: UInt160 :param to_address: the address of the receiver :type to_address: UInt160 :param amount: the amount of cryptocurrency that is being sent :type amount: int :param data: any pertinent data that might validate the transaction :type data: Any \"\"\" if to_address is not None: contract = ContractManagement.get_contract(to_address) if contract is not None: call_contract(to_address, 'onNEP17Payment', [from_address, amount, data]) def mint(account: UInt160, amount: int): \"\"\" Mints new tokens. This", "doc_id": "6be4d1c5-0e6d-4792-885e-f2fa760af469", "embedding": null, "doc_hash": "35f1dd5732834423a61658bea79d6f64d23984ea59fe167130438b2f2d6855ec", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 3638, "end": 7297, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "7d31ab70-55f1-4523-8ec2-19e616c04470", "3": "7dac8eed-fcfa-4d81-ba1f-7c744ecb17af"}}, "__type__": "1"}, "7dac8eed-fcfa-4d81-ba1f-7c744ecb17af": {"__data__": {"text": "UInt160, amount: int): \"\"\" Mints new tokens. This is not a NEP-17 standard method, it's only being use to complement the onPayment method :param account: the address of the account that is sending cryptocurrency to this contract :type account: UInt160 :param amount: the amount of gas to be refunded :type amount: int :raise AssertionError: raised if amount is less than than 0 \"\"\" assert amount >= 0 if amount != 0: current_total_supply = total_supply() account_balance = balance_of(account) storage.put(SUPPLY_KEY, current_total_supply + amount) storage.put(account, account_balance + amount) on_transfer(None, account, amount) post_transfer(None, account, amount, None) @public def verify() -> bool: \"\"\" When this contract address is included in the transaction signature, this method will be triggered as a VerificationTrigger to verify that the signature is correct. For example, this method needs to be called when withdrawing token from the contract. :return: whether the transaction signature is correct \"\"\" return runtime.check_witness(OWNER) @public def _deploy(data: Any, update: bool): \"\"\" Initializes the storage when the smart contract is deployed. :return: whether the deploy was successful. This method must return True only during the smart contract's deploy. \"\"\" if not update: storage.put(SUPPLY_KEY, TOKEN_TOTAL_SUPPLY) storage.put(OWNER, TOKEN_TOTAL_SUPPLY) on_transfer(None, OWNER, TOKEN_TOTAL_SUPPLY) @public def onNEP17Payment(from_address: UInt160, amount: int, data: Any): \"\"\" NEP-17 affirms :\"if the receiver is a deployed contract, the function MUST call onPayment method on receiver contract with the data parameter from transfer AFTER firing the Transfer event. If the receiver doesn't want to receive this transfer it MUST call ABORT.\" Therefore, since this is a smart contract, onPayment must exists. There is no guideline as to how it should verify the transaction and it's up to the user to make this verification. For instance, this onPayment method checks if this smart contract is receiving NEO or GAS so that it can mint a NEP17 token. If it's not receiving a native token, than it will abort. :param from_address: the address of the one who is trying to send cryptocurrency to this smart contract :type from_address: UInt160 :param amount: the amount of cryptocurrency that is being sent to the this smart contract :type amount: int :param data: any pertinent data that might validate the transaction :type data: Any \"\"\" # Use calling_script_hash to identify if the incoming token is NEO or GAS if runtime.calling_script_hash == NEO_SCRIPT: corresponding_amount = amount * AMOUNT_PER_NEO mint(from_address, corresponding_amount) elif runtime.calling_script_hash == GAS_SCRIPT: corresponding_amount = amount * AMOUNT_PER_GAS mint(from_address, corresponding_amount) else: abort()\n2.3 Hashed Timelock Contract (HTLC)\u00b6\nWarning\nCONTENT MISSING: Brief Tutorial Description of HTLC\nfrom typing import Any from boa3.builtin.compile_time import NeoMetadata, metadata, public from boa3.builtin.contract import abort from boa3.builtin.interop import runtime, storage from boa3.builtin.interop.contract import GAS as GAS_SCRIPT, call_contract from boa3.builtin.interop.crypto import hash160 from boa3.builtin.type import UInt160 # ------------------------------------------- # METADATA # ------------------------------------------- @metadata def manifest_metadata() -> NeoMetadata: \"\"\" Defines this smart contract's metadata information \"\"\" meta = NeoMetadata() return meta # ------------------------------------------- # VARIABLES SETTINGS # ------------------------------------------- OWNER = UInt160() PERSON_A: bytes = b'person a' PERSON_B: bytes = b'person b' ADDRESS_PREFIX: bytes =", "doc_id": "7dac8eed-fcfa-4d81-ba1f-7c744ecb17af", "embedding": null, "doc_hash": "fe6a1225bf9c7d3082e7cafab78fe5469341a57497a8fb1f46ba2fbe26d0ae04", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 7292, "end": 11008, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "6be4d1c5-0e6d-4792-885e-f2fa760af469", "3": "bb7814e6-6b61-4a03-aa47-7e171e8d40eb"}}, "__type__": "1"}, "bb7814e6-6b61-4a03-aa47-7e171e8d40eb": {"__data__": {"text": "bytes = b'person b' ADDRESS_PREFIX: bytes = b'address' AMOUNT_PREFIX: bytes = b'amount' TOKEN_PREFIX: bytes = b'token' FUNDED_PREFIX: bytes = b'funded' # Number of seconds that need to pass before refunding the contract LOCK_TIME = 15 * 1 NOT_INITIALIZED: bytes = b'not initialized' START_TIME: bytes = b'start time' SECRET_HASH: bytes = b'secret hash' # ------------------------------------------- # Methods # ------------------------------------------- @public def verify() -> bool: \"\"\" When this contract address is included in the transaction signature, this method will be triggered as a VerificationTrigger to verify that the signature is correct. For example, this method needs to be called when withdrawing token from the contract. :return: whether the transaction signature is correct \"\"\" return runtime.check_witness(OWNER) @public def _deploy(data: Any, update: bool): \"\"\" Initializes OWNER and change values of NOT_INITIALIZED and DEPLOYED when the smart contract is deployed. :return: whether the deploy was successful. This method must return True only during the smart contract's deploy. \"\"\" if not update: storage.put(OWNER, OWNER) storage.put(NOT_INITIALIZED, True) @public def atomic_swap(person_a_address: UInt160, person_a_token: bytes, person_a_amount: int, person_b_address: UInt160, person_b_token: bytes, person_b_amount: int, secret_hash: bytes) -> bool: \"\"\" Initializes the storage when the atomic swap starts. :param person_a_address: address of person_a :type person_a_address: UInt160 :param person_a_token: person_b's desired token :type person_a_token: bytes :param person_a_amount: person_b's desired amount of tokens :type person_a_amount: int :param person_b_address: address of person_b :type person_b_address: bytes :param person_b_token: person_a's desired token :type person_b_token: bytes :param person_b_amount: person_a's desired amount of tokens :type person_b_amount: int :param secret_hash: the secret hash created by the contract deployer :type secret_hash: bytes :return: whether the deploy was successful or not :rtype: bool :raise AssertionError: raised if `person_a_address` or `person_b_address` length is not 20 or if `amount` is not greater than zero. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(person_a_address) == 20 and len(person_b_address) == 20 # the parameter amount must be greater than 0. If not, this method should throw an exception. assert person_a_amount > 0 and person_b_amount > 0 if storage.get(NOT_INITIALIZED).to_bool() and verify(): storage.put(ADDRESS_PREFIX + PERSON_A, person_a_address) storage.put(TOKEN_PREFIX + PERSON_A, person_a_token) storage.put(AMOUNT_PREFIX + PERSON_A, person_a_amount) storage.put(ADDRESS_PREFIX + PERSON_B, person_b_address) storage.put(TOKEN_PREFIX + PERSON_B, person_b_token) storage.put(AMOUNT_PREFIX + PERSON_B, person_b_amount) storage.put(SECRET_HASH, secret_hash) storage.put(NOT_INITIALIZED, False) storage.put(START_TIME, runtime.time) return True return False @public def onNEP17Payment(from_address: UInt160, amount: int, data: Any): \"\"\" Since this is a deployed contract, transfer will be calling this onPayment method with the data parameter from transfer. If someone is doing a not required transfer, then ABORT will be called. :param from_address: the address of the one who", "doc_id": "bb7814e6-6b61-4a03-aa47-7e171e8d40eb", "embedding": null, "doc_hash": "785118246eff2bfb21d77e3214aa5e11357060e02e9d82620cd037c0988c61cb", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 11014, "end": 14381, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "7dac8eed-fcfa-4d81-ba1f-7c744ecb17af", "3": "b8469c15-fba8-4920-acc0-15daf71b261a"}}, "__type__": "1"}, "b8469c15-fba8-4920-acc0-15daf71b261a": {"__data__": {"text": "then ABORT will be called. :param from_address: the address of the one who is trying to transfer cryptocurrency to this smart contract :type from_address: UInt160 :param amount: the amount of cryptocurrency that is being sent to this smart contract :type amount: int :param data: any pertinent data that may validate the transaction :type data: Any :raise AssertionError: raised if `from_address` length is not 20 \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. aux_var = from_address is not None # TODO: using identity operators or isinstance as a condition of an if is bugged if aux_var: assert len(from_address) == 20 # this validation will verify if Neo is trying to mint GAS to this smart contract aux_var = from_address is None # TODO: using identity operators or isinstance as a condition of an if is bugged if aux_var and runtime.calling_script_hash == GAS_SCRIPT: return if not storage.get(NOT_INITIALIZED).to_bool(): # Used to check if the one who's transferring to this contract is the PERSON_A address = storage.get(ADDRESS_PREFIX + PERSON_A) # Used to check if PERSON_A already transfer to this smart contract funded_crypto = storage.get(FUNDED_PREFIX + PERSON_A).to_int() # Used to check if PERSON_A is transferring the correct amount amount_crypto = storage.get(AMOUNT_PREFIX + PERSON_A).to_int() # Used to check if PERSON_A is transferring the correct token token_crypto = storage.get(TOKEN_PREFIX + PERSON_A) if (from_address == address and funded_crypto == 0 and amount == amount_crypto and runtime.calling_script_hash == token_crypto): storage.put(FUNDED_PREFIX + PERSON_A, amount) return else: # Used to check if the one who's transferring to this contract is the OTHER_PERSON address = storage.get(ADDRESS_PREFIX + PERSON_B) # Used to check if PERSON_B already transfer to this smart contract funded_crypto = storage.get(FUNDED_PREFIX + PERSON_B).to_int() # Used to check if PERSON_B is transferring the correct amount amount_crypto = storage.get(AMOUNT_PREFIX + PERSON_B).to_int() # Used to check if PERSON_B is transferring the correct token token_crypto = storage.get(TOKEN_PREFIX + PERSON_B) if (from_address == address and funded_crypto == 0 and amount == amount_crypto and runtime.calling_script_hash == token_crypto): storage.put(FUNDED_PREFIX + PERSON_B, amount) return abort() @public def withdraw(secret: str) -> bool: \"\"\" Deposits the contract's cryptocurrency into the person_a and person_b addresses as long as they both transferred to this contract and there is some time remaining :param secret: the private key that unlocks the transaction :type secret: str :return: whether the transfers were successful :rtype: bool \"\"\" # Checking if PERSON_A and PERSON_B transferred to this smart contract funded_person_a = storage.get(FUNDED_PREFIX + PERSON_A).to_int() funded_person_b = storage.get(FUNDED_PREFIX + PERSON_B).to_int() if verify() and not refund() and hash160(secret) == storage.get(SECRET_HASH) and funded_person_a != 0 and funded_person_b != 0: storage.put(FUNDED_PREFIX + PERSON_A, 0) storage.put(FUNDED_PREFIX + PERSON_B, 0) storage.put(NOT_INITIALIZED, True) storage.put(START_TIME, 0) call_contract(UInt160(storage.get(TOKEN_PREFIX + PERSON_B)), 'transfer', [runtime.executing_script_hash,", "doc_id": "b8469c15-fba8-4920-acc0-15daf71b261a", "embedding": null, "doc_hash": "bb6f76ff16c8e5fa8509a71a25437385293cbf23e58522622df07c739f358d74", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 14357, "end": 17654, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "bb7814e6-6b61-4a03-aa47-7e171e8d40eb", "3": "decf4224-ced9-4bfb-a210-363124f9d120"}}, "__type__": "1"}, "decf4224-ced9-4bfb-a210-363124f9d120": {"__data__": {"text": "+ PERSON_B)), 'transfer', [runtime.executing_script_hash, storage.get(ADDRESS_PREFIX + PERSON_A), storage.get(AMOUNT_PREFIX + PERSON_B), None]) call_contract(UInt160(storage.get(TOKEN_PREFIX + PERSON_A)), 'transfer', [runtime.executing_script_hash, storage.get(ADDRESS_PREFIX + PERSON_B), storage.get(AMOUNT_PREFIX + PERSON_A), None]) return True return False @public def refund() -> bool: \"\"\" If the atomic swap didn't occur in time, refunds the cryptocurrency that was deposited in this smart contract :return: whether enough time has passed and the cryptocurrencies were refunded :rtype: bool \"\"\" if runtime.time > storage.get(START_TIME).to_int() + LOCK_TIME: # Checking if PERSON_A transferred to this smart contract funded_crypto = storage.get(FUNDED_PREFIX + PERSON_A).to_int() if funded_crypto != 0: call_contract(UInt160(storage.get(TOKEN_PREFIX + PERSON_A)), 'transfer', [runtime.executing_script_hash, UInt160(storage.get(ADDRESS_PREFIX + PERSON_A)), storage.get(AMOUNT_PREFIX + PERSON_A).to_int(), None]) # Checking if PERSON_B transferred to this smart contract funded_crypto = storage.get(FUNDED_PREFIX + PERSON_B).to_int() if funded_crypto != 0: call_contract(UInt160(storage.get(TOKEN_PREFIX + PERSON_B)), 'transfer', [runtime.executing_script_hash, storage.get(ADDRESS_PREFIX + PERSON_B), storage.get(AMOUNT_PREFIX + PERSON_B).to_int(), None]) storage.put(FUNDED_PREFIX + PERSON_A, 0) storage.put(FUNDED_PREFIX + PERSON_B, 0) storage.put(NOT_INITIALIZED, True) storage.put(START_TIME, 0) return True return False\n2.4 Initial Coin Offering (ICO)\u00b6\nWarning\nCONTENT MISSING: Brief Tutorial Description of ICO\nfrom typing import Any, List, Union from boa3.builtin.compile_time import NeoMetadata, metadata, public from boa3.builtin.contract import Nep17TransferEvent from boa3.builtin.interop import runtime, storage from boa3.builtin.interop.contract import call_contract from boa3.builtin.nativecontract.contractmanagement import ContractManagement from boa3.builtin.nativecontract.gas import GAS as GAS_TOKEN from boa3.builtin.nativecontract.neo import NEO as NEO_TOKEN from boa3.builtin.type import UInt160 # ------------------------------------------- # METADATA # ------------------------------------------- @metadata def manifest_metadata() -> NeoMetadata: \"\"\" Defines this smart contract's metadata information \"\"\" meta = NeoMetadata() meta.supported_standards = ['NEP-17'] meta.add_permission(methods=['onNEP17Payment']) meta.author = \"Mirella Medeiros, Ricardo Prado and Lucas Uezu. COZ in partnership with Simpli\" meta.description = \"ICO Example\" meta.email = \"contact@coz.io\" return meta # ------------------------------------------- # Storage Key Prefixes # ------------------------------------------- KYC_WHITELIST_PREFIX = b'KYCWhitelistApproved' TOKEN_TOTAL_SUPPLY_PREFIX = b'TokenTotalSupply' TRANSFER_ALLOWANCE_PREFIX = b'TransferAllowancePrefix_' # ------------------------------------------- # TOKEN SETTINGS # ------------------------------------------- # Script hash of the contract owner TOKEN_OWNER = UInt160() # Symbol of the Token TOKEN_SYMBOL = 'ICO' # Number of decimal places TOKEN_DECIMALS = 8 # Initial Supply of tokens in the system TOKEN_INITIAL_SUPPLY =", "doc_id": "decf4224-ced9-4bfb-a210-363124f9d120", "embedding": null, "doc_hash": "4ac9a4e33890a836a4662ef36a9846a84b24814d87c540d26fb2f9747c5e3ad5", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 17663, "end": 20862, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "b8469c15-fba8-4920-acc0-15daf71b261a", "3": "0e4d8b11-2afc-4d35-886f-ddf393c8d891"}}, "__type__": "1"}, "0e4d8b11-2afc-4d35-886f-ddf393c8d891": {"__data__": {"text": "Supply of tokens in the system TOKEN_INITIAL_SUPPLY = 10_000_000 * 10 ** TOKEN_DECIMALS # 10m total supply * 10^8 (decimals) # ------------------------------------------- # Events # ------------------------------------------- on_transfer = Nep17TransferEvent # ------------------------------------------- # Methods # ------------------------------------------- @public def verify() -> bool: \"\"\" When this contract address is included in the transaction signature, this method will be triggered as a VerificationTrigger to verify that the signature is correct. For example, this method needs to be called when withdrawing token from the contract. :return: whether the transaction signature is correct \"\"\" return is_administrator() def is_administrator() -> bool: \"\"\" Validates if the invoker has administrative rights :return: whether the contract's invoker is an administrator \"\"\" return runtime.check_witness(TOKEN_OWNER) def is_valid_address(address: UInt160) -> bool: \"\"\" Validates if the address passed through the kyc. :return: whether the given address is validated by kyc \"\"\" return storage.get(KYC_WHITELIST_PREFIX + address).to_int() > 0 @public def _deploy(data: Any, update: bool): \"\"\" Initializes the storage when the smart contract is deployed. :return: whether the deploy was successful. This method must return True only during the smart contract's deploy. \"\"\" if not update: storage.put(TOKEN_TOTAL_SUPPLY_PREFIX, TOKEN_INITIAL_SUPPLY) storage.put(TOKEN_OWNER, TOKEN_INITIAL_SUPPLY) on_transfer(None, TOKEN_OWNER, TOKEN_INITIAL_SUPPLY) @public def mint(amount: int) -> bool: \"\"\" Mints new tokens :param amount: the amount of gas to be refunded :type amount: int :return: whether the refund was successful \"\"\" assert amount >= 0 if not is_administrator(): return False if amount > 0: current_total_supply = total_supply() owner_balance = balance_of(TOKEN_OWNER) storage.put(TOKEN_TOTAL_SUPPLY_PREFIX, current_total_supply + amount) storage.put(TOKEN_OWNER, owner_balance + amount) on_transfer(None, TOKEN_OWNER, amount) post_transfer(None, TOKEN_OWNER, amount, None) return True @public def refund(address: UInt160, neo_amount: int, gas_amount: int) -> bool: \"\"\" Refunds an address with given Neo and Gas :param address: the address that have the tokens :type address: UInt160 :param neo_amount: the amount of neo to be refunded :type neo_amount: int :param gas_amount: the amount of gas to be refunded :type gas_amount: int :return: whether the refund was successful \"\"\" assert len(address) == 20 assert neo_amount > 0 or gas_amount > 0 if not is_administrator(): return False if neo_amount > 0: result = NEO_TOKEN.transfer(runtime.calling_script_hash, address, neo_amount) if not result: # due to a current limitation in the neo3-boa, changing the condition to `not result` # will result in a compiler error return False if gas_amount > 0: result = GAS_TOKEN.transfer(runtime.calling_script_hash, address, gas_amount) if not result: # due to a current limitation in the neo3-boa, changing the condition to `not result` # will result in a compiler error return False return True # ------------------------------------------- # Public methods from NEP-17 # ------------------------------------------- @public(safe=True) def symbol() -> str: \"\"\" Gets the symbols of the token. This symbol should be short (3-8 characters is recommended), with no whitespace characters or new-lines and should be limited to the uppercase latin alphabet (i.e. the 26 letters used in English). This method must always return the same value every time it is invoked. :return: a short string symbol of the token managed in this contract. \"\"\" return TOKEN_SYMBOL @public(safe=True) def", "doc_id": "0e4d8b11-2afc-4d35-886f-ddf393c8d891", "embedding": null, "doc_hash": "c2f8d470f072b06a0cbf320744d064f59a6bd0cfd54a26d33f247ba9e9a71083", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 20871, "end": 24547, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "decf4224-ced9-4bfb-a210-363124f9d120", "3": "b2be3e16-de93-4923-9c13-374d2f66547a"}}, "__type__": "1"}, "b2be3e16-de93-4923-9c13-374d2f66547a": {"__data__": {"text": "in this contract. \"\"\" return TOKEN_SYMBOL @public(safe=True) def decimals() -> int: \"\"\" Gets the amount of decimals used by the token. E.g. 8, means to divide the token amount by 100,000,000 (10 ^ 8) to get its user representation. This method must always return the same value every time it is invoked. :return: the number of decimals used by the token. \"\"\" return TOKEN_DECIMALS @public(name='totalSupply', safe=True) def total_supply() -> int: \"\"\" Gets the total token supply deployed in the system. This number mustn't be in its user representation. E.g. if the total supply is 10,000,000 tokens, this method must return 10,000,000 * 10 ^ decimals. :return: the total token supply deployed in the system. \"\"\" return storage.get(TOKEN_TOTAL_SUPPLY_PREFIX).to_int() @public(name='balanceOf', safe=True) def balance_of(account: UInt160) -> int: \"\"\" Get the current balance of an address The parameter account should be a 20-byte address. :param account: the account address to retrieve the balance for :type account: UInt160 :return: the token balance of the `account` :raise AssertionError: raised if `account` length is not 20. \"\"\" assert len(account) == 20 return storage.get(account).to_int() @public def transfer(from_address: UInt160, to_address: UInt160, amount: int, data: Any) -> bool: \"\"\" Transfers a specified amount of NEP17 tokens from one account to another If the method succeeds, it must fire the `transfer` event and must return true, even if the amount is 0, or from and to are the same address. :param from_address: the address to transfer from :type from_address: UInt160 :param to_address: the address to transfer to :type to_address: UInt160 :param amount: the amount of NEP17 tokens to transfer :type amount: int :param data: whatever data is pertinent to the onPayment method :type data: Any :return: whether the transfer was successful :raise AssertionError: raised if `from_address` or `to_address` length is not 20 or if `amount` if less than zero. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(from_address) == 20 and len(to_address) == 20 # the parameter amount must be greater than or equal to 0. If not, this method should throw an exception. assert amount >= 0 # The function MUST return false if the from account balance does not have enough tokens to spend. from_balance = storage.get(from_address).to_int() if from_balance < amount: return False # The function should check whether the from address equals the caller contract hash. # If so, the transfer should be processed; # If not, the function should use the check_witness to verify the transfer. if from_address != runtime.calling_script_hash: if not runtime.check_witness(from_address): return False # skip balance changes if transferring to yourself or transferring 0 cryptocurrency if from_address != to_address and amount != 0: if from_balance == amount: storage.delete(from_address) else: storage.put(from_address, from_balance - amount) to_balance = storage.get(to_address).to_int() storage.put(to_address, to_balance + amount) # if the method succeeds, it must fire the transfer event on_transfer(from_address, to_address, amount) # if the to_address is a smart contract, it must call the contracts onPayment post_transfer(from_address, to_address, amount, data) # and then it must return true return True def post_transfer(from_address: Union[UInt160, None], to_address: Union[UInt160, None], amount: int, data: Any): \"\"\" Checks if the one receiving NEP17 tokens is a smart contract and if it's one the onPayment method will be called :param", "doc_id": "b2be3e16-de93-4923-9c13-374d2f66547a", "embedding": null, "doc_hash": "2a6b6a5f7ad5bccbab403a43f7fd5292faabd505e814e5b83fd54fe7cb524840", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 24537, "end": 28151, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "0e4d8b11-2afc-4d35-886f-ddf393c8d891", "3": "aaa9b34a-61d7-4bf3-a2b4-a42808693091"}}, "__type__": "1"}, "aaa9b34a-61d7-4bf3-a2b4-a42808693091": {"__data__": {"text": "is a smart contract and if it's one the onPayment method will be called :param from_address: the address of the sender :type from_address: UInt160 :param to_address: the address of the receiver :type to_address: UInt160 :param amount: the amount of cryptocurrency that is being sent :type amount: int :param data: any pertinent data that might validate the transaction :type data: Any \"\"\" if to_address is not None: contract = ContractManagement.get_contract(to_address) if contract is not None: call_contract(to_address, 'onNEP17Payment', [from_address, amount, data]) @public def allowance(from_address: UInt160, to_address: UInt160) -> int: \"\"\" Returns the amount of tokens that the to account can transfer from the from account. :param from_address: the address that have the tokens :type from_address: UInt160 :param to_address: the address that is authorized to use the tokens :type to_address: UInt160 :return: the amount of tokens that the `to` account can transfer from the `from` account :raise AssertionError: raised if `from_address` or `to_address` length is not 20. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(from_address) == 20 and len(to_address) == 20 return storage.get(TRANSFER_ALLOWANCE_PREFIX + from_address + to_address).to_int() @public(name='transferFrom') def transfer_from(originator: UInt160, from_address: UInt160, to_address: UInt160, amount: int, data: Any) -> bool: \"\"\" Transfers an amount from the `from` account to the `to` account if the `originator` has been approved to transfer the requested amount. :param originator: the address where the actual token is :type originator: UInt160 :param from_address: the address to transfer from with originator's approval :type from_address: UInt160 :param to_address: the address to transfer to :type to_address: UInt160 :param amount: the amount of NEP17 tokens to transfer :type amount: int :param data: any pertinent data that might validate the transaction :type data: Any :return: whether the transfer was successful :raise AssertionError: raised if `from_address` or `to_address` length is not 20 or if `amount` if less than zero. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(originator) == 20 and len(from_address) == 20 and len(to_address) == 20 # the parameter amount must be greater than or equal to 0. If not, this method should throw an exception. assert amount >= 0 # The function should check whether the from address equals the caller contract hash. # If so, the transfer should be processed; # If not, the function should use the check_witness to verify the transfer. if from_address != runtime.calling_script_hash: if not runtime.check_witness(from_address): return False approved_transfer_amount = allowance(originator, from_address) if approved_transfer_amount < amount: return False originator_balance = balance_of(originator) if originator_balance < amount: return False # update allowance between originator and from if approved_transfer_amount == amount: storage.delete(TRANSFER_ALLOWANCE_PREFIX + originator + from_address) else: storage.put(TRANSFER_ALLOWANCE_PREFIX + originator + from_address, approved_transfer_amount - amount) # skip balance changes if transferring to yourself or transferring 0 cryptocurrency if amount != 0 and from_address != to_address: # update originator's balance if originator_balance == amount: storage.delete(originator) else: storage.put(originator, originator_balance - amount) # updates to's balance to_balance = storage.get(to_address).to_int() storage.put(to_address, to_balance + amount) # if the method succeeds, it must fire the transfer", "doc_id": "aaa9b34a-61d7-4bf3-a2b4-a42808693091", "embedding": null, "doc_hash": "38e77f86f9aa71039384efd09ce62cc5859399aa2c6f05b14ab16b92a31d0cac", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 28145, "end": 31874, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "b2be3e16-de93-4923-9c13-374d2f66547a", "3": "2b3010f0-51b3-4c3b-bdf9-fc533c98c6b7"}}, "__type__": "1"}, "2b3010f0-51b3-4c3b-bdf9-fc533c98c6b7": {"__data__": {"text": "to_balance + amount) # if the method succeeds, it must fire the transfer event on_transfer(from_address, to_address, amount) # if the to_address is a smart contract, it must call the contracts onPayment post_transfer(from_address, to_address, amount, data) # and then it must return true return True @public def approve(originator: UInt160, to_address: UInt160, amount: int) -> bool: \"\"\" Approves the to account to transfer amount tokens from the originator account. :param originator: the address that have the tokens :type originator: UInt160 :param to_address: the address that is authorized to use the tokens :type to_address: UInt160 :param amount: the amount of NEP17 tokens to transfer :type amount: int :return: whether the approval was successful :raise AssertionError: raised if `originator` or `to_address` length is not 20 or if `amount` if less than zero. \"\"\" assert len(originator) == 20 and len(to_address) == 20 assert amount >= 0 if not runtime.check_witness(originator): return False if originator == to_address: return False if not is_valid_address(originator) or not is_valid_address(to_address): # one of the address doesn't passed the kyc yet return False if balance_of(originator) < amount: return False storage.put(TRANSFER_ALLOWANCE_PREFIX + originator + to_address, amount) return True # ------------------------------------------- # Public methods from KYC # ------------------------------------------- @public def kyc_register(addresses: List[UInt160]) -> int: \"\"\" Includes the given addresses to the kyc whitelist :param addresses: a list with the addresses to be included :return: the number of included addresses \"\"\" included_addresses = 0 if is_administrator(): for address in addresses: if len(address) == 20: kyc_key = KYC_WHITELIST_PREFIX + address storage.put(kyc_key, True) included_addresses += 1 return included_addresses @public def kyc_remove(addresses: List[UInt160]) -> int: \"\"\" Removes the given addresses from the kyc whitelist :param addresses: a list with the addresses to be removed :return: the number of removed addresses \"\"\" removed_addresses = 0 if is_administrator(): for address in addresses: if len(address) == 20: kyc_key = KYC_WHITELIST_PREFIX + address storage.delete(kyc_key) removed_addresses += 1 return removed_addresses\n2.5 Wrapped Token\u00b6\nWarning\nCONTENT MISSING: Brief Tutorial Description of Wrapped Token\nfrom typing import Any, Union from boa3.builtin.compile_time import CreateNewEvent, NeoMetadata, metadata, public from boa3.builtin.contract import Nep17TransferEvent, abort from boa3.builtin.interop import runtime, storage from boa3.builtin.interop.contract import GAS as GAS_SCRIPT, NEO as NEO_SCRIPT, call_contract from boa3.builtin.nativecontract.contractmanagement import ContractManagement from boa3.builtin.nativecontract.neo import NEO as NEO_TOKEN from boa3.builtin.type import UInt160 # ------------------------------------------- # METADATA # ------------------------------------------- @metadata def manifest_metadata() -> NeoMetadata: \"\"\" Defines this smart contract's metadata information \"\"\" meta = NeoMetadata() meta.supported_standards = ['NEP-17'] meta.add_permission(methods=['onNEP17Payment']) # this contract needs to call NEO methods meta.add_permission(contract='0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5') meta.author = \"Mirella Medeiros, Ricardo Prado and Lucas Uezu. COZ in partnership with Simpli\" meta.description = \"Wrapped NEO Example\" meta.email = \"contact@coz.io\" return meta # ------------------------------------------- # TOKEN SETTINGS # ------------------------------------------- # Script hash of the contract", "doc_id": "2b3010f0-51b3-4c3b-bdf9-fc533c98c6b7", "embedding": null, "doc_hash": "2d3f1c0358ff1e208228bd6338f233dae0ac115ad1b7409ee53f421802735de9", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 31879, "end": 35497, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "aaa9b34a-61d7-4bf3-a2b4-a42808693091", "3": "7c0f9935-c11c-4d90-a19e-c5566823c75a"}}, "__type__": "1"}, "7c0f9935-c11c-4d90-a19e-c5566823c75a": {"__data__": {"text": "return meta # ------------------------------------------- # TOKEN SETTINGS # ------------------------------------------- # Script hash of the contract owner OWNER = UInt160() SUPPLY_KEY = 'totalSupply' # Symbol of the Token TOKEN_SYMBOL = 'zNEO' # Number of decimal places TOKEN_DECIMALS = 8 # Total Supply of tokens in the system TOKEN_TOTAL_SUPPLY = 10_000_000 * 10 ** TOKEN_DECIMALS # 10m total supply * 10^8 (decimals) # Allowance ALLOWANCE_PREFIX = b'allowance' # ------------------------------------------- # Events # ------------------------------------------- on_transfer = Nep17TransferEvent on_approval = CreateNewEvent( [ ('owner', UInt160), ('spender', UInt160), ('amount', int) ], 'Approval' ) # ------------------------------------------- # Methods # ------------------------------------------- @public(safe=True) def symbol() -> str: \"\"\" Gets the symbols of the token. This string must be valid ASCII, must not contain whitespace or control characters, should be limited to uppercase Latin alphabet (i.e. the 26 letters used in English) and should be short (3-8 characters is recommended). This method must always return the same value every time it is invoked. :return: a short string representing symbol of the token managed in this contract. \"\"\" return TOKEN_SYMBOL @public(safe=True) def decimals() -> int: \"\"\" Gets the amount of decimals used by the token. E.g. 8, means to divide the token amount by 100,000,000 (10 ^ 8) to get its user representation. This method must always return the same value every time it is invoked. :return: the number of decimals used by the token. \"\"\" return TOKEN_DECIMALS @public(name='totalSupply', safe=True) def total_supply() -> int: \"\"\" Gets the total token supply deployed in the system. This number must not be in its user representation. E.g. if the total supply is 10,000,000 tokens, this method must return 10,000,000 * 10 ^ decimals. :return: the total token supply deployed in the system. \"\"\" return storage.get(SUPPLY_KEY).to_int() @public(name='balanceOf', safe=True) def balance_of(account: UInt160) -> int: \"\"\" Get the current balance of an address. The parameter account must be a 20-byte address represented by a UInt160. :param account: the account address to retrieve the balance for :type account: bytes \"\"\" assert len(account) == 20 return storage.get(account).to_int() @public def transfer(from_address: UInt160, to_address: UInt160, amount: int, data: Any) -> bool: \"\"\" Transfers an amount of zNEO tokens from one account to another. If the method succeeds, it must fire the `Transfer` event and must return true, even if the amount is 0, or from and to are the same address. :param from_address: the address to transfer from :type from_address: UInt160 :param to_address: the address to transfer to :type to_address: UInt160 :param amount: the amount of zNEO tokens to transfer :type amount: int :param data: whatever data is pertinent to the onPayment method :type data: Any :return: whether the transfer was successful :raise AssertionError: raised if `from_address` or `to_address` length is not 20 or if `amount` if less than zero. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(from_address) == 20 and len(to_address) == 20 # the parameter amount must be greater than or equal to 0. If not, this method should throw an exception. assert amount >= 0 # The function MUST return false if the from account balance does not have enough tokens to spend. from_balance = storage.get(from_address).to_int() if from_balance < amount: return False # The function should check whether the from address equals the caller contract hash. # If so, the transfer should be processed; # If not, the function should use the", "doc_id": "7c0f9935-c11c-4d90-a19e-c5566823c75a", "embedding": null, "doc_hash": "0d6358aa6ae7580f7227cc6070bfe1444428f3d29916a8455694ea592a102529", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 35422, "end": 39179, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "2b3010f0-51b3-4c3b-bdf9-fc533c98c6b7", "3": "df6ce6ff-1f28-4260-8c1f-61da2f96575c"}}, "__type__": "1"}, "df6ce6ff-1f28-4260-8c1f-61da2f96575c": {"__data__": {"text": "# If so, the transfer should be processed; # If not, the function should use the check_witness to verify the transfer. if from_address != runtime.calling_script_hash: if not runtime.check_witness(from_address): return False # skip balance changes if transferring to yourself or transferring 0 cryptocurrency if from_address != to_address and amount != 0: if from_balance == amount: storage.delete(from_address) else: storage.put(from_address, from_balance - amount) to_balance = storage.get(to_address).to_int() storage.put(to_address, to_balance + amount) # if the method succeeds, it must fire the transfer event on_transfer(from_address, to_address, amount) # if the to_address is a smart contract, it must call the contracts onPayment post_transfer(from_address, to_address, amount, data, True) # and then it must return true return True @public(name='transferFrom') def transfer_from(spender: UInt160, from_address: UInt160, to_address: UInt160, amount: int, data: Any) -> bool: \"\"\" A spender transfers an amount of zNEO tokens allowed from one account to another. If the method succeeds, it must fire the `Transfer` event and must return true, even if the amount is 0, or from and to are the same address. :param spender: the address that is trying to transfer zNEO tokens :type spender: UInt160 :param from_address: the address to transfer from :type from_address: UInt160 :param to_address: the address to transfer to :type to_address: UInt160 :param amount: the amount of zNEO tokens to transfer :type amount: int :param data: whatever data is pertinent to the onPayment method :type data: Any :return: whether the transfer was successful :raise AssertionError: raised if `spender`, `from_address` or `to_address` length is not 20 or if `amount` is less than zero. \"\"\" # the parameters from and to should be 20-byte addresses. If not, this method should throw an exception. assert len(spender) == 20 and len(from_address) == 20 and len(to_address) == 20 # the parameter amount must be greater than or equal to 0. If not, this method should throw an exception. assert amount >= 0 # The function MUST return false if the from account balance does not have enough tokens to spend. from_balance = storage.get(from_address).to_int() if from_balance < amount: return False # The function MUST return false if the from account balance does not allow enough tokens to be spent by the spender. allowed = allowance(from_address, spender) if allowed < amount: return False # The function should check whether the spender address equals the caller contract hash. # If so, the transfer should be processed; # If not, the function should use the check_witness to verify the transfer. if spender != runtime.calling_script_hash: if not runtime.check_witness(spender): return False if allowed == amount: storage.delete(ALLOWANCE_PREFIX + from_address + spender) else: storage.put(ALLOWANCE_PREFIX + from_address + spender, allowed - amount) # skip balance changes if transferring to yourself or transferring 0 cryptocurrency if from_address != to_address and amount != 0: if from_balance == amount: storage.delete(from_address) else: storage.put(from_address, from_balance - amount) to_balance = storage.get(to_address).to_int() storage.put(to_address, to_balance + amount) # if the method succeeds, it must fire the transfer event on_transfer(from_address, to_address, amount) # if the to_address is a smart contract, it must call the contracts onPayment post_transfer(from_address, to_address, amount, data, True) # and then it must return true return True @public def approve(spender: UInt160, amount: int) -> bool: \"\"\" Allows spender to spend from your account as many times as they want until", "doc_id": "df6ce6ff-1f28-4260-8c1f-61da2f96575c", "embedding": null, "doc_hash": "4d5f086336ab8a3f2710a30da78ee6832efcf899f664817791832c0c538ea32b", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 39251, "end": 42940, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "7c0f9935-c11c-4d90-a19e-c5566823c75a", "3": "4beb65d5-0111-4380-9c7b-601c7c7ccb66"}}, "__type__": "1"}, "4beb65d5-0111-4380-9c7b-601c7c7ccb66": {"__data__": {"text": "-> bool: \"\"\" Allows spender to spend from your account as many times as they want until it reaches the amount allowed. The allowed amount will be overwritten if this method is called once more. :param spender: the address that will be allowed to use your zNEO :type spender: UInt160 :param amount: the total amount of zNEO that the spender can spent :type amount: int :raise AssertionError: raised if `from_address` length is not 20 or if `amount` if less than zero. \"\"\" assert len(spender) == 20 assert amount >= 0 if balance_of(runtime.calling_script_hash) >= amount: storage.put(ALLOWANCE_PREFIX + runtime.calling_script_hash + spender, amount) on_approval(runtime.calling_script_hash, spender, amount) return True return False @public def allowance(owner: UInt160, spender: UInt160) -> int: \"\"\" Gets the amount of zNEO from the owner that can be used by the spender. :param owner: the address that allowed the spender to spend zNEO :type owner: UInt160 :param spender: the address that can spend zNEO from the owner's account :type spender: UInt160 \"\"\" return storage.get(ALLOWANCE_PREFIX + owner + spender).to_int() def post_transfer(from_address: Union[UInt160, None], to_address: Union[UInt160, None], amount: int, data: Any, call_onPayment: bool): \"\"\" Checks if the one receiving NEP17 tokens is a smart contract and if it's one the onPayment method will be called. :param from_address: the address of the sender :type from_address: UInt160 :param to_address: the address of the receiver :type to_address: UInt160 :param amount: the amount of cryptocurrency that is being sent :type amount: int :param data: any pertinent data that might validate the transaction :type data: Any :param call_onPayment: whether onPayment should be called or not :type call_onPayment: bool \"\"\" if call_onPayment: if to_address is not None: contract = ContractManagement.get_contract(to_address) if contract is not None: call_contract(to_address, 'onNEP17Payment', [from_address, amount, data]) def mint(account: UInt160, amount: int): \"\"\" Mints new zNEO tokens. :param account: the address of the account that is sending cryptocurrency to this contract :type account: UInt160 :param amount: the amount of gas to be refunded :type amount: int :raise AssertionError: raised if amount is less than than 0 \"\"\" assert amount >= 0 if amount != 0: current_total_supply = total_supply() account_balance = balance_of(account) storage.put(SUPPLY_KEY, current_total_supply + amount) storage.put(account, account_balance + amount) on_transfer(None, account, amount) post_transfer(None, account, amount, None, True) @public(safe=True) def burn(account: UInt160, amount: int): \"\"\" Burns zNEO tokens. :param account: the address of the account that is pulling out cryptocurrency of this contract :type account: UInt160 :param amount: the amount of gas to be refunded :type amount: int :raise AssertionError: raised if `account` length is not 20, amount is less than than 0 or the account doesn't have enough zNEO to burn \"\"\" assert len(account) == 20 assert amount >= 0 if runtime.check_witness(account): if amount != 0: current_total_supply = total_supply() account_balance = balance_of(account) assert account_balance >= amount storage.put(SUPPLY_KEY, current_total_supply - amount) if account_balance == amount: storage.delete(account) else: storage.put(account, account_balance - amount) on_transfer(account, None, amount) post_transfer(account, None, amount, None, False) NEO_TOKEN.transfer(runtime.executing_script_hash, account, amount) @public def verify() ->", "doc_id": "4beb65d5-0111-4380-9c7b-601c7c7ccb66", "embedding": null, "doc_hash": "f8661f3e1e5e2676019238eb9b98307dc39abb647790b1909fb618516f379755", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 42935, "end": 46476, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "df6ce6ff-1f28-4260-8c1f-61da2f96575c", "3": "f4c44992-20e3-49db-a0c7-33f894b432c2"}}, "__type__": "1"}, "f4c44992-20e3-49db-a0c7-33f894b432c2": {"__data__": {"text": "account, amount) @public def verify() -> bool: \"\"\" When this contract address is included in the transaction signature, this method will be triggered as a VerificationTrigger to verify that the signature is correct. For example, this method needs to be called when withdrawing token from the contract. :return: whether the transaction signature is correct \"\"\" return runtime.check_witness(OWNER) @public def _deploy(data: Any, update: bool): \"\"\" Initializes the storage when the smart contract is deployed. :return: whether the deploy was successful. This method must return True only during the smart contract's deploy. \"\"\" if not update: storage.put(SUPPLY_KEY, TOKEN_TOTAL_SUPPLY) storage.put(OWNER, TOKEN_TOTAL_SUPPLY) on_transfer(None, OWNER, TOKEN_TOTAL_SUPPLY) @public def onNEP17Payment(from_address: UInt160, amount: int, data: Any): \"\"\" If this smart contract receives NEO, it will mint an amount of wrapped NEO :param from_address: the address of the one who is trying to send cryptocurrency to this smart contract :type from_address: UInt160 :param amount: the amount of cryptocurrency that is being sent to the this smart contract :type amount: int :param data: any pertinent data that might validate the transaction :type data: Any \"\"\" # Use calling_script_hash to identify if the incoming token is NEO if runtime.calling_script_hash == NEO_SCRIPT: mint(from_address, amount) elif runtime.calling_script_hash == GAS_SCRIPT: # GAS is minted when transferring NEO return else: abort()", "doc_id": "f4c44992-20e3-49db-a0c7-33f894b432c2", "embedding": null, "doc_hash": "a99175b987c2bb891773a83eaf13d42b75eea692117482b41dac66bc0dc65894", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}, "node_info": {"start": 46507, "end": 48003, "_node_type": "1"}, "relationships": {"1": "01ab364d-31c8-4ad5-8ed5-5e1fd64607df", "2": "4beb65d5-0111-4380-9c7b-601c7c7ccb66"}}, "__type__": "1"}, "f459ddab-a159-40aa-82a8-c6e3095211ff": {"__data__": {"text": "3. Conceptual Overview\u00b6\nThis project is part of the Neo Python Framework, aimed to allow the full development of dApps using Python alone.\nNeo3-Boa is a tool for creating Neo Smart Contracts using Python. It compiles\n.py files to\n.nef and\n.manifest.json formats for usage in the Neo Virtual Machine which is used to execute contracts on the Neo Blockchain.\n3.1 Project Structure\u00b6\nMain Execution Flow\u00b6\nThe diagram bellow shows the basic building blocks of the Neo3-Boa project.\n3.2 Product Strategy\u00b6\nWarning\nReview this Section: Also, a link to a dedicated Neo Python Framework page would seem natural.\nPure Python\u00b6\nWe want Python developers to feel comfortable when trying neo3-boa for the first time. It should look and behave like regular Python. For this reason we decided to avoid adding new keywords, but use decorators and helper functions instead.\nNeo Python Framework\u00b6\nIn the real world, simply coding a smart contract is not enough. Developers need to debug, deploy and invoke it. Therefore, it\u2019s important for this tool to be part of a bigger Python framework. To help the developers and avoid a bad user experience, we need to use logs and inform errors with details.\nTesting against Neo VM\u00b6\nWe need to ensure that the code works as expected, and the only way to do that is to run our tests against the official Neo 3 VM. Neo repository already contains a class called TestEngine that is capable of running tests using C# smart-contracts. It will be adjusted to support compiled smart-contracts.\nMaintenance\u00b6\nCreate a product that is easy to maintain and upgrade. Use Unit tests, typed and documented code to ensure its maintainability.\n3.3 License\u00b6\nOpen-source Apache 2.0.", "doc_id": "f459ddab-a159-40aa-82a8-c6e3095211ff", "embedding": null, "doc_hash": "4f55fc5270786286ff18688a7051e748eb8d2c8bfbcb7f1847b549b121fc518d", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/conceptual-overview.html"}, "node_info": {"start": 0, "end": 1684, "_node_type": "1"}, "relationships": {"1": "0f5864b0-74e4-4973-9cc8-d624bc4c2cd6"}}, "__type__": "1"}, "c28f2d61-c3f0-42c0-9d8b-9b7279ef39af": {"__data__": {"text": "4. Code Reference\u00b6\n4.1 Examples\u00b6\nFor an extensive collection of examples:\n4.2 Supported & Planned Python Features\u00b6\nVariable Declarations\u00b6\n|\n|\nStatus\n|\n|\nFeature\n|\n|\nSample\n|\n|\n\u2705\n|\n|\nLocal variable declarations and assignments\n|\n|\ndef func(): foo: int = 42 bar = foo\n|\n|\n\u2705\n|\n|\nGlobal variable declarations and assignments\n|\n|\nfoo: int = 42 bar = foo\n|\n|\n\u2705\n|\n|\nGlobal keyword\n|\n|\nfoo: int = 42 bar = foo def func(): global foo foo = 1\nOperations\u00b6\n|\n|\nStatus\n|\n|\nFeature\n|\n|\nSample\n|\n|\n\u2705\n|\n|\nArithmetic operations\n|\n|\n+, -, *, //, %, **\n|\n|\n\ud83d\udd1c\n|\n|\nArithmetic operations\n|\n|\n/\n|\n|\n\u2705\n|\n|\nArithmetic augmented assignment operators\n|\n|\n+=, -=, *=, //=, %=, **=\n|\n|\n\ud83d\udd1c\n|\n|\nArithmetic augmented assignment operators\n|\n|\n/=\n|\n|\n\u2705\n|\n|\nRelational operations\n|\n|\n==, !=, <, <=, >, >=, is None, is not None, is, is not\n|\n|\n\u2705\n|\n|\nBitwise operations\n|\n|\n&, |, ~, ^, <<, >>\n|\n|\n\u2705\n|\n|\nBitwise augmented assignment operators\n|\n|\n&=, |=, ~=, ^=, <<=, >>=\n|\n|\n\u2705\n|\n|\nBoolean logic operations\n|\n|\nand, or, not\nTypes\u00b6\n|\n|\nStatus\n|\n|\nFeature\n|\n|\nSample\n|\n|\n\u2705\n|\n|\nTuple type\n|\n|\na = ('1', '2', '3')\n|\n|\n\u2705\n|\n|\nList type\n|\n|\na = ['1', '2', '3'] a.pop() a.remove(1) a.insert('example', 2)\n|\n|\n\u2705\n|\n|\nDict type\n|\n|\na = {1:'1', 2:'2', 3:'3'}\n|\n|\n\ud83d\udd1c\n|\n|\nSet type\n|\n|\na = {'1', '2', '3'}\n|\n|\n\u2705\n|\n|\nBytes type\n|\n|\na = b'\\x01\\x02\\x03\\x04'\n|\n|\n\u2705\n|\n|\nBytearray type\n|\n|\na = bytearray(b'\\x01\\x02\\x03\\x04')\n|\n|\n\u2705\n|\n|\nOptional type\n|\n|\na: Optional[int] = 5 a = 142 a = None\n|\n|\n\u2705\n|\n|\nUnion type\n|\n|\na: Union[int, str] = 5 a = 142 a = 'example'\nControl Flow Statements\u00b6\n|\n|\nStatus\n|\n|\nFeature\n|\n|\nSample\n|\n|\n\u2705\n|\n|\nWhile statement\n|\n|\nfoo = 0 while condition: foo = foo + 2\n|\n|\n\u2705\n|\n|\nIf, elif, else statements\n|\n|\nif condition1: foo = 0 elif condition2: foo = 1 else: bar = 2\n|\n|\n\u2705\n|\n|\nFor statement\n|\n|\nfor x in (1, 2, 3): ...\n|\n|\n\u2705\n|\n|\nTry except\n|\n|\ntry: a = foo(b) except Exception as e: a = foo(b)\n|\n|\n\u2705\n|\n|\nTry except with finally\n|\n|\ntry: a = foo(b) except Exception as e: a = zubs(b) finally: b =", "doc_id": "c28f2d61-c3f0-42c0-9d8b-9b7279ef39af", "embedding": null, "doc_hash": "99c292e4037f1f2f4b3d8b7711c11d681a25c95cabfb2a6b6eb56fa719ce5544", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/code-reference.html"}, "node_info": {"start": 0, "end": 1958, "_node_type": "1"}, "relationships": {"1": "62bcbfca-ce89-44bb-8dc6-9843f78f6b92", "3": "e00754e1-856a-4035-bf7a-82661ea3bdcf"}}, "__type__": "1"}, "e00754e1-856a-4035-bf7a-82661ea3bdcf": {"__data__": {"text": "except Exception as e: a = zubs(b) finally: b = zubs(a)\nFunctions\u00b6\n|\n|\nStatus\n|\n|\nFeature\n|\n|\nSample\n|\n|\n\u2705\n|\n|\nFunction call\n|\n|\ndef Main(num: int): a = foo(num) ... def foo(num: int) -> int: ...\n|\n|\n\u2705\n|\n|\nBuilt in functions\n|\n|\na = len('hello') b = range(1, 5, 2) c = isinstance(5, str) print(42) d = abs(-5) e = max(7, 12) f = max(7, 0, 12, 8) g = min(1, 6) h = min(1, 6, 2) i = sum(list_of_num, 0) j = reversed([1, 2, 3, 4]) k = pow(2, 2)\nOther Features\u00b6\n|\n|\nStatus\n|\n|\nFeature\n|\n|\nSample\n|\n|\n\u2705\n|\n|\nMultiple expressions in the same line\n|\n|\ni = i + h; a = 1; b = 3 + a; count = 0\n|\n|\n\u2705\n|\n|\nChained assignment\n|\n|\nx = y = foo()\n|\n|\n\u2705\n|\n|\nSequence slicing\n|\n|\nx = 'example'[2:4] x = [1, 2, 3][:2] x = 'example'[4:] x = (1, 2, 3)[:] x = 'example'[-4:-2] x = 'example'[:-4] x = 'example'[2:4:2] x = 'example'[::2]\n|\n|\n\u2705\n|\n|\nAssert\n|\n|\nassert x % 2 == 0 assert x % 3 != 2, 'error message'\n|\n|\n\u2705\n|\n|\nContinue, break\n|\n|\n\u2705\n|\n|\nPass\n|\n|\n\u2705\n|\n|\nImport\n|\n|\n|\n|\n\u2705\n|\n|\nClass\n|\n|\nclass Foo: def __init__(self, bar: Any): pass", "doc_id": "e00754e1-856a-4035-bf7a-82661ea3bdcf", "embedding": null, "doc_hash": "14ca135ecab768ca194f893181a94e93d3c78a5a3d6a5e3cae93c454dbbfed44", "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/code-reference.html"}, "node_info": {"start": 1911, "end": 2925, "_node_type": "1"}, "relationships": {"1": "62bcbfca-ce89-44bb-8dc6-9843f78f6b92", "2": "c28f2d61-c3f0-42c0-9d8b-9b7279ef39af"}}, "__type__": "1"}, "c8dbffbd-21f9-4fdf-9013-94c35d69b0bf": {"__data__": {"text": "# NeoGo CLI interface\n\nNeoGo CLI provides all functionality from one binary. It's used to run\na node, create/compile/deploy/invoke/debug smart contracts, run vm and operate\nwith a wallet. Standard setup assumes that you run a node as a\nseparate process, and it doesn't provide any CLI of its own. Instead, it just\nmakes RPC interface available for you. To perform any actions, you invoke NeoGo\nas a client that connects to this RPC node and does things you want it to do\n(like transferring some NEP-17 asset).\n\nAll CLI commands have corresponding help messages, use `--help` option to get\nthem, for example:\n```\n./bin/neo-go db --help\n```\n\n## Running node\n\nUse `node` command to run a NeoGo node, it will be configured using a YAML\nfile that contains network parameters as well as node settings.\n\n### Configuration\n\nAll config files are located in `./config` and they are differentiated according to the network type:\n- `protocol.mainnet.yml` belongs to `--mainnet` network mode (`-m` short option)\n- `protocol.privnet.yml` belongs to `--privnet` network mode (`-p` short\n  option) and is used by default\n- `protocol.testnet.yml` belongs to `--testnet` network mode (`-t` short option)\n- `protocol.unit_testnet.yml` is used by unit tests\n\nIf you want to use some non-default configuration directory path, specify\n`--config-path` flag:\n\n`./bin/neo-go node --config-path /user/yourConfigPath`\n\nThe file loaded is chosen automatically depending on network mode flag.\n\nOr just provide path to the configuration file using `--config-file` flag:\n\n`./bin/neo-go node --config-file /user/yourConfigPath/yourConfigFile.yml`\n\nRefer to the [node configuration documentation](./node-configuration.md) for\ndetailed configuration file description.\n\n### Starting a node\n\nTo start Neo node on private network, use:\n\n```\n./bin/neo-go node\n```\n\nOr specify a different network with an appropriate flag like this:\n\n```\n./bin/neo-go node --mainnet\n```\n\nBy default, the node will run in the foreground using current standard output for\nlogging.\n\n\n### Node synchronization\n\nMost of the services (state validation, oracle, consensus and RPC if\nconfigured with `StartWhenSynchronized` option) are only started after the\nnode is completely synchronized because running them before that is either\npointless or even dangerous. The node considers itself to be fully\nsynchronized with the network if it has more than `MinPeers` neighbours and if\nat least 2/3 of them are known to have a height less than or equal to the\ncurrent height of the node.\n\n### Restarting node services\n\nOn Unix-like platforms HUP, USR1 and USR2 signals can be used to control node\nservices. Upon receiving any of these signals node rereads the configuration\nfile, checks for its compatibility (ProtocolConfiguration can't be changed and\nApplicationConfiguration can only be changed for services) and then\nstops/starts services according to the old and new configurations. Services\nare broadly split into three main categories:\n * client-oriented\n   These provide some service to clients: RPC, Pprof and Prometheus\n   servers. They're controlled with the HUP signal.\n * network-oriented\n   These provide some service to the network: Oracle, State validation and P2P\n   Notary. They're controlled with the USR1 signal.\n * consensus\n   That's dBFT, it's a special one and it's controlled with USR2.\n\nHUP signal also reconfigures logging level if it's changed in the\nconfiguration file (LogLevel option in", "doc_id": "c8dbffbd-21f9-4fdf-9013-94c35d69b0bf", "embedding": null, "doc_hash": "e65adb27f3797bcb658f0a4df2940ee555a03200452dff6cdf39a0dddfd2dd8f", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 0, "end": 3447, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "3": "b75c6264-2f48-48b3-ab19-58eb5ce96bb1"}}, "__type__": "1"}, "b75c6264-2f48-48b3-ab19-58eb5ce96bb1": {"__data__": {"text": "logging level if it's changed in the\nconfiguration file (LogLevel option in ApplicationConfig).\n\nTypical scenarios when this can be useful (without full node restart):\n * enabling some service\n * changing RPC configuration\n * updating TLS certificates for the RPC server\n * resolving operational issues\n\n### DB import/exports/reset\n\nNode operates using some database as a backend to store blockchain data. NeoGo\nallows to dump chain into a file from the database (when node is stopped) or to\nimport blocks from a file into the database (also when node is stopped). Use\n`db` command for that.\n\nNeoGo allows to reset the node state to a particular point. It is possible for\nthose nodes that do store complete chain state or for nodes with `RemoveUntraceableBlocks`\nsetting on that are not yet reached `MaxTraceableBlocks` number of blocks. Use\n`db reset` command with the target block specified to roll back all the changes\nmade since the target block (not including changes made by the specified block\nacceptance). The set of changes to be removed includes blocks, transactions,\nexecution results, contract storage changes, MPT-related auxiliary data and NEP\ntransfers data. Some stale MPT nodes may be left in storage after reset.\nOnce DB reset is finished, the node can be started in a regular manner.\n\n## Smart contracts\n\nUse `contract` command to create/compile/deploy/invoke/debug smart contracts,\nsee [compiler documentation](compiler.md).\n\n## Wallet operations\n\n`wallet` command provides interface for all operations requiring a wallet\n(except contract deployment and invocations that are done via `contract\ndeploy` and `contract invokefunction`). Wallet management (creating wallet,\nadding addresses/keys to it) is available there as well as wallet-related\nfunctions like NEP-17 transfers, NEO votes, multi-signature signing and other\nthings.\n\nAll commands (with few exceptions) accepting wallet via `-w` (or `--wallet`)\nparameter (and providing an interactive password prompt if needed) can also\nalternatively work with YAML configuration file passed via the\n`--wallet-config` parameter. This file uses a format similar to node's\nwallet-related configuration sections:\n```\nPath: \"/path/to/wallet.json\"\nPassword: \"pass\"\n```\n\nFor all commands requiring read-only wallet (like `dump-keys`) a special `-`\npath can be used to read the wallet from the standard input.\n\n### Wallet management\n\n#### Create wallet\n\nUse `wallet init` command to create a new wallet:\n```\n./bin/neo-go wallet init -w wallet.nep6\n\n{\n        \"version\": \"1.0\",\n        \"accounts\": [],\n        \"scrypt\": {\n                \"n\": 16384,\n                \"r\": 8,\n                \"p\": 8\n        },\n        \"extra\": {\n                \"Tokens\": null\n        }\n }\n\nwallet successfully created, file location is wallet.nep6\n```\n\nwhere \"wallet.nep6\" is a wallet file name. This wallet will be empty. To\ngenerate a new key pair and add an account for it, use `-a` option:\n```\n./bin/neo-go wallet init -w wallet.nep6 -a\nEnter the name of the account > Name\nEnter passphrase > \nConfirm passphrase > \n\n{\n        \"version\": \"1.0\",\n        \"accounts\": [\n                {\n              ", "doc_id": "b75c6264-2f48-48b3-ab19-58eb5ce96bb1", "embedding": null, "doc_hash": "78889333977661dbe314d490f9f5c5429adc1dc9e8d37428b74b7f4e08fc58fa", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 3383, "end": 6527, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "c8dbffbd-21f9-4fdf-9013-94c35d69b0bf", "3": "fc64e56f-3ed2-4c65-a3ff-a69fc5fc0755"}}, "__type__": "1"}, "fc64e56f-3ed2-4c65-a3ff-a69fc5fc0755": {"__data__": {"text": "    {\n                        \"address\": \"NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E\",\n                        \"key\": \"6PYL2UrC11nWFJWSLiqsPKCNm9u4zr4ttX1ZbV9f2fLDqXsePioVxEsYdg\",\n                        \"label\": \"Name\",\n                        \"contract\": {\n                                \"script\": \"DCEDzs1j19gSDDsZTDsogN1Kr+FHXFfkDIUoctcwVhUlgUBBdHR2qg==\",\n                                \"parameters\": [\n                                        {\n                                                \"name\": \"parameter0\",\n                                                \"type\": \"Signature\"\n                                        }\n                                ],\n                                \"deployed\": false\n                        },\n                        \"lock\": false,\n                        \"isDefault\": false\n                }\n        ],\n        \"scrypt\": {\n                \"n\": 16384,\n                \"r\": 8,\n                \"p\": 8\n        },\n        \"extra\": {\n                \"Tokens\": null\n        }\n }\n\nwallet successfully created, file location is wallet.nep6\n```\n\nor use `wallet create` command to create a new account in an existing wallet:\n```\n./bin/neo-go wallet create -w wallet.nep6\nEnter the name of the account > Joe Random\nEnter passphrase > \nConfirm passphrase >\n```\n\n#### Convert Neo Legacy wallets to Neo N3\n\nUse `wallet convert` to update addresses in NEP-6 wallets used with Neo\nLegacy. New wallet is specified in `-o` option, it will have the same keys\nwith Neo N3 addresses (notice that it doesn't do anything to your assets, it\njust allows to reuse the old key on N3", "doc_id": "fc64e56f-3ed2-4c65-a3ff-a69fc5fc0755", "embedding": null, "doc_hash": "28e3d5ae4aacc772512a40426aa51f9ddfd4698222343217b2d29d885ec7e1dc", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 6591, "end": 8188, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "b75c6264-2f48-48b3-ab19-58eb5ce96bb1", "3": "2a822377-72a3-46be-9f90-e34cc01a434b"}}, "__type__": "1"}, "2a822377-72a3-46be-9f90-e34cc01a434b": {"__data__": {"text": "do anything to your assets, it\njust allows to reuse the old key on N3 network).\n```\n./bin/neo-go wallet convert -w old.nep6 -o new.nep6\n```\n\n#### Check wallet contents\n`wallet dump` can be used to see wallet contents in a more user-friendly way,\nits output is the same NEP-6 JSON, but better formatted. You can also decrypt\nkeys at the same time with `-d` option (you'll be prompted for password):\n```\n./bin/neo-go wallet dump -w wallet.nep6 -d\nEnter wallet password > \n\n{\n        \"version\": \"1.0\",\n        \"accounts\": [\n                {\n                        \"address\": \"NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E\",\n                        \"key\": \"6PYL2UrC11nWFJWSLiqsPKCNm9u4zr4ttX1ZbV9f2fLDqXsePioVxEsYdg\",\n                        \"label\": \"Name\",\n                        \"contract\": {\n                                \"script\": \"DCEDzs1j19gSDDsZTDsogN1Kr+FHXFfkDIUoctcwVhUlgUBBdHR2qg==\",\n                                \"parameters\": [\n                                        {\n                                                \"name\": \"parameter0\",\n                                                \"type\": \"Signature\"\n                                        }\n                                ],\n                                \"deployed\": false\n                        },\n                        \"lock\": false,\n                        \"isDefault\": false\n                }\n        ],\n        \"scrypt\": {\n                \"n\": 16384,\n                \"r\": 8,\n                \"p\": 8\n        },\n        \"extra\": {\n               ", "doc_id": "2a822377-72a3-46be-9f90-e34cc01a434b", "embedding": null, "doc_hash": "778c143bb1922e9fa1981d57708f708566e4a7e5a7a8475389e80ea01e572a2b", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 8135, "end": 9654, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "fc64e56f-3ed2-4c65-a3ff-a69fc5fc0755", "3": "7798a42d-7584-4140-b0ef-771c3a3a3a4a"}}, "__type__": "1"}, "7798a42d-7584-4140-b0ef-771c3a3a3a4a": {"__data__": {"text": "\"extra\": {\n                \"Tokens\": null\n        }\n }\n```\n\nYou can also get public keys for addresses stored in your wallet with `wallet\ndump-keys` command:\n```\n./bin/neo-go wallet dump-keys -w wallet.nep6\nNMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E (simple signature contract):\n03cecd63d7d8120c3b194c3b2880dd4aafe1475c57e40c852872d7305615258140\n```\n\n#### Private key export\n`wallet export` allows you to export a private key in NEP-2 encrypted or WIF\n(unencrypted) form (`-d` flag).\n```\n$ ./bin/neo-go wallet export -w wallet.nep6 -d NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E\nEnter password > \nKyswN8r48dhsvyQJVy97RWnZmKgYLrXv9mCL81Kb4vAagZiCsePv\n```\n\n#### Private key import\nYou can import NEP-2 or WIF private key along with verification contract (if\nit's non-standard):\n```\n./bin/neo-go wallet import --wif KwYgW8gcxj1JWJXhPSu4Fqwzfhp5Yfi42mdYmMa4XqK7NJxXUSK7 -w wallet.nep6\nProvided WIF was unencrypted. Wallet can contain only encrypted keys.\nEnter the name of the account > New Account\nEnter passphrase > \nConfirm passphrase >\n```\n\n#### Special accounts\nMultisignature accounts can be imported with `wallet import-multisig`, you'll\nneed all public keys and one private key to do that. Then, you could sign\ntransactions for this multisignature account with the imported key.\n\n`wallet import-deployed` can be used to create wallet accounts for deployed\ncontracts. They also can have WIF keys associated with them (in case your\ncontract's `verify` method needs some signature).\n\n#### Strip keys from accounts\n`wallet strip-keys` allows you to remove private keys from the wallet, but let\nit be used for other purposes (like creating transactions for subsequent\noffline signing). Use with care, don't lose your keys with it.\n\n### Neo voting\n`wallet candidate` provides commands to register or unregister a committee\n(and therefore validator) candidate key:\n```\n./bin/neo-go wallet candidate register -a NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E -w wallet.json -r http://localhost:20332\n```\n\nYou can also vote for candidates if you own NEO:\n```\n./bin/neo-go wallet candidate vote -a NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E -w wallet.json -r http://localhost:20332 -c 03cecd63d7d8120c3b194c3b2880dd4aafe1475c57e40c852872d7305615258140\n```\n\nDo not provide candidate argument to perform unvoting:\n```\n./bin/neo-go wallet candidate vote -a NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E -w wallet.json -r http://localhost:20332\n```\n\n### Getting data from chain\n\n#### Node height/validated height\n`query height` returns the latest block and validated state height:\n```\n$ ./bin/neo-go query height -r http://localhost:20332\nLatest block: 11926\nValidated state: 11926\n```\n\n#### Transaction status\n`query tx` provides convenient wrapper over RPC calls", "doc_id": "7798a42d-7584-4140-b0ef-771c3a3a3a4a", "embedding": null, "doc_hash": "2f5d3c6abc66c17849d3c60348f59af4601ca6505e64cb574ad390f170bc793e", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 9701, "end": 12407, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "2a822377-72a3-46be-9f90-e34cc01a434b", "3": "3e379f41-4057-4271-a08c-40310bc6b91e"}}, "__type__": "1"}, "3e379f41-4057-4271-a08c-40310bc6b91e": {"__data__": {"text": "Transaction status\n`query tx` provides convenient wrapper over RPC calls to query transaction status.\n```\n./bin/neo-go query tx --rpc-endpoint http://localhost:20332 aaf87628851e0c03ee086ff88596bc24de87082e9e5c73d75bb1c740d1d68088\nHash:\t\t\taaf87628851e0c03ee086ff88596bc24de87082e9e5c73d75bb1c740d1d68088\nOnChain:\t\ttrue\nBlockHash:\t\tfabcd46e93b8f4e1bc5689e3e0cc59704320494f7a0265b91ae78b4d747ee93b\nSuccess:\t\ttrue\n```\n`OnChain` is true if the transaction has been included in the block; and `Success` is true\nif it has been executed successfully.\n\n#### Committee members\n`query commitee` returns a list of current committee members:\n```\n$ ./bin/neo-go query committee -r", "doc_id": "3e379f41-4057-4271-a08c-40310bc6b91e", "embedding": null, "doc_hash": "d2db20aca025876bde496ded6fcdc89bb477723c20bedba6f4d69d4e1f685838", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 12354, "end": 13021, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "7798a42d-7584-4140-b0ef-771c3a3a3a4a", "3": "4cb9b30c-403a-4934-b03f-adf73b575d49"}}, "__type__": "1"}, "4cb9b30c-403a-4934-b03f-adf73b575d49": {"__data__": {"text": "current committee members:\n```\n$ ./bin/neo-go query committee -r http://localhost:20332\n03009b7540e10f2562e5fd8fac9eaec25166a58b26e412348ff5a86927bfac22a2\n030205e9cefaea5a1dfc580af20c8d5aa2468bb0148f1a5e4605fc622c80e604ba\n0207da870cedb777fceff948641021714ec815110ca111ccc7a54c168e065bda70\n02147c1b1d5728e1954958daff2f88ee2fa50a06890a8a9db3fa9e972b66ae559f\n0214baf0ceea3a66f17e7e1e839ea25fd8bed6cd82e6bb6e68250189065f44ff01\n03184b018d6b2bc093e535519732b3fd3f7551c8cffaf4621dd5a0b89482ca66c9\n0231edee3978d46c335e851c76059166eb8878516f459e085c0dd092f0f1d51c21\n023e9b32ea89b94d066e649b124fd50e396ee91369e8e2a6ae1b11c170d022256d\n03408dcd416396f64783ac587ea1e1593c57d9fea880c8a6a1920e92a259477806\n035056669864feea401d8c31e447fb82dd29f342a9476cfd449584ce2a6165e4d7\n025831cee3708e87d78211bec0d1bfee9f4c85ae784762f042e7f31c0d40c329b8\n026328aae34f149853430f526ecaa9cf9c8d78a4ea82d08bdf63dd03c4d0693be6\n0370c75c54445565df62cfe2e76fbec4ba00d1298867972213530cae6d418da636\n03840415b0a0fcf066bcc3dc92d8349ebd33a6ab1402ef649bae00e5d9f5840828\n03957af9e77282ae3263544b7b2458903624adc3f5dee303957cb6570524a5f254\n02a7834be9b32e2981d157cb5bbd3acb42cfd11ea5c3b10224d7a44e98c5910f1b\n02ba2c70f5996f357a43198705859fae2cfea13e1172962800772b3d588a9d4abd\n03c609bea5a4825908027e4ab217e7efc06e311f19ecad9d417089f14927a173d5\n02c69a8d084ee7319cfecf5161ff257aa2d1f53e79bf6c6f164cff5d94675c38b3\n02cf9dc6e85d581480d91e88e8cbeaa0c153a046e89ded08b4cefd851e1d7325b5\n03d84d22b8753cf225d263a3a782a4e16ca72ef323cfde04977c74f14873ab1e4c\n```\n\n#### Candidate/voting data\n`query candidates` returns all current candidates, number of votes for them\nand their committee/consensus status:\n```\n$ ./bin/neo-go query candidates -r http://localhost:20332\nKey                                                      ", "doc_id": "4cb9b30c-403a-4934-b03f-adf73b575d49", "embedding": null, "doc_hash": "506108714d8c6e85e987d45e5124040a958942c9469b9b2a9c15042b6df4995a", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 13028, "end": 14788, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "3e379f41-4057-4271-a08c-40310bc6b91e", "3": "804f8648-45ea-40be-9e0c-254bff0d916d"}}, "__type__": "1"}, "804f8648-45ea-40be-9e0c-254bff0d916d": {"__data__": {"text": "                              Votes    Committee  Consensus\n03009b7540e10f2562e5fd8fac9eaec25166a58b26e412348ff5a86927bfac22a2  2000000  true       true\n030205e9cefaea5a1dfc580af20c8d5aa2468bb0148f1a5e4605fc622c80e604ba  2000000  true       true\n0214baf0ceea3a66f17e7e1e839ea25fd8bed6cd82e6bb6e68250189065f44ff01  2000000  true       true\n023e9b32ea89b94d066e649b124fd50e396ee91369e8e2a6ae1b11c170d022256d  2000000  true       true\n03408dcd416396f64783ac587ea1e1593c57d9fea880c8a6a1920e92a259477806  2000000  true       true\n02a7834be9b32e2981d157cb5bbd3acb42cfd11ea5c3b10224d7a44e98c5910f1b  2000000  true       true\n02ba2c70f5996f357a43198705859fae2cfea13e1172962800772b3d588a9d4abd  2000000  true       true\n025664cef0abcba7787ad5fb12f3af31c5cdc7a479068aa2ad8ee78804768bffe9  1000000  false      false\n03650a684461a64bf46bee561d9981a4c57adc6ccbd3a9512b83701480b30218ab  1000000  false      false\n026a10aa2b4d7639c5deafa4ff081467db10b5d00432749a2a5ee1d2bfed23e1c0  1000000  false      false\n02d5786a9214a8a3f1757d7596fd10f5241205e2c0d68362f4766579bac6189249  1000000  false      false\n033d8e35f8cd9a33852280b6d93093c7292ed5ce90d90f149fa2da50ba6168dfce  100000   false      false\n0349c7ef0b4aaf181f0a3e1350c527b136cc5b42498cb83ab8880c05ed95167e1c  100000   false      false\n035b4f9be2b853e06eb5a09c167e038b96b4804235961510423252f2ee3dbba583  100000   false      false\n027e459b264b6f7e325ab4b0bb0fa641081fb68517fd613ebd7a94cb79d3081e4f  100000   false      false\n0288cad442a877960c76b4f688f4be30f768256d9a3da2492b0180b91243918b4f  100000   false      false\n02a40c552798f79636095817ec88924fc6cb7094e5a3cb059a9b3bc91ea3bf0d3d  100000   false      false\n02db79e69c518ae9254e314b6f5f4b63e914cdd4b2574dc2f9236c01c1fc1d8973  100000   false     ", "doc_id": "804f8648-45ea-40be-9e0c-254bff0d916d", "embedding": null, "doc_hash": "3cf294f430da8a1209bc7b10e6bd4cdf685fff3be80d09ceb57470e061201fbd", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 14847, "end": 16585, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "4cb9b30c-403a-4934-b03f-adf73b575d49", "3": "5f71c598-6da2-4a1b-b509-fa351fe10047"}}, "__type__": "1"}, "5f71c598-6da2-4a1b-b509-fa351fe10047": {"__data__": {"text": " 100000   false      false\n02ec143f00b88524caf36a0121c2de09eef0519ddbe1c710a00f0e2663201ee4c0  100000   false      false\n03d8d58d2257ca6cb14522b76513d4783f7d481801695893794c2186515c6de76f  0        false      false\n```\n\n#### Voter data\n`query voter` returns additional data about NEO holder: the amount of NEO he has,\nthe candidate it voted for (if any) and the block number of the last transactions\ninvolving NEO on this account:\n```\n$ ./bin/neo-go query voter -r http://localhost:20332 Nj91C8TxQSxW1jCE1ytFre6mg5qxTypg1Y\n        Voted: 0214baf0ceea3a66f17e7e1e839ea25fd8bed6cd82e6bb6e68250189065f44ff01 (Nj91C8TxQSxW1jCE1ytFre6mg5qxTypg1Y)\n        Amount : 2000000\n        Block: 3970\n```\n\n### Transaction signing\n\n`wallet sign` command allows to sign arbitrary transactions stored in JSON\nformat (also known as ContractParametersContext). Usually it's used in one of\nthe two cases: multisignature signing (when you don't have all keys for an\naccount and need to share the context with others until enough signatures\ncollected) or offline signing (when the node with a key is completely offline\nand can't interact with the RPC node directly).\n\n#### Multisignature collection\n\nFor example, you have a four-node default network setup and want to set some\nkey for the oracle role, you create transaction with:\n\n```\n$ neo-go contract invokefunction -w .docker/wallets/wallet1.json --out some.part.json -a NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq -r http://localhost:30333 0x49cf4e5378ffcd4dec034fd98a174c5491e395e2 designateAsRole 8 \\[ 02b3622bf4017bdfe317c58aed5f4c753f206b7db896046fa7d774bbc4bf7f8dc2 \\] -- NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq:CalledByEntry\n```\n\nAnd then sign it with two more keys:\n```\n$ neo-go wallet sign -w .docker/wallets/wallet2.json --in some.part.json --out some.part.json -a NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq\n$ neo-go wallet sign -w .docker/wallets/wallet3.json --in some.part.json -r http://localhost:30333 -a NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq\n```\nNotice that the last command sends the transaction (which has a complete set\nof signatures for 3/4 multisignature account by that time) to the network.\n\n#### Offline signing\n\nYou want to do a transfer from a single-key account, but the key is on a\ndifferent (offline) machine. Create a stripped wallet first on the key-holding\nmachine:\n\n```\n$ cp wallet.json wallet.stripped.json # don't lose the original wallet\n$ neo-go wallet strip-keys --wallet wallet.stripped.json\n```\n\nThis wallet has no keys inside (but has appropriate scripts/addresses), so it\ncan be safely shared with anyone or transferred to network-enabled machine\nwhere you then can create a transfer", "doc_id": "5f71c598-6da2-4a1b-b509-fa351fe10047", "embedding": null, "doc_hash": "e510d0efafbd8d42ddc0c99ff7026abf9a35b131e848fa7ff0b75bb9af535cc0", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 16575, "end": 19207, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "804f8648-45ea-40be-9e0c-254bff0d916d", "3": "525750f2-e9f4-4a39-aca6-53eb8b29d0df"}}, "__type__": "1"}, "525750f2-e9f4-4a39-aca6-53eb8b29d0df": {"__data__": {"text": "shared with anyone or transferred to network-enabled machine\nwhere you then can create a transfer transaction:\n\n```\n$ neo-go wallet nep17 transfer --rpc-endpoint http://localhost:20332 \\\n  --wallet wallet.stripped.json --from NjEQfanGEXihz85eTnacQuhqhNnA6LxpLp \\\n  --to Nj91C8TxQSxW1jCE1ytFre6mg5qxTypg1Y --token NEO --amount 1 --out context.json\n\n```\n`context.json` can now be transferred to the machine with the `wallet.json`\ncontaining proper keys and signed:\n```\n$ neo-go wallet sign --wallet wallet.json \\\n  -address NjEQfanGEXihz85eTnacQuhqhNnA6LxpLp --in context.json --out context.json\n```\nNow `context.json` contains a transaction with a complete set of signatures\n(just one in this case, but of course you can do multisignature collection as\nwell). It can be transferred to network-enabled machine again and the\ntransaction can be sent to the network:\n```\n$ neo-go util sendtx --rpc-endpoint http://localhost:20332 context.json\n```\n\n### NEP-17 token functions\n\n`wallet nep17` contains a set of commands to use for NEP-17 tokens.\n\n#### Token metadata\n\nNEP-17 commands are designed to work with any NEP-17 tokens, but NeoGo needs\nsome metadata for these tokens to function properly. Native NEO or GAS are\nknown to NeoGo by default, but other tokens are not. NeoGo can get this\nmetadata from the specified RPC server, but that's an additional request to\nmake. So, if you care about command processing delay, you can import token\nmetadata into the wallet with `wallet nep17 import` command. It'll be stored\nin the `extra` section of the wallet.\n```\n./bin/neo-go wallet nep17 import -w wallet.nep6 -r http://localhost:20332 -t abcdefc189f30098b0ba6a2eb90b3a925800ffff\n```\n\nYou can later see what token data you have in your wallet with `wallet nep17\ninfo` command and remove tokens you don't need with `wallet nep17 remove`.\n\n#### Balance\nGetting balance is easy:\n```\n./bin/neo-go wallet nep17 balance -w /etc/neo-go/wallet.json -r http://localhost:20332\n```\n\nBy default, you'll get data for all tokens that are owned by all accounts\nstored in the given wallet. You can specify a particular address with `-a`\nflag and/or select token with `--token` flag (token hash, address, name or\nsymbol can be used as a parameter).\n\n#### Transfers\n\n`wallet nep17 transfer` creates a token transfer transaction and pushes it to\nthe RPC server (or saves to file if it needs to be signed by multiple\nparties). For example, transferring 100 GAS looks like this:\n\n```\n./bin/neo-go wallet nep17 transfer -w wallet.nep6 -r http://localhost:20332 --to NjEQfanGEXihz85eTnacQuhqhNnA6LxpLp --from NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E --token GAS --amount 100\n```\n\nYou can omit `--from` parameter (default wallet's address will be used in this\ncase), you can add `--gas` for extra network fee (raising priority of your\ntransaction). And you can save the transaction to a file with `--out` instead of\nsending it to the network if it needs to be signed by multiple parties.\n\nTo add optional `data` transfer parameter, specify `data` positional argument\nafter all required flags. Refer to `wallet", "doc_id": "525750f2-e9f4-4a39-aca6-53eb8b29d0df", "embedding": null, "doc_hash": "3bba397e282c984288bfe4625f2b6a014428d4574fe2805225656d617156b9b0", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 19135, "end": 22207, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "5f71c598-6da2-4a1b-b509-fa351fe10047", "3": "fdd64f4c-e770-402e-98c3-65950c7ab9f7"}}, "__type__": "1"}, "fdd64f4c-e770-402e-98c3-65950c7ab9f7": {"__data__": {"text": "specify `data` positional argument\nafter all required flags. Refer to `wallet nep17 transfer --help` command\ndescription for details.\n\nOne `transfer` invocation creates one transaction. In case you need to do\nmany transfers, you can save on network fees by doing multiple token moves with\none transaction by using `wallet nep17 multitransfer` command. It can transfer\nthings from one account to many, its syntax differs from `transfer` in that\nyou don't have `--token`, `--to` and `--amount` options, but instead you can\nspecify multiple \"token:addr:amount\" sets after all other options. The same\ntransfer as above can be done with `multitransfer` by doing this:\n```\n./bin/neo-go wallet nep17 multitransfer -w wallet.nep6 -r http://localhost:20332 --from NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E GAS:NjEQfanGEXihz85eTnacQuhqhNnA6LxpLp:100\n```\n\n#### GAS claims\n\nWhile Neo N3 doesn't have any notion of \"claim transaction\" and has GAS\nautomatically distributed with every NEO transfer for NEO owners, you still\nwon't get GAS if you don't do any actions. So the old `wallet claim` command\nwas updated to be an easier way to do NEO \"flipping\" when you send a\ntransaction that transfers all of your NEO to yourself thereby triggering GAS\ndistribution.\n\n### NEP-11 token functions\n\n`wallet nep11` contains a set of commands to use for NEP-11 tokens. Token\nmetadata related commands (`info`, `import` and `remove`) works the same way as\nfor NEP-17 tokens. The syntax of other commands is very similar to NEP-17\ncommands with the following adjustments.\n\n#### Balance\n\nSpecify token ID via `--id` flag to get data for a particular NFT:\n\n```\n./bin/neo-go wallet nep11 balance -w /etc/neo-go/wallet.json --token 67ecb7766dba4acf7c877392207984d1b4d15731 --id 7e244ffd6aa85fb1579d2ed22e9b761ab62e3486 -r http://localhost:20332\n```\n\nBy default, no token ID specified, i.e all NFTs returned by the server are listed.\n\n#### Transfers\n\nSpecify token ID via `--id` flag to transfer NEP-11 token. Specify the amount to\ntransfer divisible NEP-11 token:\n\n```\n./bin/neo-go wallet nep11 transfer -w wallet.nep6 -r http://localhost:20332 --to NjEQfanGEXihz85eTnacQuhqhNnA6LxpLp --from NMe64G6j6nkPZby26JAgpaCNrn1Ee4wW6E --token 67ecb7766dba4acf7c877392207984d1b4d15731 --id R5OREI5BU+Uyd23/MuV/xzI3F+Q= --amount 5\n```\n\nBy default, no amount is specified, i.e. the whole token is transferred for\nnon-divisible tokens and 100% of the token is transferred if there is only one\nowner of this token for divisible tokens.\n\nUnlike NEP-17 tokens functionality, `multitransfer` command is currently not\nsupported on NEP-11 tokens.\n\n#### Tokens Of\n\nTo print token IDs owned by the specified owner, use `tokensOf` command with\n`--token` and `--address` flags:\n\n```\n./bin/neo-go wallet nep11 tokensOf -r http://localhost:20332 --token 67ecb7766dba4acf7c877392207984d1b4d15731", "doc_id": "fdd64f4c-e770-402e-98c3-65950c7ab9f7", "embedding": null, "doc_hash": "0adbd5d70ba5cc4197acf865336566d694f0b698a493ede1f31c97227d132809", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 22224, "end": 25057, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "525750f2-e9f4-4a39-aca6-53eb8b29d0df", "3": "d68b0d55-ac69-4e09-86f1-6c69307f833f"}}, "__type__": "1"}, "d68b0d55-ac69-4e09-86f1-6c69307f833f": {"__data__": {"text": "--address NbrUYaZgyhSkNoRo9ugRyEMdUZxrhkNaWB\n```\n\n#### Owner Of\n\nFor non-divisible NEP-11 tokens only. To print owner of non-divisible NEP-11 token\nuse `ownerOf` method, specify token hash via `--token` flag and token ID via\n`--id` flag:\n\n```\n./bin/neo-go wallet nep11 ownerOf -r http://localhost:20332 --token 67ecb7766dba4acf7c877392207984d1b4d15731 --id R5OREI5BU+Uyd23/MuV/xzI3F+Q=\n```\n\n#### Optional methods\n\n##### 1. Properties\n\nIf NEP-11 token supports optional `properties` method, specify token hash via\n`--token` flag and token ID via `--id` flag to print properties:\n\n```\n./bin/neo-go wallet nep11 properties -r http://localhost:20332 --token 67ecb7766dba4acf7c877392207984d1b4d15731 --id 7V5gjT2WwjP3pBCQMKGMfyZsp/w=\n```\n\n##### 2. Tokens\n\nIf NEP-11 token supports optional `tokens` method, specify token hash via\n`--token` flag to print the list of token IDs minted by the specified NFT:\n\n```\n./bin/neo-go wallet nep11 tokens -r http://localhost:20332 --token 67ecb7766dba4acf7c877392207984d1b4d15731\n```\n\n## Utility commands\n\n### Value conversion\n\nNeoGo provides conversion utility command to reverse data, convert script\nhashes to/from address, convert public keys to hashes/addresses, convert data to/from hexadecimal or base64\nrepresentation. All of this is done by a single `util convert` command like\nthis:\n```\n$ ./bin/neo-go util convert deee79c189f30098b0ba6a2eb90b3a9258a6c7ff\nBE ScriptHash to Address        NgEisvCqr2h8wpRxQb7bVPWUZdbVCY8Uo6\nLE ScriptHash to Address        NjEQfanGEXihz85eTnacQuhqhNnA6LxpLp\nHex to String                           \"\\xde\\xeey\\xc1\\x89\\xf3\\x00\\x98\\xb0\\xbaj.\\xb9\\v:\\x92X\\xa6\\xc7\\xff\"\nHex to Integer                          -1256651697634605895065630637163547727407485218\nSwap Endianness                         ffc7a658923a0bb92e6abab09800f389c179eede\nBase64 to String                        \"u\\xe7\\x9e\\xef\\xd75\\xf3\\xd7\\xf7\\xd3O|oF\\xda\u9b5eo\\xdd\\x1b\u076fv\\xe7\u01bas\\xb7\\xdf\"\nBase64 to BigInteger            -222811771454869584930239486728381018152491835874567723544539443409000587\nString to Hex                          ", "doc_id": "d68b0d55-ac69-4e09-86f1-6c69307f833f", "embedding": null, "doc_hash": "e1c6feba0bff82cc4549c0f65fb221276ead758d9177697f3c3af2b9a76bab86", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 25126, "end": 27189, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "fdd64f4c-e770-402e-98c3-65950c7ab9f7", "3": "8b24c3a0-1204-4bb5-b34f-80198b6178b3"}}, "__type__": "1"}, "8b24c3a0-1204-4bb5-b34f-80198b6178b3": {"__data__": {"text": "                    64656565373963313839663330303938623062613661326562393062336139323538613663376666\nString to Base64                        ZGVlZTc5YzE4OWYzMDA5OGIwYmE2YTJlYjkwYjNhOTI1OGE2YzdmZg==\n```\n\n### Transaction dumps/test invocations\n\nIf you have a transaction signing context saved in a file (and many commands\nlike `wallet nep17 transfer` or `contract invokefunction` can give you one\nwith the `--out` parameter) you may want to check the contents before signing\nit. This can be done with the `util txdump` command:\n```\n$ ./bin/neo-go util txdump -r http://localhost:30333 some.part.json\nHash:                   f143059e0c03546db006608e0a0ad4b621b311a48d7fc62bb7062e405ab8e588\nOnChain:                false\nValidUntil:             6004\nSigner:                 NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq (CalledByEntry)\nSystemFee:              0.0208983 GAS\nNetworkFee:             0.044159 GAS\nScript:                 DCECs2Ir9AF73+MXxYrtX0x1PyBrfbiWBG+n13S7xL9/jcIRwBgSwB8MD2Rlc2lnbmF0ZUFzUm9sZQwU4pXjkVRMF4rZTwPsTc3/eFNOz0lBYn1bUg==\nINDEX    OPCODE       PARAMETER\n0        PUSHDATA1    02b3622bf4017bdfe317c58aed5f4c753f206b7db896046fa7d774bbc4bf7f8dc2    <<\n35       PUSH1\n36       PACK\n37       PUSH8\n38       PUSH2\n39       PACK\n40       PUSH15\n41       PUSHDATA1    64657369676e6174654173526f6c65 (\"designateAsRole\")\n58       PUSHDATA1    e295e391544c178ad94f03ec4dcdff78534ecf49\n80       SYSCALL      System.Contract.Call (627d5b52)\n{\n \"state\": \"HALT\",\n \"gasconsumed\": \"2089830\",\n \"script\": \"DCECs2Ir9AF73+MXxYrtX0x1PyBrfbiWBG+n13S7xL9/jcIRwBgSwB8MD2Rlc2lnbmF0ZUFzUm9sZQwU4pXjkVRMF4rZTwPsTc3/eFNOz0lBYn1bUg==\",\n \"stack\": [\n  {\n   \"type\": \"Any\"\n  }\n ],\n \"exception\": null,\n \"notifications\": [\n  {\n   \"contract\": \"0x49cf4e5378ffcd4dec034fd98a174c5491e395e2\",\n  ", "doc_id": "8b24c3a0-1204-4bb5-b34f-80198b6178b3", "embedding": null, "doc_hash": "ba9e0b63e3023ed3707b3e9ed6872740ea2d29db628605f9b01e619ad9865c18", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 27190, "end": 28959, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "d68b0d55-ac69-4e09-86f1-6c69307f833f", "3": "e29eb6c3-bbb4-474e-9989-3843bece97b8"}}, "__type__": "1"}, "e29eb6c3-bbb4-474e-9989-3843bece97b8": {"__data__": {"text": "  \"eventname\": \"Designation\",\n   \"state\": {\n    \"type\": \"Array\",\n    \"value\": [\n     {\n      \"type\": \"Integer\",\n      \"value\": \"8\"\n     },\n     {\n      \"type\": \"Integer\",\n      \"value\": \"245\"\n     }\n    ]\n   }\n  }\n ]\n}\n```\nIt always outputs the basic data and also can perform test-invocation if an\nRPC endpoint is given to it.\n\n### Sending signed transaction to the network\n\nIf you have a completely finished (with all signatures collected) transaction\nsigning context saved in a file you can send it to the network (without any\nwallet) using `util sendtx` command:\n```\n$ ./bin/neo-go util sendtx -r http://localhost:30333 some.part.json\n```\nThis is useful in offline signing scenario, where the signing party doesn't\nhave any network access, so you can make a signature there, transfer the file\nto another machine that has network access and then push the transaction out\nto the network.\n\n## VM CLI\nThere is a VM CLI that you can use to load/analyze/run/step through some code:\n\n```\n./bin/neo-go vm\n```\n\nSome basic commands available there:\n\n- `loadgo` -- loads smart contract `NEO-GO-VM > loadgo TestContract/main.go`\n- `ops` -- show the opcodes of currently loaded contract\n- `run` -- executes currently loaded contract\n\nUse `help` command to get more detailed information on all options and\nparticular commands. Note that this VM has a blockchain instance (an empty\nprivate in-memory chain by default), with all appropriate interop functionality\navailable for smart contracts.\n", "doc_id": "e29eb6c3-bbb4-474e-9989-3843bece97b8", "embedding": null, "doc_hash": "8be80dfc65f34f9aedc2fa67fadb4627c4b20657076a34210d8803333468e184", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}, "node_info": {"start": 28958, "end": 30440, "_node_type": "1"}, "relationships": {"1": "09c8e36cb3984714355d918bfe2a6b048a3f98e4", "2": "8b24c3a0-1204-4bb5-b34f-80198b6178b3"}}, "__type__": "1"}, "ee19737a-936a-4ec1-85ff-9dd22ac71ee4": {"__data__": {"text": "# NeoGo smart contract compiler\n\nThe neo-go compiler compiles Go programs to a bytecode that the Neo virtual machine can understand.\n\n## Language compatibility\n\nThe compiler is mostly compatible with regular Go language specification. However,\nthere are some important deviations that you need to be aware of that make it\na dialect of Go rather than a complete port of the language:\n * `new()` is not supported, most of the time you can substitute structs with composite literals\n * `make()` is supported for maps and slices with elements of basic types\n * `copy()` is supported only for byte slices because of the underlying `MEMCPY` opcode\n * pointers are supported only for struct literals, one can't take an address\n   of an arbitrary variable\n * there is no real distinction between different integer types, all of them\n   work as big.Int in Go with a limit of 256 bit in width; so you can use\n   `int` for just about anything. This is the way integers work in Neo VM and\n   adding proper Go types emulation is considered to be too costly.\n * goroutines, channels and garbage collection are not supported and will\n   never be because emulating that aspects of Go runtime on top of Neo VM is\n   close to impossible\n * `defer` and `recover` are supported except for the cases where panic occurs in\n   `return` statement because this complicates implementation and imposes runtime\n    overhead for all contracts. This can easily be mitigated by first storing values\n    in variables and returning the result.\n * lambdas are supported, but closures are not.\n * maps are supported, but valid map keys are booleans, integers and strings with length <= 64\n * converting value to interface type doesn't change the underlying type,\n   original value will always be used, therefore it never panics and always \"succeeds\";\n   it's up to the programmer whether it's a correct use of a value\n * type assertion with two return values is not supported; single return value (of the desired type)\n   is supported; type assertion panics if value can't be asserted to the desired type, therefore\n   it's up to the programmer whether assert can be performed successfully.\n * type aliases including the built-in `any` alias are supported.\n * generics are not supported, but eventually will be (at least, partially), ref. https://github.com/nspcc-dev/neo-go/issues/2376.\n\n## VM API (interop layer)\nCompiler translates interop function calls into Neo VM syscalls or (for custom\nfunctions) into Neo VM instructions. [Refer to\npkg.go.dev](https://pkg.go.dev/github.com/nspcc-dev/neo-go/pkg/interop)\nfor full API documentation. In general it provides the same level of\nfunctionality as Neo .net Framework library.\n\nCompiler provides some helpful builtins in `util`, `convert` and `math` packages.\nRefer to them for detailed documentation. \n\n`_deploy()` function has a special meaning and is executed when contract is deployed.\nIt should return no value and accept two arguments: the first one is `data` containing\nall values `deploy` is aware of and able to make use of; the second one is a bool\nargument which will be true on contract update.\n`_deploy()` functions are called for every imported package in the same order as `init()`. \n\n## Quick start\n\n### Go setup\n\nThe compiler uses Go parser internally and depends on regular Go compiler\npresence, so make sure you have it installed and set up. On some distributions\nthis requires you to set proper `GOROOT` environment variable, like\n```\nexport GOROOT=/usr/lib64/go/1.15\n```\n\nThe best way to create a new contract is to use `contract init` command. This will\ncreate an example source file, a config file and", "doc_id": "ee19737a-936a-4ec1-85ff-9dd22ac71ee4", "embedding": null, "doc_hash": "57bfc240a5025d8bf2d3ca84bc890c2ff88b805e9560ca188b542068b843ca0d", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 0, "end": 3639, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "3": "89798c15-9d63-4035-ac79-13f08b651574"}}, "__type__": "1"}, "89798c15-9d63-4035-ac79-13f08b651574": {"__data__": {"text": "use `contract init` command. This will\ncreate an example source file, a config file and `go.mod` with `github.com/nspcc-dev/neo-go/pkg/interop` dependency.\n```\n$ ./bin/neo-go contract init --name MyAwesomeContract\n$ cd MyAwesomeContract\n```\n\nYou'll also need to download dependency modules for your contract like this (in the\ndirectory containing contract package):\n```\n$ go mod tidy\n```\n\n### Compiling\n\n```\n./bin/neo-go contract compile -i contract.go\n```\n\nBy default, the filename will be the name of your .go file with the .nef\nextension, the file will be located in the same directory with your Go contract.\nAlong with the compiled contract and if the contract configuration file\n`contract.yml` exist, the following files will be generated:\n* smart-contract manifest file (`contract.manifest.json`) that is needed to deploy\n  the contract to the network\n* bindings configuration file (`contract.bindings.yml`) that is needed to generate\n  code-based or RPC contract bindings\nAll of them will be located in the same directory with your Go contract.\n\nIf you want another location for your compiled contract:\n\n```\n./bin/neo-go contract compile -i contract.go --out /Users/foo/bar/contract.nef\n```\n\nIf your contract is split across multiple files, you must provide a path\nto the directory where package files are contained instead of a single Go file\n(`out.nef` will be used as the default output file in this case):\n```\n./bin/neo-go contract compile -i ./path/to/contract\n```\n\n### Debugging\nYou can dump the opcodes generated by the compiler with the following command:\n\n```\n./bin/neo-go contract inspect -i contract.go -c\n```\n\nThis will result in something like this:\n\n```\nINDEX    OPCODE        PARAMETER                                                                                                                              \n0        INITSLOT      4 local, 2 arg                                                                                                                         <<\n3        LDARG1                                                                                                                                               \n4        NOT                                                  ", "doc_id": "89798c15-9d63-4035-ac79-13f08b651574", "embedding": null, "doc_hash": "6acde6b37787149296b64112ab80e9cc03d3df296ec2e72c73ef11650e55b5ce", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 3566, "end": 5782, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "ee19737a-936a-4ec1-85ff-9dd22ac71ee4", "3": "e7139d51-d3b4-4e21-bb5b-3899e9121717"}}, "__type__": "1"}, "e7139d51-d3b4-4e21-bb5b-3899e9121717": {"__data__": {"text": "                                                                                                                   \n5        JMPIFNOT_L    151 (146/92000000)                                                                                                                     \n10       SYSCALL       System.Storage.GetContext (9bf667ce)                                                                                                   \n15       NOP                                                                                                                                                  \n16       STLOC0                                                                                                                                               \n17       PUSHDATA1     53746f72616765206b6579206e6f7420796574207365742e2053657474696e6720746f2030 (\"Storage key not yet set. Setting to 0\")                   \n56       CONVERT       Buffer (30)                                                                                                                            \n58       PUSH1                                                             ", "doc_id": "e7139d51-d3b4-4e21-bb5b-3899e9121717", "embedding": null, "doc_hash": "f283cb3c78b1d06d438915bafa62331d9470143e9d98a00050fe986ec1ad2812", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 5857, "end": 7002, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "89798c15-9d63-4035-ac79-13f08b651574", "3": "7f476333-6a5f-4364-8b6d-45b51cc3ef4f"}}, "__type__": "1"}, "7f476333-6a5f-4364-8b6d-45b51cc3ef4f": {"__data__": {"text": "                                                                                                      \n59       PACK                                                                                                                                                 \n60       STLOC1                                                                                                                                               \n61       PUSHDATA1     696e666f (\"info\")                                                                                                                      \n67       LDLOC1                                                                                                                                               \n68       SWAP                                                                                                                                                 \n69       SYSCALL       System.Runtime.Notify (95016f61)                                                                                                       \n74", "doc_id": "7f476333-6a5f-4364-8b6d-45b51cc3ef4f", "embedding": null, "doc_hash": "4587cb9b059aff43dd81e5c55e2f3d34c2822dcc3ed8e300ace01fb626d44b53", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 7003, "end": 8062, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "e7139d51-d3b4-4e21-bb5b-3899e9121717", "3": "951dc690-d4c8-45b9-8eb9-daba7b6f2dd5"}}, "__type__": "1"}, "951dc690-d4c8-45b9-8eb9-daba7b6f2dd5": {"__data__": {"text": "                  \n74       NOP                                                                                                                                                  \n75       PUSH0                                                                                                                                                \n76       STLOC2                                                                                                                                               \n77       LDLOC0                                                                                                                                               \n78       PUSHDATA1     746573742d73746f726167652d6b6579 (\"test-storage-key\")                                                                                  \n96       LDLOC2                                                                                                                                               \n97       REVERSE3                                                                     ", "doc_id": "951dc690-d4c8-45b9-8eb9-daba7b6f2dd5", "embedding": null, "doc_hash": "201746337df612beaa5ce0b1ef62308fa7d00da77f9931af480b3a6ca15f2d3e", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 8060, "end": 9119, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "7f476333-6a5f-4364-8b6d-45b51cc3ef4f", "3": "efd1531b-905a-4962-beb1-aea132729c5f"}}, "__type__": "1"}, "efd1531b-905a-4962-beb1-aea132729c5f": {"__data__": {"text": "                                                                                           \n98       SYSCALL       System.Storage.Put (e63f1884)                                                                                                          \n103      NOP                                                                                                                                                  \n104      PUSHDATA1     53746f72616765206b657920697320696e697469616c69736564 (\"Storage key is initialised\")                                                    \n132      CONVERT       Buffer (30)                                                                                                                            \n134      PUSH1                                                                                                                                                \n135      PACK                                                                                                                                                 \n136      STLOC3                                                      ", "doc_id": "efd1531b-905a-4962-beb1-aea132729c5f", "embedding": null, "doc_hash": "e9eda29c81743b110ce5d57b621effa58a560269997c9cc6ceece9b44cb06ced", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 9123, "end": 10238, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "951dc690-d4c8-45b9-8eb9-daba7b6f2dd5", "3": "6464c845-ee93-44ff-a6ce-61ebbbd5342d"}}, "__type__": "1"}, "6464c845-ee93-44ff-a6ce-61ebbbd5342d": {"__data__": {"text": "                                                                                                            \n137      PUSHDATA1     696e666f (\"info\")                                                                                                                      \n143      LDLOC3                                                                                                                                               \n144      SWAP                                                                                                                                                 \n145      SYSCALL       System.Runtime.Notify (95016f61)                                                                                                       \n150      NOP                                                                                                                                                  \n151      RET                                                                                                                                                 ", "doc_id": "6464c845-ee93-44ff-a6ce-61ebbbd5342d", "embedding": null, "doc_hash": "9a9fd16090a5ca427eaa41ab87d76f7bcbcdb75821d5170a4a19cf19fb527e74", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 10239, "end": 11300, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "efd1531b-905a-4962-beb1-aea132729c5f", "3": "fc818107-ce22-4ff1-b922-d44336d7c575"}}, "__type__": "1"}, "fc818107-ce22-4ff1-b922-d44336d7c575": {"__data__": {"text": "                    \n152      INITSLOT      5 local, 0 arg                                                                                                                         \n155      SYSCALL       System.Storage.GetContext (9bf667ce)                                                                                                   \n160      NOP                                                                                                                                                  \n161      STLOC0                                                                                                                                               \n162      LDLOC0                                                                                                                                               \n163      PUSHDATA1     746573742d73746f726167652d6b6579 (\"test-storage-key\")                                                                                  \n181      SWAP                                                                                                                  ", "doc_id": "fc818107-ce22-4ff1-b922-d44336d7c575", "embedding": null, "doc_hash": "1566eceddff5078618186f9bc0eef498c3bca67ae8bb3f81ec234afd2f8c73ce", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 11301, "end": 12403, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "6464c845-ee93-44ff-a6ce-61ebbbd5342d", "3": "a62dd3ef-7862-45fc-a7a3-becc44032a19"}}, "__type__": "1"}, "a62dd3ef-7862-45fc-a7a3-becc44032a19": {"__data__": {"text": "                                                  \n182      SYSCALL       System.Storage.Get (925de831)                                                                                                          \n187      NOP                                                                                                                                                  \n188      STLOC1                                                                                                                                               \n189      PUSHDATA1     56616c756520726561642066726f6d2073746f72616765 (\"Value read from storage\")                                                             \n214      CONVERT       Buffer (30)                                                                                                                            \n216      PUSH1                                                                                                                                                \n217      PACK                                                                                            ", "doc_id": "a62dd3ef-7862-45fc-a7a3-becc44032a19", "embedding": null, "doc_hash": "829b38bb17e5943a85cfe31beadbe50449ce9efeff581bdfaae3aa0e01f329d6", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 12404, "end": 13514, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "fc818107-ce22-4ff1-b922-d44336d7c575", "3": "4725961d-843a-4e78-bade-bef241b86845"}}, "__type__": "1"}, "4725961d-843a-4e78-bade-bef241b86845": {"__data__": {"text": "                                                                        \n218      STLOC2                                                                                                                                               \n219      PUSHDATA1     696e666f (\"info\")                                                                                                                      \n225      LDLOC2                                                                                                                                               \n226      SWAP                                                                                                                                                 \n227      SYSCALL       System.Runtime.Notify (95016f61)                                                                                                       \n232      NOP                                                                                                                                                  \n233      PUSHDATA1    ", "doc_id": "4725961d-843a-4e78-bade-bef241b86845", "embedding": null, "doc_hash": "5749a1a6c151806747ba48a306dcf79a9ee96ff4e289751493549d9101a15208", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 13515, "end": 14564, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "a62dd3ef-7862-45fc-a7a3-becc44032a19", "3": "f8993b57-ca80-4ed7-b5a1-72a22b057b5e"}}, "__type__": "1"}, "f8993b57-ca80-4ed7-b5a1-72a22b057b5e": {"__data__": {"text": "    \n233      PUSHDATA1     53746f72616765206b657920616c7265616479207365742e20496e6372656d656e74696e672062792031 (\"Storage key already set. Incrementing by 1\")    \n277      CONVERT       Buffer (30)                                                                                                                            \n279      PUSH1                                                                                                                                                \n280      PACK                                                                                                                                                 \n281      STLOC3                                                                                                                                               \n282      PUSHDATA1     696e666f (\"info\")                                                                                                                      \n288      LDLOC3                                                                                                                                               \n289      SWAP           ", "doc_id": "f8993b57-ca80-4ed7-b5a1-72a22b057b5e", "embedding": null, "doc_hash": "f051ea134280bdb380a7d32fd47001177944d33a8c257f2ec9add5f0a48d82aa", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 14552, "end": 15694, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "4725961d-843a-4e78-bade-bef241b86845", "3": "22235839-a368-41a0-94a2-9d795c10f119"}}, "__type__": "1"}, "22235839-a368-41a0-94a2-9d795c10f119": {"__data__": {"text": "\n289      SWAP                                                                                                                                                 \n290      SYSCALL       System.Runtime.Notify (95016f61)                                                                                                       \n295      NOP                                                                                                                                                  \n296      LDLOC1                                                                                                                                               \n297      CONVERT       Integer (21)                                                                                                                           \n299      PUSH1                                                                                                                                                \n300      ADD                                                                                                   ", "doc_id": "22235839-a368-41a0-94a2-9d795c10f119", "embedding": null, "doc_hash": "1a5f278864215e066654c32587d37029830ec38c6a2d03b5bcc3baca92631a18", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 15700, "end": 16766, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "f8993b57-ca80-4ed7-b5a1-72a22b057b5e", "3": "29078ae5-ff89-48d5-9caa-ec6766c8132b"}}, "__type__": "1"}, "29078ae5-ff89-48d5-9caa-ec6766c8132b": {"__data__": {"text": "                                                                  \n301      STLOC1                                                                                                                                               \n302      LDLOC0                                                                                                                                               \n303      PUSHDATA1     746573742d73746f726167652d6b6579 (\"test-storage-key\")                                                                                  \n321      LDLOC1                                                                                                                                               \n322      REVERSE3                                                                                                                                             \n323      SYSCALL       System.Storage.Put (e63f1884)                                                                                                          \n328      NOP                                                     ", "doc_id": "29078ae5-ff89-48d5-9caa-ec6766c8132b", "embedding": null, "doc_hash": "2c55437f4e7dbb2dcf80fd35d8e1d0e633be634ebf484c5c5d57801e75b3260f", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 16775, "end": 17861, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "22235839-a368-41a0-94a2-9d795c10f119", "3": "dfc1f939-2723-4aae-a12a-947b3a5a45e4"}}, "__type__": "1"}, "dfc1f939-2723-4aae-a12a-947b3a5a45e4": {"__data__": {"text": "                                                                                                                \n329      PUSHDATA1     4e65772076616c7565207772697474656e20696e746f2073746f72616765 (\"New value written into storage\")                                        \n361      CONVERT       Buffer (30)                                                                                                                            \n363      PUSH1                                                                                                                                                \n364      PACK                                                                                                                                                 \n365      STLOC4                                                                                                                                               \n366      PUSHDATA1     696e666f (\"info\")                                                                                                                      \n372      LDLOC4                                   ", "doc_id": "dfc1f939-2723-4aae-a12a-947b3a5a45e4", "embedding": null, "doc_hash": "ceaae6fca426589ba3af74cade970dc1a8b0bc5925b7ba9e8623350e5133f37b", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 17862, "end": 18979, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "29078ae5-ff89-48d5-9caa-ec6766c8132b", "3": "3a9454fd-1c0b-4b2f-9a34-18af715a19bf"}}, "__type__": "1"}, "3a9454fd-1c0b-4b2f-9a34-18af715a19bf": {"__data__": {"text": "                                                                                                                               \n373      SWAP                                                                                                                                                 \n374      SYSCALL       System.Runtime.Notify (95016f61)                                                                                                       \n379      NOP                                                                                                                                                  \n380      LDLOC1                                                                                                                                               \n381      RET                         \n```\n\n#### Neo Smart Contract Debugger support\n\nIt's possible to debug contracts written in Go using standard [Neo Smart\nContract Debugger](https://github.com/neo-project/neo-debugger/) which is a\npart of [Neo Blockchain\nToolkit](https://github.com/neo-project/neo-blockchain-toolkit/). To do that\nyou need to generate debug information using `--debug` option, like this:\n\n```\n$ ./bin/neo-go contract compile -i contract.go -c contract.yml -m contract.manifest.json -o contract.nef --debug contract.debug.json\n```\n\nThis file can then be used by debugger and set up to work just like for any\nother supported language.\n\n### Deploying\n\nDeploying a contract to blockchain with neo-go requires both NEF and JSON\nmanifest generated by the compiler from a configuration file provided in YAML\nformat. To create contract manifest, pass a", "doc_id": "3a9454fd-1c0b-4b2f-9a34-18af715a19bf", "embedding": null, "doc_hash": "57245e8482826e0322c9f8b4d57d9869cea74d68539751b615060a03d1988d04", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 18980, "end": 20609, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "dfc1f939-2723-4aae-a12a-947b3a5a45e4", "3": "45ab2bda-3283-45d8-b9fc-c30deea75bd8"}}, "__type__": "1"}, "45ab2bda-3283-45d8-b9fc-c30deea75bd8": {"__data__": {"text": "a configuration file provided in YAML\nformat. To create contract manifest, pass a YAML file with `-c` parameter and\nspecify the manifest output file with `-m`:\n```\n./bin/neo-go contract compile -i contract.go -c config.yml -m contract.manifest.json\n```\n\nExample of such YAML file contents:\n```\nname: Contract\nsafemethods: []\nsupportedstandards: []\nevents:\n  - name: info\n    parameters:\n      - name: message\n        type: String\n```\n\nThen, the manifest can be passed to the `deploy` command via `-m` option:\n\n```\n$ ./bin/neo-go contract deploy -i contract.nef -m contract.manifest.json -r http://localhost:20331 -w wallet.json\n```\n\nDeployment works via an RPC server, an address of which is passed via `-r`\noption, and should be signed using a wallet from `-w` option. More details can\nbe found in `deploy` command help.\n\n#### Config file\nConfiguration file contains following options:\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| `name` | Contract name in the manifest. | `\"My awesome contract\"`\n| `safemethods` | List of methods which don't change contract state, don't emit notifications and are available for anyone to call. | `[\"balanceOf\", \"decimals\"]`\n| `supportedstandards` | List of standards this contract implements. For example, `NEP-11` or `NEP-17` token standard. This will enable additional checks in compiler. The check can be disabled with `--no-standards` flag. | `[\"NEP-17\"]`\n| `events` | Notifications emitted by this contract. | See [Events](#Events). |\n| `permissions` | Foreign calls allowed for this contract. | See [Permissions](#Permissions). |\n| `overloads` | Custom method names for this contract. | See [Overloads](#Overloads). |\n\n##### Events\nEach event must have a name and 0 or more parameters. Parameters are specified using their name and type.\nBoth event and parameter names must be strings.\nParameter type can be one of the following:\n\nType in code | Type in config file\n--- | ---\n`bool` | `Boolean` \n`int`, `int64` etc.| `Integer`\n`[]byte` | `ByteArray` \n`string` | `String` \nAny non-byte slice `[]T`| `Array` \n`map[K]V` | `Map` \n`interop.Hash160` | `Hash160`\n`interop.Hash256` | `Hash256`\n`interop.Interface` | `InteropInterface`\n`interop.PublicKey` | `PublicKey`\n`interop.Signature` | `Signature`\nanything else | `Any` \n\n`interop.*` types are defined as aliases in `github.com/nspcc-dev/neo-go/pkg/interop` module\nwith the sole purpose of correct manifest generation.\n\nAs an example, consider `Transfer` event from `NEP-17` standard:\n```\n- name: Transfer\n  parameters:\n    - name: from\n      type: Hash160\n    - name: to\n      type: Hash160\n    - name: amount\n      type: Integer\n```\n\nBy default, compiler performs some sanity checks. Most of the time\nit will report missing events and/or parameter type mismatch.\nIt isn't prohibited to use a variable as an event name in code, but it will prevent\nthe compiler from analyzing the event. It is better to use either constant or string literal.\nIt isn't prohibited to use ellipsis expression as an event arguments, but it will also\nprevent the compiler from analyzing the event. It is better to provide arguments directly\nwithout", "doc_id": "45ab2bda-3283-45d8-b9fc-c30deea75bd8", "embedding": null, "doc_hash": "4bee4cf4153267c7a2caca58b6dded95fdb813002fb53a8e71b2629648876856", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 20540, "end": 23672, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "3a9454fd-1c0b-4b2f-9a34-18af715a19bf", "3": "03ce0c59-5887-4f0e-bd9d-3c4eb0a4734b"}}, "__type__": "1"}, "03ce0c59-5887-4f0e-bd9d-3c4eb0a4734b": {"__data__": {"text": "compiler from analyzing the event. It is better to provide arguments directly\nwithout `...`. The type conversion code will be emitted for checked events, it will cast\nargument types to ones specified in the contract manifest. These checks and conversion can\nbe disabled with `--no-events` flag.\n\n##### Permissions\nEach permission specifies contracts and methods allowed for this permission.\nIf a contract is not specified in a rule, specified set of methods can be called on any contract.\nBy default, no calls are allowed. The simplest permission is to allow everything:\n```\n- methods: '*'\n```\n\nAnother common case is to allow calling `onNEP17Payment`, which is necessary\nfor most of the NEP-17 token implementations:\n```\n- methods: [\"onNEP17Payment\"]\n```\n\nIn addition to `methods`, permission can have one of these fields:\n1. `hash` contains hash and restricts a set of contracts to a single contract.\n2. `group` contains public key and restricts a set of contracts to those that\nhave the corresponding group in their manifest.\n\nConsider an example:\n```\n- methods: [\"onNEP17Payment\"]\n- hash: fffdc93764dbaddd97c48f252a53ea4643faa3fd\n  methods: [\"start\", \"stop\"]\n- group: 03184b018d6b2bc093e535519732b3fd3f7551c8cffaf4621dd5a0b89482ca66c9\n  methods: [\"update\"]\n```\n\nThis set of permissions allows calling:\n- `onNEP17Payment` method of any contract\n- `start` and `stop` methods of contract with hash `fffdc93764dbaddd97c48f252a53ea4643faa3fd`\n- `update` method of contract in group with public key `03184b018d6b2bc093e535519732b3fd3f7551c8cffaf4621dd5a0b89482ca66c9`\n\nAlso note that a native contract must be included here too. For example, if your contract\ntransfers NEO/GAS or gets some info from the `Ledger` contract, all of these\ncalls must be allowed in permissions.\n\nThe compiler does its best to ensure that correct permissions are specified in the config.\nIncorrect permissions will result in runtime invocation failures.\nUsing either constant or literal for contract hash and method will allow the compiler\nto perform more extensive analysis.\nThis check can be disabled with `--no-permissions` flag.\n\n##### Overloads\nNeoVM allows a contract to have multiple methods with the same name\nbut different parameters number. Go lacks this feature, but this can be circumvented\nwith `overloads` section. Essentially, it is a mapping from default contract method names\nto the new ones.\n```\n- overloads:\n    oldName1: newName\n    oldName2: newName\n```\nSince the use-case for this is to provide multiple implementations with the same ABI name,\n`newName` is required to be already present in the compiled contract.\n\nAs an example, consider [`NEP-11` standard](https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki#transfer).\nIt requires a divisible NFT contract to have 2 `transfer` methods. To achieve this, we might implement\n`Transfer` and `TransferDivisible` and specify the emitted name in the config:\n```\n- overloads:\n    transferDivisible:transfer\n```\n\n\n#### Manifest file\nAny contract can be included in a group identified by a public key which is used in [permissions](#Permissions).\nThis is achieved with `manifest add-group` command.\n```\n./bin/neo-go contract manifest add-group -n contract.nef -m contract.manifest.json --sender <sender>", "doc_id": "03ce0c59-5887-4f0e-bd9d-3c4eb0a4734b", "embedding": null, "doc_hash": "b7b7d4871214851626fce05a4e6da39cd3ee357e3944e62fec2e6adf08b08213", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 23669, "end": 26931, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "45ab2bda-3283-45d8-b9fc-c30deea75bd8", "3": "94c7a3ff-59ed-4459-a732-0fe152c8296c"}}, "__type__": "1"}, "94c7a3ff-59ed-4459-a732-0fe152c8296c": {"__data__": {"text": "contract.nef -m contract.manifest.json --sender <sender> --wallet /path/to/wallet.json --account <account>\n```\nIt accepts contract `.nef` and manifest files emitted by `compile` command as well as\nsender and signer accounts. `--sender` is the account that will send deploy transaction later (not necessarily in wallet).\n`--account` is the wallet account which signs contract hash using group private key.\n\n#### Neo Express support\n\nIt's possible to deploy contracts written in Go using [Neo\nExpress](https://github.com/neo-project/neo-express), which is a part of [Neo\nBlockchain\nToolkit](https://github.com/neo-project/neo-blockchain-toolkit/). To do that,\nyou need to generate a different metadata file using YAML written for\ndeployment with neo-go. It's done in the same step with compilation via\n`--config` input parameter and `--abi` output parameter, combined with debug\nsupport the command line will look like this:\n\n```\n$ ./bin/neo-go contract compile -i contract.go --config contract.yml -o contract.nef --debug contract.debug.json --abi contract.abi.json \n```\n\nThis file can then be used by toolkit to deploy contract the same way\ncontracts in other languages are deployed.\n\n\n### Invoking\nYou can import your contract into a standalone VM and run it there (see [VM\ndocumentation](vm.md) for more info), but that only works for simple contracts\nthat don't use blockchain a lot. For more real contracts you need to deploy\nthem first and then do test invocations and regular invocations with `contract\ntestinvokefunction` and `contract invokefunction` commands (or their variants,\nsee `contract` command help for more details. They all work via RPC, so it's a\nmandatory parameter.\n\nExample call (contract `f84d6a337fbc3d3a201d41da99e86b479e7a2554` with method\n`balanceOf` and method's parameter `NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq` using\ngiven RPC server and wallet and paying 0.00001 extra GAS for this transaction):\n\n```\n$ ./bin/neo-go contract invokefunction -r http://localhost:20331 -w my_wallet.json -g 0.00001 f84d6a337fbc3d3a201d41da99e86b479e7a2554 balanceOf NVTiAjNgagDkTr5HTzDmQP9kPwPHN5BgVq\n```\n\n### Generating contract bindings\nTo be able to use deployed contract from another contract one needs to have\nits interface definition (exported methods and hash). While it is possible to\nuse generic contract.Call interop interface, it's not very convenient and\nefficient. NeoGo can autogenerate contract bindings in Go language for any\ndeployed contract based on its manifest, it creates a Go source file with all\nof the contract's methods that then can be imported and used as a regular Go\npackage.\n\n```\n$ ./bin/neo-go contract generate-wrapper --manifest manifest.json --out wrapper.go --hash 0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\n```\n\nNotice that some structured types can be omitted this way (when a function\nreturns some structure it's just an \"Array\" type in the manifest with no\ninternal details), but if the contract you're using is written in Go\noriginally you can create a specific configuration file during compilation\nthat will add this data for wrapper generator to use:\n\n```\n$ ./bin/neo-go contract compile -i contract.go --config contract.yml -o contract.nef --manifest manifest.json --bindings contract.bindings.yml\n$ ./bin/neo-go contract", "doc_id": "94c7a3ff-59ed-4459-a732-0fe152c8296c", "embedding": null, "doc_hash": "309919143ebbb03f82ed06270fe0ca14c88526b8c1b7e9cae07f7db6ab589d27", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 26954, "end": 30229, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "03ce0c59-5887-4f0e-bd9d-3c4eb0a4734b", "3": "e2ee2aba-9da8-49cf-adca-da05ca9ccd46"}}, "__type__": "1"}, "e2ee2aba-9da8-49cf-adca-da05ca9ccd46": {"__data__": {"text": "--bindings contract.bindings.yml\n$ ./bin/neo-go contract generate-wrapper --manifest manifest.json --config contract.bindings.yml --out wrapper.go --hash 0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\n```\n\n### Generating RPC contract bindings\nTo simplify interacting with the contract via RPC you can generate\ncontract-specific RPC bindings with the \"generate-rpcwrapper\" command. It\ngenerates ContractReader structure for safe methods that accept appropriate\ndata for input and return things returned by the contract. State-changing\nmethods are contained in Contract structure with each contract method\nrepresented by three wrapper methods that create/send transaction with a\nscript performing appropriate action. This script invokes contract method and\ndoes not do anything else unless the method's returned value is of a boolean\ntype, in this case an ASSERT is added to script making it fail when the method\nreturns false.\n\n```\n$ ./bin/neo-go contract generate-rpcwrapper --manifest manifest.json --out rpcwrapper.go --hash 0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\n```\n\nIf your contract is NEP-11 or NEP-17 that's autodetected and an appropriate\npackage is included as well. Notice that the type data available in the\nmanifest is limited, so in some cases the interface generated may use generic\nstackitem types. Any InteropInterface returned from a method is treated as\niterator and an appropriate unwrapper is used with UUID and iterator structure\nresult. This pair can then be used in Invoker `TraverseIterator` method to\nretrieve actual resulting items.\n\nGo contracts can also make use of additional type data from bindings\nconfiguration file generated during compilation. This can cover arrays, maps\nand structures. Notice that structured types returned by methods can't be Null\nat the moment (see #2795).\n\n```\n$ ./bin/neo-go contract compile -i contract.go --config contract.yml -o contract.nef --manifest manifest.json --bindings contract.bindings.yml --guess-eventtypes\n$ ./bin/neo-go contract generate-rpcwrapper --manifest manifest.json --config contract.bindings.yml --out rpcwrapper.go --hash 0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\n```\n\nContract-specific RPC-bindings generated by \"generate-rpcwrapper\" command include\nstructure wrappers for each event declared in the contract manifest as far as the\nset of helpers that allow to retrieve emitted event from the application log or\nfrom stackitem. By default, event wrappers builder use event structure that was\ndescribed in the manifest. Since the type data available in the manifest is\nlimited, in some cases the resulting generated event structure may use generic\ngo types. Go contracts can make use of additional type data from bindings\nconfiguration file generated during compilation. Like for any other contract\ntypes, this can cover arrays, maps and structures. To reach the maximum\nresemblance between the emitted events and the generated event wrappers, we\nrecommend either to fill in the extended events type information in the contract\nconfiguration file before the compilation or to use `--guess-eventtypes`\ncompilation option.\n\nIf using `--guess-eventtypes` compilation option, event parameter types will be\nguessed from the arguments of `runtime.Notify` calls for each emitted event. If\nmultiple calls of `runtime.Notify` are found, then argument types will be checked\nfor matching (guessed types must be the same across the particular event usages).\nAfter that, the extended types binding configuration will be generated according\nto the emitted events parameter types. `--guess-eventtypes` compilation option\nis able to recognize those events that has a constant name known at a compilation\ntime and do not include variadic arguments usage. Thus, use this option if your\ncontract suites these", "doc_id": "e2ee2aba-9da8-49cf-adca-da05ca9ccd46", "embedding": null, "doc_hash": "e4067d9183a3aa8f5b2f43b8ba095b4cdf3a354a54e93106a94fbd00b73f0a75", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 30229, "end": 34003, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "94c7a3ff-59ed-4459-a732-0fe152c8296c", "3": "0cee1c36-1282-456c-a5c5-99bc40438c9b"}}, "__type__": "1"}, "0cee1c36-1282-456c-a5c5-99bc40438c9b": {"__data__": {"text": "not include variadic arguments usage. Thus, use this option if your\ncontract suites these requirements. Otherwise, we recommend to manually specify\nextended event parameter types information in the contract configuration file.\n\nExtended event parameter type information can be provided manually via contract\nconfiguration file under the `events` section. Each event parameter specified in\nthis section may be supplied with additional parameter type information specified\nunder `extendedtype` subsection. The extended type information (`ExtendedType`)\nhas the following structure:\n\n| Field       | Type                                                                                                                                  | Required                                                                             | Meaning                                                                                                                                          |\n|-------------|---------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|\n| `base`      | Any valid [NEP-14 parameter type](https://github.com/neo-project/proposals/blob/master/nep-14.mediawiki#parametertype) except `Void`. | Always required.                                                                              | The base type of a parameter, e.g. `Array` for go structures and any nested arrays, `Map` for nested maps, `Hash160` for 160-bits integers, etc. |\n| `name`      | `string`                                                                                                                              | Required for structures, omitted for arrays, interfaces and maps.                    | Name of a structure that will be used in the resulting RPC binding.                                                                              |\n| `interface` | `string`                  ", "doc_id": "0cee1c36-1282-456c-a5c5-99bc40438c9b", "embedding": null, "doc_hash": "49b0638ba23bd184854e8f0aff5da3b30cd8ac907e36bed85cd3d9a6147bb054", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 33980, "end": 36156, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "e2ee2aba-9da8-49cf-adca-da05ca9ccd46", "3": "cc2bdb5a-b872-420b-9cb4-c80576cb419a"}}, "__type__": "1"}, "cc2bdb5a-b872-420b-9cb4-c80576cb419a": {"__data__": {"text": "                                                                                                                             | Required for `InteropInterface`-based types, currently `iterator` only is supported. | Underlying value of the `InteropInterface`.                                                                                                      |\n| `key`       | Any simple [NEP-14 parameter type](https://github.com/neo-project/proposals/blob/master/nep-14.mediawiki#parametertype).              | Required for `Map`-based types.                                                      | Key type for maps.                                                                                                                               |\n| `value`     | `ExtendedType`.                                                        | Required for iterators, arrays and maps.                                             | Value type of iterators, arrays and maps.                                                                                                        |\n| `fields`    | Array of `FieldExtendedType`.                                                                                                         | Required for structures.                                                             | Ordered type data for structure fields.                              ", "doc_id": "cc2bdb5a-b872-420b-9cb4-c80576cb419a", "embedding": null, "doc_hash": "5db64a52cc77514b7e3f758b1ac12d99314b2dbd7046a4ce0e8a405ea992349c", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 36234, "end": 37612, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "0cee1c36-1282-456c-a5c5-99bc40438c9b", "3": "b7ab304f-580f-4036-84e9-de8298ab7270"}}, "__type__": "1"}, "b7ab304f-580f-4036-84e9-de8298ab7270": {"__data__": {"text": "                                                                                               |\n\nThe structure's field extended information (`FieldExtendedType`) has the following structure:\n\n| Field                  | Type           | Required         | Meaning                                                                     |\n|------------------------|----------------|------------------|-----------------------------------------------------------------------------|\n| `field`                | `string`       | Always required. | Name of the structure field that will be used in the resulting RPC binding. |\n| Inlined `ExtendedType` | `ExtendedType` | Always required. | The extended type information about structure field.                        |\n\n\nAny named structures used in the `ExtendedType` description must be manually\nspecified in the contract configuration file under top-level `namedtypes` section\nin the form of `map[string]ExtendedType`, where the map key is a name of the\ndescribed named structure that matches the one provided in the `name` field of\nthe event parameter's extended type.\n\nHere's the example of manually-created contract configuration file that uses\nextended types for event parameters description:\n\n```\nname: \"HelloWorld contract\"\nsupportedstandards: []\nevents:\n  - name: Some simple notification\n    parameters:\n      - name: intP\n        type: Integer\n      - name: boolP\n        type: Boolean\n      - name: stringP\n        type: String\n  - name: Structure notification\n    parameters:\n      - name: structure parameter\n        type: Array\n        extendedtype:\n          base: Array\n          name: transferData\n  - name: Map of structures notification\n    parameters:\n      - name: map parameter\n        type: Map\n        extendedtype:\n          base: Map\n          key: Integer\n          value:\n            base: Array\n            name: transferData\n  - name: Iterator notification\n    parameters:\n      - name: data\n        type: InteropInterface\n        extendedtype:\n          base: InteropInterface\n          interface: iterator\nnamedtypes:\n  transferData:\n    base: Array\n    fields:\n      - field: IntField\n        base: Integer\n      - field: BoolField\n        base: Boolean\n```\n\n## Smart contract examples\n\nSome examples are provided in the [examples directory](../examples). For more\nsophisticated real-world contracts written in Go check out", "doc_id": "b7ab304f-580f-4036-84e9-de8298ab7270", "embedding": null, "doc_hash": "0affda9374ed65239fe59e755d149c3eb6e659c5981d87ba71c8d6c83a423dec", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 37613, "end": 40009, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "cc2bdb5a-b872-420b-9cb4-c80576cb419a", "3": "4acd812a-aeee-4369-b0d2-7392efa847b3"}}, "__type__": "1"}, "4acd812a-aeee-4369-b0d2-7392efa847b3": {"__data__": {"text": "For more\nsophisticated real-world contracts written in Go check out [NeoFS\ncontracts](https://github.com/nspcc-dev/neofs-contract/).\n\n## How to report compiler bugs \n1. Make a proper testcase (example testcases can be found in the tests folder)\n2. Create an issue on Github \n3. Make a PR with a reference to the created issue, containing the testcase that proves the bug\n4. Either you fix the bug yourself or wait for patch that solves the problem\n", "doc_id": "4acd812a-aeee-4369-b0d2-7392efa847b3", "embedding": null, "doc_hash": "f2eb3e79e6ee166cacb6b28db153d640f1e477e45151e31ea570f9afea8a95ce", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}, "node_info": {"start": 39942, "end": 40390, "_node_type": "1"}, "relationships": {"1": "18660e7038d4e091a60804024bd571a387761b86", "2": "b7ab304f-580f-4036-84e9-de8298ab7270"}}, "__type__": "1"}, "3fb1c51f-8a11-4f78-8ad5-12f0dbc73d75": {"__data__": {"text": "# NeoGo consensus node\n\nNeoGo node can act as a consensus node. A consensus node differs from a regular\none in that it participates in block acceptance process using dBFT\nprotocol. Any committee node can also be elected as a CN; therefore, they're\nexpected to follow the same setup process as CNs (to be ready to become CNs\nif/when they're elected).\n\nWhile regular nodes on Neo network don't need any special keys, CNs always have\none used to sign dBFT messages and blocks. So, the main difference between\na regular node and a consensus/committee node is that it should be configured to\nuse some key from some wallet.\n\n## Running a CN on public networks\n\n### Hardware requirements\n\nWhile NeoGo can be very conservative with its resource consumption, public\nnetwork CN provides some service to the general audience and thus should have\nenough hardware resources to do its job reliably. We recommend amd64 machine\nwith at least two cores, 8+ GB of memory and 64 GB SSD (disk space\nrequirements depend on actual chain height and\nKeepOnlyLatestState/RemoveUntraceableBlocks settings, 64 GB is considered to\nbe enough for the first year of blockchain).\n\n### OS requirements\n\nNeoGo is a single binary that can be run on any modern GNU/Linux\ndistribution. We recommend using major well-supported OSes like CentOS, Debian\nor Ubuntu. Make sure they're updated with the latest security patches.\n\nNo additional packages are needed for NeoGo CN.\n\n### Installation\n\nDownload NeoGo binary [from\nGithub](https://github.com/nspcc-dev/neo-go/releases) or use [Docker\nimage](https://hub.docker.com/r/nspccdev/neo-go). It has everything included,\nno additional plugins needed.\n\nTake an appropriate (mainnet/testnet) configuration [from the\nrepository](https://github.com/nspcc-dev/neo-go/tree/master/config) and save\nit in some directory (we'll assume that it's available in the same directory as\nneo-go binary).\n\n### Configuration and execution\n\nAdd the following subsection to `ApplicationConfiguration` section of your\nconfiguration file (`protocol.mainnet.yml` or `protocol.testnet.yml`):\n```\n  Consensus:\n    Enabled: true\n    UnlockWallet:\n      Path: \"wallet.json\"\n      Password: \"welcometotherealworld\"\n```\nwhere `wallet.json` is a path to your NEP-6 wallet and `welcometotherealworld`\nis a password to your CN key. Run the node in a regular way after that:\n\n```\n$ neo-go node --mainnet --config-path ./\n```\nwhere `--mainnet` is your network (can be `--testnet` for testnet) and\n`--config-path` is a path to the configuration file directory. If the node starts\nfine, it'll be logging events like synchronized blocks. The node doesn't have\nany interactive CLI, it only outputs logs so you can wrap this command in a\nsystemd service file to run automatically on system startup.\n\nNotice that the default configuration has RPC and Prometheus services enabled.\nYou can turn them off for security purposes or restrict access to them with a\nfirewall. Carefully review all other configuration options to see if they meet\nyour expectations. Details on various configuration options are provided in the\n[node configuration documentation](node-configuration.md), CLI commands are\nprovided in the [CLI documentation](cli.md).\n\nConsensus service can also run in watch-only mode when the node will\nreceive/process/log dBFT messages generated by other nodes, but won't be able\nto generate any. It's mostly useful for debugging/monitoring. To enable this\nmode just drop the `UnlockWallet` section from the configuration like this:\n```\n  Consensus:\n    Enabled:", "doc_id": "3fb1c51f-8a11-4f78-8ad5-12f0dbc73d75", "embedding": null, "doc_hash": "43fd5d10f47c4093f293bd05338139adf3069e8699a1b647bd6e4ad864cee14a", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/consensus.md"}, "node_info": {"start": 0, "end": 3534, "_node_type": "1"}, "relationships": {"1": "2a3e300bea3eb45247903995c576e4fd656ea90b", "3": "333c2f1b-fdca-40af-a374-050214c26ec8"}}, "__type__": "1"}, "333c2f1b-fdca-40af-a374-050214c26ec8": {"__data__": {"text": "the configuration like this:\n```\n  Consensus:\n    Enabled: true\n```\n\n### Registration\n\nTo register as a candidate, use neo-go as CLI command with an external RPC\nserver for it to connect to (for chain data and transaction submission). You\ncan use any public RPC server or an RPC server of your own like the node\nstarted at the previous step. We'll assume that you run the next command on\nthe same node in default configuration with RPC interface available at port\n10332.\n\nCandidate registration is performed via NEO contract invocation that costs\n1000 GAS, so your account must have enough of it to pay. You need to provide\nyour wallet and address to neo-go command:\n```\n$ neo-go wallet candidate register -a NiKEkwz6i9q6gqfCizztDoHQh9r9BtdCNa -w wallet.json -r http://localhost:10332\n```\nwhere `NiKEkwz6i9q6gqfCizztDoHQh9r9BtdCNa` is your address, `wallet.json` is a\npath to NEP-6 wallet file and `http://localhost:10332` is an RPC node to\nuse.\n\nThis command will create and send appropriate transaction to the network and\nyou should then wait for it to settle in a block. If all goes well, it'll end\nwith \"HALT\" state and your registration will be completed. You can use\n`query tx` command to see transaction status or `query candidates` to see if\nyour candidate has been added.\n\n### Voting\n\nAfter registration is completed, if you own some NEO, you can also vote for your\ncandidate to help it become a CN and receive additional voter GAS. To do that,\nyou need to know the public key of your candidate, which can either be seen in\n`query candidates` command output or extracted from wallet `wallet dump-keys`\ncommand:\n\n```\n$ neo-go wallet dump-keys -w wallet.json\nNiKEkwz6i9q6gqfCizztDoHQh9r9BtdCNa (simple signature contract):\n0363f6678ea4c59e292175c67e2b75c9ba7bb73e47cd97cdf5abaf45de157133f5\n```\n\n`0363f6678ea4c59e292175c67e2b75c9ba7bb73e47cd97cdf5abaf45de157133f5` is a\npublic key for `NiKEkwz6i9q6gqfCizztDoHQh9r9BtdCNa` address. To vote for it\nuse:\n```\n$ neo-go wallet candidate vote -a NiKEkwz6i9q6gqfCizztDoHQh9r9BtdCNa -w wallet.json -r http://localhost:10332 -c 0363f6678ea4c59e292175c67e2b75c9ba7bb73e47cd97cdf5abaf45de157133f5\n\n```\nwhere `NiKEkwz6i9q6gqfCizztDoHQh9r9BtdCNa` is the voter's address, `wallet.json`\nis the NEP-6 wallet file path, `http://localhost:10332` is the RPC node address and\n`0363f6678ea4c59e292175c67e2b75c9ba7bb73e47cd97cdf5abaf45de157133f5` is the\npublic key the voter votes for. This command also returns transaction hash and you\nneed to wait for this transaction to be accepted into one of subsequent blocks.\n\n## Private NeoGo network\n### Using existing Dockerfile\n\nneo-go comes with two preconfigured private network setups, the first one has\nfour consensus nodes and the second one uses single node. Nodes are packed\ninto Docker containers and four-node setup shares a volume for chain data.\n\nFour-node setup uses ports 20333-20336 for", "doc_id": "333c2f1b-fdca-40af-a374-050214c26ec8", "embedding": null, "doc_hash": "5b98c9e1e298b8da46c207ae0a899da2ee7294a23dddff3b4a606c3318efc4c8", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/consensus.md"}, "node_info": {"start": 3486, "end": 6364, "_node_type": "1"}, "relationships": {"1": "2a3e300bea3eb45247903995c576e4fd656ea90b", "2": "3fb1c51f-8a11-4f78-8ad5-12f0dbc73d75", "3": "e38855d2-6105-4633-bced-a10ae256e6d0"}}, "__type__": "1"}, "e38855d2-6105-4633-bced-a10ae256e6d0": {"__data__": {"text": "a volume for chain data.\n\nFour-node setup uses ports 20333-20336 for P2P communication and ports\n30333-30336 for RPC (Prometheus monitoring is also available at ports\n20001-20004). Single-node is on ports 20333/30333/20001 for\nP2P/RPC/Prometheus.\n\nNeoGo default privnet configuration is made to work with four-node consensus,\nyou have to modify it if you're to use single consensus node.\n\nNode wallets are located in the `.docker/wallets` directory where\n`wallet1_solo.json` is used for single-node setup and all others for\nfour-node setup.\n\n#### Prerequisites\n- `docker` of version >= 20.10.0\n- `docker-compose`\n- `go` compiler\n\n#### Instructions\nYou can use an existing docker-compose file located in `.docker/docker-compose.yml`:\n```bash\nmake env_image # build image\nmake env_up    # start containers, use \"make env_single\" for single CN\n```\nTo monitor logs:\n```bash\ndocker-compose -f .docker/docker-compose.yml logs -f\n```\n\nTo stop:\n```bash\nmake env_down\n```\n\nTo remove old blockchain state:\n```bash\nmake env_clean\n``` \n\n### Start nodes manually\n1. Create a separate config directory for every node and\nplace the corresponding config named `protocol.privnet.yml` there.\n\n2. Edit configuration file for every node.\nExamples can be found at `config/protocol.privnet.docker.one.yml` (`two`, `three` etc.).\n    1. Add `Consensus` section with `Enabled: true` field and an\n       `UnlockWallet` subsection with `Path` and `Password` strings for NEP-6\n       wallet path and the password for the account to be used for the\n       consensus node.\n    2. Make sure that your `MinPeers` setting is no more than\n       the number of nodes participating in consensus minus one. The\n       recommended setting is 2F in terms of BFT, that's the minimum number\n       the network can operate with (0 for a single node, 2 for 4 CNs, 4 for 7\n       CNs).\n    3. Set `Address`, `Port` and `RPC.Port` to the appropriate values.\n       They must differ between nodes.\n    4. If you start binary from the same directory, you will probably want to change\n       `DataDirectoryPath` from the `LevelDBOptions`. \n\n3. Start all nodes with `neo-go node --config-path <dir-from-step-2>`.\n", "doc_id": "e38855d2-6105-4633-bced-a10ae256e6d0", "embedding": null, "doc_hash": "683d06cd0217e963b3a1a1e565a5fcfe9fba2d73316e2441e24ba72f9d187785", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/consensus.md"}, "node_info": {"start": 6345, "end": 8510, "_node_type": "1"}, "relationships": {"1": "2a3e300bea3eb45247903995c576e4fd656ea90b", "2": "333c2f1b-fdca-40af-a374-050214c26ec8"}}, "__type__": "1"}, "e2884c53-d9ff-460a-9a62-50b8cadbc350": {"__data__": {"text": "# Conventions\n\nThis document will list conventions that this repo should follow. These are\nthe guidelines, and if you believe that one should not be followed, please state\nwhy in your PR. If you believe that a piece of code does not follow one of the\nconventions listed, please open an issue before making any changes. \n\nWhen submitting a new convention, please open an issue for discussion, if\npossible please highlight parts in the code where this convention could help the\ncode readability or simplicity.\n\n## Avoid named return parameters\n\nfunc example(test int) (num int) {\n    a = test + 1\n    num = a * test\n    return\n}\n\nIn the above function we have used a named return parameter, which allows you to\ninclude a simple return statement without the variables you are returning. This\npractice can cause confusion when functions become large or the logic becomes\ncomplex, so these should be avoided.\n\n## Use error wrapping\n\nBad:\n```\nerr = SomeAPI()\nif err != nil {\n    return fmt.Errorf(\"something bad happened: %v\", err)\n}\n```\n\nGood:\n```\nerr = SomeAPI()\nif err != nil {\n    return fmt.Errorf(\"something bad happened: %w\", err)\n}\n```\n\nError wrapping allows `errors.Is` and `errors.As` usage in upper layer\nfunctions which might be useful.\n", "doc_id": "e2884c53-d9ff-460a-9a62-50b8cadbc350", "embedding": null, "doc_hash": "3fefee2bf8c9db56e7190725a501ec98b4d5a6b156f2e96cfa5b73cbcba0cc59", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/conventions.md"}, "node_info": {"start": 0, "end": 1243, "_node_type": "1"}, "relationships": {"1": "cfd1819bb795d7d9fee9be05d17d86899712f257"}}, "__type__": "1"}, "8980caf0-33c7-4535-90bf-95f38ee00230": {"__data__": {"text": "# NeoGo node configuration file\n\nThis section contains detailed NeoGo node configuration file description\nincluding default config values and some tips to set up configurable values.\n\nEach config file contains two sections. `ApplicationConfiguration` describes node-related\nsettings and `ProtocolConfiguration` contains protocol-related settings. See the\n[Application Configuration](#Application-Configuration) and\n[Protocol Configuration](#Protocol-Configuration) sections for details on configurable\nvalues.\n\n## Application Configuration\n\n`ApplicationConfiguration` section of `yaml` node configuration file contains\nnode-related settings described in the table below.\n\n| Section | Type | Default value | Description |\n| --- | --- | --- | --- |\n| DBConfiguration | [DB Configuration](#DB-Configuration) |  | Describes configuration for database. See the [DB Configuration](#DB-Configuration) section for details. |\n| LogLevel | `string` | \"info\" | Minimal logged messages level (can be \"debug\", \"info\", \"warn\", \"error\", \"dpanic\", \"panic\" or \"fatal\"). |\n| GarbageCollectionPeriod | `uint32` | 10000 | Controls MPT garbage collection interval (in blocks) for configurations with `RemoveUntraceableBlocks` enabled and `KeepOnlyLatestState` disabled. In this mode the node stores a number of MPT trees (corresponding to `MaxTraceableBlocks` and `StateSyncInterval`), but the DB needs to be clean from old entries from time to time. Doing it too often will cause too much processing overhead, doing it too rarely will leave more useless data in the DB. |\n| KeepOnlyLatestState | `bool` | `false` | Specifies if MPT should only store the latest state (or a set of latest states, see `P2PStateExchangeExtensions` section in the ProtocolConfiguration for details). If true, DB size will be smaller, but older roots won't be accessible. This value should remain the same for the same database. |  |\n| LogPath | `string` | \"\", so only console logging | File path where to store node logs. |\n| Oracle | [Oracle Configuration](#Oracle-Configuration) | | Oracle module configuration. See the [Oracle Configuration](#Oracle-Configuration) section for details. |\n| P2P | [P2P Configuration](#P2P-Configuration) | | Configuration values for P2P network interaction. See the [P2P Configuration](#P2P-Configuration) section for details. |\n| P2PNotary | [P2P Notary Configuration](#P2P-Notary-Configuration) | | P2P Notary module configuration. See the [P2P Notary Configuration](#P2P-Notary-Configuration) section for details. |\n| Pprof | [Metrics Services Configuration](#Metrics-Services-Configuration) | | Configuration for pprof service (profiling statistics gathering). See the [Metrics Services Configuration](#Metrics-Services-Configuration) section for details. |\n| Prometheus | [Metrics Services Configuration](#Metrics-Services-Configuration) | | Configuration for Prometheus (monitoring system). See the [Metrics Services Configuration](#Metrics-Services-Configuration) section for details |\n| Relay | `bool` | `true` | Determines whether the server is forwarding its inventory. |\n| Consensus | [Consensus Configuration](#Consensus-Configuration) |  | Describes consensus (dBFT) configuration. See the [Consensus Configuration](#Consensus-Configuration) for details. |\n| RemoveUntraceableBlocks | `bool`| `false` | Denotes whether old blocks should be removed from cache and database. If enabled, then only the last `MaxTraceableBlocks` are stored and accessible to smart contracts. Old MPT data is also deleted in accordance with `GarbageCollectionPeriod` setting. If enabled along with `P2PStateExchangeExtensions` protocol extension, then old blocks and MPT states will be removed up to the second latest state synchronisation point (see `StateSyncInterval`). |\n| RPC | [RPC Configuration](#RPC-Configuration) |  | Describes [RPC subsystem](rpc.md) configuration. See the", "doc_id": "8980caf0-33c7-4535-90bf-95f38ee00230", "embedding": null, "doc_hash": "ea1daa8f87815585e75b8d72cc410d1d01af58c8d94ee86ab0191cd2473ac4e9", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 0, "end": 3869, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "3": "88fa6a6e-5fd9-47fd-b9e6-3046886ca17b"}}, "__type__": "1"}, "88fa6a6e-5fd9-47fd-b9e6-3046886ca17b": {"__data__": {"text": " | Describes [RPC subsystem](rpc.md) configuration. See the [RPC Configuration](#RPC-Configuration) for details. |\n| SaveStorageBatch | `bool` | `false` | Enables storage batch saving before every persist. It is similar to StorageDump plugin for C# node. |\n| SkipBlockVerification | `bool` | `false` | Allows to disable verification of received/processed blocks (including cryptographic checks). |\n| StateRoot | [State Root Configuration](#State-Root-Configuration) |  | State root module configuration. See the [State Root Configuration](#State-Root-Configuration) section for details. |\n\n### P2P Configuration\n\n`P2P` section contains configuration for peer-to-peer node communications and has\nthe following format:\n```\nP2P:\n  Addresses:\n    - \"0.0.0.0:0\" # any free port on all available addresses (in form of \"[host]:[port][:announcedPort]\")\n  AttemptConnPeers: 20\n  BroadcastFactor: 0\n  DialTimeout: 0s\n  MaxPeers: 100\n  MinPeers: 5\n  PingInterval: 30s\n  PingTimeout: 90s\n  ProtoTickInterval: 5s\n  ExtensiblePoolSize: 20\n```\nwhere:\n- `Addresses` (`[]string`) is the list of the node addresses that P2P protocol\n   handler binds to. Each address has the form of `[address]:[nodePort][:announcedPort]`\n   where `address` is the address itself, `nodePort` is the actual P2P port node listens at;\n   `announcedPort` is the node port which should be used to announce node's port on P2P layer,\n   it can differ from the `nodePort` the node is bound to if specified (for example, if your\n   node is behind NAT).\n- `AttemptConnPeers` (`int`) is the number of connection to try to establish when the\n   connection count drops below the `MinPeers` value.\n- `BroadcastFactor` (`int`) is the multiplier that is used to determine the number of\n   optimal gossip fan-out peer number for broadcasted messages (0-100). By default, it's\n   zero, node uses the most optimized value depending on the estimated network size\n   (`2.5\u00d7log(size)`), so the node may have 20 peers and calculate that it needs to broadcast\n   messages to just 10 of them. With BroadcastFactor set to 100 it will always send messages\n   to all peers, any value in-between 0 and 100 is used for weighted calculation, for example\n   if it's 30 then 13 neighbors will be used in the previous case.\n- `DialTimeout` (`Duration`) is the maximum duration a single dial may take.\n- `ExtensiblePoolSize` (`int`) is the maximum amount of the extensible payloads from a single\n   sender stored in a local pool.\n- `MaxPeers` (`int`) is the maximum numbers of peers that can be connected to the server.\n- `MinPeers` (`int`) is the minimum number of peers for normal operation; when the node has\n   less than this number of peers it tries to connect with some new ones. Note that consensus\n   node won't start the consensus process until at least `MinPeers` number of peers are\n   connected.\n- `PingInterval` (`Duration`) is the interval used in pinging mechanism for syncing\n   blocks.\n- `PingTimeout` (`Duration`) is the time to wait for pong (response for sent ping request).\n- `ProtoTickInterval` (`Duration`) is the duration between protocol ticks with each\n   connected peer.\n\n### DB Configuration\n\n`DBConfiguration` section describes configuration for node database and has\nthe following format:\n```\nDBConfiguration:\n  Type: leveldb\n  LevelDBOptions:\n ", "doc_id": "88fa6a6e-5fd9-47fd-b9e6-3046886ca17b", "embedding": null, "doc_hash": "d6ae614556d3868aebe65d264a695cd79fb457040bd62c2c146d4dd15da601a1", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 3818, "end": 7123, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "8980caf0-33c7-4535-90bf-95f38ee00230", "3": "fddd4962-1820-471e-9730-7ec572d9f0bd"}}, "__type__": "1"}, "fddd4962-1820-471e-9730-7ec572d9f0bd": {"__data__": {"text": " Type: leveldb\n  LevelDBOptions:\n    DataDirectoryPath: /chains/privnet\n    ReadOnly: false\n  BoltDBOptions:\n    FilePath: ./chains/privnet.bolt\n    ReadOnly: false\n```\nwhere:\n- `Type` is the database type (string value). Supported types: `leveldb`, `boltdb` and\n  `inmemory` (not recommended for production usage).\n- `LevelDBOptions` are settings for LevelDB. Includes the DB files path and ReadOnly mode toggle.\n  If ReadOnly mode is on, then an error will be returned on attempt to connect to unexisting or empty\n  database. Database doesn't allow changes in this mode, a warning will be logged on DB persist attempts.\n- `BoltDBOptions` configures BoltDB. Includes the DB files path and ReadOnly mode toggle. If ReadOnly\n  mode is on, then an error will be returned on attempt to connect with unexisting or empty database.\n  Database doesn't allow changes in this mode, a warning will be logged on DB persist attempts.\n\nOnly options for the specified database type will be used.\n\n### Oracle Configuration\n\n`Oracle` configuration section describes configuration for Oracle node module\nand has the following structure:\n```\nOracle:\n  Enabled: false\n  AllowPrivateHost: false\n  MaxTaskTimeout: 3600s\n  MaxConcurrentRequests: 10\n  Nodes: [\"172.200.0.1:30333\", \"172.200.0.2:30334\"]\n  NeoFS:\n    Nodes: [\"172.200.0.1:30335\", \"172.200.0.2:30336\"]\n    Timeout: 2\n  RefreshInterval: 180s\n  RequestTimeout: 5s\n  ResponseTimeout: 5s\n  UnlockWallet:\n    Path: \"./oracle_wallet.json\"\n    Password: \"pass\"\n```\n\nPlease, refer to the [Oracle module documentation](./oracle.md#Configuration) for\ndetails on configurable values.\n\n### P2P Notary Configuration\n\n`P2PNotary` configuration section describes configuration for P2P Notary node\nmodule and has the following structure:\n```\nP2PNotary:\n  Enabled: false\n  UnlockWallet:\n    Path: \"/notary_wallet.json\"\n    Password: \"pass\"\n```\nwhere:\n- `Enabled` denotes whether P2P Notary module is active.\n- `UnlockWallet` is a Notary node wallet configuration, see the\n  [Unlock Wallet Configuration](#Unlock-Wallet-Configuration) section for\n  structure details.\n\nPlease, refer to the [Notary module documentation](./notary.md#Notary node module) for\ndetails on module features.\n\n### Metrics Services Configuration\n\nMetrics services configuration describes options for metrics services (pprof,\nPrometheus) and has the following structure:\n```\nPprof:\n  Enabled: false\n  Addresses:\n    - \":30001\"\nPrometheus:\n  Enabled: false\n  Addresses:\n    - \":40001\"\n```\nwhere:\n- `Enabled` denotes whether the service is enabled.\n- `Addresses` is a list of service addresses to be running at and listen to in\n   the form of \"host:port\".\n\n### RPC Configuration\n\n`RPC` configuration section describes settings for the RPC server and has\nthe following structure:\n```\nRPC:\n  Enabled: true\n  Addresses:\n    - \":10332\"\n  EnableCORSWorkaround: false\n  MaxGasInvoke: 50\n  MaxIteratorResultItems: 100\n  MaxFindResultItems: 100\n  MaxFindStoragePageSize: 50\n  MaxNEP11Tokens: 100\n  MaxWebSocketClients: 64\n  SessionEnabled: false\n  SessionExpirationTime: 15\n  SessionBackedByMPT: false\n  SessionPoolSize: 20\n  StartWhenSynchronized:", "doc_id": "fddd4962-1820-471e-9730-7ec572d9f0bd", "embedding": null, "doc_hash": "83b127b54b44ae8d1e00df1a3f5a31c1f58864f1e2e289e87b60fab59f24408e", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 7147, "end": 10280, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "88fa6a6e-5fd9-47fd-b9e6-3046886ca17b", "3": "20524160-cdff-4389-b0de-4e265b2391ce"}}, "__type__": "1"}, "20524160-cdff-4389-b0de-4e265b2391ce": {"__data__": {"text": "false\n  SessionPoolSize: 20\n  StartWhenSynchronized: false\n  TLSConfig:\n    Addresses:\n      - \":10331\"\n    CertFile: serv.crt\n    Enabled: true\n    KeyFile: serv.key\n```\nwhere:\n- `Enabled` denotes whether an RPC server should be started.\n- `Addresses` is a list of RPC server addresses to be running at and listen to in\n  the form of \"host:port\".\n- `EnableCORSWorkaround` turns on a set of origin-related behaviors that make\n  RPC server wide open for connections from any origins. It enables OPTIONS\n  request handling for pre-flight CORS and makes the server send\n  `Access-Control-Allow-Origin` and `Access-Control-Allow-Headers` headers for\n  regular HTTP requests (allowing any origin which effectively makes CORS\n  useless). It also makes websocket connections work for any `Origin`\n  specified in the request header. This option is not recommended (reverse\n  proxy can be used to have proper app-specific CORS settings), but it's an\n  easy way to make RPC interface accessible from the browser.\n- `MaxGasInvoke` is the maximum GAS allowed to spend during `invokefunction` and\n  `invokescript` RPC-calls. `calculatenetworkfee` also can't exceed this GAS amount\n  (normally the limit for it is MaxVerificationGAS from Policy, but if MaxGasInvoke\n  is lower than that then this limit is respected).\n- `MaxIteratorResultItems` - maximum number of elements extracted from iterator\n   returned by `invoke*` call. When the `MaxIteratorResultItems` value is set to\n   `n`, only `n` iterations are returned and truncated is true, indicating that\n   there is still data to be returned.\n- `MaxFindResultItems` - the maximum number of elements for `findstates` response.\n- `MaxFindStoragePageSize` - the maximum number of elements for `findstorage` response per single page.\n- `MaxNEP11Tokens` - limit for the number of tokens returned from\n  `getnep11balances` call.\n- `MaxWebSocketClients` - the maximum simultaneous websocket client connection\n  number (64 by default). Attempts to establish additional connections will\n  lead to websocket handshake failures. Use \"-1\" to disable websocket\n  connections (0 will lead to using the default value).\n- `SessionEnabled` denotes whether session-based iterator JSON-RPC API is enabled.\n  If true, then all iterators got from `invoke*` calls will be stored as sessions\n  on the server side available for further traverse. `traverseiterator` and\n  `terminatesession` JSON-RPC calls will be handled by the server. It is not\n  recommended to enable this setting for public RPC servers due to possible DoS\n  attack. Set to `false` by default. If `false`, iterators are expanded into a\n  set of values (see `MaxIteratorResultItems` setting). Implementation note: when\n  BoltDB storage is used as a node backend DB, then enabling iterator sessions may\n  cause blockchain persist delays up to 2*`SessionExpirationTime` seconds on\n  early blockchain lifetime stages with relatively small DB size. It can happen\n  due to BoltDB re-mmapping behaviour traits. If regular persist is a critical\n  requirement, then we recommend either to decrease `SessionExpirationTime` or to\n  enable `SessionBackedByMPT`, see `SessionBackedByMPT` documentation for more\n  details.\n- `SessionExpirationTime` is a lifetime of iterator session in seconds. It is set\n  to `TimePerBlock` seconds by default and is relevant only if `SessionEnabled`\n  is set to `true`.\n- `SessionBackedByMPT` is a flag forcing JSON-RPC server into using MPT-backed\n  storage for delayed iterator traversal. If", "doc_id": "20524160-cdff-4389-b0de-4e265b2391ce", "embedding": null, "doc_hash": "6adb0dadd0553cb21468ffb42333d82b8531a438127dfbe1842e78b57b3d6811", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 10263, "end": 13763, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "fddd4962-1820-471e-9730-7ec572d9f0bd", "3": "7520b6a4-73fa-42d7-bacc-9ed5fb82d3e1"}}, "__type__": "1"}, "7520b6a4-73fa-42d7-bacc-9ed5fb82d3e1": {"__data__": {"text": "server into using MPT-backed\n  storage for delayed iterator traversal. If `true`, then iterator resources got\n  after `invoke*` calls will be released immediately. Further iterator traversing\n  will be performed using MPT-backed storage by retrieving iterator via historical\n  MPT-provided `invoke*` recall. `SessionBackedByMPT` set to `true` strongly affects\n  the `traverseiterator` call performance and doesn't allow iterator traversing\n  for outdated or removed states (see `KeepOnlyLatestState` and\n  `RemoveUntraceableBlocks` settings documentation for details), thus, it is not\n  recommended to enable `SessionBackedByMPT` needlessly. `SessionBackedByMPT` is\n  set to `false` by default and is relevant only if `SessionEnabled` is set to\n  `true`.\n- `SessionPoolSize` is the maximum number of concurrent iterator sessions. It is\n  set to `20` by default. If the subsequent session can't be added to the session\n  pool, then invocation result will contain corresponding error inside the\n  `FaultException` field.\n- `StartWhenSynchronized` controls when RPC server will be started, by default\n  (`false` setting) it's started immediately and RPC is available during node\n  synchronization. Setting it to `true` will make the node start RPC service only\n  after full synchronization.\n- `TLS` section configures TLS protocol.\n\n### State Root Configuration\n\n`StateRoot` configuration section contains settings for state roots exchange and has\nthe following structure:\n```\nStateRoot:\n  Enabled: false\n  UnlockWallet:\n    Path: \"./wallet.json\"\n    Password: \"pass\"\n```\nwhere:\n- `Enabled` enables state root module.\n- `UnlockWallet` contains wallet settings, see\n  [Unlock Wallet Configuration](#Unlock-Wallet-Configuration) section for\n  structure details.\n\n### Consensus Configuration\n\n`Consensus` configuration section describes configuration for dBFT node\nmodule and has the following structure:\n```\nConsensus:\n  Enabled: false\n  UnlockWallet:\n    Path: \"/consensus_node_wallet.json\"\n    Password: \"pass\"\n```\nwhere:\n- `Enabled` denotes whether dBFT module is active.\n- `UnlockWallet` is a consensus node wallet configuration, see the\n  [Unlock Wallet Configuration](#Unlock-Wallet-Configuration) section for\n  structure details.\n\nPlease, refer to the [consensus node documentation](./consensus.md) for more\ndetails on consensus node setup.\n\n### Unlock Wallet Configuration\n\n`UnlockWallet` configuration section contains wallet settings and has the following\nstructure:\n```\nUnlockWallet:\n  Path: \"./wallet.json\"\n  Password: \"pass\"\n```\nwhere:\n- `Path` is a path to wallet.\n- `Password` is a wallet password.\n\n## Protocol Configuration\n\n`ProtocolConfiguration` section of `yaml` node configuration file contains\nprotocol-related settings described in the table below.\n\n| Section | Type | Default value | Description | Notes |\n| --- | --- | --- | --- | --- |\n| CommitteeHistory | map[uint32]uint32 | none | Number of committee members after the given height, for example `{0: 1, 20: 4}` sets up a chain with one committee member since the genesis and then changes the setting to 4 committee members at the height of 20. `StandbyCommittee` committee setting must have the number of keys equal or exceeding the highest value in this option. Blocks numbers where the change happens must be divisible by the old and by the new values simultaneously. If not set, committee size is derived from the `StandbyCommittee` setting and never changes. |\n| Genesis | [Genesis](#Genesis-Configuration) | none | The set of genesis block settings including NeoGo-specific protocol extensions that should be enabled at the genesis block or during native contracts initialisation.", "doc_id": "7520b6a4-73fa-42d7-bacc-9ed5fb82d3e1", "embedding": null, "doc_hash": "4a40eff1342e1125cf9f5dc0d3ebdec2977740c2a4f9efb825399129809233f0", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 13748, "end": 17408, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "20524160-cdff-4389-b0de-4e265b2391ce", "3": "f3ac19c6-4b69-4d06-a1d3-ddda3708019d"}}, "__type__": "1"}, "f3ac19c6-4b69-4d06-a1d3-ddda3708019d": {"__data__": {"text": "extensions that should be enabled at the genesis block or during native contracts initialisation. |\n| Hardforks | `map[string]uint32` | [] | The set of incompatible changes that affect node behaviour starting from the specified height. The default value is an empty set which should be interpreted as \"each known hard-fork is applied from the zero blockchain height\". The list of valid hard-fork names:<br>\u2022 `Aspidochelone` represents hard-fork introduced in [#2469](https://github.com/nspcc-dev/neo-go/pull/2469) (ported from the [reference](https://github.com/neo-project/neo/pull/2712)). It adjusts the prices of `System.Contract.CreateStandardAccount` and `System.Contract.CreateMultisigAccount` interops so that the resulting prices are in accordance with `sha256` method of native `CryptoLib` contract. It also includes [#2519](https://github.com/nspcc-dev/neo-go/pull/2519) (ported from the [reference](https://github.com/neo-project/neo/pull/2749)) that adjusts the price of `System.Runtime.GetRandom` interop and fixes its vulnerability. A special NeoGo-specific change is included as well for ContractManagement's update/deploy call flags behaviour to be compatible with pre-0.99.0 behaviour that was changed because of the [3.2.0 protocol change](https://github.com/neo-project/neo/pull/2653).<br>\u2022 `Basilisk` represents hard-fork introduced in [#3056](https://github.com/nspcc-dev/neo-go/pull/3056) (ported from the [reference](https://github.com/neo-project/neo/pull/2881)). It enables strict smart contract script check against a set of JMP instructions and against method boundaries enabled on contract deploy or update. It also includes [#3080](https://github.com/nspcc-dev/neo-go/pull/3080) (ported from the [reference](https://github.com/neo-project/neo/pull/2883)) that increases `stackitem.Integer` JSON parsing precision up to the maximum value supported by the NeoVM. It also includes [#3085](https://github.com/nspcc-dev/neo-go/pull/3085) (ported from the [reference](https://github.com/neo-project/neo/pull/2810)) that enables strict check for notifications emitted by a contract to precisely match the events specified in the contract manifest. |\n| Magic | `uint32` | `0` | Magic number which uniquely identifies Neo network. |\n| MaxBlockSize | `uint32` | `262144` | Maximum block size in bytes. |\n| MaxBlockSystemFee | `int64` | `900000000000` | Maximum overall transactions system fee per block. |\n| MaxTraceableBlocks | `uint32` | `2102400` | Length of the chain accessible to smart contracts. | `RemoveUntraceableBlocks` should be enabled to use this setting. |\n| MaxTransactionsPerBlock | `uint16` | `512` | Maximum number of transactions per block. |\n| MaxValidUntilBlockIncrement | `uint32` | `5760` | Upper height increment limit for transaction's ValidUntilBlock field value relative to the current blockchain height, exceeding which a transaction will fail validation. It is set to estimated daily number of blocks with 15s interval by default. |\n| MemPoolSize | `int` | `50000` | Size of the node's memory pool where transactions are stored before they are added to block. |\n| NativeActivations | `map[string][]uint32` | ContractManagement: [0]<br>StdLib: [0]<br>CryptoLib: [0]<br>LedgerContract: [0]<br>NeoToken: [0]<br>GasToken: [0]<br>PolicyContract: [0]<br>RoleManagement:", "doc_id": "f3ac19c6-4b69-4d06-a1d3-ddda3708019d", "embedding": null, "doc_hash": "c44bc98c86560ab48b4e186efed5b7f3fb497d7ad2332c5c8ace0bbf58be59a2", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 17388, "end": 20700, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "7520b6a4-73fa-42d7-bacc-9ed5fb82d3e1", "3": "039d18f9-8af3-4c70-8b73-913a62c42ca1"}}, "__type__": "1"}, "039d18f9-8af3-4c70-8b73-913a62c42ca1": {"__data__": {"text": "[0]<br>PolicyContract: [0]<br>RoleManagement: [0]<br>OracleContract: [0] | The list of histories of native contracts updates. Each list item shod be presented as a known native contract name with the corresponding list of chain's heights. The contract is not active until chain reaches the first height value specified in the list. | `Notary` is supported. |\n| P2PNotaryRequestPayloadPoolSize | `int` | `1000` | Size of the node's P2P Notary request payloads memory pool where P2P Notary requests are stored before main or fallback transaction is completed and added to the chain.<br>This option is valid only if `P2PSigExtensions` are enabled. | Not supported by the C# node, thus may affect heterogeneous networks functionality. |\n| P2PSigExtensions | `bool` | `false` | Enables following additional Notary service related logic:<br>\u2022 Transaction attribute `NotaryAssisted`<br>\u2022 Network payload of the `P2PNotaryRequest` type<br>\u2022 Native `Notary` contract<br>\u2022 Notary node module | Not supported by the C# node, thus may affect heterogeneous networks functionality. |\n| P2PStateExchangeExtensions | `bool` | `false` | Enables the following P2P MPT state data exchange logic: <br>\u2022 `StateSyncInterval` protocol setting <br>\u2022 P2P commands `GetMPTDataCMD` and `MPTDataCMD` | Not supported by the C# node, thus may affect heterogeneous networks functionality. Can be supported either on MPT-complete node (`KeepOnlyLatestState`=`false`) or on light GC-enabled node (`RemoveUntraceableBlocks=true`) in which case `KeepOnlyLatestState` setting doesn't change the behavior, an appropriate set of MPTs is always stored (see `RemoveUntraceableBlocks`). |\n| ReservedAttributes | `bool` | `false` | Allows to have reserved attributes range for experimental or private purposes. |\n| SeedList | `[]string` | [] | List of initial nodes addresses used to establish connectivity. |\n| StandbyCommittee | `[]string` | [] | List of public keys of standby committee validators are chosen from. |\n| StateRootInHeader | `bool` | `false` | Enables storing state root in block header. | Experimental protocol extension! |\n| StateSyncInterval | `int` | `40000` | The number of blocks between state heights available for MPT state data synchronization. | `P2PStateExchangeExtensions` should be enabled to use this setting. |\n| TimePerBlock | `Duration` | `15s` | Minimal (and targeted for) time interval between blocks. Must be an integer number of milliseconds. |\n| ValidatorsCount | `uint32` | `0` | Number of validators set for the whole network lifetime, can't be set if `ValidatorsHistory` setting is used. |\n| ValidatorsHistory | map[uint32]uint32 | none | Number of consensus nodes to use after given height (see `CommitteeHistory` also). Heights where the change occurs must be divisible by the number of committee members at that height. Can't be used with `ValidatorsCount` not equal to zero. |\n| VerifyTransactions | `bool` | `false` | Denotes whether to verify transactions in the received blocks. |\n\n### Genesis Configuration\n\n`Genesis` subsection of protocol configuration section contains a set of settings\nspecific for genesis block including NeoGo node extensions that should be enabled\nduring genesis block persist or at the moment of native contracts initialisation.\n`Genesis` has the following structure:\n```\nGenesis:\n  Roles:\n    NeoFSAlphabet:\n      - 033238fa63bd08115ebf442d4af897eea2f6866e4c2001cd1f6e7656acdd91a5d3\n      -", "doc_id": "039d18f9-8af3-4c70-8b73-913a62c42ca1", "embedding": null, "doc_hash": "20af5ebf9ca8a6a9e82c5faf2901c702a195642fd06412ee1cf0660ae6015427", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 20741, "end": 24165, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "f3ac19c6-4b69-4d06-a1d3-ddda3708019d", "3": "cf019f66-1655-4dc2-82c4-9a057bece169"}}, "__type__": "1"}, "cf019f66-1655-4dc2-82c4-9a057bece169": {"__data__": {"text": "     - 03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c\n      - 02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e\n      - 03c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a050\n    Oracle:\n      - 03409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd0\n      - 0222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c30\n  Transaction:\n    Script: \"DCECEDp/fdAWVYWX95YNJ8UWpDlP2Wi55lFV60sBPkBAQG5BVuezJw==\"\n    SystemFee: 100000000\n```\nwhere:\n- `Roles` is a map from node roles that should be set at the moment of native\n  RoleManagement contract initialisation to the list of hex-encoded public keys\n  corresponding to this role. The set of valid roles includes:\n  - `StateValidator`\n  - `Oracle`\n  - `NeoFSAlphabet`\n  - `P2PNotary`\n  \n  Roles designation order follows the enumeration above. Designation\n  notifications will be emitted after each configured role designation.\n  \n  Note that Roles is a NeoGo extension that isn't supported by the NeoC# node and\n  must be disabled on the public Neo N3 networks. Roles extension is compatible\n  with NativeUpdateHistory setting, which means that specified roles will be set\n  only during native RoleManagement contract initialisation (which may be\n  performed in some non-genesis block). By default, no roles are designated.\n\n- `Transaction` is a container for transaction script that should be deployed in\n  the genesis block if provided. `Transaction` includes `Script` which is a\n  base64-encoded transaction script and `SystemFee` which is a transaction's\n  system fee value (in GAS) that will be spent during transaction execution.\n  Transaction generated from the provided parameters has two signers at max with\n  CalledByEntry witness scope: the first one is standby validators multisignature\n  signer and the second one (if differs from the first) is committee\n  multisignature signer.\n\n  Note that `Transaction` is a NeoGo extension that isn't supported by the NeoC#\n  node and must be disabled on the public Neo N3 networks.\n", "doc_id": "cf019f66-1655-4dc2-82c4-9a057bece169", "embedding": null, "doc_hash": "b6739afbdf73d5c594e0b59f85d1c2b9e84f4d300be8a453c7fbe75abc493de0", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}, "node_info": {"start": 24203, "end": 26253, "_node_type": "1"}, "relationships": {"1": "666e3c1cd09c05170c5dd70d0c110f2527406b7b", "2": "039d18f9-8af3-4c70-8b73-913a62c42ca1"}}, "__type__": "1"}, "532970c8-3a8b-49e5-9abd-a90d003c79da": {"__data__": {"text": "# NeoGo P2P signature collection (notary) service\n\nP2P signature (notary) service is a NeoGo node extension that allows several\nparties to sign one transaction independently of chain and without going beyond the\nchain environment. The on-chain P2P service is aimed to automate, accelerate and\nsecure the process of signature collection. The service was initially designed as\na solution for\n[multisignature transaction forming](https://github.com/neo-project/neo/issues/1573#issue-600384746)\nand described in the [proposal](https://github.com/neo-project/neo/issues/1573#issuecomment-704874472).\n\nThe original problem definition:\n> Several parties want to sign one transaction, it can either be a set of signatures\n> for multisignature signer or multiple signers in one transaction. It's assumed\n> that all parties can generate the same transaction (with the same hash) without\n> any interaction, which is the case for oracle nodes or NeoFS inner ring nodes.\n> \n> As some of the services using this mechanism can be quite sensitive to the\n> latency of their requests processing, it should be possible to construct a complete\n> transaction within the time frame between two consecutive blocks.\n\n\n## Components and functionality\nThe service consists of a native contract and a node module. Native contract is\nmostly concerned with verification, fees and payment guarantees, while module is\ndoing the actual work. It uses generic `Conflicts` and `NotValidBefore`\ntransaction attributes for its purposes as well as an additional special one\n(`Notary assisted`).\n\nA new designated role is added, `P2PNotary`. It can have an arbitrary number of\nkeys associated with it.\n\nTo use the service, one should pay some GAS, so below we operate with `FEE` as a unit of cost\nfor this service. `FEE` is set to be 0.1 GAS.\n\nWe'll also use `NKeys` definition as the number of keys that participate in the\nprocess of signature collection. This is the number of keys that could potentially\nsign the transaction, for transactions lacking appropriate witnesses that would be\nthe number of witnesses, for \"M out of N\" multisignature scripts that's N, for\ncombination of K standard signature witnesses and L multisignature \"M out of N\"\nwitnesses that's K+N*L.\n\n### Transaction attributes\n\n#### Conflicts\n\nThis attribute makes the chain accept one transaction of the two conflicting only\nand adds an ability to give a priority to any of the two if needed. This\nattribute was originally proposed in\n[neo-project/neo#1991](https://github.com/neo-project/neo/issues/1991).\n\nThe attribute has Uint256 data inside containing the hash of conflicting\ntransaction. It is allowed to have multiple attributes of this type.\n\n#### NotValidBefore\n\nThis attribute makes transaction invalid before certain height. This attribute\nwas originally proposed in\n[neo-project/neo#1992](https://github.com/neo-project/neo/issues/1992).\n\nThe attribute has uint32 data inside which is the block height starting from\nwhich the transaction is considered to be valid. It can be seen as the opposite\nof `ValidUntilBlock`. Using both allows to have a window of valid block numbers\nthat this transaction could be accepted into. Transactions with this attribute\nare not accepted into mempool before specified block is persisted.\n\nIt can be used to create some transactions in advance with a guarantee that they\nwon't be accepted until the specified block.\n\n#### NotaryAssisted\n\nThis attribute holds one byte containing the number of transactions collected\nby the service. It could be 0 for fallback transaction or `NKeys` for a normal\ntransaction that completed its P2P signature collection. Transactions using this\nattribute need to pay additional network fee of (`NKeys`+1)\u00d7`FEE`. This", "doc_id": "532970c8-3a8b-49e5-9abd-a90d003c79da", "embedding": null, "doc_hash": "7df41f52d64f551d87a636816de39629951ff8e6340afa97f70657b17c4942cc", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 0, "end": 3728, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "3": "3ac1cdaf-9662-4f97-9d6b-b007575938d8"}}, "__type__": "1"}, "3ac1cdaf-9662-4f97-9d6b-b007575938d8": {"__data__": {"text": "pay additional network fee of (`NKeys`+1)\u00d7`FEE`. This attribute\ncould be only be used by transactions signed by the notary native contract.\n\n### Native Notary contract\n\nIt exposes several methods to the outside world:\n\n| Method | Parameters | Return value | Description |\n| --- | --- | --- | --- |\n| `onNEP17Payment` | `from` (uint160) - GAS sender account.<br>`amount` (int) - amount of GAS to deposit.<br>`data` represents array of two parameters: <br>1. `to` (uint160) - account of the deposit owner.<br>2. `till` (int) - deposit lock height. | `bool` | Automatically called after GAS transfer to Notary native contract address and records deposited amount as belonging to `to` address with a lock till `till` chain's height. Can only be invoked from native GAS contract. Must be witnessed by `from`. `to` can be left unspecified (null), with a meaning that `to` is the same address as `from`. `amount` can't be less than 2\u00d7`FEE` for the first deposit call for the `to` address. Each successive deposit call must have `till` value equal to or more than the previous successful call (allowing for renewal), if it has additional amount of GAS it adds up to the already deposited value.|\n| `lockDepositUntil` | `address` (uint160) - account of the deposit owner.<br>`till` (int) - new height deposit is valid until (can't be less than previous value). | `void` | Updates deposit expiration value. Must be witnessed by `address`. |\n| `withdraw` | `from` (uint160) - account of the deposit owner.<br>`to` (uint160) - account to transfer GAS to. | `bool` | Sends all deposited GAS for `from` address to `to` address. Must be witnessed by `from`. `to` can be left unspecified (null), with a meaning that `to` is the same address as `from`. It can only be successful if the lock has already expired, attempting to withdraw the deposit before that height fails. Partial withdrawal is not supported. Returns boolean result, `true` for successful calls and `false` for failed ones. |\n| `balanceOf` | `addr` (uint160) - account of the deposit owner. | `int` | Returns deposited GAS amount for specified address (integer). |\n| `expirationOf` | `addr` (uint160) - account of the deposit owner. | `int` | Returns deposit lock height for specified address (integer). |\n| `verify` | `signature` (signature) - notary node signature bytes for verification. | `bool` | This is used to verify transactions with notary contract specified as a signer, it needs one signature in the invocation script and it checks for this signature to be made by one of designated keys, effectively implementing \"1 out of N\" multisignature contract. |\n| `getMaxNotValidBeforeDelta` | | `int` | Returns `MaxNotValidBeforeDelta` constraint. Default value is 140. |\n| `setMaxNotValidBeforeDelta` | `value` (int) | `void` | Set `MaxNotValidBeforeDelta` constraint. Must be witnessed by committee. |\n\nSee the [Notary deposit guide](#1.-Notary-deposit) section on how to deposit\nfunds to Notary native contract and manage the deposit.\n\n### P2PNotaryRequest payload\n\nA new broadcasted payload type is introduced for notary requests. It's\ndistributed via regular inv-getdata mechanism like transactions, blocks or\nconsensus payloads. An ordinary P2P node verifies it, saves in a structure\nsimilar to mempool and relays. This payload has witness (standard\nsingle-signature contract) attached signing all of the payload.\n\nThis payload has two incomplete transactions", "doc_id": "3ac1cdaf-9662-4f97-9d6b-b007575938d8", "embedding": null, "doc_hash": "8d925d3142d8831ec8002dff6a1c94d83a068b68e56f6b06b038b1a221119280", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 3682, "end": 7102, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "532970c8-3a8b-49e5-9abd-a90d003c79da", "3": "f173d899-f6ac-4d15-9464-6d31a0bb6c6d"}}, "__type__": "1"}, "f173d899-f6ac-4d15-9464-6d31a0bb6c6d": {"__data__": {"text": "signing all of the payload.\n\nThis payload has two incomplete transactions inside:\n\n- *Fallback tx*. This transaction has P2P Notary contract as a sender and service\n  request sender as an additional signer. It can't have a witness for Notary\n  contract, but it must have proper witness for request sender. It must have\n  `NotValidBefore` attribute that is no more than `MaxNotValidBeforeDelta` higher\n  than the current chain height and it must have `Conflicts` attribute with the\n  hash of the main transaction. It at the same time must have `Notary assisted`\n  attribute with a count of zero.\n- *Main tx*. This is the one that actually needs to be completed; it:\n  1. *either* doesn't have all witnesses attached\n  2. *or* has a partial multisignature only\n  3. *or* have not all witnesses attached and some of the rest are partial multisignature\n  \n  This transaction must have `Notary assisted` attribute with a count of `NKeys`\n  (and Notary contract as one of the signers).\n\nSee the [Notary request submission guide](#2-request-submission) to learn how to\nconstruct and send the payload.\n\n### Notary node module\n\nNode module with the designated key monitors the network for `P2PNotaryRequest`\npayloads. It maintains a list of current requests grouped by main transaction\nhash. When it receives enough requests to correctly construct all transaction\nwitnesses, it does so, adds a witness of its own (for Notary contract witness) and\nsends the resulting transaction to the network.\n\nIf the main transaction with all witnesses attached still can't be validated\ndue to any fee (or other) issues, the node waits for `NotValidBefore` block of\nthe fallback transaction to be persisted.\n\nIf `NotValidBefore` block is persisted and there are still some signatures\nmissing (or the resulting transaction is invalid), the module sends all the\nassociated fallback transactions for the main transaction.\n\nAfter processing, service request is deleted from the module.\n\nSee the [NeoGo P2P signature extensions](#NeoGo P2P signature extensions) on how\nto enable notary-related extensions on chain and\n[NeoGo Notary service node module](#NeoGo Notary service node module) on how to\nset up Notary service node.\n\n## Environment setup\n\nTo run P2P signature collection service on your network, you need to do:\n* Set up [`P2PSigExtensions`](#NeoGo P2P signature extensions) for all nodes in\n  the network.\n* Set notary node keys in `RoleManagement` native contract.\n* [Configure](#NeoGo Notary service node module) and run appropriate number of\n  notary nodes with keys specified in `RoleManagement` native contract (at least\n  one node is necessary to complete signature collection).\n\nAfter service is running, you can [create and send](#Notary request lifecycle guide)\nnotary requests to the network.\n\n### NeoGo P2P signature extensions\n\nAs far as Notary service is an extension of the standard NeoGo node, it should be\nenabled and properly configured before usage.\n\n#### Configuration\n\nTo enable P2P signature extensions add `P2PSigExtensions` subsection set to\n`true` to `ProtocolConfiguration` section of your node config. This enables all\nnotary-related logic in the network, i.e. allows your node to accept and validate\n`NotValidBefore`, `Conflicts` and `NotaryAssisted` transaction attribute, handle,\nverify and broadcast `P2PNotaryRequest` P2P payloads, properly initialize native\nNotary contract and designate `P2PNotary` node role in RoleManagement native\ncontract.\n\nIf you use custom `NativeActivations` subsection of the `ProtocolConfiguration`\nsection in your node config, specify the height of the Notary contract\nactivation,", "doc_id": "f173d899-f6ac-4d15-9464-6d31a0bb6c6d", "embedding": null, "doc_hash": "de6c5758aaecabc35de49e89b5c5630bf95658826473feb5ad80236130fb80d0", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 7086, "end": 10709, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "3ac1cdaf-9662-4f97-9d6b-b007575938d8", "3": "9f8cb95a-6ccc-4e3c-8b13-015a2a2f6de5"}}, "__type__": "1"}, "9f8cb95a-6ccc-4e3c-8b13-015a2a2f6de5": {"__data__": {"text": "in your node config, specify the height of the Notary contract\nactivation, e.g. `0`.\n\nNote, that even if `P2PSigExtensions` config subsection enables notary-related\nlogic in the network, it still does not turn your node into notary service node.\nTo enable notary service node functionality refer to the\n[NeoGo Notary service](#NeoGo-Notary-service-node-module) documentation.\n\n##### Example\n\n```\n  P2PSigExtensions: true\n  NativeActivations:\n    Notary: [0]\n    ContractManagement: [0]\n    StdLib: [0]\n    CryptoLib: [0]\n    LedgerContract: [0]\n    NeoToken: [0]\n    GasToken: [0]\n    PolicyContract: [0]\n    RoleManagement: [0]\n    OracleContract: [0]\n```\n\n\n### NeoGo Notary service node module\n\nNeoGo node can act as notary service node (the node that accumulates notary\nrequests, collects signatures and releases fully-signed transactions). It must\nhave a wallet with a key belonging to one of network's designated notary nodes\n(stored in `RoleManagement` native contract). Also, the node must be connected to\na network with enabled P2P signature extensions, otherwise problems with states\nand peer disconnections will occur.\n\nNotary service node doesn't need [RPC service](rpc.md) to be enabled because it\nreceives notary requests and broadcasts completed transactions via P2P protocol.\nHowever, enabling [RPC service](rpc.md) allows to send notary requests directly\nto the notary service node and avoid P2P communication delays.\n\n#### Configuration\n\nTo enable notary service node check firstly that\n[P2PSignatureExtensions](#NeoGo P2P signature extensions) are properly set up.\nThen add `P2PNotary` subsection to `ApplicationConfiguration` section of your\nnode config.\n\nParameters:\n* `Enabled`: boolean value, enables/disables the service node, `true` for service\n  node to be enabled\n* `UnlockWallet`: notary node wallet configuration:\n    - `Path`: path to NEP-6 wallet.\n    - `Password`: password for the account to be used by notary node.\n\n##### Example\n\n```\nP2PNotary:\n  Enabled: true\n  UnlockWallet:\n    Path: \"/notary_node_wallet.json\"\n    Password: \"pass\"\n```\n\n\n## Notary request lifecycle guide\n\nBelow are presented all stages each P2P signature collection request goes through. Use\nstages 1 and 2 to create, sign and submit P2P notary request. Stage 3 is\nperformed by the notary service; it does not require user's intervention and is given\nfor informational purposes. Stage 4 contains advice to check for notary request\nresults.\n\n### 1. Notary deposit\n\nTo guarantee that payment to the notary node will still be done if things go wrong,\nsender's deposit to the Notary native contract is used. Before the notary request will be\nsubmitted, you need to deposit enough GAS to the contract, otherwise, request\nwon't pass verification.\n\nNotary native contract supports `onNEP17Payment` method. Thus, to deposit funds to\nthe Notary native contract, transfer the desired amount of GAS to the contract\naddress. Use\n[func (*Client) TransferNEP17](https://pkg.go.dev/github.com/nspcc-dev/neo-go@v0.97.2/pkg/rpcclient#Client.TransferNEP17)\nwith the `data` parameter matching the following requirements:\n- `data` should be an array of two elements: `to` and `till`.\n- `to` denotes the receiver of the", "doc_id": "9f8cb95a-6ccc-4e3c-8b13-015a2a2f6de5", "embedding": null, "doc_hash": "6970a1d7ecf0b31f3792f7008f380119795925aef5fc21098d43a0bb42dc1bcd", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 10710, "end": 13913, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "f173d899-f6ac-4d15-9464-6d31a0bb6c6d", "3": "454bb4f2-54dd-43f6-b8b1-7a56131df743"}}, "__type__": "1"}, "454bb4f2-54dd-43f6-b8b1-7a56131df743": {"__data__": {"text": "`to` and `till`.\n- `to` denotes the receiver of the deposit. It can be nil in case `to` equals\n  the GAS sender.\n- `till` denotes chain's height before which deposit is locked and can't be\n  withdrawn. `till` can't be less than the current chain height. `till`\n  can't be less than the current `till` value for the deposit if the deposit\n  already exists. `till` can be set to the provided value iff the transaction\n  sender is the owner of the deposit, otherwise the provided `till` value will\n  be overridden by the system. If the sender is not the deposit owner, the\n  overridden `till` value is either set to be the current chain height + 5760\n  (for the newly added deposit) or set to the old `till` value (for the existing\n  deposit).\n\nNote, that the first deposit call for the `to` address can't transfer less than 2\u00d7`FEE` GAS.\nDeposit is allowed for renewal, i.e. consequent `deposit` calls for the same `to`\naddress add up a specified amount to the already deposited value.\n\nAfter GAS transfer is successfully submitted to the chain, use [Notary native\ncontract API](#Native Notary contract) to manage your deposit.\n\nNote, that regular operation flow requires the deposited amount of GAS to be\nsufficient to pay for *all* fallback transactions that are currently submitted (all\nin-flight notary requests). The default deposit sum for one fallback transaction\nshould be enough to pay the fallback transaction fees which are system fee and\nnetwork fee. Fallback network fee includes (`NKeys`+1)\u00d7`FEE` = (0+1)\u00d7`FEE` = `FEE`\nGAS for `NotaryAssisted` attribute usage and regular fee for the fallback size.\nIf you need to submit several notary requests, ensure that the deposited amount is\nenough to pay for all fallbacks. If the deposited amount is not enough to pay the\nfallback fees, `Insufficiend funds` error will be returned from the RPC node\nafter notary request submission.\n\n### 2. Request submission\n\nOnce several parties want to sign one transaction, each of them should generate\nthe transaction, wrap it into `P2PNotaryRequest` payload and send it to the known RPC\nserver via [`submitnotaryrequest` RPC call](./rpc.md#submitnotaryrequest-call).\nNote, that all parties must generate the same main transaction while fallbacks\ncan differ.\n\nTo create a notary request, you can use [NeoGo RPC client](./rpc.md#Client). The\nprocedure below uses only basic RPC client functions and show all of the notary\nrequest internals. You can use much simpler Actor interface in the notary\nsubpackage with an example written in Go doc.\n\n1. Prepare a list of signers with scopes for the main transaction (i.e. the\n   transaction that signatures are being collected for, that will be `Signers`\n   transaction field). Use the following rules to construct the list:\n   * First signer is the one who pays the transaction fees.\n   * Each signer is either a multisignature or a standard signature or a contract\n     signer.\n   * Multisignature and signature signers can be combined.\n   * Contract signer can be combined with any other signer.\n\n   Include Notary native contract in the list of signers with the following\n   constraints:\n   * Notary signer hash is the hash of a native Notary contract that can be fetched\n     from the notary RPC client subpackage (notary.Hash)\n   * A notary signer must have `None` scope.\n   * A notary signer shouldn't be placed at the beginning of the signer list\n     because Notary contract does not", "doc_id": "454bb4f2-54dd-43f6-b8b1-7a56131df743", "embedding": null, "doc_hash": "18fa987af0bf86628998500e948e6b41b705316d7b674aa5634ad094c344e1a1", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 13935, "end": 17360, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "9f8cb95a-6ccc-4e3c-8b13-015a2a2f6de5", "3": "2d4f6010-85ef-470c-857e-5783430647da"}}, "__type__": "1"}, "2d4f6010-85ef-470c-857e-5783430647da": {"__data__": {"text": "at the beginning of the signer list\n     because Notary contract does not pay main transaction fees. Other positions\n     in the signer list are available for a Notary signer.\n2. Construct a script for the main transaction (that will be `Script` transaction\n   field) and calculate system fee using regular rules (that will be `SystemFee`\n   transaction field). Probably, you'll perform one of these actions:\n   1. If the script is a contract method call, use `invokefunction` RPC API\n      [func (*Client) InvokeFunction](https://pkg.go.dev/github.com/nspcc-dev/neo-go@v0.97.2/pkg/rpcclient#Client.InvokeFunction)\n      and fetch the script and the gas consumed from the result.\n   2. If the script is more complicated than just a contract method call,\n      construct the script manually and use `invokescript` RPC API\n      [func (*Client) InvokeScript](https://pkg.go.dev/github.com/nspcc-dev/neo-go@v0.97.2/pkg/rpcclient#Client.InvokeScript)\n      to fetch the gas consumed from the result.\n   3. Or just construct the script and set system fee manually.\n3. Calculate the height main transaction is valid until (that will be\n   `ValidUntilBlock` transaction field). Consider the following rules for `VUB`\n   value estimation:\n      * `VUB` value must not be lower than the current chain height.\n      * The whole notary request (including fallback transaction) is valid until\n        the same `VUB` height.\n      * `VUB` value must be lower than notary deposit expiration height. This\n        condition guarantees that the deposit won't be withdrawn before notary\n        service payment.\n      * All parties must provide the same `VUB` for the main transaction. \n4. Construct the list of main transaction attributes (that will be `Attributes`\n   transaction field). The list must include `NotaryAssisted` attribute with\n   `NKeys` equals the overall number of the keys to be collected excluding notary and\n   other contract-based witnesses. For m out of n multisignature request\n   `NKeys = n`. For multiple standard signature request, signers `NKeys` equals\n   the standard signature signers count.\n5. Construct a list of accounts (`wallet.Account` structure from the `wallet`\n   package) to calculate network fee for the transaction\n   using the following rules. This list will be used in the next step.\n   - The number and the order of the accounts should match the transaction signers\n     constructed at step 1.\n   - An account for a contract signer should have `Contract` field with `Deployed` set\n     to `true` if the corresponding contract is deployed on chain.\n   - An account for a signature or a multisignature signer should have `Contract` field\n     with `Deployed` set to `false` and `Script` set to the signer's verification\n     script.\n   - An account for a notary signer is **just a placeholder** and should have\n     `Contract` field with `Deployed` set to `true`. Its `Invocation` witness script\n     parameters will be guessed by the `verify` method signature of Notary contract\n     during the network fee calculation at the next step.\n     \n6. Fill in the main transaction `Nonce` field.\n7. Construct a list of main transactions witnesses (that will be `Scripts`\n   transaction field). Uses standard rules for witnesses", "doc_id": "2d4f6010-85ef-470c-857e-5783430647da", "embedding": null, "doc_hash": "184cf6feb941768835c9a3513eb4b1e012518d7a2b7c60fd3b9235c42fe0320f", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 17346, "end": 20595, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "454bb4f2-54dd-43f6-b8b1-7a56131df743", "3": "08cec817-f4d9-405b-904f-8122c6fd664d"}}, "__type__": "1"}, "08cec817-f4d9-405b-904f-8122c6fd664d": {"__data__": {"text": "be `Scripts`\n   transaction field). Uses standard rules for witnesses of not yet signed\n   transaction (it can't be signed at this stage because network fee is missing):\n   - A contract-based witness should have `Invocation` script that pushes arguments\n     on stack (it may be empty) and empty `Verification` script. If multiple notary\n     requests provide different `Invocation` scripts, the first one will be used\n     to construct contract-based witness. If non-empty `Invocation` script is\n     specified then it will be taken into account during network fee calculation.\n     In case of an empty `Invocation` script, its parameters will be guessed from\n     the contract's `verify` signature during network fee calculation.\n   - A **Notary contract witness** (which is also a contract-based witness) should\n     have empty `Verification` script. `Invocation` script should be either empty\n     (allowed for main transaction and forbidden for fallback transaction) or of\n     the form [opcode.PUSHDATA1, 64, make([]byte, 64)...] (allowed for main\n     transaction and required for fallback transaction by the Notary subsystem to\n     pass verification), i.e. to be a placeholder for a notary contract signature.\n     Both ways are OK for network fee calculation.\n   - A standard signature witness must have regular `Verification` script filled\n     even if the `Invocation` script is to be collected from other notary\n     requests.\n     `Invocation` script **should be empty**.\n   - A multisignature witness must have regular `Verification` script filled even\n     if `Invocation` script is to be collected from other notary requests.\n     `Invocation` script **should be empty**.\n8. Calculate network fee for the transaction (that will be `NetworkFee`\n   transaction field). Use [func (*Client) CalculateNetworkFee](https://pkg.go.dev/github.com/nspcc-dev/neo-go@v0.99.2/pkg/rpcclient#Client.CalculateNetworkFee)\n   method with the main transaction given to it.\n9. Fill in all signatures that can be provded by the client creating request,\n   that includes simple-signature accounts and multisignature accounts where\n   the client has one of the keys (in which case an invocation script is\n   created that pushes just one signature onto the stack).\n10. Sign and submit P2P notary request. Use\n    [func (*Actor) Notarize](https://pkg.go.dev/github.com/nspcc-dev/neo-go/pkg/rpcclient/notary#Actor.Notarize) for it.\n    - Use the signed main transaction from step 9 as `mainTx` argument.\n    \n    `Notarize` will construct and sign a fallback transaction using `Actor`\n    configuration (just a simple `RET` script by default), pack both transactions\n    into a P2PNotaryRequest and submit it to the RPC node. It returns hashes of\n    the main and fallback transactions as well as their `ValidUntilBlock` value.\n    If you need more control over fallback transction use `Actor` options or\n    [func (*Actor) SendRequest](https://pkg.go.dev/github.com/nspcc-dev/neo-go/pkg/rpcclient/notary#Actor.SendRequest)\n    API.\n\nAfter P2PNotaryRequests are sent, participants should wait for one of their\ntransactions (main or fallback) to get accepted into one of subsequent blocks.\n\n### 3. Signatures collection and transaction release\n\nA valid P2PNotaryRequest payload is", "doc_id": "08cec817-f4d9-405b-904f-8122c6fd664d", "embedding": null, "doc_hash": "d7fc6cbcf1a27afb70258e648254ed2557217d5a7fdcccc1542f72aa73b7ac12", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 20595, "end": 23865, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "2d4f6010-85ef-470c-857e-5783430647da", "3": "ce79b4b5-b253-4646-9b88-940c48b0d0be"}}, "__type__": "1"}, "ce79b4b5-b253-4646-9b88-940c48b0d0be": {"__data__": {"text": "Signatures collection and transaction release\n\nA valid P2PNotaryRequest payload is distributed via P2P network using standard\nbroadcasting mechanisms until it reaches the designated notary nodes that have the\nrespective node module active. They collect all payloads for the same main\ntransaction until enough signatures are collected to create proper witnesses for\nit. Then, they attach all witnesses required and send this transaction as usual\nand monitor subsequent blocks for its inclusion.\n\nAll the operations leading to successful transaction creation are independent\nof the chain and could easily be done within one block interval. So, if the\nfirst service request is sent at the current height `H`, the main transaction\nis highly likely to be a part of `H+1` block.\n \n### 4. Results monitoring\n\nOnce the P2PNotaryRequest reaches RPC node, it is added to the notary request pool.\nCompleted or outdated requests are removed from the pool. Use\n[NeoGo notification subsystem](./notifications.md) to track request addition and\nremoval:\n\n- Use RPC `subscribe` method with `notary_request_event` stream name parameter to\n  subscribe to `P2PNotaryRequest` payloads that are added or removed from the\n  notary request pool.\n- Use `sender` or `signer` filters to filter out a notary request with the desired\n  request senders or main tx signers.\n\nUse the notification subsystem to track that the main or the fallback transaction\nis accepted to the chain:\n\n- Use RPC `subscribe` method with `transaction_added` stream name parameter to\n  subscribe to transactions that are accepted to the chain.\n- Use `sender` filter with the Notary native contract hash to filter out fallback\n  transactions sent by the Notary node. Use `signer` filter with the notary request\n  sender address to filter out the fallback transactions sent by the specified\n  sender.\n- Use `sender` or `signer` filters to filter out the main transaction with the desired\n  sender or signers. You can also filter out the main transaction using Notary\n  contract `signer` filter.\n- Don't rely on `sender` and `signer` filters only, also check that the received\n  transaction has `NotaryAssisted` attribute with the expected `NKeys` value.\n\nUse the notification subsystem to track main or fallback transaction execution\nresults.\n\nMoreover, you can use all regular RPC calls to track main or fallback transaction\ninvocation: `getrawtransaction`, `getapplicationlog` etc.\n\n## Notary service use-cases\n\nSeveral use-cases where Notary subsystem can be applied are described below.\n\n### Committee-signed transactions\n\nThe signature collection problem occurs every time committee participants need\nto submit a transaction with `m out of n` multisignature, i.g.:\n- transfer initial supply of NEO and GAS from a committee multisignature account to\n  other addresses on new chain start\n- tune valuable chain parameters like gas per block, candidate register price,\n  minimum contract deployment fee, Oracle request price, native Policy values etc\n- invoke non-native contract methods that require committee multisignature witness\n\nCurrent solution offers off-chain non-P2P signature collection (either manual\nor using some additional network connectivity). It has an obvious downside of\nreliance on something external to the network. If it's manual, it's slow and\nerror-prone; if it's automated, it requires additional protocol for all the\nparties involved. For the protocol used by oracle nodes, it also means\nnodes explicitly exposing to each other.\n\nWith the Notary service all signature collection logic is unified and is on chain already.\nThe only thing that committee participants should perform is to create and submit\na P2P notary request (can be done independently). Once the sufficient number of signatures\nis collected by the service, the desired transaction will be applied and pass committee\nwitness", "doc_id": "ce79b4b5-b253-4646-9b88-940c48b0d0be", "embedding": null, "doc_hash": "c08230c20d08c3eb6aaa786b6eb420cce21924143e2f778a669b3ae3ab1ee590", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 23851, "end": 27714, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "08cec817-f4d9-405b-904f-8122c6fd664d", "3": "389c5fbf-ceb9-48d2-9b33-b3903709a3ea"}}, "__type__": "1"}, "389c5fbf-ceb9-48d2-9b33-b3903709a3ea": {"__data__": {"text": "by the service, the desired transaction will be applied and pass committee\nwitness verification.\n\n### NeoFS Inner Ring nodes\n\nAlphabet nodes of the Inner Ring signature collection is a particular case of committee-signed\ntransactions. Alphabet nodes multisignature is used for various cases, such as:\n- main chain and side chain funds synchronization and withdrawal\n- bootstrapping new storage nodes to the network\n- network map management and epoch update\n- containers and extended ACL management\n- side chain governance update\n\nNon-notary on-chain solution for Alphabet nodes multisignature forming is\nimitated via contracts collecting invocations of their methods signed by standard\nsignature of each Alphabet node. Once the sufficient number of invocations is\ncollected, the invocation is performed.\n\nThe described solution has several drawbacks:\n\n- it can only be app-specific (meaning that for every use case this logic would\n  be duplicated) because we can't create transactions from transactions (thus\n  using proper multisignature account is not possible)\n- for `m out of n` multisignature we need at least `m` transactions instead of\n  one we really wanted to have; but actually we'll create and process `n` of\n  them, so this adds substantial overhead to the chain\n- some GAS is inevitably wasted because any invocation could either go the easy\n  path (just adding a signature to the list) or really invoke the function we\n  wanted to (when all signatures are in place), so test invocations don't really\n  help and the user needs to add some GAS to all of these transactions\n\nNotary on-chain Alphabet multisignature collection solution\n[uses Notary subsystem](https://github.com/nspcc-dev/neofs-node/pull/404) to\nsuccessfully solve these problems, e.g. to calculate precisely the amount of GAS to\npay for contract invocation witnessed by Alphabet nodes (see\n[nspcc-dev/neofs-node#47](https://github.com/nspcc-dev/neofs-node/issues/47)),\nto reduce container creation delay\n(see [nspcc-dev/neofs-node#519](https://github.com/nspcc-dev/neofs-node/issues/519))\netc.\n\n### Contract-sponsored (free) transactions\n\nThe original problem and solution are described in\n[neo-project/neo#2577](https://github.com/neo-project/neo/issues/2577) discussion.\n", "doc_id": "389c5fbf-ceb9-48d2-9b33-b3903709a3ea", "embedding": null, "doc_hash": "bf84d22af760ee8cf5e1d78d80dae9d4e7c022af75df08337cea003008a6bd4c", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}, "node_info": {"start": 27706, "end": 29958, "_node_type": "1"}, "relationships": {"1": "b75d40a45b416d38cd18c797e37294662068f687", "2": "ce79b4b5-b253-4646-9b88-940c48b0d0be"}}, "__type__": "1"}, "09be57be-8427-4eee-a563-6bbf472d3f0c": {"__data__": {"text": "# Notification subsystem\n\nOriginal motivation, requirements and general solution strategy are described\nin the [issue #895](https://github.com/nspcc-dev/neo-go/issues/895).\n\nThis extension allows a websocket client to subscribe to various events and\nreceive them as JSON-RPC notifications from the server.\n\n## Events\nCurrently supported events:\n * new block added\n\n   Contents: block. Filters: primary ID, since/till block indexes.\n * new transaction in the block\n\n   Contents: transaction. Filters: sender and signer.\n * notification generated during execution\n\n   Contents: container hash, contract hash, notification name, stack item. Filters: contract hash, notification name.\n * transaction/persisting script executed\n\n   Contents: application execution result. Filters: VM state, script container hash.\n * new/removed P2P notary request (if `P2PSigExtensions` are enabled)\n\n   Contents: P2P notary request. Filters: request sender and main tx signer.\n\nFilters use conjunctional logic.\n\n## Ordering and persistence guarantees\n * new block is only announced after its processing is complete and the chain\n   is updated to the new height\n * no disk-level persistence guarantees are given\n * new in-block transaction is announced after block processing, but before\n   announcing the block itself\n * transaction notifications are only announced for successful transactions\n * all announcements are being done in the same order they happen on the chain\n   First, OnPersist script execution is announced followed by notifications generated\n   during the script execution. After that transaction execution is announced. It is\n   then followed by notifications generated during this execution. Next, follows the\n   transaction announcement. Transaction announcements are ordered the same way\n   they're in the block. After all in-block transactions announcements PostPersist\n   script execution is announced followed by notifications generated during the\n   script execution. Finally, block announcement is followed.\n * unsubscription may not cancel pending, but not yet sent events\n\n## Subscription management\n\nTo receive events, clients need to subscribe to them first via `subscribe`\nmethod. Upon successful subscription, clients receive subscription ID for\nsubsequent management of this subscription. Subscription is only valid for\nconnection lifetime, no long-term client identification is being made.\n\nErrors are not described down below, but they can be returned as standard\nJSON-RPC errors (most often caused by invalid parameters).\n\n### `subscribe` method\n\nParameters: event stream name, stream-specific filter rules hash (can be\nomitted if empty).\n\nRecognized stream names:\n * `block_added`\n   Filter: `primary` as an integer with primary (speaker) node index from\n   ConsensusData and/or `since` field as an integer value with block\n   index starting from which new block notifications will be received and/or\n   `till` field as an integer values containing block index till which new\n   block notifications will be received.\n * `transaction_added`\n   Filter: `sender` field containing a string with hex-encoded Uint160 (LE\n   representation) for transaction's `Sender` and/or `signer` in the same\n   format for one of transaction's `Signers`.\n * `notification_from_execution`\n   Filter: `contract` field containing a string with hex-encoded Uint160 (LE\n   representation) and/or `name` field containing a string with execution \n   notification name.\n * `transaction_executed`\n   Filter: `state` field containing `HALT` or `FAULT` string for successful\n   and failed executions respectively and/or `container` field containing\n   script container (block/transaction) hash.\n * `notary_request_event`\n   Filter: `sender` field containing a string with hex-encoded Uint160 (LE\n", "doc_id": "09be57be-8427-4eee-a563-6bbf472d3f0c", "embedding": null, "doc_hash": "0debdf08c7f9d84495679ca573ac953ca4d21e0606c023fc1a56f6fc095cc3b3", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 0, "end": 3782, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "3": "b03b9754-6908-49f3-9735-d753f866c90f"}}, "__type__": "1"}, "b03b9754-6908-49f3-9735-d753f866c90f": {"__data__": {"text": "`sender` field containing a string with hex-encoded Uint160 (LE\n   representation) for notary request's `Sender` and/or `signer` in the same\n   format for one of main transaction's `Signers`.\n\nResponse: returns subscription ID (string) as a result. This ID can be used to\ncancel this subscription and has no meaning other than that.\n\nExample request (subscribe to notifications from contract\n0x6293a440ed80a427038e175a507d3def1e04fb67 generated when executing\ntransactions):\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"subscribe\",\n  \"params\": [\"notification_from_execution\", {\"contract\": \"6293a440ed80a427038e175a507d3def1e04fb67\"}],\n  \"id\": 1\n}\n\n```\n\nExample response:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"55aaff00\"\n}\n```\n\n### `unsubscribe` method\n\nParameters: subscription ID as a string.\n\nResponse: boolean true.\n\nExample request (unsubscribe from \"55aaff00\"):\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"unsubscribe\",\n  \"params\": [\"55aaff00\"],\n  \"id\": 1\n}\n```\n\nExample response:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": true\n}\n```\n\n## Events\n\nEvents are sent as JSON-RPC notifications from the server with `method` field\nbeing used for notification names. Notification names are identical to stream\nnames described for `subscribe` method with one important addition for\n`event_missed`, which can be sent for any subscription to signify that some\nevents have not been delivered (usually when a client is unable to keep up with\nthe event flow).\n\nVerbose responses for various structures like blocks and transactions are used\nto simplify working with notifications on the client side. Returned structures\nmostly follow the one used by standard Neo RPC calls but may have some minor\ndifferences.\n\nIf a server-side event matches several subscriptions from one client, it's\nonly sent once.\n\n### `block_added` notification\n\nThe first parameter (`params` section) contains a block converted to a JSON\nstructure, which is similar to a verbose `getblock` response but with the\nfollowing differences:\n * it doesn't have `size` field (you can calculate it client-side)\n * it doesn't have `nextblockhash` field (it's supposed to be the latest one\n    anyway)\n * it doesn't have `confirmations` field (see previous)\n\nNo other parameters are sent.\n\nExample:\n```\n{\n   \"params\" : [\n      {\n         \"index\" : 207,\n         \"time\" : 1590006200,\n         \"nextconsensus\" : \"AXSvJVzydxXuL9da4GVwK25zdesCrVKkHL\",\n         \"consensusdata\" : {\n            \"primary\" : 0,\n            \"nonce\" : \"0000000000000457\"\n         },\n         \"previousblockhash\" : \"0x04f7580b111ec75f0ce68d3a9fd70a0544b4521b4a98541694d8575c548b759e\",\n         \"witnesses\" : [\n            {\n               \"invocation\" :", "doc_id": "b03b9754-6908-49f3-9735-d753f866c90f", "embedding": null, "doc_hash": "a48fdfc9f2b0de0ce39ded18c1e3d88ac586a934176e1e08f68742b06adafde5", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 3727, "end": 6416, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "09be57be-8427-4eee-a563-6bbf472d3f0c", "3": "d3963322-8529-417c-8998-6fa447d0909d"}}, "__type__": "1"}, "d3963322-8529-417c-8998-6fa447d0909d": {"__data__": {"text": "              \"invocation\" : \"0c4063429fca5ff75c964d9e38179c75978e33f8174d91a780c2e825265cf2447281594afdd5f3e216dcaf5ff0693aec83f415996cf224454495495f6bd0a4c5d08f0c4099680903a954278580d8533121c2cd3e53a089817b6a784901ec06178a60b5f1da6e70422bdcadc89029767e08d66ce4180b99334cb2d42f42e4216394af15920c4067d5e362189e48839a24e187c59d46f5d9db862c8a029777f1548b19632bfdc73ad373827ed02369f925e89c2303b64e6b9838dca229949b9b9d3bd4c0c3ed8f0c4021d4c00d4522805883f1db929554441bcbbee127c48f6b7feeeb69a72a78c7f0a75011663e239c0820ef903f36168f42936de10f0ef20681cb735a4b53d0390f\",\n               \"verification\" : \"130c2102103a7f7dd016558597f7960d27c516a4394fd968b9e65155eb4b013e4040406e0c2102a7bc55fe8684e0119768d104ba30795bdcc86619e864add26156723ed185cd620c2102b3622bf4017bdfe317c58aed5f4c753f206b7db896046fa7d774bbc4bf7f8dc20c2103d90c07df63e690ce77912e10ab51acc944b66860237b608c4f8f8309e71ee699140b413073b3bb\"\n            }\n         ],\n         \"version\" : 0,\n         \"hash\" : \"0x239fea00c54c2f6812612874183b72bef4473fcdf68bf8da08d74fd5b6cab030\",\n         \"tx\" : [\n            {\n               \"txid\" : \"0xf736cd91ab84062a21a09b424346b241987f6245ffe8c2b2db39d595c3c222f7\",\n               \"witnesses\" : [\n                  {\n                     \"verification\" : \"0c2102b3622bf4017bdfe317c58aed5f4c753f206b7db896046fa7d774bbc4bf7f8dc20b410a906ad4\",\n                     \"invocation\" : \"0c4016e7a112742409cdfaad89dcdbcb52c94c5c1a69dfe5d8b999649eaaa787e31ca496d1734d6ea606c749ad36e9a88892240ae59e0efa7f544e0692124898d512\"\n                  }\n               ],\n               \"vout\" : [],\n           ", "doc_id": "d3963322-8529-417c-8998-6fa447d0909d", "embedding": null, "doc_hash": "e6aad5921816f15654b27b81e7b3d0f5e4900c4a68d7ef39fa7257dd913cf9bc", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 6460, "end": 8039, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "b03b9754-6908-49f3-9735-d753f866c90f", "3": "c4244af0-71b2-4341-a7d2-deb94524a1f9"}}, "__type__": "1"}, "c4244af0-71b2-4341-a7d2-deb94524a1f9": {"__data__": {"text": " \"vout\" : [],\n               \"cosigners\" : [],\n               \"validuntilblock\" : 1200,\n               \"nonce\" : 8,\n               \"netfee\" : \"0.0030421\",\n               \"sender\" : \"ALHF9wsXZVEuCGgmDA6ZNsCLtrb4A1g4yG\",\n               \"sysfee\" : \"0\",\n               \"type\" : \"InvocationTransaction\",\n               \"attributes\" : [],\n               \"version\" : 1,\n               \"vin\" : [],\n               \"size\" : 204,\n               \"script\" : \"10c00c04696e69740c14769162241eedf97c2481652adf1ba0f5bf57431b41627d5b52\"\n            },\n            {\n               \"script\" : \"01e8030c14316e851039019d39dfc2c37d6c3fee19fd5809870c14769162241eedf97c2481652adf1ba0f5bf57431b13c00c087472616e736665720c14769162241eedf97c2481652adf1ba0f5bf57431b41627d5b5238\",\n               \"size\" : 277,\n               \"attributes\" : [],\n               \"version\" : 1,\n               \"vin\" : [],\n               \"netfee\" : \"0.0037721\",\n               \"sender\" : \"ALHF9wsXZVEuCGgmDA6ZNsCLtrb4A1g4yG\",\n               \"sysfee\" : \"0\",\n               \"type\" : \"InvocationTransaction\",\n               \"nonce\" : 9,\n               \"signers\" : [\n                  {\n                     \"scopes\" : 1,\n                     \"account\" : \"0x870958fd19ee3f6c7dc3c2df399d013910856e31\"\n                  }\n               ],\n               \"validuntilblock\" : 1200,\n               \"witnesses\" : [\n                  {\n                     \"invocation\" :", "doc_id": "c4244af0-71b2-4341-a7d2-deb94524a1f9", "embedding": null, "doc_hash": "da09e5ee9c74742b0b121039313bf76a59c702de0dabbbb6a9489e5f4180fedf", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 8042, "end": 9451, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "d3963322-8529-417c-8998-6fa447d0909d", "3": "3a549f42-e38a-4447-8d6c-c00c8cfd1add"}}, "__type__": "1"}, "3a549f42-e38a-4447-8d6c-c00c8cfd1add": {"__data__": {"text": "               \"invocation\" : \"0c4027727296b84853c5d9e07fb8a40e885246ae25641383b16eefbe92027ecb1635b794aacf6bbfc3e828c73829b14791c483d19eb758b57638e3191393dbf2d288\",\n                     \"verification\" : \"0c2102b3622bf4017bdfe317c58aed5f4c753f206b7db896046fa7d774bbc4bf7f8dc20b410a906ad4\"\n                  }\n               ],\n               \"vout\" : [],\n               \"txid\" : \"0xe1cd5e57e721d2a2e05fb1f08721b12057b25ab1dd7fd0f33ee1639932fdfad7\"\n            }\n         ],\n         \"merkleroot\" : \"0xb2c7230ebee4cb83bc03afadbba413e6bca8fcdeaf9c077bea060918da0e52a1\"\n      }\n   ],\n   \"jsonrpc\" : \"2.0\",\n   \"method\" : \"block_added\"\n}\n```\n\n### `transaction_added` notification\n\nThe first parameter (`params` section) contains a transaction converted to\nJSON, which is similar to a verbose `getrawtransaction` response, but with the\nfollowing differences:\n * block's metadata is missing (`blockhash`, `confirmations`, `blocktime`)\n\nNo other parameters are sent.\n\nExample:\n```\n{\n   \"method\" : \"transaction_added\",\n   \"params\" : [\n      {\n         \"validuntilblock\" : 1200,\n         \"version\" : 1,\n         \"txid\" : \"0xe1cd5e57e721d2a2e05fb1f08721b12057b25ab1dd7fd0f33ee1639932fdfad7\",\n         \"witnesses\" : [\n            {\n               \"invocation\" : \"0c4027727296b84853c5d9e07fb8a40e885246ae25641383b16eefbe92027ecb1635b794aacf6bbfc3e828c73829b14791c483d19eb758b57638e3191393dbf2d288\",\n               \"verification\" : \"0c2102b3622bf4017bdfe317c58aed5f4c753f206b7db896046fa7d774bbc4bf7f8dc20b410a906ad4\"\n            }\n         ],\n         \"sysfee\" : \"0\",\n         \"sender\" : \"ALHF9wsXZVEuCGgmDA6ZNsCLtrb4A1g4yG\",\n         \"vout\" : [],\n         \"netfee\" : \"0.0037721\",\n         \"size\" : 277,\n         \"attributes\" : [],\n   ", "doc_id": "3a549f42-e38a-4447-8d6c-c00c8cfd1add", "embedding": null, "doc_hash": "384175a77b1d26f953ba361d684de069938034300bd64a18a59836e9b5c844c2", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 9450, "end": 11171, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "c4244af0-71b2-4341-a7d2-deb94524a1f9", "3": "8f778651-c582-4228-8d1f-688b1cd88160"}}, "__type__": "1"}, "8f778651-c582-4228-8d1f-688b1cd88160": {"__data__": {"text": "        \"attributes\" : [],\n         \"script\" : \"01e8030c14316e851039019d39dfc2c37d6c3fee19fd5809870c14769162241eedf97c2481652adf1ba0f5bf57431b13c00c087472616e736665720c14769162241eedf97c2481652adf1ba0f5bf57431b41627d5b5238\",\n         \"nonce\" : 9,\n         \"vin\" : [],\n         \"type\" : \"InvocationTransaction\",\n         \"signers\" : [\n            {\n               \"account\" : \"0x870958fd19ee3f6c7dc3c2df399d013910856e31\",\n               \"scopes\" : 1\n            }\n         ]\n      }\n   ],\n   \"jsonrpc\" : \"2.0\"\n}\n```\n\n### `notification_from_execution` notification\n\nContains four parameters: container hash (block's or transaction's hex-encoded LE\nUint256 hash in a string), contract hash (hex-encoded LE Uint160 in a string),\nnotification name and stack item (encoded the same way as `state` field contents\nfor notifications from `getapplicationlog` response).\n\nExample:\n\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"method\" : \"notification_from_execution\",\n   \"params\" : [\n      {\n         \"state\" : {\n            \"value\" : [\n               {\n                  \"value\" : \"636f6e74726163742063616c6c\",\n                  \"type\" : \"ByteString\"\n               },\n               {\n                  \"value\" : \"7472616e73666572\",\n                  \"type\" : \"ByteString\"\n               },\n               {\n                  \"value\" : [\n                     {\n                        \"value\" : \"769162241eedf97c2481652adf1ba0f5bf57431b\",\n                        \"type\" : \"ByteString\"\n                     },\n                     {\n                        \"value\" : \"316e851039019d39dfc2c37d6c3fee19fd580987\",\n                        \"type\" : \"ByteString\"\n                     },\n    ", "doc_id": "8f778651-c582-4228-8d1f-688b1cd88160", "embedding": null, "doc_hash": "a4ffbf69813d6992891bc5623967060c836a88a0f3501eabf83604c479ff699e", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 11168, "end": 12830, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "3a549f42-e38a-4447-8d6c-c00c8cfd1add", "3": "6a2b6dd9-0a90-4e8d-a62a-221bd160f8e8"}}, "__type__": "1"}, "6a2b6dd9-0a90-4e8d-a62a-221bd160f8e8": {"__data__": {"text": "              },\n                     {\n                        \"value\" : \"1000\",\n                        \"type\" : \"Integer\"\n                     }\n                  ],\n                  \"type\" : \"Array\"\n               }\n            ],\n            \"type\" : \"Array\"\n         },\n         \"contract\" : \"0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\",\n         \"name\" : \"transfer\",\n         \"container\" : \"0xe1cd5e57e721d2a2e05fb1f08721b12057b25ab1dd7fd0f33ee1639932fdfad7\",\n      }\n   ]\n}\n```\n\n### `transaction_executed` notification\n\nIt contains the same result as from `getapplicationlog` method in the first\nparameter and no other parameters. The difference from `getapplicationlog` is\nthat it has block's or transaction's hex-encoded LE Uint256 hash in the `container`\nfield instead of two separate `txid` and `blockhash` fields and a single execution\ninstead of an executions array.\n\nExample:\n```\n{\n   \"method\" : \"transaction_executed\",\n   \"params\" : [\n      {\n         \"container\" : \"0xe1cd5e57e721d2a2e05fb1f08721b12057b25ab1dd7fd0f33ee1639932fdfad7\",\n         \"trigger\" : \"Application\",\n         \"gasconsumed\" : \"2.291\",\n         \"stack\" : [],\n         \"notifications\" : [\n            {\n               \"state\" : {\n                  \"type\" : \"Array\",\n                  \"value\" : [\n                     {\n                        \"value\" : \"636f6e74726163742063616c6c\",\n                        \"type\" : \"ByteString\"\n                     },\n                     {\n                        \"type\" : \"ByteString\",\n                        \"value\" : \"7472616e73666572\"\n                     },\n                     {\n                        \"value\" : [\n  ", "doc_id": "6a2b6dd9-0a90-4e8d-a62a-221bd160f8e8", "embedding": null, "doc_hash": "c3dbeb5e499135c36e01641e7db1cb52079293c28e68490d2feb232158c46fe5", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 12845, "end": 14492, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "8f778651-c582-4228-8d1f-688b1cd88160", "3": "aa36d69f-d114-465c-8893-ce3877b2258f"}}, "__type__": "1"}, "aa36d69f-d114-465c-8893-ce3877b2258f": {"__data__": {"text": "            \"value\" : [\n                           {\n                              \"value\" : \"769162241eedf97c2481652adf1ba0f5bf57431b\",\n                              \"type\" : \"ByteString\"\n                           },\n                           {\n                              \"type\" : \"ByteString\",\n                              \"value\" : \"316e851039019d39dfc2c37d6c3fee19fd580987\"\n                           },\n                           {\n                              \"value\" : \"1000\",\n                              \"type\" : \"Integer\"\n                           }\n                        ],\n                        \"type\" : \"Array\"\n                     }\n                  ]\n               },\n               \"contract\" : \"0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\"\n            },\n            {\n               \"contract\" : \"0x1b4357bff5a01bdf2a6581247cf9ed1e24629176\",\n               \"state\" : {\n                  \"value\" : [\n                     {\n                        \"value\" : \"7472616e73666572\",\n                        \"type\" : \"ByteString\"\n                     },\n                     {\n                        \"value\" : \"769162241eedf97c2481652adf1ba0f5bf57431b\",\n                        \"type\" : \"ByteString\"\n                     },\n                   ", "doc_id": "aa36d69f-d114-465c-8893-ce3877b2258f", "embedding": null, "doc_hash": "0c891a307a7e55ffccb9a653974a66dbd3175094da24158a0e95b98c7d0f8b7b", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 14486, "end": 15754, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "6a2b6dd9-0a90-4e8d-a62a-221bd160f8e8", "3": "8ce95d11-94d1-4d5f-bd5d-7dde3769bd76"}}, "__type__": "1"}, "8ce95d11-94d1-4d5f-bd5d-7dde3769bd76": {"__data__": {"text": "                    {\n                        \"value\" : \"316e851039019d39dfc2c37d6c3fee19fd580987\",\n                        \"type\" : \"ByteString\"\n                     },\n                     {\n                        \"value\" : \"1000\",\n                        \"type\" : \"Integer\"\n                     }\n                  ],\n                  \"type\" : \"Array\"\n               }\n            }\n         ],\n         \"vmstate\" : \"HALT\"\n      }\n   ],\n   \"jsonrpc\" : \"2.0\"\n}\n```\n\n### `notary_request_event` notification\n\nIt contains two parameters: event type, which could be one of \"added\" or \"removed\", and\nadded (or removed) notary request.\n\nExample:\n\n```\n{\n   \"jsonrpc\" : \"2.0\",\n   \"method\" : \"notary_request_event\",\n   \"params\" : [\n      {\n         \"notaryrequest\" : {\n            \"Witness\" : {\n               \"verification\" : \"DCECs2Ir9AF73+MXxYrtX0x1PyBrfbiWBG+n13S7xL9/jcJBVuezJw==\",\n               \"invocation\" : \"DECWLkFhNqBMCewLxjAWiXXA1YE/GmX6EWmIRM17F9lwwpXyWtzp+hkxvJNWHpDlslDvpXizGiB/YBd05kadXlSv\"\n            },\n            \"fallbacktx\" : {\n               \"validuntilblock\" : 115,\n               \"attributes\" : [\n                  {\n                     \"type\" : \"NotValidBefore\",\n                     \"height\" : 65\n                  },\n                  {\n                     \"type\" : \"Conflicts\",\n                     \"hash\" : \"0x03c564ed28ba3d50beb1a52dcb751b929e1d747281566bd510363470be186bc0\"\n                  },\n                  {\n              ", "doc_id": "8ce95d11-94d1-4d5f-bd5d-7dde3769bd76", "embedding": null, "doc_hash": "780662ca353c199c4583905a5ffc1dd285394a6b5ec885ae1fac630a11b9c5d9", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 15765, "end": 17225, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "aa36d69f-d114-465c-8893-ce3877b2258f", "3": "9b902ae6-08a0-46ba-8757-f0009434a967"}}, "__type__": "1"}, "9b902ae6-08a0-46ba-8757-f0009434a967": {"__data__": {"text": "    {\n                     \"type\" : \"NotaryAssisted\",\n                     \"nkeys\" : 0\n                  }\n               ],\n               \"sender\" : \"NRNp25VPHahL3umVxBcMLuEENGZR9cHxtc\",\n               \"size\" : 291,\n               \"netfee\" : \"200000000\",\n               \"witnesses\" : [\n                  {\n                     \"invocation\" : \"DEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n                     \"verification\" : \"\"\n                  },\n                  {\n                     \"invocation\" : \"DEBnVePpwnsM54K72RmxZR8cWTGxQveJ1cAdd3/zQUh6KVDnj+G5F8AI6gYlbnEK5qJwP40WfGWlmy3A8mYHGVLm\",\n                     \"verification\" : \"DCECs2Ir9AF73+MXxYrtX0x1PyBrfbiWBG+n13S7xL9/jcJBVuezJw==\"\n                  }\n               ],\n               \"nonce\" : 0,\n               \"sysfee\" : \"0\",\n               \"signers\" : [\n                  {\n                     \"scopes\" : \"None\",\n                     \"account\" : \"0xc1e14f19c3e60d0b9244d06dd7ba9b113135ec3b\"\n                  },\n                  {\n                     \"account\" : \"0xb248508f4ef7088e10c48f14d04be3272ca29eee\",\n                     \"scopes\" : \"None\"\n                  }\n               ],\n               \"version\" : 0,\n               \"hash\" : \"0x5eb5f89d04648d43ba7563130e8bfd1710392ab97cba8e35857aed4206db3643\",\n               \"script\" : \"QA==\"\n            },\n           ", "doc_id": "9b902ae6-08a0-46ba-8757-f0009434a967", "embedding": null, "doc_hash": "3fdbc5fdb3e4f0095d375e21c96c9b78ebb31db15f9e034d91f5ef34708ecacd", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 17224, "end": 18611, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "8ce95d11-94d1-4d5f-bd5d-7dde3769bd76", "3": "7153fb8a-8a3b-4ae3-9bed-a2b5b0673060"}}, "__type__": "1"}, "7153fb8a-8a3b-4ae3-9bed-a2b5b0673060": {"__data__": {"text": "       },\n            \"maintx\" : {\n               \"sender\" : \"Nhfg3TbpwogLvDGVvAvqyThbsHgoSUKwtn\",\n               \"attributes\" : [\n                  {\n                     \"nkeys\" : 1,\n                     \"type\" : \"NotaryAssisted\"\n                  }\n               ],\n               \"validuntilblock\" : 115,\n               \"witnesses\" : [\n                  {\n                     \"invocation\" : \"AQQH\",\n                     \"verification\" : \"AwYJ\"\n                  }\n               ],\n               \"netfee\" : \"0\",\n               \"size\" : 62,\n               \"version\" : 0,\n               \"signers\" : [\n                  {\n                     \"scopes\" : \"None\",\n                     \"account\" : \"0xb248508f4ef7088e10c48f14d04be3272ca29eee\"\n                  }\n               ],\n               \"sysfee\" : \"0\",\n               \"nonce\" : 1,\n               \"script\" : \"QA==\",\n               \"hash\" : \"0x03c564ed28ba3d50beb1a52dcb751b929e1d747281566bd510363470be186bc0\"\n            }\n         },\n         \"type\" : \"added\"\n      }\n   ]\n}\n```\n\n### `event_missed` notification\n\nNever has any parameters. Example:\n\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"event_missed\",\n  \"params\": []\n}\n```\n", "doc_id": "7153fb8a-8a3b-4ae3-9bed-a2b5b0673060", "embedding": null, "doc_hash": "775280da990d83b89c4197dbb58777789d854a1176495dacb6dbeb7b5892d423", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}, "node_info": {"start": 18592, "end": 19776, "_node_type": "1"}, "relationships": {"1": "741d4a200fee8394e6fb61109a101eb0f93b8069", "2": "9b902ae6-08a0-46ba-8757-f0009434a967"}}, "__type__": "1"}, "f490e9e5-77f0-40eb-b938-3f9e57d662f4": {"__data__": {"text": "# NeoGo Oracle service\n\nNeoGo node can act as an oracle service node for https and neofs protocols. It\nhas to have a wallet with a key belonging to one of the network's designated oracle\nnodes (stored in `RoleManagement` native contract).\n\nIt needs [RPC service](rpc.md) to be enabled and configured properly because\nRPC is used by oracle nodes to exchange signatures of the resulting\ntransaction.\n\n## Configuration\n\nTo enable oracle service, add `Oracle` subsection to `ApplicationConfiguration`\nsection of your node config.\n\nParameters:\n * `Enabled`: boolean value, enables/disables the service, `true` for service\n   to be enabled\n * `AllowPrivateHost`: boolean value, enables/disables private IPs (like\n   127.0.0.1 or 192.168.0.1) for https requests, it defaults to false and it's\n   false on public networks, but you can enable it for private ones.\n * `AllowedContentTypes`: a list of allowed MIME types. Only `application/json`\n   is allowed by default. Can be left empty to allow everything.\n * `Nodes`: a list of oracle node RPC endpoints, it's used for oracle node\n   communication. All oracle nodes should be specified there.\n * `NeoFS`: a subsection of its own for NeoFS configuration with two\n   parameters:\n     - `Timeout`: request timeout, like \"5s\"\n     - `Nodes`: a list of NeoFS nodes (their gRPC interfaces) to get data from,\n       one node is enough to operate, but they're used in round-robin fashion,\n       so you can spread the load by specifying multiple nodes\n * `MaxTaskTimeout`: maximum time a request can be active (retried to\n   process), defaults to 1 hour if not specified.\n * `RefreshInterval`: retry period for requests that aren't yet processed,\n   defaults to 3 minutes.\n * `MaxConcurrentRequests`: maximum number of requests processed in parallel,\n   defaults to 10.\n * `RequestTimeout`: https request timeout, default is 5 seconds.\n * `ResponseTimeout`: RPC communication timeout for inter-oracle exchange,\n   default is 4 seconds.\n * `UnlockWallet`: oracle wallet configuration:\n     - `Path`: path to NEP-6 wallet.\n     - `Password`: password for the account to be used by oracle node.\n\n### Example\n\n```\n  Oracle:\n    Enabled: true\n    AllowPrivateHost: false\n    MaxTaskTimeout: 432000000s\n    Nodes:\n      - http://oracle1.example.com:20332\n      - http://oracle2.example.com:20332\n      - http://oracle3.example.com:20332\n      - http://oracle4.example.com:20332\n    NeoFS:\n      Nodes:\n        - st1.storage.fs.neo.org:8080\n        - st2.storage.fs.neo.org:8080\n        - st3.storage.fs.neo.org:8080\n        - st4.storage.fs.neo.org:8080\n    UnlockWallet:\n      Path: \"/path/to/oracle-wallet.json\"\n      Password: \"dontworryaboutthevase\"\n```\n\n## Operation\n\nTo run oracle service on your network, you need to:\n * set oracle node keys in `RoleManagement` contract\n * configure and run an appropriate number of oracle nodes with keys specified in\n   `RoleManagement` contract\n", "doc_id": "f490e9e5-77f0-40eb-b938-3f9e57d662f4", "embedding": null, "doc_hash": "590b65cfe20a194ecadc3dad1d1beb8a70b96177b00b12a642d551fa872cb271", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/oracle.md"}, "node_info": {"start": 0, "end": 2919, "_node_type": "1"}, "relationships": {"1": "8b55b0fb73624beacad6509e70c622514eb5fb50"}}, "__type__": "1"}, "e23408b1-fd9f-4483-b61a-ff60e8cba19b": {"__data__": {"text": "# RPC\n\n## Client\n\nClient is provided as a Go package, so please refer to the\n[relevant godocs page](https://godoc.org/github.com/nspcc-dev/neo-go/pkg/rpcclient).\n\n## Server\n\nThe server is written to support as much of the [JSON-RPC 2.0 Spec](http://www.jsonrpc.org/specification) as possible. The server is run as part of the node currently.\n\n### Example call\n\nAn example would be viewing the version of the node:\n\n```bash\n$ curl -X POST -d '{\"jsonrpc\": \"2.0\", \"method\": \"getversion\", \"params\": [], \"id\": 1}' http://localhost:20332\n```\n\nwhich would yield the response:\n\n```json\n{\n  \"result\" : {\n    \"useragent\" : \"/NEO-GO:0.97.2/\",\n    \"tcpport\" : 10333,\n    \"network\" : 860833102,\n    \"nonce\" : 105745208\n  },\n  \"jsonrpc\" : \"2.0\",\n  \"id\" : 1\n}\n```\n### Supported methods\n\n| Method  |\n| ------- |\n| `calculatenetworkfee` |\n| `findstates` |\n| `findstorage` |\n| `getapplicationlog` |\n| `getbestblockhash` |\n| `getblock` |\n| `getblockcount` |\n| `getblockhash` |\n| `getblockheader` |\n| `getblockheadercount` |\n| `getcandidates` |\n| `getcommittee` |\n| `getconnectioncount` |\n| `getcontractstate` |\n| `getnativecontracts` |\n| `getnep11balances` |\n| `getnep11properties` |\n| `getnep11transfers` |\n| `getnep17balances` |\n| `getnep17transfers` |\n| `getnextblockvalidators` |\n| `getpeers` |\n| `getproof` |\n| `getrawmempool` |\n| `getrawtransaction` |\n| `getstate` |\n| `getstateheight` |\n| `getstateroot` |\n| `getstorage` |\n| `gettransactionheight` |\n| `getunclaimedgas` |\n| `getversion` |\n| `invokecontractverify` |\n| `invokefunction` |\n| `invokescript` |\n| `sendrawtransaction` |\n| `submitblock` |\n| `submitoracleresponse` |\n| `terminatesession` |\n| `traverseiterator` |\n| `validateaddress` |\n| `verifyproof` |\n\n#### Implementation notices\n\n##### JSON representation of enumerations\n\nC# implementation contains a number of enumerations and while it outputs them\ninto JSON as comma-separated strings (or just strings if only one value is\nallowed for this type) it accepts pure numbers for input (see #2563 for\nexample). NeoGo currently doesn't support this behavior. This affects the\nfollowing data types:\n * transaction attribute type\n * oracle response code\n * transaction witness scope\n * rule witness action\n * condition rule witness type\n * function call flag\n * function call parameter type\n * execution trigger type\n * stack item type\n\nAny call that takes any of these types for input in JSON format is affected.\n\n##### Response error codes\n\nNeoGo currently uses a different set of error codes in comparison to C# implementation, see \n[proposal](https://github.com/neo-project/proposals/pull/156).\nNeoGo retains certain deprecated error codes, which will be removed once \nall nodes adopt the new error standard.\n\n##### `calculatenetworkfee`\n\nNeoGo tries to cover more cases with its calculatenetworkfee implementation,\nwhereas C# node support only standard signature contracts and deployed\ncontracts that can execute", "doc_id": "e23408b1-fd9f-4483-b61a-ff60e8cba19b", "embedding": null, "doc_hash": "44fd98544f5e04ec05ee95db3c380eaf30515098d1e178fa42253421036528d8", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md"}, "node_info": {"start": 0, "end": 2911, "_node_type": "1"}, "relationships": {"1": "068c55c5e55e9108498dfb5aa1e32096d35386fe", "3": "813cc01e-a522-46d6-a807-b3191ee5aa0a"}}, "__type__": "1"}, "813cc01e-a522-46d6-a807-b3191ee5aa0a": {"__data__": {"text": "C# node support only standard signature contracts and deployed\ncontracts that can execute `verify` successfully on incomplete (not yet signed\nproperly) transaction, NeoGo also works with deployed contracts that fail at\nthis stage and executes non-standard contracts (that can fail\ntoo). It's ignoring the result of any verification script (since the method\ncalculates fee and doesn't care about transaction validity). Invocation script\nis used as is when provided, but absent it the system will try to infer one\nbased on the `verify` method signature (pushing dummy signatures or\nhashes). If signature has some types which contents can't be adequately\nguessed (arrays, maps, interop, void) they're ignored. See\nneo-project/neo#2805 as well.\n\n##### `invokefunction`, `invokescript`\n\nneo-go implementation of `invokefunction` does not return `tx`\nfield in the answer because that requires signing the transaction with some\nkey in the server, which doesn't fit the model of our node-client interactions.\nIf this signature is lacking, the transaction is almost useless, so there is no point\nin returning it.\n\nIt's possible to use `invokefunction` not only with a contract scripthash, but also \nwith a contract name (for native contracts) or a contract ID (for all contracts). This\nfeature is not supported by the C# node.\n\nIf iterator is present on stack after function or script invocation then, depending\non `SessionEnable` RPC-server setting, iterator either will be marshalled as iterator\nID (corresponds to `SessionEnabled: true`) or as a set of traversed iterator values\nup to `DefaultMaxIteratorResultItems` packed into array (corresponds to\n`SessionEnabled: false`).\n\n##### `getcontractstate`\n\nIt's possible to get non-native contract state by its ID, unlike with C# node where\nit only works for native contracts.\n\n##### `getrawtransaction`\n\nVM state is included into verbose response along with other transaction fields if\nthe transaction is already on chain.\n\n##### `getstateroot`\n\nThis method is able to accept state root hash instead of index, unlike the C# node\nwhere only index is accepted.\n\n##### `getstorage`\n\nThis method doesn't work for the Ledger contract, you can get data via regular\n`getblock` and `getrawtransaction` calls. This method is able to get storage of\na native contract by its name (case-insensitive), unlike the C# node where\nit only possible for index or hash.\n\n##### `getnep11balances` and `getnep17balances`\nneo-go implementation of `getnep11balances` and `getnep17balances` does not\nperform tracking of NEP-11 and NEP-17 balances for each account as it is done\nin the C# node. Instead, a neo-go node maintains a list of standard-compliant\ncontracts, i.e. those contracts that have `NEP-11` or `NEP-17` declared in the\nsupported standards section of the manifest. Each time balances are queried,\nthe neo-go node asks every NEP-11/NEP-17 contract for the account balance by\ninvoking `balanceOf` method with the corresponding args. Invocation GAS limit\nis set to be 3 GAS. All non-zero balances are included in the RPC call result.\n\nThus, if a token contract doesn't have proper standard declared in the list of\nsupported standards but emits compliant NEP-11/NEP-17 `Transfer`\nnotifications, the token balance won't be shown in the list of balances\nreturned by the neo-go node (unlike the C# node behavior). However, transfer\nlogs of such tokens are still available via respective `getnepXXtransfers` RPC\ncalls.\n\nThe behavior of the `LastUpdatedBlock` tracking for archival nodes as far as for\ngoverning token balances matches the C# node's", "doc_id": "813cc01e-a522-46d6-a807-b3191ee5aa0a", "embedding": null, "doc_hash": "dea7af6fb83e6e7abd23b814ada268760df5a1f826237baf49c17058b3a87018", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md"}, "node_info": {"start": 2834, "end": 6405, "_node_type": "1"}, "relationships": {"1": "068c55c5e55e9108498dfb5aa1e32096d35386fe", "2": "e23408b1-fd9f-4483-b61a-ff60e8cba19b", "3": "be0123b0-1ccd-4d48-9598-c05be12101c7"}}, "__type__": "1"}, "be0123b0-1ccd-4d48-9598-c05be12101c7": {"__data__": {"text": "nodes as far as for\ngoverning token balances matches the C# node's one. For non-archival nodes and\nother NEP-11/NEP-17 tokens, if transfer's `LastUpdatedBlock` is lower than the\nlatest state synchronization point P the node working against,\n`LastUpdatedBlock` equals P. For NEP-11 NFTs `LastUpdatedBlock` is equal for\nall tokens of the same asset.\n\n##### `getversion`\n\nNeoGo can return additional fields in the `protocol` object depending on the\nextensions enabled. Specifically that's `p2psigextensions` and\n`staterootinheader` booleans and `committeehistory` and `validatorshistory`\nobjects (that are effectively maps from stringified integers to other\nintegers. These fields are only returned when corresponding settings are\nenabled in the server's protocol configuration.\n\n##### `getnep11transfers` and `getnep17transfers`\n`transfernotifyindex` is not tracked by NeoGo, thus this field is always zero.\n\n##### `traverseiterator` and `terminatesession`\n\nNeoGo returns an error when it is unable to find a session or iterator, unlike \nthe error-free C# response that provides a default result.\n\n##### `verifyProof`\n\nNeoGo can generate an error in response to an invalid proof, unlike\nthe error-free C# implementation.\n\n### Unsupported methods\n\nMethods listed below are not going to be supported for various reasons\nand we're not accepting issues related to them.\n\n| Method  | Reason |\n| ------- | ------------|\n| `closewallet` | Doesn't fit neo-go wallet model |\n| `dumpprivkey` | Shouldn't exist for security reasons, see `closewallet` comment also |\n| `getnewaddress` | See `closewallet` comment, use CLI to do that |\n| `getwalletbalance` | See `closewallet` comment, use `getnep17balances` for that |\n| `getwalletunclaimedgas` | See `closewallet` comment, use `getunclaimedgas` for that |\n| `importprivkey` | Not applicable to neo-go, see `closewallet` comment |\n| `listaddress` | Not applicable to neo-go, see `closewallet` comment |\n| `listplugins` | neo-go doesn't have any plugins, so it makes no sense |\n| `openwallet` | Doesn't fit neo-go wallet model |\n| `sendfrom` | Not applicable to neo-go, see `openwallet` comment |\n| `sendmany` | Not applicable to neo-go, see `openwallet` comment |\n| `sendtoaddress` | Not applicable to neo-go, see `claimgas` comment |\n\n### Extensions\n\nSome additional extensions are implemented as a part of this RPC server.\n\n#### `getblocksysfee` call\n\nThis method returns cumulative system fee for all transactions included in a\nblock. It can be removed in future versions, but at the moment you can use it\nto see how much GAS is burned with a particular block (because system fees are\nburned).\n\n#### Historic calls\n\nA set of `*historic` extension methods provide the ability of interacting with\n*historical* chain state including invoking contract methods, running scripts and\nretrieving contract storage items. It means that the contracts' storage state has\nall its values got from MPT with the specified stateroot from past (or, which is\nthe same, with the stateroot of the block of the specified height). All\noperations related to the contract storage will be performed using this past\ncontracts' storage state and using interop context (if required by the RPC\nhandler) with a block which is next to the block with the specified height.\n\nAny historical RPC call needs the historical chain state to be presented in the\nnode storage, thus if the node keeps only latest MPT state the historical call\ncan not be handled properly", "doc_id": "be0123b0-1ccd-4d48-9598-c05be12101c7", "embedding": null, "doc_hash": "5f290ace64253d48f6c272811be64819e8048a08458b61ebd9f05cf97bc24ce7", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md"}, "node_info": {"start": 6428, "end": 9894, "_node_type": "1"}, "relationships": {"1": "068c55c5e55e9108498dfb5aa1e32096d35386fe", "2": "813cc01e-a522-46d6-a807-b3191ee5aa0a", "3": "66d93703-7bf6-4f70-9bc8-51e9869bfda4"}}, "__type__": "1"}, "66d93703-7bf6-4f70-9bc8-51e9869bfda4": {"__data__": {"text": "node keeps only latest MPT state the historical call\ncan not be handled properly and\n[neorpc.ErrUnsupportedState](https://github.com/nspcc-dev/neo-go/blob/87e4b6beaafa3c180184cbbe88ba143378c5024c/pkg/neorpc/errors.go#L134)\nis returned in this case. The historical calls only guaranteed to correctly work\non archival node that stores all MPT data. If a node keeps the number of latest\nstates and has the GC on (this setting corresponds to the\n`RemoveUntraceableBlocks` set to `true`), then the behaviour of historical RPC\ncall is undefined. GC can always kick some data out of the storage while the\nhistorical call is executing, thus keep in mind that the call can be processed\nwith `RemoveUntraceableBlocks` only with limitations on available data.\n\n##### `invokecontractverifyhistoric`, `invokefunctionhistoric` and `invokescripthistoric` calls\n\nThese methods provide the ability of *historical* calls and accept block hash or\nblock index or stateroot hash as the first parameter and the list of parameters\nthat is the same as of `invokecontractverify`, `invokefunction` and\n`invokescript` correspondingly. The historical call assumes that the contracts'\nstorage state has all its values got from MPT with the specified stateroot (or,\nwhich is the same, with the stateroot of the block of the specified height) and\nthe transaction will be invoked using interop context with block which is next to\nthe block with the specified height. This allows to perform test invocation using\nthe specified past chain state. These methods may be useful for debugging\npurposes.\n\n##### `getstoragehistoric` and `findstoragehistoric` calls\n\nThese methods provide the ability of retrieving *historical* contract storage\nitems and accept stateroot hash as the first parameter and the list of parameters\nthat is the same as of `getstorage` and `findstorage` correspondingly. The\nhistorical storage items retrieval process assume that the contracts' storage\nstate has all its values got from MPT with the specified stateroot. This allows\nto track the contract storage scheme using the specified past chain state. These\nmethods may be useful for debugging purposes.\n\n#### P2PNotary extensions\n\nThe following P2PNotary extensions can be used on P2P Notary enabled networks\nonly.\n\n##### `getrawnotarypool` call\n\n`getrawnotarypool` method provides the ability to retrieve the content of the \nRPC node's notary pool (a map from main transaction hashes to the corresponding\nfallback transaction hashes for currently processing P2PNotaryRequest payloads).\nYou can use the `getrawnotarytransaction` method to iterate through\nthe results of `getrawnotarypool`, retrieve main/fallback transactions,\ncheck their contents and act accordingly.\n\n##### `getrawnotarytransaction` call\n\nThe `getrawnotarytransaction` method takes a transaction hash and aims to locate\nthe corresponding transaction in the P2PNotaryRequest pool. It performs\nthis search across all the verified main and fallback transactions.\n\n##### `submitnotaryrequest` call\n\nThis method can be used on P2P Notary enabled networks to submit new notary\npayloads to be relayed from RPC to P2P.\n\n#### Limits and paging for getnep11transfers and getnep17transfers\n\n`getnep11transfers` and `getnep17transfers` RPC calls never return more than\n1000 results for one request (within the specified time frame). You can pass your\nown limit via an additional parameter and then use paging to request the next\nbatch of transfers.\n\nAn example of requesting 10 events for address NbTiM6h8r99kpRtb428XcsUk1TzKed2gTc\nwithin 0-1600094189000", "doc_id": "66d93703-7bf6-4f70-9bc8-51e9869bfda4", "embedding": null, "doc_hash": "7839f950d38b5eaaabbed98281836415375a512a9a26145b244cb0d602b0b733", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md"}, "node_info": {"start": 9883, "end": 13436, "_node_type": "1"}, "relationships": {"1": "068c55c5e55e9108498dfb5aa1e32096d35386fe", "2": "be0123b0-1ccd-4d48-9598-c05be12101c7", "3": "b6ada1ee-b857-40a7-bc2f-c759494f8f01"}}, "__type__": "1"}, "b6ada1ee-b857-40a7-bc2f-c759494f8f01": {"__data__": {"text": "0-1600094189000 timestamps:\n\n```json\n{ \"jsonrpc\": \"2.0\", \"id\": 5, \"method\": \"getnep17transfers\", \"params\":\n[\"NbTiM6h8r99kpRtb428XcsUk1TzKed2gTc\", 0, 1600094189000, 10] }\n```\n\nGet the next 10 transfers for the same account within the same time frame:\n\n```json\n{ \"jsonrpc\": \"2.0\", \"id\": 5, \"method\": \"getnep17transfers\", \"params\":\n[\"NbTiM6h8r99kpRtb428XcsUk1TzKed2gTc\", 0, 1600094189000, 10, 1] }\n```\n\n#### Websocket server\n\nThis server accepts websocket connections on `ws://$BASE_URL/ws` address. You\ncan use it to perform regular RPC calls over websockets (it's supposed to be a\nlittle faster than going regular HTTP route) and you can also use it for\nadditional functionality provided only via websockets (like notifications).\n\n#### Notification subsystem\n\nNotification subsystem consists of two additional RPC methods (`subscribe` and\n`unsubscribe` working only over websocket connection) that allow to subscribe\nto various blockchain events (with simple event filtering) and receive them on\nthe client as JSON-RPC notifications. More details on that are written in the\n[notifications specification](notifications.md).\n\n## Reference\n\n* [JSON-RPC 2.0 Specification](http://www.jsonrpc.org/specification)\n* [Neo JSON-RPC 2.0 docs](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html)\n", "doc_id": "b6ada1ee-b857-40a7-bc2f-c759494f8f01", "embedding": null, "doc_hash": "4a4936a37fae63d42591c730f8f013dcfee8362c5474104ad555a3aad56144a8", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md"}, "node_info": {"start": 13489, "end": 14792, "_node_type": "1"}, "relationships": {"1": "068c55c5e55e9108498dfb5aa1e32096d35386fe", "2": "66d93703-7bf6-4f70-9bc8-51e9869bfda4"}}, "__type__": "1"}, "7dfb607d-10fa-4f11-9663-ec03be69baae": {"__data__": {"text": "# NeoGo state validation\n\nNeoGo supports state validation using N3 stateroots and can also act as state\nvalidator (run state validation service).\n\nAll NeoGo nodes always calculate MPT root hash for data stored by contracts.\nUnlike in Neo Legacy, this behavior can't be turned off. They also process\nstateroot messages broadcasted through the network and save validated\nsignatures from them if the state root hash specified there matches the one signed\nby validators (or shouts loud in the log if it doesn't because it should be\nthe same).\n\n## State validation service\n\nThe service is configured as `StateRoot` subsection of\n`ApplicationConfiguration` section in your node config.\n\nParameters:\n * `Enabled`: boolean value, enables/disables the service, `true` for service\n   to be enabled\n * `UnlockWallet`: service's wallet configuration:\n     - `Path`: path to NEP-6 wallet.\n     - `Password`: password for the account to be used by state validation\n       node.\n\n### Example\n\n```\n  StateRoot:\n    Enabled: true\n    UnlockWallet:\n      Path: \"/path/to/stateroot.wallet.json\"\n      Password: \"knowyouare\"\n```\n\n### Operation\n\nTo run state validation service on your network you need to:\n * set state validation node keys in `RoleManagement` contract\n * configure and run an appropriate number of state validation nodes with the keys\n   specified in `RoleManagement` contract\n\n\n## StateRootInHeader option\n\nNeoGo also supports protocol extension to include state root hashes right into\nheader blocks. It's not compatible with regular Neo N3 state validation\nservice and it's not compatible with public Neo N3 networks, but you can use\nit on private networks if needed.\n\nThe option is `StateRootInHeader` and it's specified in\n`ProtocolConfiguration` section, set it to true and run your network with it\n(whole network needs to be configured this way then).\n", "doc_id": "7dfb607d-10fa-4f11-9663-ec03be69baae", "embedding": null, "doc_hash": "9ac442bc6665678973a2594f966b438f46ebd7c16f5868d40339cf09b5a065b1", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/stateroots.md"}, "node_info": {"start": 0, "end": 1855, "_node_type": "1"}, "relationships": {"1": "7930fa385ef54a9514030082df5d2db8f173eeb5"}}, "__type__": "1"}, "f175054a-c70d-4d8a-98d1-2a2c0d630ec0": {"__data__": {"text": "# NEO-GO-VM\n\nA cross platform virtual machine implementation for `NEF` compatible programs. \n\n# Installation\n\nVM is provided as a part of neo-go binary, so usual neo-go build instructions\nare applicable.\n\n# Running the VM\n\nStart the virtual machine:\n\n```\n$ ./bin/neo-go vm\n\n    _   ____________        __________      _    ____  ___\n   / | / / ____/ __ \\      / ____/ __ \\    | |  / /  |/  /\n  /  |/ / __/ / / / /_____/ / __/ / / /____| | / / /|_/ /\n / /|  / /___/ /_/ /_____/ /_/ / /_/ /_____/ |/ / /  / /\n/_/ |_/_____/\\____/      \\____/\\____/      |___/_/  /_/\n\n\nNEO-GO-VM >\n```\n\n# Usage\n\n```\n    _   ____________        __________      _    ____  ___\n   / | / / ____/ __ \\      / ____/ __ \\    | |  / /  |/  /\n  /  |/ / __/ / / / /_____/ / __/ / / /____| | / / /|_/ /\n / /|  / /___/ /_/ /_____/ /_/ / /_/ /_____/ |/ / /  / /\n/_/ |_/_____/\\____/      \\____/\\____/      |___/_/  /_/\n\n\nNEO-GO-VM > help\n\nCommands:\n  aslot           Show arguments slot contents\n  break           Place a breakpoint\n  clear           clear the screen\n  cont            Continue execution of the current loaded script\n  estack          Show evaluation stack contents\n  exit            Exit the VM prompt\n  help            display help\n  ip              Show current instruction\n  istack          Show invocation stack contents\n  loadbase64      Load a base64-encoded script string into the VM\n  loadgo          Compile and load a Go file with the manifest into the VM\n  loadhex         Load a hex-encoded script string into the VM\n  loadnef         Load a NEF-consistent script into the VM\n  lslot           Show local slot contents\n  ops             Dump opcodes of the current loaded program\n  parse           Parse provided argument and convert it into other possible formats\n  run             Execute the current loaded script\n  sslot           Show static slot contents\n  step            Step (n) instruction in the program\n  stepinto        Stepinto instruction to take in the debugger\n  stepout         Stepout instruction to take in the debugger\n  stepover        Stepover instruction to take in the debugger\n\n```\n\nYou can get help for each command and its parameters adding `help` as a\nparameter to the command:\n\n```\nNEO-GO-VM > step help\n\nUsage: step [<n>]\n<n> is optional parameter to specify number of instructions to run, example:\n> step 10\n\n```\n\n## Loading in your script\n\nTo", "doc_id": "f175054a-c70d-4d8a-98d1-2a2c0d630ec0", "embedding": null, "doc_hash": "547f4ace8d42256fd6ecdd7c1c59a32fcca671bb3d297a53bf29b008611b3cea", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/vm.md"}, "node_info": {"start": 0, "end": 2370, "_node_type": "1"}, "relationships": {"1": "d5d215e5145e8f1f87474427a4ba7feb8be06225", "3": "51417d5b-7996-484b-8b77-777b739e6267"}}, "__type__": "1"}, "51417d5b-7996-484b-8b77-777b739e6267": {"__data__": {"text": "example:\n> step 10\n\n```\n\n## Loading in your script\n\nTo load an avm script in NEF format into the VM:\n\n```\nNEO-GO-VM > loadnef ../contract.nef\nREADY: loaded 36 instructions\n```\n\nRun the script:\n\n```\nNEO-GO-VM > run\n[\n    {\n        \"value\": 1,\n        \"type\": \"BigInteger\"\n    }\n]\n```\n\nYou can also directly compile and load `.go` files:\n\n```\nNEO-GO-VM > loadgo ../contract.go\nREADY: loaded 36 instructions\n```\n\nTo make it even more complete, you can directly load hex or base64 strings into the VM:\n\n```\nNEO-GO-VM > loadhex 54c56b006c766b00527ac46c766b00c391640b006203005a616c756662030000616c7566\nREADY: loaded 36 instructions\nNEO-GO-VM > run\n[\n    {\n        \"value\": 10,\n        \"type\": \"BigInteger\"\n    }\n]\n\n```\n\n## Running programs with arguments\nYou can invoke smart contracts with arguments. Take the following ***roll the dice*** smart contract as an example. \n\n```\npackage rollthedice\n\nimport \"github.com/nspcc-dev/neo-go/pkg/interop/runtime\"\n\nfunc RollDice(number int) {\n    if number == 0 {\n        runtime.Log(\"you rolled 0, better luck next time!\")\n    }\n    if number == 1 {\n        runtime.Log(\"you rolled 1, still better then 0!\")\n    }\n    if number == 2 {\n        runtime.Log(\"you rolled 2, coming closer..\") \n    }\n    if number == 3 {\n        runtime.Log(\"Sweet you rolled 3. This dice has only 3 sides o_O\")\n    }\n}\n```\n\nTo invoke this contract we need to specify both the method and the arguments.\n\nThe first parameter (called method or operation) is always of type\nstring. Notice that arguments can have different types. They can be inferred\nautomatically (please refer to the `run` command help), but if you need to\npass a parameter of a specific type you can specify it in `run`'s arguments:\n\n```\nNEO-GO-VM > run rollDice int:1\n```\n\n> The method is always of type string, hence we don't need to specify the type.\n\nTo add more than 1 argument:\n\n```\nNEO-GO-VM > run someMethod int:1 int:2 string:foo string:bar\n```\n\nCurrently supported types:\n- `bool (bool:false and bool:true)`\n- `int (int:1 int:100)`\n- `string (string:foo string:this is a string)` \n\n## Debugging\nThe `neo-go-vm` provides a debugger to inspect your program in-depth.\n\n\n### Stepping through the program\nStep 4 instructions.\n\n```\nNEO-GO-VM > step 4\nat breakpoint 3 (DUPFROMALTSTACK)\nNEO-GO-VM 3 >\n```\n\nUsing just `step` will execute 1 instruction at a time.\n\n```\nNEO-GO-VM 3 > step\nat breakpoint 4 (PUSH0)\nNEO-GO-VM 4 >\n```\n\n### Breakpoints\n\nTo place breakpoints:\n\n```\nNEO-GO-VM > break 10\nbreakpoint added at instruction 10\nNEO-GO-VM > cont\nat breakpoint 10 (SETITEM)\nNEO-GO-VM 10 > cont\n```\n\n## Inspecting", "doc_id": "51417d5b-7996-484b-8b77-777b739e6267", "embedding": null, "doc_hash": "92860457a65cc60e6e2b1eb39fe3613c9682b42a79e9c9321edfe3afc62df92f", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/vm.md"}, "node_info": {"start": 2323, "end": 4917, "_node_type": "1"}, "relationships": {"1": "d5d215e5145e8f1f87474427a4ba7feb8be06225", "2": "f175054a-c70d-4d8a-98d1-2a2c0d630ec0", "3": "c93957ee-48dc-47b7-a84c-2fcba3cd3fb5"}}, "__type__": "1"}, "c93957ee-48dc-47b7-a84c-2fcba3cd3fb5": {"__data__": {"text": "10 > cont\n```\n\n## Inspecting stack\n\nInspecting the evaluation stack:\n\n```\nNEO-GO-VM > estack\n[\n    {\n        \"value\": [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        ],\n        \"type\": \"Array\"\n    },\n    {\n        \"value\": 4,\n        \"type\": \"BigInteger\"\n    }\n]\n```\n\nThere is one more stack that you can inspect.\n- `istack` invocation stack\n\nThere are slots that you can inspect.\n- `aslot` dumps arguments slot contents.\n- `lslot` dumps local slot contents.\n- `sslot` dumps static slot contents.\n\n", "doc_id": "c93957ee-48dc-47b7-a84c-2fcba3cd3fb5", "embedding": null, "doc_hash": "329b4506ff10e03ce49f72b35bd98a3a68b996158d119e45a1629012e6945e1a", "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/vm.md"}, "node_info": {"start": 4937, "end": 5522, "_node_type": "1"}, "relationships": {"1": "d5d215e5145e8f1f87474427a4ba7feb8be06225", "2": "51417d5b-7996-484b-8b77-777b739e6267"}}, "__type__": "1"}, "09de94f5-3ccd-4ddb-bf66-0c03afe935ac": {"__data__": {"text": "NeoFS: public distributed decentralized object storage\nIntroduction\nNeoFS is a distributed, decentralized object storage network developed by Neo SPCC. Built with Neo blockchain integration in mind, NeoFS aims to support the shift away from third-party storage providers, providing users with complete control over their data.\nNodes are organized in peer-to-peer network that takes care of storing and distributing user\u2019s data. Any Neo user may participate in NeoFS network and get paid for providing storage resources to other users or store his data in NeoFS and pay a competitive price for it.\nThe service is designed to work with Neo smart contracts, allowing for truly decentralized applications, and can also be used as a content delivery network. Users can rent out storage in return for Neo GAS tokens or use GAS to store files in the network.\nRepresenting Neo\u2019s commitment to building the future, NeoFS offers unparalleled data storage control to users and developers by bringing together the benefits of decentralization and real-world integration.\nNeoFS ensures user data security and mitigates against malignant nodes by ensuring zero-knowledge data validation through a combination of homomorphic cryptography and game theory models.\nNeoFS is geared for real-world applicationsUnlike many other projects in this area, Neo SPCC is not trying to create a parallel reality in a technological sense. Solving real-world problems requires to use standard protocols and have ability to integrate NeoFS with existing systems. There are protocol adapters, or gateways, that allow accessing NeoFS via standard HTTP or S3 protocols. Users can develop their own gateways to integrate NeoFS with existing systems they are using, such as accounting system, CRM, a corporate backup service etc.\nBasic components and network\nNeoFS network nodes run the same software and talk the same protocol but may have different roles. There are nodes that store data and process user API requests, they are regular storage nodes and form the Outer Ring. There are nodes that take care of network health, perform service tasks such as data audit and payments settlements and form the Inner Ring. There are not many of them and they use dBFT 2.0 consensus algorithm to coordinate their actions.Read more\nKey benefits and competitive advantages\nInfinitely scalable due to Network Map and Data Placement\nNeoFS is infinitely horizontaly scalable due to its architecture features such as novel Data Audit algorithm, Data Placement and Network Map.\nNetwork Map is a multi-dimensional graph where nodes have attributes and are grouped by those attributes and their values. This allows using a special data placement function to find nodes that would store an object, when putting or getting it to/from NeoFS network without any network requests.\nThis approach allows not having any centralized meta-data storage keeping object\u2019s locations and not re-balancing data with every joining or leaving storage node.\nDesigned to work reliably in chaotic environment\nThe bigger the NeoFS network grows, the more stable it becomes, because the chance of network is changed would affect the particular container is decreasing with the increasing number of nodes in the network. It means, unlike in DHT approach, the amount of needed data migration decreases with the network growth.\nNeoFS puts the control over data in users\u2019 hands\nSince anyone may participate in NeoFS network, reliable mechanisms to ensure users' data consistency and availability in a chaotic environment are needed.\nTo achieve this goal, the combination of homomorphic hashing for data integrity checks and game theory models, to create a situation where all nodes behave correctly and the data is stored safely, is used.\nA decentralized nature of NeoFS eliminates not only centralized points of failure but also centralized points of control. In NeoFS, only users have full control over their data, where, how it is stored, and who can get access to it.\nWhere\nyour data is stored\nHow\nyour data is stored\nWho\ncan get access to your data\nIntegrated with popular protocols such as HTTP and S3\nNeoFS is demonstrating", "doc_id": "09de94f5-3ccd-4ddb-bf66-0c03afe935ac", "embedding": null, "doc_hash": "74017f52931ade8cd5e9420116a4fa980dc87da748b9f4a1e0b95303d9d26d90", "extra_info": {"file_path": "https://fs.neo.org"}, "node_info": {"start": 0, "end": 4151, "_node_type": "1"}, "relationships": {"1": "6d86abe1-c3e7-4a2f-98fd-5fd754d13b14", "3": "da1b6b8b-c1ae-438a-8011-2bb99cc7377c"}}, "__type__": "1"}, "da1b6b8b-c1ae-438a-8011-2bb99cc7377c": {"__data__": {"text": "with popular protocols such as HTTP and S3\nNeoFS is demonstrating NEO\u2019s commitment to practical idealism as well as its vision of an integrated, user-centric Internet of the future.\nThrough gateways (protocol adapters), users can easily access NeoFS through industry-standard protocols such as HTTP or S3.\nMoreover, the open nature of NeoFS enables users to freely write his or her own gates to integrate with third-party system for seamless on and off-chain integration as well as unmatched accessibility.\nZero-knowledge data validation based on homomorphic cryptography\nIn case of a large number of objects in a distributed network of untrusted nodes with an ever-changing topology, classical approach with comparing objects' hashes with some sample in a central meta-data storage is not efficient. This causes unacceptable overhead.\nTo solve this problem, NeoFS uses homomorphic hashing. It is a special type of hashing algorithms that allows computing the hash of a composite block from the hashes of individual blocks.Read more\nDirectly accessible from smart contract code\nThis feature becomes available in Neo 3.0 release with introduction of Oracles Protocol. Smart contracts will be able to issue GET and PUT requests for fixed-size objects.\nNeo GAS is used for payments\nNeoFS uses GAS for all payments. To be able to pay for storage services in NeoFS, the one has to deposit some GAS to NeoFS smart contract address. This event is monitored by Inner Ring nodes and reflected in user's account balance internally in NeoFS.\nNeoFS Inner Ring nodes keep track of all NeoFS accounts and use dBFT 2.0 consensus algorithm, the same as in Neo blockchain, agree on users' mutual settlements, reward distribution over node owners and other payment-related procedures.Read more\nIncentive model based on market principles\nIncentive model and pricing follow a free market principle. Each node declares how much it wants to receive as a reward for data storage services for the upcoming epoch. Placement function considers the declared price and prefers nodes with better prices. However, since nodes in Network Map declare key-value attributes describing their parameters, such as geographical location, type of storage, capacity and other things also used in Storage Policy, it leaves room for nodes that want higher price, better or unique services to still get into the placement function result.\nIn short, if node is too greedy, it does not get users and rewards. To have higher prices the node needs to satisfy market demand or provide something unique.\nAs it is shown on the figure below, node needs to keep price \u201cin the market\u201d to get the highest profit. This should guarantee a competitive price for data storage in NeoFS.\nRuns on commodity hardware\nNeoFS is designed to work on commodity hardware without any special hardware requirements. This allows users to quickly replace failed system components with what can be bought in a local computer store.", "doc_id": "da1b6b8b-c1ae-438a-8011-2bb99cc7377c", "embedding": null, "doc_hash": "c2d9b52f86ab159d57d9c7068a099efa529e9463ebc86f045cc60121e97af38a", "extra_info": {"file_path": "https://fs.neo.org"}, "node_info": {"start": 4086, "end": 7044, "_node_type": "1"}, "relationships": {"1": "6d86abe1-c3e7-4a2f-98fd-5fd754d13b14", "2": "09de94f5-3ccd-4ddb-bf66-0c03afe935ac"}}, "__type__": "1"}, "70fae9e4-62e9-4629-a9d2-40cf1e08c6ce": {"__data__": {"text": "Network\nNeoFS network nodes run the same software and talk the same protocol but may have different roles. There are nodes that store data and process user API requests, they are regular storage nodes that form the Outer Ring. There are nodes that take care of network health, perform service tasks, such as data audit and payments settlements, and form the Inner Ring. There are not many of them and they use dBFT 2.0 consensus algorithm to coordinate their actions.\nInner Ring nodes are connected to Neo Blockchain. They are constantly monitoring events coming from the blockchain to synchronize their state and the state of NeoFS smart contract that manages users' money deposits and information about Inner Ring nodes themselves.\nSince the Inner Ring is a critical infrastructure part, not every node may get this role. The node willing to join the Inner Ring should be registered in NeoFS smart contract in Neo Blockchain and pay some security deposit that is lost in case of the node starts to behave badly.\nIn addition, in the same way as Neo consensus nodes, NeoFS Inner Ring nodes try to achieve maximal possible geographical, political and network decentralization.\nThe main use case for NeoFS is DApps's data storage and content distribution. Nowadays most DApps do not store their assets in a decentralized fashion that makes them not really distributed applications. In NeoFS, DApps can upload content and distribute it to clients via protocol gates using standard HTTPS protocol or, for example, using NeoFS API from mobile application.\nDApps can access NeoFS directly from smart contract code. For instance, DApp's smart contract can generate some data and put it into NeoFS rather then storing it in the blockchain. Storing data off-chain is significantly cheaper and easier to deliver to client.\nNetwork Map\nInner Ring nodes monitor the state of NeoFS storage nodes. Using this information, they maintain up-to-date Network Map. It is a multi-dimensional graph where nodes have attributes and are grouped by those attributes and their values. This allows using a special data placement function to find nodes that would store an object when putting or getting it in/from NeoFS network.\nThis approach allows not having any centralized meta-data storage keeping object's locations and not re-balancing data with every joining or leaving storage node, as it happens in DHT-based systems.\nWork reliably in chaotic environment\nAs files are organized in directories in file system, objects are organized in containers in NeoFS.\nEach container is served by a subset of storage nodes that satisfy storage policy defined for this particular container by the user. To calculate that nodes\u2019 subset, storage policy filters are applied to Network Map. The resulting set of nodes is responsible for making sure that storage policy is satisfied and data is not corrupted. In case of success, they share users' payment for data storage. One storage node may serve many containers, so if it behaves correctly small shares from each container summ-up in a significant reward. The same is true for the losses in case of container nodes' misbehavior. This motivates nodes to keep an eye on other container members and properly perform all required replication, migration and data recovery processes.\nAnother non-obvious benefit of this approach is the bigger NeoFS network grows, the more stable it becomes, because the chance of network is changed would affect a particular container is decreasing with the increasing number of nodes in the network. It means, unlike in DHT approach, the amount of needed data migration decreases with network growth.\nNeoFS Blockchain Components\nThe main smart contracts that provide the input and output of GAS tokens to the NeoFS account and the list of nodes of Inner Ring, are on the Neo Mainnet. NeoFS internal banking and data audit results are on the sidechain. This allows not to load a large number of NeoFS internal transactions to the Neo blockchain network. This approach also allows us to achieve complete anonymity of the Inner Ring nodes and not to disclose them to other network nodes.\nThe main NeoFS network contract is deployed", "doc_id": "70fae9e4-62e9-4629-a9d2-40cf1e08c6ce", "embedding": null, "doc_hash": "5222e3a25f1919a0d682c799fd0931d67e1cb2cec7ad815daff7ff2fd6fe9e6c", "extra_info": {"file_path": "https://fs.neo.org/network/"}, "node_info": {"start": 0, "end": 4176, "_node_type": "1"}, "relationships": {"1": "c984102b-96b8-4d63-96d0-50e3593207de", "3": "45f3f08b-6bd9-4539-8ec9-e64743eed1ea"}}, "__type__": "1"}, "45f3f08b-6bd9-4539-8ec9-e64743eed1ea": {"__data__": {"text": "them to other network nodes.\nThe main NeoFS network contract is deployed in the Neo main network. The roles of this contract are to maintain the list of the Inner Ring nodes, maintain the list of nodes-candidates for Inner Ring, accept Neo GAS input assets from users, and withdraw Neo GAS to users.\nService contracts of the NeoFS network such as Network Map contract, Container contract, Balance contract, Data Audit contract, and Reputation contract are on the NeoFS Neo sidechain.\nThe Network Map contract is the main NeoFS network contract in the NeoFS Neo sidechain. The roles of this contract are to provide to the sidechain contracts a list of the Inner Ring nodes, which is initially stored in the Neo main network blockchain in the NeoFS contract, to manage the list of Storage nodes, maintain the Network Map, to take snapshots of Network Map when a new epoch sets, and store the epoch counter, providing an interface for changing the epoch to the Inner Ring nodes. Epoch is a real-time period during which a permanent Network Map exists.\nThe Container contact is deployed in the NeoFS Neo sidechain. The roles of this contract are to maintain a list of containers and provide such operations as to get a specific container by its identifier, to get a list of all user containers, and to get a list of all containers.\nThe Balance contact, being in the NeoFS Neo sidechain, provides the internal NeoFS banking performing a large number of fast microtransactions based on the results of the NeoFS network.\nThe Reputation contract\u2019s role is maintaining reputation ratings of Storage nodes. This contract is also deployed in the NeoFS Neo sidechain to process a lot of invocations to process the view of Storage nodes' trust.\nNeo main network chain and NeoFS Neo sidechain do not interact directly. The bridge between the two chains is Inner Ring which subscribes to events from both chains. The Inner Ring nodes are responsible for servicing the Neofs network, monitoring Storage nodes, and data integrity of the storage network.\nThe Inner Ring nodes are connected to Neo Blockchain. They are constantly monitoring events coming from the blockchain to synchronize their state, the state of the NeoFS smart contract that manages users' GAS deposits and information about the Inner Ring nodes themselves, and NeoFS Neo sidechain smart contracts.\nProtocol Gates\nTo interact with existing systems using standard protocols, NeoFS has protocol gates. Gates are mainly maintained by users and not a part of NeoFS network. From the start, HTTP protocol gate is provided, that allows accessing data from NeoFS using regular browser. Further, AWS S3 and OpenStack Object Storage gates will be provided to allow users to make more sophisticated integrations. Technically one may easily develop own gate by using NeoFS protocol libraries.", "doc_id": "45f3f08b-6bd9-4539-8ec9-e64743eed1ea", "embedding": null, "doc_hash": "cdb96bfbc33c11c0020e92ab0b5fa547fb8c4dc8c7d3e76e0f82149238bdc535", "extra_info": {"file_path": "https://fs.neo.org/network/"}, "node_info": {"start": 4104, "end": 6937, "_node_type": "1"}, "relationships": {"1": "c984102b-96b8-4d63-96d0-50e3593207de", "2": "70fae9e4-62e9-4629-a9d2-40cf1e08c6ce"}}, "__type__": "1"}, "bd51c102-fded-40e1-ada1-a4e3b2531b35": {"__data__": {"text": "Data Storage\nTo implement data storage and processing, the NeoFS system operates with objects. An object is a structure intended to be placed on a data storage device and transmitted over a network. This structure consists of a user\u2019s data block of a finite length and a set of headers containing information about the data and the object itself. The size of the data in the object can be zero.\nObjects may have links to other objects. User data may be split into several linked objects to solve scaling and balancing problems.\nThere are fixed headers containing the version of the object format, its total length, unique identifier, the optional links to other objects, the signature of a data publisher, type identifier of the next extended headers, and identifiers for internal NeoFS processes.\nThe extended headers have a similar structure. User data attached to the object is placed after headers.\nThe object in the system is immutable. The NeoFS core works only with a fixed object header and treats the data as an immutable sequence of bytes without interacting with the content. Extended headers store information about user data properties, encryption algorithms, checksum values, cryptographic signatures, identifiers, etc. Extended headers are processed in the order of appearance by separate data processing and transformation modules. This allows organizing complex schemes of working with information by delegating the processing and conversion of user data to higher-level modules of the system.\nThe user can define a placement rule and ACL to an owned container. That placement rule is applied to all stored objects. The placement rule consists of a set of SELECT() or FILTER() operations applied to Network Map. The result of these operations is a subgraph of Network Map where data can be placed. The SELECT() operation is applied to a tree. The operation inputs are a replication factor at this level and a bucket type. Multiple operations in the placement rule are put into order and each subsequent SELECT(r, type) operation is applied to the result of the previous one. The FILTER() operation is applied to a graph. The operation inputs are a bucket type, value, and comparison operation. For text values, operations eq, ne are available. For numerical values, gt, ge, lt, and le are additionally available. A set of operations on the graph (in the placement rule) can be combined by using AND, OR, NOT operations. The placement function is executed recursively with the operation of the next step being applied for all the nodes retrieved at the previous step.\nThe user can send a request for storage or get of the object to any node of the NeoFS network which will redirect the request to the nodes satisfying the placement rule of the container to which the object belongs.\nThe NeoFS requests, their structure, and the life cycle are described in the API documentation.\nControl over the object\u2019s integrity in the container is assigned to Storage nodes of this container. They perform data replication, garbage collection, recovery, and migration. The basis for these actions is the economic model of a collective reward of the container if all data is stored in accordance with the storage policy, or collective fine if it is not.\nIn addition to monitoring the data integrity, Storage nodes also control access rights to data. NeoFS has a flexible ACL system. It contains the basic ACL written to the container structure, bearer token, and the extended ACL, if it is allowed in the basic ACL, in the container object. The basic ACL is written into the container structure and, as a result, is created together with the container and cannot be changed. Validation of the basic ACL has to be cheap and cover the majority of user needs. In the container structure, this is a 32-bit integer storing a bit field. The extended ACL is stored in the object in the container. It cannot be changed but a new object can be added with a new version which will logically replace previously created objects. In the extended object headers, it is indicated that this is an object of type ExtendedACL and its version. the objects of type ExtendedACL can only be created by the owner of the container because this follows logically from the immutability of the underlying ACL.\nIf the user, when creating the container, has set the", "doc_id": "bd51c102-fded-40e1-ada1-a4e3b2531b35", "embedding": null, "doc_hash": "ec87be9a8c7b95fe3c0bb210fa6d5c7a08d119c793f2fb0315d7c0ed5e253ba3", "extra_info": {"file_path": "https://fs.neo.org/data/"}, "node_info": {"start": 0, "end": 4338, "_node_type": "1"}, "relationships": {"1": "8d5c364e-bbea-4164-be1f-a697d3b1bc85", "3": "fed1452f-1123-4670-a23b-e1cf37aadedd"}}, "__type__": "1"}, "fed1452f-1123-4670-a23b-e1cf37aadedd": {"__data__": {"text": "the underlying ACL.\nIf the user, when creating the container, has set the possibility of using the extended ACL, the ExtendedACL object is automatically created with the zero version and an empty access table in the payload section. If an error occurred while trying to get the object with extended ACLs then the authorization check is considered failed.\nThe Bearer keyword is used to activate authorization checks on the Bearer token transferred in the request headers. This is a table of the same type as the Extended ACL but with fields indicating the time of the token\u2019s validity (with which epoch or height) and a chain of key signatures that goes back to the owner of the container. The Bearer token is processed in the same way as the Extended ACL. If the Bearer token is present in the request then it cancels the check on the Extended ACL.", "doc_id": "fed1452f-1123-4670-a23b-e1cf37aadedd", "embedding": null, "doc_hash": "0a41e4e4cee5a0d0b0e1a113ff8a98d43a5242b9d92920c1b9c6bda7675d72b7", "extra_info": {"file_path": "https://fs.neo.org/data/"}, "node_info": {"start": 4265, "end": 5113, "_node_type": "1"}, "relationships": {"1": "8d5c364e-bbea-4164-be1f-a697d3b1bc85", "2": "bd51c102-fded-40e1-ada1-a4e3b2531b35"}}, "__type__": "1"}, "05e83d09-26b8-4c39-9ce3-341200f7df98": {"__data__": {"text": "Zero-knowledge and Homomorphic hashing\nIn case of a large number of objects in a distributed network of untrusted nodes with an ever-changing topology, classical approach with comparing objects' hashes with some sample in a central meta-data storage is not efficient. This causes unacceptable overhead.\nTo solve this problem, NeoFS uses Homomorphic hashing. It is a special type of hashing algorithms that allows computing the hash of a composite block from the hashes of individual blocks.\nFor integrity checks, NeoFS calculates a composite homomorphic hash of all the objects in a group under control and puts it into a structure called Storage Group. During integrity checks, NeoFS nodes can ensure that hashes of stored objects are correct and a part of that initially created composite hash. This can be done without moving object\u2019s data over the network and no matter how many objects are in a storage group, the hash size is the same.\nData Audit\nHow does NeoFS ensure data is not lost or corrupted? Each epoch, Inner Ring nodes perform Data Audit. It is a two-stage game in terms of game theory. At the first stage, nodes in a selected container are asked to collectively reconstruct a list of homomorphic hashes that would form a composite hash stored in storage group. By doing this, nodes demonstrate that they have all objects and are able to provide hash of those objects. The provided list of hashes can be validated, but at this stage, it is unknown, if some nodes are lying.\nAt the next stage, it is necessary to make sure that nodes are honest and do not fake check results. Inner Ring nodes calculate a set of nodes\u2019 pairs that store the same objects and ask each node to provide thee homomorphic hashes of this object. Ranges are chosen in a way that the hash of a range asked from one node would be the composite hash of ranges asked from another node in that pair. Nodes cannot predict objects or ranges that would be chosen for audit. They cannot even predict a pair node for the game. This stage discovers malicious nodes fast because each node is serving multiple containers and storage groups and participates in many data audit sessions. When node is caught in a lie it will not get any rewards for this epoch. So the price of faking checks and risks is too high and it is easier and cheaper for the node to be honest and behave correctly.\nCombining the fact of nodes being able to reconstruct the storage group\u2019s composite hash and the fact of nodes' honest behavior, the system can consider that data is safely stored, not corrupted and available with a high probability.", "doc_id": "05e83d09-26b8-4c39-9ce3-341200f7df98", "embedding": null, "doc_hash": "d304b4b86ca22ebdb6f04f029ed6df29b1d5c30870c1e434eece710880b189d4", "extra_info": {"file_path": "https://fs.neo.org/audit/"}, "node_info": {"start": 0, "end": 2598, "_node_type": "1"}, "relationships": {"1": "5817b1e0-4f1b-4eb0-8042-50cbef220bab"}}, "__type__": "1"}, "b4c39f2f-0273-41af-ad16-be00c84ea5d4": {"__data__": {"text": "Storage Price Calculator\nStoring 1 GB\ncosts 0.00000720 GAS per month\nGAS is used to pay for data storage and depends on the size of the data you store. To calculate the GAS cost per month, use the calculator where you need to select the number of megabytes you want to store.\nIncentive model\nIncentive model and pricing follows a free market principles. Each node declares how much it wants to receive as a reward for data storage services for the upcoming epoch. Placement function considers the declared price and prefers nodes with better prices. However, because nodes in Network Map declare key-value attributes describing their parameters, such as geographical location, type of storage, capacity and other things also used in Storage Policy, it leaves room for nodes that want higher price, better or unique services to still get into the placement function result.\nIn short, if node is too greedy it does not get users and rewards. To achieve higher prices, node needs to satisfy market demand or provide something unique.\nAs it is shown on the figure above, the node needs to keep price \u201cin the market\u201d to get the highest profit. This should guarantee a competitive price for data storage in NeoFS.\nNeo GAS token input\nNeoFS uses Neo GAS for all payments. To be able to pay for storage services in NeoFS, the one has to deposit some GAS to NeoFS smart contract address. This event is monitored by Inner Ring nodes and reflected in user\u2019s account balance internally in NeoFS. NeoFS uses Neo GAS for all payments. To be able to pay for storage services in NeoFS, the one has to deposit some GAS to NeoFS smart contract address. This event is monitored by Inner Ring nodes and reflected in user\u2019s account balance internally in NeoFS.\nNeoFS Inner Ring nodes keep track of all NeoFS accounts and use dBFT 2.0 consensus algorithm, the same as in Neo blockchain, agree on users' mutual settlements, reward distribution over node owners and other payment-related procedures.\nFor instance, someone may own a few storage nodes and provide storage services, but at the same time use NeoFS for storing his or her backups in different geographical locations. In this case, rewards from storage nodes may be used to pay for backups automatically without transactions in Neo Blockchain.\nNeo GAS token withdraw\nIt is possible to withdraw GAS accumulated inside NeoFS to Neo Blokchain address. To do so, the user has to issue withdraw call to NeoFS. Inner Ring nodes lock the desired amount and issue a cheque signed by all Inner Ring nodes. Then the user has to invoke NeoFS smart contract, providing it with this cheque. If it is verified successfully smart contract will send GAS to the user\u2019s address and Inner Ring nodes will reflect those changes in the internal account balance. If cheque is not used during validity period GAS locked for withdrawal will be unlocked.", "doc_id": "b4c39f2f-0273-41af-ad16-be00c84ea5d4", "embedding": null, "doc_hash": "44089809623670f8ab4d981a8b528d31b526b6917d829e5c5a78deb61fa05f37", "extra_info": {"file_path": "https://fs.neo.org/pricing/"}, "node_info": {"start": 0, "end": 2866, "_node_type": "1"}, "relationships": {"1": "3cf8ac75-17d2-45f9-983b-96be264f452f"}}, "__type__": "1"}, "92aa499d-8a2d-4775-8569-457727277746": {"__data__": {"text": "Hosting\nThe website contents is stored as a set of objects in a NeoFS container. Each object has a\nFilePath attribute with a corresponding file name (\nindex.html,\nimg/something.png, etc), they also have a\nContent-Type attribute with appropriate type (\ntext/html,\nimage/png, etc). These objects are uploaded from the website release tarball using neofs-cli, if there is an update, new objects are uploaded first and then all old ones are deleted. Only NeoFS storage nodes have data for this container.\nWe have an nginx instance accepting initial user\u2019s connections, it:\n- handles TLS connections (certificates/encryption)\n- accepts original HTTP requests\n- rewrites these requests, so that they could be processed by NeoFS HTTP gateway\n- each original request gets converted into\n/get_by_attribute/$CID/FilePath/$PATHwhere\n$CIDis the container ID storing website\u2019s objects and\n$PATHis the original request (\nindex.html,\nimg/something.png, etc)\n- additional rules convert requests to directories\n/something/into the same\nget_by_attributepath, but with an\nindex.htmlappended\n- each original request gets converted into\n- passes these rewritten requests to one of the configured NeoFS HTTP gateways (there is a number of them)\n- caches responses There can be multiple nginx instances (they only have key/certificate and configuration), but at the moment we\u2019re using one.\nNginx config\nrewrite '^/$' /get_by_attribute/$cid/FilePath/index.html break; rewrite '^/(.+)/$' /get_by_attribute/$cid/FilePath/$1/index.html break; rewrite '^/(.+)$' /get_by_attribute/$cid/FilePath/$1 break; proxy_pass https://$neofs_http_gateway;\nThen the request is picked up by NeoFS HTTP gateway:\n- it translates\nget_by_attributeHTTP request into NeoFS API\nSEARCHrequest which tries to find objects in container\n$CIDwith\nFilePathattribute equal to the requested one\n- this request gets sent to one of the NeoFS storage nodes configured in the gateway (there are multiple of them)\n- nodes reply with object IDs corresponding to search request (it should be a single OID)\n- HTTP gateway then issues a NeoFS\nGETrequest for appropriate CID/OID combination\n- this request can also be sent to any of configured NeoFS storage nodes\n- it receives a reply with content, caches it and replies to nginx\nNeoFS nodes just do their job in this scheme, serving\nSEARCH and\nGET (\nPUT as well, for uploads) requests in a usual manner. Containers are set up with basic ACL that allows anyone to read (it\u2019s a widely open website), but allows only owner to upload new content.", "doc_id": "92aa499d-8a2d-4775-8569-457727277746", "embedding": null, "doc_hash": "a7efdff36fc365e169e5f0718958befe495654a21946602877031b2a0ebecb1b", "extra_info": {"file_path": "https://fs.neo.org/hosting/"}, "node_info": {"start": 0, "end": 2527, "_node_type": "1"}, "relationships": {"1": "260df489-cf5d-48bd-87fb-5513962ef998"}}, "__type__": "1"}, "42eeafd1-c862-43cf-b56f-ad0ce6d162e4": {"__data__": {"text": "NeoFS becomes more friendly for web application developers.\nModern apps and dApps are mostly web oriented. Web applications provide the same user experience for users across various platforms. At NSPCC, we have always wanted to give web developers the full powers of NeoFS and its native API. However, to achieve this we had to face some challenges.\n- NeoFS API is a binary protocol with protobuf declaration, which is not quite suitable for web applications.\n- NeoFS API does not support a de facto standard mechanism of signing data in web applications using Wallet Connect.\nAfter long discussions and experiments, NeoFS API started to support Wallet Connect signature scheme. The latest neofs-node versions already implement that. So, this opens all doors for the new NeoFS REST Gateway.\nTry NeoFS REST Gateway\nImportant! This is the first version of REST Gateway and it contains many sharp edges and areas for improvement. We want to make it useful for all kinds of developers, so don\u2019t hesitate to suggest features or leave feedback on issues page. Thank you!\nREST Gateway is available as a binary, docker image, and a part of NeoFS All-In-One environment for local tests. To start, specify NeoFS Node endpoint (find public NeoFS endpoints at https://status.fs.neo.org). API will be available at http://127.0.0.1:8080/v1.\n$ ./bin/neofs-rest-gw -p grpcs://st1.t5.fs.neo.org:8082\ninfo neofs-rest-gw/config.go:195 no wallet path specified, creating ephemeral key automatically for this run\ninfo neofs-rest-gw/config.go:379 added connection peer {\"address\": \"grpcs://st1.t5.fs.neo.org:8082\", \"priority\": 1, \"weight\": 1}\ninfo metrics/service.go:33 service hasn't started since it's disabled {\"service\": \"Pprof\"}\ninfo metrics/service.go:33 service hasn't started since it's disabled {\"service\": \"Prometheus\"}\nServing neofs rest gw at http://127.0.0.1:8080\nREST Gateway uses Open API 2.0 specification, see spec/rest.yaml file. Find autogenerated docs at http://127.0.0.1:8080/v1/docs, and more NeoFS-specific documentation at http://127.0.0.1:8080/docs.\nWhy not NeoFS HTTP Gateway\nAdding a control panel made us rethink the way the gateway works with requests, its parameters, and headers. While HTTP Gateway works with binary encoded structures, we wanted to provide a better experience for web developers with human-readable JSON structures in request bodies and responses.\nTo avoid mixing these approaches, we decided to keep HTTP Gateway as a simple, reliable, and blazingly fast data access point for NeoFS. This is the core of our incoming CDN service. You don\u2019t have to choose one gateway implementation over another. It\u2019s better to use both wisely.\nREST Gateway application demo\nSoon we are going to publish Panel.NeoFS \u2014 our web application to control NeoFS assets directly from your browser just with your wallet. It uses all features of REST Gateway and serves as a great example of the capabilities open for developers. Now look at the sneak peek of what is possible with the new REST Gateway", "doc_id": "42eeafd1-c862-43cf-b56f-ad0ce6d162e4", "embedding": null, "doc_hash": "4e6a0717cc9c48e419d3508e24bdc51135b3f52bca69b9c2f69fcf8c59a44da6", "extra_info": {"file_path": "https://neospcc.medium.com/neofs-rest-gateway-4994a8ada04"}, "node_info": {"start": 0, "end": 3003, "_node_type": "1"}, "relationships": {"1": "f728041a-aadb-4eaf-9c6c-8f2d6bb3f5ba"}}, "__type__": "1"}, "ac11b358-3a0c-413f-83a6-25f7e3db9bba": {"__data__": {"text": "Example\nIf you need to call the N3 dAPI monitoring method, you need to initialize NEOLine after initializing NEOLineN3, please refer to the example on the right.\nlet neoline;\nlet neolineN3;\nfunction initDapi() {\nconst initCommonDapi = new Promise((resolve, reject) => {\nwindow.addEventListener('NEOLine.NEO.EVENT.READY', () => {\nneoline = new NEOLine.Init();\nif (neoline) {\nresolve(neoline);\n} else {\nreject('common dAPI method failed to load.');\n}\n});\n});\nconst initN3Dapi = new Promise((resolve, reject) => {\nwindow.addEventListener('NEOLine.N3.EVENT.READY', () => {\nneolineN3 = new NEOLineN3.Init();\nif (neolineN3) {\nresolve(neolineN3);\n} else {\nreject('N3 dAPI method failed to load.');\n}\n});\n});\ninitCommonDapi.then(() => {\nconsole.log('The common dAPI method is loaded.');\nreturn initN3Dapi;\n}).then(() => {\nconsole.log('The N3 dAPI method is loaded.');\n}).catch((err) => {\nconsole.log(err);\n})\n};\ninitDapi();\ngetProvider\nReturns information about the dAPI provider, including who this provider is, the version of their dAPI, and the NEP that the interface is compatible with.\nInput Arguments\nNone\nSuccess Response\n|Parameter||Description|\nname: string\n|The name of the wallet provider|\nwebsite: string\n|The website of the wallet provider|\nversion: string\n|The version of the dAPI that the the wallet supports|\ncompatibility: string[]\n|A list of all applicable NEPs which the wallet provider supports|\nextra: object\n|This object can contain any attributes specific to the dapi provider, such as an app theme|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.getProvider()\n.then(provider => {\nconst {\nname,\nwebsite,\nversion,\ncompatibility,\nextra\n} = provider;\nconsole.log('Provider name: ' + name);\nconsole.log('Provider website: ' + website);\nconsole.log('Provider dAPI version: ' + version);\nconsole.log('Provider dAPI compatibility: ' + JSON.stringify(compatibility));\nconsole.log('Extra provider specific atributes: ' + JSON.stringify(compatibility));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_DENIED':\nconsole.log('The user rejected the request to connect with your dApp.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nname: 'Awesome Wallet',\nwebsite: 'https://www.neoline.io/',\nversion: '1.0.0',\ncompatibility: [],\nextra: {}\n}\ngetBalance\nReturn balance of a specific asset for the given account.\nIf the asset is omited from a request to MainNet, all asset and token balances will be returned.\nInput Arguments\n|Parameter||Description|\nparams: BalanceRequest[]\n|A list of Balance Request Objects, specifying which addresses, and which assets to query|\nBalanceRequest\n|Parameter||Description|\naddress: string\n|Address to check balance(s)|\ncontracts: string[]\n|contracts is a list of contract hash|\nSuccess Response\n|Parameter||Description|\n[address: string]: BalanceResponse[]\n|This key is the actual address of the query eg.", "doc_id": "ac11b358-3a0c-413f-83a6-25f7e3db9bba", "embedding": null, "doc_hash": "e7e7d0077017268b1c4ff2509f38a6396190a0cb5870fc5db4c10fa560ba1a8d", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 0, "end": 3242, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "3": "7ae119f7-cd34-4c78-97c8-3e359bafffa4"}}, "__type__": "1"}, "7ae119f7-cd34-4c78-97c8-3e359bafffa4": {"__data__": {"text": "string]: BalanceResponse[]\n|This key is the actual address of the query eg. \"NdJqYNVK99srFABQDLPdrpz2By1RX1sLvr\"|\nBalanceResponse\n|Parameter||Description|\ncontract: string\n|contract of the given hash|\nsymbol: string\n|Symbol of the given contract|\namount: string\n|Double Value of the balance represented as a String|\n/* Example */\nneolineN3.getBalance()\n.then((results) => {\nObject.keys(results).forEach(address => {\nconst balances = results[address];\nbalances.forEach(balance => {\nconst { contract, symbol, amount } = balance\nconsole.log('Address: ' + address);\nconsole.log('contract: ' + contract);\nconsole.log('Asset symbol: ' + symbol);\nconsole.log('Amount: ' + amount);\n});\n});\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_DENIED':\nconsole.log('The user rejected the request to connect with your dApp');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n// output\n[\n{\n\"symbol\": \"NEO\",\n\"amount\": \"5000000\",\n\"contract\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"\n},\n{\n\"symbol\": \"GAS\",\n\"amount\": \"10063.4476161\",\n\"contract\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\"\n}\n]\ngetStorage\nReads the raw value in smart contract storage.\nInput Arguments\n|Parameter||Description|\nscriptHash: string\n|Script hash of the smart contract to invoke a read on|\nkey: string\n|Key of the storage value to retrieve from the contract|\nSuccess Response\n|Parameter||Description|\nresult: string\n|The raw value that's stored in the contract|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.getStorage({\nscriptHash: '006b26dd0d2aa076b11082847a094772450f05af',\nkey: 'token0',\n})\n.then(result => {\nconst value = result;\nconsole.log('Storage value: ' + value.result);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_REFUSED':\nconsole.log('Connection dApp not connected. Please call the \"connect\" function.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nresult: 'wYCMqLCTIUiax57E8Zd/O9xN3l8='\n}\ninvokeRead\nExecute a contract invocation in read-only mode.\nInput Arguments\n|Parameter||Description|\nscriptHash: string\n|Script hash of the smart contract to invoke a read on|\noperation: string\n|Operation on the smart contract to call|\nargs: Argument[]\n|Any input arguments for the operation|\nsigners: Signers[]\n|Sender and the effective scope of signature|\nSuccess Response\nThe wallet will return the direct response from the RPC node.\n|Parameter||Description|\nscript: string\n|The script which was run|\nstate: string\n|Status of the executeion|\ngas_consumed: string\n|Estimated amount of GAS", "doc_id": "7ae119f7-cd34-4c78-97c8-3e359bafffa4", "embedding": null, "doc_hash": "b3da62a8b8f324cc8b49e8eab84cabbd36137ceae6ba90a878c06a02b8a55ef0", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 3178, "end": 6342, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "ac11b358-3a0c-413f-83a6-25f7e3db9bba", "3": "2df83cac-83ac-44b4-88dc-9aee4fb2b10f"}}, "__type__": "1"}, "2df83cac-83ac-44b4-88dc-9aee4fb2b10f": {"__data__": {"text": "of the executeion|\ngas_consumed: string\n|Estimated amount of GAS to be used to execute the invocation. (Up to 10 free per transaction)|\nstack: Argument[]\n|An array of response arguments|\nArgument\n|Parameter||Description|\ntype: 'String' | 'Boolean' | 'Hash160' | 'Hash256' | 'Integer' | 'ByteArray' | 'Array' | 'Address'\n|The type of the argument with you are using. The type is an array, please see the example for the value.|\nvalue: string\n|String representation of the argument which you are using|\nSigner\n|Parameter||Description|\naccount: string\n|scriptHash of the address|\nscopes: number\n|Effective range of the signature|\nallowedContracts?: Array\n|Contracts of the signature can take effect, if scopes is CustomContracts|\nallowedGroups?: Array\n|Pubkeys of the signature can take effect, if scopes is CustomGroups|\nrules?: WitnessRule[]\n|Custom rules for witness to adhere by, if scopes is WitnessRules|\nScopes\n|Field||Description|\n0\n|Only transactions are signed and no contracts are allowed to use this signature.|\n1\n|It only applies to the chain call entry. That is, if the user invokes contract A, and then contract A calls contract B, only contract A can use the signature. It is recommended as the default value for the wallet.|\n16\n|Custom contract. The signature can be used in the specified contract. It can be used in conjunction with CalledByEntry.|\n32\n|Custom contract groups that can be used in a specified contract group. It can be used in conjunction with CalledByEntry.|\n64\n|Indicates that the current context must satisfy the specified rules.|\n128\n|Global. The risk is extremely high because the contract may transfer all assets in the address. Only choose it when the contract is extremely trusted.|\nWitnessRule\n|Parameter||Description|\naction: 'Deny' | 'Allow'\n|Represents the action of a WitnessRule.|\ncondition: WitnessCondition\n|Represents the condition of a WitnessRule.|\nWitnessCondition\n|Field||Description|\nBooleanWitnessCondition\n|Indicates that the condition will always be met or not met.|\nAndWitnessCondition\n|Indicates that all conditions must be met.|\nNotWitnessCondition\n|Reverse another condition.|\nOrWitnessCondition\n|Indicates that any of the conditions meets.|\nScriptHashWitnessCondition\n|Indicates that the condition is met when the current context has the specified script hash.|\nGroupWitnessCondition\n|Indicates that the condition is met when the current context has the specified group.|\nCalledByEntryWitnessCondition\n|Indicates that the condition is met when the current context is the entry point or is called by the entry point.|\nCalledByContractWitnessCondition\n|Indicates that the condition is met when the current context is called by the specified contract.|\nCalledByGroupWitnessCondition\n|Indicates that the condition is met when the current context is called by the specified group.|\nBooleanWitnessCondition\n|Parameter||Description|\ntype: 'Boolean'\n|The type of the BooleanWitnessCondition.|\nexpression: boolean\n|The expression of the BooleanWitnessCondition.|\nAndWitnessCondition\n|Parameter||Description|\ntype: 'And'\n|The type of the AndWitnessCondition.|\nexpressions: WitnessCondition[]\n|The expressions of the AndWitnessCondition.|\nNotWitnessCondition\n|Parameter||Description|\ntype: 'Not'\n|The type of the NotWitnessCondition.|\nexpression: WitnessCondition\n|The expression of the NotWitnessCondition.|\nOrWitnessCondition\n|Parameter||Description|\ntype: 'Or'\n|The type of the OrWitnessCondition.|\nexpressions: WitnessCondition[]\n|The expressions of the OrWitnessCondition.|\nScriptHashWitnessCondition\n|Parameter||Description|\ntype: 'ScriptHash'\n|The type of the ScriptHashWitnessCondition.|\nhash: string\n|The hash of the ScriptHashWitnessCondition.|\nGroupWitnessCondition\n|Parameter||Description|\ntype: 'Group'\n|The type of the GroupWitnessCondition.|\ngroup: string\n|The group of the", "doc_id": "2df83cac-83ac-44b4-88dc-9aee4fb2b10f", "embedding": null, "doc_hash": "dff7e32c1e58aa5c08b81d29f3301d17612baa42590525af4dae2a961bca9806", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 6350, "end": 10187, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "7ae119f7-cd34-4c78-97c8-3e359bafffa4", "3": "87e9252e-9f99-4687-b2f3-a53f027ff1fb"}}, "__type__": "1"}, "87e9252e-9f99-4687-b2f3-a53f027ff1fb": {"__data__": {"text": "type of the GroupWitnessCondition.|\ngroup: string\n|The group of the GroupWitnessCondition.|\nCalledByEntryWitnessCondition\n|Parameter||Description|\ntype: 'CalledByEntry'\n|The type of the CalledByEntryWitnessCondition.|\nCalledByContractWitnessCondition\n|Parameter||Description|\ntype: 'CalledByContract'\n|The type of the CalledByContractWitnessCondition.|\nhash: string\n|The hash of the CalledByContractWitnessCondition.|\nCalledByGroupWitnessCondition\n|Parameter||Description|\ntype: 'CalledByGroup'\n|The type of the CalledByGroupWitnessCondition.|\ngroup: string\n|The group of the CalledByGroupWitnessCondition.|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.invokeRead({\nscriptHash: 'd2a4cff31913016155e38e474a2c06d08be276cf',\noperation: 'transfer',\nargs: [\n{\n\"type\": \"Hash160\",\n\"value\": \"0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\"\n},\n{\n\"type\": \"Hash160\",\n\"value\": \"0xebae4ab3f21765e5f604dfdd590fdf142cfb89fa\"\n},\n{\n\"type\": \"Integer\",\n\"value\": \"10000\"\n},\n{\n\"type\": \"String\",\n\"value\": \"\"\n}\n],\nsigners: [\n{\naccount: \"2cab903ff032ac693f8514581665be534beac39f\",\nscopes: 1\n}\n],\n})\n.then(result => {\nconsole.log('Read invocation result: ' + JSON.stringify(result));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_REFUSED':\nconsole.log('Connection dApp not connected. Please call the \"connect\" function.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nscript: \"DAABECcMFPqJ+ywU3w9Z3d8E9uVlF/KzSq7rDBT6ifssFN8PWd3fBPblZRfys0qu6xTAHwwIdHJhbnNmZXIMFM924ovQBixKR47jVWEBExnzz6TSQWJ9W1I=\",\nstate:\"HALT\",\nstack:[\n{\ntype:\"Boolean\",\nvalue:false\n}\n]\n}\n/* Example, Type is array */\nargs: [\n{\ntype: \"Array\",\nvalue: [\n{\ntype: \"String\",\nvalue: \"0x576f726c64\"\n}, {\ntype: \"String\",\nvalue: \"0x576f726c64\"\n}\n]\n}\n]\ninvokeReadMulti\nExecute a contract invocation in read-only mode.\nInput Arguments\n|Parameter||Description|\nscriptHash: string\n|Script hash of the smart contract to invoke a read on|\noperation: string\n|Operation on the smart contract to call|\ninvokeReadArgs: Argument[]\n|Any input arguments for the operation|\nSuccess Response\nThe wallet will return the direct response from the RPC node.\n|Parameter||Description|\nscript: string\n|The script which was run|\nstate: string\n|Status of the executeion|\ngas_consumed: string\n|Estimated amount of GAS to be used to execute the invocation. (Up to 10 free per transaction)|\nstack: Argument[]\n|An array of response arguments|\nArgument\n|Parameter||Description|\ntype:", "doc_id": "87e9252e-9f99-4687-b2f3-a53f027ff1fb", "embedding": null, "doc_hash": "6ef1d5e02cab207d9deb70d4dada01514b0e464f7722419f5166872cd0a40b49", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 10186, "end": 13090, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "2df83cac-83ac-44b4-88dc-9aee4fb2b10f", "3": "c864c9a3-f194-4941-a84b-32993fc929e9"}}, "__type__": "1"}, "c864c9a3-f194-4941-a84b-32993fc929e9": {"__data__": {"text": "array of response arguments|\nArgument\n|Parameter||Description|\ntype: 'String' | 'Boolean' | 'Hash160' | 'Hash256' | 'Integer' | 'ByteArray' | 'Array' | 'Address'\n|The type of the argument with you are using|\nvalue: string\n|String representation of the argument which you are using|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.invokeReadMulti({\ninvokeReadArgs: [\n{\nscriptHash: \"d2a4cff31913016155e38e474a2c06d08be276cf\",\noperation: \"balanceOf\",\nargs: [\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n}\n]\n},\n{\nscriptHash: \"d2a4cff31913016155e38e474a2c06d08be276cf\",\noperation: \"balanceOf\",\nargs: [\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n}\n]\n}\n],\nsigners: [\n{\naccount: \"2cab903ff032ac693f8514581665be534beac39f\",\nscopes: 1\n}\n]\n}).then(result => {\nconsole.log('Read invocation result: ' + JSON.stringify(result));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_REFUSED':\nconsole.log('Connection dApp not connected. Please call the \"connect\" function.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n[\n{\n\"script\": \"DBRHsV1d1v6Pnc51X7CYvP4eBbMIAxHAHwwJYmFsYW5jZU9mDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n\"state\": \"HALT\",\n\"stack\": [\n{\n\"type\": \"Integer\",\n\"value\": \"5293314113\"\n}\n]\n},\n{\n\"script\": \"DBRHsV1d1v6Pnc51X7CYvP4eBbMIAxHAHwwJYmFsYW5jZU9mDBTPduKL0AYsSkeO41VhARMZ88+k0kFifVtS\",\n\"state\": \"HALT\",\n\"stack\": [\n{\n\"type\": \"Integer\",\n\"value\": \"5293314113\"\n}\n]\n}\n]\nReturns whether the provided signature data matches the provided message and was signed by the account of the provided public key. For the complete verification process, please go to Testbed.\nInput Arguments\n|Parameter||Description|\nmessage: string\n|Salt prefix + original message|\ndata: string\n|Signed message|\npublicKey: string\n|Public key of account that signed message|\nSuccess Response\n|Parameter||Description|\nresult: boolean\n|Whether the provided signature matches the provided message and public key|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.verifyMessage({\nmessage: '42e038cec78bed9f1e503c4b23254b23Hello world',\ndata:", "doc_id": "c864c9a3-f194-4941-a84b-32993fc929e9", "embedding": null, "doc_hash": "9859840cbed5888d233925ef5adbe0609aabfc2db93ee4c2aa2fdc826446db07", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 13086, "end": 15821, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "87e9252e-9f99-4687-b2f3-a53f027ff1fb", "3": "65b2e529-8e8d-4ccd-ab47-626470553617"}}, "__type__": "1"}, "65b2e529-8e8d-4ccd-ab47-626470553617": {"__data__": {"text": "world',\ndata: 'be506bf7e6851960bfe45968bf5dbbf79a9dc5dc63ee5b88629acfb288c435649c2766e977d4bc76253d8590bb3ca3d9b70efd71d6f7eebdf060dfa58c6601fd',\npublicKey: '03ba9524bd7479414be713c3a4f6f3ef35f90bb4b08f0f552211bf734c24415230'\n})\n.then(result => {\nconsole.log('Signature data matches provided message and public key: ' + JSON.stringify(result));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_DENIED':\nconsole.log('The user rejected the request to connect with your dApp');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nresult: true\n}\ngetBlock\nGet information about a specific block.\nInput Arguments\n|Parameter||Description|\nblockHeight: number\n|The height of the block you would like to get information about|\nSuccess Response\nThe wallet will return the direct response from the RPC node.\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.getBlock({\nblockHeight: 190,\n})\n.then(result => {\nconsole.log('Block information: ' + JSON.stringify(result));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\n\"hash\": \"0x70635ef3ab897294bcde97255ea1197f99d7d6c587f720430b78743d25f8b313\",\n\"size\": 689,\n\"version\": 0,\n\"previousblockhash\": \"0xb2462644577fdc9302abfe3517d07cbb9e7d51354872257901ba3ab1c2f4ead6\",\n\"merkleroot\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\"time\": 1616899442433,\n\"index\": 190,\n\"primary\": 6,\n\"nextconsensus\": \"NNjNWMEgRw9bnvg7RkjSB9FZfzXUXfqovh\",\n\"witnesses\": [\n{\n\"invocation\":", "doc_id": "65b2e529-8e8d-4ccd-ab47-626470553617", "embedding": null, "doc_hash": "cba8d5d813033869ae299854641bf1af8f802d929e82777523f56984983b5065", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 15874, "end": 18036, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "c864c9a3-f194-4941-a84b-32993fc929e9", "3": "cb62a6ea-2503-407e-b751-1439099ffce1"}}, "__type__": "1"}, "cb62a6ea-2503-407e-b751-1439099ffce1": {"__data__": {"text": "[\n{\n\"invocation\": \"DEAl4+T5RivIUYtCcMDCw/W2G3VvNRWRD8iWv447hmeuUo1XxyqHvC9wFYWWu1ar2Qr6sO36mHlJI6W1lmTol7sSDEDZmjj1k/TGr2f4Ii3IUZyxzroJ6/6pBBZhgafUYFPX1zMJBXYPqpGP7Ppqw8n/jUOgYq7u0XAzzbCco7qT4/1mDECVyDVhe2EwxXpvp9bUGgVH9SOoXub7fsN7zB+7kiEXpSNU0Fp7kn4uIsLE8PlDfEyKktFAMPBEzw1+WJZr/MgmDEB0RS82LHuKwwHmQ24QuRfk6YuFs3bLXFdtvL0BrlwpYrtOEDr6hitybvJ6X2NBiRf5+O88MO/ph3KJwIc7deN4DEDOdD1Ks34NSPHqd/7tNt/kqjIokEkRfxSCoXoBdbuSwQBQr5G6q/a9MpE9WQ+td0+XCsOKPi82QzxXo/TLJnoJ\",\n\"verification\": \"FQwhAwCbdUDhDyVi5f2PrJ6uwlFmpYsm5BI0j/WoaSe/rCKiDCECPpsy6om5TQZuZJsST9UOOW7pE2no4qauGxHBcNAiJW0MIQNAjc1BY5b2R4OsWH6h4Vk8V9n+qIDIpqGSDpKiWUd4BgwhAqeDS+mzLimB0VfLW706y0LP0R6lw7ECJNekTpjFkQ8bDCECuixw9ZlvNXpDGYcFhZ+uLP6hPhFyligAdys9WIqdSr0MIQPOExCxK5ItwD/pBcxnN+YrOEwO+j8VZouFPQPAFoJb8AwhAuhZNE7zW7H/65wlUytAKMW4d9uGGtsIYcng7dPIxnyLF0F7zmyl\"\n}\n],\n\"tx\": [],\n\"confirmations\": 207480,\n\"nextblockhash\": \"0xb95e56772d16a02f54c9f9cf071bdb60c92d4b6dc0f0eddd7c8388d5649f112b\"\n}\ngetTransaction\nGet information about a specific transaction.\nInput Arguments\n|Parameter||Description|\ntxid: string\n|The id of the transaction you would like to get information about|\nSuccess Response\nThe wallet will return the direct response from the RPC node.\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.getTransaction({\ntxid: '0xe5a5fdacad0ba4e8d34d2fa0638357adb0f05e7fc902ec150739616320870f50'\n})\n.then(result => {\nconsole.log('Transaction details: ' + JSON.stringify(result));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the", "doc_id": "cb62a6ea-2503-407e-b751-1439099ffce1", "embedding": null, "doc_hash": "bf99f83bf2b551c65a73dd77f43e2c8b0bbf5af93356d17511a7adc058a25efb", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 18033, "end": 19977, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "65b2e529-8e8d-4ccd-ab47-626470553617", "3": "90e1a3f2-8299-4885-8ffe-1a321a811c5c"}}, "__type__": "1"}, "90e1a3f2-8299-4885-8ffe-1a321a811c5c": {"__data__": {"text": "Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\n\"hash\": \"0xc156988547570d1c852d9a56324b2e09d89077ff0aee2070d0b470332ae1e083\",\n\"size\": 244,\n\"sys_fee\": \"0.0997775\",\n\"net_fee\": \"0.0124379\",\n\"block_index\": 103879,\n\"block_time\": 1618238381713,\n\"version\": 0,\n\"transfers\": [\n{\n\"hash\": \"0xc156988547570d1c852d9a56324b2e09d89077ff0aee2070d0b470332ae1e083\",\n\"src\": \"tx\",\n\"contract\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n\"from\": \"\",\n\"to\": \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n\"amount\": \"0.00004914\"\n},\n{\n\"hash\": \"0xc156988547570d1c852d9a56324b2e09d89077ff0aee2070d0b470332ae1e083\",\n\"src\": \"tx\",\n\"contract\": \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\n\"from\": \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n\"to\": \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n\"amount\": \"1\"\n}\n]\n}\ngetApplicationLog\nGet the application log for a given transaction.\nInput Arguments\n|Parameter||Description|\ntxid: string\n|The id of the transaction you would like to get the application logs for|\nSuccess Response\nThe wallet will return the direct response from the RPC node.\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.getApplicationLog({\ntxid: '0xe5a5fdacad0ba4e8d34d2fa0638357adb0f05e7fc902ec150739616320870f50',\n})\n.then(result => {\nconsole.log('Application log of transaction execution: ' + JSON.stringify(result));\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\n\"blockhash\": \"0xa8184d1fb08199ca8926f992b6253962c4a8047f7d4cfc5ac420e346fa761b03\",\n\"executions\": [\n{\n\"trigger\": \"OnPersist\",\n\"vmstate\": \"HALT\",\n\"gasconsumed\": \"0\",\n\"stack\": [],\n\"notifications\": []\n},\n{\n\"trigger\": \"PostPersist\",\n\"vmstate\": \"HALT\",\n\"gasconsumed\": \"0\",\n\"stack\": [],\n\"notifications\": [\n{\n\"contract\": \"0xd2a4cff31913016155e38e474a2c06d08be276cf\",\n\"eventname\": \"Transfer\",\n\"state\": {\n\"type\": \"Array\",\n\"value\": [\n{\n\"type\": \"Any\"\n},\n{\n\"type\":", "doc_id": "90e1a3f2-8299-4885-8ffe-1a321a811c5c", "embedding": null, "doc_hash": "f3a452155b80c331528eda5bb3a0f019cb8546bc3127157c26785743cf67e625", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 19948, "end": 22347, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "cb62a6ea-2503-407e-b751-1439099ffce1", "3": "a8959c5d-e0c9-4698-8a5a-34a5e499874e"}}, "__type__": "1"}, "a8959c5d-e0c9-4698-8a5a-34a5e499874e": {"__data__": {"text": "[\n{\n\"type\": \"Any\"\n},\n{\n\"type\": \"ByteString\",\n\"value\": \"iQwOXsDt//2me0sNlRpUdBcVOg4=\"\n},\n{\n\"type\": \"Integer\",\n\"value\": \"50000000\"\n}\n]\n}\n}\n]\n}\n]\n}\npickAddress\nReturns the NEO N3 account selected by the user.\nInput Arguments\nNone\nSuccess Response\n|Parameter||Description|\nlabel: string\n|A label the users has set to identify their wallet|\naddress: string\n|The NEO N3 account address selected by the user|\n/* Example */\nneolineN3.pickAddress()\n.then(result => {\nconst { label, address } = result;\nconsole.log('label:' + label);\nconsole.log('address' + address);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CANCELED':\nconsole.log('The user cancels, or refuses the dapps request');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nlabel: 'N3-Name',\naddress: 'NfuwpaQ1A2xaeVbxWe8FRtaRgaMa8yF3YM'\n}\nAddressToScriptHash\nConverts an address to scripthash.\nInput Arguments\n|Parameter||Description|\naddress: string\n|N3 account address.|\nSuccess Response\n|Parameter||Description|\nscriptHash: string\n|SctiptHash is the script hash of the N3 account.|\n/* Example */\nneolineN3.AddressToScriptHash({ address: 'NQUN2zkzwpypEi6kvGYexy8cQKN2ycyJjF' })\n.then(result => {\nconst { scriptHash } = result;\nconsole.log('scriptHash' + scriptHash);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'MALFORMED_INPUT':\nconsole.log('Please check your input');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nscriptHash: 'f0a33d62f32528c25e68951286f238ad24e30032'\n}\nScriptHashToAddress\nConverts a scripthash to address.\nInput Arguments\n|Parameter||Description|\nscriptHash: string\n|SctiptHash is the script hash of the N3 account.|\nSuccess Response\n|Parameter||Description|\naddress: string\n|N3 account address.|\n/* Example */\nneolineN3.ScriptHashToAddress({ scriptHash: 'f0a33d62f32528c25e68951286f238ad24e30032' })\n.then(result => {\nconst { address } = result;\nconsole.log('address' + address);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'MALFORMED_INPUT':\nconsole.log('Please check your input');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\naddress: 'NQUN2zkzwpypEi6kvGYexy8cQKN2ycyJjF'\n}\nsend\nInvoke a transfer of a specified amount of a given asset from the connected account to another account.\nInput Arguments\n|Parameter||Description|\nfromAddress: string\n|Address of the connected account to send the assets from|\ntoAddress: string\n|Address of the receiver of the assets", "doc_id": "a8959c5d-e0c9-4698-8a5a-34a5e499874e", "embedding": null, "doc_hash": "8c84f3807094c29bfc3cb360f6704b5a40662760fdaa91c5f9835d87978db2ca", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 22366, "end": 25320, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "90e1a3f2-8299-4885-8ffe-1a321a811c5c", "3": "b99322d6-96ac-4eec-babe-058db0c4e1aa"}}, "__type__": "1"}, "b99322d6-96ac-4eec-babe-058db0c4e1aa": {"__data__": {"text": "send the assets from|\ntoAddress: string\n|Address of the receiver of the assets to be sent|\nasset: string\n|Asset script hash to be sent. Accepts asset symbol only for \"MainNet\"|\namount: string\n|The parsed amount of the asset to be sent|\nfee?: string\n|The parsed amount of network fee (in GAS) to include with transaction|\nbroadcastOverride?: boolean\n|In the case that the dApp would like to be responsible for broadcasting the signed transaction rather than the wallet provider|\nSuccess Response\nIn the case where the \"broadcastOverride\" input argument is not set, or set to false.\n|Parameter||Description|\ntxid: string\n|The transaction ID of the send invocation|\nnodeURL: string\n|The node which the transaction was broadcast to. Returned if transaction is broadcast by wallet provider|\nIn the case where the \"broadcastOverride\" input argument is set to True.\n|Parameter||Description|\ntxid: string\n|The transaction ID of the send invocation|\nsignedTx: string\n|The serialized signed transaction. Only returned if the broadcastOverride input argument was set to True|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.send({\nfromAddress: 'NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq',\ntoAddress: 'NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq',\nasset: 'GAS',\namount: '1',\nfee: '0.0001',\nbroadcastOverride: false\n})\n.then(result => {\nconsole.log('Send transaction success!');\nconsole.log('Transaction ID: ' + result.txid);\nconsole.log('RPC node URL: ' + result.nodeURL);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ncase 'MALFORMED_INPUT':\nconsole.log('The receiver address provided is not valid.');\nbreak;\ncase 'CANCELED':\nconsole.log('The user has canceled this transaction.');\nbreak;\ncase 'INSUFFICIENT_FUNDS':\nconsole.log('The user has insufficient funds to execute this transaction.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\ntxid: '0xd6e4edeb66a75b79bec526d14664017eef9ccee5650c32facb1a4d4fe3640808',\nnodeURL: 'https://neo3-testnet.neoline.vip'\n};\ninvoke\nInvoke allows for the generic execution of smart contracts on behalf of the user. It is reccommended to have a general understanding of the NEO blockchain, and to be able successfully use all other commands listed previously in this document before attempting a generic contract execution.\nInput Arguments\n|Parameter||Description|\nscriptHash: string\n|Script hash of the smart contract to invoke|\noperation: string\n|Operation on the smart contract to call|\nargs: Argument[]\n|Any input arguments for the operation|\nfee?: string\n|The parsed amount of network fee (in GAS) to include with transaction|\nextraSystemFee?: string\n|This fee will be added to system fee|\noverrideSystemFee?: string\n|This fee will override the system fee|\nbroadcastOverride?: boolean\n|In the case that the dApp would like to be responsible for broadcasting the signed transaction rather than the wallet provider|\nsigners: Signers[]\n|Sender and the effective scope of", "doc_id": "b99322d6-96ac-4eec-babe-058db0c4e1aa", "embedding": null, "doc_hash": "a527418df8e05078e2aa316b1af0cfb30767115f212bfc0f4eaef7765a4940c2", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 25282, "end": 28660, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "a8959c5d-e0c9-4698-8a5a-34a5e499874e", "3": "cea5c4b4-97f7-4a93-be7d-a2a0b97994b9"}}, "__type__": "1"}, "cea5c4b4-97f7-4a93-be7d-a2a0b97994b9": {"__data__": {"text": "wallet provider|\nsigners: Signers[]\n|Sender and the effective scope of signature|\nArgument\n|Parameter||Description|\ntype: 'String' | 'Boolean' | 'Hash160' | 'Hash256' | 'Integer' | 'ByteArray' | 'Array' | 'Address'\n|The type of the argument with you are using|\nvalue: any\n|String representation of the argument which you are using|\nIn the case where the \"broadcastOverride\" input argument is set to True.\n|Parameter||Description|\nsignedTx: string\n|The serialized signed transaction. Only returned if the broadcastOverride input argument was set to True|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.invoke({\nscriptHash: '0x1415ab3b409a95555b77bc4ab6a7d9d7be0eddbd',\noperation: 'transfer',\nargs: [\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n},\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n},\n{\ntype: \"Integer\",\nvalue: \"1\",\n},\n{\ntype: \"Any\",\nvalue: null,\n}\n],\nfee: '0.0001',\nbroadcastOverride: false,\nsigners: [\n{\naccount: \"2cab903ff032ac693f8514581665be534beac39f\",\nscopes: 16,\nallowedContracts: [\"0x1415ab3b409a95555b77bc4ab6a7d9d7be0eddbd\", \"0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\"],\nallowedGroups: []\n}\n]\n})\n.then(result => {\nconsole.log('Invoke transaction success!');\nconsole.log('Transaction ID: ' + result.txid);\nconsole.log('RPC node URL: ' + result.nodeURL);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ncase 'CANCELED':\nconsole.log('The user has canceled this transaction.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\ntxid: '0xd6e4edeb66a75b79bec526d14664017eef9ccee5650c32facb1a4d4fe3640808',\nnodeURL: 'https://neo3-testnet.neoline.vip'\n};\ninvokeMultiple\nInvoke Multiple functions the same as Invoke, but accepts inputs to execute multiple invokes in the same transaction.\nInput Arguments\n|Parameter||Description|\nfee?: string\n|If a fee is specified then the wallet SHOULD NOT override it, if a fee is not specified the wallet SHOULD allow the user to attach an optional fee|\nextraSystemFee?: string\n|This fee will be added to system fee|\noverrideSystemFee?: string\n|This fee will override the system fee|\ninvokeArgs?: InvokeArguments[]\n|Array of contract invoke inputs|\nbroadcastOverride?: boolean\n|If this flag is set to True, the wallet provider will return the signed transaction rather than broadcasting to a node.|\nsigners: Signers[]\n|Sender and the effective scope of signature|\nInvokeArguments\n|Parameter||Description|\nscriptHash: string\n|The script hash of the contract that you wish to invoke|\noperation:", "doc_id": "cea5c4b4-97f7-4a93-be7d-a2a0b97994b9", "embedding": null, "doc_hash": "57aa8e6a80c740988dd16d513fcf91fdae0e36e0611a11713f68472dc97fb3e8", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 28666, "end": 31640, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "b99322d6-96ac-4eec-babe-058db0c4e1aa", "3": "9ae4b014-0b83-4905-970a-904987780cc0"}}, "__type__": "1"}, "9ae4b014-0b83-4905-970a-904987780cc0": {"__data__": {"text": "string\n|The script hash of the contract that you wish to invoke|\noperation: string\n|The operation on the smart contract that you wish to call. This can be fetched from the contract ABI|\nargs: Argument[]\n|A list of arguments necessary to perform on the operation you wish to call|\nArgument\n|Parameter||Description|\ntype: 'String' | 'Boolean' | 'Hash160' | 'Hash256' | 'Integer' | 'ByteArray' | 'Array' | 'Address'\n|The type of the argument with you are using|\nvalue: any\n|String representation of the argument which you are using|\nSuccess Response\nIn the case where the \"broadcastOverride\" input argument is not set, or set to false.\n|Parameter||Description|\ntxid: string\n|The transaction ID of the invocation|\nnodeURL: string\n|The node which the transaction was broadcast to. Returned if transaction is broadcast by wallet provider|\nIn the case where the \"broadcastOverride\" input argument is set to True.\n|Parameter||Description|\nsignedTx: string\n|The serialized signed transaction. Only returned if the broadcastOverride input argument was set to True|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.invokeMultiple({\ninvokeArgs: [\n{\nscriptHash: \"ef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\noperation: \"transfer\",\nargs: [\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n},\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n},\n{\ntype: \"Integer\",\nvalue: \"1\",\n},\n{\ntype: \"Any\",\nvalue: null\n}\n]\n},\n{\nscriptHash: \"ef4073a0f2b305a38ec4050e4d3d28bc40ea63f5\",\noperation: \"transfer\",\nargs: [\n{\ntype: \"Address\",\nvalue: \"NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq\",\n},\n{\ntype: \"Address\",\nvalue: \"NPsCvedTnzGcwSYuoxjh7Sec5Zem2vgVmX\",\n},\n{\ntype: \"Integer\",\nvalue: \"1\",\n},\n{\ntype: \"Any\",\nvalue: null\n}\n]\n}\n],\nfee: '0.001',\nbroadcastOverride: true,\nsigners: [\n{\naccount: \"2cab903ff032ac693f8514581665be534beac39f\",\nscopes: 1\n}\n]\n})\n.then(({txid, nodeURL}: InvokeOutput) => {\nconsole.log('Invoke transaction success!');\nconsole.log('Transaction ID: ' + txid);\nconsole.log('RPC node URL: ' + nodeURL);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'RPC_ERROR':\nconsole.log('There was an error when broadcasting this transaction to the network.');\nbreak;\ncase 'CANCELED':\nconsole.log('The user has canceled this transaction.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\ntxid: '0xd6e4edeb66a75b79bec526d14664017eef9ccee5650c32facb1a4d4fe3640808',\nnodeURL:", "doc_id": "9ae4b014-0b83-4905-970a-904987780cc0", "embedding": null, "doc_hash": "2aa6bc37ade477bc99a78c5860852f6d5f70d2f97b9dfc719e48a03c023fae4e", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 31639, "end": 34394, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "cea5c4b4-97f7-4a93-be7d-a2a0b97994b9", "3": "e8b85e73-4f18-4fda-b98f-8771e793464c"}}, "__type__": "1"}, "e8b85e73-4f18-4fda-b98f-8771e793464c": {"__data__": {"text": "'https://neo3-testnet.neoline.vip'\n};\nSigns a provided messaged with an account selected by user. A randomized salt prefix is added to the input string before it is signed, and the specific string\n010001f0\n0000 is added to the hexString before signed. For the complete signing process, please go to Testbed.\nInput Arguments\n|Parameter||Description|\nmessage: string\n|The message to sign|\nSuccess Response\n|Parameter||Description|\npublicKey: string\n|Public key of account that signed message|\ndata: string\n|Original message signed|\nsalt: string\n|Salt added to original message as prefix, before signing|\nmessage: string\n|Signed message|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.signMessage({\nmessage: 'Hello world'\n})\n.then(signedMessage => {\nconst {\npublicKey,\nmessage,\nsalt,\ndata\n} = signedMessage;\nconsole.log('Public key used to sign:', publicKey);\nconsole.log('Original message:', message);\nconsole.log('Salt added to message:', salt);\nconsole.log('Signed data:', data);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'UNKNOWN_ERROR':\nconsole.log(description);\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\npublicKey: '\"03ba9524bd7479414be713c3a4f6f3ef35f90bb4b08f0f552211bf734c24415230\"',\ndata: '\"be506bf7e6851960bfe45968bf5dbbf79a9dc5dc63ee5b88629acfb288c435649c2766e977d4bc76253d8590bb3ca3d9b70efd71d6f7eebdf060dfa58c6601fd\"',\nsalt: '',\nmessage: 'Hello world'\n}\nsignMessageWithoutSalt Testbed\nSigns a provided messaged with an account selected by user. The specific string\n010001f0\n0000 is added to the hexString before signed. For the complete signing process, please go to Testbed.\nInput Arguments\n|Parameter||Description|\nmessage: string\n|The message to sign|\nSuccess Response\n|Parameter||Description|\npublicKey: string\n|Public key of account that signed message|\ndata: string\n|Original message signed|\nmessage: string\n|Signed message|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.signMessageWithoutSalt({\nmessage: 'Hello world'\n})\n.then(signedMessage => {\nconst {\npublicKey,\nmessage,\ndata\n} = signedMessage;\nconsole.log('Public key used to sign:', publicKey);\nconsole.log('Original message:', message);\nconsole.log('Signed data:', data);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'UNKNOWN_ERROR':\nconsole.log(description);\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\npublicKey: '\"02f9667a14b62a551f25a1b1ec4562e1c963ec6334d1ef5e088f3b5febddf4e648\"',\ndata:", "doc_id": "e8b85e73-4f18-4fda-b98f-8771e793464c", "embedding": null, "doc_hash": "e7ccf1afb11bca20786ba35fa9d7212c0513ecb95767806701cebf904eb46cc2", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 34460, "end": 37492, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "9ae4b014-0b83-4905-970a-904987780cc0", "3": "b29aaa44-cdd4-4b8e-9738-61dd0c221368"}}, "__type__": "1"}, "b29aaa44-cdd4-4b8e-9738-61dd0c221368": {"__data__": {"text": "'\"81bab889bb63fa1225cf4dd98f32e89575908b2510377f58c89bf84f4a71c5a6e8ee7a81f857ad9ee4fb30f1c7a97a2a33a597460186c3a854ec2c7f8b8901b0\"',\nmessage: 'Hello world'\n}\nsignTransaction\nSign the provided transaction with the account selected by the user.\nInput Arguments\n|Parameter||Description|\ntransaction: TransactionLike\n|The transaction to sign|\nmagicNumber?: number\n|Magic number of network found in protocol.json.|\nSuccess Response\n|Parameter||Description|\ntransaction: TransactionLike\n|Signed transaction|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneolineN3.signTransaction({\ntransaction: {\nversion: 0,\nnonce: 1262108766,\nsystemFee: 997775,\nnetworkFee: 122862,\nvalidUntilBlock: 667132,\nattributes: [],\nsigners: [{ account: \"8ddd95c4b5aa2b049abae570cf9bd4476e9b7667\", scopes: 1 }],\nwitnesses: [],\nscript: \"0b110c1467769b6e47d49bcf70e5ba9a042baab5c495dd8d0c1467769b6e47d49bcf70e5ba9a042baab5c495dd8d14c01f0c087472616e736665720c14f563ea40bc283d4d0e05c48ea305b3f2a07340ef41627d5b52\"\n},\nmagicNumber: 877933390\n})\n.then(signedTx => {\nconsole.log('Signed Transaction:', signedTx);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'UNKNOWN_ERROR':\nconsole.log(description);\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nversion: 0,\nnonce: 1262108766,\nsystemFee: 997775,\nnetworkFee: 122862,\nvalidUntilBlock: 667132,\nattributes: [],\nsigners: [{ account: \"8ddd95c4b5aa2b049abae570cf9bd4476e9b7667\", scopes: 1 }],\nwitnesses: [{\ninvocationScript: \"0c408f8bee3201d41706834fb91c8696d59744dfd927bea5a6bddd21d952d231f8836b0386989ecf017a1d0096c0acdb99503d29f65588bc4021b66a80f4b277ad8c\",\nverificationScript: \"0c2102f9667a14b62a551f25a1b1ec4562e1c963ec6334d1ef5e088f3b5febddf4e6484156e7b327\"\n}],\nscript: \"0b110c1467769b6e47d49bcf70e5ba9a042baab5c495dd8d0c1467769b6e47d49bcf70e5ba9a042baab5c495dd8d14c01f0c087472616e736665720c14f563ea40bc283d4d0e05c48ea305b3f2a07340ef41627d5b52\"\n}\nswitchWalletNetwork\nAllows NeoLine applications ('dapps') to request that the wallet switches its active Neo network.\n|Parameter||Description|\nchainId:number\n|Switch the chainId of the network|\nSuccess Response\nNull\nError Response\n|Parameter||Description|\ntype:", "doc_id": "b29aaa44-cdd4-4b8e-9738-61dd0c221368", "embedding": null, "doc_hash": "3cfd2206cad25708ba17ca537d56032b663e391cbf998fdfbccfc830b7ec63bc", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 37493, "end": 39932, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "e8b85e73-4f18-4fda-b98f-8771e793464c", "3": "61bfe5e7-d80e-4724-85ec-69f149d9bd35"}}, "__type__": "1"}, "61bfe5e7-d80e-4724-85ec-69f149d9bd35": {"__data__": {"text": "the network|\nSuccess Response\nNull\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneoline.switchWalletNetwork({\nchainId: 3\n})\n.then(() => {})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase UNKNOWN_ERROR:\nconsole.log(description);\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\nnull\nswitchWalletAccount\nAllows NeoLine applications ('dapps') to request that the wallet switches its active account.\nInput Arguments\nNone\nSuccess Response\n|Parameter||Description|\naddress: string\n|Address of the connected account|\nlabel?: string\n|A label the users has set to identify their wallet|\nisLedger: boolean\n|Whether the connected account is a ledger account|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneoline.switchWalletAccount()\n.then(account => {\nconst {\naddress,\nlabel,\nisLedger\n} = account;\nconsole.log('Provider address: ' + address);\nconsole.log('Provider account label (Optional): ' + label);\nconsole.log('Provider account is ledger account: ' + isLedger);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase UNKNOWN_ERROR:\nconsole.log(description);\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\naddress: 'AWSEU4BXpjGVdw9ajnFBXh8Rg8cgw9f3Zo',\nlabel: 'NEOLine',\nisLedger: false\n}\nExample\nPlease instantiate it before calling the common methods and common events of Neo2 and N3. See the example for details.\nwindow.addEventListener('NEOLine.NEO.EVENT.READY', () => {\nconst neoline = new NEOLine.Init();\n});\ngetNetworks\nReturns the networks the wallet provider has available to connect to, along with the default network the wallet is currently set to.\nInput Arguments\nNone\nSuccess Response\n|Parameter||Description|\nnetworks: string[]\n|Array of network names the wallet provider has available for the dapp developer to connect to|\nchainId:number\n|ChainId the wallet is currently set to|\ndefaultNetwork: string\n|Network the wallet is currently set to|\nChain IDs Type\nThese are the IDs of the Neo chain supported by NeoLine.\n|chainId||Description|\n1\n|ChainId 1 is the Neo2 MainNet|\n2\n|ChainId 2 is the Neo2 TestNet|\n3\n|ChainId 3 is the N3 MainNet|\n6\n|ChainId 6 is the N3 TestNet (Currently only N3 TestNet)|\n0\n|ChainId 0 is the N3 Private Network|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneoline.getNetworks()\n.then(result => {\nconst {\nchainId,\nnetworks,\ndefaultNetwork\n} = result;\nconsole.log('chainId: ' + chainId);\n// eg. 6\nconsole.log('Networks: ' + networks);\n// eg. [\"MainNet\", \"TestNet\", \"N3TestNet\"]\nconsole.log('Default network: ' + defaultNetwork);\n// eg. \"N3TestNet\"\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type)", "doc_id": "61bfe5e7-d80e-4724-85ec-69f149d9bd35", "embedding": null, "doc_hash": "7feed85c53dc6f417a3daf8a6c38c16f49ec1a75fe8b9597d09acb6394f85039", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 39856, "end": 43214, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "b29aaa44-cdd4-4b8e-9738-61dd0c221368", "3": "655e70a1-30a4-457d-b4eb-09988d3d6910"}}, "__type__": "1"}, "655e70a1-30a4-457d-b4eb-09988d3d6910": {"__data__": {"text": "=> {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_DENIED':\nconsole.log('The user rejected the request to connect with your dApp');\nbreak;\ncase 'CHAIN_NOT_MATCH':\nconsole.log('The currently opened chain does not match the type of the call chain, please switch the chain.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\nchainId: 6,\nnetworks: [\"MainNet\", \"TestNet\", \"N3TestNet\"],\ndefaultNetwork: \"N3TestNet\"\n}\ngetAccount\nReturn the Account that is currently connected to the dApp.\nInput Arguments\nNone\nSuccess Response\n|Parameter||Description|\naddress: string\n|Address of the connected account|\nlabel?: string\n|A label the users has set to identify their wallet|\nisLedger: boolean\n|Whether the connected account is a ledger account|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneoline.getAccount()\n.then(account => {\nconst {\naddress,\nlabel,\nisLedger\n} = account;\nconsole.log('Provider address: ' + address);\nconsole.log('Provider account label (Optional): ' + label);\nconsole.log('Provider account is ledger account: ' + isLedger);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_DENIED':\nconsole.log('The user rejected the request to connect with your dApp');\nbreak;\ncase 'CHAIN_NOT_MATCH':\nconsole.log('The currently opened chain does not match the type of the call chain, please switch the chain.');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\naddress: 'NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq',\nlabel: 'NEOLine',\nisLedger: false\n}\ngetPublicKey\nReturn the public key of the Account that is currently connected to the dApp.\nInput Arguments\nNone\nSuccess Response\n|Parameter||Description|\naddress: string\n|Address of the connected account|\npublicKey: string\n|Public key of the connected account|\nError Response\n|Parameter||Description|\ntype: string\n|The type of error which has occured|\ndescription: string\n|A description of the error which has occured|\ndata: string\n|Any raw data associated with the error|\n/* Example */\nneoline.getPublicKey()\n.then(publicKeyData => {\nconst {\naddress,\npublicKey\n} = publicKeyData;\nconsole.log('Account address: ' + address);\nconsole.log('Account public key: ' + publicKey);\n})\n.catch((error) => {\nconst {type, description, data} = error;\nswitch(type) {\ncase 'NO_PROVIDER':\nconsole.log('No provider available.');\nbreak;\ncase 'CONNECTION_DENIED':\nconsole.log('The user rejected the request to connect with your dApp');\nbreak;\ndefault:\n// Not an expected error object. Just write the error to the console.\nconsole.error(error);\nbreak;\n}\n});\n/* Example Response */\n{\naddress: 'NaUjKgf5vMuFt7Ffgfffcpc41uH3adx1jq',\npublicKey: '6PYKGV4numxfoswwCedXzhb1oNCC8W4tEdfFPdtWtFa8WidpzYfeJkd2To'\n}\nREADY\nOn a READY event, the callback will", "doc_id": "655e70a1-30a4-457d-b4eb-09988d3d6910", "embedding": null, "doc_hash": "2d69fb4135d78a44f3cc67a00d3886980249139d08a79792566cd63ce806522e", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 43240, "end": 46485, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "61bfe5e7-d80e-4724-85ec-69f149d9bd35", "3": "b21f39c4-6a3f-4d67-81f6-d6d27983440e"}}, "__type__": "1"}, "b21f39c4-6a3f-4d67-81f6-d6d27983440e": {"__data__": {"text": "a READY event, the callback will fire with a single argument with information about the wallet provider. At any time a READY event listener is added, it will immidiately be called if the provider is already in a ready state. This provides a single flow for dapp developers since this listener should start any and all interactions with the dapi protocol.\n|Parameter||Description|\nname: string\n|The name of the wallet provider|\nwebsite: string\n|The website of the wallet provider|\nversion: string\n|The version of the dAPI that the the wallet supports|\ncompatibility: string[]\n|A list of all applicable NEPs which the wallet provider supports|\nextra: object\n|Provider specific attributes|\n/* Example */\nwindow.addEventListener('NEOLine.NEO.EVENT.READY', () => {\nconsole.log('dAPI common method loading is complete.');\n});\nACCOUNT_CHANGED\nOn a ACCOUNT_CHANGED event, the callback will fire with a single argument of the new account. This occurs when an account is already connected to the dapp, and the user has changed the connected account from the dapi provider side.\n|Parameter||Description|\naddress: string\n|Address of the connected account|\nlabel: string\n|A label the users has set to identify their wallet|\n/* Example */\nneoline.addEventListener(neoline.EVENT.ACCOUNT_CHANGED, (result) => {\nconsole.log('account changed:', result);\n});\n/* Another */\nwindow.addEventListener('NEOLine.NEO.EVENT.ACCOUNT_CHANGED', (result) => {\nconsole.log('account changed:', result.detail);\n});\nCONNECTED\nOn a CONNECTED event, the user has approved the connection of the dapp with one of their accounts. This will fire the first time any of one of the following methods are called from the dapp:\ngetAccount,\ninvoke,\nsend.\n|Parameter||Description|\naddress: string\n|Address of the new account|\nlabel: string\n|A label the users has set to identify their wallet|\n/* Example */\nneoline.addEventListener(neoline.EVENT.CONNECTED, (result) => {\nconsole.log('connected account:', result);\n});\n/* Another */\nwindow.addEventListener('NEOLine.NEO.EVENT.CONNECTED', (result) => {\nconsole.log('connected account:', result.detail);\n});\nDISCONNECTED\nOn a DISCONNECTED event, the account connected to the dapp via the dapi provider has been disconnected (logged out).\n/* Example */\nneoline.addEventListener(neoline.EVENT.DISCONNECTED, () => {\nconsole.log('dAPI public method loading is complete.');\n});\n/* Another */\nwindow.addEventListener('NEOLine.NEO.EVENT.DISCONNECTED', () => {\nconsole.log('dAPI public method loading is complete.');\n});\nNETWORK_CHANGED\nOn a NETWORK_CHANGED event, the user has changed the network their provider wallet is connected to. The event will return the updated network details.\n|Parameter||Description|\nnetworks: string[]\n|A list of all networks which this wallet provider allows access to|\nchainId:number\n|chainId the wallet is currently set to|\ndefaultNetwork: string\n|Network the wallet is currently set to|\n/* Example */\nneoline.addEventListener(neoline.EVENT.NETWORK_CHANGED, (result) => {\nconsole.log('network:', result);\n});\n/* Another */\nwindow.addEventListener('NEOLine.NEO.EVENT.NETWORK_CHANGED', (result) => {\nconsole.log('network:', result.detail);\n});\nBLOCK_HEIGHT_CHANGED\nOn a BLOCK_HEIGHT_CHANGED event, the block has advanced to the next.\n|Parameter||Description|\nchainId: number\n|ChainId is the type of wallet selection network|\nblockHeight: number\n|Height of the new block|\nblockTime: number\n|Timestamp of the new block|\nblockHash: string\n|Hash of the new block|\ntx: string[]\n|List", "doc_id": "b21f39c4-6a3f-4d67-81f6-d6d27983440e", "embedding": null, "doc_hash": "dfede93fae3b84a54557c04344ee4e8ff53075c11229729e834e499914ae1214", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 46511, "end": 50011, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "655e70a1-30a4-457d-b4eb-09988d3d6910", "3": "6012082a-0274-430b-ae87-392cd8a10016"}}, "__type__": "1"}, "6012082a-0274-430b-ae87-392cd8a10016": {"__data__": {"text": "string\n|Hash of the new block|\ntx: string[]\n|List of transaction ids executed in the new block|\n/* Example */\nneoline.addEventListener(neoline.EVENT.BLOCK_HEIGHT_CHANGED, (result) => {\nconsole.log('block height:', result);\n});\n/* Another */\nwindow.addEventListener('NEOLine.NEO.EVENT.BLOCK_HEIGHT_CHANGED', (result) => {\nconsole.log('block height:', result.detail);\n});\nTRANSACTION_CONFIRMED\nOn a TRANSACTION_CONFIRMED event, a previously broadcast transaction via the dapi has been confirmed by the blockchain.\n|Parameter||Description|\nchainId: number\n|ChainId is the type of wallet selection network|\ntxid: string\n|Transaction id which was confirmed on chain|\nblockHeight: number\n|Height of the new block|\nblockTime: number\n|Timestamp of the new block|\n/* Example */\nneoline.addEventListener(neoline.EVENT.TRANSACTION_CONFIRMED, (result) => {\nconsole.log('Transaction confirmation detail:', result);\n});\n/* Another */\nwindow.addEventListener('NEOLine.NEO.EVENT.TRANSACTION_CONFIRMED', (result) => {\nconsole.log('Transaction confirmation detail:', result.detail);\n});\naddEventListener\nMethod is used to add a callback method to be triggered on a specified event.\n/* Example */\nconst fn = (data) => {\nconsole.log(`Connected Account: ${data.address}`);\n}\nneoline.addEventListener(neoline.EVENT.ACCOUNT_CHANGED, fn);\n/* Another */\nconst fn = (data) => {\nconsole.log(`Connected Account: ${data.detail.address}`);\n}\nwindow.addEventListener('NEOLine.NEO.EVENT.ACCOUNT_CHANGED', fn) ;\nremoveEventListener\nMethod is to remove existing callback event listeners.\n/* Example */\nneoline.removeEventListener(neoline.EVENT.ACCOUNT_CHANGED, fn);\n/* Another */\nwindow.removeEventListener('NEOLine.NEO.EVENT.ACCOUNT_CHANGED', fn);\nErrors\nThe NEO dAPI will provide these basic errors. It is up to the wallet provider to provide additional information if they choose:\n|Error Type||Meaning|\nNO_PROVIDER\n|Thrown when there is no interface capable of interacting with NEO blockchain|\nCONNECTION_DENIED\n|Thrown when API provider refuses to execute a transaction (e.g. trying to execute a transaction on an unavialable network)|\nRPC_ERROR\n|Thrown when a command relying on RPC connection to a network node fails|\nMALFORMED_INPUT\n|Thrown when an input such as the address is not a valid NEO address|\nCANCELED\n|Thrown when a user cancels, or refuses the dapps request|\nINSUFFICIENT_FUNDS\n|Thrown when the action does not have a sufficient balance|\nCHAIN_NOT_MATCH\n|The currently opened chain does not match the type of the call chain, please switch the chain|\nSCRIPT_ERROR\n|Script creation error, please check whether the parameters are correct|\nFAIL\n|The request failed|", "doc_id": "6012082a-0274-430b-ae87-392cd8a10016", "embedding": null, "doc_hash": "9b8e1ea50a64da5499881a81c0f8f236a07408af67442875bb4722069008787f", "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}, "node_info": {"start": 49989, "end": 52635, "_node_type": "1"}, "relationships": {"1": "0244e36b-7bd3-4a6d-982b-99c36271e89f", "2": "b21f39c4-6a3f-4d67-81f6-d6d27983440e"}}, "__type__": "1"}, "ff1337c7-433a-448a-bbd3-6f74b2fba314": {"__data__": {"text": "WalletConnect 2.0 Core SDK for Neo\nMade by COZ.IO\nFor more documentation check out our docs.\nFor React, try out the React SDK.\nInstall the dependency on your client-side application:\nnpm i @cityofzion/wallet-connect-sdk-core\nInitialize the client:\nimport {WcSdk} from \"@cityofzion/wallet-connect-sdk-core\";\nconst wcInstance = new WcSdk()\nawait wcInstance.initClient(\n\"debug\", // logger: use 'debug' to show all log information on browser console, use 'error' to show only errors\n\"wss://relay.walletconnect.org\" // we are using walletconnect's official relay server\n);\nwcInstance.subscribeToEvents({\nonProposal: (uri: string) => {\n// show the QRCode, you can use @walletconnect/qrcode-modal to do so, but any QRCode presentation is fine\nQRCodeModal.open(uri, () => {})\n// alternatively you can show Neon Wallet Connect's website, which is more welcoming\nwindow.open(`https://neon.coz.io/connect?uri=${uri}`, '_blank').focus();\n},\nonDeleted: () => {\n// here is where you describe a logout callback\nlogout()\n}\n})\nawait wcInstance.loadSession()\nif (wcInstance.session) {\nconsole.log(wcInstance.accountAddress) // print the first connected account address\nconsole.log(wcInstance.chainId) // print the first connected account chain info\nconsole.log(wcInstance.session.state.accounts); // print all the connected accounts (with the chain info)\nconsole.log(wcInstance.session.peer.metadata); // print the wallet metadata\n}\nStart the process of establishing a new connection, to be used when there is no\nwcInstance.session\nif (!wcInstance.session) {\nawait wcInstance.connect({\nchains: [\"neo3:testnet\", \"neo3:mainnet\"], // the blockchains your dapp accepts to connect\nmethods: [ // which RPC methods do you plan to call\n\"invokeFunction\",\n\"testInvoke\",\n\"signMessage\",\n\"verifyMessage\"\n],\nappMetadata: {\nname: \"MyApplicationName\", // your application name to be displayed on the wallet\ndescription: \"My Application description\", // description to be shown on the wallet\nurl: \"https://myapplicationdescription.app/\", // url to be linked on the wallet\nicons: [\"https://myapplicationdescription.app/myappicon.png\"], // icon to be shown on the wallet\n}\n})\n// the promise will be resolved after the connection is accepted or refused, you can close the QRCode modal here\nQRCodeModal.close()\n// and check if there is a connection\nconsole.log(wcInstance.session ? 'Connected successfully' : 'Connection refused')\n}\nIt's interesting to have a button to allow the user to disconnect it's wallet, call\ndisconnect when this happen:\nawait wcInstance.disconnect();\nEvery request is made via JSON-RPC. You need to provide a method name that is expected by the wallet and listed on\nthe\nmethods property of the options object as well as some additional\nparameters.\nThe JSON-RPC format accepts parameters in many formats. The rules on how to construct this request will depend entirely on the blockchain you are using. The code below is an example of a request constructed for the Neo Blockchain:\nconst result = await wcInstance.sendRequest({\nmethod: 'getapplicationlog',\nparams: ['0x7da6ae7ff9d0b7af3d32f3a2feb2aa96c2a27ef8b651f9a132cfaad6ef20724c']\n})\n// the response format depends interely on the blockchain response format\nif (resp.result.error && resp.result.error.message) {\nwindow.alert(resp.result.error.message);\n}\nTo invoke a SmartContract method you can", "doc_id": "ff1337c7-433a-448a-bbd3-6f74b2fba314", "embedding": null, "doc_hash": "b13514bc79d0dacc3c25eca4647f1435758e8797e5289926e1e840feceef1932", "extra_info": {"file_path": "https://neon.coz.io/wksdk/core/index.html"}, "node_info": {"start": 0, "end": 3334, "_node_type": "1"}, "relationships": {"1": "7a6891e7-37a1-4f88-8e86-81462c0aa00c", "3": "04d7374f-ddee-487c-86bf-ee78f126bb8b"}}, "__type__": "1"}, "04d7374f-ddee-487c-86bf-ee78f126bb8b": {"__data__": {"text": "invoke a SmartContract method you can use\nWcSdk.sendRequest with\ninvokeFunction as method, but WcSdk\nhas a shortcut:\nWcSdk.invokeFunction.\nOn the example below we are invoking the\ntransfer method of the\nGAS token. Neo blockchain expect params with\n{ type, value } format, and on\ntype you should provide one of the types mentioned\nhere.\nWcSdk has some special types to facilitate:\nAddress and\nScriptHash.\nFor reference, developers should reference the contract manifest on the contracts details pages on dora to understand the methods and argument types needed. For this example: GAS\nCheck it out:\nconst invocation: ContractInvocation = {\nscriptHash: '0xd2a4cff31913016155e38e474a2c06d08be276cf', // GAS token\noperation: 'transfer',\nargs: [\n{ type: 'Address', value: wcInstance.accountAddress },\n{ type: 'Address', value: 'NbnjKGMBJzJ6j5PHeYhjJDaQ5Vy5UYu4Fv' },\n{ type: 'Integer', value: 100000000 },\n{ type: 'Array', value: [] }\n]\n}\nconst signer: Signer = {\nscope: WitnessScope.Global\n}\nconst resp = await wcInstance.invokeFunction(invocation, signer)\nTo retrieve information from a SmartContract without persisting any information on the blockchain you can use\nWcSdk.sendRequest with\ntestInvoke as method, but WcSdk\nhas a shortcut:\nwalletConnectCtx.testInvoke.\nOn the example below we are invoking the\nbalanceOf method of the\nGAS token.\nIs expected for the Wallets to not ask the user for authorization on testInvoke.\nCheck it out:\nconst invocation: ContractInvocation = {\nscriptHash: '0xd2a4cff31913016155e38e474a2c06d08be276cf', // GAS token\noperation: 'balanceOf',\nargs: [\n{type: 'Address', value: wcInstance.accountAddress}\n]\n}\nconst signer: Signer = {\nscopes: WitnessScope.Global\n}\nconst resp = await wcInstance.testInvoke(invocation, signer)\nThere is more information on the documentation website\nGenerated using TypeDoc", "doc_id": "04d7374f-ddee-487c-86bf-ee78f126bb8b", "embedding": null, "doc_hash": "aa9a8f49bb782f3c65c23578f57ca56dccab2ec59229fbe4db537a8dca332132", "extra_info": {"file_path": "https://neon.coz.io/wksdk/core/index.html"}, "node_info": {"start": 3297, "end": 5124, "_node_type": "1"}, "relationships": {"1": "7a6891e7-37a1-4f88-8e86-81462c0aa00c", "2": "ff1337c7-433a-448a-bbd3-6f74b2fba314"}}, "__type__": "1"}, "6989c740-8184-49ee-ab04-c509ff79caaf": {"__data__": {"text": "<p align=\"center\">\n  <img\n    src=\".github/resources/images/coz.png\"\n    width=\"200px;\">\n</p>\n\n<p align=\"center\">\n  A WalletConnect SDK for the Neo3 ecosystem.\n  <br/> Made with \u2764 by <b>COZ.IO</b>\n</p>\n\n# WalletConnect SDK\nA [COZ](https://www.coz.io/) WalletConnect 2.0 SDK for ecosystem tools. WcSdk is an auxiliary library built to help the usage of\n[walletconnect](https://github.com/WalletConnect/walletconnect-monorepo) with NEO 3 Wallets.\n\n- [Installation and Setup](#installation-and-setup)\n- [Usage](#usage)\n- [How to test?](#how-to-test)\n\n## Why WalletConnect?\nEnhance security and trust in dApps by using WalletConnect, which eliminates the need to share private keys for\ntransaction signing. [Read More](WHY_WALLETCONNECT.md).\n\n## Example video\n![Video](demo.gif)\n\nThis example is showing the [wc-dapp-vite-vanilla](examples/wc-dapp-vite-vanilla) example connecting with\n[Neon Wallet](https://neonwallet.com/) to make a GAS transfer.\n\n## Installation and Setup\n- [WcSdk React](packages/wallet-connect-sdk-react/README.md) - For React.js with streamlined state changes.\n- [WcSdk Svelte](packages/wallet-connect-sdk-svelte/README.md) - For svelte.js with streamlined state changes.\n- [WcSdk Core](packages/wallet-connect-sdk-core/README.md) - For other technologies with the same features.\n\n## Usage\nCheck this [Usage Guide](USAGE_GUIDE.md) to see how to use this SDK on your application.\n\n## How to test?\nThis SDK uses \n[WalletConnect 2.0](https://docs.walletconnect.org/v/2.0/) protocol and was designed to work on the NEO 3 blockchain.\nYou will need a Wallet application that fits these requirements, we recommend [Neon Wallet](https://neonwallet.com/).", "doc_id": "6989c740-8184-49ee-ab04-c509ff79caaf", "embedding": null, "doc_hash": "6ef29fffa34bf37e292449d55a5e783220a17428235ed63e93f1edb7ac7d7ce3", "extra_info": {"file_path": "https://github.com/CityOfZion/wallet-connect-sdk/blob/main/README.md"}, "node_info": {"start": 0, "end": 1665, "_node_type": "1"}, "relationships": {"1": "e8b8f78947e9728f095b1f6e331b60f46fe89707"}}, "__type__": "1"}, "7a27155e-d844-4eb2-a1e8-ace72a88b86b": {"__data__": {"text": "<p align=\"center\">\n<a href=\"https://neo.org/\">\n      <img\n      src=\"https://neo3.azureedge.net/images/logo%20files-dark.svg\"\n      width=\"250px\" alt=\"neo-logo\">\n  </a>\n</p>\n\n<p align=\"center\">      \n  <a href=\"https://github.com/neo-project/neo-modules/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License\">\n  </a>\n  <a href=\"https://github.com/neo-project/neo-modules/releases\">\n    <img src=\"https://badge.fury.io/gh/neo-project%2Fneo-modules.svg\" alt=\"Current neo-modules version.\">\n  </a>    \n</p>\n\n## What is it\n\nA set of plugins/modules that can be used inside the NEO core library is available in this repository. You can refer to [the official documentation](https://docs.neo.org/docs/en-us/node/cli/setup.html) for the more detailed usage guide. \n\nIn addition, a C# SDK module is included for developers to call RPC methods with ease.\n\n## Using Plugins\nPlugins can be used to increase functionality, as well as providing policies definitions of the network.\nOne common example is to add the ApplicationLogs plugin in order to enable your node to create log files.\n\nTo configure a plugin, you can directly download the desired plugin from the [Releases page](https://github.com/neo-project/neo-modules/releases).\n\nAlternatively, you can compile from source code by following the below steps:\n- Clone this repository;\n- Open it in Visual Studio, select the plugin you want to enable and select `publish` \\(compile it using Release configuration\\)\n- Create the Plugins folder in neo-cli / neo-gui (where the binary file is located, such as `/neo-cli/bin/Release/netcoreapp3.0/Plugins`)\n- Copy the .dll and the folder with the configuration files into the `Plugins` folder.\n  - Remarkably, you should put the dependency of the plugin in the `Plugins` folder as well. For example, since the `RpcServer` has the package reference on the `Microsoft.AspNetCore.ResponseCompression`, so the corresponding dll file should be put together with the plugin.\n\nThe resulting folder structure is going to be like this:\n\n```sh\n./neo-cli.dll\n./Plugins/ApplicationLogs.dll\n./Plugins/ApplicationsLogs/config.json\n```\n\n## Plugins/Modules\n\n### ApplicationLogs\nAdd this plugin to your application if need to access the log files. This can be useful to handle notifications, but remember that this also largely increases the space used by the application. `LevelDBStore` and `RpcServer` are also needed for this plugin. You can find more details [here](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html).\n\n### StatesDumper\nExports neo-cli status data \\(useful for debugging\\), such as storage modifications block by block.\n\n### LevelDBStore\nIf there is no further modification of the configuration file of the neo-node, it is the default storage engine in the NEO system. In this case, you should paste the `LevelDBStore` in the Plugins before launching the node.\n\n### RocksDBStore\nYou can also use `RocksDBStore` in the NEO system by modifying the default storage engine section in the configuration file.\n\n### RpcServer\nPlugin for hosting a RpcServer on the neo-node, being able to disable specific calls.\n\n### RpcNep17Tracker\nPlugin that enables", "doc_id": "7a27155e-d844-4eb2-a1e8-ace72a88b86b", "embedding": null, "doc_hash": "927e6c09abc053ce1faeefc03efffa28be4f5a24d8c06bb23c6b41cd36d0ceae", "extra_info": {"file_path": "https://github.com/neo-project/neo-modules/blob/master/README.md"}, "node_info": {"start": 0, "end": 3219, "_node_type": "1"}, "relationships": {"1": "91e0aa3b45c62b81946b2373213cd67a65bf97b4", "3": "22880495-38e3-49ea-9f7c-b975894ad719"}}, "__type__": "1"}, "22880495-38e3-49ea-9f7c-b975894ad719": {"__data__": {"text": "to disable specific calls.\n\n### RpcNep17Tracker\nPlugin that enables NEP17 tracking using LevelDB.\nThis module works in conjunction with RpcServer, otherwise, just local storage (on leveldb) would be created. \n\n## C# SDK\n\n### RpcClient\nThe RpcClient Project is an individual SDK that is used to interact with NEO blockchain through NEO RPC methods for development using. The main functions include RPC calling, Transaction making, Contract deployment & calling, and Asset transfering.\nIt needs a NEO node with the `RpcServer` plugin as a provider. And the provider needs more plugins like `RpcNep17Tracker` and `ApplicationLogs` if you want to call RPC methods supplied by the plugins.\n", "doc_id": "22880495-38e3-49ea-9f7c-b975894ad719", "embedding": null, "doc_hash": "efd8dd02489d691d5128cc610b3e3d5f95282904d029790c44aa62fb3faa4cdf", "extra_info": {"file_path": "https://github.com/neo-project/neo-modules/blob/master/README.md"}, "node_info": {"start": 3152, "end": 3837, "_node_type": "1"}, "relationships": {"1": "91e0aa3b45c62b81946b2373213cd67a65bf97b4", "2": "7a27155e-d844-4eb2-a1e8-ace72a88b86b"}}, "__type__": "1"}, "671d906d-f7c5-4b9f-bc47-83cf7a805534": {"__data__": {"text": "# Neo Shell and Worknet (Preview)\n\nNeo Shell is a cross-platform, extensible, unified command-line interface for managing Neo N3 chain resources on worknet, testnet etc. The Neo Shell enables developers to execute commands through a terminal using interactive command-line \nprompts or scripts. Similar in spirit, and inspired by the likes of Unix-style shells, \"neosh\" is an extensible command processor that runs in a terminal window. \n\nWith Neo Shell, developers can perform various tasks such as deploying contracts, invoking contracts, querying blocks, \ntransactions, addresses and more. Neo Shell support for custom commands and extensions is in the works. Neo Shell is designed with extensibility and customization in mind, and we expect that the Neo N3 ecosystem and communities will extend Neo Shell with additional tasks and utilities based on developer feedback. \n\nNeo WorkNet was developed based on community feedback and our own experience to fill a need that exists between privatenets, testnets and mainnets. There are four sets of capabilities that are packaged into the *new* New WorkNet.\n\nFirst, Neo WorkNet is designed to address the specific needs of teams of developers, from projects through to large organizations. We have in the backlog integrations for bug/issue tracking, restrospectives, sprint management etc. Second, Neo WorkNet is designed to mimic a point-in-time state of a testnet/mainnet, and enables the cloning of a specific instance; and which is expected to be eventually discarded and/or superceded by a newer point-in-time state. Third, Neo WorkNet is designed to enable an enhanced CI/CD developer experience. Lastly, similar to the Neo Shell, Neo Worknet is also architected with extensibility at its core, and is designed to be extended with plug-ins, to add newer capabilities over time.\n\nNeo Worknet enables a developer to create and run a Neo N3 consensus node that branches from a public Neo N3 \nblockchain - including the official Neo N3 Mainnet and T5 Testnet. This provides the developer a local environment that\nmirrors the state of a known public network at a branch point. Changes to the local branch of the network are independent \nof the public network.\n\n## Requirements\n\nNeo Shell and Neo-Worknet require [version 6.0](https://dotnet.microsoft.com/en-us/download/dotnet/6.0) of\n[the .NET developer platform](https://dot.net) to be installed. \n\n### Additional Neo-Worknet Requirements\n\nNeo-Worknet has additional platform-specific requirements beyond .NET 6 on Ubuntu and macOS.\n\n> Note, these are the same additional requirements that Neo-Express has. If you already are running Neo-Express, \n> Neo-Worknet will also run fine.\n\n#### Ubuntu Installation\n\nInstalling Neo-Worknet on Ubuntu requires installing libsnappy-dev, libc6-dev and librocksdb-dev via apt-get\n\n``` shell\nsudo apt install libsnappy-dev libc6-dev librocksdb-dev -y\n```\n\n#### MacOS Installation\n\nInstalling Neo-Worknet on MacOS requires installing rocksdb via [Homebrew](https://brew.sh/)\n\n``` shell\nbrew install rocksdb\n```\n\n## Installation\n\nNeo Shell and Neo-worknet are distributed as [.NET Tools](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools).\n.NET tools are [NuGet](https://nuget.org) packages containing console applications that can be installed on a developer's\nmachine via the `dotnet tool` command.\n\nTo install the latest version of these tools globally on youre developer machine, use the `dotnet tool install` command\nin a terminal window.\n\n``` shell\ndotnet tool install Neo.Shell -g --prerelease\ndotnet tool install Neo.WorkNet -g", "doc_id": "671d906d-f7c5-4b9f-bc47-83cf7a805534", "embedding": null, "doc_hash": "cdc258267c3f49a7eebae3a60303c066d9c0404e1ac290f76a82c9366422159e", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/README.md"}, "node_info": {"start": 0, "end": 3584, "_node_type": "1"}, "relationships": {"1": "d74edf5761cd6546943abe8777543addfdc504dc", "3": "5f06d214-890f-49c2-95f1-f0040b8df79e"}}, "__type__": "1"}, "5f06d214-890f-49c2-95f1-f0040b8df79e": {"__data__": {"text": "-g --prerelease\ndotnet tool install Neo.WorkNet -g --prerelease\n```\n\n> Note, while these tools are in preview, the `--prerelease` option for `dotnet tool install` is required. \n\nTo update these tools to the latest version, run the `dotnet tool update`\ncommand in a terminal window.\n\n``` shell\ndotnet tool update Neo.Shell -g --prerelease\ndotnet tool update Neo.WorkNet -g --prerelease\n```\n\n.NET tools also support \"local tool\" installation. This allows for different versions of a .NET tool to be installed in\ndifferent directories. Full details on installing and updating .NET tools are available in the\n[official documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools).\n\n## Shell\n\n### Installation (Preview)\n\nThe Neo Blockchain Toolkit has a public [package feed](https://dev.azure.com/ngdenterprise/Build/_artifacts).\nthat contains interim builds of Neo Shell and Worknet. You can unreleased preview builds of Neo-Shell by using the \n`--add-source` option to specify the Neo Blockchain Toolkit package feed.\n\nFor example, to update to the latest main branch version of Neo-Shell, you would run this command:\n\n``` shell\ndotnet tool update Neo.Shell -g --add-source https://pkgs.dev.azure.com/ngdenterprise/Build/_packaging/public/nuget/v3/index.json --prerelease\n```\n\nYou can also specify specific versions of these tools to install by using the `--version` command line options.\nFor more details, please see the [official dotnet tool documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools#install-a-specific-tool-version).\n\nIf you regularly use unreleased versions of these tools in a given project, you can specify the Neo Blockchain Toolkit \npackage feed in a \n[NuGet.config file](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior#changing-config-settings).\nSeveral Neo sample projects like \n[NeoContributorToken](https://github.com/ngdenterprise/neo-contrib-token)\nuse a NuGet.config file.\n\n### Extending NEO Shell\n\nNEO Shell allows developers to extend its functionality by adding custom commands. To do this, create a ~/.neo/neosh-extensions.json file that contains a list of commands executable from the shell. NEO Shell communicates with extensions using standard input/output.\n\nThere are two types of extensions.\n\n1. NEO shell handles connections to the network. All commands are available through NEO shell. The following is an example of a `~/.neo/neosh-extensions.json` file that adds all `worknet` commands to the shell. The only requirement is that the command needs to implement an --Input parameter. This parameter is used to pass the network connection information to the command. \"mapsToCommand\" value can be a full path to the executable.\n\n```json\n[\n    {\n        \"name\": \"NEO Worknet\",\n        \"command\": \"worknet\",\n        \"mapsToCommand\": \"neo-worknet\"\n    }\n]\n```  \n\n```json\n[\n    {\n        \"name\": \"NEO Worknet\",\n        \"command\": \"worknet\",\n        \"mapsToCommand\": \"neo-worknet\"\n    }\n]\n```\n\nAn example command looks like this: `neosh neo-worknet storage get 0x5423fc51fea5ac443759323bbbccdc922cd3311c", "doc_id": "5f06d214-890f-49c2-95f1-f0040b8df79e", "embedding": null, "doc_hash": "59b2a4271a17af4dafbbb6fca02e4adf47269441af8fd12b2f555fb2436054db", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/README.md"}, "node_info": {"start": 3540, "end": 6651, "_node_type": "1"}, "relationships": {"1": "d74edf5761cd6546943abe8777543addfdc504dc", "2": "671d906d-f7c5-4b9f-bc47-83cf7a805534", "3": "5add8527-8444-4c01-a4a3-5ddd9e6deee4"}}, "__type__": "1"}, "5add8527-8444-4c01-a4a3-5ddd9e6deee4": {"__data__": {"text": "0x17F9075AE0136F96FA4EE537CE667989A88DE65A1C31373031`\n\n2. In addition to handling connections to the network, NEO shell can also invoke smart contracts on behalf of the commands. This is done by adding the `invokeContract` and `safe` parameters to the extension. The `invokeContract` parameter is used to indicate that the command will invoke a smart contract. The `safe` parameter is used to indicate that the command will not change the state of the blockchain. The following is an example of a `~/.neo/extensions.json` file that adds all `nft` commands to the shell. The `nft` command has two commands that can be invoked. The `transfer` command will change the state of the blockchain. The `ownerOf` command will not change the state of the blockchain.\n\n```json\n[\n    {\n        \"name\": \"NEO NFT\",\n        \"command\": \"nft\",\n        \"mapsToCommand\": \"neonft\", \n        \"commands\": [\n            {\n                \"command\": \"transfer\",\n                \"invokeContract\": true,\n                \"safe\": false\n            },\n            {\n                \"command\": \"ownerOf\",\n                \"invokeContract\": true,\n                \"safe\": true\n            }\n        ]\n    }\n]\n```\n\nThe extension commands are required to pass unsigned scripts to the NEO shell through standard out. The NEO shell will sign the scripts, execute the contract and output the result through standard out. The following is an example of a `neonft` command that will transfer an NFT from one address to another. The following snippet from the [NeoNFT] project shows how to pass the unsigned script to the NEO shell.\n\n```csharp\n...\nvar script = contractHash.MakeScript(\"transfer\", toHash, idBytes, string.Empty);\nvar payload = new { Script = Convert.ToBase64String(script), Account = this.Account, Trace = this.Trace, Json = this.Json };\nConsole.WriteLine(JsonConvert.SerializeObject(payload));\n```\n\n## Worknet\n\n### Extending NEO Worknet\n\nNeo Worknet's capabilities can be extended through the use of plugins or modules. The [Neo Modules](https://github.com/neo-project/neo-modules/tree/master) package offers a variety of plugins compatible with both Neo and Neo Worknet. To utilize these plugins, simply copy the DLL files containing the plugins into either the ~/.neo/plugins directory or the /plugins directory located within the worknet executable folder. Upon initiation, Neo Worknet will automatically load and activate these plugins.\n\nAs an illustrative example, we've included a sample Worknet plugin, WorkNetLogger, in the /workenet-ext directory. This plugin is designed to direct Worknet's logs to a specified file. It operates by reading the designated log file path from a custom config.json file, and then recording the logs into this file.\n\nIf your Worknet plugin requires custom configuration, it's essential to ensure that the plugin class overrides the ConfigFile property. This enables the GetConfiguration() method to locate the config.json file. Without the override, the default ConfigFile value will be sourced from the PluginsDirectory property, which is relative to the assembly location.\n\nAfter building the plugin, copy both the", "doc_id": "5add8527-8444-4c01-a4a3-5ddd9e6deee4", "embedding": null, "doc_hash": "2faeee008e584f89fb8e36bd4ec6902ff0c19d50b0f614354335f2bb1a1fc49e", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/README.md"}, "node_info": {"start": 6697, "end": 9828, "_node_type": "1"}, "relationships": {"1": "d74edf5761cd6546943abe8777543addfdc504dc", "2": "5f06d214-890f-49c2-95f1-f0040b8df79e", "3": "d9b035ec-225f-4ab6-b4cc-b457e35feb46"}}, "__type__": "1"}, "d9b035ec-225f-4ab6-b4cc-b457e35feb46": {"__data__": {"text": "property, which is relative to the assembly location.\n\nAfter building the plugin, copy both the \"worknet-ext-filelogger.dll\" and config.json files to the ~/.neo/plugins directory. Upon startup, Worknet will automatically identify, load and execute the plugin. If preferred, you may also create a /plugins directory within the same directory as the neo-worknet executable, and relocate the DLL to this /plugins directory.\n", "doc_id": "d9b035ec-225f-4ab6-b4cc-b457e35feb46", "embedding": null, "doc_hash": "63ef58afc01ff379d984ccb527cd13f96465d17c5646d0f46c41854b7340f753", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/README.md"}, "node_info": {"start": 9733, "end": 10154, "_node_type": "1"}, "relationships": {"1": "d74edf5761cd6546943abe8777543addfdc504dc", "2": "5add8527-8444-4c01-a4a3-5ddd9e6deee4"}}, "__type__": "1"}, "cd5bdcc4-1d77-4923-b31d-5d4ce16c535e": {"__data__": {"text": "# Neo Shell Command Reference\n\nNeo Shell is a cross-platform and extensible, unified command-line interface for managing Neo N3 chain resources on worknet\nand testnet etc. The Neo Shell enables developers to execute commands through a terminal using interactive command-line \nprompts or scripts.\n\n> Note, you can pass -?|-h|--help to show a list of supported commands or to show help information about a specific command.\n\n## Usage\n\n``` shell\nneosh COMMAND|EXTENSION [sub-commands] [\u2014Global flags]\n```\n\n## Specifying Signing and Non-Signing Accounts\n\nMany of the Neo-Express commands require the user to specify account information. In some cases, this\naccount is used to sign a transaction that is submitted to the blockchain network. \n\n### Specifying a Signing Account\n\nAn account used for signing must have an accessible private key. Signing accounts can be specified in\nmultiple ways:\n\n- Neo-Express or Worknet wallet nickname. Note, this includes `node1` etc to specify the default wallet account\n  associated with each consensus node\n- A [WIF encoded](https://developer.bitcoin.org/devguide/wallets.html#wallet-import-format-wif) private key\n- A [standard NEP-2 Passphrase-protected private key](https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki).\n    - When using a NEP-2 protected private key, the passphrase must be specified using the `--password` option\n- The path to a [standard NEP-6 JSON wallet](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki).\n    - When using a NEP-6 wallet, the password must be specified using the `--password` option. \n    - Note, Neo-Express only supports NEP-6 wallets with either a single account or a single default account\n\nNEP-2 private key and NEP-6 JSON wallet are password protected. When using one of these methods, the password\ncan be specified using the `--password` option. If the password is not specified on the command line, Neo-Express\nwill prompt the user to enter the password.\n\n### Specifying a Non-Signing Account\n\nA account used that is not used for signing doesn't need an accessible private key. Non-Signing accounts\ncan be specified in multiple ways:\n\n- Neo-Express or Worknet wallet nickname. Note, this includes `node1` etc to specify the default wallet account\n  associated with each consensus node\n- A standard Neo N3 address such as `Ne4Ko2JkzjAd8q2sasXsQCLfZ7nu8Gm5vR`\n- A [WIF encoded](https://developer.bitcoin.org/devguide/wallets.html#wallet-import-format-wif) private key\n\n## Commands\n```\nconnect       Connect to a network for example worknet or testnet\ncontract      Commands to manage smart contracts\nshow          Show information\ntransfer      Transfer asset between accounts\n```\n\n## neosh connect\n\n```\nConnect to a network for example worknet or testnet\n\nUsage: neosh connect [command] [options]\n\nOptions:\n  -i|--input <INPUT>  Path to neo data file\n  -?|-h|--help        Show help information.\n\nCommands:\n  current             Get the current connection\n```\n\nBefore using other Neo Shell commands, you must first establish a connection to the Neo N3 blockchain network you \nwant to interact with via the `connect` command. Neo Shell supports connecting to any Neo N3 blockchain network that\nprovides the [JSON-RPC methods](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html)", "doc_id": "cd5bdcc4-1d77-4923-b31d-5d4ce16c535e", "embedding": null, "doc_hash": "178abbab9708a5df21e1ac522909f9a8557061a4d4243e2732733d26723a4312", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}, "node_info": {"start": 0, "end": 3313, "_node_type": "1"}, "relationships": {"1": "77695e28dfe349ea832b066eea56bdeaceb5e426", "3": "bbb279bb-f780-49c1-b8ac-f5690f68411a"}}, "__type__": "1"}, "bbb279bb-f780-49c1-b8ac-f5690f68411a": {"__data__": {"text": "implemented by \nthe [RpcServer Plugin](https://docs.neo.org/docs/en-us/node/cli/config.html#installing-plugins). This includes \nNeo-Worknet and Neo-Express. \n\n> Note, currently, Neo Shell only supports connecting to Neo-WorkNet and Neo-Express. Support for connecting to a public\n> Neo N3 Blockchain is coming in a future update to the preview\n\n## neosh contract \n\nThe `contract` command has a series of subcommands for managing smart contracts on a Neo N3 blockchain network\n\n```\nCommands:\n  deploy        Deploy contract\n  invoke        Invoke a contract using parameters from .neo-invoke.json file\n  list          List deployed contracts\n  run           Invoke a contract using parameters passed on command line\n  update        Update a contract\n```\n\n### neosh contract deploy\n\n```\nUsage: neosh contract deploy [options] <Contract> <Account>\n\nArguments:\n  Contract                            Path to contract .nef file\n  Account                             Account to pay contract deployment GAS fee. Can be a name or a WIF string.\n\nOptions:\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction signer (Default: CalledByEntry)\n                                      Allowed values are: None, CalledByEntry, Global.\n                                      Default value is: CalledByEntry.\n  -d|--data <DATA>                    Optional data parameter to pass to _deploy operation\n  -p|--password <PASSWORD>            Password to use for NEP-2/NEP-6 account\n  -i|--input <INPUT>                  Path to the data file\n  -t|--trace                          Enable contract execution tracing\n  -f|--force                          Deploy contract regardless of name conflict\n  -j|--json                           Output as JSON\n  -?|-h|--help                        Show help information.\n```\n\nThe `contract deploy` command deploys a smart contract to a Neo N3 blockchain. The command takes\na path to an .NEF file generated by a Neo contract compiler like \n[NCCS compiler for .NET](https://github.com/neo-project/neo-devpack-dotnet).\nAdditionally, the command requires the signing account that will pay the GAS deployment fee.\n\n### neosh contract update\n\nUpdate a contract\n\n```\nUsage: neosh contract update [options] <Contract> <NefFile> <Account>\n\nArguments:\n  Contract                            Contract name or invocation hash\n  NefFile                             Path to contract", "doc_id": "bbb279bb-f780-49c1-b8ac-f5690f68411a", "embedding": null, "doc_hash": "c7e08cd8662329ded9e52caf933be8337d84f920e8986a1e0694d1d1c747cdf9", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}, "node_info": {"start": 3314, "end": 5717, "_node_type": "1"}, "relationships": {"1": "77695e28dfe349ea832b066eea56bdeaceb5e426", "2": "cd5bdcc4-1d77-4923-b31d-5d4ce16c535e", "3": "a9791dd1-9eae-4312-914a-001d13a25528"}}, "__type__": "1"}, "a9791dd1-9eae-4312-914a-001d13a25528": {"__data__": {"text": "                 Path to contract .nef file\n  Account                             Account to pay contract deployment GAS fee. Can be a name or a WIF string\n\nOptions:\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction signer (Default: CalledByEntry)\n                                      Allowed values are: None, CalledByEntry, Global.\n                                      Default value is: CalledByEntry.\n  -d|--data <DATA>                    Optional data parameter to pass to _deploy operation\n  -p|--password <PASSWORD>            Password to use for NEP-2/NEP-6 account\n  -i|--input <INPUT>                  Path to the data file\n  -t|--trace                          Enable contract execution tracing\n  -f|--force                          Deploy contract regardless of name conflict\n  -j|--json                           Output as JSON\n  -?|-h|--help                        Show help information.\n```\n\nNote, this command assumes the contract specified as a public `update` method taking two parameters. If your contract\nhas an update method with different name or parameters, you have to use `contract invoke` instead.\n\n### neosh contract invoke\nInvoke a contract using parameters from .neo-invoke.json file\n\n```\nUsage: neosh contract invoke [options] <InvocationFile> <Account>\n\nArguments:\n  InvocationFile                      Path to contract invocation JSON file\n  Account                             Account to pay contract invocation GAS fee\n\nOptions:\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction signer (Default: CalledByEntry)\n                                      Allowed values are: None, CalledByEntry, Global.\n                                      Default value is: CalledByEntry.\n  -r|--results                        Invoke contract for results (does not cost GAS)\n  -g|--gas                            Additional GAS to apply to the contract invocation\n                                      Default value is: 0.\n  -p|--password <PASSWORD>            password to use for NEP-2/NEP-6 account\n  -t|--trace                        ", "doc_id": "a9791dd1-9eae-4312-914a-001d13a25528", "embedding": null, "doc_hash": "c68ea565ebda294b020703b21278156eedd2859645d5f6952f89efd0bf639a44", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}, "node_info": {"start": 5704, "end": 7806, "_node_type": "1"}, "relationships": {"1": "77695e28dfe349ea832b066eea56bdeaceb5e426", "2": "bbb279bb-f780-49c1-b8ac-f5690f68411a", "3": "98730eb9-92d3-41c3-b296-5ce71f766c21"}}, "__type__": "1"}, "98730eb9-92d3-41c3-b296-5ce71f766c21": {"__data__": {"text": "                     Enable contract execution tracing\n  -j|--json                           Output as JSON\n  -i|--input <INPUT>                  Path to the data file\n  -?|-h|--help                        Show help information.\n```\n\nThe `contract invoke` command generates a script from an\n[invocation file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md)\nand submits it to the Neo N3 blockchain network as a transaction.\n\nA script can be invoked either for results (specified via the `--results` option) or to make changes\n(specified via the signed account argument). If a script is submitted for results, it may read information\nstored in the blockchain, but any changes made to blockchain data will not be saved. If a submitted\nfor changes, a signed account must be specified and any results returned by the script will not be available \nimmediately. For scripts submitted for changes, a transaction ID is returned and the execution results can \nbe retrieved via the `show transaction` command (described below).\n\n### neoxp contract run\n\nInvoke a contract using parameters passed on command line\n\n```\nUsage: neosh contract run [options] <Contract> <Method> <Arguments>\n\nArguments:\n  Contract                            Contract name or invocation hash\n  Method                              Contract method to invoke\n  Arguments                           Arguments to pass to the invoked method\n\nOptions:\n  -a|--account <ACCOUNT>              Account to pay contract invocation GAS fee\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction signer (Default: CalledByEntry)\n                                      Allowed values are: None, CalledByEntry, Global.\n                                      Default value is: CalledByEntry.\n  -r|--results                        Invoke contract for results (does not cost GAS)\n  -g|--gas                            Additional GAS to apply to the contract invocation\n                                      Default value is: 0.\n  -p|--password <PASSWORD>            password to use for NEP-2/NEP-6 account\n  -t|--trace                          Enable contract execution tracing\n  -j|--json                           Output as JSON\n  -i|--input <INPUT>                  Path to the data file\n  -?|-h|--help             ", "doc_id": "98730eb9-92d3-41c3-b296-5ce71f766c21", "embedding": null, "doc_hash": "3d0eca838d2ebbbd8a3089292a73594d4e70b876a4404722a73bff6c2248ad61", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}, "node_info": {"start": 7821, "end": 10159, "_node_type": "1"}, "relationships": {"1": "77695e28dfe349ea832b066eea56bdeaceb5e426", "2": "a9791dd1-9eae-4312-914a-001d13a25528", "3": "88ad2183-652c-4208-83c3-3b6aa5d103b7"}}, "__type__": "1"}, "88ad2183-652c-4208-83c3-3b6aa5d103b7": {"__data__": {"text": "                       Show help information.\n```\n\nLike `contract invoke`, the `contract run` command generates a script and submits it to the Neo N3\nblockchain network as a transaction wither for results or changes. However, unlike `contract invoke`, \nthe `contract run` command generates the script from command line parameters instead of an invocation\nfile. The command line constraints limit the flexibility of `contract run` relative to `contract invoke`,\nbut saves the developer from needing to create an invocation file for simple contract invocation scenarios.\n\nInstead of a path to an invocation file, The `contract run` command takes arguments specifying the contract\n(either by name or hash) and the method to invoke, plus zero or more contract arguments. These contract\narguments are string encoded values, following similar rules to \n[string arguments in an invocation file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md#args-property).\n\n### neosh contract list\n\nList deployed contracts\n\n```\nUsage: neosh contract list [options]\n\nOptions:\n  -i|--input <INPUT>  Path to the data file\n  -j|--json           Output as JSON\n  -?|-h|--help        Show help information.\n```\n\nThe `contract list` command writes out the name and contract hash of every contract deployed in a\nNeo N3blockchain network. This includes native contracts that are part of the core Neo platform.\n\n## neosh show\n\nThe `show` command will display information from the connected N3 blockchain. There are multiple subcommands \nrepresenting the different  information that is available:\n\n- `show balance` will display the balance of a single NEP-17 asset (including NEO and GAS) of a specific account\n- `show block` with display the contents of a single block, specified by index or hash\n- `show transaction` with display the contents of a transaction specified by hash and its execution results if available\n  - `show tx` is an alias for `show transaction`\n\n## neoxp transfer\n\nTransfer an NEP-17 asset between accounts\n\n```Usage: neosh transfer [options] <Quantity> <Asset> <Sender> <Receiver>\n\nArguments:\n  Quantity                  Amount to transfer\n  Asset                     Asset to transfer (symbol or script hash)\n  Sender                    Account to send asset from\n  Receiver                  Account to send asset to\n\nOptions:\n  -d|--data <DATA>          Optional data parameter to pass to transfer operation\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n  -?|-h|--help              Show help information.\n```\n\nThe `transfer` command is used to transfer NEP-17 assets between accounts in a Neo N3\nblockchain network. The transfer command has four required arguments\n\n- the quantity to transfer as an integer or `all` to transfer all assets of the specified type \n- The asset to transfer. This can be specified as contract hash or\n ", "doc_id": "88ad2183-652c-4208-83c3-3b6aa5d103b7", "embedding": null, "doc_hash": "0797c18824d2ac32b4f115ba96b85feeca421c23b4263dc2d5f550f359056a84", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}, "node_info": {"start": 10160, "end": 13227, "_node_type": "1"}, "relationships": {"1": "77695e28dfe349ea832b066eea56bdeaceb5e426", "2": "98730eb9-92d3-41c3-b296-5ce71f766c21", "3": "e7e7e3aa-e4cf-468b-8e51-16d56cc43feb"}}, "__type__": "1"}, "e7e7e3aa-e4cf-468b-8e51-16d56cc43feb": {"__data__": {"text": "specified type \n- The asset to transfer. This can be specified as contract hash or\n  [NEP-17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki)\n  token symbol such as `neo` or `gas`\n- Signing account that is sending the asset\n- Non-signing account that is receiving the asset\n", "doc_id": "e7e7e3aa-e4cf-468b-8e51-16d56cc43feb", "embedding": null, "doc_hash": "174f38e1f91143db720c47257925d7f1f2f29566b2fabaccddacab0c7d26a8b2", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}, "node_info": {"start": 13143, "end": 13440, "_node_type": "1"}, "relationships": {"1": "77695e28dfe349ea832b066eea56bdeaceb5e426", "2": "88ad2183-652c-4208-83c3-3b6aa5d103b7"}}, "__type__": "1"}, "6a226bf8-b35c-4b8c-806a-9bbcd6114d50": {"__data__": {"text": "<!-- markdownlint-enable -->\n# Neo-WorkNet Command Reference\n\nThe `neo-worknet` tool enables a developer to create and run a Neo N3 consensus node that branches\nfrom a public Neo N3 blockchain - including the official Neo N3 MainNet and T5 TestNet. This provides\nthe developer a local scratchpad environment that mirrors the state of a known public network at a \nspecified index. Changes to the local branch of the network are independent of the public network.\n\n> Note, you can pass -?|-h|--help to show a list of supported commands or to show\n> help information about a specific command.\n\n## neo-worknet create\n\n```\nCreate a Neo Worknet branch\n\nUsage: neo-worknet create [options] <RpcUri> <Output>\n\nArguments:\n  RpcUri              URL of Neo JSON-RPC Node\n                      Specify MainNet, TestNet or JSON-RPC URL\n  Output              Name of .neo-worknet file to create (Default: ./default.neo-worknet)\n\nOptions:\n  -i|--index <INDEX>  Block height to branch at\n                      Default value is: 0.\n  -f|--force          Overwrite existing data\n  --disable-log       Disable verbose data logging\n  -?|-h|--help        Show help information.\n```\n\nThe `create` command creates a new local WorkNet blockchain as a branch from a public Neo N3 blockchain. \nThis command will create both a `.neo-worknet` file to hold details about the blockchain branch and a \n`data` folder that will contain data loaded from the remote blockchain and cached locally as well as \nlocally generated blocks and contract storage updates.\n\nThe user must specify a remote Neo N3 blockchain network to branch from. Neo-WorkNet has built in knowledge\nof MainNet and the T5 TestNet. However, the user can specify any Neo N3 RPC API node they wish. The \nuser can specify a specific block index to branch at. If unspecified, `neo-worknet` will branch at the\ncurrent height of the specified blockchain. \n\n> Note, Neo-WorkNet depends on the StateService and RpcServer [plugins](https://github.com/neo-project/neo-modules)\n> to be installed on the `RpcUri` argument. Furthermore, the StateService *MUST* be configured with \n> `FullState` as `true`.\n\nThe branched blockchain *CANNOT* be validated across the branch point. When a Neo Worknet branch network\nis created, a new wallet account is created to act as the consensus block signer. The public network's\ncouncil members' accounts are obviously not available for signing new blocks on a local branch of the\nchain. Changing the consensus account that signs blocks requires an update to the `NextConsensus` field.\nUpdating this field requires adding an *unsigned* block to the local blockchain branch. Since this branch\ntransition block is unsigned, the blockchain history can not be validated across this transition block. \n\nUnlike Neo-Express, Neo-Worknet doesn't provide an option for creating a multiple consensus nodes for\nthe branched chain. Based on understanding of Neo-Express usage patterns, multiple conesnsus nodes are\nnot typically used. If four or seven conesnsus node support in Neo-WorkNet is important to you, please\nfile an issue in our [GitHub repo](https://github.com/neo-project/neo-express/issues)\n\n## neo-worknet prefetch\n\n```\nFetch data for specified contract\n\nUsage:", "doc_id": "6a226bf8-b35c-4b8c-806a-9bbcd6114d50", "embedding": null, "doc_hash": "4805b9facf8e0abadeb8014becaa0f5bb258ed3fde97354f445b237ef4899089", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/worknet-command-reference.md"}, "node_info": {"start": 0, "end": 3222, "_node_type": "1"}, "relationships": {"1": "ee00387916acf892b8ab37b4abccab18d9d69c7b", "3": "e6b1106e-7bc2-4704-bc06-9051d36e3f26"}}, "__type__": "1"}, "e6b1106e-7bc2-4704-bc06-9051d36e3f26": {"__data__": {"text": "prefetch\n\n```\nFetch data for specified contract\n\nUsage: neo-worknet prefetch [options] <Contract>\n\nArguments:\n  Contract       Name or Hash of contract to prefetch contract storage\n\nOptions:\n  --disable-log  Disable verbose data logging\n  -?|-h|--help   Show help information.\n  --input        Path to .neo-worknet data file\n```\n\nNeo-WorkNet caches deployed contract storage on first access. For deployed contracts with thousands\nof storage records, this can be very time consuming. The `prefetch` command provides a mechanism to\ndownload contract storage before running the chain. This will ensure all data associated with the specified \ncontract is downloaded and available so the WorkNet node can run that contract without needing to pause\nand download data the first time it's run locally. \n\n## neo-worknet reset\n\n```\nReset WorkNet back to initial branch point\n\nUsage: neo-worknet reset [options]\n\nOptions:\n  -f|--force    Overwrite existing data\n  -?|-h|--help  Show help information.\n  --input       Path to .neo-worknet data file\n```\n\nThis command resets all the locally generated blocks in the chain. The unsigned branch transition block\n(described in the `create` command section) is deleted and regenerated as part of this process.\n\nAny contract data from the public chain that has been cached locally - either via `prefetch` or thru\nthe normal process of executing transactions on the branched chain - are not affected. Even after a\n`reset`, contract storage does not need to be `prefetch`ed again.\n\n## neo-worknet run\n\n```\nRun Neo-WorkNet instance node\n\nUsage: neo-worknet run [options]\n\nOptions:\n  -s|--seconds-per-block <SECONDS_PER_BLOCK>  Time between blocks\n  -?|-h|--help                                Show help information.\n  --input                                     Path to .neo-worknet data file\n```\n\nRuns the branched blockchain locally. New blocks will be added to the chain every 15 seconds unless\noverridded with the `--seconds-per-block` option. \n\nThese new blocks added to the chain have *no* correlation to the blocks added to the public chain that\nwas branched from. From the point of the branch, the original source chain and the local branched chain\nare independent. \n\nNeo-WorkNet comes bundled with the standard `RpcServer` module, similar to Neo-Express. This enables\ndApps to interact with the branched chain like they would with the public chain. Neo-WorkNet supports \nboth read operations like\n[`getblock`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html)\nas well as write operations like \n[`sendrawtransaction`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendrawtransaction.html).\n\nIn addition to the standard `RpcServer` methods, Neo-WorkNet provides custom implementations", "doc_id": "e6b1106e-7bc2-4704-bc06-9051d36e3f26", "embedding": null, "doc_hash": "25dc1830e07b40a0c301f40d18a33586319885a8f30bbe5cdef50b053f1b0f57", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/worknet-command-reference.md"}, "node_info": {"start": 3172, "end": 5940, "_node_type": "1"}, "relationships": {"1": "ee00387916acf892b8ab37b4abccab18d9d69c7b", "2": "6a226bf8-b35c-4b8c-806a-9bbcd6114d50", "3": "e5c50833-3bf7-4105-b936-e9e290ea9e1d"}}, "__type__": "1"}, "e5c50833-3bf7-4105-b936-e9e290ea9e1d": {"__data__": {"text": "standard `RpcServer` methods, Neo-WorkNet provides custom implementations of\n[`getapplicationlog`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html),\n[`getnep11balances`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11balances.html),\n[`getnep11properties`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11properties.html)\nand [`getnep17balances`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17balances.html)\nfrom the ApplicationLogs and TokenTracker plugins (Note, the `getnep11transfers` and `getnep17transfers`)\nRPC methods are *not* supported. Additionally, Neo-WorkNet implements `ExpressShutdown` and `ExpressListContracts`\nRPC methods that are exposed by Neo-Express.\n\n## neo-worknet wallet\n\nThe wallet command has a series of subcommands for the management of standard wallets and accounts for use in the Neo-WorkNet blockchain network.\n\n> As with Neo-Express wallets, Neo-Worknet wallet accounts are stored unencrypted and should never be used in a production context.\n\n```\nManage neo-worknet wallets\n\nUsage: neo-worknet wallet [command] [options]\n\nOptions:\n  -?|-h|--help  Show help information.\n\nCommands:\n  create        Create neo-express wallet\n  delete        Delete neo-express wallet\n  list          List neo-express wallets\n```\n\nThese commands behave the same as their Neo-Express wallet command counterparts. Please see the \n[Neo-Express docs](https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md#neoxp-wallet)\nfor more information about these commands\n\n", "doc_id": "e5c50833-3bf7-4105-b936-e9e290ea9e1d", "embedding": null, "doc_hash": "7f32146cb21aed8abfddde91fdbe678bd7e0cc92bd81c5f6e80dc61c1ef40681", "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/worknet-command-reference.md"}, "node_info": {"start": 5918, "end": 7535, "_node_type": "1"}, "relationships": {"1": "ee00387916acf892b8ab37b4abccab18d9d69c7b", "2": "e6b1106e-7bc2-4704-bc06-9051d36e3f26"}}, "__type__": "1"}, "8435fde7-d320-4435-91bd-3e95721ff2e5": {"__data__": {"text": "<!-- markdownlint-enable -->\n# Neo-Express N3 Command Reference\n\n> Note, this is the command reference for Neo-Express 3.0, targeting N3.\n> The [Command Reference](legacy-command-reference.md) for the Neo Legacy \n> compatible version of Neo-Express is also available.\n\n> Note, you can pass -?|-h|--help to show a list of supported commands or to show\n> help information about a specific command.\n\n## Specifying Signing and Non-Signing Accounts\n\nMany of the Neo-Express commands require the user to specify account information. In some cases, this\naccount is used to sign a transaction that is submitted to the blockchain network. \n\n### Specifying a Signing Account\n\nAn account used for signing must have an accessible private key. Signing accounts can be specified in\nmultiple ways:\n\n- `genesis` to use the consensus node multi-sig account which holds the genesis NEO and GAS\n- Neo-Express wallet nickname (see `wallet create` below). Note, this includes `node1` etc to specify\n  the default wallet account associated with each consensus node\n- A [WIF encoded](https://developer.bitcoin.org/devguide/wallets.html#wallet-import-format-wif) private key\n- A [standard NEP-2 Passphrase-protected private key](https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki).\n    - When using a NEP-2 protected private key, the passphrase must be specified using the `--password` option\n- The path to a [standard NEP-6 JSON wallet](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki).\n    - When using a NEP-6 wallet, the password must be specified using the `--password` option. \n    - Note, Neo-Express only supports NEP-6 wallets with either a single account or a single default account\n\nNEP-2 private key and NEP-6 JSON wallet are password protected. When using one of these methods, the password\ncan be specified using the `--password` option. If the password is not specified on the command line, Neo-Express\nwill prompt the user to enter the password.\n\n> Note, `neoxp batch` command does not support interactive prompting. Using a NEP-2 private key or NEP-6 wallet\n> with `neoxp batch` also requires specifying the `--password` option. Needless to say, storing a password in \n> an unencrpted batch file is not secure, and developers should not use wallets associated with production, mainnet\n> assets with Neo-Express.\n\n### Specifying a Non-Signing Account\n\nA account used that is not used for signing doesn't need an accessible private key. Non-Signing accounts\ncan be specified in multiple ways:\n\n- `genesis` to use the consensus node multi-sig account which holds the genesis NEO and GAS\n- Neo-Express wallet nickname (see `wallet create` below). Note, this includes `node1` etc to specify\n  the default wallet account associated with each consensus node\n- A standard Neo N3 address such as `Ne4Ko2JkzjAd8q2sasXsQCLfZ7nu8Gm5vR`\n- A [WIF encoded](https://developer.bitcoin.org/devguide/wallets.html#wallet-import-format-wif) private key\n\n## neoxp create\n\n```\nUsage: neoxp create [Options] [Output]\n\nArguments:\n[Options]:\n  -c|--count <COUNT>                      Number of consensus nodes to create\n                                          Default: 1\n                     ", "doc_id": "8435fde7-d320-4435-91bd-3e95721ff2e5", "embedding": null, "doc_hash": "1efea14097b87627dbf27a2ad8ca04e3606572ef59aea948dd201d29b4c1d126", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 0, "end": 3200, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "3": "d6cb8f90-f7bf-4490-8459-ea118396e050"}}, "__type__": "1"}, "d6cb8f90-f7bf-4490-8459-ea118396e050": {"__data__": {"text": "                                        Allowed values are: 1, 4, 7.\n  -a|--address-version <ADDRESS_VERSION>  Version to use for addresses in this blockchain instance\n                                          Default: 53\n  -f|--force                              Overwrite existing data\n[Output]: name of .neo-express file to create (Default: ./default.neo-express)\n```\n\nThe `create` command is used to create a new Neo-Express blockchain network for local development\npurposes. In particular, the create command creates one or more consensus node wallets as well as\nthe multi-signature contracts needed for the management of genesis assets.\n\nNote, the wallets created for a new blockchain instance are not encrypted in the blockchain instance\nfile. This simplifies the developer workflow by eliminating the need to manage passwords. However,\nit also means that all Neo-Express wallets are insecure and should never be used in a production context.\n\nBy default, the `create` command creates a single node Neo-Express blockchain network. While a single\nnode blockchain network can handle most developer scenarios, it is also possible to create a four or\nseven node blockchain via the `--count` option.\n\nAll of the information about a Neo-Express blockchain network is stored in a single JSON file. By default,\nthis file is named \"default.neo-express\", but this can be overridden with the `--output` option.\nFor all commands Neo-Express commands besides create, you can specify a non-default blockchain network file\nvia the `--input` option.\n\n## neoxp run\n\n```\nUsage: neoxp run [Options] [NodeIndex]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>                          Path to neo-express data file\n  -s|--seconds-per-block <SECONDS_PER_BLOCK>  Time between blocks\n  -d|--discard                                Discard blockchain changes on shutdown\n  -t|--trace                                  Enable contract execution tracing\n[NodeIndex]: Index of node to run (Default: 0)\n```\n\nOnce created, a Neo-Express blockchain network is started with the `run` command. The consensus\nnode index to be run must be passed as an argument to the run command. If not specified, the node\nindex defaults to 0, indicating the first consensus node. So for a single node blockchain network,\nthe user can simply call `neo-express run`. Note, each node of a multi-node blockchain network must\nbe run separately.\n\nWhen the blockchain is run, the user can specify how often a new block is minted. By default, a new\nblock is minted every 15 seconds. If the user would like to run at a different rate, they can specify\nhow many seconds per block via the `--seconds-per-block` argument. Additionally, the default seconds\nper block value can be modified via [a setting](settings.md#chainsecondsperblock) in the .neo-express\nfile.\n\n> Note, the user may specify a different seconds per block value each time a blockchain is run, but\n> all nodes in multi-node blockchain must use the same value when running.\n\nBy default, the blockchain network persists information to disk when a new block is minted. For development\npurposes, it is sometimes useful to run the", "doc_id": "d6cb8f90-f7bf-4490-8459-ea118396e050", "embedding": null, "doc_hash": "26bb36f7aeb6a8f395329ba54a9517a602a0e93cbdbbcc5b5b691a8875f54595", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 3201, "end": 6334, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "8435fde7-d320-4435-91bd-3e95721ff2e5", "3": "7f29bc6b-c6c3-4634-b92f-5e5b0dbe3048"}}, "__type__": "1"}, "7f29bc6b-c6c3-4634-b92f-5e5b0dbe3048": {"__data__": {"text": "new block is minted. For development\npurposes, it is sometimes useful to run the blockchain network without saving new block persisting\nnew blocks. By using the `--discard` option, new blocks are saved in memory only and are discarded when\nthe blockchain network is shut down.\n\n## neoxp stop\n\n```\nUsage: neoxp stop [Options] [NodeIndex]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n  -a|--all            Stop all nodes\n[NodeIndex]: Index of node to stop (Default: 0)\n```\n\nWhen running in a terminal window, neo-express can be shutdown via standard CTRL-C or CTRL-BREAK operations.\nAdditionally, you can stop a running neo-express network via the `stop` command. Like the `run` command, the\n`stop` command takes a node index to stop, defaulting to 0. The `--all` option shuts down all running consensus\nnodes in the network.\n\n## neoxp reset\n\n```\nUsage: neoxp reset [Options] [NodeIndex]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n  -f|--force          Overwrite existing data\n  -a|--all            Reset all nodes\n[NodeIndex]: Index of node to reset (Default: 0)\n```\n\nA Neo-express blockchain network can be reset back to its genesis block via the `reset` command. This\nis useful for keeping the Neo-express blockchain network in a known state for test and debug purposes.\nLike the `stop` command, the node index defaults to 0 or the `--all` option can be used to reset all\nnodes. The `--force` option must be specified in order to discard existing blockchain network state.\n\n### neoxp export\n\n```\nUsage: neoxp export [Options]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n```\n\nThe `export` command saves the wallet and settings of each consensus node in a standard format. This\nallows for standard Neo node implementations such as Neo-CLI to connect to a running Neo-Express\nblockchain network.\n\n> Note, the standard [NEP-6 wallet format](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki)\n> encrypts wallet information, so the user has to provide a password. However, since this same information\n> is still stored unencrypted in the blockchain information file, these accounts still should never\n> be used in a production environment.\n\n## neoxp wallet\n\nThe `wallet` command has a series of subcommands for the management of standard wallets and accounts\nfor use in the Neo-Express blockchain network.\n\n> As stated above, Neo-Express wallet accounts are stored unencrypted and should never be used in a\n> production context.\n\n### neoxp wallet create\n\n```\nUsage: neoxp wallet create [Options] <Name>\n\nArguments:\n[Options]:\n  -f|--force          Overwrite existing data\n  -i|--input <INPUT>  Path to neo-express data file\n<Name>: Wallet name\n```\n\nThe `wallet create` command creates a new standard wallet with a single account. This command takes\na single argument that specifies a friendly name that can be used to reference the wallet. A friendly\nname like \"alice\" or \"bob\" is typically easier to remember than a base 58 encoded address like\nNe4Ko2JkzjAd8q2sasXsQCLfZ7nu8Gm5vR.\n\nTo overwrite an existing wallet, the `--force` option must be specified.\n\n### neoxp wallet list\n\n```\nUsage: neoxp wallet list", "doc_id": "7f29bc6b-c6c3-4634-b92f-5e5b0dbe3048", "embedding": null, "doc_hash": "a2e24fa7ede1436fab2cf4d83daf142a9d40f5ad58fdca6313f85a48f0e95597", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 6267, "end": 9482, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "d6cb8f90-f7bf-4490-8459-ea118396e050", "3": "d7809d0a-1fb2-4a7f-84f7-a5614d277b97"}}, "__type__": "1"}, "d7809d0a-1fb2-4a7f-84f7-a5614d277b97": {"__data__": {"text": "neoxp wallet list\n\n```\nUsage: neoxp wallet list [Options]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n```\n\nThe `wallet list` command writes out a list of all the wallets - including consensus node wallets - \nalong with their account addresses, private and public keys.\n\n### neoxp wallet delete\n\n```\nUsage: neoxp wallet delete [Options] <Name>\n\nArguments:\n[Options]:\n  -f|--force          Overwrite existing data\n  -i|--input <INPUT>  Path to neo-express data file\n<Name>: Wallet name\n```\n\nThe `wallet delete` command removes a wallet and its accounts from the blockchain network file. This\ncommand does not modify the blockchain data, so any assets associated with that wallet are not changed.\n\n### neoxp wallet export\n\n```\nUsage: neoxp wallet export [Options] <Name>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>    Path to neo-express data file\n  -o|--output <OUTPUT>  NEP-6 wallet name (Defaults to Neo-Express name if unspecified)\n  -f|--force            Overwrite existing data\n<Name>: Wallet name\n```\n\nSimilar the top-level `export` command described above, `wallet export` saves an existing Neo-Express\nwallet in the [NEP-6 wallet format](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki)\nthat can be read by standard Neo tools.\n\n> Note, the standard [NEP-6 wallet format](https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki)\n> encrypts wallet information, so the user has to provide a password. However, since this same information\n> is still stored unencrypted in the blockchain information file, these accounts still should never\n> be used in a production environment.\n\n## neoxp transfer\n\n```\nUsage: neoxp transfer [Options] <Quantity> <Asset> <Sender> <Receiver>\n\nArguments:\n[Options]:\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n<Quantity>: Amount to transfer\n<Asset>: Asset to transfer (symbol or script hash)\n<Sender>: Account to send asset from\n<Receiver>: Account to send asset to\n```\n\nThe `transfer` command is used to transfer assets between accounts in a Neo-Express\nblockchain network. The transfer command has four required arguments\n\n- the quantity to transfer as an integer or `all` to transfer all assets of the specified type \n- The asset to transfer. This can be specified as contract hash or\n  [NEP-17](https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki)\n  token symbol such as `neo` or `gas`\n- Signing account that is sending the asset\n- Non-signing account that is receiving the asset\n\n## neoxp contract\n\nThe `contract` command has a series of subcommands for managing smart contracts\non a Neo-Express blockchain network\n\n### neoxp contract deploy\n\n```\nUsage: neoxp contract deploy [Options] <Contract> <Account>\n\nArguments:\n[Options]:\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction signer\n                     ", "doc_id": "d7809d0a-1fb2-4a7f-84f7-a5614d277b97", "embedding": null, "doc_hash": "691acba162fe71440abe40fc4267b4870067785cf56fd8e10b8ad4a19241c022", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 9509, "end": 12548, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "7f29bc6b-c6c3-4634-b92f-5e5b0dbe3048", "3": "14bf9fcd-b121-46bb-abc9-5c470380b7ef"}}, "__type__": "1"}, "14bf9fcd-b121-46bb-abc9-5c470380b7ef": {"__data__": {"text": "                                    Default: CalledByEntry\n                                      Allowed values are: None, CalledByEntry, Global.\n  -p|--password <PASSWORD>            password to use for NEP-2/NEP-6 account\n  -i|--input <INPUT>                  Path to neo-express data file\n  -t|--trace                          Enable contract execution tracing\n  -f|--force                          Deploy contract regardless of name conflict\n  -j|--json                           Output as JSON\n<Contract>: Path to contract .nef file\n<Account>: Account to pay contract deployment GAS fee\n```\n\nThe `contract deploy` command deploys a smart contract to a Neo-Express blockchain. The command takes\na path to an .NEF file generated by a Neo contract compiler like \n[NCCS compiler for .NET](https://github.com/neo-project/neo-devpack-dotnet).\nAdditionally, the command requires the signing account that will pay the GAS deployment fee.\n\nBy default, Neo-Express will not deploy multiple contracts with the same name to avoid developer\nconfusion. This behavior can be overridden with the `--force` option.\n\n### neoxp contract invoke\n\n```\nUsage: neoxp contract invoke [Options] <InvocationFile> <Account>\n\nArguments:\n[Options]:\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction\n                                      signer (Default: CalledByEntry)\n                                      Allowed values are: None, CalledByEntry,\n                                      Global.\n  -r|--results                        Invoke contract for results (does not cost\n                                      GAS)\n  -g|--gas                            Additional GAS to apply to the contract\n                                      invocation\n  -p|--password <PASSWORD>            password to use for NEP-2/NEP-6 account\n  -t|--trace                          Enable contract execution tracing\n  -j|--json                           Output as JSON\n  -i|--input <INPUT>                  Path to neo-express data file\n<InvocationFile>: Path to contract invocation JSON file\n<Account>: Account to pay contract invocation GAS", "doc_id": "14bf9fcd-b121-46bb-abc9-5c470380b7ef", "embedding": null, "doc_hash": "1cbac9bd73eb7c004baa1d1a6c7c5f54b9c4c97889260d315a5443862b346518", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 12591, "end": 14712, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "d7809d0a-1fb2-4a7f-84f7-a5614d277b97", "3": "4be896a9-459b-46f7-909f-53cd7801f418"}}, "__type__": "1"}, "4be896a9-459b-46f7-909f-53cd7801f418": {"__data__": {"text": "Path to contract invocation JSON file\n<Account>: Account to pay contract invocation GAS fee\n```\n\nThe `contract invoke` command generates a script from an\n[invocation file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md)\nand submits it to the Neo-Express blockchain network as a transaction.\n\nA script can be invoked either for results (specified via the `--results` option) or to make changes\n(specified via the signed account argument). If a script is submitted for results, it may read information\nstored in the blockchain, but any changes made to blockchain data will not be saved. If a submitted\nfor changes, a signed account must be specified and any results returned by the script will not be available \nimmediately. For scripts submitted for changes, a transaction ID is returned and the execution results can \nbe retrieved via the `show transaction` command (described below).\n\n### neoxp contract run\n\n```\nUsage: neoxp contract run [Options] <Contract> <Method> <Arguments>\n\nArguments:\n[Options]:\n  -a|--account <ACCOUNT>              Account to pay contract invocation GAS fee\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction\n                                      signer (Default: CalledByEntry)\n                                      Allowed values are: None, CalledByEntry,\n                                      Global.\n  -r|--results                        Invoke contract for results (does not cost\n                                      GAS)\n  -g|--gas                            Additional GAS to apply to the contract\n                                      invocation\n  -p|--password <PASSWORD>            password to use for NEP-2/NEP-6 account\n  -t|--trace                          Enable contract execution tracing\n  -j|--json                           Output as JSON\n  -i|--input <INPUT>                  Path to neo-express data file\n<Contract>: Contract name or invocation hash\n<Method>: Contract method to invoke\n<Arguments>: Arguments to pass to the invoked method\n```\n\nLike `contract invoke`, the `contract run` command generates a script and submits it to the Neo-Express\nblockchain network as a transaction wither for results or changes. However, unlike `contract invoke`, \nthe `contract run` command generates the script from command line parameters instead of an invocation\nfile. The command line constraints limit the flexibility of `contract run` relative to `contract invoke`,\nbut saves the developer from needing to create an invocation file for simple contract invocation scenarios.\n\nInstead of a path to an invocation file, The `contract run` command takes arguments specifying the contract\n(either by name or hash) and the method to invoke, plus zero or more contract", "doc_id": "4be896a9-459b-46f7-909f-53cd7801f418", "embedding": null, "doc_hash": "af54fe667ace1563e4f5f7102eb7095c115d8d35fac15794f460f9e15fd5d28c", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 14637, "end": 17423, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "14bf9fcd-b121-46bb-abc9-5c470380b7ef", "3": "a3e39276-eebb-4702-bc87-c667d4d8a074"}}, "__type__": "1"}, "a3e39276-eebb-4702-bc87-c667d4d8a074": {"__data__": {"text": "contract\n(either by name or hash) and the method to invoke, plus zero or more contract arguments. These contract\narguments are string encoded values, following similar rules to \n[string arguments in an invocation file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md#args-property).\n\n### neoxp contract get\n\n```\nUsage: neoxp contract get [Options] <Contract>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n<Contract>: Contract name or invocation hash\n```  \n\nThe `contract get` command retrieves the manifest of a deployed contract.\n\n### neoxp contract list\n\n```\nUsage: neoxp contract list [Options]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n  -j|--json           Output as JSON\n```\n\nThe `contract list` command writes out the name and contract hash of every contract deployed in a\nNeo-express blockchain network. This includes native contracts that are part of the core Neo platform.\n\n### neoxp contract hash\n\n```\nUsage: neoxp contract hash [Options] <Contract> <Account>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n<Contract>:Path to contract .nef file\n<Account>:Account that would deploy the contract\n```\n\nThe `contract hash` command calculates what the contract hash would be from a path to an .NEF file\nand the non-signing account information of the account that would deploy the contract.\n\n> Note, deploying the contract requires a signing account, but calculating the contract hash\n> does not require private key information.\n\n### neoxp contract storage\n\n```\nUsage: neoxp contract storage [Options] <Contract>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n  -j|--json           Output as JSON\n<Contract>: Contract name or invocation hash\n```\nThe `contract storage` commands dumps all the key/value pairs stored in the blockchain for\nthis contract. This command takes a single argument indicating the contract to dump storage\nrecords for. For each key/value pair, the command shows both the key and the value\nas both a hex-encoded byte array as well as a UTF-8 encoded string.\n\n### neoxp contract update\n\nUpdate a contract that has been deployed to a neo-express instance.\n\n```\nUsage: neoxp contract update [Options] <Contract> <Contract_File> <Account>\n\nArguments:\n[Options]:\n  -w|--witness-scope <WITNESS_SCOPE>  Witness Scope to use for transaction signer\n                                      Default: CalledByEntry\n                                      Allowed values are: None, CalledByEntry, Global.\n  -p|--password <PASSWORD>            password to use for NEP-2/NEP-6 account\n  -i|--input <INPUT>                  Path to neo-express data file\n  -t|--trace                          Enable contract execution tracing\n  -j|--json                           Output as JSON\n<Contract>: Contract name or invocation", "doc_id": "a3e39276-eebb-4702-bc87-c667d4d8a074", "embedding": null, "doc_hash": "848a7c340643d8863592e57f2bc34d53a7291ee4a4910cba05e964ac06fc8644", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 17428, "end": 20330, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "4be896a9-459b-46f7-909f-53cd7801f418", "3": "1298f5fc-e7a2-4498-b230-3c3811960f04"}}, "__type__": "1"}, "1298f5fc-e7a2-4498-b230-3c3811960f04": {"__data__": {"text": "        Output as JSON\n<Contract>: Contract name or invocation hash\n<Contract_File>: Path to contract .nef file\n<Account>: Account to pay contract deployment GAS fee\n```\n\n> Note, The smart contract will need to have a method with this signature: e.g.\n> \n> C#: `public static bool Update(ByteString nefFile, string manifest)`\n> \n> Python: `def update(nef: bytes, manifest: str):`\n> \n\n## neoxp show\n\nThe `show` command will display information from the blockchain. There are multiple subcommands \nrepresenting the different  information that is available:\n\n- `show balance` will display the balance of a single NEP-17 asset (including NEO and GAS) of a specific account\n- `show balances` will display the balance of all NEP-17 asset (including NEO and GAS) owned by a specific account\n- `show block` with display the contents of a single block, specified by index or hash\n- `show transaction` with display the contents of a transaction specified by hash and its execution results if available\n  - `show tx` is an alias for `show transaction`\n\n## neoxp checkpoint\n\nThe `checkpoint` command has a series of subcommands for managing the state of a Neo-Express blockchain.\nIn particular, allowing a blockchain to be reverted to a previous known state. While this is never\nsomething you would do on a production blockchain, the ability to revert changes to a Neo-Express blockchain\nenables a variety of debug and test scenarios.\n\n> Note, all `checkpoint` subcommands require a single-node Neo-Express blockchain.\n> Multi-node blockchains cannot be check pointed.\n\n### neoxp checkpoint create\n\n```\nUsage: neoxp checkpoint create [Options] <Checkpoint>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>    Path to neo-express data file\n  -f|--force            Overwrite existing data\n<Checkpoint>: Checkpoint file name\n```\n\nThe `checkpoint create` enables the user to create a checkpoint of a Neo-express blockchain. This command\ntakes a single argument: the name of the checkpoint. If the user wants to overwrite a checkpoint that has\nalready been created, they must specify the `--force` option.\n\n### neoxp checkpoint restore\n\n```\nUsage: neoxp checkpoint restore [Options] <Checkpoint>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>    Path to neo-express data file\n  -f|--force            Overwrite existing data\n<Checkpoint>: Checkpoint file name\n```\n\nThe `checkpoint restore` command enables the user to discard the current state of a Neo-Express blockchain\nand replace it with the state from the checkpoint. If there is no existing blockchain state, restore\nessentially works as an import. If there is existing blockchain state, the user must specify the `--force` option.\n\n> Note, `checkpoint restore` validates that the checkpoint being restored matches the current blockchain. \n> If there is not a match, the restore is canceled without modifying the current blockchain state.\n\n### neoxp checkpoint run\n\n```\nUsage: neoxp checkpoint run [Options] <Checkpoint>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>                          Path to neo-express data file\n  -s|--seconds-per-block <SECONDS_PER_BLOCK>  Time between blocks\n  -t|--trace                                  Enable contract execution tracing\n<Checkpoint>: Checkpoint file name\n```\n\nThe", "doc_id": "1298f5fc-e7a2-4498-b230-3c3811960f04", "embedding": null, "doc_hash": "b983636d62a8b9d03741de1cf48a068e59fafbcab6986a12cbc3fbd6e673d44f", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 20355, "end": 23593, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "a3e39276-eebb-4702-bc87-c667d4d8a074", "3": "fe3329a1-30e9-4f48-97bf-c44d6a6ed212"}}, "__type__": "1"}, "fe3329a1-30e9-4f48-97bf-c44d6a6ed212": {"__data__": {"text": "contract execution tracing\n<Checkpoint>: Checkpoint file name\n```\n\nThe `checkpoint run` command enables the user to run a checkpoint, similar to the standard `run` command\ndescribed above. However, checkpoint run stores any changes to the checkpoint in memory instead of on\ndisk. When the blockchain is shut down, any changes to the blockchain that were saved to memory are \ndiscarded.\n\nLike the standard `run` command, the user can control the speed at which the blockchain mints blocks\nvia the `--seconds-per-block` argument.\n\n`checkpoint run` is of particular use in test scenarios, where the resulting state of the Neo-Express\nblockchain is not important beyond validating that all tests pass.\n\n> Note, once a checkpoint is run, there is no way to save changes made to that running instance.\n\n> Note, like `checkpoint restore`, `checkpoint run` validates that the checkpoint being run matches\n> the current blockchain. If there is not a match, the run is canceled.\n\n## neoxp batch\n\n```\nUsage: neoxp batch [Options] <BatchFile>\n\nArguments:\n[Options]:\n  -r|--reset <CHECKPOINT>    Reset blockchain to genesis or specified checkpoint\n                             before running batch file commands\n  -t|--trace                 Enable contract execution tracing\n  -i|--input <INPUT>         Path to neo-express data file\n<BatchFile>: Path to batch file to run\n```\n\nThe `neo batch` command executes a series of blockchain modifying commands against a single Neo-express\ninstance. Since the blockchain is only initialized once for the batch, it is usually faster than running\nthe individual commands separately.\n\n> Note, the Neo-Express blockchain network cannot be running when the `batch` command is run\n\nEach batch command supports the same arguments and options as their normal command as documented\nin this file except for `--input` and `--trace`. These arguments are specified on the entire batch\nrather than on a command by command basis.\n\nAdditionally, the blockchain can be reset back to these genesis block or to a specified checkpoint\nvia the `--reset` argument. Using the `--reset` argument without specifying a checkpoint is operationally\nthe same as using the `reset` command. Using the `--reset` argument with a checkpoint is operationally\nthe same as using the `checkpoint restore` command.\n\nThe commands supported in a batch file include:\n\n* `checkpoint create`\n* `contract deploy`\n* `contract invoke`\n* `contract run`\n* `fastfwd`\n* `oracle enable`\n* `oracle response`\n* `policy block`\n* `policy set`\n* `policy sync`\n* `policy unblock`\n* `transfer`\n\n## neoxp fastfwd\n\n```\nUsage: neoxp fastfwd [Options] <Count>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n  -?|-h|--help        Show help information.\n<Count>: Number of blocks to mint  \n```\n\nThe `fastfwd` command generates the specified number of empty blocks. This is useful for testing scenarios\nsuch as voting on a proposal where some amount of time (measured in minted blocks) must pass between\noperations.\n\n## neoxp oracle\n\nThe `oracle` command has a series of subcommands for configuring Neo-express' oracle subsystem as well\nas responding to oracle requests.\n\n> Note, unlike Neo N3 MainNet and TestNet, Neo-Express does not automatically fulfill oracle requests\n> by retrieving files from the internet. Instead, oracle requests are manually fulfilled via the \n> `oracle response` command.\n\n###", "doc_id": "fe3329a1-30e9-4f48-97bf-c44d6a6ed212", "embedding": null, "doc_hash": "98026dd8d581984f6e73d9246cbe34d9e2732cce9d4e688e8362ee195a73c713", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 23577, "end": 26973, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "1298f5fc-e7a2-4498-b230-3c3811960f04", "3": "fef7fbbe-48f9-40e8-9161-33c0391f4244"}}, "__type__": "1"}, "fef7fbbe-48f9-40e8-9161-33c0391f4244": {"__data__": {"text": "are manually fulfilled via the \n> `oracle response` command.\n\n### neoxp oracle enable\n\nEnable oracles for neo-express instance\n\n```\nUsage: neoxp oracle enable [Options] <Account>\n\nArguments:\n[Options]:\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n<Account>: Account to pay contract invocation GAS fee\n```\n\nA new Neo N3 blockchain (including a freshly created or reset Neo-Express blockchain) does not have\noracle roles enabled. The `oracle enable` command enables the Neo-Express consensus nodes to also\nrespond to oracle requests (via the `oracle response` command detailed below)\n\n> Note, enabling oracles on a Neo N3 blockchain can only be performed by the governing committee.\n> In a Neo-Express blockchain, this is typically the `genesis` account. \n\n### neoxp oracle response\n\n```\nUsage: neoxp oracle response [Options] <Url> <ResponsePath>\n\nArguments:\n[Options]:\n  -r|--request-id <REQUEST_ID>    Oracle request ID\n  -i|--input <INPUT>              Path to neo-express data file\n  -t|--trace                      Enable contract execution tracing\n  -j|--json                       Output as JSON\n<Url>: URL of oracle request\n<ResponsePath>: Path to JSON file with oracle response content\n```\n\nThe `oracle response` command enables a developer to submit a response for an existing oracle request.\nThe command takes two arguments: The url of the file being requested and the path to a local JSON file\ncontaining the oracle response content. \n\n> Note, it is possible for there to be multiple oracle requests for the same url outstanding at a time.\n> In this case, all outstanding oracle requests are fulfilled by a single call to `oracle response`\n> unless the `--request-id` option is specified. The request ID can be retrieved via the `oracle requests`\n> command described below.\n\n### neoxp oracle requests\n\n```\nUsage: neoxp oracle requests [Options]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n```\n\nThe `oracle requests` command lists the request id, url and transaction hash that made the oracle request.\n\n### neoxp oracle list\n\n```\nUsage: neoxp oracle list [Options]\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n```\n\nThe `oracle list` command lists public key of each oracle node in a Neo-express blockchain network. \nTypically, these are the Neo-express consensus nodes when oracles have been enabled.\n\n## neoxp policy\n\nThe `policy` command has a series of subcommands for configuring Neo-express' policy subsystem.\n\n> Note, changing Neo N3 blockchain policy (`set`, `sync`, `block` and `unblock`) can only be performed by\n> the governing committee. In a Neo-Express blockchain, this is typically the `genesis` account. \n\n### neoxp policy get\n\nRetrieve current value of a blockchain policy\n\n```\nUsage: neoxp policy get [Options]\n\nArguments:\n[Options]:\n  -r|--rpc-uri <RPC_URI> ", "doc_id": "fef7fbbe-48f9-40e8-9161-33c0391f4244", "embedding": null, "doc_hash": "7b46130a55985b9dabbb949532a4a282db4a7ae7e1d30c69e6bf7bf808f5b63f", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 26982, "end": 30014, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "fe3329a1-30e9-4f48-97bf-c44d6a6ed212", "3": "144ac92a-7ec4-4fd4-a27d-99687085d286"}}, "__type__": "1"}, "144ac92a-7ec4-4fd4-a27d-99687085d286": {"__data__": {"text": " -r|--rpc-uri <RPC_URI>  URL of Neo JSON-RPC Node\n                          Specify MainNet (default), TestNet or JSON-RPC URL\n  -i|--input <INPUT>      Path to neo-express data file\n  -j|--json               Output as JSON\n```\n\n> Note, older versions of neoxp supported a `Policy` argument.\n> This argument has been removed as of the 3.1 version of neoxp.\n\nThe `policy get` command retrieves the current values of Neo blockchain network policy. By default, the\n`policy get` command retrieves the policy values of the local Neo-Express blockchain. However, this command\ncan retrieve the network policy settings from a remote public Neo blockchain network - including MainNet and \nTestNet - by specifying the `--rpc-uri` argument. This can be used to synchronize the local Neo-Express policy\nwith a well known public Neo network like Neo MainNet. \n\nThe `--json` option specifies the policy values should be emitted as JSON. This JSON content, if saved to a\nlocal file, can be used as the input for the `policy sync` command described below.\n\n### neoxp policy set\n\n```\nUsage: neoxp policy set [Options] <Policy> <Value> <Account>\n\nArguments:\n[Options]:\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n<Policy>: Policy to set. Allowed values are: GasPerBlock, MinimumDeploymentFee, CandidateRegistrationFee, OracleRequestFee, NetworkFeePerByte, StorageFeeFactor, ExecutionFeeFactor.\n<Value>: New Policy Value\n<Account>: Account to pay contract invocation GAS fee\n```\n\nThe `policy set` command updates the current value of the specified Neo-Express network policy.\n\n### neoxp policy sync\n```\nSynchronize local policy values with public Neo network\n\nUsage: neoxp policy sync [Options] <Source> <Account>\n\nArguments:\n[Options]:\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n<Source>: Source of policy values. Must be local policy settings JSON file or the URL of Neo JSON-RPC Node For Node URL,\"MainNet\" or \"TestNet\" can be specified in addition to a standard HTTP URL\n<Account>: Account to pay contract invocation GAS fee\n```\n\nThe `policy sync` command updates the all the network policy values of the specified Neo-Express blockchain instance.\nThe policy values source can be a well known public Neo blockchain network (aka MainNet or TestNet), the URL for a \nJSON-RPC node of another public Neo network or the path to a local JSON file. The JSON file format must match the format\nemitted by the `policy get --json` command described above.\n\n> Note: when using `policy sync` in a `batch` command file, the policy settings must be retrieved from a local JSON \n> file. Reading policy settings from a remote Neo network during a `batch` operation is not supported.\n\n### neoxp policy block\n\n```\nUsage: neoxp policy block [Options] <ScriptHash> <Account>\n\nArguments:\n[Options]:\n ", "doc_id": "144ac92a-7ec4-4fd4-a27d-99687085d286", "embedding": null, "doc_hash": "0db31de86377bd6eccccad2435cca7ed1855ca28ece5287b6a064f00e43a2eb9", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 30051, "end": 33187, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "fef7fbbe-48f9-40e8-9161-33c0391f4244", "3": "b3251f29-647d-4edd-aefe-e2657242cfd8"}}, "__type__": "1"}, "b3251f29-647d-4edd-aefe-e2657242cfd8": {"__data__": {"text": "<ScriptHash> <Account>\n\nArguments:\n[Options]:\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n<ScriptHash>: Account to block\n<Account>: Account to pay contract invocation GAS fee\n```\n\nThe `policy block` command blocks the specified non-signing user or contract account. The account\nto block can be specified in the following ways:\n\n- Neo-Express wallet nickname (see `wallet create` above). \n  - Note, only Neo-Express wallets created by `wallet create` may be blocked. Consensus nodes and \n    genesis accounts cannot be blocked via `policy block`.\n- Contract name\n  - Note, only deployed contracts may be blocked. Native contracts cannot be blocked via `policy block`.\n- A standard Neo N3 address such as `Ne4Ko2JkzjAd8q2sasXsQCLfZ7nu8Gm5vR`\n\n### neoxp policy unblock\n\n```\nUsage: neoxp policy unblock [Options] <ScriptHash> <Account>\n\nArguments:\n[Options]:\n  -p|--password <PASSWORD>  password to use for NEP-2/NEP-6 sender\n  -i|--input <INPUT>        Path to neo-express data file\n  -t|--trace                Enable contract execution tracing\n  -j|--json                 Output as JSON\n<ScriptHash>: Account to unblock\n<Account>: Account to pay contract invocation GAS fee\n```\n\nThe `policy unblock` command unblocks the specified non-signing user or contract account. The account\nto block is specified as described in `policy block` above\n\n### neoxp policy isblocked\n\n```\nUsage: neoxp policy isBlocked [Options] <ScriptHash>\n\nArguments:\n[Options]:\n  -i|--input <INPUT>  Path to neo-express data file\n<ScriptHash>: Account to check block status of\n```\n\nThe `policy isblocked` command checks the blocked status of the specified non-signing user or contract\naccount. The account to check is specified as described in `policy block` above\n", "doc_id": "b3251f29-647d-4edd-aefe-e2657242cfd8", "embedding": null, "doc_hash": "4098c54d8092ac95b231c6e65dcf41dd798f88bf0c9cb50dae9cfbf3f2740858", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}, "node_info": {"start": 33161, "end": 35081, "_node_type": "1"}, "relationships": {"1": "365d09cdc6618e13d8dd7544d455ffa978d98188", "2": "144ac92a-7ec4-4fd4-a27d-99687085d286"}}, "__type__": "1"}, "a10967bc-7a3a-4851-a7c7-a1e2f3419bb2": {"__data__": {"text": "# Neo-Express Installation\n\nThis is the eventual home of docs for installing Neo Express\n", "doc_id": "a10967bc-7a3a-4851-a7c7-a1e2f3419bb2", "embedding": null, "doc_hash": "462e6df06c711c4fa325a0363673b5956d97b1d0fd8956689fe6e22ff942138b", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/installation.md"}, "node_info": {"start": 0, "end": 89, "_node_type": "1"}, "relationships": {"1": "1b729e833273f34cb986910ddbd387599f616e12"}}, "__type__": "1"}, "d9cec1ac-d0b7-4988-81cd-69743304049f": {"__data__": {"text": "<!-- markdownlint-enable -->\n# Neo Toolkit for .NET Early Access Preview Quickstart\n\nNote, this quickstart has only been tested on Windows 10 and Ubuntu 18.04.\n\n## Prerequisites\n\n- [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2)\n- [Visual Studio Code v1.37](https://code.visualstudio.com/Download)\n\nUbuntu users must also install libsnappy-dev and libc6-dev via apt-get in order\nto use Neo-Express.\n\n## Installation\n\n> Note, this install process is specific to the early access preview. Eventually\n> these packages will be distributed via nuget.org and the VSCode marketplace.\n\nDownload all the files from the [Neo Early Access Preview folder](http://tinyurl.com/neo-dev-eap).\nIn addition to this quickstart, there are three nuget packages (.nupkg), a\nVSCode extension (.vsix) and a command reference document (.md):\n\n- Neo Smart contract templates for dotnet new\n- Neo-Express developer blockchain\n- NEON-DE fork of NEON compiler (DE stands for \"debugger enhancements\")\n- Neo contract debugger for VSCode\n\nDownload all the packages to your local machine. Open a terminal window\nand change to the folder the packages were downloaded to. Execute the\nfollowing commands to install them:\n\n``` shell\ndotnet new -i Neo.Contract.Templates.<version number>.nupkg\ndotnet tool install -g neo-express --add-source .\ndotnet tool install -g neon-de --add-source .\ncode --install-extension ./neo-contract-debug-<version number>.vsix  \n```\n\n> Note, you can install the VSCode extension from inside the VSCode if you wish.\n> Please see the official VSCode docs on\n> [installing VSIX files](https://code.visualstudio.com/docs/editor/extension-gallery#_install-from-a-vsix)\n> for more information.\n\nIf the neo-express or neon-de .nupkg files you are using have \"-preview\"\nin the name, you will need to specify the version string on the command line.\nwhen you install them. For example,\n`dotnet tool install -g neo-express --add-source . --version 0.8.3-preview`.\nIf you try to install the tool without specifying the version in this case, the\ntool will fail to install, but the error message will explain how to fix the problem:\n\n``` shell\n$ dotnet tool install -g neo-express --add-source .\nerror NU1103: Unable to find a stable package neo-express with version\nerror NU1103:   - Found 1 version(s) in C:\\Users\\username\\Downloads [ Nearest version: 0.8.3-preview ]\nerror NU1103:   - Found 0 version(s) in Microsoft Visual Studio Offline Packages\nerror NU1103:   - Found 0 version(s) in C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\nerror NU1103:   - Found 0 version(s) in nuget.org\nThe tool package could not be restored.\nTool 'neo-express' failed to install. This failure may have been caused by:\n\n* You are attempting to install a preview release and did not use the --version option to specify the version.\n* A package by this name was found, but it was not a .NET Core tool.\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\n* You mistyped the name of the tool.\n```\n\nIf this is the first time you've used\n[.NET Core global tools](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools),\nyou will need to shutdown your terminal windows and reopen it. You may need to\nlog out completely and log back in again. Make sure your path is", "doc_id": "d9cec1ac-d0b7-4988-81cd-69743304049f", "embedding": null, "doc_hash": "c6e12cc6bd2b32ee8aaf970adec2437fe0a17d724fd7347b2f446ea62ca24d74", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}, "node_info": {"start": 0, "end": 3303, "_node_type": "1"}, "relationships": {"1": "dd3a6b30138b563d7747351bacdf8a0708bb8f43", "3": "8ee4f5d2-2fa8-4614-8dec-cad63572a942"}}, "__type__": "1"}, "8ee4f5d2-2fa8-4614-8dec-cad63572a942": {"__data__": {"text": "You may need to\nlog out completely and log back in again. Make sure your path is correctly set\nup by running `neo-express --version`. It should echo back the version number.\nIt will looks something (but not exactly) like this:\n\n``` shell\n$ neo-express --version\n0.8.3-preview+c21fa4e3a9\n```\n\n## Create a new Smart Contract\n\nIn your terminal window, create an empty directory called \"HelloWorld\".\nChange to that directory and invoke the `dotnet new neo-contract` command.\nThis will create a simple Neo smart contract that writes Hello World to\nblockchain storage.  \n\n> Note, if you wish, you can create a Visual Basic smart contract\n> by adding `-lang VB` to the `dotnet new` command.\n\n## Build the Smart Contract\n\nYou can immediately build the smart contract via the `dotnet publish` command.\nThe result should look something like this:\n\n``` shell\n$ dotnet publish\nMicrosoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Restore completed in 294.77 ms for /home/harry/Source/HelloWorld/HelloWorld.csproj.\n  HelloWorld -> /home/harry/Source/HelloWorld/bin/Debug/netstandard2.0/HelloWorld.dll\n  HelloWorld -> /home/harry/Source/HelloWorld/bin/Debug/netstandard2.0/publish/\n  Neo.Compiler.MSIL console app v2.4.1.1\n  Find entrypoint:System.Void HelloWorld::Main()\n  convert succ\n  gen debug succ\n  gen md succ\n  gen abi succ\n  write:HelloWorld.avm\n  write:HelloWorld.debug.json\n  write:HelloWorld.abi.json\n  SUCC\n```\n\n> Note, you have to use `dotnet publish` instead of `dotnet build`\n> because of a [bug](https://github.com/neo-project/neo-devpack-dotnet/issues/78)\n> in the NEON compiler. Once this bug has been fixed, the templates\n> will be updated to run as part of the build target instead of the\n> publish target.\n\n## Debug the Smart Contract\n\nFrom the terminal window in your HelloWorld project directory, you can\nlaunch VSCode by executing `code .`. This will bring an instance of\nVSCode in the folder you created the smart contract in.\n\nBefore you can run the contract in the debugger, you need to create a\nlaunch configuration. The Neo Contract Debugger makes this very easy.\n\n- From the top-level Debug menu, select \"Add Configuration\"\n- From the Select Environment input box, select \"Neo Contract\"\n\nThe Neo Contract Debugger will automatically create a launch profile\nfor every .AVM or .NVM file it locates in the workspace. This launch\nprofile allows you to specify arguments for the entry-point method,\nkey/value pairs for emulated storage and the emulated behavior of\n[Runtime.CheckWitness](https://docs.neo.org/docs/en-us/reference/scapi/fw/dotnet/neo/Runtime/CheckWitness.html).\nYou don't need to change anything to run the HelloWorld contract,\nso simply hit \"F5\" or select Debug -> Start Debugging from the menu.\nThis will launch the HelloWorld contact for debugging. From here, the\nfollowing debug experiences work:\n\n- You can Continue, Step Into, Step Over and Step In\n- You can set breakpoints\n- You can inspect the contents of emulated storage\n- You can inspect the value of local parameters and variables.\n  - Note, the Hello World contract doesn't have any local parameters\n    or variables.\n\n## Create and Run a Neo-Express blockchain\n\nNow that we have a smart contract, we need a blockchain to deploy it to.\nNeo-Express is a developer-focused Neo blockchain client. Create a new\nNeo-Express blockchain with the `create`", "doc_id": "8ee4f5d2-2fa8-4614-8dec-cad63572a942", "embedding": null, "doc_hash": "546d657b27b1b66ffd61479fb4bd6257895a79b938f1850819561d5ed7436348", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}, "node_info": {"start": 3239, "end": 6657, "_node_type": "1"}, "relationships": {"1": "dd3a6b30138b563d7747351bacdf8a0708bb8f43", "2": "d9cec1ac-d0b7-4988-81cd-69743304049f", "3": "0058a4c8-3e67-41d5-96b3-b991b3a98f0d"}}, "__type__": "1"}, "0058a4c8-3e67-41d5-96b3-b991b3a98f0d": {"__data__": {"text": "blockchain client. Create a new\nNeo-Express blockchain with the `create` command.\n\n``` shell\n$ neo-express create\nCreated 1 node privatenet at /home/harry/Source/HelloWorld/default.neo-express.json\n    Note: The private keys for the accounts in this file are are *not* encrypted.\n          Do not use these accounts on MainNet or in any other system where security is a concern.\n```\n\n> Note the warning - Neo-Express does not encrypt private keys.\n\nBy default, Neo-Express creates a single node blockchain. For development purposes,\na single node blockchain is often preferred. Furthermore, the checkpoint features\nof Neo-Express only work on a single node blockchain. You can create a four or\nseven node blockchain with the --count option.\n\nNeo-Express stores all the information about the blockchain instance in the\ndefault.neo-express.json file. If you look in this file right now, you'll see\ninformation about the single consensus node for this blockchain we created.\n\nNow that you have created the Neo-Express blockchain instance, you can run it.\nSince this is a single-node blockchain, you don't need to specify which node of\nthe blockchain to run. The run command will start the blockchain and continue\nlogging information about new blocks to the console until you shut down the node\nvia Ctrl-C.  \n\n``` shell\n$ neo-express run --seconds-per-block 1 \n09:49:37.99 ConsensusService Info OnStart\n09:49:38.08 ConsensusService Info initialize: height=1 view=0 index=0 role=Primary\n09:49:38.15 ConsensusService Info timeout: height=1 view=0\n09:49:38.15 ConsensusService Info send prepare request: height=1 view=0\n09:49:38.23 ConsensusService Info send commit\n09:49:38.32 ConsensusService Info relay block: height=1 hash=0x096aaa25191b8601856a0a1744b7f19b06807fd9888e247366eec3d212a507b6 tx=1\n09:49:41.32 ConsensusService Info persist block: height=1 hash=0x096aaa25191b8601856a0a1744b7f19b06807fd9888e247366eec3d212a507b6 tx=1\n09:49:41.32 ConsensusService Info initialize: height=2 view=0 index=0 role=Primary\n09:49:42.33 ConsensusService Info timeout: height=2 view=0\n09:49:42.33 ConsensusService Info send prepare request: height=2 view=0\n09:49:42.34 ConsensusService Info send commit\n09:49:42.35 ConsensusService Info relay block: height=2 hash=0x195f354baa79d5cf4f476748fadc82b0fa0ed5e584ec9bd9762e8948a799dbd0 tx=1\n09:49:42.35 ConsensusService Info persist block: height=2 hash=0x195f354baa79d5cf4f476748fadc82b0fa0ed5e584ec9bd9762e8948a799dbd0 tx=1\n...\n```\n\nYou can control the block generation period via the --seconds-per-block option\n(-s for short) of the run command. By default, Neo-Express generates a new block\nevery fifteen seconds, just like MainNet. However, for development purposes, it's\noften desirable to run the blockchain faster than that. The block generation\nperiod affects how quickly developers can view results of operations like transfer\nand it affects how quickly accounts accumulate GAS.\n\n## Manage Neo in the Neo-Express blockchain\n\nSince this terminal window is running the blockchain, open another terminal\nwindow in the same directory so you can interact with the running blockchain.\nIn the new terminal window, we will use Neo-Express to create a standard wallet\nand transfer the genesis", "doc_id": "0058a4c8-3e67-41d5-96b3-b991b3a98f0d", "embedding": null, "doc_hash": "157d805d75c5c5a76db8eb919bc282493133cbba679279f72de64635b194b307", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}, "node_info": {"start": 6659, "end": 9881, "_node_type": "1"}, "relationships": {"1": "dd3a6b30138b563d7747351bacdf8a0708bb8f43", "2": "8ee4f5d2-2fa8-4614-8dec-cad63572a942", "3": "b3b7dca4-3f25-4134-8e3d-1e8a4a4e8427"}}, "__type__": "1"}, "b3b7dca4-3f25-4134-8e3d-1e8a4a4e8427": {"__data__": {"text": "window, we will use Neo-Express to create a standard wallet\nand transfer the genesis Neo tokens to that wallet.\n\n``` shell\n$ neo-express wallet create testWallet\ntestWallet\n        AZDRabBcW4eESVfh9ssLd6udza9xpPn1P6\n    Note: The private keys for the accounts in this wallet are *not* encrypted.\n          Do not use these accounts on MainNet or in any other system where security is a concern.\n\n$ neo-express transfer neo 100000000 genesis testWallet\n{\n  \"contract-context\": {\n    \"type\": \"Neo.Network.P2P.Payloads.ContractTransaction\",\n    \"hex\": \"8000000149ea779c8d6e079781e0caf7d93fbf17091be411222ed01e2b196f95e4f6c0450000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50000c16ff28623007ffaa84760679e63bf907612d36dd2be527a67f6\",\n    \"items\": {}\n  },\n  \"script-hashes\": [\n    \"Ab6ENUi6UpWg6cQGUE3DEh3zam9yTJir6s\"\n  ],\n  \"hash-data\": \"8000000149ea779c8d6e079781e0caf7d93fbf17091be411222ed01e2b196f95e4f6c0450000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50000c16ff28623007ffaa84760679e63bf907612d36dd2be527a67f6\"\n}\n{\n  \"txid\": \"0xc12e0fa17aafce2a00bc28d5680bd1624a76cba31bd8b3a67925dc103d546425\"\n}\n```\n\n> Note, currently Neo-Express dumps JSON information about operations to the\n> console. A future update will display results in a more user-friendly fashion.\n\nNeo-Express allows you to refer to wallet account by an easy-to-remember names\ninstead of by Base58 encoded addresses like `Ab6ENUi6UpWg6cQGUE3DEh3zam9yTJir6s`.\nThere are a few reserved names, such as 'genesis'. Genesis refers to the multi-\nsignature account that receives the genesis Neo created for every new blockchain.\n\nWe can see the result of our transfer via the show account command\n\n``` shell\n$ neo-express show account testWallet\n{\n  \"version\": 0,\n  \"script_hash\": \"0x1bc70eb0de305fc5f95f987023fc13677f12c3fa\",\n  \"frozen\": false,\n  \"votes\": [],\n  \"balances\": [\n    {\n      \"asset\": \"0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b\",\n      \"value\": \"100000000\"\n    }\n  ]\n}\n```\n\n> Note, you must wait for the next block to relay before you can see the results\n> of the transfer. Running the blockchain faster than the fifteen second default\n> means you don't have to wait as long for operations to complete!\n\n## Claim GAS in the Neo-Express blockchain\n\nBecause we transferred all the genesis Neo and the blockchain is creating a new\nblock every second, GAS will build up pretty quickly in the testWallet account.\nWe can see how much GAS is available with the `show gas` command.\n\n>", "doc_id": "b3b7dca4-3f25-4134-8e3d-1e8a4a4e8427", "embedding": null, "doc_hash": "dacbc255fb78172e79f34477d9efecfc074135ff58fd2dd2e757614f02142c7b", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}, "node_info": {"start": 9874, "end": 12386, "_node_type": "1"}, "relationships": {"1": "dd3a6b30138b563d7747351bacdf8a0708bb8f43", "2": "0058a4c8-3e67-41d5-96b3-b991b3a98f0d", "3": "de3762d4-32e5-4159-8ade-464caf09adb3"}}, "__type__": "1"}, "de3762d4-32e5-4159-8ade-464caf09adb3": {"__data__": {"text": "can see how much GAS is available with the `show gas` command.\n\n> Note, even at one block every second, it will take a few minutes to build up\n> enough GAS to complete this quickstart. Now is a good time for a coffee break.\n\n``` shell\n$ neo-express show gas testWallet\n{\n  \"unavailable\": 1112,\n  \"available\": 0\n}\n```\n\nWait until there is over 1000 GAS in the unavailable bucket - that will be plenty\nto experiment with smart contract deployment and invocation. However, in order to\naccess the GAS, we need to execute another transfer, this time from and to the\ntestWallet account.\n\n``` shell\n$ neo-express transfer neo 100000000 testWallet testWallet\n< transfer output omitted for clarity >\n\n$ neo-express show gas testWallet\n{\n  \"unavailable\": 96,\n  \"available\": 1408\n}\n```\n\nThe available GAS can be claimed with the `claim gas` command and we can see the\nresult with the `show account` command.\n\n``` shell\n$ neo-express claim gas testWallet\n< claim gas output omitted for clarity >\n\n$ neo-express show account testWallet\n{\n  \"version\": 0,\n  \"script_hash\": \"0xf6677a52bed26dd3127690bf639e676047a8fa7f\",\n  \"frozen\": false,\n  \"votes\": [],\n  \"balances\": [\n    {\n      \"asset\": \"0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b\",\n      \"value\": \"100000000\"\n    },\n    {\n      \"asset\": \"0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7\",\n      \"value\": \"1408\"\n    }\n  ]\n}\n```\n\n## Deploy a Smart Contract to Neo-Express blockchain\n\nWith a running Neo-Express blockchain and a standard wallet account with plenty\nof GAS, we can deploy our smart contract to the blockchain. We start by importing\nthe contract into Neo-Express.\n\n``` shell\n$ neo-express contract import bin/Debug/netstandard2.0/publish/\nDoes this contract use storage? [y/N] y\nDoes this contract use dynamic invoke? [y/N] n\nIs this contract payable? [y/N] n\n```\n\nNeo-Express needs to know if the contract uses storage, dynamic invoke or if\nthe contract is payable in order to deploy the contract.\n\n> For Neo 3, this information will be in the smart contract manifest file.\n\nThe imported contract can now be deployed via the `contract deploy` command.\nYou must specify a wallet account to pay the deployment GAS price. You can get\ninformation about deployed contracts via the `contract get` command. \n\n``` shell\n$ neo-express contract deploy HelloWorld testWallet\n{\n  \"contract-context\": < omitted for clarity >\n  \"script-hashes\": < omitted for clarity >\n  \"hash-data\": < omitted for clarity >\n  \"engine-state\": {\n    \"state\": 1,\n    \"gas-consumed\": \"500\",\n    \"result-stack\": [\n      {\n        \"type\": \"InteropInterface\"\n      }\n    ]\n  }\n}\n{\n  \"txid\": \"0x9211b9fbe258c1a5f00ef7db225fc8f00ae601fb953d522e26d9a6d8867b684b\"\n}\n\n$ neo-express contract get HelloWorld\n{\n  \"version\": 0,\n  \"hash\":", "doc_id": "de3762d4-32e5-4159-8ade-464caf09adb3", "embedding": null, "doc_hash": "01e3ad476961e933b81b8283fb09f606a03737a54953c8e0c3acc39f43dbff3a", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}, "node_info": {"start": 12405, "end": 15189, "_node_type": "1"}, "relationships": {"1": "dd3a6b30138b563d7747351bacdf8a0708bb8f43", "2": "b3b7dca4-3f25-4134-8e3d-1e8a4a4e8427", "3": "683dda1a-27e1-4493-b6bf-b21b58cf32d1"}}, "__type__": "1"}, "683dda1a-27e1-4493-b6bf-b21b58cf32d1": {"__data__": {"text": "contract get HelloWorld\n{\n  \"version\": 0,\n  \"hash\": \"0x505d2e13ff4a4cf1c368ed2af7f7aad5720f4c38\",\n  \"script\": \"00c56b616168048418d60d0548656c6c6f05576f726c64615272680452a141f561616c7566\",\n  \"parameters\": [],\n  \"returntype\": \"Void\",\n  \"name\": \"Contract\",\n  \"code_version\": \"0.0.0\",\n  \"author\": \"No author provided\",\n  \"email\": \"nobody@fake.email\",\n  \"description\": \"No description provided\",\n  \"properties\": {\n    \"storage\": true,\n    \"dynamic_invoke\": false\n  }\n}\n```\n\n## Invoke a Smart Contract on the Neo-Express blockchain\n\nThe last step is to invoke the deployed contract. We use the `contract invoke`\ncommand for that.\n\n``` shell\n$ neo-express contract invoke HelloWorld\n{\n  \"engine-state\": {\n    \"state\": 1,\n    \"gas-consumed\": \"1.017\",\n    \"result-stack\": []\n  }\n}\n```\n\n> Note, the Hello World contract has no return value. If it did, we would see\n> it in the result-stack property.\n\nInvoking a smart contract without specifying a wallet account to pay the invocation\nGAS cost will not modify the state of the blockchain. For the HelloWorld contract,\nthat means that nothing will be written to blockchain storage. If you wish for a\ncontract invocation to make durable changes, you can specify a wallet account to\npay the GAS cost via the --account argument.\n\n``` shell\n$ neo-express contract invoke HelloWorld --account testWallet\n{\n  \"contract-context\": < omitted for clarity >\n  \"script-hashes\": < omitted for clarity >\n  \"hash-data\": < omitted for clarity >\n  \"engine-state\": {\n    \"state\": 1,\n    \"gas-consumed\": \"1.017\",\n    \"result-stack\": []\n  }\n}\n{\n  \"txid\": \"0x785346a3a338d70dd5bee6a70e1fc807a891d23a8d12d138b6a151b5eeae771e\"\n}\n```\n\nThe HelloWorld contract takes no parameter and it returns no values. However,\nit does modify contract storage in the blockchain. You can dump the storage\nstate for a given contract with the `contract storage` command. This command\nlists all the key/value pairs in the blockchain, showing both keys and values\nas both a hex-encoded byte array as well as a UTF-8 encoded string.\n\n``` shell\n$ neo-express contract storage helloWorld\n0x48656c6c6f\n  key (as string)   : Hello\n  value (as bytes)  : 0x576f726c64\n        (as string) : World\n  constant value    : False\n```\n", "doc_id": "683dda1a-27e1-4493-b6bf-b21b58cf32d1", "embedding": null, "doc_hash": "80d0b14a15cfec7669d39c56bd7435fc6d208b800c09930b59f40803a6162e2d", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}, "node_info": {"start": 15192, "end": 17408, "_node_type": "1"}, "relationships": {"1": "dd3a6b30138b563d7747351bacdf8a0708bb8f43", "2": "de3762d4-32e5-4159-8ade-464caf09adb3"}}, "__type__": "1"}, "331ccbed-9980-4dc1-b6d8-b4d657198012": {"__data__": {"text": "# Neo-Express for N3 Settings Reference\n\nThe `.neo-express` file for Neo N3 compatible versions of N3 includes a `settings` object property. \nThis document details the values that Neo-Express reads from the `settings` object.\n\n## `chain.SecondsPerBlock`\n\nThe `chain.SecondsPerBlock` Neo-Express setting corresponds to the `MillisecondsPerBlock`\n[config.json property](https://github.com/neo-project/neo-node/blob/5e3ffcb957e4e8fd8182307f68a70e653557e7d0/neo-cli/config.json#L28)\nand the `--secondsPerBlock` option for the Neo-Express `run` command. \n\nBy default, Neo-Express mints a new block every 15 seconds. The `chain.SecondsPerBlock` setting can\nbe used to override the default behavior. If the `run` command `--secondsPerBlock` option is specified,\nthe `chain.SecondsPerBlock` setting is ignored.\n\n`chain.SecondsPerBlock` is specified as an unsigned integer. If you specify an invalid unsigned integer\nvalue for this setting, Neo-Express reverts to the default.\n\nExample usage:\n\n``` json\n  \"settings\": {\n    \"chain.SecondsPerBlock\": \"5\" // Mint a new block every 5 seconds\n  }\n```\n\n## `rpc.BindAddress`\n\nThe `rpc.BindAddress` Neo-Express setting corresponds to the `BindAddress`\n[RpcServer config property](https://github.com/neo-project/neo-modules/blob/20880c3373c4f446968946504cf79280a7e4721f/src/RpcServer/config.json#L6).\n\nBy default, Neo-Express only listens for JSON-RPC requests on the loopback address. This means that\nJSON-RPC requests must originate on the same machine as Neo-Express is running in order to be serviced.\nWhile this is the most secure approach, it limits the ability of the developer to test cross machine\nscenarios, especially ones that involve mobile devices. The `rpc.BindAddress` setting can be used to\noverride the default behavior.\n\nThe `rpc.BindAddress` field accepts an IP address in dotted quad notation. It specifies the IP Address\nthat the JSON-RPC server will listen on for client requests. Typically, to enable remote access to\na Neo-Express instance, you would specify the `rpc.BindAddress` to be `0.0.0.0`. \n\nIf you specify an invalid IP Address, Neo-Express reverts to the default loopback `BindAddress`\n(aka `127.0.0.1`).\n\nExample usage:\n\n``` json\n  \"settings\": {\n    \"rpc.BindAddress\": \"0.0.0.0\" // listens for JSON-RPC requests on all network interfaces\n  }\n```\n\n## `rpc.MaxFee`\n\nThe `rpc.MaxFee` Neo-Express setting corresponds to the `MaxFee`\n[RpcServer config property](https://github.com/neo-project/neo-modules/blob/20880c3373c4f446968946504cf79280a7e4721f/src/RpcServer/config.json#L14).\nThis setting specifies a maximum Network Fee for the\n[`sendfrom`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendfrom.html),\n[`sendmany`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendmany.html)\nand [`sendtoaddress`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendtoaddress.html)\nJSON-RPC methods. \n\nThis setting defaults to 0.1 GAS. If you specify an invalid decimal", "doc_id": "331ccbed-9980-4dc1-b6d8-b4d657198012", "embedding": null, "doc_hash": "30cce027d062d65a0cf95dd79f5400e104807510de2f01ae1aaf3c098637580a", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/settings.md"}, "node_info": {"start": 0, "end": 2980, "_node_type": "1"}, "relationships": {"1": "b1c17665553a8ba329e1569f5dc80c82ef842731", "3": "a7a63a8c-de38-4dbf-a267-596542048479"}}, "__type__": "1"}, "a7a63a8c-de38-4dbf-a267-596542048479": {"__data__": {"text": "setting defaults to 0.1 GAS. If you specify an invalid decimal value for this setting, Neo-Express reverts to the default.\n\nExample usage:\n\n``` json\n  \"settings\": {\n    \"rpc.MaxFee\": \"0.2\" // support higher network fee for send[from/many/toaddress] methods\n  }\n```\n\n## `rpc.MaxGasInvoke`\n\nThe `rpc.MaxGasInvoke` Neo-Express setting corresponds to the `MaxGasInvoke`\n[RpcServer config property](https://github.com/neo-project/neo-modules/blob/20880c3373c4f446968946504cf79280a7e4721f/src/RpcServer/config.json#L13).\nThis setting specifies maximum limit in GAS for the\n[invokefunction](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html)\nand [invokescript](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html)\nJSON-RPC methods.\n\nThis setting defaults to 10.0 GAS. If you specify an invalid decimal value for this setting, Neo-Express reverts to the default.\n\nExample usage:\n\n``` json\n  \"settings\": {\n    \"rpc.MaxGasInvoke\": \"15\" // support higher GAS limit for invoke[function/script] methods\n  }\n```\n\n## `rpc.MaxIteratorResultItems`\n\nThe `rpc.MaxIteratorResultItems` Neo-Express setting corresponds to the `MaxIteratorResultItems`\n[RpcServer config property](https://github.com/neo-project/neo-modules/blob/20880c3373c4f446968946504cf79280a7e4721f/src/RpcServer/config.json#L16).\nThis setting specifies maximum number of items returned to the RPC caller when there is an iterator\non the result stack.\n\nThis setting defaults to 100 items. If you specify an invalid or negative integer value for this setting,\nNeo-Express reverts to the default.\n\nExample usage:\n\n``` json\n  \"settings\": {\n    \"rpc.MaxIteratorResultItems\": \"150\" // support higher item limit for iterator results\n  }\n```\n\n## `rpc.SessionEnabled`\n\nThe `rpc.SessionEnabled` Neo-Express setting corresponds to the `SessionEnabled`\n[RpcServer config property](https://github.com/neo-project/neo-modules/blob/20880c3373c4f446968946504cf79280a7e4721f/src/RpcServer/config.json#L19).\nThis setting specifies if iterator sessions are enabled.\n\nThis setting defaults to `true`. If you specify an invalid boolean value for this setting, \nNeo-Express reverts to the default.\n\nExample usage:\n\n``` json\n  \"settings\": {\n    \"rpc.SessionEnabled\": \"false\" // disable sessions\n  }\n```\n", "doc_id": "a7a63a8c-de38-4dbf-a267-596542048479", "embedding": null, "doc_hash": "208039e3b8c68c65a53207afa6f46bc59e62ca77014c7547935cbe72dfaeaab7", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/settings.md"}, "node_info": {"start": 2918, "end": 5212, "_node_type": "1"}, "relationships": {"1": "b1c17665553a8ba329e1569f5dc80c82ef842731", "2": "331ccbed-9980-4dc1-b6d8-b4d657198012"}}, "__type__": "1"}, "e46c2182-002c-4380-a4e6-27d9a587153b": {"__data__": {"text": "<!-- markdownlint-enable -->\n# Neo-WorkNet Command Reference\n\nThe `neo-worknet` tool enables a developer to create and run a Neo N3 consensus node that branches\nfrom a public Neo N3 blockchain - including the official Neo N3 MainNet and T5 TestNet. This provides\nthe developer a local scratchpad environment that mirrors the state of a known public network at a \nspecified index. Changes to the local branch of the network are independent of the public network.\n\n\n> Note, you can pass -?|-h|--help to show a list of supported commands or to show\n> help information about a specific command.\n\n## neo-worknet create\n\n```\nCreate a Neo Worknet branch\n\nUsage: neo-worknet create [options] <RpcUri> <Output>\n\nArguments:\n  RpcUri              URL of Neo JSON-RPC Node\n                      Specify MainNet, TestNet or JSON-RPC URL\n  Output              Name of .neo-worknet file to create (Default: ./default.neo-worknet)\n\nOptions:\n  -i|--index <INDEX>  Block height to branch at\n                      Default value is: 0.\n  -f|--force          Overwrite existing data\n  --disable-log       Disable verbose data logging\n  -?|-h|--help        Show help information.\n```\n\nThe `create` command creates a new local WorkNet blockchain as a branch from a public Neo N3 blockchain. \nThis command will create both a `.neo-worknet` file to hold details about the blockchain branch and a \n`data` folder that will contain data loaded from the remote blockchain and cached locally as well as \nlocally generated blocks and contract storage updates.\n\nThe user must specify a remote Neo N3 blockchain network to branch from. Neo-WorkNet has built in knowledge\nof MainNet and the T5 TestNet. However, the user can specify any Neo N3 RPC API node they wish. The \nuser can specify a specific block index to branch at. If unspecified, `neo-worknet` will branch at the\ncurrent height of the specified blockchain. \n\n> Note, Neo-WorkNet depends on the StateService and RpcServer [plugins](https://github.com/neo-project/neo-modules)\n> to be installed on the `RpcUri` argument. Furthermore, the StateService *MUST* be configured with \n> `FullState` as `true`.\n\nThe branched blockchain *CANNOT* be validated across the branch point. When a Neo Worknet branch network\nis created, a new wallet account is created to act as the consensus block signer. The public network's\ncouncil members' accounts are obviously not available for signing new blocks on a local branch of the\nchain. Changing the consensus account that signs blocks requires an update to the `NextConsensus` field.\nUpdating this field requires adding an *unsigned* block to the local blockchain branch. Since this branch\ntransition block is unsigned, the blockchain history can not be validated across this transition block. \n\nUnlike Neo-Express, Neo-Worknet doesn't provide an option for creating a multiple consensus nodes for\nthe branched chain. Based on understanding of Neo-Express usage patterns, multiple conesnsus nodes are\nnot typically used. If four or seven conesnsus node support in Neo-WorkNet is important to you, please\nfile an issue in our [GitHub repo](https://github.com/neo-project/neo-express/issues)\n\n## neo-worknet prefetch\n\n```\nFetch data for specified contract\n\nUsage: neo-worknet", "doc_id": "e46c2182-002c-4380-a4e6-27d9a587153b", "embedding": null, "doc_hash": "d8290016e6c22a50760d21ae1ac04f204b8252fdb65bce8e7ccd48a081c1e21b", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/worknet-command-reference.md"}, "node_info": {"start": 0, "end": 3235, "_node_type": "1"}, "relationships": {"1": "7d232c62e8b4426f57a48785fe2d0a797da45ad1", "3": "888fae8d-77c8-4480-9a26-cd3e70109d61"}}, "__type__": "1"}, "888fae8d-77c8-4480-9a26-cd3e70109d61": {"__data__": {"text": "data for specified contract\n\nUsage: neo-worknet prefetch [options] <Contract>\n\nArguments:\n  Contract       Name or Hash of contract to prefetch contract storage\n\nOptions:\n  --disable-log  Disable verbose data logging\n  -?|-h|--help   Show help information.\n  --input        Path to .neo-worknet data file\n```\n\nNeo-WorkNet caches deployed contract storage on first access. For deployed contracts with thousands\nof storage records, this can be very time consuming. The `prefetch` command provides a mechanism to\ndownload contract storage before running the chain. This will ensure all data associated with the specified \ncontract is downloaded and available so the WorkNet node can run that contract without needing to pause\nand download data the first time it's run locally. \n\n## neo-worknet reset\n\n```\nReset WorkNet back to initial branch point\n\nUsage: neo-worknet reset [options]\n\nOptions:\n  -f|--force    Overwrite existing data\n  -?|-h|--help  Show help information.\n  --input       Path to .neo-worknet data file\n```\n\nThis command resets all the locally generated blocks in the chain. The unsigned branch transition block\n(described in the `create` command section) is deleted and regenerated as part of this process.\n\nAny contract data from the public chain that has been cached locally - either via `prefetch` or thru\nthe normal process of executing transactions on the branched chain - are not affected. Even after a\n`reset`, contract storage does not need to be `prefetch`ed again.\n\n## neo-worknet run\n\n```\nRun Neo-WorkNet instance node\n\nUsage: neo-worknet run [options]\n\nOptions:\n  -s|--seconds-per-block <SECONDS_PER_BLOCK>  Time between blocks\n  -?|-h|--help                                Show help information.\n  --input                                     Path to .neo-worknet data file\n```\n\nRuns the branched blockchain locally. New blocks will be added to the chain every 15 seconds unless\noverridded with the `--seconds-per-block` option. \n\nThese new blocks added to the chain have *no* correlation to the blocks added to the public chain that\nwas branched from. From the point of the branch, the original source chain and the local branched chain\nare independent. \n\nNeo-WorkNet comes bundled with the standard `RpcServer` module, similar to Neo-Express. This enables\ndApps to interact with the branched chain like they would with the public chain. Neo-WorkNet supports \nboth read operations like\n[`getblock`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html)\nas well as write operations like \n[`sendrawtransaction`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendrawtransaction.html).\n\nIn addition to the standard `RpcServer` methods, Neo-WorkNet provides custom implementations", "doc_id": "888fae8d-77c8-4480-9a26-cd3e70109d61", "embedding": null, "doc_hash": "687c0c43e387da92aaea0fd1941972379c986d2246440f8c5aeea5b090583b4d", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/worknet-command-reference.md"}, "node_info": {"start": 3193, "end": 5941, "_node_type": "1"}, "relationships": {"1": "7d232c62e8b4426f57a48785fe2d0a797da45ad1", "2": "e46c2182-002c-4380-a4e6-27d9a587153b", "3": "80a00ca2-d308-44cb-8a04-1e836fcc68a5"}}, "__type__": "1"}, "80a00ca2-d308-44cb-8a04-1e836fcc68a5": {"__data__": {"text": "standard `RpcServer` methods, Neo-WorkNet provides custom implementations of\n[`getapplicationlog`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html),\n[`getnep11balances`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11balances.html),\n[`getnep11properties`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11properties.html)\nand [`getnep17balances`](https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17balances.html)\nfrom the ApplicationLogs and TokenTracker plugins (Note, the `getnep11transfers` and `getnep17transfers`)\nRPC methods are *not* supported. Additionally, Neo-WorkNet implements `ExpressShutdown` and `ExpressListContracts`\nRPC methods that are exposed by Neo-Express.", "doc_id": "80a00ca2-d308-44cb-8a04-1e836fcc68a5", "embedding": null, "doc_hash": "2aa66ddcef4b8cbd6f420b3b2cf6e1ac8a11541cb79101ba5bfafaf167c8a294", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/worknet-command-reference.md"}, "node_info": {"start": 5911, "end": 6701, "_node_type": "1"}, "relationships": {"1": "7d232c62e8b4426f57a48785fe2d0a797da45ad1", "2": "888fae8d-77c8-4480-9a26-cd3e70109d61"}}, "__type__": "1"}, "b61ed279-35f8-445d-87f0-081852933ddd": {"__data__": {"text": "<!-- markdownlint-enable -->\n# Neo-Express and Neo-Trace\n\n[![Nuget](https://img.shields.io/nuget/v/Neo.Express)](https://www.nuget.org/packages/Neo.Express/)\n[![Build Status](https://dev.azure.com/ngdenterprise/Build/_apis/build/status/neo-project.neo-express?branchName=master)](https://dev.azure.com/ngdenterprise/Build/_build/latest?definitionId=2&branchName=master)\n\n> Note, This repo uses a branch structure similar to other repos in the Neo project.\n> The `master` branch contains Neo N3 version of Neo-Express and Neo-Trace.\n> The `master-2.x` branch contains Neo Legacy version of Neo-Express.\n> There is no Neo Legacy version of Neo-Trace.\n\n## Requirements\n\nAs of Neo v3.1, Neo-Express and Neo-Trace require \n[version 6.0](https://dotnet.microsoft.com/en-us/download/dotnet/6.0) \nof [the .NET developer platform](https://dot.net) to be installed. \n\n> Note: Neo-Express has additional, platform-specific requirements beyond .NET 6.\n> These requirements are detailed below.\n> Neo-Trace has no additional dependencies beyond .NET 6.\n\n> Note: the Neo v3.0 version of Neo-Express and Neo-Trace used .NET 5.\n> .NET 5 is [no longer supported](https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core) by Microsoft.\n> We strongly recommend using .NET 6 and the latest version of Neo-Express and Neo-Trace.\n\n## Installation\n\nNeo-Express and Neo-Trace are distributed as\n[.NET Tools](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools).\n.NET tools are [NuGet](https://nuget.org) packages containing console applications\nthat can be installed on a developer's machine via the `dotnet tool` command.\n\nTo install the latest version of Neo-Express as a global tool, run the\n`dotnet tool install` command in a terminal window.\n\n``` shell\n> dotnet tool install Neo.Express -g\n```\n\nTo update Neo-Express to the laest version, run the `dotnet tool update`\ncommand in a terminal window.\n\n``` shell\n> dotnet tool update Neo.Express -g\n```\n\n> Note: The process for installing and updating Neo-Trace is identical to Neo-Express\n> except the Neo-Trace NuGet package is `Neo.Trace`.\n\n.NET tools also supports \"local tool\" installation. This allows for different\nversions of a .NET tool to be installed in different directories.\nFull details on installing and updating .NET tools are available in the\n[official documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools).\n\n### Installing Preview Releases\n\nThe Neo Blockchain Toolkit has a public\n[build server](https://dev.azure.com/ngdenterprise/Build/_build) and\n[package feed](https://dev.azure.com/ngdenterprise/Build/_artifacts).\nThe public package feed contains unreleased builds of Neo-Express and Neo-Trace.\n\nYou can install preview builds of Neo-Express or Neo-Trace by using the `--add-source`\noption to specify the Neo Blockchain Toolkit package feed.\nFor example, to update to the latest release branch version of Neo-Express, you would run this command:\n\n``` shell\n> dotnet tool update Neo.Express -g --add-source", "doc_id": "b61ed279-35f8-445d-87f0-081852933ddd", "embedding": null, "doc_hash": "6fccb57fdef31f09b7dd819f71b969048858457eb498890a565e1e82c85e76f4", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/readme.md"}, "node_info": {"start": 0, "end": 3007, "_node_type": "1"}, "relationships": {"1": "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6", "3": "fb335034-59ec-41c4-a975-87d1081dbbff"}}, "__type__": "1"}, "fb335034-59ec-41c4-a975-87d1081dbbff": {"__data__": {"text": "shell\n> dotnet tool update Neo.Express -g --add-source https://pkgs.dev.azure.com/ngdenterprise/Build/_packaging/public/nuget/v3/index.json\n```\n\nYou can also install master branch releases of these tools by using the `--version`\nand/or `--prerelease` command line options. For more details, please see the\n[official dotnet tool documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools#install-a-specific-tool-version).\n\nIf you regularly use unreleased versions of these tools in a given project,\nyou can specify the Neo Blockchain Toolkit package feed in a \n[NuGet.config file](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior#changing-config-settings).\nSeveral Neo sample projects like \n[NeoContributorToken](https://github.com/ngdenterprise/neo-contrib-token)\nuse a NuGet.config file.\n\n## Neo-Express\n\nNeo-Express is a privatenet optimized for development scenarios. \nIt is built on the same Neo platform core as\n[neo-cli](https://docs.neo.org/docs/en-us/node/cli/setup.html) and\n[neo-gui](https://docs.neo.org/docs/en-us/node/gui/install.html)\nto maximize compatibility between local development and public chain environments.\n\nNeo-Express provides the following features:\n\n- Blockchain instance management\n- Wallet management\n- Asset management\n- Smart contract management\n- Blockchain checkpoint and rollback\n\nDocs are somewhat limited at this point. Please review the\n[Command Reference](docs/command-reference.md) to get an understanding of\nNeo-Express capabilities.\n\n### Additional Neo-Express Requirements\n\n#### Ubuntu Installation\n\n> Note, while Microsoft has instructions for \n> [installing .NET via Snap](https://docs.microsoft.com/en-us/dotnet/core/install/linux-snap),\n> there is a [known issue](https://github.com/dotnet/runtime/issues/3775#issuecomment-534263315)\n> with this approach that leads to a segmentation fault in Neo Express.\n> Unfortunately, this issue with the .NET snap installer\n> [has been closed and will not be fixed](https://github.com/dotnet/runtime/issues/3775#issuecomment-888676286).\n> As such, we recommend [using APT](https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu)\n> to install .NET on Ubuntu instead.\n\nInstalling on Ubuntu requires installing libsnappy-dev, libc6-dev and librocksdb-dev via apt-get\n\n``` shell\n> sudo apt install libsnappy-dev libc6-dev librocksdb-dev -y\n```\n\n#### MacOS Installation\n\nInstalling on MacOS requires installing rocksdb via [Homebrew](https://brew.sh/)\n\n``` shell\n> brew install rocksdb\n```\n\n> Note, .NET 6 Arm64 has [full support for Apple Silicon](https://devblogs.microsoft.com/dotnet/announcing-net-6/#arm64).\n> Homebrew likewise also supports Apple Silicon. If you have any issues running Neo-Express on Apple Silicon hardware,\n> please [open an issue](https://github.com/neo-project/neo-express/issues) in the Neo-Express repo.\n\n#### Neo Legacy Version Support\n\nNeo Legacy versions of Neo-Express used older versions of .NET Core.\n\n> Note, if you need a Neo Legacy version of Neo-Express because you are still\n> developing for the Legacy Neo Blockchain, we highly advise using the v1.1\n> version of Neo-Express. Pre-release versions of the Neo Legacy version of\n> Neo-Express ran on versions of .NET Core that", "doc_id": "fb335034-59ec-41c4-a975-87d1081dbbff", "embedding": null, "doc_hash": "0c133c2ac05d655ecfa532145b27072029dd578dd27510690c95df20c08772c1", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/readme.md"}, "node_info": {"start": 2960, "end": 6221, "_node_type": "1"}, "relationships": {"1": "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6", "2": "b61ed279-35f8-445d-87f0-081852933ddd", "3": "ec3453b5-ff7b-498a-b23a-dbb7e9dd2f15"}}, "__type__": "1"}, "ec3453b5-ff7b-498a-b23a-dbb7e9dd2f15": {"__data__": {"text": "Neo Legacy version of\n> Neo-Express ran on versions of .NET Core that no longer supported by Microsoft.\n\n|Neo-Express Version|.NET Core Version|\n|-------------------|-----------------|\n| v1.1 | [v3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1) |\n| v1.0 | [v3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1) |\n| v0.9 | [v3.0](https://dotnet.microsoft.com/download/dotnet-core/3.0) |\n| v0.8 | [v2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2) |\n\n## Neo-Trace\n\nNeo-Trace is a tool to generate\n[Neo Smart Contract Debugger](https://github.com/neo-project/neo-debugger)\ntrace files for existing blocks or transactions. You can specify a block by index or hash\nor a transaction by hash.\n\n```\n> neotrace block 365110 --rpc-uri testnet\n> neotrace block 0xd2421d88919dccc1ac73647bf06089bae78ce02060302eff861a04e381bc91ad --rpc-uri testnet\n> neotrace tx 0xef1917b8601828e1d2f3ed0954907ea611cb734771609ce0ce2b654bb5c78005--rpc-uri testnet\n```\n\nNeo-Trace depends on the  \n[StateService plugin module](https://github.com/neo-project/neo-modules/tree/master/src/StateService)\nrunning with `FullState` enabled. The official JSON-RPC nodes for MainNet and TestNet\n(such as `http://seed1.neo.org:10332` and `http://seed1t5.neo.org:20332`) are configured to\nrun the StateService plugin with `FullState` enabled.\n\n## A Message from the Engineer\n\nThanks for checking out Neo-Express and Neo-Trace! I am eager to hear your opinion of the product.\n\nIf you like these tools, please let me know on [Twitter](https://twitter.com/devhawk),\n[email](mailto:devhawk@outlook.com) or the [Neo Discord server](https://discord.gg/G5WEPwC).\n\nIf there are things about these tools you don't like, please file issues in our\n[GitHub repo](https://github.com/neo-project/neo-express/issues). You can hit me up on\nTwitter, Discord or email as well, but GitHub issues are how we track improvements\nwe make. So don't be shy - file an issue if there is anything you'd like to see changed in the product.\n\nMost software is built by teams of people. However, Neo-Express and Neo-Trace so far have been\nmostly a solo effort. I'm looking forward to having other folks contribute in the future,\nbut so far it's just been me. That means that these tools have been designed around\nmy experiences and my perspective. I can't help it, my perspective is the only\none I have! :) So while I find these tools intuitive, I realize that you may not\nfeel the same. Please let me know if this is the case! I didn't build these tools\nfor me, I built it for the Neo developer community at large. So if there are\nchanges we can make to make these tools more accessible, intuitive, easier to\nuse or just flat-out better - I want to hear about them.\n\nThanks again for checking out these tools. I look forward to hearing from you.\n\n\\- Harry Pierson (aka [DevHawk](http://devhawk.net)), Chief Architect NGD Seattle\n", "doc_id": "ec3453b5-ff7b-498a-b23a-dbb7e9dd2f15", "embedding": null, "doc_hash": "db4b691cb8ccb8287c38ccd09918f47e24679c0dba461ae95145f85c2cd7c47d", "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/readme.md"}, "node_info": {"start": 6200, "end": 9083, "_node_type": "1"}, "relationships": {"1": "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6", "2": "fb335034-59ec-41c4-a975-87d1081dbbff"}}, "__type__": "1"}, "978f1088-984f-4875-a3d0-9a91c0f82eb5": {"__data__": {"text": "<!-- markdownlint-enable -->\n# Neo N3 Smart Contract Debugger launch.config Reference\n\n> Note, this document is for Neo N3 smart contract launch configurations (i.e. .NEF files).\n> For information about Neo Legacy smart contract launch configurations, please see\n> [this document](debug-legacy-config-reference.md).\n\nThe Neo Smart Contract Debugger enables fine grained execution control\nvia custom configuration settings in [launch.json](https://code.visualstudio.com/Docs/editor/debugging#_launch-configurations).\nThis document provides information on these settings.\n\n> Remember, the Neo Smart Contract Debugger is in preview. You will find bugs\n> and/or missing functionality as you use it. Please let us know of any issues\n> you find or enhancements you would like to see via our [GitHub repo](https://github.com/neo-project/neo-debugger).\n\n## program\n\nAbsolute path to NEF file being debugged. Contract manifest (aka .manifest.json) and Debug Info (aka .nefbugnfo)\nexpected to be located in the same folder. \n\nExample:\n\n```json\n\"program\": \"${workspaceFolder}/token-contract/bin/sc/NeoContributorTokens.nef\",\n```\n\n## invocation\n\nDescribes how the contract will be invoked. Neo N3 debugger supports multiple invocation mechanisms,\ndescribed below.\n\n### invoke operation\n\nWith this invocation, the configuration specifies the operation name and arguments to invoke. By default,\nthe debugger generates an invocation script for calling the specified operation with the specified\narguments from the contract specified via the `program` property. Optionally, a different contract\nmay be specified via the `contract` property. This is particularly useful for debugging `OnNep17Payment`\noperations that are invoked as a result of a transfer operation.\n\n```json\n\"invocation\": {\n    \"operation\": \"mint\",\n    \"args\": [\n        \"Da Hongfei\",\n        \"Founder of Neo, Chair of Neo Foundation, CEO of NGD\",\n        \"https://neo3.azureedge.net/images/discover/DaHongfei.jpg\"\n    ]\n}\n```\n\n### invocation file\n\nWith this invocation, the configuration specifies a path to an existing \n[Neo invoke file](https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN12%20-%20Neo%20Express%20Invoke%20Files.md).\nInvoke files are JSON format files, similar in structure to the [operation invocation](#invoke-operation)\ndescribed above. Invocation files are supported by both the Neo Smart Contract Debugger as well as by\n[Neo Express](https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md#neoxp-contract-invoke).\n\n```json\n\"invocation\": {\n    \"invoke-file\": \"${workspaceFolder}/invoke-files/list-nft.neo-invoke.json\"\n},\n```\n\n### trace-file\n\nWith this invocation, the configuration specifies a path to an existing .neo-trace file, typically\ngenerated by [NeoTrace](https://github.com/neo-project/neo-express#neotrace) and NeoExpress (via the --trace option).\nThis allows debugging of transactions that executed on a public network such as MainNet or TestNet.\n\n> Note, when using a trace file, most of the properties defined in this document are not used. `program` must still\n  be specified and only `sourceFileMap`, `return-types` and `stored-contracts` optional properties are used. All\n  other properties are ignored.\n\n```json\n\"invocation\": {\n    \"trace-file\":", "doc_id": "978f1088-984f-4875-a3d0-9a91c0f82eb5", "embedding": null, "doc_hash": "154c459d93b0e9bfdbdf24268da185e1c60155e9538e5cf776f10a7a38d07923", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md"}, "node_info": {"start": 0, "end": 3274, "_node_type": "1"}, "relationships": {"1": "14cc11868d0db64989487015342363ea6d9c4189", "3": "566bdcc1-8f38-4976-adde-d05bdc514371"}}, "__type__": "1"}, "566bdcc1-8f38-4976-adde-d05bdc514371": {"__data__": {"text": "{\n    \"trace-file\": \"${workspaceFolder}/trace-files/0x45239b3764a0973c89c1fca6bf1ef438a462f7fb705cdf7cf1739abe48328dad.neo-trace\"\n}\n```\n\n### oracle-response\n\nThis invocation configuration is used to debug an oracle response callback method. \n\nProperties for this invocation type include:\n\n* `url`: the url of the oracle results the debugger is simulating. `url` is a required property\n  of this invocation type.\n* `result`: JSON results to pass to the oracle callback operation\n* `result-file`: path to a JSON file to pass to the oracle callback operation\n\n> Either `result` or `result-file` must be specified. If both are specified, `result` is used and `result-file` is ignored\n\n* `code`: `OracleResponseCode` to use for the response. Defaults to `Success`\n* `callback`: contract operation callback to use for synthesized oracle requests\n* `filter`: JSONPath filter value to use for synthesized oracle requests\n* `gas`: gasForResponse value to use for synthesized oracle requests\n\n> Neo Debugger will generate an oracle request for the contract specified in `program` property using\n  the `url`, `callback`, `filter` and `gas` properties of the oracle response invocation object if\n  there isn't an existing outstanding request in the specified `checkpoint`. If there is an existing\n  oracle request for the specified `url`, the `callback`, `filter` and `gas` properties are ignored.\n\n```json\n\"invocation\": {\n    \"oracle-response\": {\n        \"url\": \"https://some-domain.example/some/path\",\n        \"result-file\": \"${workspaceFolder}/response.json\",\n    }\n},\n```\n\n### deploy\n\nThis invocation configuration is used to debug the `_deploy` method of a contract.\n\n```json\n\"invocation\": \"deploy\",\n```\n\n## neo-express\n\nSpecifies the path to a NeoExpress file. Specifying this property enables accounts in other launch\nconfiguration properties (such as `signers` and operation `args`) to reference accounts from the\n.neo-express file via the `@` syntax (aka `@alice`) instead of requiring a Neo N3 address (aka\n`NViTnvofZYshnqppD6ksCtUzBDn54an5hM`) or hex encoded 20 byte array (such as `0xccc907b1d386a52071285e580322a612e508a4f2`).\n\n```json\n\"neo-express\": \"${workspaceFolder}/default.neo-express\",\n```\n\n## checkpoint\n\nSpecifies the path to a NeoExpress checkpoint file. Specifying this property enables the debugger to \nuse real blockchain data while debugging.\n\n> Note, Neo Debugger *NEVER* updates an actual NeoExpress node instance. Contract storage changes are\n  stored in memory and discarded when the debugging session ends. Each individual launch of the debugger\n  starts from the same initial state. \n\nIf this property is not set, Neo Debugger creates a stub Neo Blockchain with only the genesis block.\nThe debugger ensures the contract specified in `program` is deployed on the chain, but adds no other\ncontract storage information. By specifying a `checkpoint`, the developer can debug scenarios with\nrepresentative data stored in an actual instance of a NeoExpress node.\n\n> Note, even when `checkpoint` is specified, the debugger still checks to ensure the latest version\n  of the `program` contract is deployed. If it is not, the deployed version is updated (in memory, as\n  per earlier note) to the current version on disk. This ensures the developer can always debug the\n  contract as it currently", "doc_id": "566bdcc1-8f38-4976-adde-d05bdc514371", "embedding": null, "doc_hash": "39471cefa3a7432691eba8528eb6b215841940a050139755b5505f956a92c38a", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md"}, "node_info": {"start": 3260, "end": 6567, "_node_type": "1"}, "relationships": {"1": "14cc11868d0db64989487015342363ea6d9c4189", "2": "978f1088-984f-4875-a3d0-9a91c0f82eb5", "3": "f53a1f40-d84f-4114-8a2e-4ac43a9d0431"}}, "__type__": "1"}, "f53a1f40-d84f-4114-8a2e-4ac43a9d0431": {"__data__": {"text": "version on disk. This ensures the developer can always debug the\n  contract as it currently exists on disk in compiled format.\n\n```json\n\"checkpoint\": \"${workspaceFolder}/checkpoints/token-bought.neoxp-checkpoint\",\n```\n\n## signers\n\n> For more information about signers / witnesses, please see \n  [Thou shalt check their witnesses](https://neospcc.medium.com/thou-shalt-check-their-witnesses-485d2bf8375d)\n  by the good folks at the [NEO SPCC](https://nspcc.io/)\n\nEvery Neo transaction that executes on the blockchain must be signed by one or more accounts. The\n`signers` configuration property is used to specify signing information for the transaction executing\nin the debugger.\n\n`signers` is an array of JSON encoded signer objects. A signer can be specified as a simple string or\nas a JSON object that supports additional properties.\n\nProperties for a `signers` object include:\n\n* `account` specifies a wallet account, as a Neo N3 address (such as `NViTnvofZYshnqppD6ksCtUzBDn54an5hM`),\n  a hex encoded 20 byte array (such as `0xccc907b1d386a52071285e580322a612e508a4f2`) or an `@` prefixed\n  NeoExpress wallet name such as `@alice`. The `@` prefixed syntax is only supported if the `neo-express`\n  property is specified. This property is required. If the default values are sufficient for the other\n  signer properties, the account string can be specified directly.\n* `scopes` specifies the `WitnessScope` of the signer. `WitnessScope.CalledByEntry` scope is used by default.\n* `allowedcontracts` specifies the list of contract hashes allowed by the `WitnessScope.CustomContracts` scope.\n  Contract hashes can be specified by hex encoded string or deployed contract name.\n* `allowedgroups` specifies the list of custom group hex-encoded public keys allowed by the `WitnessScope.CustomGroups` scope.\n\n> Note, at this time `WitnessScope.WitnessRules` is not supported by the Neo debugger.\n\nIf no `signers` are specified, a single signer with a dummy account value and `WitnessScope.None` scope\nis used. The dummy account signer will fail all `Runtime.CheckWitness` calls unless the `check-result`\nconfig property is specified ([see below](#runtime)).\n\n```json\n\"signers\": [ \n    \"@alice\",\n    {\n        \"account\": \"@bob\",\n        \"scopes\": \"Global\"\n    }\n],\n```\n\n## deploy-signer\n\n`deploy-signer` is a signer JSON object [as described above](#signers) that is used when deploying the latest\nversion of the contract to the debugger stub chain. If the latest version of the contract is already deployed,\nthe `deploy-signer` property is not used\n\nFor [`deploy` invocations](#deploy), the debugger will use the `signers` value if specified and only use the\n`deploy-signer` value as a fallback.\n\n```json\n\"deploy-signer\": \"@owen\"\n```\n\n## runtime\n\nSpecifies behavior of `Runtime.Trigger` and `Runtime.CheckWitness` members.\n\n`Runtime.Trigger` returns either `TriggerType.Verification` or `TriggerType.Application`.\nBy default, the debugger return `TriggerType.Application` for `Runtime.Trigger`, but\nthis can be overridden by the `runtime.trigger` configuration property.\n\n> Note, at this time only `TriggerType.Application` is supported.\n\n`Runtime.CheckWitness` takes a Hash160 or Public key parameter and returns a boolean. The result of this\ncall indicates if the specified account has", "doc_id": "f53a1f40-d84f-4114-8a2e-4ac43a9d0431", "embedding": null, "doc_hash": "2d888e76145f475d05b8e0cba339d4cc3236c229a318a9caf3506a44bc0f8a58", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md"}, "node_info": {"start": 6507, "end": 9788, "_node_type": "1"}, "relationships": {"1": "14cc11868d0db64989487015342363ea6d9c4189", "2": "566bdcc1-8f38-4976-adde-d05bdc514371", "3": "a1a05ec0-79d1-4e78-b2d5-e98d83f55644"}}, "__type__": "1"}, "a1a05ec0-79d1-4e78-b2d5-e98d83f55644": {"__data__": {"text": "and returns a boolean. The result of this\ncall indicates if the specified account has signed the transaction that triggered the current contract \nexecution. By default, `Runtime.CheckWitness` uses the data in the blockchain and transaction signers\nas it would on a production node. However, the launch configuration can override this behavior in one\nof two ways.\n\n* The configuration can specify the `runtime.witnesses.check-result` property as a boolean value that\n  will be returned from `Runtime.CheckWitness`, regardless of the parameter provided.\n* The configuration can specify the `runtime.witnesses` property as an array of hex encoded addresses\n  or public keys. With this approach, `Runtime.CheckWitness` returns true if the provided parameter\n  matches a value from the specified array\n\n```json\n\"runtime\": {\n    \"witnesses\": {\n        \"check-result\": true\n    }\n}\n```\n\n## stored-contracts\n\nThis property specifies a list of paths to other .NEF files that a given launch configuration may\ninteract with. This property enables the debugger to load the debug info for these additional contracts\nto enable stepping across contract boundaries.\n\nNote, unlike the contract specified in `program`, the Neo Debugger does NOT ensure the latest version\nof the `stored-contracts` are deployed to the stub debug chain. This property is only useful in conjunction\nwith the `checkpoint` property, assuming the contracts listed in `stored-contracts` were deployed before\nthe checkpoint was created.\n\n```json\n\"stored-contracts\": [\n    \"${workspaceFolder}/store-contract/bin/sc/DemoShopContract.nef\"\n]\n```\n\n## storage\n\n> Note, use of `storage` property has largely been replaced with `checkpoint`. However, it is still\n  supported by the debugger.\n\nKey/value pairs used to populate debugger's emulated storage. Similar to other\nlaunch configuration settings, strings prefixed with `'0x'` are treated as hex-encoded\nbyte arrays.\n\nIf a specified key already exists in the checkpoint file, the value specified in\nthe launch configuration takes precedence.\n\nJSON for the `storage` configuration setting can be generated via the Neo-Express\n[`contract storage` command](https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md#neo-express-contract-storage)\nby using the `--json` argument.\n\nExamples:\n\n```json\n\"storage\": [\n    {\n        \"key\": \"neo.org\",\n        \"value\": \"Neo Foundation\"\n    }\n],\n\n\"storage\": [\n    {\n        \"key\": \"0x8a6f1e4f13022b26e56e957cb8251b082f0748b1007465737361\",\n        \"value\": \"0x174876e800\"\n    },\n    {\n        \"key\": \"0x796c707075536c61746f740074636172746e6f63\",\n        \"value\": \"0x174876e800\"\n    },\n    {\n        \"key\": \"0xd2cbfbe9bec47318113e4d41c95174023851df74d7cb2a9e4049d5c84d2b2a6d006f666e497874\",\n        \"value\": \"0x174876e80005028a6f1e4f13022b26e56e957cb8251b082f0748b1140000000380\"\n    },\n],\n```\n\n## return-types\n\nSpecifies the expected return type of", "doc_id": "a1a05ec0-79d1-4e78-b2d5-e98d83f55644", "embedding": null, "doc_hash": "a735ab0ddb9bf46883f434e54fed425126e03457b3ba4817482fd6cabbb8194c", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md"}, "node_info": {"start": 9793, "end": 12702, "_node_type": "1"}, "relationships": {"1": "14cc11868d0db64989487015342363ea6d9c4189", "2": "f53a1f40-d84f-4114-8a2e-4ac43a9d0431", "3": "4c98955c-0e18-47e7-aab8-7b52dd522785"}}, "__type__": "1"}, "4c98955c-0e18-47e7-aab8-7b52dd522785": {"__data__": {"text": "return-types\n\nSpecifies the expected return type of the contract entry-point. Particularly useful\nwhen the contract entry-point returns a C# `object`, but the specific operation\nbeing invoked returns a strongly-typed value.\n\nNote, it is possible for Neo smart contracts to have multiple return values.\nSmart contracts compiled from C# always have a single return value, but the\nconfiguration property name is plural and the value must be an array.\n\n```json\n\"return-types\": [\"bool\"],\n\n\"return-types\": [\"string\"],\n```\n\n## sourceFileMap\n\nOptional source file mappings passed to the debug engine\n\nExample:\n\n``` json\n\"sourceFileMap\": {\n    \"C:\\\\foo\": \"/home/user/foo\"\n}\n```\n", "doc_id": "4c98955c-0e18-47e7-aab8-7b52dd522785", "embedding": null, "doc_hash": "34cdf8d40c5b2362db3944df1b5c18b3641090d076766c6163526546ca596b30", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md"}, "node_info": {"start": 12723, "end": 13392, "_node_type": "1"}, "relationships": {"1": "14cc11868d0db64989487015342363ea6d9c4189", "2": "a1a05ec0-79d1-4e78-b2d5-e98d83f55644"}}, "__type__": "1"}, "f2f6f1a9-f72b-4927-b09e-b530aef37330": {"__data__": {"text": "# Neo Smart Contract Debugger Variable Evaluation Reference\n\nThe Neo Smart Contract Debugger uses information in the\n[Neo Virtual Machine](https://github.com/neo-project/neo-vm) as well as the\n[debug info file](https://github.com/ngdseattle/design-notes/blob/master/NDX-DN11%20-%20NEO%20Debug%20Info%20Specification.md)\ngenerated by the smart contract compiler to display variables in the\n[Visual Studio Code Data Inspection Window](https://code.visualstudio.com/docs/editor/debugging#_data-inspection).\nHowever, developers sometimes need finer grained control over how the\nvariables are displayed in the IDE. Developers can better control\nhow variables are displayed by adding them to the Watch window and applying\na cast operation.\n\n> Note, the screenshots in this document are using the\n> [C# Domain smart contract sample](https://github.com/ngdseattle/domain-sample)\n\nThere are two ways of adding a variable to the watch window\n\n* Selecting the `Add Expression` command from the Watch window toolbar\n![add expression](images/add-expression.png)\n* Selecting `Add to Watch` command from the Variable context menu\n![add to watch](images/add-to-watch.png)\n\nOnce a variable has been added to the Watch window, the developer can\ncontrol how it is displayed by adding a cast operator. By default,\nthe watch window displays the variable the same way that the variables\nwindow does. In this example, the `args[0]` variable is displayed as a\nbyte array.\n\n![watch window example without cast operator](images/watch-window-no-cast.png)\n\nThe developer can apply a cast operator to control how the variable is\ndisplayed. In this example, the `args[0]` variable is actually a string.\nThe developer can add `(string)` cast operator to the watched variable\nto control it's appearance.\n\n![watch window example with string cast operator](images/watch-window-str-cast.png)\n\nThe Neo Smart Contract Debugger supports the following cast operators\nin the watch window.\n\n| Cast Operation | Data Type |\n| -------------- | --------- |\n| `(int)`        | Integer   |\n| `(bool)`       | Boolean   |\n| `(string)`     | String    |\n| `(hex)`        | Hex encoded string |\n| `(byte[])`     | Byte Array |\n\nStorage variables can also be added to the watch window and they also support\ncast operators. Storage slots are specified with the special marker `$storage`\nfollowed by an index operator. The storage index value is calculated from the\nstorage slot key, so it will be different than the key value but it will remain\nstable relative to the key value.\n\nIn this example, we see the `$storage[536db05d].value` both as a byte array and\nas a string.\n\n![watch window example with string cast operator](images/watch-window-storage.png)\n\n> Note, `$storage` variable uses a custom calculated key value because actual\n> key values can be arbitrarily long. The custom calculated key is always eight\n> characters long, regardless of how long the actual key is. This ensures the\n> key specification in the variable and watch windows takes up a minimal amount\n> of screen space.\n", "doc_id": "f2f6f1a9-f72b-4927-b09e-b530aef37330", "embedding": null, "doc_hash": "aadd9368156a8d41a15be2ba225144147c77dd7f3652bd751b4a28ae58bdb913", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-evaluate-reference.md"}, "node_info": {"start": 0, "end": 3041, "_node_type": "1"}, "relationships": {"1": "5e72d28e1101e56ce91d2239928a0860e59342f5"}}, "__type__": "1"}, "3cde811b-45a0-412b-9349-017795e2bb16": {"__data__": {"text": "# Neo Smart Contract Debugger Storage Schema\n\nVersion 3.3 of the Neo Smart Contract Debugger adds support for decoding the key/item byte streams\nin contract storage into higher-order types. This makes it easier for developers to understand what\nis happening inside their contracts.\n\nYou can see an example of how schematized storage looks in the debugger via this screenshot:\n\n![Storage Schema Screenshot](images/StorageSchemaScreenshot.png)\n\nThis screenshot comes from the [Neo Contributor NFT sample](https://github.com/ngdenterprise/neo-contrib-token)\nwhich has been updated to enable Storage Schema. In particular, note the following:\n\n* Single value storages are displayed in the debugger as a simple variable name + value pair. \n  For example, notice that the `TotalSupply` storage contains a single integer value 3.\n* Storage map storages are displayed in the debugger as a collection. Storage map storages have one\n  or more key segments with name and type information that the debugger can display to the user.\n  * For single segment keys, the segment value is used as the name of the variable. For example, \n    notice how the `Token` storage uses the token ID - a hex-encoded 256 bit hash code - as the\n    variable name under the top level `Token` item.\n  * For multi segment keys, the key/item pairs are displayed as a collection, with key and item\n    children. The key item has a child for each segment in the key, displaying that segment's name\n    and value. For example, notice how the `AccountToken` storage has three key/item pairs. The\n    first key/item pair has been expanded to show the key segments - `owner` and `tokenId`.\n* Storage items can be primitive values such as integers and hash codes. They can also be composite\n  types such as structures, arrays and maps. For example, notice how the `Token` storage values are\n  `TokenState` instances, with fields such as `Owner` and `Name`.\n* Storage Schema includes a primitive `Address` type. For example, notice that the `ContractOwner`\n  storage item is the Neo address of the account that deployed the contract.\n* The Storage Schema type model is also available for runtime types. You get a similar rich\n  inspection experience for both storage and runtime types.\n* Storage Schema information is included in the [debugger info](https://github.com/devhawk/proposals/blob/devhawk/cd2l/nep-19.md)\n  generated by the compiler. \n\n## Getting Started\n\nTo get the new Storage Schema experience, you need the pre-release versions of the Neo Smart Contract\nDebugger and the Neo C# compiler. You also need to update your smart contract project to reference the\npre-release version of the Neo Smart Contract Framework.\n\n> Note, at this time only pre-release Neo C# compiler has been updated to generate the debug information\n  needed for the Storage Schema experience. Other Neo compilers - including the current production\n  release version of the Neo C# compiler - do not support the new experience yet. The debugger team\n  is reaching out to help the other Neo compiler teams update their tools to support the new format. The\n  goal is for all Neo developers - regardless of their language of choice - to get the full Storage\n  Schema experience. It's just going to take time to update all the various tools.\n\nIf you want to try out the new experience before writing any code, the \n[`neo-contrib-token` NFT sample](https://github.com/ngdenterprise/neo-contrib-token) has been updated\nto support the Storage Schema preview. To test drive the Storage Schema experience with the\nNFT sample:\n\n* Install Neo Smart Contract Debugger Pre-Release Extension (described below)\n* Clone the [`neo-contrib-token`", "doc_id": "3cde811b-45a0-412b-9349-017795e2bb16", "embedding": null, "doc_hash": "13b923332c2d4e262a4181f85beb4ba1e57e9f98208a8275c3768fa55d41beaa", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 0, "end": 3669, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "3": "69cc7b5b-7700-4e4d-ac97-38fd02a191c5"}}, "__type__": "1"}, "69cc7b5b-7700-4e4d-ac97-38fd02a191c5": {"__data__": {"text": "(described below)\n* Clone the [`neo-contrib-token` repo](https://github.com/ngdenterprise/neo-contrib-token)\n* Open the repo in VSCode\n* Check out the [`storage-schema-preview` branch](https://github.com/ngdenterprise/neo-contrib-token/tree/storage-schema-preview)\n* Run the `reset neo express` build task. This task will install the right tools,\n  compile the contracts in the repo and create the Neo-Express checkpoints needed\n  for the debug launch configurations. Build tasks can be accessed via the VSCode\n  `Terminal` menu.\n* Switch to the Run and Debug view, select `mint (succeed)` launch configuration and Start Debugging\n\n### Install Neo Smart Contract Debugger Pre-Release Extension\n\nTo install the debugger preview - even if you already have the debugger installed - visit the Neo Smart\nContract Debugger page in the \n[VSCode Marketplace](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-contract-debug)\nPress the install button to launch the debugger extension management UI inside VSCode.\n\nIf you already have the debugger installed, there will be a button labeled \"Switch to Pre-Release Version\".\nIf you do not already have the debugger installed, there will be a button labeled \"Install\" with a\ndrop down menu that you can use to select the pre-release version for install. During the Storage Schema\npreview, only the pre-release version of the debugger supports the new experience. Once installed, the\npre-release extension will update automatically as new pre-releases are published on the marketplace.\nAt any time, you can switch back to the release version of the debugger extension but navigating to the \ndebugger extension management UI inside VSCode and pushing the \"Switch to Release Version\" button\n\n> Note, the pre-release version of the debugger still supports the older debug information format. Even\n  if you don't update your Neo C# compiler to generate the new debug information format, the debugger\n  will still work (albeit with the older non-schematized view of contract storage).\n\nAs of v3.2, production releases of the debugger have even numbered minor version numbers while pre-releases\nhave odd minor version numbers. v3.3 of the Neo Smart Contract Debugger includes Storage Schema support.\n\n### Install Storage Schema Neo C# Preview Compiler \n\n> Note, while the preview debugger will work with older debug information generated by the release\n  Neo C# compiler and other Neo contract compilers, the preview compiler is **NOT COMPATIBLE** with\n  the release debugger. If you want your project to work with the release debugger, you **MUST** use\n  the release version of the compiler.\n\nThe Neo C# compiler is distributed as a [.NET tool](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools).\n.NET tools are distributed as NuGet packages, typically downloaded from [nuget.org](http://nuget.org).\nHowever, the Storage Schema preview version of the compiler (and framework, described below) are **NOT**\npublished on the central nuget.org repository. We have chosen to create a private NuGet repository to\nhost Storage Schema preview packages. This section describes how to configure your contract project\nto work with the private package repository.\n\n#### nuget.config File\n\nNuGet must be configured to use the private package repository. This is done via a \n[`nuget.config` file](https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file)\nin your contract project root folder. Here are the contents of the NFT sample's nuget.config file:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n", "doc_id": "69cc7b5b-7700-4e4d-ac97-38fd02a191c5", "embedding": null, "doc_hash": "b3d74392d8c0d7100e833e6846e3a2b167ac34790093b0900fd62ed21ee625a0", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 3624, "end": 7220, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "3cde811b-45a0-412b-9349-017795e2bb16", "3": "81a4c086-9e38-459f-99de-62117ecfce8e"}}, "__type__": "1"}, "81a4c086-9e38-459f-99de-62117ecfce8e": {"__data__": {"text": "encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"ngd-ent-nuget\" value=\"https://ngdentnuget.blob.core.windows.net/packages/index.json\" />\n  </packageSources>\n</configuration>\n```\n\nThis file basically tells NuGet tools to look in the `ngd-ent-nuget` package repository if it can't\nfind a given package in the global nuget.org repository. \n\n#### Installing the Preview Neo C# Compiler \n\n.NET tools like the Neo C# compiler can be installed globally on a machine or locally to a project\nfolder. Since the Storage Schema enabled compiler is a preview release, we recommend installing\nthe compiler as a local tool. The NFT sample installs the preview compiler as a local tool.\n\n> Note, this preview is in active development. New versions of the compiler and framework are expected\n  to ship regularly. .NET tools have no built-in mechanism to auto update, so developers should\n  regularly re-run the commands below to ensure their tools are up to date.\n\n.NET tools are installed from the command line. Open a terminal window and navigate to the root folder\nof your project. Note, this folder must have the `nuget.config` file described above. \n\nTo install the compiler as a local tool, your project folder needs to have a tool manifest file. If\nyour project doesn't already have one, you can create a tool manifest via the `dotnet new tool-manifest`\ncommand. To install or update the preview compiler, run this command:\n\n``` shell\n> dotnet tool update Neo.Compiler.CSharp --prerelease\n```\n\nTo install the compiler as a global tool run the following command from the folder where you created\nthe `nuget.config` as described above. This command will ensure you have the latest version, including\nprerelease versions downloaded from the private nuget repository referenced in the nuget.config file\n\n``` shell\n> dotnet tool update --global Neo.Compiler.csharp --prerelease\n```\n\nRegardless if the preview compiler is installed as global or local tool, the version installed should\ninclude the prerelease tag `storage-schema-preview`. To distinguish the Storage Schema Preview versions\nfrom production releases, the preview compiler and framework NuGet packages have a patch version number\nover 1000 and the prerelease tag `storage-schema-preview`. For example, the initial Storage Schema preview\nrelease version of the compiler and framework is `3.1.1035-storage-schema-preview`. \n\nIf the dotnet tool update command reports an installed version that doesn't have the `storage-schema-preview`\ntag, you will not get the Storage Schema Experience. If this happens, your `nuget.config` file is likely\ninvalid or missing.\n\n### Using the Neo SmartContract Framework Preview Package\n\nLike the Neo C# compiler, Storage Schema uses an updated SmartContract Framework that's available as a\npreview from the private NuGet repository described above. The version of the SmartContract Framework\nreferenced in your project should match the version of the Neo C# Compiler you have installed.\n\nThe preview version of the SmartContract Framework can be added to an existing C# project via the \n`dotnet add package` command. The `add package` command must be run from the command line while\nin the folder containing the `.csproj` file of your contract. Like the compiler installation, \ninstalling the preview version from the private NuGet repository requires the `nuget.config`\nfile be configured as described above.\n\n``` shell\n> dotnet add package neo.smartcontract.framework --prerelease\n```\n\n> Note, like .NET tools, package references are not updated automatically. You can use the \n  [`dotnet outdated` tool](https://github.com/dotnet-outdated/dotnet-outdated) or \n  [VersionLens", "doc_id": "81a4c086-9e38-459f-99de-62117ecfce8e", "embedding": null, "doc_hash": "6f79e32afced3ce0312ba74a83858dc03f793a558da43af375950c87a3cfa92b", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 7215, "end": 10890, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "69cc7b5b-7700-4e4d-ac97-38fd02a191c5", "3": "5793071f-2cb5-43a7-890e-8116b48a94ba"}}, "__type__": "1"}, "5793071f-2cb5-43a7-890e-8116b48a94ba": {"__data__": {"text": "or \n  [VersionLens extension](https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens)\n  to ensure your package versions are up to date.\n\n### Storage Schema Preview Attributes\n\n> Note, the attributes described in this section should be considered a first draft design. More information\n  about the conceptual storage model that informed this design is [available below](#neo-contract-storage-conceptual-model).\n  Other designs that are better integrated with contract storage imperative code or that leverage compile-time\n  source generation will be considered before final release of the Storage Schema feature. If you have any\n  feedback or suggestions regarding this design, please feel free to let us know by opening issues in the \n  [debugger GitHub repo](https://github.com/neo-project/neo-debugger/issues).\n\nOnce you install the preview debugger and C# compiler and the Smart Contract Framework package reference\nhas been updated to the latest version, you should be able to get the new rich Storage Schema experience\nfor runtime items (arguments, local variables and static variables) by simply recompiling your code with\nthe preview compiler. Getting the rich Storage Schema experience for storage keys and values requires \nadding a few attributes to your contract code. \n\nThese new attributes have *NO EFFECT* on the execution of your contract code. They are only used by the \npreview C# compiler to generate the information needed to decode storage keys and values in the debugger.\nIf the these attributes are missing or incorrect, it will only affect the developers experience using the \nVariables view in the debugger. Even when storage schema information is available, the debugger always\nprovides a raw view of the storage keys and items that can be inspected the same way as previous versions\nof the debugger.\n\nThe Smart Contract Framework preview includes two new attributes used to generate Storage Schema information:\n`StorageGroup` and `StorageKeySegment`. Here is an \n[example](https://github.com/ngdenterprise/neo-contrib-token/blob/storage-schema-preview/token-contract/NeoContributorToken.cs#L33-L53)\nof their use from the NFT sample:\n\n``` cs\n[StorageGroup(typeof(BigInteger))]\nconst byte Prefix_TotalSupply = 0x00;\n\n[StorageGroup(\"Balances\", typeof(BigInteger))]\n[StorageKeySegment(\"owner\", StorageKeySegmentType.Address)]\nconst byte Prefix_Balance = 0x01;\n\n[StorageGroup(typeof(BigInteger))]\nconst byte Prefix_TokenId = 0x02;\n\n[StorageGroup(\"Tokens\", typeof(TokenState))]\n[StorageKeySegment(\"tokenId\", StorageKeySegmentType.Hash256)]\nconst byte Prefix_Token = 0x03;\n\n[StorageGroup(typeof(int))]\n[StorageKeySegment(\"owner\", StorageKeySegmentType.Address)]\n[StorageKeySegment(\"tokenId\", StorageKeySegmentType.Hash256)]\nconst byte Prefix_AccountToken = 0x04;\n\n[StorageGroup(typeof(UInt160))]\nconst byte Prefix_ContractOwner = 0xFF;\n```\n\n#### StorageGroup Attribute\n\nThe `StorageGroup` attribute must be attached to a const prefix value defined in the `SmartContract` class\n(i.e. the class that derives from `SmartContract`). The `StorageGroup` attribute specifies the type of\nthe storage group's value. It also optionally provides the name of the storage group. If the name is\nnot specified in the attribute, the name of the const field is used. If the const fields starts with\n`Prefix_` as the sample code fields above do, only the name of the field after `Prefix_` is used. So\nthe storage group created from the `Prefix_ContractOwner` field would be named `ContractOwner`.\n\nThe const field that a `StorageGroup` attribute is attached to must be a single byte or a string. The\nvalue of the const field is used as the prefix value in storage. If the const", "doc_id": "5793071f-2cb5-43a7-890e-8116b48a94ba", "embedding": null, "doc_hash": "d6ac54af5db5206ae808ecdf1e65cd2e9ae2ce8778d5dc1ad83be4a358533243", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 10928, "end": 14631, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "81a4c086-9e38-459f-99de-62117ecfce8e", "3": "09d8f330-9d6f-484c-b0ba-9052fa9ae257"}}, "__type__": "1"}, "09d8f330-9d6f-484c-b0ba-9052fa9ae257": {"__data__": {"text": "The\nvalue of the const field is used as the prefix value in storage. If the const field is a string,\nthe UTF8 encoding of the string is used as the storage group prefix;\n\n> Note, C# has no mechanism for declaring a const collection of bytes except for strings. While the \n  underlying Storage Schema model allows for arbitrary multi-byte prefixes, there is currently no\n  mechanism for declaring one via the `StorageGroup` attribute.\n\n#### StorageKeySegment Attribute\n\nSome storage groups only store a single value. For example, the NFT token sample above only has a single\nTotal Supply value and a single Contract Owner. However, most storage groups store multiple records of\nrelated information, such as account balances or token information. To support multiple records in a given\ngroup, each record must have a unique key value after the constant prefix. The `StorageKeySegment` attribute\ndeclares the structure of key. \n\nLike the StorageGroup attribute, the `StorageKeySegment` attribute must be applied to a const field in\nthe `SmartContract` class. Additionally, there must also be `StorageGroup` attribute applied to the field,\notherwise the StorageKeySegment attribute is ignored.\n\nEach storage key segment has a name and a type. Unlike `StorageGroup` value types, key segments must be\na primitive type as specified in the StorageKeySegmentType enumeration. Multiple `StorageKeySegment` attributes\nmay be applied to a single const field. To enable proper key decoding, the order of `StorageKeySegment`\nattributes must match the order of key segments in the code.\n\nAll key segments except the last one must be fixed size in order to be decoded. The final (or single)\nkey segment can be of variable length (ByteArray and Integer).\n\nThese are the allowed storage key segment types. With the exception of `Address`, they all match values\nfrom the [`ContractParameterType` enumeration](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ContractParameterType.cs)\nfrom the core Neo platform. `Address` is an alias for `Hash160`. The only difference is how they are\ndisplayed in the debugger. `Hash160` values are displayed as hex encoded byte arrays while `Address`\nvalues are displayed as standard Neo N3 addresses. The \n[Primitive Type section](https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md#primitive-type)\nbelow has more details on how the debugger handles address encoding.\n\n* Boolean\n* Integer\n* ByteArray\n* String\n* Hash160\n* Hash256\n* PublicKey\n* Signature\n* Address\n\n> Note, a future version of the Neo SmartContract Framework Preview will include a mechanism to\n  declare type fields as `Address` as well. `Address` type fields will be displayed as Neo N3\n  addresses like `Address` key segments are. \n\n## Neo Contract Storage Conceptual Model\n\nIn order to understand how Storage Schema works, it is useful to understand the underlying\nmodel of Neo contract storage. If you are an experienced Neo contract developer, you may wish to\nskim or skip this section.\n\nNeo contract storage is a key/value byte array store. Each key and value is stored as a raw array\nof bytes. Any additional structure of the key or value is provided by code and is unavailable via\nthe storage engine.\n\nNeo contracts typically use hard coded key prefixes to group different types of data together.\nMulti-byte prefixes are also supported, but are typically only needed for contacts with more than\n255 prefixes. Otherwise multi-byte prefixes are just extra storage (and associated GAS cost) with\nlittle additional value.\n\n> Note, there are a variety of Neo N3 samples that use strings for storage prefixes. Such samples\n  should not be considered best practice. Minimizing prefix length is considered the best practice\n  for Neo contract storage.\n\nAs an example, the Neo Contributor NFT sample stores six different groups of", "doc_id": "09d8f330-9d6f-484c-b0ba-9052fa9ae257", "embedding": null, "doc_hash": "97650d9b4ae09181e95d57769d852461db0ab3d0190eb8dd61b227f4128658a3", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 14581, "end": 18450, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "5793071f-2cb5-43a7-890e-8116b48a94ba", "3": "981b0010-9d62-4687-b931-5bb10a3967f6"}}, "__type__": "1"}, "981b0010-9d62-4687-b931-5bb10a3967f6": {"__data__": {"text": "an example, the Neo Contributor NFT sample stores six different groups of data, each with its own\n[unique single byte prefix](https://github.com/ngdenterprise/neo-contrib-token/blob/main/token-contract/NeoContributorToken.cs#L32). \n\n``` cs\nconst byte Prefix_TotalSupply = 0x00;\nconst byte Prefix_Balance = 0x01;\nconst byte Prefix_TokenId = 0x02;\nconst byte Prefix_Token = 0x03;\nconst byte Prefix_AccountToken = 0x04;\nconst byte Prefix_ContractOwner = 0xFF;\n```\n\nSome groups of data are only a single storage value. As an example, in the NFT sample there is a\nsingle `TotalSupply` and `ContractOwner` value. In those cases the prefix is used directly as the\nstorage key. You can see this in the NFT Sample `UpdateTotalSupply` method where `Prefix_TotalSupply`\nis used to construct the key used to read and write a single integer value. \n\n``` cs\nStorageContext context = Storage.CurrentContext;\nbyte[] key = new byte[] { Prefix_TotalSupply };\n\nBigInteger totalSupply = (BigInteger)Storage.Get(context, key);\nStorage.Put(context, key, totalSupply + 1);\n```\n\nOf course, contracts often need to store multiple pieces of data in a single group. In these cases\neach data item has its own unique key. The data item's key is pre-pended with the associated hard\ncoded prefix in order to group all related data together in storage. The pre-pended prefix also serves\nto avoid key collisions, since the the key prefix is unique to the group. Neo contract languages\ntypically include helper classes to make it easy to manage multiple key/value pairs within a single\nprefixed group. For example, the C# Smart Contract Framework provides the `StorageMap` to simplify the\nmanagement of related data under a common key prefix.\n\nAs an example, the NFT sample stores information about multiple minted NFTs. Each NFT has a unique\n256 bit hash used as the token ID. Each token has additional information (such as owner and name)\nstored in contract storage, keyed by the token ID. The hard coded `Prefix_Token` byte is used to \ngroup all token key/values together and a `StorageMap` is used to read and write NFT information.\n\n``` cs\nStorageMap tokenMap = new StorageMap(Storage.CurrentContext, Prefix_Token);\nvar tokenData = tokenMap.Get(tokenId); // tokenId provided as method parameter \nTokenState token = (TokenState)StdLib.Deserialize(tokenData);\ntoken.Owner = newOwner; // newOwner provided as method parameter \ntokenMap.Put(tokenId, StdLib.Serialize(token));\n```\n\n`StorageMap`'s Get and Put methods automatically pre-pend the prefix provided to the constructor\nwhen reading and writing to contract storage. This makes it easy for developers to be consistent\nin their use of storage prefixes.\n\n> Note, `StorageMap` also supports indexer syntax (i.e. `tokenMap[tokenId]`) for reading and\n  writing to contract storage. Many sample contacts uses this syntax rather than Get/Put.\n\nStorage keys may also be generated from multiple individual values. As an example, the `AccountToken`\nprefix in the NFT sample is used to index all the tokens owned by a given address. For this\nstorage group, the item key is the owner address + the token ID. The StorageMap then pre-pends\nthe group prefix as it does for single key items as shown above.\n\n``` cs\nStorageMap accountMap = new(Storage.CurrentContext, Prefix_AccountToken);\n// combine the owner and the token ID to generate the un-prefixed key\nByteString key = owner + tokenId;\naccountMap.Put(key, 0);\n```\n\nBy structuring the `AccountToken` key this way, the `StorageMap` can return a list of token IDs\nowned by a single address using just a couple lines of code:\n\n``` cs\nStorageMap accountMap", "doc_id": "981b0010-9d62-4687-b931-5bb10a3967f6", "embedding": null, "doc_hash": "6ed7749217f276208b761bd97528d6a951a7e2ca531afd0454afbf65a3852a0f", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 18455, "end": 22071, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "09d8f330-9d6f-484c-b0ba-9052fa9ae257", "3": "32643326-049b-414a-87ad-adc120270525"}}, "__type__": "1"}, "32643326-049b-414a-87ad-adc120270525": {"__data__": {"text": "address using just a couple lines of code:\n\n``` cs\nStorageMap accountMap = new StorageMap(Storage.CurrentContext, Prefix_AccountToken);\nreturn accountMap.Find(owner, FindOptions.KeysOnly | FindOptions.RemovePrefix);\n```\n\nThe `StorageMap` here is constructed just as it was for the token owner update code above.\nHowever, instead of using the `Get` method, this sample code uses the `Find` method, returning \na list of all the key/value pairs starting with prefix (specified via constructor parameter) and\nowner (specified via method parameter). The list returned by Find is further refined by specifying\nthe `KeysOnly` and `RemovePrefix` options. Note, Find removes the entire prefix it used for the \nsearch (i.e. `Prefix_AccountToken` and `owner` in this case)\n\n### Unified Neo Contract Type Model\n\nAs stated above, Storage Schema objects reference information about Contract Types. Contract Types\nis a new richer model for describing type information than has been used in the debugger previously.\nThis section describes this model (along with providing a road map for upcoming improvements).\n\n> Note, the Contract Type Model only describe information about NeoVM and storage items in order to \n  provide a better debugger experience. This model does not modify the behavior of NeoVM or how\n  contract storage works in any way.\n\nNeo compilers generate debug info that is used by the debugger. This primarily consists of information\nthat the NeoVM doesn't need when executing contracts. For example, the NeoVM does not need to know\nthe names of method parameters and variables. However, it's easier for the developer if the debugger\ncan automatically map NeoVM stack items back to the associated variables defined by the developer.\nThe debug information generated by the compiler enables this mapping.\n\nDebug info also contains information about a variable's type. This can be used in cases to modify how\na given variable is displayed in the debugger. For example, a string variable is stored as an\nimmutable byte array by NeoVM. By including variable type information in the debug info, the debugger\ncan convert the underling NeoVM stack item into a display format more closely aligned to the code written\nby the developer. For example, the immutable byte array stored by NeoVM can be converted to a string\nvalue by the debugger.\n\nUnfortunately, the original type model used by the debugger today was not rich enough to capture the\ndetails needed to provide the schematized storage view shown in the screen shot above. As such, a new \nricher model for contract type information was developed. Eventually, this new contract type model will\nalso be used to provide richer type information for runtime items in addition to storage items.\n\n> Note: C# declarations for the new Contract Type Model are available in the \n  [Blockchain Toolkit Library project](https://github.com/ngdenterprise/neo-blockchaintoolkit-library/blob/master/src/bctklib/models/ContractTypes.cs)\n\n#### Primitive Type\n\nNeoVM supports three primitive types: booleans, arbitrary sized integers and immutable byte arrays.\nWhile booleans and integers instances have clear debugger representations, byte arrays often\nrepresent some type of higher level type, such as a 256 bit hash, a Neo address or a string.\n\nThe Contract Type model defines the following primitive types. These types can be directly represented\nas byte arrays and thus can be stored in contract storage directly without serialization\n\n* Boolean\n* Integer\n* ByteArray\n* String\n* Hash160\n* Hash256\n* PublicKey\n* Signature\n* Address\n\nMost of these types should be familiar to Neo contract developers. Many of these primitive types overlap\nwith [ContractParameterType](https://github.com/neo-project/neo/blob/master/src/neo/SmartContract/ContractParameterType.cs)\nvalues.\n\nOne primitive type to note is the `Address` type. Under the hood, `Address` is a 160 bit hash code, just as", "doc_id": "32643326-049b-414a-87ad-adc120270525", "embedding": null, "doc_hash": "d187d723a5fdcb24cbc82a058e8bd6595f537810a6ca6dafd850367308f4bf13", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 22071, "end": 25981, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "981b0010-9d62-4687-b931-5bb10a3967f6", "3": "f7dcee18-b5cf-48d7-a6ec-2fed6c5ca2a4"}}, "__type__": "1"}, "f7dcee18-b5cf-48d7-a6ec-2fed6c5ca2a4": {"__data__": {"text": "type. Under the hood, `Address` is a 160 bit hash code, just as \n`Hash160` is. However, `Address` is rendered in the debugger UI using the standard Neo address encoding, leading\nto values such as `NaTtKdE8nt1E9FKKhH6hScXmDGPjgjpdhi` instead of hex encoded byte arrays. Given the prevalence\nof Neo addresses in contract code, it made sense to include a specific primitive type to represent addresses and\nfor them to render in the most developer friendly manner possible.\n\nOne other thing to note about `Address`: Some contracts use an all-zero 160 bit hash code to represent \"no\naddress\". As an example, the NFT sample uses the all-zero address to represent an NFT without at owner. Since\nthe all-zero address value typically has special meaning, the debugger displays the all-zero address value in\na special way to make it easy to identify. You can see an example of this in the `TokenState.Owner` value in\nthe screen shot from the start of this document. The `Erik Zhang` token has `N000000000000000000000000000000000`\nfor the owner value. Neo addresses are base58 encoded and zero (i.e. `0`) is not a valid address character. So\nby encoding what is typically an invalid address this way, it is easy to identify without risk of colliding with\na valid Neo address.\n\nWhen string encoding a primitive type, the name of the primitive type is used directly. If there is a conflict\nwith a user defined struct name, a '#' character can be used as a prefix to disambiguate. For example, `Address`\ncould be a struct type defined by a contract, but `#Address` always indicates the primitive address type. If there\nis no name collision, the hash character is optional. \n\n#### Struct Type\n\nAs described in the StructDef section above, a struct is a named heterogeneous collection of fields. Field types\nmay be of any type described in this type model. In order to avoid collisions with other types, struct names \nmay not contain characters (to avoid collisions with primitive types) or angle brackets (to avoid collisions\nwith Array and Map types below).\n\nStructs are string encoded simply by their name. As an example, see the StorageDef example above where the \n`Token` storage value type is the `TokenState` StructDef.\n\n#### Array&lt;T> Type\n\n> Note, while Array&lt;T> types can be specified in Storage Schema files, they are currently not handled by\n  the debugger and will be displayed as if they have Unspecified type. Display of Array&lt;T>  types will\n  be implemented in a future version of the debugger.\n\nAn Array&lt;T> is a homogeneous collection of items. While the underlying NeoVM Array stack type is heterogenous,\nit is common for developers to consistently store a given type in a given array. The C# Smart Contract\nFramework even provides a generic List&lt;T> type for homogeneous collections.\n\nWhen string encoding an Array type, the type of the homogeneous collection is specified between the brackets.\nThe value between the brackets can be any type of Contract Type, including primitives, unspecified, structs or\neven other generic array and map types.\n\n#### Map<K,V> Type\n\n> Note, while `Map<K,V>` types can be specified in Storage Schema files, they are currently not handled by\n  the debugger and will be displayed as if they have Unspecified type. Display of `Map<K,V>` types will\n  be implemented in a future version of the debugger\n\nA Map<K, V> is a dictionary that maps a key of type K to a value of type V. This is very similar conceptually\nto how contact storage works. However, please note that contract storage and Maps are fundamentally different.\nA StorageDef cannot be described as a Map<K, V>. A Map<K, V> can be serialized into contract storage, but the\nMap keys cannot be iterated or inspected while stored as contract storage keys can.\n\nWhen string encoding a map", "doc_id": "f7dcee18-b5cf-48d7-a6ec-2fed6c5ca2a4", "embedding": null, "doc_hash": "f44e62cbd2c6b515ec333034e603066d3af9651cdcf6ed88cc0d7d5e99a7ab5a", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 25994, "end": 29784, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "32643326-049b-414a-87ad-adc120270525", "3": "bd2a7464-0cf9-4cda-ab07-90771abd6808"}}, "__type__": "1"}, "bd2a7464-0cf9-4cda-ab07-90771abd6808": {"__data__": {"text": "or inspected while stored as contract storage keys can.\n\nWhen string encoding a map type, the key and value types of the map are stored between the brackets and separated\nby a comma. The key type of a Map<K,V> *MUST* be a primitive type. The value type can be any type of Contract type\nincluding primitives, unspecified, structs or even other generic array and map types.\n\n#### Interop Type\n\nNeoVM uses a special `InteropInterface` type to integrate contract and platform code. An `InteropInterface` \nstack item wraps a .NET object such as a storage context or an iterator. The runtime `InteropInterface` item\ndoes not provide any interrogation mechanism - you can retrieve the wrapped .NET object if you already know\nits type. However, the compiler knows the type of the wrapped objects type at compile time and includes the\nwrapped type information in the contract's debug info.\n\nNote, while the compiler can determine the type of an `InteropInterface`, they are still otherwise opaque to\nthe debugger. The debugger does not access the wrapped .NET object or any of its fields at runtime. \n\n#### Unspecified Type\n\nThere are times where type information is unspecified or cannot be calculated. For those case, the `Unspecified`\ntype can be used. Like primitive types, the Unspecified type is simply the string `Unspecified` with an optional\nhash character prefix to handle potential name collisions.\n\nThe debugger does a small amount of type validation when displaying storage and stack items. For example, if a\ngiven item has an associated Struct type, the debugger will validate the underlying NeoVM item is an array object\n(array and structs are stored the same in NeoVM) and that the struct field count matches the array count. If\nthere is a mismatch, the debugger will discard the type information and display the value as if the type \nwere Unspecified. \n", "doc_id": "bd2a7464-0cf9-4cda-ab07-90771abd6808", "embedding": null, "doc_hash": "7165aa27ebc06dfad7c42c236f7be074fb9740b18a4ac0907230370f3677d952", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}, "node_info": {"start": 29752, "end": 31613, "_node_type": "1"}, "relationships": {"1": "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490", "2": "f7dcee18-b5cf-48d7-a6ec-2fed6c5ca2a4"}}, "__type__": "1"}, "4d7c0f85-136d-497c-b3c8-025554714e98": {"__data__": {"text": "# Neo Smart Contract Debugger for Visual Studio\n\n> Note, Neo Smart Contract Debugger for Visual Studio is in preview. \n> Please file issues on [GitHub](https://github.com/neo-project/neo-debugger/issues).\n\nIn order to use the Neo Smart Contract Debugger for Visual Studio, you must have a VS compatible\nproject open, such as C#. Current previews of the Neo Smart Contract Debugger do not yet support\nVisual Studio's \"Open Folder\" mode.\n\nWithin the VS project, the Neo Smart Contract Debugger looks for files named `launch*.json`. These\njson files must contain either a single launch configuration ([example](https://github.com/ngdenterprise/neo-registrar-sample))\nor [VSCode compatible launch configurations](https://go.microsoft.com/fwlink/?linkid=830387).\nThe individual launch configurations support [the same properties](debug-config-reference.md)\nas the Neo Smart Contract Debugger for VSCode. To indicate that a given launch configuration\nsupports the Neo Smart Contract Debugger, it must specify it's type as `neo-contract` ([example](https://github.com/ngdenterprise/neo-registrar-sample/blob/master/.vscode/launch.json#L41))\n\nThe debugger is launched by selecting \"Launch Neo Smart Contract Debugger\" from the top level Debug menu in Visual Studio\n\n![vs debug menu item](images/vs-debug-menu.png)\n", "doc_id": "4d7c0f85-136d-497c-b3c8-025554714e98", "embedding": null, "doc_hash": "151917e4021f8f2e6a2b54b354e2006bc3a6b196c5723b76b13feafd28e93e36", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/visual-studio.md"}, "node_info": {"start": 0, "end": 1306, "_node_type": "1"}, "relationships": {"1": "03ae15ca1452acd2cf3e7a98ec44e942611db547"}}, "__type__": "1"}, "b46f5b8c-acbc-46d1-9dfb-97cccb1fd81b": {"__data__": {"text": "# Neo Smart Contract Debugger\n\n[![](https://github.com/neo-project/neo-debugger/actions/workflows/build-vscode.yml/badge.svg)](https://github.com/neo-project/neo-debugger/actions)\n\n> Note, the Neo Smart Contract Debugger **DOES NOT** use the same versioning scheme as the core Neo platform.\n> For example, Debugger v3.4 is for Neo v3.3. Reasoning for the debugger versioning strategy are\n> [explained here](https://github.com/neo-project/neo-debugger#versioning-strategy)\n\nThe Neo Smart Contract Debugger enables Neo developers to debug their smart contracts\nin Visual Studio and Visual Studio Code. It is built on the same [virtual machine](https://github.com/neo-project/neo-vm)\nas the [core Neo project](https://github.com/neo-project/neo) to ensure maximum compatibility\nbetween the debugger and how contracts will execute in production.\n\nNeo supports writing smart contracts in a variety of languages. However, the\ndebugger needs the smart contract complier to emit additional information the\ndebugger uses to map Neo Virtual Machine instructions back to source code.\nThe debug information format is [fully documented](https://github.com/ngdseattle/design-notes/blob/master/NDX-DN11%20-%20NEO%20Debug%20Info%20Specification.md#v10-format).\nThis format is supported by a variety of Neo smart contract compilers including \n\n* [NCCS (C#)](https://github.com/neo-project/neo-devpack-dotnet)\n* [neow3j (Java/Kotlin/Android)](https://neow3j.io)\n* [neo-boa (Python)](https://github.com/CityOfZion/neo-boa)\n* [NeoGo (GoLang)](https://github.com/nspcc-dev/neo-go)\n* [NEO\u2022ONE (TypeScript)](https://neo-one.io)\n\n## Versioning Strategy\n\nAs of March 2022, the Neo Smart Contract Debugger project has adopted \n[VS Code recommended guidance](https://code.visualstudio.com/api/working-with-extensions/publishing-extension#prerelease-extensions)\nfor version numbers. This will allow the VS Code Marketplace to offer production and pre-release\nversions of this extension. Developers will be able to choose which version to install and VS Code\nwill automatically keep the extension up to date.\n\nGoing forward, the minor version of this extension will be even for production releases and odd\nfor preview releases. The first production release under this new versioning strategy will ve\nv3.2. The first pre-release of this extension will be v3.3.\n\n> Note, this project uses NerdBank Git Versioning to manage release version numbers.\n> As such, patch versions of public releases will typically not be sequential. \n\n## Installation\n\nThe Neo Smart Contract Debugger requires a [.NET runtime](https://dotnet.microsoft.com/download/dotnet)\nto be installed. The version of .NET Core needed depends on the version of the Neo\nSmart Contract Debugger.\n\n|Neo Smart Contract Debugger Version|.NET Core Version|\n|-----------------------------------|-----------------|\n| v3.1 and later | [v6.0](https://dotnet.microsoft.com/download/dotnet/6.0) (for Neo N3 contracts) <br /> [v3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1) (for Neo Legacy Contracts) |\n| v3.0 | [v5.0](https://dotnet.microsoft.com/download/dotnet/5.0) (for Neo N3 contracts) <br /> [v3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1) (for", "doc_id": "b46f5b8c-acbc-46d1-9dfb-97cccb1fd81b", "embedding": null, "doc_hash": "2906ee609fa0161f7db0621e5b65e854e4344438937d100b8e81d4f6e761ba73", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/readme.md"}, "node_info": {"start": 0, "end": 3199, "_node_type": "1"}, "relationships": {"1": "e2927400fb41579dda8b1cb448270a5fd926dfd4", "3": "58adf050-7c8f-4748-9cee-6d0a3001e09e"}}, "__type__": "1"}, "58adf050-7c8f-4748-9cee-6d0a3001e09e": {"__data__": {"text": "(for Neo Legacy Contracts) |\n| v2.0 (unsupported) | [v5.0](https://dotnet.microsoft.com/download/dotnet/5.0) (for Neo N3 contracts) <br /> [v3.1](https://dotnet.microsoft.com/download/dotnet-core/3.1) (for Neo Legacy Contracts) |\n| v1.0 | [v3.1](https://dotnet.microsoft.com/download/dotnet/3.1) |\n| v0.9 (unsupported) | [v3.0](https://dotnet.microsoft.com/download/dotnet/3.0) |\n| v0.5 (unsupported) | [v2.2](https://dotnet.microsoft.com/download/dotnet/2.2) |\n\n### Visual Studio Code \n\nThe Neo Smart Contract Debugger for Visual Studio Code can be installed via the\n[Visual Studio Code Marketplace](https://marketplace.visualstudio.com/vscode). It can be\ninstalled [by itself](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-contract-debug)\nor as part of the [Neo Blockchain Toolkit](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-blockchain-toolkit).\n\nThe Neo Smart Contract Debugger requires a [.NET runtime](https://dotnet.microsoft.com/download/dotnet-core)\nto be installed. The version of .NET Core needed depends on the version of the Neo\nSmart Contract Debugger.\n\nAs of version 2.0, the Neo Smart Contract Debugger for Visal Studio Code supports both \n[Neo N3 and Neo Legacy](https://medium.com/neo-smart-economy/introducing-neo-n3-the-next-evolution-of-the-neo-blockchain-b2960c4def6e).\n\n### Ubuntu Installation\n\nUsing the checkpoint functionality on Ubuntu requires installing libsnappy-dev and libc6-dev via apt-get.\n\n``` shell\n> sudo apt install libsnappy-dev libc6-dev -y\n```\n\n### MacOS Installation\n\nUsing the checkpoint functionality on MacOS requires installing rocksdb via [Homebrew](https://brew.sh/)\n\n``` shell\n> brew install rocksdb\n```\n\n### Install Preview Releases\n\nThe Neo Smart Contract Debugger has a public [build server](https://dev.azure.com/ngdenterprise/Build/_build?definitionId=4&_a=summary).\nYou can install preview builds of the debugger by navigating to the build you wish to install,\npressing the \"Artifacts\" button in the upper right hand corner and downloading the VSIX-package\nartifact. The artifact is a zip file containing the debugger VSIX file, which can be installed\nmanually. For more information on installing VSIX extensions in VSCode, please see the \n[official VSCode docs](https://code.visualstudio.com/docs/editor/extension-gallery#_install-from-a-vsix).\n\n### Visual Studio\n\nThe Neo Smart Contract Debugger for Visual Studio is currently in preview.\nTo install it, download a recent release of neodebug-vs-{version}.vsix from\nthe [GitHub release](https://github.com/neo-project/neo-debugger/releases) page\nto your local machine then double click on the file. \n\nThe Neo Smart Contract Debugger for Visual Studio requires Visual Studio 2019\nCommunity, Professional or Enterprise. It has not been tested with Visual\nStudio 2022 preview releases. Additionally, The Neo Smart Contract Debugger \nfor Visual Studio requires [.NET v5.0](https://dotnet.microsoft.com/download/dotnet/5.0)\nin order to debug Neo N3 contracts as described above. Debugging Neo Legacy contracts\nis not supported in the Neo Smart Contract Debugger for Visual Studio.\n\n[Additional documentation](docs/visual-studio.md) on using The Neo Smart Contract", "doc_id": "58adf050-7c8f-4748-9cee-6d0a3001e09e", "embedding": null, "doc_hash": "5847c075ffe1ac7a7473988680849cfd856739ab76ec4e9885c269637f0f370a", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/readme.md"}, "node_info": {"start": 3196, "end": 6406, "_node_type": "1"}, "relationships": {"1": "e2927400fb41579dda8b1cb448270a5fd926dfd4", "2": "b46f5b8c-acbc-46d1-9dfb-97cccb1fd81b", "3": "abea4ef7-1e8b-4d30-851d-c395c52ee0ce"}}, "__type__": "1"}, "abea4ef7-1e8b-4d30-851d-c395c52ee0ce": {"__data__": {"text": "documentation](docs/visual-studio.md) on using The Neo Smart Contract Debugger \nfor Visual Studio is available.\n\n## A Message from the Engineer\n\nThanks for checking out the Neo Smart Contract Debugger!\nI am eager to hear your opinion of the product.\n\nIf you like the debugger, please let me know on [Twitter](https://twitter.com/devhawk),\n[email](mailto:harry@ngdenterprise.com) or the [Neo Discord server](https://discord.gg/G5WEPwC).\n\nIf there are things about the debugger you don't like, please file issues in our\n[GitHub repo](https://github.com/neo-project/neo-debugger/issues). You can hit me up on\nTwitter, Discord or email as well, but GitHub issues are how we track bugs and new\nfeatures. Don't be shy - file an issue if there is anything you'd like to see changed\nin the product.\n\nMost software is built by teams of people. However, the Neo Smart Contract Debugger\nso far has been a solo effort. I'm looking forward to having other folks contribute\nin the future, but so far it's just been me. That means that the debugger has been\ndesigned around my experiences and my perspective. I can't help it, my perspective\nis the only one I have! :) So while I find the debugger intuitive, I realize that\nyou may not feel the same. Please let me know if this is the case! I didn't build\nthe Neo Smart Contract Debugger for me, I built it for the Neo developer community\nat large. So if there are changes we can make to make it more accessible, intuitive,\neasier to use or just flat-out better - I want to hear about them.\n\nThanks again for checking out the Neo Smart Contract Debugger. I look forward to\nhearing from you.\n\n\\- Harry Pierson (aka [DevHawk](http://devhawk.net)), Chief Architect ngd enterprise\n", "doc_id": "abea4ef7-1e8b-4d30-851d-c395c52ee0ce", "embedding": null, "doc_hash": "6e8303d542f9e13a384c5ab8eef64ee873067135feb326c06e64e6819ae71c4e", "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/readme.md"}, "node_info": {"start": 6341, "end": 8052, "_node_type": "1"}, "relationships": {"1": "e2927400fb41579dda8b1cb448270a5fd926dfd4", "2": "58adf050-7c8f-4748-9cee-6d0a3001e09e"}}, "__type__": "1"}}, "docstore/ref_doc_info": {"9173682d490692e95ea6d760545b39120746acea": {"doc_ids": ["8a04b95e-7a98-4248-8f22-1c209241ebe5", "d609194d-1cde-4fd7-a381-2cd4b47ddde1", "d5b75c2b-5a54-4642-ab0d-f169d889b4f0", "960172e0-102a-46d2-8977-794bcfa64993", "71ba9f9d-27af-40b5-9cd3-ca853be170d0", "798d2fec-2237-41cd-abfb-5dd6547f72c9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/advanced/oracle.html"}}, "da3104b7cf63ccbec58b9b5c55f91272be8a0c9d": {"doc_ids": ["0a83d9f8-39bb-4374-846a-deb1e21b8c56", "865f48c3-6776-4825-b698-c5b6f1476ae4"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/blockchain/block.html"}}, "e62b2c9df7cd82a5fecb04f8cd3559b5dbfd2a4c": {"doc_ids": ["dea34342-01bd-496e-b7aa-946e16f08468"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/blockchain/token_model.html"}}, "fabb2fdf1843918d9885bbc8f3ad472795a2dfcd": {"doc_ids": ["455ba4f5-4993-4973-8920-cd1a8a726b82"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/MerkleTree.html"}}, "42d5307a86ab7b91f7b8d5904fbc84a22749b93b": {"doc_ids": ["b9112a50-1c94-4d31-a0c6-0313168f1ac9", "372bd3f6-2c78-4be2-ad26-8ed2b6d25193"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encode_algorithm.html"}}, "8da255fe233ef1eb0a2d4003ebbe6e0f17e992fb": {"doc_ids": ["5faf1d3d-1217-4338-88dc-b737546d878e", "56e56403-e29b-4c59-8d94-509a82cd62b3", "776d638f-795f-48f9-8ad4-e361a491cb73"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/encryption_algorithm.html"}}, "0e0c712c4dc8405bace5175f92c0f9317f542263": {"doc_ids": ["7201546f-4a44-4932-b312-83277501415b", "1f34e493-1eb9-418c-b9fb-8cf5ad0403be"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/cryptography/hash_algorithm.html"}}, "ea15d5b4a547a3cb5b744b26c5121271110d9d6e": {"doc_ids": ["f333bac4-a733-49c3-a601-7d95f461bee6", "39969cbd-85c2-4a47-98fb-55f83ec3ecdf", "280d5de1-28a5-4401-8ae3-e0a1721ba762", "7275953c-b4ee-421e-ad4a-35c52565d044", "86cde280-8bd1-4fa7-a740-4ca4ba6c8650", "f3fa3c08-6a3c-4621-aede-7adcb22f50bd", "1a831e82-2fe7-437b-a75c-60885da5cb9a", "6623250b-38b6-416a-a741-241402e68b4a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/transaction.html"}}, "855820ccd70b36a4ebdf0708322fe1d2f692aa20": {"doc_ids": ["7eb48995-4cbc-4242-929c-bf011a2f6a35", "334500b5-7037-401c-9ea9-d8a3c45b8308", "14c505ac-1129-480d-9c96-f2ecbe17802f", "db319837-84a1-43fa-ac1a-322460982415", "3ffee6d2-290a-4cfe-8caa-ecf507740f8c", "58127a79-1731-4901-9949-a6fd693e3023", "7d0c394b-371c-440b-8457-09f3ef3ddc76", "705b4b66-7974-4ef7-ab54-332a70297c7d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/concept/wallets.html"}}, "40e6988df92f95cc6e47ac5ad74396c709d80fbf": {"doc_ids": ["7c547599-adc4-4a59-8420-46f41a9c718a", "7e29772e-89dd-480e-a7be-0c04204fdb91", "4bcb758f-7d39-4360-b069-26c5ed638f0e", "55c8bf15-e3e9-4ccd-b992-d582b1c11cfc", "1df4d47d-8263-4a57-b375-252033c805f4", "12d9fa3a-00e1-4850-af8e-12473b6e2e9f", "761a539f-d00f-4329-b4bb-7ba87c20558a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_algorithm.html"}}, "c5934a0545fd0134853929cf387d1285c0fd4eb8": {"doc_ids": ["2c2be1e5-045d-45eb-a449-6461927038d8", "6de54e04-e43b-4702-9706-f9a6ec31817d", "c39ea642-9044-43e9-a8a3-836cb8126251", "6b845ce9-f7f0-4b07-b4f5-9dd835be4579", "9f896f18-b3d7-49bd-9736-e54caa8f3134", "92a565b7-50ed-433d-b1b7-19d5cf42e48b", "20b6cc4f-47b7-4394-9024-796758eef2b5", "82f5e5fa-f196-4dbf-976f-690320eb14e1"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/consensus_protocol.html"}}, "1425ffea42ccca97279f2cc096e2b2f7f43515e1": {"doc_ids": ["28c431fc-433d-44df-bde2-d97fb71b2557", "c3d86d74-9761-4cf4-a2d5-f3d2f756a902"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/dbft.html"}}, "0b79593a3abe13f563d2210c3ecdaad08559f125": {"doc_ids": ["425f431c-a124-4cb6-8d8e-8332c9d3370c"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/consensus/vote_validator.html"}}, "002739eab60a14f1877dab15a434607aa53b87fc": {"doc_ids": ["4c555916-c166-4704-aab5-ba14db809e43", "2f1ac7db-4fb1-42a1-be80-d367cdb52cf5"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/governance.html"}}, "482b84522da2fbed3394563f6e985a5a5b6f46c3": {"doc_ids": ["ec69a2ab-a048-4a2b-9eee-084fc338f40f", "a50e04bc-98ad-468a-9d4a-63f57144090d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/basic/neovm.html"}}, "12fbcca8bee0c06e3445ee65e8529f3108cecb19": {"doc_ids": ["7ac343c7-0814-4c75-8c1b-0d450c4d460e", "c7284df2-6500-4c31-8a59-455ea8bccef5", "da77cb73-3557-468e-8c0b-2b1d331a0df3", "878aa855-6663-4607-9d93-98f76a1b1735"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/deploy.html"}}, "9b342df4b8ab3b8819cbb205c2ae63ba6cdfcaff": {"doc_ids": ["5c68ab28-8d85-42e7-b5a4-5fbbc1a813c8", "b52f7009-4d38-4fab-9e6a-a9979dd4a817", "6993cf83-0725-4653-98ca-e8f8b225a63e", "83a56f85-0360-474f-ba65-4e31a6e7d5af"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/deploy/invoke.html"}}, "6b871e2db33dc0dfa7c077e22f4ea35abc0e63ef": {"doc_ids": ["ddc59cd0-93c7-4771-af72-ff962db0fb32", "2ba848d5-4f20-496e-bbc4-6a5033825d1d", "11653cc0-0c84-4e25-99e1-47f2dcc0be2a", "740968ad-1db3-41ce-a657-b589acff75e9", "a1b41f10-e8d6-4879-b23d-509ec02feb82"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/private-chain2.html"}}, "6ec16da4fc74b224c7d481dee261e7ac40fed42c": {"doc_ids": ["d71af20e-3e1b-4f50-ad90-f3851f541b9f", "24943a7f-46c2-4a4d-9743-a03867c5342c", "9f236452-9bb1-4853-ae21-e821700eaed9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/private-chain/solo.html"}}, "7559b131bf41790c8f93ec1f26268d3e7db187a5": {"doc_ids": ["20f52511-eae8-4c9b-b1d2-94b6152e4875", "d65a684a-9113-4413-9842-f04f934cd1b9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/network/testnet.html"}}, "411f00abaafdd7d8bf6f3586b259836b30f73389": {"doc_ids": ["c2e15d44-8b7a-4aca-9090-0f36e9a34f4f", "902edcc9-da1c-43c6-88b4-1866e23084e6", "1656ae01-8e8c-42b9-bde3-7a7e4110177b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/contract.html"}}, "a7a10bc5ccbbea2f1262f525a538fb9401b52bbd": {"doc_ids": ["9a607499-1ef0-4dff-a6e9-ca142884910a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/introduction.html"}}, "b58f70d0969b7e9992c63784d84a72874772bbb1": {"doc_ids": ["1f0ae1df-101a-48d7-a48f-f2ff4da313a7", "2f2db8df-f419-4c16-88ab-d5210464ce18"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/monitor.html"}}, "258e372521dd8449dda962e33a6ab05c857cff09": {"doc_ids": ["bf988493-283c-4656-915e-2174b32bd0c6", "39686406-514b-41aa-bf01-9023b7fe7962", "e83ebcf6-bd8c-4f13-b89d-779e302a29c9", "28051a15-2d39-4b87-b996-f9b1e2daaa99", "1bd4e225-dfd3-40ee-b58c-f90cef9ffd67", "3bb29a0f-eb0e-48e3-bba3-cb6ac2d361dd", "fcb886b5-2d6f-4ea4-a5a9-a01c414dcf9d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/rpc.html"}}, "ae55280fd826418cfd090ea78fe4a166e3b4db16": {"doc_ids": ["07af51b7-8507-452a-ba4c-d74f031b59ac", "81ed6f91-b2df-4a8e-9333-21599c87b79a", "d3ba614b-cd35-4661-a75b-2870c2fd7725", "d1f7eaf2-fe1e-4a5e-8313-81493c19f5d2", "d4f8b73a-f8e3-4fa9-bdab-1a8b77fb40fd", "64e88c6e-6f83-4cb0-b7bb-f0af03a462d5"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/transaction.html"}}, "c7429042916671dabd3caf443829149208214a34": {"doc_ids": ["009f60fb-8a0c-43a8-8627-d5c5d8f5718a", "63b0e9e7-70a4-4b03-b856-18592314e3cc", "5bcca153-b5ad-4bff-a6fa-a5da7be4ff89", "374bea48-a9ae-43f5-828b-06c0a16d6329"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/tool/sdk/wallet.html"}}, "8b58d408d24fb8cb32b122293feb9319c0113271": {"doc_ids": ["d758e4c3-c5c8-45fa-adf0-ffe5d2031741", "e3f44d2b-410b-4dca-a559-efae8ecea626", "1f556f68-e80a-4fe1-a88f-afc54a193e97", "5d19f230-064a-43ea-9812-8d328a665f89", "8fa96f78-ad91-498f-8560-91444784a4de"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/basics.html"}}, "2f5d4f1125f39154b0b90fea1b689f7d4b7bbe66": {"doc_ids": ["2a6357ae-58d9-41b5-90e1-0df0c33eb8e8", "d195b25b-e4a8-4f8b-805b-91d563ac4f01", "cee0e86e-e674-451b-ac39-5bf0358fbb90", "8c4d1617-95e4-4fe2-91cf-8e3391184a1b", "dee6bc35-0fb1-4caf-b4e7-8426cf554e2d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/difference.html"}}, "fcedba8087fd732ba9bbf616f76d12206839e2b5": {"doc_ids": ["3400f8bc-289e-4e5f-aafc-20df76068bd3", "ad7c9cc2-8406-4cbf-8bdc-fdfa91f20f89"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/manifest.html"}}, "646063726f109495484d7522abb13f00c7c684f4": {"doc_ids": ["40c6275a-d6ac-4096-b4da-c446b55588c2", "9630e194-c78f-47b9-b021-42624306ba1e", "d94f4642-81f0-41c7-a622-cfd7dd641d6d", "e840ab4b-a963-4489-b7af-78720a939681"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep11.html"}}, "4882a2fe714b9001994272f13c7e0437e1f5cb99": {"doc_ids": ["0121f8a6-8bd9-4316-9fc3-352d3855190a", "9767a31a-ef75-48b5-90b3-9b08d99579de", "5ca6eacc-0e24-4b69-a7d1-97cb709c82ba"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/nep17.html"}}, "f0f5db55d43628fda1b6a6bc1da1f95731ba83dc": {"doc_ids": ["2a628a7f-7009-4aa5-bd43-b40d5eb3bf88"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/develop/write/update.html"}}, "735d40528fddd510f26a26dfc86f52978b7d0e8a": {"doc_ids": ["6560115e-86a3-4bf8-ad5c-a2aa6e163af9", "77455c72-ee6e-47c7-85df-3665f70f7b31"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/client.html"}}, "f511f52fbc4cc9f87a3ed5a9c3b37fb6862ecba9": {"doc_ids": ["55922938-7ffb-4df7-b8d1-a582bebcce4f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/deploynode.html"}}, "ed76af1c7743556b464d363037967b0b46ac677d": {"doc_ids": ["d85bc2ac-cf03-4170-bcbe-027ec44234ef", "4ed039a3-7945-4b1d-b365-7462b6d4de61"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/gas.html"}}, "bea39f524f33c090c079450175271269a59c92c9": {"doc_ids": ["2e9e1614-a3b4-4dd5-9b22-a80789049c55"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/general.html"}}, "0548048c629300181a159f3493bddc5618b16567": {"doc_ids": ["b2ea520c-b2dc-4885-9b38-08ad14c9fcbc", "b59d68b7-6b08-4569-b0f7-d3b046612a2d", "92860a34-7f82-444b-bad5-ee24a84516fc", "2598eae3-3d4b-4974-8aab-22f7d880465e", "98e4f1c6-87ff-4879-b5a3-4438e532e472", "a418d0e7-5c48-4ae6-8e53-4908656218cd", "a2193892-991b-4dc7-9248-fda1b778c6b1", "7f41c9f6-8589-42fe-9188-cf58151ffba0", "57711c24-7dd1-433c-9839-020d9178f859", "6f559d62-abda-4e4e-8478-84c7a40f9205"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/exchange/transaction.html"}}, "5bf1cf88b972cc6feb32ad12a20e5319e68644a1": {"doc_ids": ["d11e1765-90a8-4706-ab19-6c621f101a66"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/deploy.html"}}, "7b96b3a91d8e9e8b32ae0f8d17d0abab970b0750": {"doc_ids": ["be6e5071-23a0-4002-adff-570a626b070e", "13ea593f-4510-4b72-91a6-cdae5b743fb7"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/develop.html"}}, "3e33209cf119a9713609610a7bd2b2b4fd17ba4e": {"doc_ids": ["4cffac4e-e52f-44cf-84c6-9efc09aabf2a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/enviroment.html"}}, "d35783ee9c448dda98c3aac7fe2be9bc692f597c": {"doc_ids": ["7ee159a4-6f11-4deb-b56a-719bd8f94f02"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/gettingstarted/prerequisites.html"}}, "b2d8691844beb4f5c62c09b71a2ca6f546d7d4e1": {"doc_ids": ["639f56d4-2ed2-41a1-bcd0-1fb949c50856", "eb457743-ad1d-4fd2-b11e-6cb452ba0488"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/index.html"}}, "c9703fb9da44831bf3fcf0389f5c6204b9fc2ff7": {"doc_ids": ["bafde456-0f1a-4504-adb2-8cf6f2fe596d", "4e8185c2-9d65-41bb-9a10-f9b5746f255e"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/intro/glossary.html"}}, "3ed333957855992aea21bf7831656a79429d11a7": {"doc_ids": ["4d0fb250-d4b3-4e20-925e-9b714ea40669", "fd461848-22ce-4d6e-8a66-018154b1d2b1", "74b34037-331b-44ca-8814-38d73161b268", "5d6330e7-9b86-47e4-a5f2-d6820e5b1929", "17367998-fad8-4f7f-a008-29506a111cd3", "9e96ee20-9e32-47cc-bb93-e4aa9d2ecf01", "4ba16fe0-b133-45bb-99aa-25abd328ee56", "42935348-7dc6-4fc7-9f17-c3acaac86dcf", "f035b9a5-d75d-44ec-a328-b67f23dde95e", "271f6e9b-0b63-43ce-8fb1-7cd4be4bffff", "125846c0-6ad4-4d9b-bcf3-253966f14e05", "dc83c85c-5eac-4541-9e3e-bb2fb5b253a5", "a5e43e68-2463-4749-b7b5-3224114f1680", "bcc331ba-5f56-4a31-8a36-497806193c9b", "d2ff72ba-74f3-4064-911f-96ee6bb857dd", "d6bfc54c-4241-44b6-b2c9-741b4a2421dc", "0d087aa5-6287-4182-9057-e0a57e9a4673", "43b1e8a2-a3fa-419e-a3e7-a12e6eb516d1", "a1e36122-5261-44f2-ac8c-b87bd41b07d6", "f6abd2ef-4ada-4a16-8413-11e5e64845b6", "ace23ef0-2d5e-4a64-947a-ce30b78dccff", "93d59ac2-b665-49e8-bdbe-ec1990138649", "e29f4f8f-87ac-4f44-976a-2497a0350f9e", "20e9d1cc-d87c-4b29-a748-200420144ad5", "d1da0c5d-2624-440c-bfcd-e5761b8b60b5", "c350152e-381e-4743-9213-375d1098e396", "5ed13d50-b799-4583-b966-ccef64415850"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/cli.html"}}, "2f705619e09b0779c5868a0c30a13034caf69c00": {"doc_ids": ["602510b7-5a3f-4a2e-aa5e-9b2e43b61cda", "1924cda5-ac27-4268-acb1-73f34c42fd0e", "86f4cfba-37fd-4a4e-abb5-eb305789f36c", "905f9d27-3a16-466b-ba3a-8d7a3980754c", "80e00182-c238-4303-a1dd-80c98df9a180"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/config.html"}}, "678988222db96675acd73ba5c66bf71548d5db33": {"doc_ids": ["337e89c4-d755-484b-b01e-87bab502584d", "0c806fac-543a-44c0-b590-292ca01b6128"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/cli/setup.html"}}, "76da6c0201680703b0965a3b79215a10c2e802e8": {"doc_ids": ["73a229ce-74f5-4115-9353-0dde44c11262"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/advanced.html"}}, "baddb1bbf38fb3141d460051bfe189358a8878c4": {"doc_ids": ["c391e37b-c6a0-41fe-9862-10c701d57fb7"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/blockchain.html"}}, "c9955194a150523643ef678ba71151822e97c72f": {"doc_ids": ["2e4e3451-57f6-4a53-ad87-5ef9f4863397"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/contract.html"}}, "3743ab5933f8b5a7ac780947ff268f9548093bf9": {"doc_ids": ["d16d6091-746f-4ab1-a592-eb91ef1b4b96"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/install.html"}}, "04773228c8cda33bfedd9eed3dd9e30b7b868a97": {"doc_ids": ["7aedbf37-aa17-4ee2-92ac-083114bb7c84", "b3141872-f196-4899-a881-c6bc6b5bf944"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/gui/wallet.html"}}, "42ca53d382f933c7e75ee59ba174c9a5f88216a1": {"doc_ids": ["094eacbe-a6b9-4aea-891b-51f200dcff44", "0ef231ec-8084-40ae-a95e-93d52d8d24c8"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/introduction.html"}}, "23776682c639645af8424cb160000e8dbfeb9063": {"doc_ids": ["c4563905-e349-49ae-afbf-159024704eaa"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/node/syncblocks.html"}}, "bfef6cb83803cd3595e3e641edaba1ecd8d893d1": {"doc_ids": ["8bbabe8f-9320-484a-8bd6-4290a78f5eba", "63ad2ef4-34e2-4233-a46c-cadbf3ad0042", "75baf60c-3022-49c5-b507-844b686f3c0a", "f64dcaa3-364e-4252-879b-9f5dd4e81b09", "5cf2c0df-4056-44a7-a20b-de5d97b2baf1", "f6a115e9-ad89-48c7-9033-660179d279ed", "7a683e7a-be5b-4840-997d-29c1584f9344"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/fees.html"}}, "9ffa64d23dbbcfc718c2e076ea4841d265ca072c": {"doc_ids": ["b8b99386-089c-44f4-b5e6-14daf46b61eb", "02206d20-db4a-4f16-802c-0314cf04e817"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/decimals.html"}}, "16b9c5c0493f8bfe727e4e139343a6a4a7aa8da2": {"doc_ids": ["de8dea67-b6a6-44cd-a4f2-a90c010569d9", "de4ce390-ad8f-404e-8343-5b6f6be9f5a2"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/getBlockedAccounts.html"}}, "46a4ba4c245feecd6aa2ad2a02f14b35aa203ce7": {"doc_ids": ["0c89f1d5-3d4c-47fe-a5e4-5d65afb3ea2a", "f306dd82-585f-46cb-aed8-72f5fbaa9fb8"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/getValidators.html"}}, "42423117fffa4424452f942f8c1ae359fa66b585": {"doc_ids": ["3bb244fc-df4e-48b5-b39d-9a22f0c32a1b", "2d18d82b-d42e-46c2-b5ac-4feb800a7244"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/name.html"}}, "07dabe8745e40a791294aae16fe02e8a326e90ac": {"doc_ids": ["904f8c48-1902-4cbf-8099-e201e37ff10c", "a1c7a293-dff1-45e3-a7e4-28a99c282800"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/onPersist.html"}}, "1038dbd099dc82010c7137a160e6ac18060a48d4": {"doc_ids": ["f0b7d9c3-38dd-4dac-a3b0-00fad2bc2699", "a928ffe0-3e66-4008-9d15-02e1ba13f2e5"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/supportedStandards.html"}}, "4cd0931c2ded02ae30ac96be7562e43523167826": {"doc_ids": ["86a1e835-2318-4209-b90e-e292727f6761", "6cf79918-2e6a-4381-8cbe-2b7adb0bce36"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/govapi/symbol.html"}}, "2b84d29cf798f8028fb890af3f2433ff794b7c65": {"doc_ids": ["a9814641-9da4-4414-9dff-d46775ca38bd", "538cd619-c5d9-4ea9-983b-f70fd4c75061", "878653f2-c221-48c5-91df-57bbe53a14a0"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/governance_api.html"}}, "15d14ada85a706762e9d64584d7f7c57b4fea321": {"doc_ids": ["7c8dcbfe-8f7a-4969-8c83-5f3fc04302cd", "011a24a7-172d-4198-853d-d3040505c6ae", "8ced54e1-3659-4815-b39b-087ca4a296f0", "401b909a-22ae-4422-9655-8e44bec433af", "638ada6f-8cc7-4e4e-9394-e17358c8d252", "f3c2ac86-12b1-4403-ab43-fe8e147aaaf9", "4694313f-5702-427c-83d5-a3d8a2005ce9", "b36fb85c-5969-433e-97c0-f6a8ba125104", "ebeba8c1-7df8-444b-9a38-011e7c96849d", "667b2736-d769-4e27-a961-57ff9f9d6f68", "4e74557e-45f4-4dc8-b765-7d45e63c85e0", "31b8eae2-eced-4831-89ce-24fb50dc7e8f", "34ad620d-6576-444c-be95-4f127f798044", "a159d6c8-6299-4fd1-84d3-39093f641848", "4408cd15-53b4-4d28-91c8-49b644ce42ea", "6766ce00-1b31-44d1-acee-fff474577ced", "e46bd04e-ff28-459e-b1c7-e8c6b8b60d53", "aae8a8f7-8ba1-46ce-8885-2ae9b0f8c109", "14f05ea2-46be-4d05-99a0-d3eebe4e79f4", "e12bda77-847f-471d-832c-b2667e4f114e", "84368e21-284f-4737-82e1-b05c2718e61d", "2b6fc718-e80b-40a6-bd55-b0142b6e05d0", "c0516597-627f-49cb-94fe-5a1f730fc621", "628a9bfa-f8ca-403a-921e-68c5ce33467a", "e204528d-2a9a-4cc1-9adc-81d1b81fa058", "4ffa669a-bdb7-4db0-a30f-19d5092a0255", "0595d50b-e6a4-4a2b-8521-5e00607fbeea"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/neo_vm.html"}}, "bf14935ee27ccf10503e29b45d6583d46bd077d8": {"doc_ids": ["643ef0d3-77ef-44f2-a2e4-7c86a554b23e", "00c28627-aa14-480a-acbd-5af6e85e4c8e"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/nns.html"}}, "df222dc1540a5712d14a666de832b4506fe754c6": {"doc_ids": ["527e75f8-f9cc-4e02-8298-2a86da12a699", "4abd3583-d024-4845-b9ef-261cdbd86866", "ed95445e-d515-434e-940e-26a5032fe054", "227ccfee-23ab-4a16-8897-948b54db7fa4", "07c11651-ece2-4ee5-b399-506114fa831d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api.html"}}, "c5ee54ebffbf1d7c16ce8e8b9ef6b89541e850b3": {"doc_ids": ["e64adea3-263f-4925-9ce6-3e8a0a8b75f0"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/calculatenetworkfee.html"}}, "c09362cc87962de69302bf671b07990507d8d0f3": {"doc_ids": ["751a830d-074c-4710-a8ab-3374457b1349"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/closewallet.html"}}, "4660c21f482836bf37c4241d48c68bb2bbfd3a7f": {"doc_ids": ["dada4a4b-3df0-43d1-ba51-8476c98a5a11"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/dumpprivkey.html"}}, "16055bd9e15434a976cb5eace890ace537f262f7": {"doc_ids": ["1962f297-77d4-43a4-93e8-4e03516685fa", "2a9ed5f7-c47b-4d2a-a4c6-d2404e329c6e", "3b23e9a6-25de-4714-b9df-da4bd16c3aa6", "05ce2ebe-8dab-4be1-80f0-5153ca9ea3f9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/findstates.html"}}, "8ef591d31307e1985e7d377e2811e9e3e3cdeebc": {"doc_ids": ["2e35348c-ef85-4d11-97a8-97c5ee684da6", "0abb2219-323d-46cd-9c28-e67c8dcef9e9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getapplicationlog.html"}}, "36dccbbe64e2fb11628cb45681b957d3bbbc6c14": {"doc_ids": ["49eda21f-a927-4913-8cb3-2457a4cfbd39"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getbestblockhash.html"}}, "1745234eab7894f819f14395c0ce93f6ecc7b72d": {"doc_ids": ["d8f5e582-890d-41e0-9306-a2d2e746560c", "2c2aa642-8f06-46f5-963c-2f98056f2598", "3544b464-4c78-4873-b335-9a64158abec9", "67668553-25dd-4606-a0ee-87704517b4fe", "db27d730-37a3-47a8-8056-d341841cca80", "3540700f-f64b-495a-a5ef-6782da68e0ae", "7de1e08f-d6d0-4de3-b252-5813e4809729", "bb784ec4-4be4-4997-89b9-70902d9cc9bf", "59cbf345-5a29-4656-9a54-ef449b038f81", "ff34398b-ed35-4fa2-9b1f-c0b4412d4118", "4a185ba6-71ad-4e39-aa15-3f94d96d73dd", "6f781e10-51ba-405e-87fc-5f2f923e7b93", "bf3029cf-b476-44a3-bd72-2d2d4a660496", "7035ccc5-0d89-469a-b589-c744f5b95603"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblock.html"}}, "35b840f41ecf41337534f4b57b833ed112bd72f0": {"doc_ids": ["1190cbef-a68d-4e17-b878-63dfa7d8c9d2"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockcount.html"}}, "77fea4a8a53be2dcf1e2cf8de41cac3cdfed3d30": {"doc_ids": ["4fbb5c0d-9ed1-4b1b-bb68-346bac21fba6"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockhash.html"}}, "938d0901aaca9015140edc6121e54133fe5043ea": {"doc_ids": ["589d672d-e4d0-4337-be0e-c45d0c9b5d27", "0e9b6c03-82b3-4be9-82a3-088e6ebaca81"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getblockheader.html"}}, "a39cad07b676292d5ca4bc307fc2e864b64021c1": {"doc_ids": ["5c7388e7-2ebc-4840-a9b1-3577e036c3e0", "a4927468-cd33-47a3-bc4c-9c737259fcfe"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcommittee.html"}}, "10ca7a4a9b7973152b451f03803bf73bd33826dd": {"doc_ids": ["7759f154-6a1c-415f-8ed4-b7ba4370283a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getconnectioncount.html"}}, "d5dccca8e365f304565ed0afc3a787ceae2b3919": {"doc_ids": ["b2015061-c73b-4e58-bc06-3d5a76bb1654", "598b6e5e-6f5b-4ad5-b80f-ad94c6bd71de", "a275e22f-0394-4910-ac7f-d8c1d70e09c3", "4ad0d845-85d0-4a69-9873-e34ee4abdbe7", "4d769aea-3f7b-406a-bffd-b74de8207c48", "ca6adbb2-736d-4b21-864d-155694ee6424", "180aa681-9fca-4271-bd85-09cd83c427fa", "1d6f38d8-44a7-4809-a231-8a299232adaa", "0558471e-8a7d-468f-8589-159fd9d9e8dc", "35ca8dd9-d362-4f3b-867a-e27650438e99", "ec421604-e4a1-4816-8d5c-52b734e814a1", "76205753-6c27-4c5b-b694-59cb2d26eda1", "9092e5de-5f95-43d4-bf3f-ab8628c8837a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getcontractstate.html"}}, "a654c63c595171096a6b6736d27ddb04df37b6e2": {"doc_ids": ["f70a6ab0-2e5a-4df3-a305-8d7ba2a1fa9b", "4550e4a9-c49f-4706-b932-bc4d69640be0", "70f1e1a1-6bb6-49f2-ac28-4767ac974eb1", "f1b1b882-5e17-4bac-8507-0d29249b1f24", "9b366707-2042-412e-86ab-591276bf5432", "32389e23-b13c-4875-bd55-d163b9c4f645", "b9db7b41-bc0d-40bf-979d-ff367c11bf5f", "200190b8-2161-49c8-bcae-3d95b1b53f77", "117f4e1a-9e74-49b4-a884-bd19cdd2ad30", "9bac900e-b816-4ac2-8905-36b11219e819", "4ddd676f-caad-4a1a-911c-eda40689a2b6", "4c8b5b1b-be9f-44dc-a9f3-7e57d6722311", "c47b8d67-0d01-4103-b9c1-3ddf06adbb27", "cfb2b35d-a049-4dc7-ae94-eb80da0d8347", "ac99fb10-9865-4cf4-bedf-3c328bbd5826", "f45ed43c-639c-43d2-92bb-2861fb93540a", "6afc5f2c-d05e-4327-83d4-24365b8c840f", "aadcac5b-ab84-46b0-a7e2-501738a67229", "7a1365db-255b-4f89-8825-2c7083c74855", "16967394-98f3-4a8b-8dad-1bacf1a6c702", "6138e236-21f6-4060-b497-da9743df7bb7", "f41d92b0-a15c-4564-8f0c-56dc0a199056", "81babd30-2d69-414a-95ef-ceef73fe3d69", "3e78087e-cd99-479f-838f-adb839761cae", "01582b39-464f-4d6c-b21c-4c298875fd3a", "efe29999-5f48-4b6b-8cdd-5be8d2736c69", "d8f9bfc4-b4a4-419f-9adf-b764a0bb4e3c", "ef511a7b-074c-445e-9efb-7b9bbbcb5849", "0ffd160e-5972-491e-9a56-a5943bb88684", "8de592c0-ae47-4abd-870c-b9738bf50906", "925f8df6-ee64-4c86-8230-a4f779bfd462", "7878c2ea-71f1-43d7-ae2e-dbf8503034b4", "5170f1d9-6325-4311-a9a3-194e841443be", "d2426a6e-0a5e-4b78-b2a2-f7ec2614ca48", "9f371e19-c9a5-4955-a451-d0ce1d61eaff", "44127b92-25a3-4903-b77b-7379eed580ef", "2e94209e-590f-4038-aaf7-cb4ed306f58e", "e420041b-b314-44fe-beff-fdc6900d2e60", "52581092-5c34-4234-b9ff-7751d80123b0", "ad7a3653-3159-4520-8430-46d2bdd0cdf7", "b75a8bb7-a6a8-4c8f-83e3-5bd702f03e05", "f43bbe81-3054-4aa1-9c6a-bb9685619a61", "d64960f1-2ec7-4c81-8cbc-54f59fe78e9f", "386e8535-1601-4a18-9d5c-f5d4cae2545a", "5d3ea744-ab65-4d6c-992f-7005090f42dc"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnativecontracts.html"}}, "16b076dd76191d30f83f62b041355418f301160f": {"doc_ids": ["90c73496-a497-4ae2-924d-751b9fe98af4", "9f0757e4-09ae-4e68-8fb5-4269210d1eb2"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11balances.html"}}, "0ad6cbcb81b8b10208588d14dc652df545ad3720": {"doc_ids": ["b2eb8bdb-06a2-4f66-baf6-0af36e6e0d4a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11properties.html"}}, "d9e3ae301641eada53ae86f6cec29341d00e64a8": {"doc_ids": ["83ee751f-4f36-4119-8005-4ee1077b91aa", "021ffb3b-90bc-45d1-a2c4-f9a380ef938f", "61c60970-0e96-454f-97c7-9f98f1625a8b", "0cefb193-cc32-4457-b77a-aa21ba888ed7"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep11transfers.html"}}, "3d1cfee582ca2798faf9ab1f8ed3d81e5d838c11": {"doc_ids": ["0952cc31-144f-4c17-87e5-9e012da4aa5b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17balances.html"}}, "21f851e90403cd8766bf60670d89810100439105": {"doc_ids": ["97c5fb85-5da1-4b3d-a009-d212522fae6f", "93854574-6b68-4101-9120-45737c72c06d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnep17transfers.html"}}, "73be24af12777a8ce653fbcfc4e756ee2f4d8d36": {"doc_ids": ["853be4b6-36d0-4c38-8252-303bda9c4045"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnewaddress.html"}}, "b108715d91d467c0b202d1d47cf665b15d4a37d1": {"doc_ids": ["b5725fa7-a722-44f0-a852-0dca0019c441"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getnextblockvalidators.html"}}, "dd8dfae87073e39fe801c9efc37f087599f68034": {"doc_ids": ["8a886e87-5447-442e-a29d-b3651c9a0644"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getpeers.html"}}, "ed071685063a0930dd3a5411e1d04bba1fae7032": {"doc_ids": ["7519699c-c11c-4bf0-8c15-e646c775b396", "fffcf870-147d-4e53-9ce5-835677ddf37b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getproof.html"}}, "e886e76ae030ff1f694d46fb4ad273fc73b1bd85": {"doc_ids": ["01b41f93-d279-49b5-ae8d-173ea785f847"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getrawmempool.html"}}, "1af4005b46cb830c2958beed3c26210a0b599ce9": {"doc_ids": ["79134c3d-0ed2-46d4-8d7e-469289ae5db1", "585b8bbe-22c9-42a0-897c-3cdaf8ed6189"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getrawtransaction.html"}}, "7d2041a9ae8c38b71a844e97afb4a28f56928e27": {"doc_ids": ["88acd8a0-9179-43bf-a3f5-2415279d3c72"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstate.html"}}, "84de05c401b7d859973822ad2a5399befa294af3": {"doc_ids": ["8af5fb59-82fc-48c1-88e3-ab8da09e1ccb"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstateheight.html"}}, "e2169ce03382e317fb34aff819120f5c83eebc3c": {"doc_ids": ["5e0b43df-586b-4be9-baf9-5c1e2ffdd9af"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstateroot.html"}}, "33c817d7a7fefc7498f217f140230a174d10b37d": {"doc_ids": ["86564024-4379-4c58-92e6-609287d61e9c"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getstorage.html"}}, "f807e1c4539d7788d4cfa7a221c5d27e87b92120": {"doc_ids": ["2a366114-ca9b-43d4-a115-6218f4de9859"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/gettransactionheight.html"}}, "2d66f9788377ccce186d4bcd4b7f375f9d5784f9": {"doc_ids": ["241c4788-fd72-44df-879c-27ed90624559"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getunclaimedgas.html"}}, "9b1c7acbc35e4298a358d10e02219986d96768e9": {"doc_ids": ["1cc2df44-a2b4-4620-ad42-94cf44c6d962"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getversion.html"}}, "9b22021d04746de34e03fc3d92ad21d74a740a8a": {"doc_ids": ["f422deb4-ddc7-47c6-ac74-405899e7b92a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getwalletbalance.html"}}, "38dad9a9fb22cd68b2340db09b820797a2a9b1b9": {"doc_ids": ["0c632084-2b8a-4e96-85cf-e5ecebf3c761"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/getwalletunclaimedgas.html"}}, "3d9cc6525542d12c0a26a430c5424949478e2fbf": {"doc_ids": ["bb4e336b-5bd7-461c-9903-dcc16f5f41e6"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/importprivkey.html"}}, "1e6d0ae10cb750cd3e177cf7875e04b4d6ff2d62": {"doc_ids": ["91370e5f-d65c-425a-8743-f8c1bd85da59", "6e03191b-cc83-4afd-a495-14d6b2f4380f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokecontractverify.html"}}, "bb7dfccac308be11326ae4524c22bf0146f54a13": {"doc_ids": ["cad3ffd2-07e8-42ff-86a7-9359631e9974", "618bf232-092d-4f60-98de-6075442a107f", "b2cdd6f4-8606-4d54-a277-0f5000e98edb", "5fc5a2cb-ae46-4497-ae04-b94ec55a9388", "19b0d285-adfc-4f7e-8242-7bb31983ba8b", "d311e4bd-55d1-4a2e-b37f-c0d0f4cf4ac0", "48d4326a-b312-4678-bcc5-950fa4793f9f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokefunction.html"}}, "d9d198d3648d0792fe85af1dbd696b32d8e3c39f": {"doc_ids": ["732bab44-395d-414e-ad11-dfb15821e336", "18450f21-e800-4c15-99f1-8d117d72c409", "3e839ae9-5f2a-4257-8576-46b97574a097", "cd641c07-32c8-4503-b23f-53451565ef8a", "1a0c3bca-f12e-431c-af5e-d10f86005506", "cf927263-bfb6-4b9b-85dc-76a3f880e804"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/invokescript.html"}}, "73d629203862f09266388e1396146f4ff62c137c": {"doc_ids": ["3434b996-a288-402a-936e-fe429a309e76"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/listaddress.html"}}, "350079dc1d22e48375082d056e10b4bf86998d41": {"doc_ids": ["49aa2fcd-206e-49bf-9bf0-449239e3b43a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/listplugins.html"}}, "31d376a4e81839a5d32a3ae5db67580979d219b9": {"doc_ids": ["8539ca1a-01fc-492d-98fa-98fc46afd1b5"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/openwallet.html"}}, "c10e39e76a18c0c776849f303b5e575691e65c73": {"doc_ids": ["63a71a11-0a68-4304-a0e1-c74edf1aa243", "2de5e500-5540-4e29-afad-6c8cc207bf81"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendfrom.html"}}, "27e877a7c425e2dc56f385eaa3e57183eeea465f": {"doc_ids": ["e784f3d9-fed2-4d23-9d5c-bec85c8d9bd4", "abc33b47-f917-4253-a05d-3ae152cf1b27", "3a316d76-3ce0-4af2-91b7-d8cc2450aa8e"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendmany.html"}}, "66428027e27b2f19fc6fafd9c1acdb4f9ce0c54d": {"doc_ids": ["5216bafc-3b7a-43ab-83a1-9ce7be99987f", "182984e7-d5f5-4abc-ba75-81793a449dca"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendrawtransaction.html"}}, "bc9c337e1c893f89c76ac744dec3bdadd5f3747c": {"doc_ids": ["ae274180-1ba1-45b7-bb7b-881da32d0559", "57d7d373-b2ae-454c-affe-9ba66702f00b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/sendtoaddress.html"}}, "b2508c096a01bc76cfca72c3c704d8ff905c3d02": {"doc_ids": ["7ed1bb5e-e6af-4795-ada5-adccad93c3e4", "becd4fac-d39d-4e55-ba8e-c47d72e86440"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/submitblock.html"}}, "b27edde0c14f6b26b31d921e3f7813973fd575f2": {"doc_ids": ["f32da9c7-74c5-4772-a3b5-d6ea98b11053", "ea67495b-4feb-4f89-aeb3-e4178472e23f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/traverseiterator.html"}}, "91bc2e134483d59a02555f6a018f45b153586bc3": {"doc_ids": ["5a2337e3-a159-4dcb-bf5c-21f446758317"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/validateaddress.html"}}, "6d98dc0294175f5fa8433ee4692a8f399fae4610": {"doc_ids": ["3cb4df3e-2bdf-4535-a87d-136483601e53"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/rpc/latest-version/api/verifyproof.html"}}, "f71c0b8fe740205051c40c4c6a2a4576c49277d3": {"doc_ids": ["58aad590-42af-407b-81ee-85fa016b34b3", "992d585a-7806-4135-9ec4-19fad3a80ea5", "12a43cf9-9ad0-48b1-853f-404885d4addb", "14116718-c1f5-45ce-b544-c26c907baa3d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework.html"}}, "a264d976268783a1bd1685c226188343b107e973": {"doc_ids": ["6b1759b4-398f-4252-b97a-863a01fb8c3f", "0e240014-08d7-4f50-a5db-88f912b873b0"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native.html"}}, "edc8e0f0af2000fafbf1e5d5a0fbd69c67f906d3": {"doc_ids": ["2f75614b-cefe-4d67-b36e-c092cbece277"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement.html"}}, "1f45236df09d40d4391442605c409e55985d7e69": {"doc_ids": ["1a416c4f-3b82-4fc0-af7e-445deea42fb4"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/Deploy.html"}}, "a8d7ffa4c2fa4535c5fae6c4d20257636adcef45": {"doc_ids": ["3d8cbc33-5f37-40e4-bb04-30cfaf404644"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/Destroy.html"}}, "505c33ba0354ea9c9af98d71a21ef1752a73f674": {"doc_ids": ["e3b15f49-cf81-4f73-83a2-fd596c3c6f0c"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/GetContract.html"}}, "e5193b1efa1aac3a7cd11cbbe798dd9c44bc4f6e": {"doc_ids": ["b29a7782-697e-4586-865e-a164d548d746"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/ContractManagement/Update.html"}}, "78ab1ede974f7f6659fc9e471232f7862616dc9a": {"doc_ids": ["a986de9f-0c6e-45f0-ace3-15887a8b0680"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/CryptoLib.html"}}, "8fc2443ed25576a2a7d0dce7b6b47eec55dee768": {"doc_ids": ["8495a10f-2495-4414-bbac-1377dc14e2cc"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas.html"}}, "72c85d89dad9ce56e1bd7b41306a9055944981c9": {"doc_ids": ["568047ff-4097-4ef0-b608-493afa9715d1"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas/BalanceOf.html"}}, "1cdd5e8543008cbe30a2f3f5b15b1de877099a68": {"doc_ids": ["c08f9f1b-c6eb-4c07-83f0-1ba306c84d09"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas/TotalSupply.html"}}, "1e716f94fe8eb558b86bdcb0e4aaa50a9c1010e3": {"doc_ids": ["9b8d34f0-2ef4-4d1a-964d-afd71ef4fb9f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Gas/Transfer.html"}}, "fca1dfc31725b1627035daf3faf62afef2792037": {"doc_ids": ["21ea8e67-4e0b-4c86-8638-f4c616667d77"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger.html"}}, "0beea9a45e1a87a2ed3c12e3522502f6389bc1fb": {"doc_ids": ["f00b35ce-423c-4df7-9c93-141b488237a9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetBlock.html"}}, "6ece9af1b34b7a816977d753a8766911e9abd8b6": {"doc_ids": ["c949bcf4-dd5a-4859-b311-074336c778d6"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetTransaction.html"}}, "aa3974a530b289a3fe3a6e3908c96072f858a207": {"doc_ids": ["f7fad926-d201-40aa-a60f-522af9ebe7e7"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetTransactionFromBlock.html"}}, "e77d169a8f8dc7ef8ace19f107581922f52f1187": {"doc_ids": ["445076fa-7b95-4998-86d9-7ed7f4d92e27"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Ledger/GetTransactionHeight.html"}}, "bb887ed692c4f4fb43306f15d43f9778f1a99c44": {"doc_ids": ["813b99c7-b4ae-4a2a-b08b-ae8aaf916b69"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/NamedCurve.html"}}, "520ccd5253712cc23e98fe7edd4dc220cfcb3148": {"doc_ids": ["538e4438-0a47-46dd-b6e8-5fa86a01d823", "713578f9-54cc-43a3-b8b9-dbb05cb47d7b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo.html"}}, "71c0ecf8add2eb85487d281e54a58ca42aba4b6d": {"doc_ids": ["3196c1be-11cf-4ca6-89f8-39a4a8523dfb"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/BalanceOf.html"}}, "20c794285446ac86257df2cec9ec228c881271d1": {"doc_ids": ["b64bd9a7-7e1f-42ae-bf5b-42ac56235811", "99331cf1-c5be-4e17-883b-344741dcf3ae"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetAccountState.html"}}, "6c6ca6ff3b8c05a01d6ae8e81bc4bfeab8d3b075": {"doc_ids": ["57de8aec-2658-459e-a9a5-cdcc418c356e"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetCandidates.html"}}, "6ff7b71da1425ca5258e67c4abcd64a76c768124": {"doc_ids": ["a23ec419-5332-45b4-946c-23033fe244cc"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetCommittee.html"}}, "d97bbf00291e5613c81c7ea86eda888df9d06bf7": {"doc_ids": ["564d0986-3731-4fe6-b314-3a3b62258233"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetGasPerBlock.html"}}, "687eb09745c8ce58c3837f6727dbf037c54b161b": {"doc_ids": ["0002db59-895e-4e03-9fa9-7b4cbfb90ac8"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/GetNextBlockValidators.html"}}, "fa51e0dc2e7fde580781d72ccd8a7124c7cf4ee0": {"doc_ids": ["0178ec7c-9448-4775-8a71-7ebdd2b9a3ab"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/RegisterCandidate.html"}}, "b91c9b9ca60cca930c66820e325b128745d2ed66": {"doc_ids": ["810d6691-7062-49ae-8734-a2e80db2756e"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/TotalSupply.html"}}, "fac593e317fbd0fdbbc5e0d62feec3054fe5024c": {"doc_ids": ["4da65b5d-2def-4c77-a7b1-0ab4c2b36b14"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/Transfer.html"}}, "03af670ecaab16815c5a1797f3ec8fe3fbb260c0": {"doc_ids": ["3f627794-1845-4c2c-add3-da4ba8dd3139"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/UnRegisterCandidate.html"}}, "430b4a3ee1d6a6f3e5f93791ba96108446979c01": {"doc_ids": ["a7493407-1afc-472a-945f-b5f14a2b9367"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/UnclaimedGas.html"}}, "337148ee2a04d225830818a16eec6189a4f439c7": {"doc_ids": ["720c7960-be33-4518-a105-da897ebc0694"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Neo/Vote.html"}}, "add4da5c3ab8c45ad2d2025f92ecee8c986a371f": {"doc_ids": ["260e6c75-73a6-44ee-aab9-6667db05d7d9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Oracle.html"}}, "8dcfa5c69c66f1b2b04d97b1eeca7a3e98f46067": {"doc_ids": ["332251bc-12d1-45cd-a207-7bb7d9e088e9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Oracle/Request.html"}}, "8299cf6a6f25fcdfbf3c49ca3a1cab5046f20f27": {"doc_ids": ["9b1b377f-820f-4d8c-9470-4c7f40a77851"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/OracleResponseCode.html"}}, "3a410e386dfc6c7e78f8c85ae93a5d5ea5dd05cd": {"doc_ids": ["a1eb3477-9bf1-4d58-83ed-6d5edcd63d68"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy.html"}}, "4e5df3702b6f8844702380d2a1dec7f9af5749f6": {"doc_ids": ["38f4f69f-9690-47b3-bcbb-dfefc154621d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/GetExecFeeFactor.html"}}, "e8672ffed7586465dc5fc8030096597cb96e1621": {"doc_ids": ["92df290f-19fb-4901-ad55-4108bb6a9e40"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/GetFeePerByte.html"}}, "cb8d46fd103ab8650f2ceac6ea9534f67aed47f0": {"doc_ids": ["ebff1df4-a1ea-4570-a605-0f35d89a8b46"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/GetStoragePrice.html"}}, "a2948ebfc17236c036107526eb206f0f50f925b6": {"doc_ids": ["14275e7d-6a0f-4aec-befe-c7d41992ad58"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Policy/IsBlocked.html"}}, "4f4bef178133355a54c28e3090c85960f49a4105": {"doc_ids": ["026006e6-2b15-45e6-a319-c39a7ee53e25"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/Role.html"}}, "e45f85eb56ba48bc119c054da35db4f44baf4abf": {"doc_ids": ["22b9140a-bd53-4402-a541-85f37de8dead"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/RoleManagement.html"}}, "91b0c08afea06ec25ed38a75015996d3be3c7d0d": {"doc_ids": ["7e8a8b57-7856-45db-ae79-b3830ec1c2a0"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/RoleManagement/GetDesignatedByRole.html"}}, "fdc9e907e6ced0d62229e2ca99a39d26902ad685": {"doc_ids": ["c5fd0edd-8770-48e9-b5ca-ad29e0bd8dcd"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/native/StdLib.html"}}, "77317c54cb7795d54d933e141fdd1f3a00f34763": {"doc_ids": ["dccd3c1b-54d5-44af-b37e-714265f81711", "e3cc6479-0b6e-4e64-aae1-e7b062f863ab"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services.html"}}, "a492402ef25459084bd7911800c455964cb3ba31": {"doc_ids": ["b987ff8c-481c-4b6a-918f-89887e1666b3"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Block.html"}}, "965e8703354bebadd36c94286c3dfe1b703dbc3e": {"doc_ids": ["801df3f1-6c3c-4c9a-a3d4-71bff5617860"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/CallFlags.html"}}, "0c47a1a54d1c86b466f31147be094047cd290390": {"doc_ids": ["4fb17398-95b5-4193-96e5-2216881f977f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract.html"}}, "8b57d32dd8d0f99dd854285a826d5eaed37803d4": {"doc_ids": ["52fe1ca3-db34-4798-8be6-1715a69fc62f"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/Call.html"}}, "7a0af43aec21e2c881cebfa949779e8017665af1": {"doc_ids": ["fae6e1ff-4995-4e66-9513-498df0595142"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/CallEx.html"}}, "e5e9ba3912bb9f234755ca2dceea50ac9cb2a73f": {"doc_ids": ["bddce048-7ca3-4d43-bf02-e413749bdb25"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/CreateStandardAccount.html"}}, "212f8c4b9dee9e1a5b26f812911ad3f8b6a6c910": {"doc_ids": ["55e08c99-852c-49ab-bec8-d09bae418518"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/GetCallFlags.html"}}, "fe2194f4b21f2b9d991d45226bd689759df8bdc8": {"doc_ids": ["7c1592ad-56be-4ed4-9437-3d6886d44f58"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/IsPayable.html"}}, "3cd263ff36e9e9cb481456678b35356f92fad72c": {"doc_ids": ["eae0e18f-a68b-4dcd-90f7-f53f5877a91b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Contract/StorageContext.html"}}, "d47a1ab75e4e59034b68ad73b197b5902728e39d": {"doc_ids": ["f9c280c2-7454-4fc2-82e7-ab8375d90a63"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Crypto.html"}}, "e8e335369dbd51f1340bda9980a83c32e50e470d": {"doc_ids": ["7306eac6-0aa4-439e-bbad-912bce7bb8b6"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/FindOptions.html"}}, "a0b46d38eacc6ce551420272d1a37396a10aede7": {"doc_ids": ["448380dd-0351-46a1-a3cb-fa63bb2fd47d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator.html"}}, "46fd2ea166c18f77f2b1a991b2da70e14e1b2586": {"doc_ids": ["5b13afcf-ec33-4f1a-8936-427d0e27cb0e"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator/Key.html"}}, "592a848695b98e81aeab2762103bcd3b7e911915": {"doc_ids": ["38aeae0c-dc79-40cb-b11b-aaeabd6f01a7"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator/Next.html"}}, "3890ff8c74c5ffd53320b73b59baab7c886e5f12": {"doc_ids": ["eeaad532-882e-4efb-9d73-33ae0515c22d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Iterator/Value.html"}}, "eb757f15ecc4d9b3581df43f30b6bcfa9e3810d0": {"doc_ids": ["ea585120-9a12-43d3-ae22-4b9a2389fbf9"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Notification.html"}}, "d9b45bfefbf7f9b3fe25b76f23d7858b4e91ec74": {"doc_ids": ["5dfa8bf8-cdf6-48a4-bb4b-b123e83737d1"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime.html"}}, "7fa5ddd73fce0f6a107ea4fd16fbead578bd6d4b": {"doc_ids": ["c3f4cd49-8353-40ec-ac17-19839d7e5700"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/CheckWitness.html"}}, "b165411176779f2260e529ba34c84264ddd36715": {"doc_ids": ["d148fe1e-9226-4246-888b-424ac59ce192"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/GetNotifications.html"}}, "db0b3bad9ac76e922be3592107cb173bf37d2264": {"doc_ids": ["064dce44-9cef-4368-971d-85cd50bafc9d"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/Log.html"}}, "f1f4356f9dc182f0e791c26e1915fb283a41c792": {"doc_ids": ["bfe18604-9ebd-4f34-92c6-b93584d03a49"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/Time.html"}}, "8ca0356c760a8d53a64cbfc8a921d1bd597688b8": {"doc_ids": ["c7e0f11c-2088-492f-b963-f815e4c7eb68"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Runtime/Trigger.html"}}, "0359bfd6c84da2a6ab2e46ab614424c106f47e56": {"doc_ids": ["e95a6f11-f1bf-4327-b1a8-9530e0a19c50"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage.html"}}, "01369cd8aac77bf42c3bd6087f608851eb5ec32b": {"doc_ids": ["6f6052f6-0156-4bfc-9e9f-18dc2b4f55f2"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/CurrentContext.html"}}, "1363c45bd3a5e4d539351d83d77fca206b6153da": {"doc_ids": ["931b3039-cfc1-4855-bfb7-14c60e941a8a"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Delete.html"}}, "a0ed09cc780b31df29220186e547647a7f865099": {"doc_ids": ["4e3642f3-b356-48ac-ae9f-f62975e4bd12"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Find.html"}}, "f53ae8403c6277ff0298515513e1c9bfebab500a": {"doc_ids": ["02fd8abe-d876-4a9f-aa08-70a5177e00d7"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Get.html"}}, "082998ccf964412bf9f84fdbbdd733a3451a21a7": {"doc_ids": ["217edf74-59db-4b97-a302-8909b0fd01b4"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Storage/Put.html"}}, "b421223cd2eb50e5e10cf04ae1015154fddf6fd9": {"doc_ids": ["e2652d28-cfa3-4d29-880c-42c80a95172b"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/StorageContext.html"}}, "1af641745e8fd1ab351010f0529e9a6f5fbf358a": {"doc_ids": ["bbea082f-1f9c-4679-a7a0-05db05b6eff0"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/StorageMap.html"}}, "a349e33ea899d8385324e2edec91999f5525a538": {"doc_ids": ["facd5753-a391-44bf-995b-72318ba0ec73"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/Transaction.html"}}, "1c28c649dc2179731d0573928af083c324cb2469": {"doc_ids": ["00963616-c598-4451-a761-642e58e27e64"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/framework/services/TriggerType.html"}}, "918d7684d864aa3e51612f15f404052cc42abb0f": {"doc_ids": ["13dcf944-48bd-4771-b2b7-dd130ca58a3b", "c39992a1-b13c-4929-93d1-5700e554d241"], "extra_info": {"file_path": "https://docs.neo.org/docs/en-us/reference/scapi/interop.html"}}, "aa2e213149d7f9d791758c74e07f9c32c1ae831d": {"doc_ids": ["f695b24c-2fca-4ad6-a080-f4f27e835ebc", "8abd1a2f-76cb-4f78-87fd-c6398ba4ab2a"], "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/basic.html"}}, "5cb675b9c622930784126c56910a6e0cd1f50c18": {"doc_ids": ["90764e97-8e74-4012-a9ee-38556d3943b6"], "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/cli.html"}}, "4b9c909c61e58fd3b1a60d5ccd2c9749d24153c9": {"doc_ids": ["033d0a3f-f9a7-4b2c-9db1-921d5eec7223"], "extra_info": {"file_path": "https://docs.neo.org/faq/en-us/dev.html"}}, "8b0c8e36d82b00677ef4d754ed9ff673ab26f9b3": {"doc_ids": ["254c36ec-f3d2-4421-bc1f-07dfb97f8377", "d16867b4-a773-423e-a20d-114525dd8e28", "0320d91f-b083-426f-b24f-c6d09af615e4", "54300cbc-9eae-41c6-876c-9aaf91d78174"], "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/development.html"}}, "09b1d43f7cab658c0a044a4f5608f5a85ceafbb6": {"doc_ids": ["d61e1c40-eb0e-4046-bbf0-cdcbead8019b", "16920f72-1fbf-4bad-9910-8af977788b15"], "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migration-guide.html"}}, "eda21c51979afb5a3d4ecde6a38a8de76c7b28c7": {"doc_ids": ["51c86fcd-b680-4aed-beee-4eba7cd16576", "561a8b3d-931c-4ba6-9bda-e64f247496c9", "1f36dd37-905f-4e2c-adcb-6b42438e815e", "d5f66be2-dde2-471e-91ed-909c20161fd7", "2c512662-60a7-4897-8d4d-565105a8b9df", "a3dd1699-78f9-4ba4-a15b-4ee3872031e8"], "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationA.html"}}, "3cb9f040f2e1e748c4a4b617345c09b73bbd1b81": {"doc_ids": ["d207951c-d99c-4d68-bec7-24d32d67f3df"], "extra_info": {"file_path": "https://docs.neo.org/tutorials/en-us/migrationB.html"}}, "b95730945569607203de0fc8b9a703fa4ead3b04": {"doc_ids": ["ed49bec7-7bf7-4b77-9936-7bdfcfd656b7", "1d4db89d-2486-4abb-923b-526df39479bf", "2329cf91-f9fa-46eb-ba34-d04e7e774465"], "extra_info": {"file_path": "https://developers.neo.org/docs/faq/basic"}}, "c417e614fdbde925837ff4b7d6b910147c9a917f": {"doc_ids": ["828a6858-7428-4988-93d7-b4ad5478f909"], "extra_info": {"file_path": "https://developers.neo.org/docs/faq/cli"}}, "036a1879dcb7c2996f8247913ceef0e9d2d6ad6b": {"doc_ids": ["5f2bb50d-9dc6-4a99-8af3-4ede9d0ea8e5", "55ecf169-c0fa-40ad-80fd-e735932bfd21"], "extra_info": {"file_path": "https://developers.neo.org/docs/faq/dev"}}, "61651c2945f267f8a94cb03344c6573bc0602691": {"doc_ids": ["02942f42-6cf3-4b7a-bd2d-58e22badbb72", "7c1a0ab5-5098-4b00-b121-e2199ccd23b5", "dfcb81de-b126-4b40-b419-4f69d9fcb623", "c9d41d00-6881-445d-bc8a-bec726fb4bfb", "245afa70-60f1-45ed-a23d-53a89e143f5b", "1540a81f-0fdc-4569-a96b-dd89b032882d", "64150751-abf0-4a5f-8d09-be10aa21c512", "04c26d69-4e05-4ecb-a2e1-831572f544b3", "c2f3730a-7e96-45d7-84c3-3f14cc629fb0", "b4670df9-a98e-455d-95a9-422c40220432", "b5cc396c-02fb-420e-b87d-92446cd5cae7", "476d22bf-6250-449c-9c25-9504f84b06a5", "227f3b72-5399-4570-874b-bf9fcbf92d4d", "c21812ef-557b-4057-9fb0-c29a839928e5", "086c90f4-d833-466f-aa3c-ffb8895792a5", "34863f34-778f-47ca-94bd-56a685709bea", "92a9fcd9-5f9d-4b88-abbd-620c5f6d772a", "9a00af15-9e6e-4b10-b3d3-3971d1ddd0ff", "6999f292-4e22-4a84-b7d9-16c1671367b8", "99fa25e8-77d3-4365-955a-434459d2df5d", "62904ba0-84d9-4e4f-9f6d-bf5f83e75944", "be728d38-4b42-4bbc-b801-1a3bf59dfdb6", "3aab6b2e-e3b3-43c6-8cb4-fef5689837f3", "bbad9be1-79ac-427c-81a1-fda9624cc03c", "687ec66a-d036-459c-897c-97643680782b", "fbcf3797-816d-481f-b169-50940707d572", "9f50e0d4-a5df-4f78-b4d3-12687ca20236", "475440e3-3664-48a5-b0c1-61989c3b00ec"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Neo VM instructions"}}, "348729896fd647c82169075ff223a72998d0d4b1": {"doc_ids": ["88cf9b0e-d221-4f4c-9111-0fd69ece23a1", "f0fb7c3f-26bc-4813-bd5f-b69ed119e464", "d7115d3b-28bc-4d94-befd-2baae615745a", "27de7f94-5541-4183-ab74-c6922f36b707", "98730fca-cf4a-4c32-8706-5a191fcb3b51", "009ff9ae-4781-4bbe-a5d6-483baa59df06"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/Oracles"}}, "19d8e51d8db8df35a2560ef8775b8f6537ced626": {"doc_ids": ["42d710aa-c391-488b-86dc-b2c509eef237"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neofs/_index"}}, "44ae1f8f53881ebb20d6240a9eeb8d7f3e5c143e": {"doc_ids": ["6a11d844-7a15-4a4e-8feb-17c5c29ee84e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/addRoot"}}, "4ba10927bf21ca28895376082c87fdda82c8876a": {"doc_ids": ["d34fdcb2-ff7e-4917-9de4-f68360c04dbd"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/balanceOf"}}, "42bf07445998152f727da4fc3912ad3271fdc01c": {"doc_ids": ["feb7dfb9-5e39-4ea5-b2c3-fff756907661", "65513ec7-f49b-4c7b-b472-8ca17e08427b"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/deleteRecord"}}, "7a6029eb6686d6201bf42d46dbbfb0924db2a6c9": {"doc_ids": ["a491d3fb-19a4-4424-ad40-2cb842bbde72", "e21f8ae1-24b6-4339-aef7-673f94945195"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getAllRecords"}}, "52b7bb3361034dc6540bad22299b083e10a3447d": {"doc_ids": ["318426d4-bd65-4cd1-a5c9-bf79d53c8fdd"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getPrice"}}, "c286b043311a7af9f7d1f8b7da621eb7d0fe5302": {"doc_ids": ["df61f529-f2ad-4128-9e91-f248d016c65c", "b5fd5945-30a1-4101-964f-7602e1ca3701", "0b6e628d-e3fe-4cd8-a066-1ffa7e7f8670", "a80621e9-2ddb-47fa-8e4f-a985d44c8826"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/getRecord"}}, "b8210cf275aeaa0e8e9a178abd45874b107048c1": {"doc_ids": ["b40447da-a4c3-46e6-9cf8-d5774c5a7013", "93d82944-0f44-4268-9668-60e21444d435"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/isAvailable"}}, "0d5661294bf4989f5890d3abe7844ffc01ba9074": {"doc_ids": ["29d09ea5-418b-449f-a345-38f08aec4ac1"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/ownerOf"}}, "edde24794c57e87c10b5cfa33353ef5661a5071d": {"doc_ids": ["e3195419-9c93-41e5-a55b-c987f6ff0198", "04680199-412d-4c08-8293-5912b7d76f63"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/properties"}}, "68146ad8405a821f13929453ca0543967ee99fba": {"doc_ids": ["6c6a7a63-93de-429b-ad55-bfd0ea71fe11", "10913d0f-e8aa-43d6-9dbb-2eee5feae5eb", "99aea70c-e548-43ef-a3bf-c270e5d68f9c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/register"}}, "18051023a4884da734cec67165692de9cbccbbfe": {"doc_ids": ["f88a4049-ff72-4722-a9f4-867eda5a2fe3", "95d97e0a-f65b-4d61-bb12-cbd04515c1cb", "0bc93e9a-c376-4590-bb5f-09bd1b095de3"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/renew"}}, "b8a2b21f2aed109cb7ed00fb45742e6c4c846113": {"doc_ids": ["356f7146-17af-44ea-827d-8b2722f28036", "f82a2f74-be56-42aa-a0ad-cbc03cee8f61"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/resolve"}}, "38d538baf3e04475b6dae62e5b06245fcf1d8d2c": {"doc_ids": ["dc239a7e-0804-40a1-a03c-0d4fa0ebc983"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/roots"}}, "838e6337b4338c1b85ddd4e7e78ce7e82b04810c": {"doc_ids": ["aec492a1-839a-414f-b0ba-8d11dbf305c5", "b3928af4-fc04-487b-8162-d341cb2bec1c", "43f68820-b10c-4c15-97eb-b87976b692ec"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setAdmin"}}, "7b78ec193886b111cf56d8f5576f033269d4fdfb": {"doc_ids": ["4323e630-025c-4043-ab95-3766df0bf1c9", "d9d29936-7352-46a4-8b40-3e0320144e22"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setPrice"}}, "ece9661aaa275ba7b6e067d84151a8901406e9d2": {"doc_ids": ["edc90ea0-d8b3-4182-8336-7f84c2160e41", "1f856dac-1c81-4821-bb58-dfa8190340dd", "74821dd8-e18b-45a3-83f2-259b2bbeeb76", "f6b140f8-1b35-4519-b0bc-609e447d0a11", "89c414f5-35a2-4053-bb81-1223cf0c9204"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/setRecord"}}, "5770a1bed02bf3a3ca4f16023107df3c3fdb40e8": {"doc_ids": ["41ca87d1-9cb9-4793-8c33-d881a4e322b1", "3f1d264f-15bf-458b-aa61-3eb8a5b4a1dd", "1cad20bc-36ea-4d88-8630-3c1d161dd359", "bfcb77c4-0af9-4db7-8c62-55bc5de428ac", "bf939024-95e5-4465-8c25-90070b43448b", "47626194-b9e3-418c-b31e-81832be7eb20", "e5eddce0-d9e2-439c-8879-30f40d688358"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokens"}}, "a8723774c1de839dd80038feb9f2a622c24f524b": {"doc_ids": ["c1ee3b53-688e-4aa8-bbf0-84d49bc497a1", "dd849719-e41d-4390-8294-59066d76e820"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/tokensOf"}}, "c14ec2146b768a8e7bb8feaf09f791f29152dda9": {"doc_ids": ["c0a73f07-da8c-4b0f-bbca-55f750aa48db"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/api/transfer"}}, "2edf88f2d0024be43b844b3fd3298846b2bf7317": {"doc_ids": ["7542d531-39d6-4ea8-929e-63ff4be85249"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/Advances/neons/index"}}, "0840cfab6eb620bfb8e9701a111bf29afe3f5a5c": {"doc_ids": ["dd97c9a9-85ee-4fd6-b953-e4cddc206d28", "52fe3848-693a-4586-a004-b829ffd0bf8f", "f5d1ae8b-42bf-44b2-8817-83e27260846e", "19ababb6-d6dd-4bb1-adc7-ca1a897378d5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/deploy/invoke"}}, "cfaf5de88d573d775dda261f5c5441484302d961": {"doc_ids": ["414fd629-f6ef-428b-b5f1-304ca9194a96"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/language"}}, "9ec2f719665f805d8a851c5b0562239b6adeb373": {"doc_ids": ["34ca6ffd-38a2-42cd-9235-c968803f93ab", "6ef21938-62fa-4086-944b-ffc277641e9d", "0e8a58d6-6b71-45b6-95b9-997890f2b6ab", "7d73f044-9daf-463c-85e8-0965bff6c909", "1c0c6c42-864a-4570-82f7-a03288840d9d"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/private-chain2"}}, "40d0380af07aa18321fc672ba753e4e7ff312e02": {"doc_ids": ["87045a79-9271-499e-b91d-5a1e6ba59bef", "4cdd373e-b356-48bf-967b-e9c0e1ce59f1", "21e28e57-b442-453f-9eae-a355af486736"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/network/private-chain/solo"}}, "a6fc55168b362386a1393977a8fe31b513578467": {"doc_ids": ["4e592c6e-c866-4d1f-9dc9-f7d65efbb6c4", "3ade914e-a729-40f0-aa73-0ddad1fefd6b", "a011212e-2cd3-4a28-8297-6f5ed2958ad1"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/contract"}}, "a38d68a556bb0d42da12c28f7ffeefca895a651b": {"doc_ids": ["28f0ad28-f1a5-4630-a769-d384d3389224"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/introduction"}}, "daee96a8c111b0b324e4f1c463768b1d26af8c69": {"doc_ids": ["6240cdf2-c257-4872-b29d-30ef35a8f895", "c9ec58ce-01e2-4fac-aeea-70aa1831bee1"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/monitor"}}, "0db36e5103c9af18ce58985f51eae85575c8ae2f": {"doc_ids": ["316bf954-bc11-4f0d-a47f-b06cce02978f", "21083ed0-4e2a-4422-9f44-b4dc0ed89cca", "3ce40184-0f42-4c4f-b964-fcf52d8d73b7", "aa2d44ce-48b3-4eaf-986e-3f667cff31b8", "dcde3de1-045f-4865-9430-2ba4487be4ad", "f9b0ca2d-b072-48bc-a286-1c78106d5223", "291399e4-2fb5-45a5-a75c-1c465be3fec7"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/rpc"}}, "4b55a68cfe2712f7b58501b1723005c4d42281b6": {"doc_ids": ["de12847c-cdd4-463a-8e42-30ebc7941de9", "21c5e0f5-c88e-429f-bd89-cdddfbe3f637", "eb0ff044-e257-4a84-b42a-9f11098888c2", "f8be1e4e-cf21-4183-98a3-dadcc6e05913", "125fb7f7-d22d-4a18-9d3f-88662292e97d", "3aabd586-cb82-4baa-95fc-59278cd1eb64"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/transaction"}}, "f13f83f36ca1358286929077aabeb8a745b6d64d": {"doc_ids": ["5e48e36d-4c85-4a7b-bbfd-9ab04af91302", "d582b564-fcef-4094-a416-d9ac54848cec", "9e36b1d0-231b-4282-80a3-0106c097396a", "631f0528-a1f2-4ef1-80dc-2abe23b289e5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/tool/sdk/wallet"}}, "c5ecdcbad7461b16e2042f1bf5cb30d4e0c1caa9": {"doc_ids": ["3c80b030-9166-4250-83b4-4ae19767f50e", "7de89a99-6b2b-4d4e-a183-4e58a5346b10", "256e76f3-413c-463f-9446-301215621b65", "b3c1d2a8-6381-4768-a3dc-5d9832cbac80"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/basics"}}, "d5261f6c4a29285160718e85e0dbbec44c10d983": {"doc_ids": ["196cf7e0-ac78-4fe2-ae98-3e784614ab87", "bc2ff351-0713-47c1-9585-a2f58a327fb5", "5d8c0e2e-06c2-4e39-808c-f459db4d4722", "0759c14a-764b-4987-8b74-652d9379d72b", "5a3dd5a0-28f0-4045-b294-f027f106f2f3"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/difference"}}, "debb614241befe9e6d2944d69549425081eaef96": {"doc_ids": ["8a247c6e-e6e2-4070-b422-d9f81189348d"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/framework"}}, "3355f0881b7369c3e3465a9e02e23b5eacc2f9c2": {"doc_ids": ["c69dfaf3-382c-4f10-a069-a2131a662d88", "60bcea0b-6fb9-435e-85e7-3bdc3aa511f9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/manifest"}}, "087cba88d2bd09ac5aac93b7bdbb854dfcff4932": {"doc_ids": ["b6a927ad-00d2-4154-838f-018d09c98cf1", "2b8aef81-d2f9-4c72-af35-2f885d093fd3", "f95d4717-73a8-48c8-9386-91be0aa00483", "8a2ad227-cd2d-40fc-a3e9-9612770984b0"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep11"}}, "1d1b056f2f84976b57bb1a1f70428b3494d13c45": {"doc_ids": ["43a2f4ed-2185-48e5-9e37-0a15911d022f", "fefab0fe-4e71-47f5-af3f-76aeaf4b09d3", "d012161b-6378-44ae-b7e8-094eedd82479"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/nep17"}}, "5dcd04b94ed7f9869aaca5969d56dc46ce93826b": {"doc_ids": ["964aaee7-176e-42cf-af16-3df016fbc9d8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/develop/write/update"}}, "48356fe565bbd932fde769ce559c32191360ce94": {"doc_ids": ["3dc7dd2a-0043-454a-b5e5-6749935979cb", "f5d1543a-c420-4838-9f56-d96226c5db24"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/client"}}, "954d2e2e6b9aa28c74e58588f4d02652894873eb": {"doc_ids": ["3f11ef0b-7f38-484e-9c52-5c7c2cbb07c8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/deploynode"}}, "cd0160a2d14c34413af91ee4424de68ca7f47c80": {"doc_ids": ["4f44b75c-a0a5-4a9f-b82f-014c45fd2709", "35bf0e91-edeb-48f9-9240-ee865cb17f3c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/gas"}}, "34fb592983ffd82c7fc01a8e626cd98cb4d1ed2d": {"doc_ids": ["f95841f2-c72d-4fc9-87b5-0c1534fc6d02"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/general"}}, "737b1fd2ab8d6fa0f48e4f79a51d53b819e0f631": {"doc_ids": ["086656b4-ed8d-4443-840f-00054cf44388", "010f58d3-07bb-4439-ab8c-027ef41e2ac1", "9666ed64-6350-44dc-bcf5-c9004e769eb1", "5f438397-3ebd-4e7a-b92f-10e758e5d515", "14474659-aaf5-4e5d-8b82-982327072a73", "4b8cb1e1-e5d3-42ff-8517-e44c6b353412", "28f3966b-4344-4e4d-89b7-592398f83560", "01520c43-86e8-4eb3-b5f2-d9ca4da2ba4e", "61169db3-1c07-48bc-89d2-9fd777d20f96", "495b7d15-c728-465b-8d22-b06559d50056"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/exchange/transaction"}}, "c2312a3cf01c34580ee92070459af970bf1c3109": {"doc_ids": ["3984b0cc-271b-4b99-9714-ad68d3800388", "3827e5cd-1f1a-4dee-8afe-79c069f9c45e", "dcf7b495-ba31-4759-b620-93897dfda7d6", "d7cafc5b-344e-428f-bcc8-070856a69c31", "54dd3c43-df98-4776-a98e-b4b538197101", "e24526b5-d36b-458d-941b-b8ec0e3a78e8", "ae30916f-f634-452b-a615-1b3f839e8b60"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/fees"}}, "01475bc02aae5d24f15884f934fb987ebc59283b": {"doc_ids": ["42bd696f-ca7f-4210-8023-88ce4373e6bc", "d868a581-12c5-40dd-b625-8bb5b288fcc9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Blocks"}}, "2e793c0c7a679f2ed4b59593787823581a749c91": {"doc_ids": ["d6919f3e-da0e-42d6-ac8b-86d77c1a4ba8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/MerkleTree"}}, "2b80d8d8f8f2c4854344e74929561c75de3b0565": {"doc_ids": ["6b2dd714-c7a0-431b-95bb-62d0d13eaa50", "f6fd3b73-d138-463c-9ea5-4d4fb9a95ced"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encode_algorithm"}}, "1e88155794ce85f3297cdf937f4e39f520f103b5": {"doc_ids": ["97fdcebe-bc4c-4be9-8643-67c21fffb86a", "39293e26-6c37-4d9f-bab8-b46778615a4f", "bc15ef1f-d994-4426-834a-ae741c75e165"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/encryption_algorithm"}}, "409fb91ce613f9b2b1898cc01c9845ea00c22313": {"doc_ids": ["69589414-4617-4522-9fad-f6cc2cb189f4", "571b45e7-90af-4213-92a3-b7ef5dc2909a"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Cryptography/hash_algorithm"}}, "e4ef25f1a683734e5f3b50a3eab6c46cdd02e17d": {"doc_ids": ["7a006921-e375-486b-ae70-109cb59dab8c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Native tokens"}}, "a62825e262d5fa81144e76327d854a4bc5b6306d": {"doc_ids": ["f2799773-922b-4587-a7c3-e88f85812e17", "d8f52df6-92dc-4045-8068-6e6456db267b", "7241bee8-b439-41a2-b676-15d8dd30c0c4", "d432052f-112c-48d2-bf8b-8deeb3c1a6a1", "2bba35c7-3c57-4672-a73e-471dcf86de11", "9bac438e-5dee-4936-8e53-51051990eb66", "070ee0d4-db64-476f-8b81-34fc7cadb2a9", "f9ec9932-36a1-4850-a8d4-c37ebe4d3fd4"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Transactions"}}, "3cd61107c8874a4e23c0c0eb9989cbd2251eb959": {"doc_ids": ["92fb7a46-c4ae-42f9-a7d2-15c66eb0ab1b", "551ef7a2-6c74-414f-a8d1-25da76b159fe", "94a79420-1ac0-40df-879c-63b5307ccfd6", "edc00528-bcf3-4616-a609-f16528bd56ed", "0639b5c9-0f10-4180-91e2-7784bae7850a", "2c275eb9-4024-437f-a381-6e7057785234", "5037b691-cb85-46ae-bcb4-aeb41a211d4a", "c83ceb0d-ff6a-49d1-bfa5-249d8047d78c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/Wallets"}}, "788ef6bbf0ac63a5af9401c87bcd6edb034e48cd": {"doc_ids": ["58a03b85-eab1-489c-affa-9127b75b855a", "8256203d-0439-4c8e-ba04-b2874d9ab9c7"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/dbft"}}, "a001268bbd43a5fdb5cbae1e57f3eff5888c105b": {"doc_ids": ["12783d61-7092-4178-9b69-85f6d8d6e456"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/consensus/vote_validator"}}, "9fba62de8df2dbecab3ab5ffca830f8b04c58de4": {"doc_ids": ["00222303-974c-4160-b480-7d270af15804", "71e7e907-3c01-4e6e-911e-3f8d9a190ddc"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/governance"}}, "1b6c2d484eea5dc6baabe27fbf40fe78e53180bb": {"doc_ids": ["8f472fde-3ce5-4c0c-b7a9-3ff6e0956822"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/introduction"}}, "a8c83603847d3d10d8e91d3a7e169c72da97691c": {"doc_ids": ["a7dfdf73-a5a7-4c28-8707-4eea758ac160", "030997dc-ecb9-473e-9145-f19a479bfcff"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/foundation/neovm"}}, "1a06333957e3af39916b4e955b257c8aa0da3412": {"doc_ids": ["6e35f0a6-8c50-448a-80b7-ceddf14029fc", "43b67a0c-0d76-45ac-8aa7-8196ffca7ae8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/glossary"}}, "33fd8fef9283f6039ecba3060a37c8cd0f0bb78c": {"doc_ids": ["eecb216e-695f-413f-bdec-5d013f3b942b", "2738dac1-7676-4a11-a0a2-32f029be74eb"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/Introduction"}}, "efa680fd18a152c20af376666071ba484cb87d75": {"doc_ids": ["6efae4e0-798e-4ec1-8cf2-85587554fbef", "4f5b0ee4-d525-449f-894b-b76ae682e2f6", "6e1b845c-ff49-4c32-8635-e8daba522ef3", "7b1e32aa-f53f-4030-8292-05b14601eb0d", "6079904c-ac40-447f-8525-91b8912ae76d", "261f200c-29af-46af-9404-da804ad2f3aa", "941bfcc0-665a-41bf-8991-55099c802258", "b1c3cd92-ce9a-43a8-8045-c85f401fe590", "4d05fa5f-7948-44ac-8587-dc047f15fed5", "54e6042b-fe42-44e9-a4e3-3243ce2a2b01", "3caec479-c8e5-42b4-985f-07269566b001", "e0bd85aa-9cc7-401d-b7cf-844e393f281c", "addcf7ee-366b-4c00-bb1f-ec9a99e06158", "bbf7a51b-982e-46ca-91e2-ba1e339b9bb1", "943269c2-e5f1-4c5b-bfd7-29f33c8d46ce", "244bd799-59c8-4720-b85c-5fab07a171ae", "edad010d-873a-4f20-a175-1f0c2e9d2766", "77e2d87b-5406-461d-b625-62c4d9505a2a", "ea0f654c-4c4a-4a35-9307-3185f1fe64b3", "fbd396fd-7841-43dd-aee6-7493abc80418", "062e830b-866c-459c-a866-2c9a212e2a71", "adea64fc-c224-4d02-ad35-c07551b1b4a2", "df0ef819-5d3c-4228-bf3d-d7eb46c0f465", "1a5c1a6b-d601-4e71-b8f0-994c9a4bfd3e", "036fe86b-258a-49c1-b1ac-5b5c3ba2ba16", "64fb1759-c317-47a0-8028-0ef01c553e77", "5987a3d4-ec18-49cc-9f95-59d495c5de64"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/cli"}}, "0d998f1964df8496b6512bf39dbdcb406ee9ebb6": {"doc_ids": ["be3a27cf-d400-43d8-b3c8-2677ff716f3a", "25ce4341-f9fb-44ce-8995-018a66f1c502", "79085973-df4d-427d-9911-c551b7bb9657", "221af4ed-2a70-42df-a51a-2c45b1ab4b1f"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/config"}}, "f8a2bda5a57d11b5128b0df687492a2c1b93d051": {"doc_ids": ["427ef00e-1f35-4bff-8b6d-bb2ee4d66792", "5ffd12c2-701c-4596-bd30-8a9430187a6f"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/cli/setup"}}, "43924154f68e189724acdd3a354bf12b0c0449b3": {"doc_ids": ["c216103f-87f1-41a5-94fa-4695a01f468b"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/advanced"}}, "2cc37aded389f249743904d810d32c3b6deb7e5e": {"doc_ids": ["10fa8027-7237-4a63-8796-d04ade4d9e56"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/blockchain"}}, "eb044475b66808a60f7c8c6cf2c5c68b69198c11": {"doc_ids": ["a2257ee4-aa08-4ac4-8113-dba0987a5b95"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/contract"}}, "797c7d2d1d65a5a58d593a0c413a6ce2aae491e1": {"doc_ids": ["91c3c885-e725-4097-9673-6417ed76bcd5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/install"}}, "11eac09eb22a2547e33c8d02b9d3d36351543b59": {"doc_ids": ["91fb1f8d-da26-4b06-b32a-5866898ea56b", "efaab331-d7e0-4ec9-9aeb-b0ca2347cb86"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/gui/wallet"}}, "d1ef957bc11e290dac3716fe4e964b7bda17bafd": {"doc_ids": ["666ff33d-fe65-4159-8bd6-d8b5aa156f88"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/node/syncblocks"}}, "889b9619c77162b8492f18fbd3bde9bc7002c9a3": {"doc_ids": ["4060dc18-520b-4e00-a1d8-3506d24ddc3e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/overview"}}, "750b85fd97a0685bc3c20ecc254941239e7bbabe": {"doc_ids": ["77d77d2d-6637-4beb-a4c6-b0db26fedc66", "0793f403-f6c3-43d3-8a2b-015377a8fb47", "767602ac-a341-4692-9e46-becd5d9d8855"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/governance_api/index"}}, "b4bf034fb796f9cb99bbe5d3da9777eb0e456c60": {"doc_ids": ["85f34045-2191-492d-b849-85c5b96e8adb", "5f1206f1-c8c2-4b99-88f7-1790d5de3b50", "ed6e52a8-80db-4f56-9dda-7283ba8b143a", "f1c15372-95ec-4343-b1ca-72b01d045b53", "b201d89e-c80b-42dc-8799-4623bbaae95e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api"}}, "f02f959a7b56582f83e37d09f74ad8ddbe001b1f": {"doc_ids": ["ba0cb4c3-f875-42c5-84ef-732a232ce0be"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/calculatenetworkfee"}}, "03aa45d702a3216e47305791ed69e661667f4654": {"doc_ids": ["d9f03a72-d0fc-489e-9f40-b7f41d13473e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/closewallet"}}, "df13a00bd30c2471a31a32e8f7039d3b4a381f49": {"doc_ids": ["17236dee-c74c-4d22-bcc6-5ce8ef5b480b"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/dumpprivkey"}}, "7fdc2d78b7087b57a0b5d18019bede1a4e777967": {"doc_ids": ["152768d7-52e0-4040-8232-8b2d7c637fe8", "38856902-9c3b-40ce-8f47-7d1bf85f7a74", "2b11150e-c93b-446e-a865-f3500f6c9aaf", "8590754f-b587-4152-ad91-b38baaa2d046"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/findstates"}}, "bb98ba9ed71e532bb75bb8be7d414a315c6bef8b": {"doc_ids": ["8149251d-1643-4124-86fe-d42e175d3bdb", "55f2d4cc-1054-4b98-a550-00d2a4655138"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getapplicationlog"}}, "67437ae8ce1c96f552d4fb00035c2bfe8968b3d2": {"doc_ids": ["80f2b708-f38b-4570-8299-5b8f2732787b"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getbestblockhash"}}, "5a6daf3113971fbe0b8eeec8bc28a867e10cf45a": {"doc_ids": ["4393e996-a537-48bc-8ae7-bb0d4a17bf85", "a79fc686-f90f-4bb7-9658-700dde389191", "acca3584-1d58-4b29-86fe-7ff64b7e46a0", "bb58f53e-be0e-4f07-a845-d6009310358e", "4c3e8af3-d1f3-4e11-a23b-5d302443df92", "72a573b5-d6e1-4948-a82f-9ea3b232f46f", "3d65908e-e738-4cdb-996d-4b02fff73330", "4d50e189-f9e8-4eef-92cb-6ead069f911c", "5a243d12-1f6d-4685-89b7-cb4ded884189", "b960ce20-a39a-4497-ac28-ec7d2c01eae6", "3ff43444-a1de-4c51-872c-06a33670201f", "2be731a1-14f6-40cf-925a-0687fe2e5f1e", "0699cfe7-8d39-49d1-b7f1-661896d251db", "83d0f0f9-6db1-4dc5-b32e-20686268ae49"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblock"}}, "97fc7460589f71bf1ddb99579e33e1ca596768e7": {"doc_ids": ["4146a496-cc9f-47f1-8f34-3ee12d75600c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockcount"}}, "266fe126e4b859bb1bf752a139d87f7f561478cf": {"doc_ids": ["cd29fe07-8767-498e-9ca5-6a0fb14142d6"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockhash"}}, "35c92f551f6f4eaf77d14a1387e004951f1c1392": {"doc_ids": ["159fe277-1fea-4b7d-b4a0-a2b6dd4ba16f", "01e7a291-ff4b-4c37-952e-e678408ee25f"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getblockheader"}}, "7330f6f7926be311fa994213f7dbe90364f9aa67": {"doc_ids": ["a5409723-226f-45e6-a2fa-aeca4a69efec", "22f109b7-3d3d-48c9-9c6b-a8a5cd914e96"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcommittee"}}, "fff224d98b23673eedebb4f1a8e2df61896e97d1": {"doc_ids": ["b3e46934-f0ea-40c1-abfa-093a26f697e9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getconnectioncount"}}, "a04e9a56a13f9b438b5a09f8f20a86d09ba948ff": {"doc_ids": ["d17e9882-b75a-46e5-9db4-83e173d675f8", "a606f230-2ffe-4143-b649-4f12f4b3d859", "87cafe46-f1d8-4ddf-86d1-4323e5ec9be4", "045a194f-f6bd-4ddc-b668-b21b3968b4a7", "95891c03-6d16-4d3d-8ef4-e83397fffd5f", "16ee6768-2643-4d06-a9b3-88761721d629", "d420b00f-58ba-4faa-ab07-164c2e8f8577", "2ef87355-599c-406e-9481-6de1747ffead", "8c44cbd9-fee9-4cab-beda-cb9520635bba", "c2a3ea98-7cbf-4ad1-959a-06864eb76073", "bb3eeef8-7446-4c3c-9591-39e4b51f3e1f", "a7a8b652-7762-4129-ad82-c77150b5cc55", "10ed4bd5-4d61-47c2-ab93-56c400d5f8de"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getcontractstate"}}, "906c0d065612e59614ea7593639d979d529d674d": {"doc_ids": ["29d15c67-2e2b-4f79-9056-1a1ab8fd1d91", "a4bd608a-9594-4a13-b34b-0c1f68911341", "45110e81-f434-47f0-8332-93bce319f229", "b6a8d84a-340f-4a3a-be5b-b8dcd2ff784a", "2b638439-6ef4-43bd-baf9-4b9fa377c290", "3c12d068-c269-4f55-8111-74fe50a4d334", "c442b12f-a8ce-4edc-a9a5-ef7f65492baa", "0687a625-8cb9-4c13-8b20-6a1be2dc396e", "6f5cba5e-9e9e-400c-9ec2-e5ba076cf4ac", "bd6b3dc8-928a-44de-b663-be4f7a2a3f77", "32fc5cf8-dee1-4dd4-a0ed-365498b84361", "199a6612-03df-4d21-ba85-2ee1f9d927b9", "2994cc03-b96d-41f6-9f2a-fb579b5bbc32", "7e155318-daa8-468d-b8a3-e104c2d8c350", "cee9c266-6899-4345-b818-d84e4f32a716", "a5e21047-a40f-4547-b8c5-448f9f5e7cb7", "5afb6fb0-87ab-4209-b6a2-8d02f6bcb1c5", "4475ccfb-e9a4-4987-9c47-7961c896379c", "f0151e78-cba1-4bed-9522-a751b8e22919", "c7563bfd-c41d-4cf4-a4d4-13657cbffba3", "169d38f8-7574-4918-881c-9e9a70b117ee", "03164d30-f69c-42bc-a142-0be141e86f67", "df2119d7-4c81-4368-b804-307b264a0d3f", "09aa24ff-b96a-4b0e-ba6f-2fd3328b6b90", "c989885d-1ab9-4405-be4f-15dd546f7f97", "a8e39ba5-de39-4822-8bd0-12a75208b685", "4e09adab-8394-433a-bc5c-cddea62f441f", "39e0a9c0-9bc5-45cb-96e7-83b613c36e03", "afba4ac7-c1d6-49f5-a8cc-830d15bf2eaa", "58d171d1-37b3-4994-b48b-c267b1b1615a", "f4020f5f-61f1-44ed-8d0a-1427f9d8cc06", "dadf4026-ce43-4ec2-bd58-987afd5df530", "4f6ae139-1429-4750-ad00-4f6df2d847f9", "a1d4753c-295a-45c9-8cf3-e46267c4024f", "949c3d60-1a3c-4460-a19c-9a9ed46ee0e7", "c4c91077-2ba2-4b61-8e4c-a64c3488fc38", "66ccc964-1328-4c6d-aadb-fd1fb703b4a7", "28054d84-28eb-43bb-bdd0-033762310173", "1e152da7-61a9-4f62-9ef0-38a51bfe6187", "9a3e4033-b9ab-46f1-b33c-420a35b82b0d", "3adbcd0f-585f-4468-a00b-28c1aac3ea8e", "09433335-abfc-482a-9967-a8a3b80ec947", "1bc4c015-d6bc-40bf-858c-c7de018ab727", "bd41f431-ec1c-46bd-b0be-6f973e0f7450", "fd08d9b2-74db-4b33-9a6e-2728796dba2a"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnativecontracts"}}, "a17f1453b5146aaa52a3011cd1dcd243056d7293": {"doc_ids": ["661006df-f4e8-4419-96a7-75d617dbd256", "7bba6f49-4501-43be-94fd-374c2845f0bb"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11balances"}}, "e609316cf7edc9da8c32bb3f805b24d0da13870d": {"doc_ids": ["a7bbcf78-1d09-442e-8dbc-dd9f9b9d09b9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11properties"}}, "cbf7d105f46520d943a3feffb2e7949c68f35604": {"doc_ids": ["09982871-ca94-4324-b88a-2170e75e1a6e", "bd652133-adb7-4d2a-b0d2-f22a5166af8b", "37ef1c1d-32e2-4e9d-936a-7edd046f6b7a", "da55803c-854f-4300-88fa-08a4d160c408"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep11transfers"}}, "21b24bebedfaa6a9248b003c87d2371566a009d8": {"doc_ids": ["9ced92ca-7170-4e0f-beb9-76a5f40aeb79"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep17balances"}}, "16e1dc49bd445b7b9522f5832bb480cff2083cb0": {"doc_ids": ["801e9f66-027b-4b83-af29-4e14e0af3c0b", "472f813c-5a9f-42fe-a17e-bd218fa3a621"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnep17transfers"}}, "194caadd1f3c83945174fb51d1e939937ef571ef": {"doc_ids": ["a20dc868-434e-491d-887f-198147fe9228"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnewaddress"}}, "5df31676dc6cc02789c0d35d4460c870a53bac60": {"doc_ids": ["36f18ee7-0150-439b-8a09-d0cd396e17e6"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getnextblockvalidators"}}, "9456abbb7f0a1a9ef72d5ad6ae2f9114d195428b": {"doc_ids": ["9c3f2f13-352f-4e8f-8b53-af280f8534d7"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getpeers"}}, "6a15e7acd980d7e2e41f9f55bef9b86ac6ec4bf6": {"doc_ids": ["ae0e8dba-6f73-4780-80af-8bfb9ddbbb7a", "65c6415b-200c-495d-b718-6b96290af076"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getproof"}}, "f8fa5aac2898710a42c2ba1e4ad97647b86cc2e6": {"doc_ids": ["3dae3807-46c1-4012-b8b7-9b7267147970"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getrawmempool"}}, "d4b9bdcab0205700b3e13c7c5a89bf6d29c1db5f": {"doc_ids": ["f41d5b98-9ca1-42cc-8b44-cbdfc9659499", "b0ae89c0-815c-47dd-ad57-2ab38604c927"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getrawtransaction"}}, "78aea7bd04aada295519f293805a5f1a7cfb24cd": {"doc_ids": ["ae3b19f6-7a58-434b-a3fc-78dc6a44bcd5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstate"}}, "be60035a8ad5502014d596b5fba991bcfed980af": {"doc_ids": ["a093793f-0d48-4489-9572-0847301a3b08"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstateheight"}}, "90d3ee592d05a42ee198c5d7fcbe9e3f653a54cd": {"doc_ids": ["1541829b-231c-46bd-9703-6d58d6e23506"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstateroot"}}, "6944c54df0fd303de2b041838750d94022e4f40c": {"doc_ids": ["27dc4594-2105-42c2-8259-45107168ff2e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getstorage"}}, "abbd2301f4a4eff4c06c22d8b994ebfbad14ff97": {"doc_ids": ["6d84f374-9aab-4257-8897-6a2daabf14ed"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/gettransactionheight"}}, "06321c5ef917b14bc9765d17208dd30aad48e586": {"doc_ids": ["84b149b2-d65f-4d58-a5c3-be47bf2f93da"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getunclaimedgas"}}, "5a11e067e37e01a6a576b7653454f77fa9c12e5a": {"doc_ids": ["44d828f8-6298-45a2-9cf6-8a0d44ae611e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getversion"}}, "93bce555b33f8f008402435c992845a7611a8256": {"doc_ids": ["41930e30-6ee2-46a9-9113-4e32dec7cb57"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getwalletbalance"}}, "d9b84c7ada9b04106a32672b652c50988ece4ca5": {"doc_ids": ["711de97a-2f7b-43c0-857c-57b8399472d5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/getwalletunclaimedgas"}}, "831bc07903233010bd619bdb78b75752acc09573": {"doc_ids": ["9f308b47-e562-40f8-9ca9-2c7dbd160fe0"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/importprivkey"}}, "16ecbcebc29554b382940eecefec0070f7beaa61": {"doc_ids": ["9bde4e1a-e0af-4019-939e-e2a0aef1d0ea", "6a46278c-0cff-4075-85f9-b148c92f26ed"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokecontractverify"}}, "8c883cd9fcc36b07991a48668f124dda16851f79": {"doc_ids": ["8af78899-bebf-48fe-8306-83624571d540", "fd0539a3-92d6-4260-8d2d-33887c5010ee", "7f5510b3-b75f-426c-bb02-30d74c4af62b", "6fdfbfee-8020-4785-a551-4d3beb99c4dc", "3ae10c63-b14c-4e68-8015-c3c13fa55d10"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokefunction"}}, "3859954c034d6ff7dbd977eb21ef30785a5f19d2": {"doc_ids": ["e0917b9c-095c-47ed-bd8d-1f3fb16c66ba"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/invokescript"}}, "2583909a61e0f473062109d8ec1483f66a1ccb23": {"doc_ids": ["9c88120a-6db3-4f2c-a287-118e00c827c2"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/listaddress"}}, "f42afc23d2b36ebae86d5c3a14d81f0ef5d31456": {"doc_ids": ["541e283f-1af2-43aa-b8fa-9e273e6067ee"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/listplugins"}}, "97ee725e0debda757779756152d4a8a0c059dd47": {"doc_ids": ["63468b7c-2ea8-4505-bc39-5d8e5c5c3124"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/openwallet"}}, "142a42c84cbadfa2bcc5d18e8e6f12ccc55c4474": {"doc_ids": ["c3d18f3b-d422-47fe-8afb-df4a849549bb", "2af075bf-eba3-40f2-82a0-0d0f10860b55"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendfrom"}}, "7db8808a79a36ce53ebbc4b02c15c86cbd83dbec": {"doc_ids": ["866e3e18-c25f-4243-a6cb-e098f7fd75f2", "2db175be-5d4b-423f-8d6d-3069bfcfe712", "a2f2cb5d-c547-4d74-b203-b02e8d58343e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendmany"}}, "7955bd5fa17ace73f409ae5d2dd29b84a9922b91": {"doc_ids": ["f7fa2a45-5e64-45f8-8b4b-f21d215afe5d", "19de1cce-767c-40ee-98f0-cdb9272784a0"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendrawtransaction"}}, "f910768b57386ba115b090741c14d9d4d6113edc": {"doc_ids": ["92e925ff-88a1-424c-ad92-49ae9a9bc841", "2cebea3c-d515-432a-b8e5-fc9173ab5bba"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/sendtoaddress"}}, "f6a94c6c27ce3db44a57df262dad209133423d93": {"doc_ids": ["35aac647-092f-4aad-a8e7-d83c498b0b82", "6b1f0a47-4675-4840-a52a-f2b70e1dd5f4"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/submitblock"}}, "e3fde9feec47db53890d8f468140c42ff14b7a0d": {"doc_ids": ["1f828d58-6b4d-4ba9-9fdc-12cea3fcd962"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/validateaddress"}}, "81d30f3dc5c02325f5665c80adc8717b3d817d19": {"doc_ids": ["02061a93-b6e3-4104-aea8-497c2f01bcba"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/rpc/latest-version/api/verifyproof"}}, "10e706d196aba6a27e863d2559c2eb93b4743fa2": {"doc_ids": ["378f4fce-8e0b-4b6c-ad81-87267cbe7962"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement"}}, "b11b8e8dab5971fc416380fe2fce1fb07011550f": {"doc_ids": ["c68139a9-ce9b-43d7-a46b-65c5e1665e72"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/Deploy"}}, "b50ea8dfedac163bc0b144e72270592774d32792": {"doc_ids": ["e93a0e63-143f-4716-aa12-b7d97e6e0eed"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/Destroy"}}, "e6b00f1398420049f0ffbed6b1bc37921fb7430d": {"doc_ids": ["cc577d4b-9fde-48c0-9b20-bf1601ad001a"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/GetContract"}}, "32af8818a33725d19f1044d809a1259b00204688": {"doc_ids": ["e5d4b3e0-d1bb-4aa5-94a4-19f82175ea0b"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/ContractManagement/Update"}}, "548554f4c74cc0abdeebd3a8ed5d68a3105582a0": {"doc_ids": ["e15b2b54-5f6a-40f3-9979-ef86165612a4"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/CryptoLib"}}, "ac15883b9d74307c3c252704f2f52ca879cd9e9f": {"doc_ids": ["b6cf473a-7e0f-42ba-b0f9-09c6f7e48877"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas"}}, "088f3e688a51e9b355c5161128258e0296446984": {"doc_ids": ["546b3abe-f947-43f0-953c-780027cb4ed3"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas/BalanceOf"}}, "dbca915c696c12959df834a43b1fab18a0502078": {"doc_ids": ["35b75cc3-6e3f-4d38-a0b9-23a590601c10"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas/TotalSupply"}}, "a351d02d11ae539555b4c40dfa309a71d5a97f52": {"doc_ids": ["0cfa69c4-10c6-466b-911d-1d931a523f92"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Gas/Transfer"}}, "c5e2918f44d47ccd432cb23999c141533db92b33": {"doc_ids": ["9f7c6e3e-46ab-476d-bc0c-4482172212d8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger"}}, "a2c2801854569a413107edf217bc348344bc289e": {"doc_ids": ["6948c30a-6721-49be-a667-86357c0c5d3c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetBlock"}}, "b5d5df8b9e2648dde1395ff061ea22d93482c9cf": {"doc_ids": ["2b26a606-71c3-4ceb-ac88-ad49b6e808ee"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetTransaction"}}, "8d109e7435bd9c2af69580ec1e320a6f037a4da5": {"doc_ids": ["7450f239-ef7e-477e-b6aa-4d8907a898e0"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetTransactionFromBlock"}}, "dcb23df74bc695168344be2595f63d212cb0b219": {"doc_ids": ["734bb052-426c-4c08-a153-daa447455aa2"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Ledger/GetTransactionHeight"}}, "dfaabcafc3863cf7bd3be870fb8101ff56a019ad": {"doc_ids": ["6ebf67da-5047-482a-bd9a-3f6317bb291a"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/NamedCurve"}}, "6719ffcbf4cccbeb6ca14ea0b60a46c1f43341d8": {"doc_ids": ["02c30c38-247e-4926-a887-1cca5a7d5b71", "41ea6e5f-0cc9-4c19-b255-c985b47001f4"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo"}}, "c6e7ec7117c9c8f9dceddaee458ae87c9a1e96a4": {"doc_ids": ["d23aa091-4d97-4299-acdc-97c59400efb9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/BalanceOf"}}, "5f657085496c41f12ead786603ff03022ae4e539": {"doc_ids": ["165adc68-a840-407a-99f3-0c7cac74093e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetCandidates"}}, "878c150d871605948a70fea7252d5dcc617b995b": {"doc_ids": ["41e3ec8e-6492-45f2-9fbc-818f11c034da"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetCommittee"}}, "259b9d96b728a11e2ed46378767a965d7996546e": {"doc_ids": ["51921015-755f-4629-bfdc-75076c64b667"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetGasPerBlock"}}, "7e2a282ca52984f8355c70697360d6cc9ef7d162": {"doc_ids": ["d2b2a4a6-8961-4c39-91db-f707778284e8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/GetNextBlockValidators"}}, "152172958d6f1e60e419248bb8eef3f60a587fd7": {"doc_ids": ["a36eaf4d-1d8e-46c7-8874-8f9f53a17725"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/RegisterCandidate"}}, "d7b70369ab03c79bc7fb0afcb4f6f403f82b526f": {"doc_ids": ["bbee7429-4697-4b33-ad25-59942399cf89"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/TotalSupply"}}, "d30708ffe5c6eddca083f337eb3d05e58fc22039": {"doc_ids": ["8d5a9f76-ac47-4325-aa1b-c1a626e659d5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/Transfer"}}, "f65930f8680be759f50756c2e2614a0bd39167ed": {"doc_ids": ["92ab7af3-2477-4762-a270-86097a165063"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/UnRegisterCandidate"}}, "9aaae281546a10622ee883113925672043518d26": {"doc_ids": ["28ed9f60-d461-40f9-ac1c-5717a8733456"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/UnclaimedGas"}}, "def909cc3bed92e801a81bc4b047c799d9a9c6c8": {"doc_ids": ["78934a34-7eb8-4a34-804b-599bb3a5c2b1"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Neo/Vote"}}, "9bcb07591e2d7e6e3ab7dca25c7b7c75e498224b": {"doc_ids": ["ab5507b2-93f6-4900-8b46-6a1aafe92e15"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Oracle"}}, "a4af6789c452809a211a355c8920394c85ca4eaa": {"doc_ids": ["e7ce80e8-8430-423a-b114-8fedc24dce50"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Oracle/Request"}}, "825a8a53d1378bbfa22e30c7bb587a9a50f5ea25": {"doc_ids": ["ec212a25-303a-4e27-93cc-7f76d6fb20e0"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/OracleResponseCode"}}, "d97bfc8b556a70d16c0a619b9c2063901759c8b4": {"doc_ids": ["4ea83fb5-2b10-4590-a7b7-499f7891a1c7"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy"}}, "3113619d53c0e32161cde99efe9fe68be5086c0d": {"doc_ids": ["ad0c30e5-1bc5-4586-879c-cb8a38a1eda1"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/GetExecFeeFactor"}}, "ee93bed75d8cba43c85760a35cbe84d1be965ef6": {"doc_ids": ["78be0ff3-7756-4b92-9ec8-3dd6b0b44c14"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/GetFeePerByte"}}, "76436d5fa0957c3b19c068f6b378fa1640954978": {"doc_ids": ["21153cf6-d18f-4e25-a71b-fda7696eeb5c"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/GetStoragePrice"}}, "03b195dfaaaa351daa5bd4072becc21940e3f20e": {"doc_ids": ["29556d97-6685-4638-81da-5096ce992850"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Policy/IsBlocked"}}, "f68c71a87dd2476d59306fdeedbdbe3211463e98": {"doc_ids": ["2403af73-8164-4abb-8ae0-038a156e9f8d"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/Role"}}, "5c650e09670d711bf065f5d61ac95b1cf479abce": {"doc_ids": ["08dd3d90-2ace-404d-afbd-3b981ad30424"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/RoleManagement"}}, "1f783a97437abad3e1865c304bce968ce21a3a27": {"doc_ids": ["7b2b257e-0d54-4ff7-94f3-9025e78e04e2"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/RoleManagement/GetDesignatedByRole"}}, "bafdf81396e6800a1302af53887731bc995c2745": {"doc_ids": ["3ce6ba6a-a4c3-4899-9fe7-ac5408f13d32"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/native/StdLib"}}, "ee512c23d221cd182be5114fb7cba4fe4415dce5": {"doc_ids": ["551389da-7e80-46ad-ae30-a1fd13586348"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Block"}}, "21b41b17950c0361bbbee33884aa7e998f18e53e": {"doc_ids": ["f77e2868-b5be-4943-940e-5be6f535960f"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/CallFlags"}}, "2ad5480669ca972620ceaad932ac4607d72e6599": {"doc_ids": ["f14ef572-886d-4138-9d5f-0dc420d21d3d"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract"}}, "0d29168a2de4819bbaad03a2b23ded23147989d0": {"doc_ids": ["47c78d89-ec7a-4148-adc5-3e12c4b044a8"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/Call"}}, "9081096d52381d3f61509ea6709a26d9ea0cea36": {"doc_ids": ["6621c65e-87ed-4fed-b972-bb572df3a047"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/CallEx"}}, "4e2e967d91c4dd5c423613d665148bf9c780bc5c": {"doc_ids": ["290d6f7e-d500-43d4-a1db-ccea40d4a2ef"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/CreateStandardAccount"}}, "168e16f6e6973fddd187cf662187e9a3b0093e49": {"doc_ids": ["38361275-8a08-4524-b61a-a3ec9164dbd6"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/GetCallFlags"}}, "e7ed503836e8d0b29c31252d1fe432a2db9cf1ff": {"doc_ids": ["c700f292-d7de-47d4-9d4d-0ff9a51bfa5e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/IsPayable"}}, "b02f75b357b8786bd2d862d7f65445f9ad69df45": {"doc_ids": ["b43956fd-cdd7-4b9f-a792-95b7b14d74bd"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Contract/StorageContext"}}, "0ee52b8714418c1bf862eaa9b4052f32310afb7e": {"doc_ids": ["3187b6cb-0fab-4f33-a1e9-d636512bf500"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Crypto"}}, "d61f89ac91545164dc492949c1840add1afa7b96": {"doc_ids": ["213f7b74-82f6-4f92-937c-3d045093c294"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/FindOptions"}}, "37d9940ca76fbb7cede5edfcb8a66ce64950b758": {"doc_ids": ["c422fdd2-34d5-457c-ad06-d55c1f340649"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator"}}, "56c27acc114a06eb3abc76afbe360c1c3470a6ce": {"doc_ids": ["72033f7d-70a3-48cd-bfc1-ad47e6a7bf01"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator/Key"}}, "80ff403cc5dc81e916b809c885286a3f17f6acdb": {"doc_ids": ["31b8b8e1-5d3b-4de3-824d-e09efd0d4fa2"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator/Next"}}, "e9be7726e7f92cce6acef7626f05ddd8d9d4cf31": {"doc_ids": ["deb3d0c7-dc02-49fe-b309-d5b4e05ff2f5"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Iterator/Value"}}, "5f1f503820e43bea567586e7421463ed55422c77": {"doc_ids": ["fac34947-965a-4be9-ba27-6f0d65a7cb08"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Notification"}}, "b3a3fbd2f54453516e136c60d831ae849938fb96": {"doc_ids": ["7147a4ce-aded-4bb7-b8fc-3be8edcd9bb9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime"}}, "08ee64e9ef002eb28decec239b970e4938ca469b": {"doc_ids": ["1d6d9325-8c63-440a-827b-5026d997a927"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/CheckWitness"}}, "d45e516eb10d6ecd284ebbc896edf31cdb4a4268": {"doc_ids": ["1c56b542-24bd-40d8-981a-fb6d5bda8663"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/GetNotifications"}}, "1048ad897dcbf98551e22bcb9a4a761e3d57651f": {"doc_ids": ["a4c38f60-e810-425a-b281-1b1ab0e35470"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/Log"}}, "01a89aa6938a68a51598be7ea81b2c7545faf19e": {"doc_ids": ["1452ff31-f326-40bd-a54d-154378803b52"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/Time"}}, "d6579b2cdc1d1ad698db1a07e916e48504d69078": {"doc_ids": ["e33b6fba-95e8-4d97-9d6b-5d1bc6e2514a"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Runtime/Trigger"}}, "3e1d2c9caa1d4af4a272c48abc40347ae20a8703": {"doc_ids": ["8f5fba89-95c4-4f5d-9b11-cd4aff364d75"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage"}}, "edad6fc25aff3d18e7619291f42055b175824e7f": {"doc_ids": ["0b44b838-3280-4d90-821a-ca327cee7232"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/CurrentContext"}}, "de0d542cab2219199c27f09fc7e3c7f44368755c": {"doc_ids": ["a19dd93b-4e05-4f89-bcd1-3bbf3d1500f9"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Delete"}}, "5b300188118b6802fa6c7f2c1cd3f861474312ff": {"doc_ids": ["d921a477-8860-4787-b3ac-cc62d4503c92"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Find"}}, "6238c036127bbb88cf9c09e5b282b97abf974746": {"doc_ids": ["0cb38c10-4db8-44c3-b239-e60eaac914a7"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Get"}}, "5852afd3268d233d6fba1ecff7cd9513eddd5853": {"doc_ids": ["91ebc400-581e-4319-ae0c-99fe8c512740"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Storage/Put"}}, "286259c63f034ccf6031f311bc7f3014b22c3840": {"doc_ids": ["dc2068a4-2c89-493e-aeb2-0bb8ba5b1c4e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/StorageContext"}}, "6f46181364d97d859193217461da55f9f5c0b174": {"doc_ids": ["18e20fa3-d624-46aa-bac6-1bedd8de271e"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/StorageMap"}}, "efa594ae9a124dd5050a497b72808764bde65cc9": {"doc_ids": ["0b2d33d2-f2d5-41c6-935b-f4548bc4861d"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/Transaction"}}, "4ac114a915f5e132b377970cb603ef2074312820": {"doc_ids": ["df6b74ea-d577-4660-b9bd-132ba3883102"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/framework/services/TriggerType"}}, "d4e662dd3dd43a42e807c3b2be08c1ab5f69a316": {"doc_ids": ["97713d87-dbdf-47ba-bbce-33cb51f0719b", "77e5cbef-5d72-4a9c-9013-2177687315fe"], "extra_info": {"file_path": "https://developers.neo.org/docs/n3/reference/scapi/interop"}}, "38e58d6137d2a6865c727a9a5887f271f47c7c67": {"doc_ids": ["c8c169b2-0df2-45ad-9789-c677ee48c9a5", "0e9b60a6-ba6a-4dc5-8af6-9c8a3de85193", "0f5561d6-7b5c-4261-b81d-9397bf273dfd", "8310ad69-d0af-410d-b52d-bce368432bd5", "fe214a7c-6bc2-48d7-88cc-9344f001cc68", "27f5942d-30dd-4b98-bfb1-b0749aac60f7", "b388076b-827e-4af4-ac91-0471cb750afd", "740e5319-2be6-4a91-8d86-9754fa331850", "8d89fa71-0710-4973-9626-fbe7978b359d", "00dced56-7b5c-45ac-8333-ef28fe44503c"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/04/real-world-tokens"}}, "a030f0608eafd7249c57c45a3da2385110fe0cb6": {"doc_ids": ["deb19d6d-b41d-4255-b028-ed87b42d7fb1", "37a54ca3-2bc8-4975-83f8-b2ea130debdf", "d3ff9c9a-4dad-47b5-a8ae-b512a549b7eb", "6ccd1dc6-846a-46df-b0a3-6b52c957c543", "2784ea10-5d21-4083-bea2-0a9ab4df910b", "ce38b5be-72e8-4544-affa-4e67588e0403", "85c34abd-06ec-4f42-b708-fdb38fa6408e", "541631ac-7870-418a-b78d-1c9bac407622", "45dc247d-58e2-433f-a268-2cf6ff529c0c", "039e73e4-3341-48f3-bc80-2476ed73a560", "e25df95d-dfa0-41e1-b333-d064812d707d", "786c2e3f-682d-4874-83f2-084776e1f73e", "47f32aad-6275-43c1-9286-163f5a5e464d", "6fec2947-5116-4b49-8889-4c5f504d7bdd", "d20a4846-3572-4bde-82ec-4a6f374dcdb9", "8a2ef4f0-03d0-4f62-94a7-06a310555226", "e9f2113f-d983-479c-88fd-4d86c5ffb4c4", "5b088c3b-3e41-4906-a120-6d4b80d09bef", "7030325d-0007-47f6-982e-2714ae0d7bea", "ae0377f0-a4a7-4cd6-96ac-9c975f9d8ea9", "fd1ec7a2-a022-4333-ae4c-b2cad20fad1f", "3c195813-9629-4e88-9f70-a2f03faaf074", "44b0946c-f990-4418-b441-61975add9ec5", "cf72d3f6-55f2-4b27-8700-a1678521917d", "54a6fcf0-0c2c-4b8d-95cf-a64373d9ce11", "9a360feb-e205-4434-8884-0f0479882ecd", "baccc5d8-6b7b-49e0-88b1-3d377bc6d7a5", "3af3c67c-df19-4b99-9926-9692a535cf01", "78d1ae9e-63a8-480c-9aa1-161b74b3d453"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/18/neo-go-workshop"}}, "8debbfbe0ac533335ae372b7070eddbfe91b2ca4": {"doc_ids": ["687d410f-a55f-4e99-bb34-cacef86baaf7", "2991ab55-e6c4-40ba-b637-1e90c9dd5b40", "edd86f8c-ece7-4efc-9ff7-6843d66af2b0", "b591c0b4-49de-4916-8116-633116af551e", "318bd023-fb8d-43cf-ba67-e27eff2d0804", "23582841-916e-449c-b7f0-f0234ee11a83", "d787c8ec-587f-4e81-826d-5658eb90c86d", "345a05da-793c-4553-b8d7-52d172f3d5c4"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/05/27/simple-domain-registrar"}}, "5251331a818ff444c11dba2c16f2d532d59175cc": {"doc_ids": ["91e34b6e-534b-4d48-a0ee-e9426f0b6ecb", "7950bfca-d5d1-4e83-8594-f4cc5b54ca85", "4af14a26-6dd8-49a4-9221-babf5a1dd107", "647a290c-ad5d-4356-8629-df0e86c19371"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/06/26/dapp-wallet-integration-with-walletconnect"}}, "8d81e4c37bd0065fa700b516f7a1475991711404": {"doc_ids": ["47315152-9213-420e-944f-0717a701680c", "b016d2a4-304f-4f09-9dc7-b93e2f4f1ca0", "39b342f3-5a80-4ec2-927b-da33779b783f", "ff8f22d4-fb9c-4542-8ccd-04ed55ba1a24", "3fd8b9f5-d471-4fbc-9b0b-2a1f21951b51", "cd4a3a57-c0cb-444e-b5db-cd1195251149", "4703a3d3-c7a4-424d-9b03-df1b3a13b91b", "cb8c0078-5409-4eb3-a17e-b0c6e22b77af", "e4814e06-4d5c-4989-bc9d-727eaa19619e", "19d69417-b741-47a8-8aff-54289f240dbe", "3b733aa5-3280-40d9-89db-7f35299d9cf8", "547a81b4-1b42-427b-bc9e-d624a1a447a5", "12081b5d-0024-44b9-b086-96a2f0076974", "b84aa510-59eb-4b0d-acba-6981e5e3c90c", "ef1fa717-d73a-4835-a2d4-1a8d16d3befb", "9b7affd3-44f2-43c6-9df0-9d4a95e09f3b", "b06afb54-aef4-4b24-ac9a-e5446eff1b84"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2021/12/07/demo-of-n3-core-components"}}, "73e1c22b9c4006822d09fb92e07cd21f7587e551": {"doc_ids": ["41cc0ab9-0e9b-40de-ad88-b6e3e3d6132b"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/06/18/transfer-nft-with-props-sdk"}}, "6cc61083cf586833e12a5035116ba2bb9fa1d901": {"doc_ids": ["dc8d2404-56d2-48ad-8697-b238ce9f2846"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/17/transfer-neo-or-gas-with-neon-js"}}, "e519087b56ec56ee156342768e56317e11499bac": {"doc_ids": ["3c4e6346-04f7-4185-a079-d58f62172899"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/25/neons-as-a-public-key-server"}}, "d010f143013b96e788b3a27751a9869dd863b83c": {"doc_ids": ["2af5e81d-4cf0-4edd-9b90-635408d6e9f5", "278c79c9-e59c-4e08-b6a2-694c3efe1c8a"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2022/10/30/neonjs-cheatsheet"}}, "87f8d9be9c713187cf9ddfc3b99e42e4f93babc2": {"doc_ids": ["e6b78bd2-77f0-49cf-8dd7-26a3e9f2642b", "7b768f0f-f7c6-4d77-9c2f-defa531b7643", "5359db3b-e972-4ac1-a676-fdb066956a7f", "cec4096e-c53b-49f9-a307-519a60122f02", "0d72f687-0afd-4425-8643-6d6e4d3957fc", "ee9e8276-b4d6-495e-8600-fde59ec94b3f"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/07/05/neo3-boa-writing-a-fungible-token-contract-using-python"}}, "10dc86f143df7511f6eb56e39b61c4dcf782c1ba": {"doc_ids": ["3114a604-e25e-4560-ac10-2e906c78a132", "b79841a8-2f61-48b8-b656-36cb693ea582", "d79e85ef-f5b1-4fca-8184-fcae7f637134", "f4c0a9ab-cfbf-4820-9b65-862a6acbf8ff", "df8cd480-4fb3-4886-814f-5b27cfc8eb27", "e2a3ec8d-62b4-4bed-b9bf-de1e2cc3fc54", "249028d3-e1bd-449c-956d-2c30e2eb677c", "d936f2dc-223a-4b4f-9914-4ae54f1ae9f5", "7225bae9-9fcb-4a86-bed3-46303b77f562", "d1ddb34a-3767-481c-89b8-b33bff55fa1d", "103856cc-001e-4ecc-a6c9-594573e4756f", "de096021-b0f6-46fc-86cc-ca96cf5b6937"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep11"}}, "a99163cb7d7c23ba4a76851624e5b6220caf4065": {"doc_ids": ["33963789-de9e-4d71-b637-dd527d3ae036", "9801b967-37d3-46d6-b9b2-881b6c5c5cc9", "b6d6d1b9-a16d-4c3d-af17-9d1f6c028127", "7017b803-999e-4d05-b031-adc95a80a3bb", "97257d0b-e6ec-4def-aa88-cb9d8525c49b", "4532d07b-659e-46a7-ac16-550a5082bbce", "e9f7c021-cb86-46c5-8664-a241a759434b"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-nep17"}}, "8f329b7e75e735e924b9459a0a29ec6d3cae5477": {"doc_ids": ["cb38ad7b-cafe-48a7-8ba7-a3832b01b155", "68dd145b-273e-4e77-8720-de6b40c7c18a", "f3d33ee8-6592-4b2c-9d6f-473f63f0fb67", "c2e7dc7d-d57f-462a-85db-5cc572aff979", "7e95c262-765e-4a3f-a9e5-cfb1d7744ce8"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-sdk-quickstart"}}, "0c749a25bfccf75b7a8c8e27568c178616d5368d": {"doc_ids": ["14c64886-5ddc-42b8-8731-7a87df0b564a", "4492926b-14af-4fcf-bec0-935a0425e49f", "8780cde8-536a-4441-ac8d-94581d374e0f"], "extra_info": {"file_path": "https://developers.neo.org/tutorials/2023/10/17/neow3j-smart-contract-quickstart"}}, "779b8fac5c76a4b7b93524ea3beff63ce22c9bc2": {"doc_ids": ["faee21f2-c965-407f-8f3f-7310fbe55625", "941c8556-bd98-49a1-8555-b11804be5926", "88e62ef5-60d5-4023-b020-684e8e570570", "deae2be9-caa3-4407-b483-3417e6cc9f3a"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-1.mediawiki"}}, "663d5b6cf13be0f1275a907bc31741a313d14b31": {"doc_ids": ["a52760c6-6781-4dfa-8629-6591be4684b0", "05ed184a-0e88-4b47-8900-0f87c3c40aed", "931f7218-1f13-4c02-afaf-4cd43cf187cc", "92e1c1ef-ce6f-4679-b62d-0a3849c63255", "d47ad24f-95f9-4d54-8c78-08e91c81f75e"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-11.mediawiki"}}, "fce99ff8c5884f7ba5a9949812e08489c86b7ebd": {"doc_ids": ["660f4415-0c25-46e6-8ce5-2edd5a0f966a", "7029f4d7-f830-47ab-b852-9f070e98b498"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-14.mediawiki"}}, "6775f3f9fb92dea7c04deb0dbb4619aa6e32feda": {"doc_ids": ["d4b67375-7206-44bf-8d0f-e43586765dc3", "52f55661-79b8-4e4b-bcac-28a19c1e9a4a"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-15.mediawiki"}}, "2e294e91a705ff61d7ce858a41915e703db7e590": {"doc_ids": ["2486bb1f-1bd4-4127-9ab2-943eb186bfec", "98fa73fe-b660-494d-b24b-728eec0b4188"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-16.mediawiki"}}, "55bce386ab89a40105f1481584f10c5ebb518f4a": {"doc_ids": ["bf7f6fa8-8368-4fb8-8eb7-4c8bd19b616a", "d9859f30-0cf0-47d7-8c41-651aecc9c756", "3ac5eeb8-c2bf-48bd-867e-a515d9fe6ed0"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-17.mediawiki"}}, "a4a4b904d8b191a23528d4997e7314f27a6250e5": {"doc_ids": ["7a97c8e1-7040-4496-b45b-d768d3cddc22", "4ef0c57c-b50e-4926-b4b2-f8f9d24aaf4a", "6a721008-1dfa-43ef-b56f-1b4dc3f2c67d", "9a057338-2b2d-444e-8f50-22d5060db43b"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-19.mediawiki"}}, "a95bc6eb9a61c6c4cab25ec6efc6f2e95f466283": {"doc_ids": ["b926fa77-0a2c-43b5-afaa-80627ca259f4", "673f5dd1-cc6a-4237-8171-0d578741161c", "c0f32e47-7c01-4f2a-a88c-2d358c5006b7"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-2.mediawiki"}}, "f5626351415decdb3cce95c2ba0dcf97f19b4f32": {"doc_ids": ["1aca1672-0346-4f28-8c51-f417cc45b60d", "56383fa6-93f1-4fd2-b93f-0161184846a6"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-6.mediawiki"}}, "3674070896941616c6fd91904b4e53ccfce9c125": {"doc_ids": ["771684a5-f29b-485f-8f07-7c223e70d4d0", "505a3b73-7a0a-4ca8-a585-b03a92f874f7", "4d182342-0d81-4274-bc54-f989dc0d617d"], "extra_info": {"file_path": "https://github.com/neo-project/proposals/blob/master/nep-9.mediawiki"}}, "10e9e232763fcb5426824ae4860c9167bea61eb5": {"doc_ids": ["830735fe-dd73-4944-aa17-5e0cf8057db2"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/faq.html"}}, "25c156963f302a95be89c45032739d900f982c86": {"doc_ids": ["6086d92e-9780-4e43-b2af-ba55a3551b44"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/getting-started.html"}}, "851734bf26775211863b85ce8750d79b886a6761": {"doc_ids": ["0ee094b6-a7a4-49eb-ab3f-0c26c6fef8e0"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/index.html"}}, "ec3dbeb909cbb6dc05065822894f0d0cb7e58add": {"doc_ids": ["f1b7fd4e-7d43-48de-b3c4-49c9290b6caa", "05fea5c4-03fd-4adf-ad47-2018ea8abf2d", "d46d3426-c30b-4399-83b3-b125dc039b08", "5b9d2018-677e-4db9-9757-33e5a9e681e3", "ffb0dbf5-33d3-4c60-becf-1a9196bee644"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/mamba/smart-contracts.html"}}, "0de19f48e6a004a29fcc717169500bd54129498f": {"doc_ids": ["27f5c409-c840-48b6-a3e7-d92b837a65fa"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/advanced"}}, "00803e0bbf0f3d47ea5568caf06860aa884da00a": {"doc_ids": ["f1a01968-83ad-4bff-8f1c-e094e119d39c", "99d256c2-d78b-4a2b-868a-d48e1748045a", "09aaee23-38e5-4f19-9c73-d9c5e07f039f"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/interacting_with_a_node"}}, "3285dcf116bfdad51771084e20604689a1e7e14b": {"doc_ids": ["f1990a63-c147-45e5-9ca0-79033c55b441"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/introduction"}}, "55e0c4ab7cbdba9353a629cc70b3983e3e9a803c": {"doc_ids": ["f8caaa84-d5b7-44a6-a6fe-bf92b2e51c08"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/preliminaries"}}, "0cf279b0bfa38515a26d4ea7bf86932cc82cc47a": {"doc_ids": ["209d1d6a-ca15-41bb-bdbe-4e0d0878a5e5", "765386d9-517c-49d5-9625-8461ed16eba8", "8b363639-1efe-4b91-9ac4-ca8ca3fa05cc", "50d46fc1-9f62-48e0-aba2-e9e78fa1f9f8"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/smart_contracts"}}, "b484ecd890487de4c8d570dfa3845603338f7c0a": {"doc_ids": ["736ad2e2-a9bc-4e9c-8d65-4e332485aedd", "d4e1a924-c013-4234-ad94-8c6f24780052", "e4c786af-9e53-4882-a0f1-9e65b3e3df5a"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/token_contracts"}}, "f423c118b9d7a97be63fc2f724b8941551359402": {"doc_ids": ["026575d1-d180-47b2-85c8-aaff69bef90b", "ff1c1813-4fe1-4c50-b0f1-f30fe2f6a111", "c8d252f5-7694-41d8-913e-dbb64eab09aa", "bd12d885-efe5-4ed9-b1f4-1a1104d1624a"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/transactions"}}, "04f3d2ec9980a7ace5dd0af852d1679836867364": {"doc_ids": ["d4b7dc91-8dd8-4bdc-bf58-7c759415e381", "abc75c84-d9ea-4da5-9522-9b45b555e4fb"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/dapp_development/wallets_and_accounts"}}, "e2ae7c4ad61d8c725f1cba48b0a697056bd08676": {"doc_ids": ["03a18030-2344-4c68-a4cb-2a6a558b11c0"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/faq"}}, "349d56d82877332aa239d46ed63ae96132a460f2": {"doc_ids": ["ec23dc1b-6039-42af-820d-eb503bd768ec"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/debugging"}}, "66a53c20d00acf0dceaaddbcf22285b6963dd513": {"doc_ids": ["4de8561e-4e67-47ec-a453-fd8013ae3477"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/deployment"}}, "47b4139617ec4584ef1ffc6dcb8e4a0c92588ba6": {"doc_ids": ["a26457d2-c153-42af-a57c-28c418eda62a", "966cbc1d-e11c-4f9f-8201-aa0be08f49ae", "035c7bec-3343-42b7-9b8c-13afcbd2b225", "3f8576d1-bbc9-4c8d-aba8-945af6d08907", "82abd7ff-888b-47c0-9d5f-686477bdd751", "19f5d0e9-8607-48e7-899c-7aff4f1d76c5", "9b635f6d-9215-483f-a506-571996729e12"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/devpack"}}, "160a3ee76bdf4783ebdf54434ea15874fcbcfca2": {"doc_ids": ["50e81b5b-7b14-4d8f-8448-2bd011c1c7c3", "54c9ba18-d2ac-4cb5-a134-2e9f72a0366f"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/introduction"}}, "b44d415a65f4ba2652c65ce92f311a43dc6459c0": {"doc_ids": ["7e1cafe7-543b-4305-ab37-e05b72cc1dd4", "2f6a07ed-69aa-4573-9ae7-4019289536cc", "039bc1c5-46eb-40b3-a314-d71d04759c0b", "e0bc4299-6336-4452-a548-358551e473e2", "cb837cc8-115e-4473-859c-21866668422a", "af36e4ac-dac6-4da7-8f10-aabac4c2555b"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/neowjava"}}, "36ad17f3a41b4149ccd6b58800a832bca7f71228": {"doc_ids": ["6cbbc852-9ef5-4c7c-b1a3-154780aefa59", "9df4d9c5-77bc-4dfd-9c4b-5301a23687b3", "f22f525e-ae1f-48a0-a5df-457ff160afec"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/setup_and_compilation"}}, "6028c92ec26a27eaa2ba7c360864163dd7ff9b90": {"doc_ids": ["82dbb0a2-ee22-46a3-b0a4-1687ca2e4e27", "edf9eca5-7111-41fd-bab5-edc46ee073bb", "82cc673c-7e46-4ee4-b15e-776b54483e51"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/smart_contract_development/testing"}}, "677697a5ea0bf6e42ad17f33bac5435e517a95b4": {"doc_ids": ["e9355459-9eb3-4dbb-b756-8b6694997927", "d400d31f-71dc-4b8d-9838-6cf264f1e3f6", "15624c73-1263-4fde-85f2-746806264ed1", "f476aeb5-f12c-49c1-9a9f-7009e7497b7d"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/meme_governance_dapp"}}, "136b8c33391a7e1b5f1958f576f1ef1bdecfdc92": {"doc_ids": ["6af8de91-446e-4d89-8591-5d9359437486"], "extra_info": {"file_path": "https://neow3j.io/#/neo-n3/tutorials_and_examples/various_examples"}}, "2816a1890f140db2081e94e33bfcc4eea7325f80": {"doc_ids": ["ad9a3213-ef8d-45ab-b6fe-88857077b103"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/const"}}, "5a10e563752a8c8b9b4a6f90bf77bc9d6b0a971e": {"doc_ids": ["a8eef57f-a4b5-494a-87de-e4bbfe565fa2"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/logging"}}, "ce1e34a0affd2b1631b4428e19cb0925667d22c7": {"doc_ids": ["73b87a8d-7daa-4098-a55d-567c5eaa3494", "771b564e-ecda-4358-a6e1-fee10b9c633b"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/rpc"}}, "f61a351f28df52fb9f42768fa9cd91312c80c452": {"doc_ids": ["2760afcf-4217-41fc-b945-71c19db9610c", "85610ac8-0d1d-4473-90c5-ef76e07f175c"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/sc"}}, "6878c60abde2dad6460e60de634eb256d40c8f18": {"doc_ids": ["b8f13b1f-20b1-40b0-8a9f-51d26d89047f"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/tx"}}, "ae3c2b16ecc23026d83047143b5b36712942ebd7": {"doc_ids": ["c8a214b7-62ae-428a-ba66-d4a3cdd71523"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/u"}}, "fa894ee595ea533511746c94c66c36fcb678ecb6": {"doc_ids": ["533875a2-0369-4957-a476-c32a3d60d759", "88cc45ca-fc2e-4308-b84c-3b9ff0ea0c5d", "dfde03af-44b1-4c4a-9f15-d36e8ced7edc"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/core/wallet"}}, "73a1295b60d8aba72eeb39f05e57338928567cca": {"doc_ids": ["f19991c5-f563-4e02-8911-6142d940867b"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/api/index"}}, "ccbe8ad6630f6e231992b45ff35309305f9ae208": {"doc_ids": ["b92b62da-d5d5-41a9-960d-238627a0752f"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/facade"}}, "9674b2ef810b4e3148e81c1fcb72a884b3156506": {"doc_ids": ["7a5d0124-e92c-4646-8756-87d80320b0a3", "6bb5b131-6807-4b5a-9b04-873495a29932"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/readingData"}}, "214de1548039954ceb3b61eab92b718ef015721a": {"doc_ids": ["1f10a18c-c2ec-4395-8a36-8f16def843fc", "fe0d58d4-ec44-48b9-bfe1-755bd3c1033e", "aef9a616-847e-4982-8c3b-d8c9f27bdf19", "5f959b35-f3c2-438f-b652-218935d8e6e7"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/guides/transfer"}}, "78e4a99b02ef627a8bf0fb68ffd9cf938d7ed6e9": {"doc_ids": ["db85481e-58ef-44e3-b7c4-f84a327d6ad8"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/installation"}}, "9cfa3947cc291d1e8e3fc531bd7b146d143d3c40": {"doc_ids": ["2ceb0276-f6e4-4bae-bb39-4495a5900669"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/overview"}}, "be160c9cc5ba7f37436e8a2b3df0fec060051879": {"doc_ids": ["71c5c3f8-3d47-445a-9a9b-1a4d9603e17b"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/neon-js/docs/structure"}}, "806afee7-97ad-4579-93e3-8c32e6dbac2b": {"doc_ids": ["dd6613d2-d102-4a8f-9006-7c31fc6f8965", "a7844479-bfc3-4078-9161-8051777affde"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/getting-started.html"}}, "01ab364d-31c8-4ad5-8ed5-5e1fd64607df": {"doc_ids": ["7d31ab70-55f1-4523-8ec2-19e616c04470", "6be4d1c5-0e6d-4792-885e-f2fa760af469", "7dac8eed-fcfa-4d81-ba1f-7c744ecb17af", "bb7814e6-6b61-4a03-aa47-7e171e8d40eb", "b8469c15-fba8-4920-acc0-15daf71b261a", "decf4224-ced9-4bfb-a210-363124f9d120", "0e4d8b11-2afc-4d35-886f-ddf393c8d891", "b2be3e16-de93-4923-9c13-374d2f66547a", "aaa9b34a-61d7-4bf3-a2b4-a42808693091", "2b3010f0-51b3-4c3b-bdf9-fc533c98c6b7", "7c0f9935-c11c-4d90-a19e-c5566823c75a", "df6ce6ff-1f28-4260-8c1f-61da2f96575c", "4beb65d5-0111-4380-9c7b-601c7c7ccb66", "f4c44992-20e3-49db-a0c7-33f894b432c2"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/tutorials.html"}}, "0f5864b0-74e4-4973-9cc8-d624bc4c2cd6": {"doc_ids": ["f459ddab-a159-40aa-82a8-c6e3095211ff"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/conceptual-overview.html"}}, "62bcbfca-ce89-44bb-8dc6-9843f78f6b92": {"doc_ids": ["c28f2d61-c3f0-42c0-9d8b-9b7279ef39af", "e00754e1-856a-4035-bf7a-82661ea3bdcf"], "extra_info": {"file_path": "https://dojo.coz.io/neo3/boa/code-reference.html"}}, "09c8e36cb3984714355d918bfe2a6b048a3f98e4": {"doc_ids": ["c8dbffbd-21f9-4fdf-9013-94c35d69b0bf", "b75c6264-2f48-48b3-ab19-58eb5ce96bb1", "fc64e56f-3ed2-4c65-a3ff-a69fc5fc0755", "2a822377-72a3-46be-9f90-e34cc01a434b", "7798a42d-7584-4140-b0ef-771c3a3a3a4a", "3e379f41-4057-4271-a08c-40310bc6b91e", "4cb9b30c-403a-4934-b03f-adf73b575d49", "804f8648-45ea-40be-9e0c-254bff0d916d", "5f71c598-6da2-4a1b-b509-fa351fe10047", "525750f2-e9f4-4a39-aca6-53eb8b29d0df", "fdd64f4c-e770-402e-98c3-65950c7ab9f7", "d68b0d55-ac69-4e09-86f1-6c69307f833f", "8b24c3a0-1204-4bb5-b34f-80198b6178b3", "e29eb6c3-bbb4-474e-9989-3843bece97b8"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/cli.md"}}, "18660e7038d4e091a60804024bd571a387761b86": {"doc_ids": ["ee19737a-936a-4ec1-85ff-9dd22ac71ee4", "89798c15-9d63-4035-ac79-13f08b651574", "e7139d51-d3b4-4e21-bb5b-3899e9121717", "7f476333-6a5f-4364-8b6d-45b51cc3ef4f", "951dc690-d4c8-45b9-8eb9-daba7b6f2dd5", "efd1531b-905a-4962-beb1-aea132729c5f", "6464c845-ee93-44ff-a6ce-61ebbbd5342d", "fc818107-ce22-4ff1-b922-d44336d7c575", "a62dd3ef-7862-45fc-a7a3-becc44032a19", "4725961d-843a-4e78-bade-bef241b86845", "f8993b57-ca80-4ed7-b5a1-72a22b057b5e", "22235839-a368-41a0-94a2-9d795c10f119", "29078ae5-ff89-48d5-9caa-ec6766c8132b", "dfc1f939-2723-4aae-a12a-947b3a5a45e4", "3a9454fd-1c0b-4b2f-9a34-18af715a19bf", "45ab2bda-3283-45d8-b9fc-c30deea75bd8", "03ce0c59-5887-4f0e-bd9d-3c4eb0a4734b", "94c7a3ff-59ed-4459-a732-0fe152c8296c", "e2ee2aba-9da8-49cf-adca-da05ca9ccd46", "0cee1c36-1282-456c-a5c5-99bc40438c9b", "cc2bdb5a-b872-420b-9cb4-c80576cb419a", "b7ab304f-580f-4036-84e9-de8298ab7270", "4acd812a-aeee-4369-b0d2-7392efa847b3"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/compiler.md"}}, "2a3e300bea3eb45247903995c576e4fd656ea90b": {"doc_ids": ["3fb1c51f-8a11-4f78-8ad5-12f0dbc73d75", "333c2f1b-fdca-40af-a374-050214c26ec8", "e38855d2-6105-4633-bced-a10ae256e6d0"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/consensus.md"}}, "cfd1819bb795d7d9fee9be05d17d86899712f257": {"doc_ids": ["e2884c53-d9ff-460a-9a62-50b8cadbc350"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/conventions.md"}}, "666e3c1cd09c05170c5dd70d0c110f2527406b7b": {"doc_ids": ["8980caf0-33c7-4535-90bf-95f38ee00230", "88fa6a6e-5fd9-47fd-b9e6-3046886ca17b", "fddd4962-1820-471e-9730-7ec572d9f0bd", "20524160-cdff-4389-b0de-4e265b2391ce", "7520b6a4-73fa-42d7-bacc-9ed5fb82d3e1", "f3ac19c6-4b69-4d06-a1d3-ddda3708019d", "039d18f9-8af3-4c70-8b73-913a62c42ca1", "cf019f66-1655-4dc2-82c4-9a057bece169"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/node-configuration.md"}}, "b75d40a45b416d38cd18c797e37294662068f687": {"doc_ids": ["532970c8-3a8b-49e5-9abd-a90d003c79da", "3ac1cdaf-9662-4f97-9d6b-b007575938d8", "f173d899-f6ac-4d15-9464-6d31a0bb6c6d", "9f8cb95a-6ccc-4e3c-8b13-015a2a2f6de5", "454bb4f2-54dd-43f6-b8b1-7a56131df743", "2d4f6010-85ef-470c-857e-5783430647da", "08cec817-f4d9-405b-904f-8122c6fd664d", "ce79b4b5-b253-4646-9b88-940c48b0d0be", "389c5fbf-ceb9-48d2-9b33-b3903709a3ea"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notary.md"}}, "741d4a200fee8394e6fb61109a101eb0f93b8069": {"doc_ids": ["09be57be-8427-4eee-a563-6bbf472d3f0c", "b03b9754-6908-49f3-9735-d753f866c90f", "d3963322-8529-417c-8998-6fa447d0909d", "c4244af0-71b2-4341-a7d2-deb94524a1f9", "3a549f42-e38a-4447-8d6c-c00c8cfd1add", "8f778651-c582-4228-8d1f-688b1cd88160", "6a2b6dd9-0a90-4e8d-a62a-221bd160f8e8", "aa36d69f-d114-465c-8893-ce3877b2258f", "8ce95d11-94d1-4d5f-bd5d-7dde3769bd76", "9b902ae6-08a0-46ba-8757-f0009434a967", "7153fb8a-8a3b-4ae3-9bed-a2b5b0673060"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/notifications.md"}}, "8b55b0fb73624beacad6509e70c622514eb5fb50": {"doc_ids": ["f490e9e5-77f0-40eb-b938-3f9e57d662f4"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/oracle.md"}}, "068c55c5e55e9108498dfb5aa1e32096d35386fe": {"doc_ids": ["e23408b1-fd9f-4483-b61a-ff60e8cba19b", "813cc01e-a522-46d6-a807-b3191ee5aa0a", "be0123b0-1ccd-4d48-9598-c05be12101c7", "66d93703-7bf6-4f70-9bc8-51e9869bfda4", "b6ada1ee-b857-40a7-bc2f-c759494f8f01"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/rpc.md"}}, "7930fa385ef54a9514030082df5d2db8f173eeb5": {"doc_ids": ["7dfb607d-10fa-4f11-9663-ec03be69baae"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/stateroots.md"}}, "d5d215e5145e8f1f87474427a4ba7feb8be06225": {"doc_ids": ["f175054a-c70d-4d8a-98d1-2a2c0d630ec0", "51417d5b-7996-484b-8b77-777b739e6267", "c93957ee-48dc-47b7-a84c-2fcba3cd3fb5"], "extra_info": {"file_path": "https://github.com/nspcc-dev/neo-go/blob/master/docs/vm.md"}}, "6d86abe1-c3e7-4a2f-98fd-5fd754d13b14": {"doc_ids": ["09de94f5-3ccd-4ddb-bf66-0c03afe935ac", "da1b6b8b-c1ae-438a-8011-2bb99cc7377c"], "extra_info": {"file_path": "https://fs.neo.org"}}, "c984102b-96b8-4d63-96d0-50e3593207de": {"doc_ids": ["70fae9e4-62e9-4629-a9d2-40cf1e08c6ce", "45f3f08b-6bd9-4539-8ec9-e64743eed1ea"], "extra_info": {"file_path": "https://fs.neo.org/network/"}}, "8d5c364e-bbea-4164-be1f-a697d3b1bc85": {"doc_ids": ["bd51c102-fded-40e1-ada1-a4e3b2531b35", "fed1452f-1123-4670-a23b-e1cf37aadedd"], "extra_info": {"file_path": "https://fs.neo.org/data/"}}, "5817b1e0-4f1b-4eb0-8042-50cbef220bab": {"doc_ids": ["05e83d09-26b8-4c39-9ce3-341200f7df98"], "extra_info": {"file_path": "https://fs.neo.org/audit/"}}, "3cf8ac75-17d2-45f9-983b-96be264f452f": {"doc_ids": ["b4c39f2f-0273-41af-ad16-be00c84ea5d4"], "extra_info": {"file_path": "https://fs.neo.org/pricing/"}}, "260df489-cf5d-48bd-87fb-5513962ef998": {"doc_ids": ["92aa499d-8a2d-4775-8569-457727277746"], "extra_info": {"file_path": "https://fs.neo.org/hosting/"}}, "f728041a-aadb-4eaf-9c6c-8f2d6bb3f5ba": {"doc_ids": ["42eeafd1-c862-43cf-b56f-ad0ce6d162e4"], "extra_info": {"file_path": "https://neospcc.medium.com/neofs-rest-gateway-4994a8ada04"}}, "0244e36b-7bd3-4a6d-982b-99c36271e89f": {"doc_ids": ["ac11b358-3a0c-413f-83a6-25f7e3db9bba", "7ae119f7-cd34-4c78-97c8-3e359bafffa4", "2df83cac-83ac-44b4-88dc-9aee4fb2b10f", "87e9252e-9f99-4687-b2f3-a53f027ff1fb", "c864c9a3-f194-4941-a84b-32993fc929e9", "65b2e529-8e8d-4ccd-ab47-626470553617", "cb62a6ea-2503-407e-b751-1439099ffce1", "90e1a3f2-8299-4885-8ffe-1a321a811c5c", "a8959c5d-e0c9-4698-8a5a-34a5e499874e", "b99322d6-96ac-4eec-babe-058db0c4e1aa", "cea5c4b4-97f7-4a93-be7d-a2a0b97994b9", "9ae4b014-0b83-4905-970a-904987780cc0", "e8b85e73-4f18-4fda-b98f-8771e793464c", "b29aaa44-cdd4-4b8e-9738-61dd0c221368", "61bfe5e7-d80e-4724-85ec-69f149d9bd35", "655e70a1-30a4-457d-b4eb-09988d3d6910", "b21f39c4-6a3f-4d67-81f6-d6d27983440e", "6012082a-0274-430b-ae87-392cd8a10016"], "extra_info": {"file_path": "https://neoline.io/dapi/N3.html"}}, "7a6891e7-37a1-4f88-8e86-81462c0aa00c": {"doc_ids": ["ff1337c7-433a-448a-bbd3-6f74b2fba314", "04d7374f-ddee-487c-86bf-ee78f126bb8b"], "extra_info": {"file_path": "https://neon.coz.io/wksdk/core/index.html"}}, "e8b8f78947e9728f095b1f6e331b60f46fe89707": {"doc_ids": ["6989c740-8184-49ee-ab04-c509ff79caaf"], "extra_info": {"file_path": "https://github.com/CityOfZion/wallet-connect-sdk/blob/main/README.md"}}, "91e0aa3b45c62b81946b2373213cd67a65bf97b4": {"doc_ids": ["7a27155e-d844-4eb2-a1e8-ace72a88b86b", "22880495-38e3-49ea-9f7c-b975894ad719"], "extra_info": {"file_path": "https://github.com/neo-project/neo-modules/blob/master/README.md"}}, "d74edf5761cd6546943abe8777543addfdc504dc": {"doc_ids": ["671d906d-f7c5-4b9f-bc47-83cf7a805534", "5f06d214-890f-49c2-95f1-f0040b8df79e", "5add8527-8444-4c01-a4a3-5ddd9e6deee4", "d9b035ec-225f-4ab6-b4cc-b457e35feb46"], "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/README.md"}}, "77695e28dfe349ea832b066eea56bdeaceb5e426": {"doc_ids": ["cd5bdcc4-1d77-4923-b31d-5d4ce16c535e", "bbb279bb-f780-49c1-b8ac-f5690f68411a", "a9791dd1-9eae-4312-914a-001d13a25528", "98730eb9-92d3-41c3-b296-5ce71f766c21", "88ad2183-652c-4208-83c3-3b6aa5d103b7", "e7e7e3aa-e4cf-468b-8e51-16d56cc43feb"], "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/shell-command-reference.md"}}, "ee00387916acf892b8ab37b4abccab18d9d69c7b": {"doc_ids": ["6a226bf8-b35c-4b8c-806a-9bbcd6114d50", "e6b1106e-7bc2-4704-bc06-9051d36e3f26", "e5c50833-3bf7-4105-b936-e9e290ea9e1d"], "extra_info": {"file_path": "https://github.com/N3developertoolkit/neo-worknet/blob/main/docs/worknet-command-reference.md"}}, "365d09cdc6618e13d8dd7544d455ffa978d98188": {"doc_ids": ["8435fde7-d320-4435-91bd-3e95721ff2e5", "d6cb8f90-f7bf-4490-8459-ea118396e050", "7f29bc6b-c6c3-4634-b92f-5e5b0dbe3048", "d7809d0a-1fb2-4a7f-84f7-a5614d277b97", "14bf9fcd-b121-46bb-abc9-5c470380b7ef", "4be896a9-459b-46f7-909f-53cd7801f418", "a3e39276-eebb-4702-bc87-c667d4d8a074", "1298f5fc-e7a2-4498-b230-3c3811960f04", "fe3329a1-30e9-4f48-97bf-c44d6a6ed212", "fef7fbbe-48f9-40e8-9161-33c0391f4244", "144ac92a-7ec4-4fd4-a27d-99687085d286", "b3251f29-647d-4edd-aefe-e2657242cfd8"], "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/command-reference.md"}}, "1b729e833273f34cb986910ddbd387599f616e12": {"doc_ids": ["a10967bc-7a3a-4851-a7c7-a1e2f3419bb2"], "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/installation.md"}}, "dd3a6b30138b563d7747351bacdf8a0708bb8f43": {"doc_ids": ["d9cec1ac-d0b7-4988-81cd-69743304049f", "8ee4f5d2-2fa8-4614-8dec-cad63572a942", "0058a4c8-3e67-41d5-96b3-b991b3a98f0d", "b3b7dca4-3f25-4134-8e3d-1e8a4a4e8427", "de3762d4-32e5-4159-8ade-464caf09adb3", "683dda1a-27e1-4493-b6bf-b21b58cf32d1"], "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/quickstart.md"}}, "b1c17665553a8ba329e1569f5dc80c82ef842731": {"doc_ids": ["331ccbed-9980-4dc1-b6d8-b4d657198012", "a7a63a8c-de38-4dbf-a267-596542048479"], "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/settings.md"}}, "7d232c62e8b4426f57a48785fe2d0a797da45ad1": {"doc_ids": ["e46c2182-002c-4380-a4e6-27d9a587153b", "888fae8d-77c8-4480-9a26-cd3e70109d61", "80a00ca2-d308-44cb-8a04-1e836fcc68a5"], "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/docs/worknet-command-reference.md"}}, "48e9cdd8935bf98510d801cfe4daf0df59d1b1a6": {"doc_ids": ["b61ed279-35f8-445d-87f0-081852933ddd", "fb335034-59ec-41c4-a975-87d1081dbbff", "ec3453b5-ff7b-498a-b23a-dbb7e9dd2f15"], "extra_info": {"file_path": "https://github.com/neo-project/neo-express/blob/master/readme.md"}}, "14cc11868d0db64989487015342363ea6d9c4189": {"doc_ids": ["978f1088-984f-4875-a3d0-9a91c0f82eb5", "566bdcc1-8f38-4976-adde-d05bdc514371", "f53a1f40-d84f-4114-8a2e-4ac43a9d0431", "a1a05ec0-79d1-4e78-b2d5-e98d83f55644", "4c98955c-0e18-47e7-aab8-7b52dd522785"], "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-config-reference.md"}}, "5e72d28e1101e56ce91d2239928a0860e59342f5": {"doc_ids": ["f2f6f1a9-f72b-4927-b09e-b530aef37330"], "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/debug-evaluate-reference.md"}}, "2f12590d0fb9861fdf6e3ef4a9ac8f3a9ff67490": {"doc_ids": ["3cde811b-45a0-412b-9349-017795e2bb16", "69cc7b5b-7700-4e4d-ac97-38fd02a191c5", "81a4c086-9e38-459f-99de-62117ecfce8e", "5793071f-2cb5-43a7-890e-8116b48a94ba", "09d8f330-9d6f-484c-b0ba-9052fa9ae257", "981b0010-9d62-4687-b931-5bb10a3967f6", "32643326-049b-414a-87ad-adc120270525", "f7dcee18-b5cf-48d7-a6ec-2fed6c5ca2a4", "bd2a7464-0cf9-4cda-ab07-90771abd6808"], "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/storage-schema-overview.md"}}, "03ae15ca1452acd2cf3e7a98ec44e942611db547": {"doc_ids": ["4d7c0f85-136d-497c-b3c8-025554714e98"], "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/docs/visual-studio.md"}}, "e2927400fb41579dda8b1cb448270a5fd926dfd4": {"doc_ids": ["b46f5b8c-acbc-46d1-9dfb-97cccb1fd81b", "58adf050-7c8f-4748-9cee-6d0a3001e09e", "abea4ef7-1e8b-4d30-851d-c395c52ee0ce"], "extra_info": {"file_path": "https://github.com/neo-project/neo-debugger/blob/master/readme.md"}}}}